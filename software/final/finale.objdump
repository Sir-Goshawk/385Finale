
finale.elf:     file format elf32-littlenios2
finale.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0c000230

Program Header:
    LOAD off    0x00001000 vaddr 0x0c000000 paddr 0x0c000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x0c000020 paddr 0x0c000020 align 2**12
         filesz 0x00018a98 memsz 0x00018a98 flags r-x
    LOAD off    0x00019ab8 vaddr 0x0c018ab8 paddr 0x0c01a8d4 align 2**12
         filesz 0x00001e1c memsz 0x00001e1c flags rw-
    LOAD off    0x0001c6f0 vaddr 0x0c01c6f0 paddr 0x0c01c6f0 align 2**12
         filesz 0x00000000 memsz 0x000098e8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  0c000000  0c000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  0c000020  0c000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000182ac  0c000230  0c000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005dc  0c0184dc  0c0184dc  000194dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001e1c  0c018ab8  0c01a8d4  00019ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000098e8  0c01c6f0  0c01c6f0  0001c6f0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  0001b8d4  2**0
                  CONTENTS
  7 .sdram        00000000  0c025fd8  0c025fd8  0001b8d4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001b8d4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000010d8  00000000  00000000  0001b8f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002aa0b  00000000  00000000  0001c9d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000aa40  00000000  00000000  000473db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e055  00000000  00000000  00051e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002d3c  00000000  00000000  0005fe70  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000450f  00000000  00000000  00062bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001cd0a  00000000  00000000  000670bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00083dc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001b40  00000000  00000000  00083e08  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00089699  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0008969c  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000896a8  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000896a9  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000896aa  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000896ae  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000896b2  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000896b6  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000896c1  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000896cc  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000006  00000000  00000000  000896d7  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000000f  00000000  00000000  000896dd  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0008a4ea  00000000  00000000  000896ec  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
0c000000 l    d  .entry	00000000 .entry
0c000020 l    d  .exceptions	00000000 .exceptions
0c000230 l    d  .text	00000000 .text
0c0184dc l    d  .rodata	00000000 .rodata
0c018ab8 l    d  .rwdata	00000000 .rwdata
0c01c6f0 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
0c025fd8 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../finale_bsp//obj/HAL/src/crt0.o
0c000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 USB_drive.c
0c01a874 l     O .rwdata	00000001 addr
00000000 l    df *ABS*	00000000 main.c
0c01a880 l     O .rwdata	00000004 vga_ctrl
0c018ab8 l     O .rwdata	00000170 colors
00000000 l    df *ABS*	00000000 text_mode_vga_color.c
0c01a884 l     O .rwdata	00000004 vga_ctrl
0c018c28 l     O .rwdata	00000170 colors
00000000 l    df *ABS*	00000000 HID.c
00000000 l    df *ABS*	00000000 MAX3421E.c
00000000 l    df *ABS*	00000000 transfer.c
0c01c700 l     O .bss	00000004 usb_delay.2608
0c01c704 l     O .bss	00000001 tmp_addr.2609
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0c0187be l     O .rodata	00000010 zeroes.4389
0c0187ce l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
0c0187de l     O .rodata	00000010 zeroes.4404
0c0096d4 l     F .text	000000bc __sbprintf
0c0187ee l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0c0098e4 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0c00b43c l     F .text	00000008 __fp_unlock
0c00b450 l     F .text	0000019c __sinit.part.1
0c00b5ec l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0c018dc8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0c01920c l     O .rwdata	00000020 lc_ctype_charset
0c0191ec l     O .rwdata	00000020 lc_message_charset
0c01922c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0c018820 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0c018944 l     O .rodata	00000010 zeroes.4333
0c018954 l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 vfprintf.c
0c010030 l     F .text	000000fc __sprint_r.part.0
0c018964 l     O .rodata	00000010 zeroes.4349
0c01166c l     F .text	000000bc __sbprintf
0c018974 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0c0155e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0c0156f8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0c015724 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0c015818 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0c015900 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0c0159ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0c015e30 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0c01a8c4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0c016278 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0c0163b4 l     F .text	00000034 alt_dev_reg
0c019814 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0c0166a8 l     F .text	0000020c altera_avalon_jtag_uart_irq
0c0168b4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0c0170e8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0c017480 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0c0178e0 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0c017a40 l     F .text	0000003c alt_get_errno
0c017a7c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0c01c73c g     O .bss	00000004 alt_instruction_exception_handler
0c00e104 g     F .text	00000074 _mprec_log10
0c00e1f0 g     F .text	0000008c __any_on
0c011c20 g     F .text	00000054 _isatty_r
0c01882c g     O .rodata	00000028 __mprec_tinytens
0c015b04 g     F .text	0000007c alt_main
0c01a888 g     O .rwdata	00000008 ctrl_xfers
0c004e74 g     F .text	000000c0 _puts_r
0c025ed8 g     O .bss	00000100 alt_irq
0c011c74 g     F .text	00000060 _lseek_r
0c0043e0 g     F .text	00000644 USB_Task
0c01a8d4 g       *ABS*	00000000 __flash_rwdata_start
0c013fbc g     F .text	00000088 .hidden __eqdf2
0c025fd8 g       *ABS*	00000000 __alt_heap_start
0c004e38 g     F .text	0000003c printf
0c011e8c g     F .text	0000009c _wcrtomb_r
0c003490 g     F .text	00000088 kbdPoll
0c01a87c g     O .rwdata	00000004 yGol
0c00e980 g     F .text	0000005c __sseek
0c00b79c g     F .text	00000010 __sinit
0c011d34 g     F .text	00000140 __swbuf_r
0c00c270 g     F .text	0000007c _setlocale_r
0c00b5f4 g     F .text	00000078 __sfmoreglue
0c015ba4 g     F .text	00000024 __malloc_unlock
0c002460 g     F .text	000002b4 textVGAColorScreenSaver
0c00026c g     F .text	000001f0 GetDriverandReport
0c00076c g     F .text	00000d10 keyInput
0c00cf40 g     F .text	0000015c memmove
0c00b784 g     F .text	00000018 _cleanup
0c00d1c4 g     F .text	000000a8 _Balloc
0c0035e4 g     F .text	00000088 MAXreg_wr
0c018d98 g     O .rwdata	00000030 ClientDriverTable
0c014044 g     F .text	000000dc .hidden __gtdf2
0c017cc4 g     F .text	00000024 altera_nios2_gen2_irq_init
0c004a24 g     F .text	0000002c MSDProbe
0c000000 g     F .entry	0000000c __reset
0c003ee0 g     F .text	000000e8 XferCtrlData
0c000020 g       *ABS*	00000000 __flash_exceptions_start
0c01c740 g     O .bss	00000010 hid_ep
0c011bc4 g     F .text	0000005c _fstat_r
0c01c720 g     O .bss	00000004 errno
0c00e8fc g     F .text	00000008 __seofread
0c00ec90 g     F .text	000013a0 ___svfiprintf_internal_r
0c01c728 g     O .bss	00000004 alt_argv
0c022874 g       *ABS*	00000000 _gp
0c016248 g     F .text	00000030 usleep
0c0037d4 g     F .text	00000074 MAXreg_rd
0c0020d8 g     F .text	00000050 textVGAColorClr
0c019694 g     O .rwdata	00000180 alt_fd_list
0c0033c8 g     F .text	00000040 HID_init
0c017ce8 g     F .text	00000090 alt_find_dev
0c00cdf8 g     F .text	00000148 memcpy
0c00b444 g     F .text	0000000c _cleanup_r
0c0153fc g     F .text	000000dc .hidden __floatsidf
0c0179c4 g     F .text	0000007c alt_io_redirect
0c014120 g     F .text	000000f4 .hidden __ltdf2
0c0184dc g       *ABS*	00000000 __DTOR_END__
0c004f34 g     F .text	00000014 puts
0c017f44 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0c00e7e0 g     F .text	00000074 __fpclassifyd
0c00e060 g     F .text	000000a4 __ratio
0c00147c g     F .text	00000070 setEdge
0c011650 g     F .text	0000001c __vfiprintf_internal
0c016aac g     F .text	0000021c altera_avalon_jtag_uart_read
0c004e08 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0c004d24 g     F .text	00000064 .hidden __udivsi3
0c015854 g     F .text	000000ac isatty
0c01887c g     O .rodata	000000c8 __mprec_tens
0c00c2ec g     F .text	0000000c __locale_charset
0c01c71c g     O .bss	00000004 __malloc_top_pad
0c01a890 g     O .rwdata	00000001 usb_task_state
0c01a89c g     O .rwdata	00000004 __mb_cur_max
0c00c31c g     F .text	0000000c _localeconv_r
0c00d5f8 g     F .text	0000003c __i2b
0c00bc20 g     F .text	000004c8 __sfvwrite_r
0c00e854 g     F .text	00000054 _sbrk_r
0c011cd4 g     F .text	00000060 _read_r
0c003b9c g     F .text	00000094 MAX3421E_init
0c01c790 g     O .bss	00004b00 grid
0c000738 g     F .text	00000034 setKeycode
0c01a8bc g     O .rwdata	00000004 alt_max_fd
0c0118b8 g     F .text	000000f0 _fclose_r
0c00b40c g     F .text	00000030 fflush
0c01c718 g     O .bss	00000004 __malloc_max_sbrked_mem
0c012d40 g     F .text	000008ac .hidden __adddf3
0c00de08 g     F .text	0000010c __b2d
0c01277c g     F .text	000005c4 .hidden __umoddi3
0c015a28 g     F .text	000000dc lseek
0c01a894 g     O .rwdata	00000004 _global_impure_ptr
0c001558 g     F .text	00000074 setColor
0c00e27c g     F .text	00000564 _realloc_r
0c025fd8 g       *ABS*	00000000 __bss_end
0c0177f0 g     F .text	000000f0 alt_iic_isr_register
0c016140 g     F .text	00000108 alt_tick
0c012180 g     F .text	000005fc .hidden __udivdi3
0c011b20 g     F .text	00000024 _fputwc_r
0c018854 g     O .rodata	00000028 __mprec_bigtens
0c00d3dc g     F .text	00000104 __s2b
0c0154d8 g     F .text	000000a8 .hidden __floatunsidf
0c00db48 g     F .text	00000060 __mcmp
0c00b7bc g     F .text	00000018 __fp_lock_all
0c0177a4 g     F .text	0000004c alt_ic_irq_enabled
0c001dd4 g     F .text	00000148 readjustScreen
0c0160a4 g     F .text	0000009c alt_alarm_stop
0c01c738 g     O .bss	00000004 alt_irq_active
0c004aec g     F .text	0000002c DummyProbe
0c0000fc g     F .exceptions	000000d4 alt_irq_handler
0c01966c g     O .rwdata	00000028 alt_dev_null
0c003408 g     F .text	00000088 mousePoll
0c0039f0 g     F .text	00000024 Vbus_power
0c017460 g     F .text	00000020 alt_dcache_flush_all
0c00d4e0 g     F .text	00000068 __hi0bits
0c01537c g     F .text	00000080 .hidden __fixdfsi
0c01a878 g     O .rwdata	00000004 xGol
0c01a8d4 g       *ABS*	00000000 __ram_rwdata_end
0c01a8b4 g     O .rwdata	00000008 alt_dev_list
0c0162b4 g     F .text	00000100 write
0c0180a8 g     F .text	000000a0 _putc_r
0c018ab8 g       *ABS*	00000000 __ram_rodata_end
0c01c705 g     O .bss	00000001 usb_error
0c015760 g     F .text	000000b8 fstat
0c014120 g     F .text	000000f4 .hidden __ledf2
0c021290 g     O .bss	00004b00 colorValue
0c00d8c0 g     F .text	00000140 __pow5mult
0c010144 g     F .text	0000150c ___vfiprintf_internal_r
0c01c710 g     O .bss	00000004 __nlocale_changed
0c004d88 g     F .text	00000058 .hidden __umodsi3
0c025fd8 g       *ABS*	00000000 end
0c0165e8 g     F .text	000000c0 altera_avalon_jtag_uart_init
0c0001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0c00403c g     F .text	0000017c XferDispatchPkt
0c0184dc g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
0c017160 g     F .text	0000007c alt_avalon_timer_sc_init
0c015580 g     F .text	00000064 .hidden __clzsi2
0c002780 g     F .text	00000438 userControlledBlock
0c016cc8 g     F .text	00000224 altera_avalon_jtag_uart_write
0c00b7ac g     F .text	00000004 __sfp_lock_acquire
0c00cd14 g     F .text	000000e4 memchr
0c0073dc g     F .text	000022dc ___vfprintf_internal_r
0c003d60 g     F .text	00000034 MaxGpxHandler
0c004fc4 g     F .text	00000058 _sprintf_r
0c00b910 g     F .text	00000310 _free_r
0c015bc8 g     F .text	0000022c alt_printf
0c00c2f8 g     F .text	00000010 __locale_mb_cur_max
0c018328 g     F .text	00000180 __call_exitprocs
0c01c70c g     O .bss	00000004 __mlocale_changed
0c01a8a0 g     O .rwdata	00000004 __malloc_sbrk_base
0c000230 g     F .text	0000003c _start
0c01c730 g     O .bss	00000004 _alt_tick_rate
0c003848 g     F .text	00000108 MAXbytes_rd
0c004f60 g     F .text	00000064 rand
0c00da00 g     F .text	00000148 __lshift
0c016eec g     F .text	000001fc alt_avalon_spi_command
0c01c734 g     O .bss	00000004 _alt_nticks
0c015e6c g     F .text	00000104 read
0c016420 g     F .text	00000064 alt_sys_init
0c00eac0 g     F .text	000001d0 __ssprint_r
0c025e90 g     O .bss	00000048 devtable
0c018210 g     F .text	00000118 __register_exitproc
0c002fc0 g     F .text	00000408 HIDKProbe
0c01c750 g     O .bss	00000018 msd_ep
0c00d634 g     F .text	0000028c __multiply
0c016954 g     F .text	00000068 altera_avalon_jtag_uart_close
0c004348 g     F .text	00000098 USB_init
0c025d90 g     O .bss	00000100 bigbuf
0c004de0 g     F .text	00000028 .hidden __mulsi3
0c018ab8 g       *ABS*	00000000 __ram_rwdata_start
0c0184dc g       *ABS*	00000000 __ram_rodata_start
0c01c768 g     O .bss	00000028 __malloc_current_mallinfo
0c01c6fc g     O .bss	00000001 last_usb_task_state
0c00df14 g     F .text	0000014c __d2b
0c01c6f4 g     O .bss	00000008 dev0ep
0c0004a0 g     F .text	00000048 clearLED
0c016484 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0c017e80 g     F .text	000000c4 alt_get_fd
0c017308 g     F .text	00000158 alt_busy_sleep
0c004a50 g     F .text	00000038 MSDEventHandler
0c011788 g     F .text	00000054 _close_r
0c01802c g     F .text	0000007c memcmp
0c016544 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0c025fd8 g       *ABS*	00000000 __alt_stack_base
0c016594 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0c009790 g     F .text	00000154 __swsetup_r
0c001d40 g     F .text	00000094 checkRow
0c0135ec g     F .text	000009d0 .hidden __divdf3
0c0014ec g     F .text	0000006c clearEdge
0c00b66c g     F .text	00000118 __sfp
0c00e178 g     F .text	00000078 __copybits
0c019264 g     O .rwdata	00000408 __malloc_av_
0c00b7b8 g     F .text	00000004 __sinit_lock_release
0c004ab4 g     F .text	00000038 CDCEventHandler
0c014214 g     F .text	0000086c .hidden __muldf3
0c004b18 g     F .text	00000038 DummyEventHandler
0c00e8a8 g     F .text	00000054 __sread
0c017d78 g     F .text	00000108 alt_find_file
0c0174bc g     F .text	000000a4 alt_dev_llist_insert
0c015b80 g     F .text	00000024 __malloc_lock
0c015ff4 g     F .text	000000b0 sbrk
0c005120 g     F .text	000022bc ___svfprintf_internal_r
0c00b3b0 g     F .text	0000005c _fflush_r
0c0117dc g     F .text	000000dc _calloc_r
0c01c6f0 g       *ABS*	00000000 __bss_start
0c003a14 g     F .text	00000188 MAX_busprobe
0c01c6f0 g     O .bss	00000002 hid_device
0c00d09c g     F .text	00000128 memset
0c001fd0 g     F .text	00000108 main
0c003c30 g     F .text	00000064 MAX3421E_Task
0c01c72c g     O .bss	00000004 alt_envp
0c01c714 g     O .bss	00000004 __malloc_max_total_mem
0c0164e4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0c011e74 g     F .text	00000018 __swbuf
0c004f48 g     F .text	00000018 srand
0c004ba8 g     F .text	00000084 ConvUTF8ToStr
0c00e9dc g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
0c002360 g     F .text	00000100 screenVGAinitializer
0c0119a8 g     F .text	00000014 fclose
0c002714 g     F .text	0000006c VGADrawColorBox
0c009b0c g     F .text	00001688 _dtoa_r
0c00c508 g     F .text	0000080c _malloc_r
0c011fe8 g     F .text	00000030 __ascii_wctomb
0c01a8c0 g     O .rwdata	00000004 alt_errno
0c00c0e8 g     F .text	000000c4 _fwalk
0c018148 g     F .text	000000c8 putc
0c004c2c g     F .text	00000084 .hidden __divsi3
0c0041b8 g     F .text	00000190 XferInTransfer
0c002238 g     F .text	00000128 setColorPalette
0c000600 g     F .text	00000138 printSignedHex1
0c00b7ec g     F .text	00000124 _malloc_trim_r
0c0184dc g       *ABS*	00000000 __CTOR_END__
0c004b70 g     F .text	00000038 GetDevtable
0c00e9e4 g     F .text	000000dc strcmp
0c0184dc g       *ABS*	00000000 __flash_rodata_start
0c0184dc g       *ABS*	00000000 __DTOR_LIST__
0c003fc8 g     F .text	00000074 XferCtrlND
0c013fbc g     F .text	00000088 .hidden __nedf2
0c003950 g     F .text	000000a0 MAX3421E_reset
0c0163e8 g     F .text	00000038 alt_irq_init
0c015f70 g     F .text	00000084 alt_release_fd
0c00501c g     F .text	0000006c sprintf
0c018984 g     O .rodata	00000100 .hidden __clz_tab
0c01c708 g     O .bss	00000004 _PathLocale
0c017fe0 g     F .text	00000014 atexit
0c011728 g     F .text	00000060 _write_r
0c00c328 g     F .text	00000018 setlocale
0c01a898 g     O .rwdata	00000004 _impure_ptr
0c01c724 g     O .bss	00000004 alt_argc
0c00b194 g     F .text	0000021c __sflush_r
0c0175c0 g     F .text	00000060 _do_dtors
0c00c314 g     F .text	00000008 __locale_cjk_lang
0c00366c g     F .text	00000168 MAXbytes_wr
0c000020 g       .exceptions	00000000 alt_irq_entry
0c00dda4 g     F .text	00000064 __ulp
0c00b7d4 g     F .text	00000018 __fp_unlock_all
0c0015cc g     F .text	00000774 userControlledBlockGrid
0c01a8ac g     O .rwdata	00000008 alt_fs_list
0c004a88 g     F .text	0000002c CDCProbe
0c000020 g       *ABS*	00000000 __ram_exceptions_start
0c00c340 g     F .text	0000000c localeconv
0c00045c g     F .text	00000044 setLED
0c004b50 g     F .text	00000020 GetUsbTaskState
0c001f1c g     F .text	000000b4 paintScreen
0c017640 g     F .text	00000050 alt_ic_isr_register
0c018518 g     O .rodata	00000010 devclasses
0c01a8d4 g       *ABS*	00000000 _edata
0c003550 g     F .text	00000038 HIDKEventHandler
0c025fd8 g       *ABS*	00000000 _end
0c003c94 g     F .text	000000cc MaxIntHandler
0c0119bc g     F .text	00000164 __fputwc
0c000230 g       *ABS*	00000000 __ram_exceptions_end
0c0169bc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0c002128 g     F .text	00000110 textVGADrawColorText
0c003588 g     F .text	00000034 SPI_init
0c017718 g     F .text	0000008c alt_ic_irq_disable
0c00e904 g     F .text	0000007c __swrite
0c01a8a4 g     O .rwdata	00000004 __malloc_trim_threshold
0c00c308 g     F .text	0000000c __locale_msgcharset
0c017ff4 g     F .text	00000038 exit
0c00c1ac g     F .text	000000c4 _fwalk_reent
0c00dba8 g     F .text	000001fc __mdiff
0c004cb0 g     F .text	00000074 .hidden __modsi3
10000000 g       *ABS*	00000000 __alt_data_end
0c000020 g     F .exceptions	00000000 alt_exception
0c00b7b0 g     F .text	00000004 __sfp_lock_release
0c000000 g       *ABS*	00000000 __alt_mem_sdram
0c003518 g     F .text	00000038 HIDMEventHandler
0c0184a8 g     F .text	00000034 _exit
0c0171dc g     F .text	0000012c alt_alarm_start
0c0004e8 g     F .text	00000118 printSignedHex0
0c012074 g     F .text	0000010c .hidden __muldi3
0c00c34c g     F .text	000001bc __smakebuf_r
0c005088 g     F .text	00000098 strlen
0c017b68 g     F .text	0000015c open
0c014044 g     F .text	000000dc .hidden __gedf2
0c015df4 g     F .text	0000003c alt_putchar
0c01a8a8 g     O .rwdata	00000004 __wctomb
0c01012c g     F .text	00000018 __sprint_r
0c017620 g     F .text	00000020 alt_icache_flush_all
0c01a8d0 g     O .rwdata	00000004 alt_priority_mask
0c017690 g     F .text	00000088 alt_ic_irq_enable
0c0096b8 g     F .text	0000001c __vfprintf_internal
0c002bb8 g     F .text	00000408 HIDMProbe
0c012018 g     F .text	0000005c _wctomb_r
0c0035bc g     F .text	00000028 SPI_wr
0c014a80 g     F .text	000008fc .hidden __subdf3
0c00d548 g     F .text	000000b0 __lo0bits
0c01a8c8 g     O .rwdata	00000008 alt_alarm_list
0c017560 g     F .text	00000060 _do_ctors
0c011f28 g     F .text	000000c0 wcrtomb
0c015620 g     F .text	000000d8 close
0c015968 g     F .text	00000084 alt_load
0c011b44 g     F .text	00000080 fputwc
0c00b7b4 g     F .text	00000004 __sinit_lock_acquire
0c003d94 g     F .text	0000014c XferCtrlReq
0c00d294 g     F .text	00000148 __multadd
0c00d26c g     F .text	00000028 _Bfree



Disassembly of section .entry:

0c000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 c000000:	00430034 	movhi	at,3072
    ori r1, r1, %lo(_start)
 c000004:	08408c14 	ori	at,at,560
    jmp r1
 c000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

0c000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 c000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 c000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 c000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 c00002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 c000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 c000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 c000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 c00003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 c000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 c000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 c000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 c00004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 c000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 c000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 c000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 c00005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 c000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 c000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 c000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 c00006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 c000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 c000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 c000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 c00007c:	10000326 	beq	r2,zero,c00008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 c000080:	20000226 	beq	r4,zero,c00008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 c000084:	c0000fc0 	call	c0000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 c000088:	00000706 	br	c0000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 c00008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 c000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 c000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 c000098:	c0001d00 	call	c0001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 c00009c:	1000021e 	bne	r2,zero,c0000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 c0000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 c0000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 c0000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 c0000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 c0000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 c0000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 c0000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 c0000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 c0000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 c0000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 c0000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 c0000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 c0000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 c0000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 c0000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 c0000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 c0000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 c0000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 c0000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 c0000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 c0000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 c0000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 c0000f8:	ef80083a 	eret

0c0000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 c0000fc:	defff904 	addi	sp,sp,-28
 c000100:	dfc00615 	stw	ra,24(sp)
 c000104:	df000515 	stw	fp,20(sp)
 c000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 c00010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 c000110:	0005313a 	rdctl	r2,ipending
 c000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 c000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 c00011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 c000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 c000124:	00800044 	movi	r2,1
 c000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 c00012c:	e0fffb17 	ldw	r3,-20(fp)
 c000130:	e0bffc17 	ldw	r2,-16(fp)
 c000134:	1884703a 	and	r2,r3,r2
 c000138:	10001426 	beq	r2,zero,c00018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 c00013c:	008300b4 	movhi	r2,3074
 c000140:	1097b604 	addi	r2,r2,24280
 c000144:	e0fffd17 	ldw	r3,-12(fp)
 c000148:	180690fa 	slli	r3,r3,3
 c00014c:	10c5883a 	add	r2,r2,r3
 c000150:	10c00017 	ldw	r3,0(r2)
 c000154:	008300b4 	movhi	r2,3074
 c000158:	1097b604 	addi	r2,r2,24280
 c00015c:	e13ffd17 	ldw	r4,-12(fp)
 c000160:	200890fa 	slli	r4,r4,3
 c000164:	1105883a 	add	r2,r2,r4
 c000168:	10800104 	addi	r2,r2,4
 c00016c:	10800017 	ldw	r2,0(r2)
 c000170:	1009883a 	mov	r4,r2
 c000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 c000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 c00017c:	0005313a 	rdctl	r2,ipending
 c000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 c000184:	e0bfff17 	ldw	r2,-4(fp)
 c000188:	00000706 	br	c0001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 c00018c:	e0bffc17 	ldw	r2,-16(fp)
 c000190:	1085883a 	add	r2,r2,r2
 c000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 c000198:	e0bffd17 	ldw	r2,-12(fp)
 c00019c:	10800044 	addi	r2,r2,1
 c0001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 c0001a4:	003fe106 	br	c00012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 c0001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 c0001ac:	e0bffb17 	ldw	r2,-20(fp)
 c0001b0:	103fdb1e 	bne	r2,zero,c000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 c0001b4:	0001883a 	nop
}
 c0001b8:	0001883a 	nop
 c0001bc:	e037883a 	mov	sp,fp
 c0001c0:	dfc00117 	ldw	ra,4(sp)
 c0001c4:	df000017 	ldw	fp,0(sp)
 c0001c8:	dec00204 	addi	sp,sp,8
 c0001cc:	f800283a 	ret

0c0001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 c0001d0:	defffb04 	addi	sp,sp,-20
 c0001d4:	dfc00415 	stw	ra,16(sp)
 c0001d8:	df000315 	stw	fp,12(sp)
 c0001dc:	df000304 	addi	fp,sp,12
 c0001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 c0001e4:	00bfffc4 	movi	r2,-1
 c0001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 c0001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 c0001f0:	d0a7b217 	ldw	r2,-24888(gp)
 c0001f4:	10000726 	beq	r2,zero,c000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 c0001f8:	d0a7b217 	ldw	r2,-24888(gp)
 c0001fc:	e0fffd17 	ldw	r3,-12(fp)
 c000200:	e1bffe17 	ldw	r6,-8(fp)
 c000204:	e17fff17 	ldw	r5,-4(fp)
 c000208:	1809883a 	mov	r4,r3
 c00020c:	103ee83a 	callr	r2
 c000210:	00000206 	br	c00021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 c000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 c000218:	0005883a 	mov	r2,zero
}
 c00021c:	e037883a 	mov	sp,fp
 c000220:	dfc00117 	ldw	ra,4(sp)
 c000224:	df000017 	ldw	fp,0(sp)
 c000228:	dec00204 	addi	sp,sp,8
 c00022c:	f800283a 	ret

Disassembly of section .text:

0c000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 c000230:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 c000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 c000238:	068300b4 	movhi	gp,3074
    ori gp, gp, %lo(_gp)
 c00023c:	d68a1d14 	ori	gp,gp,10356
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 c000240:	00830074 	movhi	r2,3073
    ori r2, r2, %lo(__bss_start)
 c000244:	10b1bc14 	ori	r2,r2,50928

    movhi r3, %hi(__bss_end)
 c000248:	00c300b4 	movhi	r3,3074
    ori r3, r3, %lo(__bss_end)
 c00024c:	18d7f614 	ori	r3,r3,24536

    beq r2, r3, 1f
 c000250:	10c00326 	beq	r2,r3,c000260 <_start+0x30>

0:
    stw zero, (r2)
 c000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 c000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 c00025c:	10fffd36 	bltu	r2,r3,c000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 c000260:	c0159680 	call	c015968 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 c000264:	c015b040 	call	c015b04 <alt_main>

0c000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 c000268:	003fff06 	br	c000268 <__alt_data_end+0xfc000268>

0c00026c <GetDriverandReport>:
//the bottom if
int grid[60][80];
int colorValue[60][80];
int xGol = 40, yGol = 30;

BYTE GetDriverandReport() {
 c00026c:	defff604 	addi	sp,sp,-40
 c000270:	dfc00915 	stw	ra,36(sp)
 c000274:	df000815 	stw	fp,32(sp)
 c000278:	df000804 	addi	fp,sp,32
	BYTE i;
	BYTE rcode;
	BYTE device = 0xFF;
 c00027c:	00bfffc4 	movi	r2,-1
 c000280:	e0bffd45 	stb	r2,-11(fp)
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
 c000284:	010300b4 	movhi	r4,3074
 c000288:	21214a04 	addi	r4,r4,-31448
 c00028c:	c004f340 	call	c004f34 <puts>
	for (i = 1; i < USB_NUMDEVICES; i++) {
 c000290:	00800044 	movi	r2,1
 c000294:	e0bffd05 	stb	r2,-12(fp)
 c000298:	00001f06 	br	c000318 <GetDriverandReport+0xac>
		tpl_ptr = GetDevtable(i);
 c00029c:	e0bffd03 	ldbu	r2,-12(fp)
 c0002a0:	1009883a 	mov	r4,r2
 c0002a4:	c004b700 	call	c004b70 <GetDevtable>
 c0002a8:	e0bffe15 	stw	r2,-8(fp)
		if (tpl_ptr->epinfo != NULL) {
 c0002ac:	e0bffe17 	ldw	r2,-8(fp)
 c0002b0:	10800017 	ldw	r2,0(r2)
 c0002b4:	10001526 	beq	r2,zero,c00030c <GetDriverandReport+0xa0>
			printf("Device: %d", i);
 c0002b8:	e0bffd03 	ldbu	r2,-12(fp)
 c0002bc:	100b883a 	mov	r5,r2
 c0002c0:	010300b4 	movhi	r4,3074
 c0002c4:	21215304 	addi	r4,r4,-31412
 c0002c8:	c004e380 	call	c004e38 <printf>
			printf("%s \n", devclasses[tpl_ptr->devclass]);
 c0002cc:	e0bffe17 	ldw	r2,-8(fp)
 c0002d0:	10800103 	ldbu	r2,4(r2)
 c0002d4:	10c03fcc 	andi	r3,r2,255
 c0002d8:	008300b4 	movhi	r2,3074
 c0002dc:	10a14604 	addi	r2,r2,-31464
 c0002e0:	18c7883a 	add	r3,r3,r3
 c0002e4:	18c7883a 	add	r3,r3,r3
 c0002e8:	10c5883a 	add	r2,r2,r3
 c0002ec:	10800017 	ldw	r2,0(r2)
 c0002f0:	100b883a 	mov	r5,r2
 c0002f4:	010300b4 	movhi	r4,3074
 c0002f8:	21215604 	addi	r4,r4,-31400
 c0002fc:	c004e380 	call	c004e38 <printf>
			device = tpl_ptr->devclass;
 c000300:	e0bffe17 	ldw	r2,-8(fp)
 c000304:	10800103 	ldbu	r2,4(r2)
 c000308:	e0bffd45 	stb	r2,-11(fp)
	BYTE device = 0xFF;
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
	for (i = 1; i < USB_NUMDEVICES; i++) {
 c00030c:	e0bffd03 	ldbu	r2,-12(fp)
 c000310:	10800044 	addi	r2,r2,1
 c000314:	e0bffd05 	stb	r2,-12(fp)
 c000318:	e0bffd03 	ldbu	r2,-12(fp)
 c00031c:	10800230 	cmpltui	r2,r2,8
 c000320:	103fde1e 	bne	r2,zero,c00029c <__alt_data_end+0xfc00029c>
			printf("%s \n", devclasses[tpl_ptr->devclass]);
			device = tpl_ptr->devclass;
		}
	}
	//Query rate and protocol
	rcode = XferGetIdle(addr, 0, hid_device.interface, 0, &tmpbyte);
 c000324:	d0a00003 	ldbu	r2,-32768(gp)
 c000328:	11003fcc 	andi	r4,r2,255
 c00032c:	d0a79f43 	ldbu	r2,-24963(gp)
 c000330:	10803fcc 	andi	r2,r2,255
 c000334:	e0ffff44 	addi	r3,fp,-3
 c000338:	d8c00415 	stw	r3,16(sp)
 c00033c:	00c00044 	movi	r3,1
 c000340:	d8c00315 	stw	r3,12(sp)
 c000344:	d8800215 	stw	r2,8(sp)
 c000348:	d8000115 	stw	zero,4(sp)
 c00034c:	d8000015 	stw	zero,0(sp)
 c000350:	01c00084 	movi	r7,2
 c000354:	01802844 	movi	r6,161
 c000358:	000b883a 	mov	r5,zero
 c00035c:	c003d940 	call	c003d94 <XferCtrlReq>
 c000360:	e0bfff05 	stb	r2,-4(fp)
	if (rcode) {   //error handling
 c000364:	e0bfff03 	ldbu	r2,-4(fp)
 c000368:	10000926 	beq	r2,zero,c000390 <GetDriverandReport+0x124>
		printf("GetIdle Error. Error code: ");
 c00036c:	010300b4 	movhi	r4,3074
 c000370:	21215804 	addi	r4,r4,-31392
 c000374:	c004e380 	call	c004e38 <printf>
		printf("%x \n", rcode);
 c000378:	e0bfff03 	ldbu	r2,-4(fp)
 c00037c:	100b883a 	mov	r5,r2
 c000380:	010300b4 	movhi	r4,3074
 c000384:	21215f04 	addi	r4,r4,-31364
 c000388:	c004e380 	call	c004e38 <printf>
 c00038c:	00000906 	br	c0003b4 <GetDriverandReport+0x148>
	} else {
		printf("Update rate: ");
 c000390:	010300b4 	movhi	r4,3074
 c000394:	21216104 	addi	r4,r4,-31356
 c000398:	c004e380 	call	c004e38 <printf>
		printf("%x \n", tmpbyte);
 c00039c:	e0bfff43 	ldbu	r2,-3(fp)
 c0003a0:	10803fcc 	andi	r2,r2,255
 c0003a4:	100b883a 	mov	r5,r2
 c0003a8:	010300b4 	movhi	r4,3074
 c0003ac:	21215f04 	addi	r4,r4,-31364
 c0003b0:	c004e380 	call	c004e38 <printf>
	}
	printf("Protocol: ");
 c0003b4:	010300b4 	movhi	r4,3074
 c0003b8:	21216504 	addi	r4,r4,-31340
 c0003bc:	c004e380 	call	c004e38 <printf>
	rcode = XferGetProto(addr, 0, hid_device.interface, &tmpbyte);
 c0003c0:	d0a00003 	ldbu	r2,-32768(gp)
 c0003c4:	11003fcc 	andi	r4,r2,255
 c0003c8:	d0a79f43 	ldbu	r2,-24963(gp)
 c0003cc:	10803fcc 	andi	r2,r2,255
 c0003d0:	e0ffff44 	addi	r3,fp,-3
 c0003d4:	d8c00415 	stw	r3,16(sp)
 c0003d8:	00c00044 	movi	r3,1
 c0003dc:	d8c00315 	stw	r3,12(sp)
 c0003e0:	d8800215 	stw	r2,8(sp)
 c0003e4:	d8000115 	stw	zero,4(sp)
 c0003e8:	d8000015 	stw	zero,0(sp)
 c0003ec:	01c000c4 	movi	r7,3
 c0003f0:	01802844 	movi	r6,161
 c0003f4:	000b883a 	mov	r5,zero
 c0003f8:	c003d940 	call	c003d94 <XferCtrlReq>
 c0003fc:	e0bfff05 	stb	r2,-4(fp)
	if (rcode) {   //error handling
 c000400:	e0bfff03 	ldbu	r2,-4(fp)
 c000404:	10000926 	beq	r2,zero,c00042c <GetDriverandReport+0x1c0>
		printf("GetProto Error. Error code ");
 c000408:	010300b4 	movhi	r4,3074
 c00040c:	21216804 	addi	r4,r4,-31328
 c000410:	c004e380 	call	c004e38 <printf>
		printf("%x \n", rcode);
 c000414:	e0bfff03 	ldbu	r2,-4(fp)
 c000418:	100b883a 	mov	r5,r2
 c00041c:	010300b4 	movhi	r4,3074
 c000420:	21215f04 	addi	r4,r4,-31364
 c000424:	c004e380 	call	c004e38 <printf>
 c000428:	00000606 	br	c000444 <GetDriverandReport+0x1d8>
	} else {
		printf("%d \n", tmpbyte);
 c00042c:	e0bfff43 	ldbu	r2,-3(fp)
 c000430:	10803fcc 	andi	r2,r2,255
 c000434:	100b883a 	mov	r5,r2
 c000438:	010300b4 	movhi	r4,3074
 c00043c:	21216f04 	addi	r4,r4,-31300
 c000440:	c004e380 	call	c004e38 <printf>
	}
	return device;
 c000444:	e0bffd43 	ldbu	r2,-11(fp)
}
 c000448:	e037883a 	mov	sp,fp
 c00044c:	dfc00117 	ldw	ra,4(sp)
 c000450:	df000017 	ldw	fp,0(sp)
 c000454:	dec00204 	addi	sp,sp,8
 c000458:	f800283a 	ret

0c00045c <setLED>:

void setLED(int LED) {
 c00045c:	defffe04 	addi	sp,sp,-8
 c000460:	df000115 	stw	fp,4(sp)
 c000464:	df000104 	addi	fp,sp,4
 c000468:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
 c00046c:	00806804 	movi	r2,416
 c000470:	10c00037 	ldwio	r3,0(r2)
 c000474:	01000044 	movi	r4,1
 c000478:	e0bfff17 	ldw	r2,-4(fp)
 c00047c:	2084983a 	sll	r2,r4,r2
 c000480:	1886b03a 	or	r3,r3,r2
 c000484:	00806804 	movi	r2,416
 c000488:	10c00035 	stwio	r3,0(r2)
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) | (0x001 << LED)));
}
 c00048c:	0001883a 	nop
 c000490:	e037883a 	mov	sp,fp
 c000494:	df000017 	ldw	fp,0(sp)
 c000498:	dec00104 	addi	sp,sp,4
 c00049c:	f800283a 	ret

0c0004a0 <clearLED>:

void clearLED(int LED) {
 c0004a0:	defffe04 	addi	sp,sp,-8
 c0004a4:	df000115 	stw	fp,4(sp)
 c0004a8:	df000104 	addi	fp,sp,4
 c0004ac:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
 c0004b0:	00806804 	movi	r2,416
 c0004b4:	10c00037 	ldwio	r3,0(r2)
 c0004b8:	01000044 	movi	r4,1
 c0004bc:	e0bfff17 	ldw	r2,-4(fp)
 c0004c0:	2084983a 	sll	r2,r4,r2
 c0004c4:	0084303a 	nor	r2,zero,r2
 c0004c8:	1886703a 	and	r3,r3,r2
 c0004cc:	00806804 	movi	r2,416
 c0004d0:	10c00035 	stwio	r3,0(r2)
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) & ~(0x001 << LED)));

}
 c0004d4:	0001883a 	nop
 c0004d8:	e037883a 	mov	sp,fp
 c0004dc:	df000017 	ldw	fp,0(sp)
 c0004e0:	dec00104 	addi	sp,sp,4
 c0004e4:	f800283a 	ret

0c0004e8 <printSignedHex0>:

void printSignedHex0(signed char value) {
 c0004e8:	defffc04 	addi	sp,sp,-16
 c0004ec:	dfc00315 	stw	ra,12(sp)
 c0004f0:	df000215 	stw	fp,8(sp)
 c0004f4:	df000204 	addi	fp,sp,8
 c0004f8:	2005883a 	mov	r2,r4
 c0004fc:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
 c000500:	e03ffe05 	stb	zero,-8(fp)
	BYTE ones = 0;
 c000504:	e03ffe45 	stb	zero,-7(fp)
	WORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 c000508:	00805404 	movi	r2,336
 c00050c:	10800037 	ldwio	r2,0(r2)
 c000510:	e0bffe8d 	sth	r2,-6(fp)
	if (value < 0) {
 c000514:	e0bfff07 	ldb	r2,-4(fp)
 c000518:	1000060e 	bge	r2,zero,c000534 <printSignedHex0+0x4c>
		setLED(11);
 c00051c:	010002c4 	movi	r4,11
 c000520:	c00045c0 	call	c00045c <setLED>
		value = -value;
 c000524:	e0bfff03 	ldbu	r2,-4(fp)
 c000528:	0085c83a 	sub	r2,zero,r2
 c00052c:	e0bfff05 	stb	r2,-4(fp)
 c000530:	00000206 	br	c00053c <printSignedHex0+0x54>
	} else {
		clearLED(11);
 c000534:	010002c4 	movi	r4,11
 c000538:	c0004a00 	call	c0004a0 <clearLED>
	}
	//handled hundreds
	if (value / 100)
 c00053c:	e0bfff03 	ldbu	r2,-4(fp)
 c000540:	108018c4 	addi	r2,r2,99
 c000544:	10803fcc 	andi	r2,r2,255
 c000548:	108031f0 	cmpltui	r2,r2,199
 c00054c:	1000031e 	bne	r2,zero,c00055c <printSignedHex0+0x74>
		setLED(13);
 c000550:	01000344 	movi	r4,13
 c000554:	c00045c0 	call	c00045c <setLED>
 c000558:	00000206 	br	c000564 <printSignedHex0+0x7c>
	else
		clearLED(13);
 c00055c:	01000344 	movi	r4,13
 c000560:	c0004a00 	call	c0004a0 <clearLED>

	value = value % 100;
 c000564:	e0bfff07 	ldb	r2,-4(fp)
 c000568:	01401904 	movi	r5,100
 c00056c:	1009883a 	mov	r4,r2
 c000570:	c004cb00 	call	c004cb0 <__modsi3>
 c000574:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 c000578:	e0bfff07 	ldb	r2,-4(fp)
 c00057c:	01400284 	movi	r5,10
 c000580:	1009883a 	mov	r4,r2
 c000584:	c004c2c0 	call	c004c2c <__divsi3>
 c000588:	e0bffe05 	stb	r2,-8(fp)
	ones = value % 10;
 c00058c:	e0bfff07 	ldb	r2,-4(fp)
 c000590:	01400284 	movi	r5,10
 c000594:	1009883a 	mov	r4,r2
 c000598:	c004cb00 	call	c004cb0 <__modsi3>
 c00059c:	e0bffe45 	stb	r2,-7(fp)

	pio_val &= 0x00FF;
 c0005a0:	e0bffe8b 	ldhu	r2,-6(fp)
 c0005a4:	10803fcc 	andi	r2,r2,255
 c0005a8:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (tens << 12);
 c0005ac:	e0bffe03 	ldbu	r2,-8(fp)
 c0005b0:	1004933a 	slli	r2,r2,12
 c0005b4:	1007883a 	mov	r3,r2
 c0005b8:	e0bffe8b 	ldhu	r2,-6(fp)
 c0005bc:	1884b03a 	or	r2,r3,r2
 c0005c0:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (ones << 8);
 c0005c4:	e0bffe43 	ldbu	r2,-7(fp)
 c0005c8:	1004923a 	slli	r2,r2,8
 c0005cc:	1007883a 	mov	r3,r2
 c0005d0:	e0bffe8b 	ldhu	r2,-6(fp)
 c0005d4:	1884b03a 	or	r2,r3,r2
 c0005d8:	e0bffe8d 	sth	r2,-6(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 c0005dc:	e0fffe8b 	ldhu	r3,-6(fp)
 c0005e0:	00805404 	movi	r2,336
 c0005e4:	10c00035 	stwio	r3,0(r2)
}
 c0005e8:	0001883a 	nop
 c0005ec:	e037883a 	mov	sp,fp
 c0005f0:	dfc00117 	ldw	ra,4(sp)
 c0005f4:	df000017 	ldw	fp,0(sp)
 c0005f8:	dec00204 	addi	sp,sp,8
 c0005fc:	f800283a 	ret

0c000600 <printSignedHex1>:

void printSignedHex1(signed char value) {
 c000600:	defffb04 	addi	sp,sp,-20
 c000604:	dfc00415 	stw	ra,16(sp)
 c000608:	df000315 	stw	fp,12(sp)
 c00060c:	df000304 	addi	fp,sp,12
 c000610:	2005883a 	mov	r2,r4
 c000614:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
 c000618:	e03ffd05 	stb	zero,-12(fp)
	BYTE ones = 0;
 c00061c:	e03ffd45 	stb	zero,-11(fp)
	DWORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 c000620:	00805404 	movi	r2,336
 c000624:	10800037 	ldwio	r2,0(r2)
 c000628:	e0bffe15 	stw	r2,-8(fp)
	if (value < 0) {
 c00062c:	e0bfff07 	ldb	r2,-4(fp)
 c000630:	1000060e 	bge	r2,zero,c00064c <printSignedHex1+0x4c>
		setLED(10);
 c000634:	01000284 	movi	r4,10
 c000638:	c00045c0 	call	c00045c <setLED>
		value = -value;
 c00063c:	e0bfff03 	ldbu	r2,-4(fp)
 c000640:	0085c83a 	sub	r2,zero,r2
 c000644:	e0bfff05 	stb	r2,-4(fp)
 c000648:	00000206 	br	c000654 <printSignedHex1+0x54>
	} else {
		clearLED(10);
 c00064c:	01000284 	movi	r4,10
 c000650:	c0004a00 	call	c0004a0 <clearLED>
	}
	//handled hundreds
	if (value / 100)
 c000654:	e0bfff03 	ldbu	r2,-4(fp)
 c000658:	108018c4 	addi	r2,r2,99
 c00065c:	10803fcc 	andi	r2,r2,255
 c000660:	108031f0 	cmpltui	r2,r2,199
 c000664:	1000031e 	bne	r2,zero,c000674 <printSignedHex1+0x74>
		setLED(12);
 c000668:	01000304 	movi	r4,12
 c00066c:	c00045c0 	call	c00045c <setLED>
 c000670:	00000206 	br	c00067c <printSignedHex1+0x7c>
	else
		clearLED(12);
 c000674:	01000304 	movi	r4,12
 c000678:	c0004a00 	call	c0004a0 <clearLED>

	value = value % 100;
 c00067c:	e0bfff07 	ldb	r2,-4(fp)
 c000680:	01401904 	movi	r5,100
 c000684:	1009883a 	mov	r4,r2
 c000688:	c004cb00 	call	c004cb0 <__modsi3>
 c00068c:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 c000690:	e0bfff07 	ldb	r2,-4(fp)
 c000694:	01400284 	movi	r5,10
 c000698:	1009883a 	mov	r4,r2
 c00069c:	c004c2c0 	call	c004c2c <__divsi3>
 c0006a0:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
 c0006a4:	e0bfff07 	ldb	r2,-4(fp)
 c0006a8:	01400284 	movi	r5,10
 c0006ac:	1009883a 	mov	r4,r2
 c0006b0:	c004cb00 	call	c004cb0 <__modsi3>
 c0006b4:	e0bffd45 	stb	r2,-11(fp)
	tens = value / 10;
 c0006b8:	e0bfff07 	ldb	r2,-4(fp)
 c0006bc:	01400284 	movi	r5,10
 c0006c0:	1009883a 	mov	r4,r2
 c0006c4:	c004c2c0 	call	c004c2c <__divsi3>
 c0006c8:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
 c0006cc:	e0bfff07 	ldb	r2,-4(fp)
 c0006d0:	01400284 	movi	r5,10
 c0006d4:	1009883a 	mov	r4,r2
 c0006d8:	c004cb00 	call	c004cb0 <__modsi3>
 c0006dc:	e0bffd45 	stb	r2,-11(fp)

	pio_val &= 0xFF00;
 c0006e0:	e0bffe17 	ldw	r2,-8(fp)
 c0006e4:	10bfc00c 	andi	r2,r2,65280
 c0006e8:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (tens << 4);
 c0006ec:	e0bffd03 	ldbu	r2,-12(fp)
 c0006f0:	1004913a 	slli	r2,r2,4
 c0006f4:	1007883a 	mov	r3,r2
 c0006f8:	e0bffe17 	ldw	r2,-8(fp)
 c0006fc:	10c4b03a 	or	r2,r2,r3
 c000700:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (ones << 0);
 c000704:	e0bffd43 	ldbu	r2,-11(fp)
 c000708:	e0fffe17 	ldw	r3,-8(fp)
 c00070c:	1884b03a 	or	r2,r3,r2
 c000710:	e0bffe15 	stw	r2,-8(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 c000714:	e0fffe17 	ldw	r3,-8(fp)
 c000718:	00805404 	movi	r2,336
 c00071c:	10c00035 	stwio	r3,0(r2)
}
 c000720:	0001883a 	nop
 c000724:	e037883a 	mov	sp,fp
 c000728:	dfc00117 	ldw	ra,4(sp)
 c00072c:	df000017 	ldw	fp,0(sp)
 c000730:	dec00204 	addi	sp,sp,8
 c000734:	f800283a 	ret

0c000738 <setKeycode>:

void setKeycode(WORD keycode) {
 c000738:	defffe04 	addi	sp,sp,-8
 c00073c:	df000115 	stw	fp,4(sp)
 c000740:	df000104 	addi	fp,sp,4
 c000744:	2005883a 	mov	r2,r4
 c000748:	e0bfff0d 	sth	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(0x00000160, keycode);
 c00074c:	e0ffff0b 	ldhu	r3,-4(fp)
 c000750:	00805804 	movi	r2,352
 c000754:	10c00035 	stwio	r3,0(r2)
}
 c000758:	0001883a 	nop
 c00075c:	e037883a 	mov	sp,fp
 c000760:	df000017 	ldw	fp,0(sp)
 c000764:	dec00104 	addi	sp,sp,4
 c000768:	f800283a 	ret

0c00076c <keyInput>:

void keyInput(int x, int y, int index, int color) {
 c00076c:	deffeb04 	addi	sp,sp,-84
 c000770:	dfc01415 	stw	ra,80(sp)
 c000774:	df001315 	stw	fp,76(sp)
 c000778:	dc401215 	stw	r17,72(sp)
 c00077c:	dc001115 	stw	r16,68(sp)
 c000780:	df001304 	addi	fp,sp,76
 c000784:	e13ffa15 	stw	r4,-24(fp)
 c000788:	e17ffb15 	stw	r5,-20(fp)
 c00078c:	e1bffc15 	stw	r6,-16(fp)
 c000790:	e1fffd15 	stw	r7,-12(fp)
	int xChange = 0, yChange = 1, newIndex = index, newColor = color, maxY = 48;
 c000794:	e03fed15 	stw	zero,-76(fp)
 c000798:	00800044 	movi	r2,1
 c00079c:	e0bfee15 	stw	r2,-72(fp)
 c0007a0:	e0bffc17 	ldw	r2,-16(fp)
 c0007a4:	e0bfef15 	stw	r2,-68(fp)
 c0007a8:	e0bffd17 	ldw	r2,-12(fp)
 c0007ac:	e0bff015 	stw	r2,-64(fp)
 c0007b0:	00800c04 	movi	r2,48
 c0007b4:	e0bff115 	stw	r2,-60(fp)
	BYTE rcode;
	BOOT_MOUSE_REPORT buf;		//USB mouse report
	BOOT_KBD_REPORT kbdbuf;

	BYTE runningdebugflag = 0;//flag to dump out a bunch of information when we first get to USB_STATE_RUNNING
 c0007b8:	e03ff205 	stb	zero,-56(fp)
	BYTE errorflag = 0; //flag once we get an error device so we don't keep dumping out state info
 c0007bc:	e03ff245 	stb	zero,-55(fp)
	BYTE device;
	WORD keycode;

	printf("initializing MAX3421E...\n");
 c0007c0:	010300b4 	movhi	r4,3074
 c0007c4:	21217104 	addi	r4,r4,-31292
 c0007c8:	c004f340 	call	c004f34 <puts>
	MAX3421E_init();
 c0007cc:	c003b9c0 	call	c003b9c <MAX3421E_init>
	printf("initializing USB...\n");
 c0007d0:	010300b4 	movhi	r4,3074
 c0007d4:	21217804 	addi	r4,r4,-31264
 c0007d8:	c004f340 	call	c004f34 <puts>
	USB_init();
 c0007dc:	c0043480 	call	c004348 <USB_init>
	while (1) {
		//printf(".");
		MAX3421E_Task();
 c0007e0:	c003c300 	call	c003c30 <MAX3421E_Task>
		USB_Task();
 c0007e4:	c0043e00 	call	c0043e0 <USB_Task>
		//usleep (500000);
		if (GetUsbTaskState() == USB_STATE_RUNNING) {
 c0007e8:	c004b500 	call	c004b50 <GetUsbTaskState>
 c0007ec:	10803fcc 	andi	r2,r2,255
 c0007f0:	10801018 	cmpnei	r2,r2,64
 c0007f4:	1002f81e 	bne	r2,zero,c0013d8 <keyInput+0xc6c>
			if (!runningdebugflag) {
 c0007f8:	e0bff203 	ldbu	r2,-56(fp)
 c0007fc:	1000071e 	bne	r2,zero,c00081c <keyInput+0xb0>
				runningdebugflag = 1;
 c000800:	00800044 	movi	r2,1
 c000804:	e0bff205 	stb	r2,-56(fp)
				setLED(9);
 c000808:	01000244 	movi	r4,9
 c00080c:	c00045c0 	call	c00045c <setLED>
				device = GetDriverandReport();
 c000810:	c00026c0 	call	c00026c <GetDriverandReport>
 c000814:	e0bff285 	stb	r2,-54(fp)
 c000818:	003ff106 	br	c0007e0 <__alt_data_end+0xfc0007e0>
			} else if (device == 1) {
 c00081c:	e0bff283 	ldbu	r2,-54(fp)
 c000820:	10800058 	cmpnei	r2,r2,1
 c000824:	103fee1e 	bne	r2,zero,c0007e0 <__alt_data_end+0xfc0007e0>
				//run keyboard debug polling
				rcode = kbdPoll(&kbdbuf);
 c000828:	e0bff744 	addi	r2,fp,-35
 c00082c:	1009883a 	mov	r4,r2
 c000830:	c0034900 	call	c003490 <kbdPoll>
 c000834:	e0bff505 	stb	r2,-44(fp)
				if (rcode == hrNAK) {
 c000838:	e0bff503 	ldbu	r2,-44(fp)
 c00083c:	10800118 	cmpnei	r2,r2,4
 c000840:	10030526 	beq	r2,zero,c001458 <keyInput+0xcec>
					continue; //NAK means no new data
				} else if (rcode) {
 c000844:	e0bff503 	ldbu	r2,-44(fp)
 c000848:	10000926 	beq	r2,zero,c000870 <keyInput+0x104>
					printf("Rcode: ");
 c00084c:	010300b4 	movhi	r4,3074
 c000850:	21217d04 	addi	r4,r4,-31244
 c000854:	c004e380 	call	c004e38 <printf>
					printf("%x \n", rcode);
 c000858:	e0bff503 	ldbu	r2,-44(fp)
 c00085c:	100b883a 	mov	r5,r2
 c000860:	010300b4 	movhi	r4,3074
 c000864:	21215f04 	addi	r4,r4,-31364
 c000868:	c004e380 	call	c004e38 <printf>
					continue;
 c00086c:	0002fb06 	br	c00145c <keyInput+0xcf0>
				}
				//printf("keycodes: ");
				for (int i = 0; i < 6; i++) {
 c000870:	e03ff315 	stw	zero,-52(fp)
 c000874:	00003e06 	br	c000970 <keyInput+0x204>
					if (kbdbuf.keycode[i] != 0) {
 c000878:	e0fff7c4 	addi	r3,fp,-33
 c00087c:	e0bff317 	ldw	r2,-52(fp)
 c000880:	1885883a 	add	r2,r3,r2
 c000884:	10800003 	ldbu	r2,0(r2)
 c000888:	10803fcc 	andi	r2,r2,255
 c00088c:	10003526 	beq	r2,zero,c000964 <keyInput+0x1f8>
						//printf("%x - ", kbdbuf.keycode[i]);
						if (kbdbuf.keycode[i] == 26) { //W
 c000890:	e0fff7c4 	addi	r3,fp,-33
 c000894:	e0bff317 	ldw	r2,-52(fp)
 c000898:	1885883a 	add	r2,r3,r2
 c00089c:	10800003 	ldbu	r2,0(r2)
 c0008a0:	10803fcc 	andi	r2,r2,255
 c0008a4:	10800698 	cmpnei	r2,r2,26
 c0008a8:	1000071e 	bne	r2,zero,c0008c8 <keyInput+0x15c>
							printf("W - ");
 c0008ac:	010300b4 	movhi	r4,3074
 c0008b0:	21217f04 	addi	r4,r4,-31236
 c0008b4:	c004e380 	call	c004e38 <printf>
							yChange = -1;
 c0008b8:	00bfffc4 	movi	r2,-1
 c0008bc:	e0bfee15 	stw	r2,-72(fp)
							xChange = 0;
 c0008c0:	e03fed15 	stw	zero,-76(fp)
 c0008c4:	00002706 	br	c000964 <keyInput+0x1f8>
						} else if (kbdbuf.keycode[i] == 4) { //A
 c0008c8:	e0fff7c4 	addi	r3,fp,-33
 c0008cc:	e0bff317 	ldw	r2,-52(fp)
 c0008d0:	1885883a 	add	r2,r3,r2
 c0008d4:	10800003 	ldbu	r2,0(r2)
 c0008d8:	10803fcc 	andi	r2,r2,255
 c0008dc:	10800118 	cmpnei	r2,r2,4
 c0008e0:	1000061e 	bne	r2,zero,c0008fc <keyInput+0x190>
							printf("A - ");
 c0008e4:	010300b4 	movhi	r4,3074
 c0008e8:	21218104 	addi	r4,r4,-31228
 c0008ec:	c004e380 	call	c004e38 <printf>
							xChange = -1;
 c0008f0:	00bfffc4 	movi	r2,-1
 c0008f4:	e0bfed15 	stw	r2,-76(fp)
 c0008f8:	00001a06 	br	c000964 <keyInput+0x1f8>
						} else if (kbdbuf.keycode[i] == 22) { //S
 c0008fc:	e0fff7c4 	addi	r3,fp,-33
 c000900:	e0bff317 	ldw	r2,-52(fp)
 c000904:	1885883a 	add	r2,r3,r2
 c000908:	10800003 	ldbu	r2,0(r2)
 c00090c:	10803fcc 	andi	r2,r2,255
 c000910:	10800598 	cmpnei	r2,r2,22
 c000914:	1000071e 	bne	r2,zero,c000934 <keyInput+0x1c8>
							printf("S - ");
 c000918:	010300b4 	movhi	r4,3074
 c00091c:	21218304 	addi	r4,r4,-31220
 c000920:	c004e380 	call	c004e38 <printf>
							yChange = 2;
 c000924:	00800084 	movi	r2,2
 c000928:	e0bfee15 	stw	r2,-72(fp)
							xChange = 0;
 c00092c:	e03fed15 	stw	zero,-76(fp)
 c000930:	00000c06 	br	c000964 <keyInput+0x1f8>
						} else if (kbdbuf.keycode[i] == 7) { //D
 c000934:	e0fff7c4 	addi	r3,fp,-33
 c000938:	e0bff317 	ldw	r2,-52(fp)
 c00093c:	1885883a 	add	r2,r3,r2
 c000940:	10800003 	ldbu	r2,0(r2)
 c000944:	10803fcc 	andi	r2,r2,255
 c000948:	108001d8 	cmpnei	r2,r2,7
 c00094c:	1000051e 	bne	r2,zero,c000964 <keyInput+0x1f8>
							printf("D - ");
 c000950:	010300b4 	movhi	r4,3074
 c000954:	21218504 	addi	r4,r4,-31212
 c000958:	c004e380 	call	c004e38 <printf>
							xChange = 1;
 c00095c:	00800044 	movi	r2,1
 c000960:	e0bfed15 	stw	r2,-76(fp)
					printf("Rcode: ");
					printf("%x \n", rcode);
					continue;
				}
				//printf("keycodes: ");
				for (int i = 0; i < 6; i++) {
 c000964:	e0bff317 	ldw	r2,-52(fp)
 c000968:	10800044 	addi	r2,r2,1
 c00096c:	e0bff315 	stw	r2,-52(fp)
 c000970:	e0bff317 	ldw	r2,-52(fp)
 c000974:	10800190 	cmplti	r2,r2,6
 c000978:	103fbf1e 	bne	r2,zero,c000878 <__alt_data_end+0xfc000878>
							xChange = 1;
						}
					}
				}

				if (xChange == 1 && x >=75) {
 c00097c:	e0bfed17 	ldw	r2,-76(fp)
 c000980:	10800058 	cmpnei	r2,r2,1
 c000984:	1000071e 	bne	r2,zero,c0009a4 <keyInput+0x238>
 c000988:	e0bffa17 	ldw	r2,-24(fp)
 c00098c:	108012d0 	cmplti	r2,r2,75
 c000990:	1000041e 	bne	r2,zero,c0009a4 <keyInput+0x238>
					xChange*=-1;
 c000994:	e0bfed17 	ldw	r2,-76(fp)
 c000998:	0085c83a 	sub	r2,zero,r2
 c00099c:	e0bfed15 	stw	r2,-76(fp)
 c0009a0:	00001b06 	br	c000a10 <keyInput+0x2a4>
				} else if (xChange == -1 && x <=10) {
 c0009a4:	e0bfed17 	ldw	r2,-76(fp)
 c0009a8:	10bfffd8 	cmpnei	r2,r2,-1
 c0009ac:	1000031e 	bne	r2,zero,c0009bc <keyInput+0x250>
 c0009b0:	e0bffa17 	ldw	r2,-24(fp)
 c0009b4:	108002c8 	cmpgei	r2,r2,11
 c0009b8:	10001426 	beq	r2,zero,c000a0c <keyInput+0x2a0>
					xChange*=1;
				} else if (yChange == -1 && y <=10) {
 c0009bc:	e0bfee17 	ldw	r2,-72(fp)
 c0009c0:	10bfffd8 	cmpnei	r2,r2,-1
 c0009c4:	1000071e 	bne	r2,zero,c0009e4 <keyInput+0x278>
 c0009c8:	e0bffb17 	ldw	r2,-20(fp)
 c0009cc:	108002c8 	cmpgei	r2,r2,11
 c0009d0:	1000041e 	bne	r2,zero,c0009e4 <keyInput+0x278>
					yChange*=-1;
 c0009d4:	e0bfee17 	ldw	r2,-72(fp)
 c0009d8:	0085c83a 	sub	r2,zero,r2
 c0009dc:	e0bfee15 	stw	r2,-72(fp)
 c0009e0:	00000b06 	br	c000a10 <keyInput+0x2a4>
				} else if (yChange == 1 && y >=70) {
 c0009e4:	e0bfee17 	ldw	r2,-72(fp)
 c0009e8:	10800058 	cmpnei	r2,r2,1
 c0009ec:	1000081e 	bne	r2,zero,c000a10 <keyInput+0x2a4>
 c0009f0:	e0bffb17 	ldw	r2,-20(fp)
 c0009f4:	10801190 	cmplti	r2,r2,70
 c0009f8:	1000051e 	bne	r2,zero,c000a10 <keyInput+0x2a4>
					yChange*=-1;
 c0009fc:	e0bfee17 	ldw	r2,-72(fp)
 c000a00:	0085c83a 	sub	r2,zero,r2
 c000a04:	e0bfee15 	stw	r2,-72(fp)
 c000a08:	00000106 	br	c000a10 <keyInput+0x2a4>
				}

				if (xChange == 1 && x >=75) {
					xChange*=-1;
				} else if (xChange == -1 && x <=10) {
					xChange*=1;
 c000a0c:	0001883a 	nop
				} else if (yChange == -1 && y <=10) {
					yChange*=-1;
				} else if (yChange == 1 && y >=70) {
					yChange*=-1;
				} //VGA screen border
				switch(newIndex) {
 c000a10:	e0bfef17 	ldw	r2,-68(fp)
 c000a14:	108001a8 	cmpgeui	r2,r2,6
 c000a18:	1001ca1e 	bne	r2,zero,c001144 <keyInput+0x9d8>
 c000a1c:	e0bfef17 	ldw	r2,-68(fp)
 c000a20:	100690ba 	slli	r3,r2,2
 c000a24:	00830034 	movhi	r2,3072
 c000a28:	10828e04 	addi	r2,r2,2616
 c000a2c:	1885883a 	add	r2,r3,r2
 c000a30:	10800017 	ldw	r2,0(r2)
 c000a34:	1000683a 	jmp	r2
 c000a38:	0c000a50 	cmplti	r16,at,41
 c000a3c:	0c000b24 	muli	r16,at,44
 c000a40:	0c000c54 	ori	r16,at,49
 c000a44:	0c000d7c 	xorhi	r16,at,53
 c000a48:	0c000ed0 	cmplti	r16,at,59
 c000a4c:	0c000fec 	andhi	r16,at,63
					case 0  :
						if (grid[y+1][x] == 1) {//if bottom pixel is going to be an edge
 c000a50:	e0bffb17 	ldw	r2,-20(fp)
 c000a54:	10800044 	addi	r2,r2,1
 c000a58:	040300b4 	movhi	r16,3074
 c000a5c:	8431e404 	addi	r16,r16,-14448
 c000a60:	01401404 	movi	r5,80
 c000a64:	1009883a 	mov	r4,r2
 c000a68:	c004de00 	call	c004de0 <__mulsi3>
 c000a6c:	1007883a 	mov	r3,r2
 c000a70:	e0bffa17 	ldw	r2,-24(fp)
 c000a74:	1885883a 	add	r2,r3,r2
 c000a78:	1085883a 	add	r2,r2,r2
 c000a7c:	1085883a 	add	r2,r2,r2
 c000a80:	8085883a 	add	r2,r16,r2
 c000a84:	10800017 	ldw	r2,0(r2)
 c000a88:	10800058 	cmpnei	r2,r2,1
 c000a8c:	1002031e 	bne	r2,zero,c00129c <keyInput+0xb30>
							setEdge(x,y);
 c000a90:	e17ffb17 	ldw	r5,-20(fp)
 c000a94:	e13ffa17 	ldw	r4,-24(fp)
 c000a98:	c00147c0 	call	c00147c <setEdge>
							setEdge(x,y-1);
 c000a9c:	e0bffb17 	ldw	r2,-20(fp)
 c000aa0:	10bfffc4 	addi	r2,r2,-1
 c000aa4:	100b883a 	mov	r5,r2
 c000aa8:	e13ffa17 	ldw	r4,-24(fp)
 c000aac:	c00147c0 	call	c00147c <setEdge>
							setEdge(x,y-2);
 c000ab0:	e0bffb17 	ldw	r2,-20(fp)
 c000ab4:	10bfff84 	addi	r2,r2,-2
 c000ab8:	100b883a 	mov	r5,r2
 c000abc:	e13ffa17 	ldw	r4,-24(fp)
 c000ac0:	c00147c0 	call	c00147c <setEdge>
							setEdge(x,y-3);//set as edge
 c000ac4:	e0bffb17 	ldw	r2,-20(fp)
 c000ac8:	10bfff44 	addi	r2,r2,-3
 c000acc:	100b883a 	mov	r5,r2
 c000ad0:	e13ffa17 	ldw	r4,-24(fp)
 c000ad4:	c00147c0 	call	c00147c <setEdge>
							newIndex = rand()%7;
 c000ad8:	c004f600 	call	c004f60 <rand>
 c000adc:	014001c4 	movi	r5,7
 c000ae0:	1009883a 	mov	r4,r2
 c000ae4:	c004cb00 	call	c004cb0 <__modsi3>
 c000ae8:	e0bfef15 	stw	r2,-68(fp)
							newColor = rand()%15+1;
 c000aec:	c004f600 	call	c004f60 <rand>
 c000af0:	014003c4 	movi	r5,15
 c000af4:	1009883a 	mov	r4,r2
 c000af8:	c004cb00 	call	c004cb0 <__modsi3>
 c000afc:	10800044 	addi	r2,r2,1
 c000b00:	e0bff015 	stw	r2,-64(fp)
							y = 13;
 c000b04:	00800344 	movi	r2,13
 c000b08:	e0bffb15 	stw	r2,-20(fp)
							x = 40;
 c000b0c:	00800a04 	movi	r2,40
 c000b10:	e0bffa15 	stw	r2,-24(fp)
							maxY-=4;
 c000b14:	e0bff117 	ldw	r2,-60(fp)
 c000b18:	10bfff04 	addi	r2,r2,-4
 c000b1c:	e0bff115 	stw	r2,-60(fp)
						}
						break;
 c000b20:	0001de06 	br	c00129c <keyInput+0xb30>
					case 1  :
						if (grid[y-2][x+1] ==  1|| //if side block is an edge
 c000b24:	e0bffb17 	ldw	r2,-20(fp)
 c000b28:	10ffff84 	addi	r3,r2,-2
 c000b2c:	e0bffa17 	ldw	r2,-24(fp)
 c000b30:	14400044 	addi	r17,r2,1
 c000b34:	040300b4 	movhi	r16,3074
 c000b38:	8431e404 	addi	r16,r16,-14448
 c000b3c:	01401404 	movi	r5,80
 c000b40:	1809883a 	mov	r4,r3
 c000b44:	c004de00 	call	c004de0 <__mulsi3>
 c000b48:	1445883a 	add	r2,r2,r17
 c000b4c:	1085883a 	add	r2,r2,r2
 c000b50:	1085883a 	add	r2,r2,r2
 c000b54:	8085883a 	add	r2,r16,r2
 c000b58:	10800017 	ldw	r2,0(r2)
 c000b5c:	10800060 	cmpeqi	r2,r2,1
 c000b60:	1000101e 	bne	r2,zero,c000ba4 <keyInput+0x438>
							grid[y+1][x] == 1){//if bottom pixel is going to be an edge
 c000b64:	e0bffb17 	ldw	r2,-20(fp)
 c000b68:	10800044 	addi	r2,r2,1
 c000b6c:	040300b4 	movhi	r16,3074
 c000b70:	8431e404 	addi	r16,r16,-14448
 c000b74:	01401404 	movi	r5,80
 c000b78:	1009883a 	mov	r4,r2
 c000b7c:	c004de00 	call	c004de0 <__mulsi3>
 c000b80:	1007883a 	mov	r3,r2
 c000b84:	e0bffa17 	ldw	r2,-24(fp)
 c000b88:	1885883a 	add	r2,r3,r2
 c000b8c:	1085883a 	add	r2,r2,r2
 c000b90:	1085883a 	add	r2,r2,r2
 c000b94:	8085883a 	add	r2,r16,r2
 c000b98:	10800017 	ldw	r2,0(r2)
							x = 40;
							maxY-=4;
						}
						break;
					case 1  :
						if (grid[y-2][x+1] ==  1|| //if side block is an edge
 c000b9c:	10800058 	cmpnei	r2,r2,1
 c000ba0:	1001c01e 	bne	r2,zero,c0012a4 <keyInput+0xb38>
							grid[y+1][x] == 1){//if bottom pixel is going to be an edge
							setEdge(x,y);
 c000ba4:	e17ffb17 	ldw	r5,-20(fp)
 c000ba8:	e13ffa17 	ldw	r4,-24(fp)
 c000bac:	c00147c0 	call	c00147c <setEdge>
							setEdge(x,y-1);
 c000bb0:	e0bffb17 	ldw	r2,-20(fp)
 c000bb4:	10bfffc4 	addi	r2,r2,-1
 c000bb8:	100b883a 	mov	r5,r2
 c000bbc:	e13ffa17 	ldw	r4,-24(fp)
 c000bc0:	c00147c0 	call	c00147c <setEdge>
							setEdge(x,y-2);
 c000bc4:	e0bffb17 	ldw	r2,-20(fp)
 c000bc8:	10bfff84 	addi	r2,r2,-2
 c000bcc:	100b883a 	mov	r5,r2
 c000bd0:	e13ffa17 	ldw	r4,-24(fp)
 c000bd4:	c00147c0 	call	c00147c <setEdge>
							setEdge(x,y-3);
 c000bd8:	e0bffb17 	ldw	r2,-20(fp)
 c000bdc:	10bfff44 	addi	r2,r2,-3
 c000be0:	100b883a 	mov	r5,r2
 c000be4:	e13ffa17 	ldw	r4,-24(fp)
 c000be8:	c00147c0 	call	c00147c <setEdge>
							setEdge(x+1,y-3);//set as edge
 c000bec:	e0bffa17 	ldw	r2,-24(fp)
 c000bf0:	10c00044 	addi	r3,r2,1
 c000bf4:	e0bffb17 	ldw	r2,-20(fp)
 c000bf8:	10bfff44 	addi	r2,r2,-3
 c000bfc:	100b883a 	mov	r5,r2
 c000c00:	1809883a 	mov	r4,r3
 c000c04:	c00147c0 	call	c00147c <setEdge>
							newIndex = rand()%7;
 c000c08:	c004f600 	call	c004f60 <rand>
 c000c0c:	014001c4 	movi	r5,7
 c000c10:	1009883a 	mov	r4,r2
 c000c14:	c004cb00 	call	c004cb0 <__modsi3>
 c000c18:	e0bfef15 	stw	r2,-68(fp)
							newColor = rand()%15+1;
 c000c1c:	c004f600 	call	c004f60 <rand>
 c000c20:	014003c4 	movi	r5,15
 c000c24:	1009883a 	mov	r4,r2
 c000c28:	c004cb00 	call	c004cb0 <__modsi3>
 c000c2c:	10800044 	addi	r2,r2,1
 c000c30:	e0bff015 	stw	r2,-64(fp)
							y = 13;
 c000c34:	00800344 	movi	r2,13
 c000c38:	e0bffb15 	stw	r2,-20(fp)
							x = 40;
 c000c3c:	00800a04 	movi	r2,40
 c000c40:	e0bffa15 	stw	r2,-24(fp)
							maxY-=4;
 c000c44:	e0bff117 	ldw	r2,-60(fp)
 c000c48:	10bfff04 	addi	r2,r2,-4
 c000c4c:	e0bff115 	stw	r2,-60(fp)
						}
						break;
 c000c50:	00019406 	br	c0012a4 <keyInput+0xb38>
					case 2  :
						if (grid[y+1][x+1] ==  1|| //if side block is an edge
 c000c54:	e0bffb17 	ldw	r2,-20(fp)
 c000c58:	10c00044 	addi	r3,r2,1
 c000c5c:	e0bffa17 	ldw	r2,-24(fp)
 c000c60:	14400044 	addi	r17,r2,1
 c000c64:	040300b4 	movhi	r16,3074
 c000c68:	8431e404 	addi	r16,r16,-14448
 c000c6c:	01401404 	movi	r5,80
 c000c70:	1809883a 	mov	r4,r3
 c000c74:	c004de00 	call	c004de0 <__mulsi3>
 c000c78:	1445883a 	add	r2,r2,r17
 c000c7c:	1085883a 	add	r2,r2,r2
 c000c80:	1085883a 	add	r2,r2,r2
 c000c84:	8085883a 	add	r2,r16,r2
 c000c88:	10800017 	ldw	r2,0(r2)
 c000c8c:	10800060 	cmpeqi	r2,r2,1
 c000c90:	1000101e 	bne	r2,zero,c000cd4 <keyInput+0x568>
							grid[y+1][x] == 1){//if bottom pixel is going to be an edge
 c000c94:	e0bffb17 	ldw	r2,-20(fp)
 c000c98:	10800044 	addi	r2,r2,1
 c000c9c:	040300b4 	movhi	r16,3074
 c000ca0:	8431e404 	addi	r16,r16,-14448
 c000ca4:	01401404 	movi	r5,80
 c000ca8:	1009883a 	mov	r4,r2
 c000cac:	c004de00 	call	c004de0 <__mulsi3>
 c000cb0:	1007883a 	mov	r3,r2
 c000cb4:	e0bffa17 	ldw	r2,-24(fp)
 c000cb8:	1885883a 	add	r2,r3,r2
 c000cbc:	1085883a 	add	r2,r2,r2
 c000cc0:	1085883a 	add	r2,r2,r2
 c000cc4:	8085883a 	add	r2,r16,r2
 c000cc8:	10800017 	ldw	r2,0(r2)
							x = 40;
							maxY-=4;
						}
						break;
					case 2  :
						if (grid[y+1][x+1] ==  1|| //if side block is an edge
 c000ccc:	10800058 	cmpnei	r2,r2,1
 c000cd0:	1001761e 	bne	r2,zero,c0012ac <keyInput+0xb40>
							grid[y+1][x] == 1){//if bottom pixel is going to be an edge
							setEdge(x,y);
 c000cd4:	e17ffb17 	ldw	r5,-20(fp)
 c000cd8:	e13ffa17 	ldw	r4,-24(fp)
 c000cdc:	c00147c0 	call	c00147c <setEdge>
							setEdge(x,y-1);
 c000ce0:	e0bffb17 	ldw	r2,-20(fp)
 c000ce4:	10bfffc4 	addi	r2,r2,-1
 c000ce8:	100b883a 	mov	r5,r2
 c000cec:	e13ffa17 	ldw	r4,-24(fp)
 c000cf0:	c00147c0 	call	c00147c <setEdge>
							setEdge(x,y-2);
 c000cf4:	e0bffb17 	ldw	r2,-20(fp)
 c000cf8:	10bfff84 	addi	r2,r2,-2
 c000cfc:	100b883a 	mov	r5,r2
 c000d00:	e13ffa17 	ldw	r4,-24(fp)
 c000d04:	c00147c0 	call	c00147c <setEdge>
							setEdge(x,y-3);
 c000d08:	e0bffb17 	ldw	r2,-20(fp)
 c000d0c:	10bfff44 	addi	r2,r2,-3
 c000d10:	100b883a 	mov	r5,r2
 c000d14:	e13ffa17 	ldw	r4,-24(fp)
 c000d18:	c00147c0 	call	c00147c <setEdge>
							setEdge(x+1,y);//set as edge
 c000d1c:	e0bffa17 	ldw	r2,-24(fp)
 c000d20:	10800044 	addi	r2,r2,1
 c000d24:	e17ffb17 	ldw	r5,-20(fp)
 c000d28:	1009883a 	mov	r4,r2
 c000d2c:	c00147c0 	call	c00147c <setEdge>
							newIndex = rand()%7;
 c000d30:	c004f600 	call	c004f60 <rand>
 c000d34:	014001c4 	movi	r5,7
 c000d38:	1009883a 	mov	r4,r2
 c000d3c:	c004cb00 	call	c004cb0 <__modsi3>
 c000d40:	e0bfef15 	stw	r2,-68(fp)
							newColor = rand()%15+1;
 c000d44:	c004f600 	call	c004f60 <rand>
 c000d48:	014003c4 	movi	r5,15
 c000d4c:	1009883a 	mov	r4,r2
 c000d50:	c004cb00 	call	c004cb0 <__modsi3>
 c000d54:	10800044 	addi	r2,r2,1
 c000d58:	e0bff015 	stw	r2,-64(fp)
							y = 13;
 c000d5c:	00800344 	movi	r2,13
 c000d60:	e0bffb15 	stw	r2,-20(fp)
							x = 40;
 c000d64:	00800a04 	movi	r2,40
 c000d68:	e0bffa15 	stw	r2,-24(fp)
							maxY-=4;
 c000d6c:	e0bff117 	ldw	r2,-60(fp)
 c000d70:	10bfff04 	addi	r2,r2,-4
 c000d74:	e0bff115 	stw	r2,-60(fp)
						}
						break;
 c000d78:	00014c06 	br	c0012ac <keyInput+0xb40>
					case 3  :
						if (grid[y+1][x+1] ==  1|| //if side block is an edge
 c000d7c:	e0bffb17 	ldw	r2,-20(fp)
 c000d80:	10c00044 	addi	r3,r2,1
 c000d84:	e0bffa17 	ldw	r2,-24(fp)
 c000d88:	14400044 	addi	r17,r2,1
 c000d8c:	040300b4 	movhi	r16,3074
 c000d90:	8431e404 	addi	r16,r16,-14448
 c000d94:	01401404 	movi	r5,80
 c000d98:	1809883a 	mov	r4,r3
 c000d9c:	c004de00 	call	c004de0 <__mulsi3>
 c000da0:	1445883a 	add	r2,r2,r17
 c000da4:	1085883a 	add	r2,r2,r2
 c000da8:	1085883a 	add	r2,r2,r2
 c000dac:	8085883a 	add	r2,r16,r2
 c000db0:	10800017 	ldw	r2,0(r2)
 c000db4:	10800060 	cmpeqi	r2,r2,1
 c000db8:	1000201e 	bne	r2,zero,c000e3c <keyInput+0x6d0>
							grid[y+1][x-1] ==  1|| //if side block is an edge
 c000dbc:	e0bffb17 	ldw	r2,-20(fp)
 c000dc0:	10c00044 	addi	r3,r2,1
 c000dc4:	e0bffa17 	ldw	r2,-24(fp)
 c000dc8:	147fffc4 	addi	r17,r2,-1
 c000dcc:	040300b4 	movhi	r16,3074
 c000dd0:	8431e404 	addi	r16,r16,-14448
 c000dd4:	01401404 	movi	r5,80
 c000dd8:	1809883a 	mov	r4,r3
 c000ddc:	c004de00 	call	c004de0 <__mulsi3>
 c000de0:	1445883a 	add	r2,r2,r17
 c000de4:	1085883a 	add	r2,r2,r2
 c000de8:	1085883a 	add	r2,r2,r2
 c000dec:	8085883a 	add	r2,r16,r2
 c000df0:	10800017 	ldw	r2,0(r2)
							x = 40;
							maxY-=4;
						}
						break;
					case 3  :
						if (grid[y+1][x+1] ==  1|| //if side block is an edge
 c000df4:	10800060 	cmpeqi	r2,r2,1
 c000df8:	1000101e 	bne	r2,zero,c000e3c <keyInput+0x6d0>
							grid[y+1][x-1] ==  1|| //if side block is an edge
							grid[y+1][x] == 1){//if bottom pixel is going to be an edge
 c000dfc:	e0bffb17 	ldw	r2,-20(fp)
 c000e00:	10800044 	addi	r2,r2,1
 c000e04:	040300b4 	movhi	r16,3074
 c000e08:	8431e404 	addi	r16,r16,-14448
 c000e0c:	01401404 	movi	r5,80
 c000e10:	1009883a 	mov	r4,r2
 c000e14:	c004de00 	call	c004de0 <__mulsi3>
 c000e18:	1007883a 	mov	r3,r2
 c000e1c:	e0bffa17 	ldw	r2,-24(fp)
 c000e20:	1885883a 	add	r2,r3,r2
 c000e24:	1085883a 	add	r2,r2,r2
 c000e28:	1085883a 	add	r2,r2,r2
 c000e2c:	8085883a 	add	r2,r16,r2
 c000e30:	10800017 	ldw	r2,0(r2)
							maxY-=4;
						}
						break;
					case 3  :
						if (grid[y+1][x+1] ==  1|| //if side block is an edge
							grid[y+1][x-1] ==  1|| //if side block is an edge
 c000e34:	10800058 	cmpnei	r2,r2,1
 c000e38:	10011e1e 	bne	r2,zero,c0012b4 <keyInput+0xb48>
							grid[y+1][x] == 1){//if bottom pixel is going to be an edge
							setEdge(x,y);
 c000e3c:	e17ffb17 	ldw	r5,-20(fp)
 c000e40:	e13ffa17 	ldw	r4,-24(fp)
 c000e44:	c00147c0 	call	c00147c <setEdge>
							setEdge(x,y-1);
 c000e48:	e0bffb17 	ldw	r2,-20(fp)
 c000e4c:	10bfffc4 	addi	r2,r2,-1
 c000e50:	100b883a 	mov	r5,r2
 c000e54:	e13ffa17 	ldw	r4,-24(fp)
 c000e58:	c00147c0 	call	c00147c <setEdge>
							setEdge(x+1,y);
 c000e5c:	e0bffa17 	ldw	r2,-24(fp)
 c000e60:	10800044 	addi	r2,r2,1
 c000e64:	e17ffb17 	ldw	r5,-20(fp)
 c000e68:	1009883a 	mov	r4,r2
 c000e6c:	c00147c0 	call	c00147c <setEdge>
							setEdge(x-1,y);//set as edge
 c000e70:	e0bffa17 	ldw	r2,-24(fp)
 c000e74:	10bfffc4 	addi	r2,r2,-1
 c000e78:	e17ffb17 	ldw	r5,-20(fp)
 c000e7c:	1009883a 	mov	r4,r2
 c000e80:	c00147c0 	call	c00147c <setEdge>
							newIndex = rand()%7;
 c000e84:	c004f600 	call	c004f60 <rand>
 c000e88:	014001c4 	movi	r5,7
 c000e8c:	1009883a 	mov	r4,r2
 c000e90:	c004cb00 	call	c004cb0 <__modsi3>
 c000e94:	e0bfef15 	stw	r2,-68(fp)
							newColor = rand()%15+1;
 c000e98:	c004f600 	call	c004f60 <rand>
 c000e9c:	014003c4 	movi	r5,15
 c000ea0:	1009883a 	mov	r4,r2
 c000ea4:	c004cb00 	call	c004cb0 <__modsi3>
 c000ea8:	10800044 	addi	r2,r2,1
 c000eac:	e0bff015 	stw	r2,-64(fp)
							y = 11;
 c000eb0:	008002c4 	movi	r2,11
 c000eb4:	e0bffb15 	stw	r2,-20(fp)
							x = 40;
 c000eb8:	00800a04 	movi	r2,40
 c000ebc:	e0bffa15 	stw	r2,-24(fp)
							maxY-=2;
 c000ec0:	e0bff117 	ldw	r2,-60(fp)
 c000ec4:	10bfff84 	addi	r2,r2,-2
 c000ec8:	e0bff115 	stw	r2,-60(fp)
						}
						break;
 c000ecc:	0000f906 	br	c0012b4 <keyInput+0xb48>
					case 4  :
						if (grid[y+1][x+1] ==  1|| //if side block is an edge
 c000ed0:	e0bffb17 	ldw	r2,-20(fp)
 c000ed4:	10c00044 	addi	r3,r2,1
 c000ed8:	e0bffa17 	ldw	r2,-24(fp)
 c000edc:	14400044 	addi	r17,r2,1
 c000ee0:	040300b4 	movhi	r16,3074
 c000ee4:	8431e404 	addi	r16,r16,-14448
 c000ee8:	01401404 	movi	r5,80
 c000eec:	1809883a 	mov	r4,r3
 c000ef0:	c004de00 	call	c004de0 <__mulsi3>
 c000ef4:	1445883a 	add	r2,r2,r17
 c000ef8:	1085883a 	add	r2,r2,r2
 c000efc:	1085883a 	add	r2,r2,r2
 c000f00:	8085883a 	add	r2,r16,r2
 c000f04:	10800017 	ldw	r2,0(r2)
 c000f08:	10800060 	cmpeqi	r2,r2,1
 c000f0c:	1000101e 	bne	r2,zero,c000f50 <keyInput+0x7e4>
							grid[y+1][x] == 1){//if bottom pixel is going to be an edge
 c000f10:	e0bffb17 	ldw	r2,-20(fp)
 c000f14:	10800044 	addi	r2,r2,1
 c000f18:	040300b4 	movhi	r16,3074
 c000f1c:	8431e404 	addi	r16,r16,-14448
 c000f20:	01401404 	movi	r5,80
 c000f24:	1009883a 	mov	r4,r2
 c000f28:	c004de00 	call	c004de0 <__mulsi3>
 c000f2c:	1007883a 	mov	r3,r2
 c000f30:	e0bffa17 	ldw	r2,-24(fp)
 c000f34:	1885883a 	add	r2,r3,r2
 c000f38:	1085883a 	add	r2,r2,r2
 c000f3c:	1085883a 	add	r2,r2,r2
 c000f40:	8085883a 	add	r2,r16,r2
 c000f44:	10800017 	ldw	r2,0(r2)
							x = 40;
							maxY-=2;
						}
						break;
					case 4  :
						if (grid[y+1][x+1] ==  1|| //if side block is an edge
 c000f48:	10800058 	cmpnei	r2,r2,1
 c000f4c:	1000db1e 	bne	r2,zero,c0012bc <keyInput+0xb50>
							grid[y+1][x] == 1){//if bottom pixel is going to be an edge
							setEdge(x,y);
 c000f50:	e17ffb17 	ldw	r5,-20(fp)
 c000f54:	e13ffa17 	ldw	r4,-24(fp)
 c000f58:	c00147c0 	call	c00147c <setEdge>
							setEdge(x,y-1);
 c000f5c:	e0bffb17 	ldw	r2,-20(fp)
 c000f60:	10bfffc4 	addi	r2,r2,-1
 c000f64:	100b883a 	mov	r5,r2
 c000f68:	e13ffa17 	ldw	r4,-24(fp)
 c000f6c:	c00147c0 	call	c00147c <setEdge>
							setEdge(x+1,y);
 c000f70:	e0bffa17 	ldw	r2,-24(fp)
 c000f74:	10800044 	addi	r2,r2,1
 c000f78:	e17ffb17 	ldw	r5,-20(fp)
 c000f7c:	1009883a 	mov	r4,r2
 c000f80:	c00147c0 	call	c00147c <setEdge>
							setEdge(x+1,y-1);//set as edge
 c000f84:	e0bffa17 	ldw	r2,-24(fp)
 c000f88:	10c00044 	addi	r3,r2,1
 c000f8c:	e0bffb17 	ldw	r2,-20(fp)
 c000f90:	10bfffc4 	addi	r2,r2,-1
 c000f94:	100b883a 	mov	r5,r2
 c000f98:	1809883a 	mov	r4,r3
 c000f9c:	c00147c0 	call	c00147c <setEdge>
							newIndex = rand()%7;
 c000fa0:	c004f600 	call	c004f60 <rand>
 c000fa4:	014001c4 	movi	r5,7
 c000fa8:	1009883a 	mov	r4,r2
 c000fac:	c004cb00 	call	c004cb0 <__modsi3>
 c000fb0:	e0bfef15 	stw	r2,-68(fp)
							newColor = rand()%15+1;
 c000fb4:	c004f600 	call	c004f60 <rand>
 c000fb8:	014003c4 	movi	r5,15
 c000fbc:	1009883a 	mov	r4,r2
 c000fc0:	c004cb00 	call	c004cb0 <__modsi3>
 c000fc4:	10800044 	addi	r2,r2,1
 c000fc8:	e0bff015 	stw	r2,-64(fp)
							y = 11;
 c000fcc:	008002c4 	movi	r2,11
 c000fd0:	e0bffb15 	stw	r2,-20(fp)
							x = 40;
 c000fd4:	00800a04 	movi	r2,40
 c000fd8:	e0bffa15 	stw	r2,-24(fp)
							maxY-=2;
 c000fdc:	e0bff117 	ldw	r2,-60(fp)
 c000fe0:	10bfff84 	addi	r2,r2,-2
 c000fe4:	e0bff115 	stw	r2,-60(fp)
						}
						break;
 c000fe8:	0000b406 	br	c0012bc <keyInput+0xb50>
					case 5  :
						if (grid[y+1][x+1] ==  1 || //if side block is an edge
 c000fec:	e0bffb17 	ldw	r2,-20(fp)
 c000ff0:	10c00044 	addi	r3,r2,1
 c000ff4:	e0bffa17 	ldw	r2,-24(fp)
 c000ff8:	14400044 	addi	r17,r2,1
 c000ffc:	040300b4 	movhi	r16,3074
 c001000:	8431e404 	addi	r16,r16,-14448
 c001004:	01401404 	movi	r5,80
 c001008:	1809883a 	mov	r4,r3
 c00100c:	c004de00 	call	c004de0 <__mulsi3>
 c001010:	1445883a 	add	r2,r2,r17
 c001014:	1085883a 	add	r2,r2,r2
 c001018:	1085883a 	add	r2,r2,r2
 c00101c:	8085883a 	add	r2,r16,r2
 c001020:	10800017 	ldw	r2,0(r2)
 c001024:	10800060 	cmpeqi	r2,r2,1
 c001028:	10001f1e 	bne	r2,zero,c0010a8 <keyInput+0x93c>
							grid[y][x-1] ==  1 || //if side block is an edge
 c00102c:	e0bffa17 	ldw	r2,-24(fp)
 c001030:	147fffc4 	addi	r17,r2,-1
 c001034:	040300b4 	movhi	r16,3074
 c001038:	8431e404 	addi	r16,r16,-14448
 c00103c:	e0bffb17 	ldw	r2,-20(fp)
 c001040:	01401404 	movi	r5,80
 c001044:	1009883a 	mov	r4,r2
 c001048:	c004de00 	call	c004de0 <__mulsi3>
 c00104c:	1445883a 	add	r2,r2,r17
 c001050:	1085883a 	add	r2,r2,r2
 c001054:	1085883a 	add	r2,r2,r2
 c001058:	8085883a 	add	r2,r16,r2
 c00105c:	10800017 	ldw	r2,0(r2)
							x = 40;
							maxY-=2;
						}
						break;
					case 5  :
						if (grid[y+1][x+1] ==  1 || //if side block is an edge
 c001060:	10800060 	cmpeqi	r2,r2,1
 c001064:	1000101e 	bne	r2,zero,c0010a8 <keyInput+0x93c>
							grid[y][x-1] ==  1 || //if side block is an edge
							grid[y+1][x] == 1){//if bottom pixel is going to be an edge
 c001068:	e0bffb17 	ldw	r2,-20(fp)
 c00106c:	10800044 	addi	r2,r2,1
 c001070:	040300b4 	movhi	r16,3074
 c001074:	8431e404 	addi	r16,r16,-14448
 c001078:	01401404 	movi	r5,80
 c00107c:	1009883a 	mov	r4,r2
 c001080:	c004de00 	call	c004de0 <__mulsi3>
 c001084:	1007883a 	mov	r3,r2
 c001088:	e0bffa17 	ldw	r2,-24(fp)
 c00108c:	1885883a 	add	r2,r3,r2
 c001090:	1085883a 	add	r2,r2,r2
 c001094:	1085883a 	add	r2,r2,r2
 c001098:	8085883a 	add	r2,r16,r2
 c00109c:	10800017 	ldw	r2,0(r2)
							maxY-=2;
						}
						break;
					case 5  :
						if (grid[y+1][x+1] ==  1 || //if side block is an edge
							grid[y][x-1] ==  1 || //if side block is an edge
 c0010a0:	10800058 	cmpnei	r2,r2,1
 c0010a4:	1000871e 	bne	r2,zero,c0012c4 <keyInput+0xb58>
							grid[y+1][x] == 1){//if bottom pixel is going to be an edge
							setEdge(x,y);
 c0010a8:	e17ffb17 	ldw	r5,-20(fp)
 c0010ac:	e13ffa17 	ldw	r4,-24(fp)
 c0010b0:	c00147c0 	call	c00147c <setEdge>
							setEdge(x,y-1);
 c0010b4:	e0bffb17 	ldw	r2,-20(fp)
 c0010b8:	10bfffc4 	addi	r2,r2,-1
 c0010bc:	100b883a 	mov	r5,r2
 c0010c0:	e13ffa17 	ldw	r4,-24(fp)
 c0010c4:	c00147c0 	call	c00147c <setEdge>
							setEdge(x-1,y-1);
 c0010c8:	e0bffa17 	ldw	r2,-24(fp)
 c0010cc:	10ffffc4 	addi	r3,r2,-1
 c0010d0:	e0bffb17 	ldw	r2,-20(fp)
 c0010d4:	10bfffc4 	addi	r2,r2,-1
 c0010d8:	100b883a 	mov	r5,r2
 c0010dc:	1809883a 	mov	r4,r3
 c0010e0:	c00147c0 	call	c00147c <setEdge>
							setEdge(x+1,y);//set as edge
 c0010e4:	e0bffa17 	ldw	r2,-24(fp)
 c0010e8:	10800044 	addi	r2,r2,1
 c0010ec:	e17ffb17 	ldw	r5,-20(fp)
 c0010f0:	1009883a 	mov	r4,r2
 c0010f4:	c00147c0 	call	c00147c <setEdge>
							newIndex = rand()%7;
 c0010f8:	c004f600 	call	c004f60 <rand>
 c0010fc:	014001c4 	movi	r5,7
 c001100:	1009883a 	mov	r4,r2
 c001104:	c004cb00 	call	c004cb0 <__modsi3>
 c001108:	e0bfef15 	stw	r2,-68(fp)
							newColor = rand()%15+1;
 c00110c:	c004f600 	call	c004f60 <rand>
 c001110:	014003c4 	movi	r5,15
 c001114:	1009883a 	mov	r4,r2
 c001118:	c004cb00 	call	c004cb0 <__modsi3>
 c00111c:	10800044 	addi	r2,r2,1
 c001120:	e0bff015 	stw	r2,-64(fp)
							y = 11;
 c001124:	008002c4 	movi	r2,11
 c001128:	e0bffb15 	stw	r2,-20(fp)
							x = 40;
 c00112c:	00800a04 	movi	r2,40
 c001130:	e0bffa15 	stw	r2,-24(fp)
							maxY-=2;
 c001134:	e0bff117 	ldw	r2,-60(fp)
 c001138:	10bfff84 	addi	r2,r2,-2
 c00113c:	e0bff115 	stw	r2,-60(fp)
						}
						break;
 c001140:	00006006 	br	c0012c4 <keyInput+0xb58>
					default :
						if (grid[y+1][x-1] ==  1|| //if side block is an edge
 c001144:	e0bffb17 	ldw	r2,-20(fp)
 c001148:	10c00044 	addi	r3,r2,1
 c00114c:	e0bffa17 	ldw	r2,-24(fp)
 c001150:	147fffc4 	addi	r17,r2,-1
 c001154:	040300b4 	movhi	r16,3074
 c001158:	8431e404 	addi	r16,r16,-14448
 c00115c:	01401404 	movi	r5,80
 c001160:	1809883a 	mov	r4,r3
 c001164:	c004de00 	call	c004de0 <__mulsi3>
 c001168:	1445883a 	add	r2,r2,r17
 c00116c:	1085883a 	add	r2,r2,r2
 c001170:	1085883a 	add	r2,r2,r2
 c001174:	8085883a 	add	r2,r16,r2
 c001178:	10800017 	ldw	r2,0(r2)
 c00117c:	10800060 	cmpeqi	r2,r2,1
 c001180:	10001f1e 	bne	r2,zero,c001200 <keyInput+0xa94>
							grid[y][x+1] ==  1|| //if side block is an edge
 c001184:	e0bffa17 	ldw	r2,-24(fp)
 c001188:	14400044 	addi	r17,r2,1
 c00118c:	040300b4 	movhi	r16,3074
 c001190:	8431e404 	addi	r16,r16,-14448
 c001194:	e0bffb17 	ldw	r2,-20(fp)
 c001198:	01401404 	movi	r5,80
 c00119c:	1009883a 	mov	r4,r2
 c0011a0:	c004de00 	call	c004de0 <__mulsi3>
 c0011a4:	1445883a 	add	r2,r2,r17
 c0011a8:	1085883a 	add	r2,r2,r2
 c0011ac:	1085883a 	add	r2,r2,r2
 c0011b0:	8085883a 	add	r2,r16,r2
 c0011b4:	10800017 	ldw	r2,0(r2)
							x = 40;
							maxY-=2;
						}
						break;
					default :
						if (grid[y+1][x-1] ==  1|| //if side block is an edge
 c0011b8:	10800060 	cmpeqi	r2,r2,1
 c0011bc:	1000101e 	bne	r2,zero,c001200 <keyInput+0xa94>
							grid[y][x+1] ==  1|| //if side block is an edge
							grid[y+1][x] == 1){//if bottom pixel is going to be an edge
 c0011c0:	e0bffb17 	ldw	r2,-20(fp)
 c0011c4:	10800044 	addi	r2,r2,1
 c0011c8:	040300b4 	movhi	r16,3074
 c0011cc:	8431e404 	addi	r16,r16,-14448
 c0011d0:	01401404 	movi	r5,80
 c0011d4:	1009883a 	mov	r4,r2
 c0011d8:	c004de00 	call	c004de0 <__mulsi3>
 c0011dc:	1007883a 	mov	r3,r2
 c0011e0:	e0bffa17 	ldw	r2,-24(fp)
 c0011e4:	1885883a 	add	r2,r3,r2
 c0011e8:	1085883a 	add	r2,r2,r2
 c0011ec:	1085883a 	add	r2,r2,r2
 c0011f0:	8085883a 	add	r2,r16,r2
 c0011f4:	10800017 	ldw	r2,0(r2)
							maxY-=2;
						}
						break;
					default :
						if (grid[y+1][x-1] ==  1|| //if side block is an edge
							grid[y][x+1] ==  1|| //if side block is an edge
 c0011f8:	10800058 	cmpnei	r2,r2,1
 c0011fc:	1000321e 	bne	r2,zero,c0012c8 <keyInput+0xb5c>
							grid[y+1][x] == 1){//if bottom pixel is going to be an edge
							setEdge(x,y);
 c001200:	e17ffb17 	ldw	r5,-20(fp)
 c001204:	e13ffa17 	ldw	r4,-24(fp)
 c001208:	c00147c0 	call	c00147c <setEdge>
							setEdge(x,y-1);
 c00120c:	e0bffb17 	ldw	r2,-20(fp)
 c001210:	10bfffc4 	addi	r2,r2,-1
 c001214:	100b883a 	mov	r5,r2
 c001218:	e13ffa17 	ldw	r4,-24(fp)
 c00121c:	c00147c0 	call	c00147c <setEdge>
							setEdge(x+1,y-1);
 c001220:	e0bffa17 	ldw	r2,-24(fp)
 c001224:	10c00044 	addi	r3,r2,1
 c001228:	e0bffb17 	ldw	r2,-20(fp)
 c00122c:	10bfffc4 	addi	r2,r2,-1
 c001230:	100b883a 	mov	r5,r2
 c001234:	1809883a 	mov	r4,r3
 c001238:	c00147c0 	call	c00147c <setEdge>
							setEdge(x-1,y);//set as edge
 c00123c:	e0bffa17 	ldw	r2,-24(fp)
 c001240:	10bfffc4 	addi	r2,r2,-1
 c001244:	e17ffb17 	ldw	r5,-20(fp)
 c001248:	1009883a 	mov	r4,r2
 c00124c:	c00147c0 	call	c00147c <setEdge>
							newIndex = rand()%7;
 c001250:	c004f600 	call	c004f60 <rand>
 c001254:	014001c4 	movi	r5,7
 c001258:	1009883a 	mov	r4,r2
 c00125c:	c004cb00 	call	c004cb0 <__modsi3>
 c001260:	e0bfef15 	stw	r2,-68(fp)
							newColor = rand()%15+1;
 c001264:	c004f600 	call	c004f60 <rand>
 c001268:	014003c4 	movi	r5,15
 c00126c:	1009883a 	mov	r4,r2
 c001270:	c004cb00 	call	c004cb0 <__modsi3>
 c001274:	10800044 	addi	r2,r2,1
 c001278:	e0bff015 	stw	r2,-64(fp)
							y = 11;
 c00127c:	008002c4 	movi	r2,11
 c001280:	e0bffb15 	stw	r2,-20(fp)
							x = 40;
 c001284:	00800a04 	movi	r2,40
 c001288:	e0bffa15 	stw	r2,-24(fp)
							maxY-=2;
 c00128c:	e0bff117 	ldw	r2,-60(fp)
 c001290:	10bfff84 	addi	r2,r2,-2
 c001294:	e0bff115 	stw	r2,-60(fp)
 c001298:	00000b06 	br	c0012c8 <keyInput+0xb5c>
							newColor = rand()%15+1;
							y = 13;
							x = 40;
							maxY-=4;
						}
						break;
 c00129c:	0001883a 	nop
 c0012a0:	00000906 	br	c0012c8 <keyInput+0xb5c>
							newColor = rand()%15+1;
							y = 13;
							x = 40;
							maxY-=4;
						}
						break;
 c0012a4:	0001883a 	nop
 c0012a8:	00000706 	br	c0012c8 <keyInput+0xb5c>
							newColor = rand()%15+1;
							y = 13;
							x = 40;
							maxY-=4;
						}
						break;
 c0012ac:	0001883a 	nop
 c0012b0:	00000506 	br	c0012c8 <keyInput+0xb5c>
							newColor = rand()%15+1;
							y = 11;
							x = 40;
							maxY-=2;
						}
						break;
 c0012b4:	0001883a 	nop
 c0012b8:	00000306 	br	c0012c8 <keyInput+0xb5c>
							newColor = rand()%15+1;
							y = 11;
							x = 40;
							maxY-=2;
						}
						break;
 c0012bc:	0001883a 	nop
 c0012c0:	00000106 	br	c0012c8 <keyInput+0xb5c>
							newColor = rand()%15+1;
							y = 11;
							x = 40;
							maxY-=2;
						}
						break;
 c0012c4:	0001883a 	nop
							y = 11;
							x = 40;
							maxY-=2;
						}
					}
				userControlledBlockGrid(x, y, newIndex,0);
 c0012c8:	000f883a 	mov	r7,zero
 c0012cc:	e1bfef17 	ldw	r6,-68(fp)
 c0012d0:	e17ffb17 	ldw	r5,-20(fp)
 c0012d4:	e13ffa17 	ldw	r4,-24(fp)
 c0012d8:	c0015cc0 	call	c0015cc <userControlledBlockGrid>
				x+=xChange; //update X
 c0012dc:	e0fffa17 	ldw	r3,-24(fp)
 c0012e0:	e0bfed17 	ldw	r2,-76(fp)
 c0012e4:	1885883a 	add	r2,r3,r2
 c0012e8:	e0bffa15 	stw	r2,-24(fp)
				y+=yChange; //update Y
 c0012ec:	e0fffb17 	ldw	r3,-20(fp)
 c0012f0:	e0bfee17 	ldw	r2,-72(fp)
 c0012f4:	1885883a 	add	r2,r3,r2
 c0012f8:	e0bffb15 	stw	r2,-20(fp)
				if (maxY > 10) {
 c0012fc:	e0bff117 	ldw	r2,-60(fp)
 c001300:	108002d0 	cmplti	r2,r2,11
 c001304:	10002f1e 	bne	r2,zero,c0013c4 <keyInput+0xc58>
					xChange = 0;
 c001308:	e03fed15 	stw	zero,-76(fp)
					for (int holderY = 47; holderY > maxY; holderY--) {
 c00130c:	00800bc4 	movi	r2,47
 c001310:	e0bff415 	stw	r2,-48(fp)
 c001314:	00000f06 	br	c001354 <keyInput+0xbe8>
						if (checkRow(holderY) == 1) {
 c001318:	e13ff417 	ldw	r4,-48(fp)
 c00131c:	c001d400 	call	c001d40 <checkRow>
 c001320:	10800058 	cmpnei	r2,r2,1
 c001324:	1000081e 	bne	r2,zero,c001348 <keyInput+0xbdc>
							printf("/n filled screen at %u", holderY);
 c001328:	e17ff417 	ldw	r5,-48(fp)
 c00132c:	010300b4 	movhi	r4,3074
 c001330:	21218704 	addi	r4,r4,-31204
 c001334:	c004e380 	call	c004e38 <printf>
							readjustScreen(holderY, maxY);
 c001338:	e17ff117 	ldw	r5,-60(fp)
 c00133c:	e13ff417 	ldw	r4,-48(fp)
 c001340:	c001dd40 	call	c001dd4 <readjustScreen>
							break;
 c001344:	00000606 	br	c001360 <keyInput+0xbf4>
				userControlledBlockGrid(x, y, newIndex,0);
				x+=xChange; //update X
				y+=yChange; //update Y
				if (maxY > 10) {
					xChange = 0;
					for (int holderY = 47; holderY > maxY; holderY--) {
 c001348:	e0bff417 	ldw	r2,-48(fp)
 c00134c:	10bfffc4 	addi	r2,r2,-1
 c001350:	e0bff415 	stw	r2,-48(fp)
 c001354:	e0bff417 	ldw	r2,-48(fp)
 c001358:	e0fff117 	ldw	r3,-60(fp)
 c00135c:	18bfee16 	blt	r3,r2,c001318 <__alt_data_end+0xfc001318>
							printf("/n filled screen at %u", holderY);
							readjustScreen(holderY, maxY);
							break;
						}
					}
					userControlledBlockGrid(x, y, newIndex, newColor);
 c001360:	e1fff017 	ldw	r7,-64(fp)
 c001364:	e1bfef17 	ldw	r6,-68(fp)
 c001368:	e17ffb17 	ldw	r5,-20(fp)
 c00136c:	e13ffa17 	ldw	r4,-24(fp)
 c001370:	c0015cc0 	call	c0015cc <userControlledBlockGrid>
					paintScreen();
 c001374:	c001f1c0 	call	c001f1c <paintScreen>
					yChange = 1;
 c001378:	00800044 	movi	r2,1
 c00137c:	e0bfee15 	stw	r2,-72(fp)
				} else {
					printf("' %u + gameOver'",maxY);
					return;
				}

				setKeycode(kbdbuf.keycode[0]);
 c001380:	e0bff7c3 	ldbu	r2,-33(fp)
 c001384:	10803fcc 	andi	r2,r2,255
 c001388:	1009883a 	mov	r4,r2
 c00138c:	c0007380 	call	c000738 <setKeycode>
				printSignedHex0(kbdbuf.keycode[0]);
 c001390:	e0bff7c3 	ldbu	r2,-33(fp)
 c001394:	10803fcc 	andi	r2,r2,255
 c001398:	1080201c 	xori	r2,r2,128
 c00139c:	10bfe004 	addi	r2,r2,-128
 c0013a0:	1009883a 	mov	r4,r2
 c0013a4:	c0004e80 	call	c0004e8 <printSignedHex0>
				printSignedHex1(kbdbuf.keycode[1]);
 c0013a8:	e0bff803 	ldbu	r2,-32(fp)
 c0013ac:	10803fcc 	andi	r2,r2,255
 c0013b0:	1080201c 	xori	r2,r2,128
 c0013b4:	10bfe004 	addi	r2,r2,-128
 c0013b8:	1009883a 	mov	r4,r2
 c0013bc:	c0006000 	call	c000600 <printSignedHex1>
 c0013c0:	003d0706 	br	c0007e0 <__alt_data_end+0xfc0007e0>
					userControlledBlockGrid(x, y, newIndex, newColor);
					paintScreen();
					yChange = 1;
					//printf("(%u,%u) - %u ; top: %u \n",x,y, grid[y][x], maxY);
				} else {
					printf("' %u + gameOver'",maxY);
 c0013c4:	e17ff117 	ldw	r5,-60(fp)
 c0013c8:	010300b4 	movhi	r4,3074
 c0013cc:	21218d04 	addi	r4,r4,-31180
 c0013d0:	c004e380 	call	c004e38 <printf>
					return;
 c0013d4:	00002206 	br	c001460 <keyInput+0xcf4>

				setKeycode(kbdbuf.keycode[0]);
				printSignedHex0(kbdbuf.keycode[0]);
				printSignedHex1(kbdbuf.keycode[1]);
			}
		} else if (GetUsbTaskState() == USB_STATE_ERROR) {
 c0013d8:	c004b500 	call	c004b50 <GetUsbTaskState>
 c0013dc:	10803fcc 	andi	r2,r2,255
 c0013e0:	10803fd8 	cmpnei	r2,r2,255
 c0013e4:	10000a1e 	bne	r2,zero,c001410 <keyInput+0xca4>
			if (!errorflag) {
 c0013e8:	e0bff243 	ldbu	r2,-55(fp)
 c0013ec:	103cfc1e 	bne	r2,zero,c0007e0 <__alt_data_end+0xfc0007e0>
				errorflag = 1;
 c0013f0:	00800044 	movi	r2,1
 c0013f4:	e0bff245 	stb	r2,-55(fp)
				clearLED(9);
 c0013f8:	01000244 	movi	r4,9
 c0013fc:	c0004a00 	call	c0004a0 <clearLED>
				printf("USB Error State\n");
 c001400:	010300b4 	movhi	r4,3074
 c001404:	21219204 	addi	r4,r4,-31160
 c001408:	c004f340 	call	c004f34 <puts>
 c00140c:	003cf406 	br	c0007e0 <__alt_data_end+0xfc0007e0>
				//print out string descriptor here
			}
		} else { //not in USB running state

			printf("USB task state: ");
 c001410:	010300b4 	movhi	r4,3074
 c001414:	21219604 	addi	r4,r4,-31144
 c001418:	c004e380 	call	c004e38 <printf>
			printf("%x\n", GetUsbTaskState());
 c00141c:	c004b500 	call	c004b50 <GetUsbTaskState>
 c001420:	10803fcc 	andi	r2,r2,255
 c001424:	100b883a 	mov	r5,r2
 c001428:	010300b4 	movhi	r4,3074
 c00142c:	21219b04 	addi	r4,r4,-31124
 c001430:	c004e380 	call	c004e38 <printf>
			if (runningdebugflag) {	//previously running, reset USB hardware just to clear out any funky state, HS/FS etc
 c001434:	e0bff203 	ldbu	r2,-56(fp)
 c001438:	10000326 	beq	r2,zero,c001448 <keyInput+0xcdc>
				runningdebugflag = 0;
 c00143c:	e03ff205 	stb	zero,-56(fp)
				MAX3421E_init();
 c001440:	c003b9c0 	call	c003b9c <MAX3421E_init>
				USB_init();
 c001444:	c0043480 	call	c004348 <USB_init>
			}
			errorflag = 0;
 c001448:	e03ff245 	stb	zero,-55(fp)
			clearLED(9);
 c00144c:	01000244 	movi	r4,9
 c001450:	c0004a00 	call	c0004a0 <clearLED>
 c001454:	003ce206 	br	c0007e0 <__alt_data_end+0xfc0007e0>
				device = GetDriverandReport();
			} else if (device == 1) {
				//run keyboard debug polling
				rcode = kbdPoll(&kbdbuf);
				if (rcode == hrNAK) {
					continue; //NAK means no new data
 c001458:	0001883a 	nop
				USB_init();
			}
			errorflag = 0;
			clearLED(9);
		}
	}
 c00145c:	003ce006 	br	c0007e0 <__alt_data_end+0xfc0007e0>
}
 c001460:	e6fffe04 	addi	sp,fp,-8
 c001464:	dfc00317 	ldw	ra,12(sp)
 c001468:	df000217 	ldw	fp,8(sp)
 c00146c:	dc400117 	ldw	r17,4(sp)
 c001470:	dc000017 	ldw	r16,0(sp)
 c001474:	dec00404 	addi	sp,sp,16
 c001478:	f800283a 	ret

0c00147c <setEdge>:

void setEdge(int x, int y) {
 c00147c:	defffb04 	addi	sp,sp,-20
 c001480:	dfc00415 	stw	ra,16(sp)
 c001484:	df000315 	stw	fp,12(sp)
 c001488:	dc000215 	stw	r16,8(sp)
 c00148c:	df000304 	addi	fp,sp,12
 c001490:	e13ffd15 	stw	r4,-12(fp)
 c001494:	e17ffe15 	stw	r5,-8(fp)
	grid[y][x] = 1;
 c001498:	040300b4 	movhi	r16,3074
 c00149c:	8431e404 	addi	r16,r16,-14448
 c0014a0:	e0bffe17 	ldw	r2,-8(fp)
 c0014a4:	01401404 	movi	r5,80
 c0014a8:	1009883a 	mov	r4,r2
 c0014ac:	c004de00 	call	c004de0 <__mulsi3>
 c0014b0:	1007883a 	mov	r3,r2
 c0014b4:	e0bffd17 	ldw	r2,-12(fp)
 c0014b8:	1885883a 	add	r2,r3,r2
 c0014bc:	1085883a 	add	r2,r2,r2
 c0014c0:	1085883a 	add	r2,r2,r2
 c0014c4:	8085883a 	add	r2,r16,r2
 c0014c8:	00c00044 	movi	r3,1
 c0014cc:	10c00015 	stw	r3,0(r2)
	//printf("set at: %u,%u; ",x,y);
}
 c0014d0:	0001883a 	nop
 c0014d4:	e6ffff04 	addi	sp,fp,-4
 c0014d8:	dfc00217 	ldw	ra,8(sp)
 c0014dc:	df000117 	ldw	fp,4(sp)
 c0014e0:	dc000017 	ldw	r16,0(sp)
 c0014e4:	dec00304 	addi	sp,sp,12
 c0014e8:	f800283a 	ret

0c0014ec <clearEdge>:

void clearEdge(int x, int y) {
 c0014ec:	defffb04 	addi	sp,sp,-20
 c0014f0:	dfc00415 	stw	ra,16(sp)
 c0014f4:	df000315 	stw	fp,12(sp)
 c0014f8:	dc000215 	stw	r16,8(sp)
 c0014fc:	df000304 	addi	fp,sp,12
 c001500:	e13ffd15 	stw	r4,-12(fp)
 c001504:	e17ffe15 	stw	r5,-8(fp)
	grid[y][x] = 0;
 c001508:	040300b4 	movhi	r16,3074
 c00150c:	8431e404 	addi	r16,r16,-14448
 c001510:	e0bffe17 	ldw	r2,-8(fp)
 c001514:	01401404 	movi	r5,80
 c001518:	1009883a 	mov	r4,r2
 c00151c:	c004de00 	call	c004de0 <__mulsi3>
 c001520:	1007883a 	mov	r3,r2
 c001524:	e0bffd17 	ldw	r2,-12(fp)
 c001528:	1885883a 	add	r2,r3,r2
 c00152c:	1085883a 	add	r2,r2,r2
 c001530:	1085883a 	add	r2,r2,r2
 c001534:	8085883a 	add	r2,r16,r2
 c001538:	10000015 	stw	zero,0(r2)
	//printf("set at: %u,%u; ",x,y);
}
 c00153c:	0001883a 	nop
 c001540:	e6ffff04 	addi	sp,fp,-4
 c001544:	dfc00217 	ldw	ra,8(sp)
 c001548:	df000117 	ldw	fp,4(sp)
 c00154c:	dc000017 	ldw	r16,0(sp)
 c001550:	dec00304 	addi	sp,sp,12
 c001554:	f800283a 	ret

0c001558 <setColor>:

void setColor(int x, int y, int color) {
 c001558:	defffa04 	addi	sp,sp,-24
 c00155c:	dfc00515 	stw	ra,20(sp)
 c001560:	df000415 	stw	fp,16(sp)
 c001564:	dc000315 	stw	r16,12(sp)
 c001568:	df000404 	addi	fp,sp,16
 c00156c:	e13ffc15 	stw	r4,-16(fp)
 c001570:	e17ffd15 	stw	r5,-12(fp)
 c001574:	e1bffe15 	stw	r6,-8(fp)
	colorValue[y][x] = color;
 c001578:	040300b4 	movhi	r16,3074
 c00157c:	8404a404 	addi	r16,r16,4752
 c001580:	e0bffd17 	ldw	r2,-12(fp)
 c001584:	01401404 	movi	r5,80
 c001588:	1009883a 	mov	r4,r2
 c00158c:	c004de00 	call	c004de0 <__mulsi3>
 c001590:	1007883a 	mov	r3,r2
 c001594:	e0bffc17 	ldw	r2,-16(fp)
 c001598:	1885883a 	add	r2,r3,r2
 c00159c:	1085883a 	add	r2,r2,r2
 c0015a0:	1085883a 	add	r2,r2,r2
 c0015a4:	8085883a 	add	r2,r16,r2
 c0015a8:	e0fffe17 	ldw	r3,-8(fp)
 c0015ac:	10c00015 	stw	r3,0(r2)
	//printf("set at: %u,%u; ",x,y);
}
 c0015b0:	0001883a 	nop
 c0015b4:	e6ffff04 	addi	sp,fp,-4
 c0015b8:	dfc00217 	ldw	ra,8(sp)
 c0015bc:	df000117 	ldw	fp,4(sp)
 c0015c0:	dc000017 	ldw	r16,0(sp)
 c0015c4:	dec00304 	addi	sp,sp,12
 c0015c8:	f800283a 	ret

0c0015cc <userControlledBlockGrid>:

void userControlledBlockGrid(int x, int y, int index,  int color) {
 c0015cc:	defff804 	addi	sp,sp,-32
 c0015d0:	dfc00715 	stw	ra,28(sp)
 c0015d4:	df000615 	stw	fp,24(sp)
 c0015d8:	dc400515 	stw	r17,20(sp)
 c0015dc:	dc000415 	stw	r16,16(sp)
 c0015e0:	df000604 	addi	fp,sp,24
 c0015e4:	e13ffa15 	stw	r4,-24(fp)
 c0015e8:	e17ffb15 	stw	r5,-20(fp)
 c0015ec:	e1bffc15 	stw	r6,-16(fp)
 c0015f0:	e1fffd15 	stw	r7,-12(fp)
	switch(index) {
 c0015f4:	e0bffc17 	ldw	r2,-16(fp)
 c0015f8:	108001a8 	cmpgeui	r2,r2,6
 c0015fc:	10018e1e 	bne	r2,zero,c001c38 <userControlledBlockGrid+0x66c>
 c001600:	e0bffc17 	ldw	r2,-16(fp)
 c001604:	100690ba 	slli	r3,r2,2
 c001608:	00830034 	movhi	r2,3072
 c00160c:	10858704 	addi	r2,r2,5660
 c001610:	1885883a 	add	r2,r3,r2
 c001614:	10800017 	ldw	r2,0(r2)
 c001618:	1000683a 	jmp	r2
 c00161c:	0c001634 	orhi	r16,at,88
 c001620:	0c001724 	muli	r16,at,92
 c001624:	0c001850 	cmplti	r16,at,97
 c001628:	0c001978 	rdprs	r16,at,101
 c00162c:	0c001a60 	cmpeqi	r16,at,105
 c001630:	0c001b4c 	andi	r16,at,109
		   case 0  :
				   colorValue[y-3][x] = color;//VGADrawColorBox(x,y-3,color);
 c001634:	e0bffb17 	ldw	r2,-20(fp)
 c001638:	10bfff44 	addi	r2,r2,-3
 c00163c:	040300b4 	movhi	r16,3074
 c001640:	8404a404 	addi	r16,r16,4752
 c001644:	01401404 	movi	r5,80
 c001648:	1009883a 	mov	r4,r2
 c00164c:	c004de00 	call	c004de0 <__mulsi3>
 c001650:	1007883a 	mov	r3,r2
 c001654:	e0bffa17 	ldw	r2,-24(fp)
 c001658:	1885883a 	add	r2,r3,r2
 c00165c:	1085883a 	add	r2,r2,r2
 c001660:	1085883a 	add	r2,r2,r2
 c001664:	8085883a 	add	r2,r16,r2
 c001668:	e0fffd17 	ldw	r3,-12(fp)
 c00166c:	10c00015 	stw	r3,0(r2)
				   colorValue[y-2][x] = color;//VGADrawColorBox(x,y-2,color);
 c001670:	e0bffb17 	ldw	r2,-20(fp)
 c001674:	10bfff84 	addi	r2,r2,-2
 c001678:	040300b4 	movhi	r16,3074
 c00167c:	8404a404 	addi	r16,r16,4752
 c001680:	01401404 	movi	r5,80
 c001684:	1009883a 	mov	r4,r2
 c001688:	c004de00 	call	c004de0 <__mulsi3>
 c00168c:	1007883a 	mov	r3,r2
 c001690:	e0bffa17 	ldw	r2,-24(fp)
 c001694:	1885883a 	add	r2,r3,r2
 c001698:	1085883a 	add	r2,r2,r2
 c00169c:	1085883a 	add	r2,r2,r2
 c0016a0:	8085883a 	add	r2,r16,r2
 c0016a4:	e0fffd17 	ldw	r3,-12(fp)
 c0016a8:	10c00015 	stw	r3,0(r2)
				   colorValue[y-1][x] = color;//VGADrawColorBox(x,y-1,color);
 c0016ac:	e0bffb17 	ldw	r2,-20(fp)
 c0016b0:	10bfffc4 	addi	r2,r2,-1
 c0016b4:	040300b4 	movhi	r16,3074
 c0016b8:	8404a404 	addi	r16,r16,4752
 c0016bc:	01401404 	movi	r5,80
 c0016c0:	1009883a 	mov	r4,r2
 c0016c4:	c004de00 	call	c004de0 <__mulsi3>
 c0016c8:	1007883a 	mov	r3,r2
 c0016cc:	e0bffa17 	ldw	r2,-24(fp)
 c0016d0:	1885883a 	add	r2,r3,r2
 c0016d4:	1085883a 	add	r2,r2,r2
 c0016d8:	1085883a 	add	r2,r2,r2
 c0016dc:	8085883a 	add	r2,r16,r2
 c0016e0:	e0fffd17 	ldw	r3,-12(fp)
 c0016e4:	10c00015 	stw	r3,0(r2)
				   colorValue[y][x] = color;//VGADrawColorBox(x,y,color);
 c0016e8:	040300b4 	movhi	r16,3074
 c0016ec:	8404a404 	addi	r16,r16,4752
 c0016f0:	e0bffb17 	ldw	r2,-20(fp)
 c0016f4:	01401404 	movi	r5,80
 c0016f8:	1009883a 	mov	r4,r2
 c0016fc:	c004de00 	call	c004de0 <__mulsi3>
 c001700:	1007883a 	mov	r3,r2
 c001704:	e0bffa17 	ldw	r2,-24(fp)
 c001708:	1885883a 	add	r2,r3,r2
 c00170c:	1085883a 	add	r2,r2,r2
 c001710:	1085883a 	add	r2,r2,r2
 c001714:	8085883a 	add	r2,r16,r2
 c001718:	e0fffd17 	ldw	r3,-12(fp)
 c00171c:	10c00015 	stw	r3,0(r2)
			      break;
 c001720:	00017f06 	br	c001d20 <userControlledBlockGrid+0x754>
		   case 1  :
				   colorValue[y-3][x+1] = color;//VGADrawColorBox(x+1,y-3,color);
 c001724:	e0bffb17 	ldw	r2,-20(fp)
 c001728:	10ffff44 	addi	r3,r2,-3
 c00172c:	e0bffa17 	ldw	r2,-24(fp)
 c001730:	14400044 	addi	r17,r2,1
 c001734:	040300b4 	movhi	r16,3074
 c001738:	8404a404 	addi	r16,r16,4752
 c00173c:	01401404 	movi	r5,80
 c001740:	1809883a 	mov	r4,r3
 c001744:	c004de00 	call	c004de0 <__mulsi3>
 c001748:	1445883a 	add	r2,r2,r17
 c00174c:	1085883a 	add	r2,r2,r2
 c001750:	1085883a 	add	r2,r2,r2
 c001754:	8085883a 	add	r2,r16,r2
 c001758:	e0fffd17 	ldw	r3,-12(fp)
 c00175c:	10c00015 	stw	r3,0(r2)
				   colorValue[y-3][x] = color;//VGADrawColorBox(x,y-3,color);
 c001760:	e0bffb17 	ldw	r2,-20(fp)
 c001764:	10bfff44 	addi	r2,r2,-3
 c001768:	040300b4 	movhi	r16,3074
 c00176c:	8404a404 	addi	r16,r16,4752
 c001770:	01401404 	movi	r5,80
 c001774:	1009883a 	mov	r4,r2
 c001778:	c004de00 	call	c004de0 <__mulsi3>
 c00177c:	1007883a 	mov	r3,r2
 c001780:	e0bffa17 	ldw	r2,-24(fp)
 c001784:	1885883a 	add	r2,r3,r2
 c001788:	1085883a 	add	r2,r2,r2
 c00178c:	1085883a 	add	r2,r2,r2
 c001790:	8085883a 	add	r2,r16,r2
 c001794:	e0fffd17 	ldw	r3,-12(fp)
 c001798:	10c00015 	stw	r3,0(r2)
				   colorValue[y-2][x] = color;//VGADrawColorBox(x,y-2,color);
 c00179c:	e0bffb17 	ldw	r2,-20(fp)
 c0017a0:	10bfff84 	addi	r2,r2,-2
 c0017a4:	040300b4 	movhi	r16,3074
 c0017a8:	8404a404 	addi	r16,r16,4752
 c0017ac:	01401404 	movi	r5,80
 c0017b0:	1009883a 	mov	r4,r2
 c0017b4:	c004de00 	call	c004de0 <__mulsi3>
 c0017b8:	1007883a 	mov	r3,r2
 c0017bc:	e0bffa17 	ldw	r2,-24(fp)
 c0017c0:	1885883a 	add	r2,r3,r2
 c0017c4:	1085883a 	add	r2,r2,r2
 c0017c8:	1085883a 	add	r2,r2,r2
 c0017cc:	8085883a 	add	r2,r16,r2
 c0017d0:	e0fffd17 	ldw	r3,-12(fp)
 c0017d4:	10c00015 	stw	r3,0(r2)
				   colorValue[y-1][x] = color;//VGADrawColorBoxx,y-1,color);
 c0017d8:	e0bffb17 	ldw	r2,-20(fp)
 c0017dc:	10bfffc4 	addi	r2,r2,-1
 c0017e0:	040300b4 	movhi	r16,3074
 c0017e4:	8404a404 	addi	r16,r16,4752
 c0017e8:	01401404 	movi	r5,80
 c0017ec:	1009883a 	mov	r4,r2
 c0017f0:	c004de00 	call	c004de0 <__mulsi3>
 c0017f4:	1007883a 	mov	r3,r2
 c0017f8:	e0bffa17 	ldw	r2,-24(fp)
 c0017fc:	1885883a 	add	r2,r3,r2
 c001800:	1085883a 	add	r2,r2,r2
 c001804:	1085883a 	add	r2,r2,r2
 c001808:	8085883a 	add	r2,r16,r2
 c00180c:	e0fffd17 	ldw	r3,-12(fp)
 c001810:	10c00015 	stw	r3,0(r2)
				   colorValue[y][x] = color;//VGADrawColorBox(x,y,color);
 c001814:	040300b4 	movhi	r16,3074
 c001818:	8404a404 	addi	r16,r16,4752
 c00181c:	e0bffb17 	ldw	r2,-20(fp)
 c001820:	01401404 	movi	r5,80
 c001824:	1009883a 	mov	r4,r2
 c001828:	c004de00 	call	c004de0 <__mulsi3>
 c00182c:	1007883a 	mov	r3,r2
 c001830:	e0bffa17 	ldw	r2,-24(fp)
 c001834:	1885883a 	add	r2,r3,r2
 c001838:	1085883a 	add	r2,r2,r2
 c00183c:	1085883a 	add	r2,r2,r2
 c001840:	8085883a 	add	r2,r16,r2
 c001844:	e0fffd17 	ldw	r3,-12(fp)
 c001848:	10c00015 	stw	r3,0(r2)
		      break;
 c00184c:	00013406 	br	c001d20 <userControlledBlockGrid+0x754>
		   case 2  :
			   colorValue[y-3][x] = color;//VGADrawColorBox(x,y-3,color);
 c001850:	e0bffb17 	ldw	r2,-20(fp)
 c001854:	10bfff44 	addi	r2,r2,-3
 c001858:	040300b4 	movhi	r16,3074
 c00185c:	8404a404 	addi	r16,r16,4752
 c001860:	01401404 	movi	r5,80
 c001864:	1009883a 	mov	r4,r2
 c001868:	c004de00 	call	c004de0 <__mulsi3>
 c00186c:	1007883a 	mov	r3,r2
 c001870:	e0bffa17 	ldw	r2,-24(fp)
 c001874:	1885883a 	add	r2,r3,r2
 c001878:	1085883a 	add	r2,r2,r2
 c00187c:	1085883a 	add	r2,r2,r2
 c001880:	8085883a 	add	r2,r16,r2
 c001884:	e0fffd17 	ldw	r3,-12(fp)
 c001888:	10c00015 	stw	r3,0(r2)
			   colorValue[y-2][x] = color;//VGADrawColorBox(x,y-2,color);
 c00188c:	e0bffb17 	ldw	r2,-20(fp)
 c001890:	10bfff84 	addi	r2,r2,-2
 c001894:	040300b4 	movhi	r16,3074
 c001898:	8404a404 	addi	r16,r16,4752
 c00189c:	01401404 	movi	r5,80
 c0018a0:	1009883a 	mov	r4,r2
 c0018a4:	c004de00 	call	c004de0 <__mulsi3>
 c0018a8:	1007883a 	mov	r3,r2
 c0018ac:	e0bffa17 	ldw	r2,-24(fp)
 c0018b0:	1885883a 	add	r2,r3,r2
 c0018b4:	1085883a 	add	r2,r2,r2
 c0018b8:	1085883a 	add	r2,r2,r2
 c0018bc:	8085883a 	add	r2,r16,r2
 c0018c0:	e0fffd17 	ldw	r3,-12(fp)
 c0018c4:	10c00015 	stw	r3,0(r2)
			   colorValue[y-1][x] = color;//VGADrawColorBox(x,y-1,color);
 c0018c8:	e0bffb17 	ldw	r2,-20(fp)
 c0018cc:	10bfffc4 	addi	r2,r2,-1
 c0018d0:	040300b4 	movhi	r16,3074
 c0018d4:	8404a404 	addi	r16,r16,4752
 c0018d8:	01401404 	movi	r5,80
 c0018dc:	1009883a 	mov	r4,r2
 c0018e0:	c004de00 	call	c004de0 <__mulsi3>
 c0018e4:	1007883a 	mov	r3,r2
 c0018e8:	e0bffa17 	ldw	r2,-24(fp)
 c0018ec:	1885883a 	add	r2,r3,r2
 c0018f0:	1085883a 	add	r2,r2,r2
 c0018f4:	1085883a 	add	r2,r2,r2
 c0018f8:	8085883a 	add	r2,r16,r2
 c0018fc:	e0fffd17 	ldw	r3,-12(fp)
 c001900:	10c00015 	stw	r3,0(r2)
			   colorValue[y][x+1] = color;//VGADrawColorBox(x+1,y-3,color);
 c001904:	e0bffa17 	ldw	r2,-24(fp)
 c001908:	14400044 	addi	r17,r2,1
 c00190c:	040300b4 	movhi	r16,3074
 c001910:	8404a404 	addi	r16,r16,4752
 c001914:	e0bffb17 	ldw	r2,-20(fp)
 c001918:	01401404 	movi	r5,80
 c00191c:	1009883a 	mov	r4,r2
 c001920:	c004de00 	call	c004de0 <__mulsi3>
 c001924:	1445883a 	add	r2,r2,r17
 c001928:	1085883a 	add	r2,r2,r2
 c00192c:	1085883a 	add	r2,r2,r2
 c001930:	8085883a 	add	r2,r16,r2
 c001934:	e0fffd17 	ldw	r3,-12(fp)
 c001938:	10c00015 	stw	r3,0(r2)
			   colorValue[y][x] = color;//VGADrawColorBox(x,y,color);
 c00193c:	040300b4 	movhi	r16,3074
 c001940:	8404a404 	addi	r16,r16,4752
 c001944:	e0bffb17 	ldw	r2,-20(fp)
 c001948:	01401404 	movi	r5,80
 c00194c:	1009883a 	mov	r4,r2
 c001950:	c004de00 	call	c004de0 <__mulsi3>
 c001954:	1007883a 	mov	r3,r2
 c001958:	e0bffa17 	ldw	r2,-24(fp)
 c00195c:	1885883a 	add	r2,r3,r2
 c001960:	1085883a 	add	r2,r2,r2
 c001964:	1085883a 	add	r2,r2,r2
 c001968:	8085883a 	add	r2,r16,r2
 c00196c:	e0fffd17 	ldw	r3,-12(fp)
 c001970:	10c00015 	stw	r3,0(r2)
		      break;
 c001974:	0000ea06 	br	c001d20 <userControlledBlockGrid+0x754>
		   case 3  :
			   colorValue[y-1][x] = color;//VGADrawColorBox(x,y-1,color);
 c001978:	e0bffb17 	ldw	r2,-20(fp)
 c00197c:	10bfffc4 	addi	r2,r2,-1
 c001980:	040300b4 	movhi	r16,3074
 c001984:	8404a404 	addi	r16,r16,4752
 c001988:	01401404 	movi	r5,80
 c00198c:	1009883a 	mov	r4,r2
 c001990:	c004de00 	call	c004de0 <__mulsi3>
 c001994:	1007883a 	mov	r3,r2
 c001998:	e0bffa17 	ldw	r2,-24(fp)
 c00199c:	1885883a 	add	r2,r3,r2
 c0019a0:	1085883a 	add	r2,r2,r2
 c0019a4:	1085883a 	add	r2,r2,r2
 c0019a8:	8085883a 	add	r2,r16,r2
 c0019ac:	e0fffd17 	ldw	r3,-12(fp)
 c0019b0:	10c00015 	stw	r3,0(r2)
			   colorValue[y][x] = color;//VGADrawColorBox(x,y,color);
 c0019b4:	040300b4 	movhi	r16,3074
 c0019b8:	8404a404 	addi	r16,r16,4752
 c0019bc:	e0bffb17 	ldw	r2,-20(fp)
 c0019c0:	01401404 	movi	r5,80
 c0019c4:	1009883a 	mov	r4,r2
 c0019c8:	c004de00 	call	c004de0 <__mulsi3>
 c0019cc:	1007883a 	mov	r3,r2
 c0019d0:	e0bffa17 	ldw	r2,-24(fp)
 c0019d4:	1885883a 	add	r2,r3,r2
 c0019d8:	1085883a 	add	r2,r2,r2
 c0019dc:	1085883a 	add	r2,r2,r2
 c0019e0:	8085883a 	add	r2,r16,r2
 c0019e4:	e0fffd17 	ldw	r3,-12(fp)
 c0019e8:	10c00015 	stw	r3,0(r2)
			   colorValue[y][x-1] = color;//VGADrawColorBox(x-1,y,color);
 c0019ec:	e0bffa17 	ldw	r2,-24(fp)
 c0019f0:	147fffc4 	addi	r17,r2,-1
 c0019f4:	040300b4 	movhi	r16,3074
 c0019f8:	8404a404 	addi	r16,r16,4752
 c0019fc:	e0bffb17 	ldw	r2,-20(fp)
 c001a00:	01401404 	movi	r5,80
 c001a04:	1009883a 	mov	r4,r2
 c001a08:	c004de00 	call	c004de0 <__mulsi3>
 c001a0c:	1445883a 	add	r2,r2,r17
 c001a10:	1085883a 	add	r2,r2,r2
 c001a14:	1085883a 	add	r2,r2,r2
 c001a18:	8085883a 	add	r2,r16,r2
 c001a1c:	e0fffd17 	ldw	r3,-12(fp)
 c001a20:	10c00015 	stw	r3,0(r2)
			   colorValue[y][x+1] = color;//VGADrawColorBox(x+1,y,color);
 c001a24:	e0bffa17 	ldw	r2,-24(fp)
 c001a28:	14400044 	addi	r17,r2,1
 c001a2c:	040300b4 	movhi	r16,3074
 c001a30:	8404a404 	addi	r16,r16,4752
 c001a34:	e0bffb17 	ldw	r2,-20(fp)
 c001a38:	01401404 	movi	r5,80
 c001a3c:	1009883a 	mov	r4,r2
 c001a40:	c004de00 	call	c004de0 <__mulsi3>
 c001a44:	1445883a 	add	r2,r2,r17
 c001a48:	1085883a 	add	r2,r2,r2
 c001a4c:	1085883a 	add	r2,r2,r2
 c001a50:	8085883a 	add	r2,r16,r2
 c001a54:	e0fffd17 	ldw	r3,-12(fp)
 c001a58:	10c00015 	stw	r3,0(r2)
		      break;
 c001a5c:	0000b006 	br	c001d20 <userControlledBlockGrid+0x754>
		   case 4  :
			   colorValue[y][x+1] = color;//VGADrawColorBox(x+1,y,color);
 c001a60:	e0bffa17 	ldw	r2,-24(fp)
 c001a64:	14400044 	addi	r17,r2,1
 c001a68:	040300b4 	movhi	r16,3074
 c001a6c:	8404a404 	addi	r16,r16,4752
 c001a70:	e0bffb17 	ldw	r2,-20(fp)
 c001a74:	01401404 	movi	r5,80
 c001a78:	1009883a 	mov	r4,r2
 c001a7c:	c004de00 	call	c004de0 <__mulsi3>
 c001a80:	1445883a 	add	r2,r2,r17
 c001a84:	1085883a 	add	r2,r2,r2
 c001a88:	1085883a 	add	r2,r2,r2
 c001a8c:	8085883a 	add	r2,r16,r2
 c001a90:	e0fffd17 	ldw	r3,-12(fp)
 c001a94:	10c00015 	stw	r3,0(r2)
			   colorValue[y-1][x+1] = color;//VGADrawColorBox(x+1,y-1,color);
 c001a98:	e0bffb17 	ldw	r2,-20(fp)
 c001a9c:	10ffffc4 	addi	r3,r2,-1
 c001aa0:	e0bffa17 	ldw	r2,-24(fp)
 c001aa4:	14400044 	addi	r17,r2,1
 c001aa8:	040300b4 	movhi	r16,3074
 c001aac:	8404a404 	addi	r16,r16,4752
 c001ab0:	01401404 	movi	r5,80
 c001ab4:	1809883a 	mov	r4,r3
 c001ab8:	c004de00 	call	c004de0 <__mulsi3>
 c001abc:	1445883a 	add	r2,r2,r17
 c001ac0:	1085883a 	add	r2,r2,r2
 c001ac4:	1085883a 	add	r2,r2,r2
 c001ac8:	8085883a 	add	r2,r16,r2
 c001acc:	e0fffd17 	ldw	r3,-12(fp)
 c001ad0:	10c00015 	stw	r3,0(r2)
			   colorValue[y-1][x] = color;//VGADrawColorBox(x,y-1,color);
 c001ad4:	e0bffb17 	ldw	r2,-20(fp)
 c001ad8:	10bfffc4 	addi	r2,r2,-1
 c001adc:	040300b4 	movhi	r16,3074
 c001ae0:	8404a404 	addi	r16,r16,4752
 c001ae4:	01401404 	movi	r5,80
 c001ae8:	1009883a 	mov	r4,r2
 c001aec:	c004de00 	call	c004de0 <__mulsi3>
 c001af0:	1007883a 	mov	r3,r2
 c001af4:	e0bffa17 	ldw	r2,-24(fp)
 c001af8:	1885883a 	add	r2,r3,r2
 c001afc:	1085883a 	add	r2,r2,r2
 c001b00:	1085883a 	add	r2,r2,r2
 c001b04:	8085883a 	add	r2,r16,r2
 c001b08:	e0fffd17 	ldw	r3,-12(fp)
 c001b0c:	10c00015 	stw	r3,0(r2)
			   colorValue[y][x] = color;//VGADrawColorBox(x,y,color);
 c001b10:	040300b4 	movhi	r16,3074
 c001b14:	8404a404 	addi	r16,r16,4752
 c001b18:	e0bffb17 	ldw	r2,-20(fp)
 c001b1c:	01401404 	movi	r5,80
 c001b20:	1009883a 	mov	r4,r2
 c001b24:	c004de00 	call	c004de0 <__mulsi3>
 c001b28:	1007883a 	mov	r3,r2
 c001b2c:	e0bffa17 	ldw	r2,-24(fp)
 c001b30:	1885883a 	add	r2,r3,r2
 c001b34:	1085883a 	add	r2,r2,r2
 c001b38:	1085883a 	add	r2,r2,r2
 c001b3c:	8085883a 	add	r2,r16,r2
 c001b40:	e0fffd17 	ldw	r3,-12(fp)
 c001b44:	10c00015 	stw	r3,0(r2)
		      break;
 c001b48:	00007506 	br	c001d20 <userControlledBlockGrid+0x754>
		   case 5  :
			   colorValue[y][x+1] = color;//VGADrawColorBox(x+1,y,color);
 c001b4c:	e0bffa17 	ldw	r2,-24(fp)
 c001b50:	14400044 	addi	r17,r2,1
 c001b54:	040300b4 	movhi	r16,3074
 c001b58:	8404a404 	addi	r16,r16,4752
 c001b5c:	e0bffb17 	ldw	r2,-20(fp)
 c001b60:	01401404 	movi	r5,80
 c001b64:	1009883a 	mov	r4,r2
 c001b68:	c004de00 	call	c004de0 <__mulsi3>
 c001b6c:	1445883a 	add	r2,r2,r17
 c001b70:	1085883a 	add	r2,r2,r2
 c001b74:	1085883a 	add	r2,r2,r2
 c001b78:	8085883a 	add	r2,r16,r2
 c001b7c:	e0fffd17 	ldw	r3,-12(fp)
 c001b80:	10c00015 	stw	r3,0(r2)
			   colorValue[y-1][x] = color;//VGADrawColorBox(x,y-1,color);
 c001b84:	e0bffb17 	ldw	r2,-20(fp)
 c001b88:	10bfffc4 	addi	r2,r2,-1
 c001b8c:	040300b4 	movhi	r16,3074
 c001b90:	8404a404 	addi	r16,r16,4752
 c001b94:	01401404 	movi	r5,80
 c001b98:	1009883a 	mov	r4,r2
 c001b9c:	c004de00 	call	c004de0 <__mulsi3>
 c001ba0:	1007883a 	mov	r3,r2
 c001ba4:	e0bffa17 	ldw	r2,-24(fp)
 c001ba8:	1885883a 	add	r2,r3,r2
 c001bac:	1085883a 	add	r2,r2,r2
 c001bb0:	1085883a 	add	r2,r2,r2
 c001bb4:	8085883a 	add	r2,r16,r2
 c001bb8:	e0fffd17 	ldw	r3,-12(fp)
 c001bbc:	10c00015 	stw	r3,0(r2)
			   colorValue[y-1][x-1] = color;//VGADrawColorBox(x-1,y-1,color);
 c001bc0:	e0bffb17 	ldw	r2,-20(fp)
 c001bc4:	10ffffc4 	addi	r3,r2,-1
 c001bc8:	e0bffa17 	ldw	r2,-24(fp)
 c001bcc:	147fffc4 	addi	r17,r2,-1
 c001bd0:	040300b4 	movhi	r16,3074
 c001bd4:	8404a404 	addi	r16,r16,4752
 c001bd8:	01401404 	movi	r5,80
 c001bdc:	1809883a 	mov	r4,r3
 c001be0:	c004de00 	call	c004de0 <__mulsi3>
 c001be4:	1445883a 	add	r2,r2,r17
 c001be8:	1085883a 	add	r2,r2,r2
 c001bec:	1085883a 	add	r2,r2,r2
 c001bf0:	8085883a 	add	r2,r16,r2
 c001bf4:	e0fffd17 	ldw	r3,-12(fp)
 c001bf8:	10c00015 	stw	r3,0(r2)
			   colorValue[y][x] = color;//VGADrawColorBox(x,y,color);
 c001bfc:	040300b4 	movhi	r16,3074
 c001c00:	8404a404 	addi	r16,r16,4752
 c001c04:	e0bffb17 	ldw	r2,-20(fp)
 c001c08:	01401404 	movi	r5,80
 c001c0c:	1009883a 	mov	r4,r2
 c001c10:	c004de00 	call	c004de0 <__mulsi3>
 c001c14:	1007883a 	mov	r3,r2
 c001c18:	e0bffa17 	ldw	r2,-24(fp)
 c001c1c:	1885883a 	add	r2,r3,r2
 c001c20:	1085883a 	add	r2,r2,r2
 c001c24:	1085883a 	add	r2,r2,r2
 c001c28:	8085883a 	add	r2,r16,r2
 c001c2c:	e0fffd17 	ldw	r3,-12(fp)
 c001c30:	10c00015 	stw	r3,0(r2)
		      break;
 c001c34:	00003a06 	br	c001d20 <userControlledBlockGrid+0x754>
		   default :
			   colorValue[y-1][x] = color;//VGADrawColorBox(x,y-1,color);
 c001c38:	e0bffb17 	ldw	r2,-20(fp)
 c001c3c:	10bfffc4 	addi	r2,r2,-1
 c001c40:	040300b4 	movhi	r16,3074
 c001c44:	8404a404 	addi	r16,r16,4752
 c001c48:	01401404 	movi	r5,80
 c001c4c:	1009883a 	mov	r4,r2
 c001c50:	c004de00 	call	c004de0 <__mulsi3>
 c001c54:	1007883a 	mov	r3,r2
 c001c58:	e0bffa17 	ldw	r2,-24(fp)
 c001c5c:	1885883a 	add	r2,r3,r2
 c001c60:	1085883a 	add	r2,r2,r2
 c001c64:	1085883a 	add	r2,r2,r2
 c001c68:	8085883a 	add	r2,r16,r2
 c001c6c:	e0fffd17 	ldw	r3,-12(fp)
 c001c70:	10c00015 	stw	r3,0(r2)
			   colorValue[y-1][x+1] = color;//VGADrawColorBox(x+1,y-1,color);
 c001c74:	e0bffb17 	ldw	r2,-20(fp)
 c001c78:	10ffffc4 	addi	r3,r2,-1
 c001c7c:	e0bffa17 	ldw	r2,-24(fp)
 c001c80:	14400044 	addi	r17,r2,1
 c001c84:	040300b4 	movhi	r16,3074
 c001c88:	8404a404 	addi	r16,r16,4752
 c001c8c:	01401404 	movi	r5,80
 c001c90:	1809883a 	mov	r4,r3
 c001c94:	c004de00 	call	c004de0 <__mulsi3>
 c001c98:	1445883a 	add	r2,r2,r17
 c001c9c:	1085883a 	add	r2,r2,r2
 c001ca0:	1085883a 	add	r2,r2,r2
 c001ca4:	8085883a 	add	r2,r16,r2
 c001ca8:	e0fffd17 	ldw	r3,-12(fp)
 c001cac:	10c00015 	stw	r3,0(r2)
			   colorValue[y][x+1] = color;//VGADrawColorBox(x+1,y,color);
 c001cb0:	e0bffa17 	ldw	r2,-24(fp)
 c001cb4:	14400044 	addi	r17,r2,1
 c001cb8:	040300b4 	movhi	r16,3074
 c001cbc:	8404a404 	addi	r16,r16,4752
 c001cc0:	e0bffb17 	ldw	r2,-20(fp)
 c001cc4:	01401404 	movi	r5,80
 c001cc8:	1009883a 	mov	r4,r2
 c001ccc:	c004de00 	call	c004de0 <__mulsi3>
 c001cd0:	1445883a 	add	r2,r2,r17
 c001cd4:	1085883a 	add	r2,r2,r2
 c001cd8:	1085883a 	add	r2,r2,r2
 c001cdc:	8085883a 	add	r2,r16,r2
 c001ce0:	e0fffd17 	ldw	r3,-12(fp)
 c001ce4:	10c00015 	stw	r3,0(r2)
			   colorValue[y][x] = color;//VGADrawColorBox(x,y,color);
 c001ce8:	040300b4 	movhi	r16,3074
 c001cec:	8404a404 	addi	r16,r16,4752
 c001cf0:	e0bffb17 	ldw	r2,-20(fp)
 c001cf4:	01401404 	movi	r5,80
 c001cf8:	1009883a 	mov	r4,r2
 c001cfc:	c004de00 	call	c004de0 <__mulsi3>
 c001d00:	1007883a 	mov	r3,r2
 c001d04:	e0bffa17 	ldw	r2,-24(fp)
 c001d08:	1885883a 	add	r2,r3,r2
 c001d0c:	1085883a 	add	r2,r2,r2
 c001d10:	1085883a 	add	r2,r2,r2
 c001d14:	8085883a 	add	r2,r16,r2
 c001d18:	e0fffd17 	ldw	r3,-12(fp)
 c001d1c:	10c00015 	stw	r3,0(r2)
		}
}
 c001d20:	0001883a 	nop
 c001d24:	e6fffe04 	addi	sp,fp,-8
 c001d28:	dfc00317 	ldw	ra,12(sp)
 c001d2c:	df000217 	ldw	fp,8(sp)
 c001d30:	dc400117 	ldw	r17,4(sp)
 c001d34:	dc000017 	ldw	r16,0(sp)
 c001d38:	dec00404 	addi	sp,sp,16
 c001d3c:	f800283a 	ret

0c001d40 <checkRow>:

int checkRow(int y) {
 c001d40:	defffb04 	addi	sp,sp,-20
 c001d44:	dfc00415 	stw	ra,16(sp)
 c001d48:	df000315 	stw	fp,12(sp)
 c001d4c:	dc000215 	stw	r16,8(sp)
 c001d50:	df000304 	addi	fp,sp,12
 c001d54:	e13ffe15 	stw	r4,-8(fp)
	for (int x = 0; x < 10; x++) {
 c001d58:	e03ffd15 	stw	zero,-12(fp)
 c001d5c:	00001306 	br	c001dac <checkRow+0x6c>
		if (grid[y][x] == 0) {
 c001d60:	040300b4 	movhi	r16,3074
 c001d64:	8431e404 	addi	r16,r16,-14448
 c001d68:	e0bffe17 	ldw	r2,-8(fp)
 c001d6c:	01401404 	movi	r5,80
 c001d70:	1009883a 	mov	r4,r2
 c001d74:	c004de00 	call	c004de0 <__mulsi3>
 c001d78:	1007883a 	mov	r3,r2
 c001d7c:	e0bffd17 	ldw	r2,-12(fp)
 c001d80:	1885883a 	add	r2,r3,r2
 c001d84:	1085883a 	add	r2,r2,r2
 c001d88:	1085883a 	add	r2,r2,r2
 c001d8c:	8085883a 	add	r2,r16,r2
 c001d90:	10800017 	ldw	r2,0(r2)
 c001d94:	1000021e 	bne	r2,zero,c001da0 <checkRow+0x60>
			return 0;
 c001d98:	0005883a 	mov	r2,zero
 c001d9c:	00000706 	br	c001dbc <checkRow+0x7c>
			   colorValue[y][x] = color;//VGADrawColorBox(x,y,color);
		}
}

int checkRow(int y) {
	for (int x = 0; x < 10; x++) {
 c001da0:	e0bffd17 	ldw	r2,-12(fp)
 c001da4:	10800044 	addi	r2,r2,1
 c001da8:	e0bffd15 	stw	r2,-12(fp)
 c001dac:	e0bffd17 	ldw	r2,-12(fp)
 c001db0:	10800290 	cmplti	r2,r2,10
 c001db4:	103fea1e 	bne	r2,zero,c001d60 <__alt_data_end+0xfc001d60>
		if (grid[y][x] == 0) {
			return 0;
		}
	}
	return 1;
 c001db8:	00800044 	movi	r2,1
}
 c001dbc:	e6ffff04 	addi	sp,fp,-4
 c001dc0:	dfc00217 	ldw	ra,8(sp)
 c001dc4:	df000117 	ldw	fp,4(sp)
 c001dc8:	dc000017 	ldw	r16,0(sp)
 c001dcc:	dec00304 	addi	sp,sp,12
 c001dd0:	f800283a 	ret

0c001dd4 <readjustScreen>:

void readjustScreen(int startY, int endY) {
 c001dd4:	defff804 	addi	sp,sp,-32
 c001dd8:	dfc00715 	stw	ra,28(sp)
 c001ddc:	df000615 	stw	fp,24(sp)
 c001de0:	dc400515 	stw	r17,20(sp)
 c001de4:	dc000415 	stw	r16,16(sp)
 c001de8:	df000604 	addi	fp,sp,24
 c001dec:	e13ffc15 	stw	r4,-16(fp)
 c001df0:	e17ffd15 	stw	r5,-12(fp)
	for (int y = startY; y >= endY; y--) {
 c001df4:	e0bffc17 	ldw	r2,-16(fp)
 c001df8:	e0bffa15 	stw	r2,-24(fp)
 c001dfc:	00003c06 	br	c001ef0 <readjustScreen+0x11c>
		for (int x = 10; x < 10; x++) {
 c001e00:	00800284 	movi	r2,10
 c001e04:	e0bffb15 	stw	r2,-20(fp)
 c001e08:	00003306 	br	c001ed8 <readjustScreen+0x104>
			if (y != endY) {
 c001e0c:	e0fffa17 	ldw	r3,-24(fp)
 c001e10:	e0bffd17 	ldw	r2,-12(fp)
 c001e14:	18801c26 	beq	r3,r2,c001e88 <readjustScreen+0xb4>
				colorValue[y][x] = colorValue[y-1][x];
 c001e18:	e0bffa17 	ldw	r2,-24(fp)
 c001e1c:	10bfffc4 	addi	r2,r2,-1
 c001e20:	040300b4 	movhi	r16,3074
 c001e24:	8404a404 	addi	r16,r16,4752
 c001e28:	01401404 	movi	r5,80
 c001e2c:	1009883a 	mov	r4,r2
 c001e30:	c004de00 	call	c004de0 <__mulsi3>
 c001e34:	1007883a 	mov	r3,r2
 c001e38:	e0bffb17 	ldw	r2,-20(fp)
 c001e3c:	1885883a 	add	r2,r3,r2
 c001e40:	1085883a 	add	r2,r2,r2
 c001e44:	1085883a 	add	r2,r2,r2
 c001e48:	8085883a 	add	r2,r16,r2
 c001e4c:	14400017 	ldw	r17,0(r2)
 c001e50:	040300b4 	movhi	r16,3074
 c001e54:	8404a404 	addi	r16,r16,4752
 c001e58:	e0bffa17 	ldw	r2,-24(fp)
 c001e5c:	01401404 	movi	r5,80
 c001e60:	1009883a 	mov	r4,r2
 c001e64:	c004de00 	call	c004de0 <__mulsi3>
 c001e68:	1007883a 	mov	r3,r2
 c001e6c:	e0bffb17 	ldw	r2,-20(fp)
 c001e70:	1885883a 	add	r2,r3,r2
 c001e74:	1085883a 	add	r2,r2,r2
 c001e78:	1085883a 	add	r2,r2,r2
 c001e7c:	8085883a 	add	r2,r16,r2
 c001e80:	14400015 	stw	r17,0(r2)
 c001e84:	00000d06 	br	c001ebc <readjustScreen+0xe8>
			} else {
				colorValue[y][x] = 0;
 c001e88:	040300b4 	movhi	r16,3074
 c001e8c:	8404a404 	addi	r16,r16,4752
 c001e90:	e0bffa17 	ldw	r2,-24(fp)
 c001e94:	01401404 	movi	r5,80
 c001e98:	1009883a 	mov	r4,r2
 c001e9c:	c004de00 	call	c004de0 <__mulsi3>
 c001ea0:	1007883a 	mov	r3,r2
 c001ea4:	e0bffb17 	ldw	r2,-20(fp)
 c001ea8:	1885883a 	add	r2,r3,r2
 c001eac:	1085883a 	add	r2,r2,r2
 c001eb0:	1085883a 	add	r2,r2,r2
 c001eb4:	8085883a 	add	r2,r16,r2
 c001eb8:	10000015 	stw	zero,0(r2)
			}
			printf("/n reset row: %u",y);
 c001ebc:	e17ffa17 	ldw	r5,-24(fp)
 c001ec0:	010300b4 	movhi	r4,3074
 c001ec4:	21219c04 	addi	r4,r4,-31120
 c001ec8:	c004e380 	call	c004e38 <printf>
	return 1;
}

void readjustScreen(int startY, int endY) {
	for (int y = startY; y >= endY; y--) {
		for (int x = 10; x < 10; x++) {
 c001ecc:	e0bffb17 	ldw	r2,-20(fp)
 c001ed0:	10800044 	addi	r2,r2,1
 c001ed4:	e0bffb15 	stw	r2,-20(fp)
 c001ed8:	e0bffb17 	ldw	r2,-20(fp)
 c001edc:	10800290 	cmplti	r2,r2,10
 c001ee0:	103fca1e 	bne	r2,zero,c001e0c <__alt_data_end+0xfc001e0c>
	}
	return 1;
}

void readjustScreen(int startY, int endY) {
	for (int y = startY; y >= endY; y--) {
 c001ee4:	e0bffa17 	ldw	r2,-24(fp)
 c001ee8:	10bfffc4 	addi	r2,r2,-1
 c001eec:	e0bffa15 	stw	r2,-24(fp)
 c001ef0:	e0fffa17 	ldw	r3,-24(fp)
 c001ef4:	e0bffd17 	ldw	r2,-12(fp)
 c001ef8:	18bfc10e 	bge	r3,r2,c001e00 <__alt_data_end+0xfc001e00>
				colorValue[y][x] = 0;
			}
			printf("/n reset row: %u",y);
		}
	}
}
 c001efc:	0001883a 	nop
 c001f00:	e6fffe04 	addi	sp,fp,-8
 c001f04:	dfc00317 	ldw	ra,12(sp)
 c001f08:	df000217 	ldw	fp,8(sp)
 c001f0c:	dc400117 	ldw	r17,4(sp)
 c001f10:	dc000017 	ldw	r16,0(sp)
 c001f14:	dec00404 	addi	sp,sp,16
 c001f18:	f800283a 	ret

0c001f1c <paintScreen>:

void paintScreen() {
 c001f1c:	defffb04 	addi	sp,sp,-20
 c001f20:	dfc00415 	stw	ra,16(sp)
 c001f24:	df000315 	stw	fp,12(sp)
 c001f28:	dc000215 	stw	r16,8(sp)
 c001f2c:	df000304 	addi	fp,sp,12
	for (int x = 0; x < 80; x++) {
 c001f30:	e03ffd15 	stw	zero,-12(fp)
 c001f34:	00001c06 	br	c001fa8 <paintScreen+0x8c>
		for (int y = 0; y < 60; y++) {
 c001f38:	e03ffe15 	stw	zero,-8(fp)
 c001f3c:	00001406 	br	c001f90 <paintScreen+0x74>
			VGADrawColorBox(x,y,colorValue[y][x]);
 c001f40:	040300b4 	movhi	r16,3074
 c001f44:	8404a404 	addi	r16,r16,4752
 c001f48:	e0bffe17 	ldw	r2,-8(fp)
 c001f4c:	01401404 	movi	r5,80
 c001f50:	1009883a 	mov	r4,r2
 c001f54:	c004de00 	call	c004de0 <__mulsi3>
 c001f58:	1007883a 	mov	r3,r2
 c001f5c:	e0bffd17 	ldw	r2,-12(fp)
 c001f60:	1885883a 	add	r2,r3,r2
 c001f64:	1085883a 	add	r2,r2,r2
 c001f68:	1085883a 	add	r2,r2,r2
 c001f6c:	8085883a 	add	r2,r16,r2
 c001f70:	10800017 	ldw	r2,0(r2)
 c001f74:	100d883a 	mov	r6,r2
 c001f78:	e17ffe17 	ldw	r5,-8(fp)
 c001f7c:	e13ffd17 	ldw	r4,-12(fp)
 c001f80:	c0027140 	call	c002714 <VGADrawColorBox>
	}
}

void paintScreen() {
	for (int x = 0; x < 80; x++) {
		for (int y = 0; y < 60; y++) {
 c001f84:	e0bffe17 	ldw	r2,-8(fp)
 c001f88:	10800044 	addi	r2,r2,1
 c001f8c:	e0bffe15 	stw	r2,-8(fp)
 c001f90:	e0bffe17 	ldw	r2,-8(fp)
 c001f94:	10800f10 	cmplti	r2,r2,60
 c001f98:	103fe91e 	bne	r2,zero,c001f40 <__alt_data_end+0xfc001f40>
		}
	}
}

void paintScreen() {
	for (int x = 0; x < 80; x++) {
 c001f9c:	e0bffd17 	ldw	r2,-12(fp)
 c001fa0:	10800044 	addi	r2,r2,1
 c001fa4:	e0bffd15 	stw	r2,-12(fp)
 c001fa8:	e0bffd17 	ldw	r2,-12(fp)
 c001fac:	10801410 	cmplti	r2,r2,80
 c001fb0:	103fe11e 	bne	r2,zero,c001f38 <__alt_data_end+0xfc001f38>
		for (int y = 0; y < 60; y++) {
			VGADrawColorBox(x,y,colorValue[y][x]);
		}
	}
}
 c001fb4:	0001883a 	nop
 c001fb8:	e6ffff04 	addi	sp,fp,-4
 c001fbc:	dfc00217 	ldw	ra,8(sp)
 c001fc0:	df000117 	ldw	fp,4(sp)
 c001fc4:	dc000017 	ldw	r16,0(sp)
 c001fc8:	dec00304 	addi	sp,sp,12
 c001fcc:	f800283a 	ret

0c001fd0 <main>:

#define COLUMNS 80
#define ROWS 60
#include "text_mode_vga_color.h"

int main() {
 c001fd0:	defff904 	addi	sp,sp,-28
 c001fd4:	dfc00615 	stw	ra,24(sp)
 c001fd8:	df000515 	stw	fp,20(sp)
 c001fdc:	df000504 	addi	fp,sp,20
	int x = 40;
 c001fe0:	00800a04 	movi	r2,40
 c001fe4:	e0bffe15 	stw	r2,-8(fp)
	int y = 30;
 c001fe8:	00800784 	movi	r2,30
 c001fec:	e0bfff15 	stw	r2,-4(fp)
	screenVGAinitializer();
 c001ff0:	c0023600 	call	c002360 <screenVGAinitializer>
	for (int i = 0; i < 80; i++) {
 c001ff4:	e03ffc15 	stw	zero,-16(fp)
 c001ff8:	00000b06 	br	c002028 <main+0x58>
		setColor(i,0,15);
 c001ffc:	018003c4 	movi	r6,15
 c002000:	000b883a 	mov	r5,zero
 c002004:	e13ffc17 	ldw	r4,-16(fp)
 c002008:	c0015580 	call	c001558 <setColor>
		setColor(i,59,15);
 c00200c:	018003c4 	movi	r6,15
 c002010:	01400ec4 	movi	r5,59
 c002014:	e13ffc17 	ldw	r4,-16(fp)
 c002018:	c0015580 	call	c001558 <setColor>

int main() {
	int x = 40;
	int y = 30;
	screenVGAinitializer();
	for (int i = 0; i < 80; i++) {
 c00201c:	e0bffc17 	ldw	r2,-16(fp)
 c002020:	10800044 	addi	r2,r2,1
 c002024:	e0bffc15 	stw	r2,-16(fp)
 c002028:	e0bffc17 	ldw	r2,-16(fp)
 c00202c:	10801410 	cmplti	r2,r2,80
 c002030:	103ff21e 	bne	r2,zero,c001ffc <__alt_data_end+0xfc001ffc>
		setColor(i,0,15);
		setColor(i,59,15);
	}
	for (int i = 0; i < 60; i++) {
 c002034:	e03ffd15 	stw	zero,-12(fp)
 c002038:	00000b06 	br	c002068 <main+0x98>
		setColor(0,i,15);
 c00203c:	018003c4 	movi	r6,15
 c002040:	e17ffd17 	ldw	r5,-12(fp)
 c002044:	0009883a 	mov	r4,zero
 c002048:	c0015580 	call	c001558 <setColor>
		setColor(79,i,15);
 c00204c:	018003c4 	movi	r6,15
 c002050:	e17ffd17 	ldw	r5,-12(fp)
 c002054:	010013c4 	movi	r4,79
 c002058:	c0015580 	call	c001558 <setColor>
	screenVGAinitializer();
	for (int i = 0; i < 80; i++) {
		setColor(i,0,15);
		setColor(i,59,15);
	}
	for (int i = 0; i < 60; i++) {
 c00205c:	e0bffd17 	ldw	r2,-12(fp)
 c002060:	10800044 	addi	r2,r2,1
 c002064:	e0bffd15 	stw	r2,-12(fp)
 c002068:	e0bffd17 	ldw	r2,-12(fp)
 c00206c:	10800f10 	cmplti	r2,r2,60
 c002070:	103ff21e 	bne	r2,zero,c00203c <__alt_data_end+0xfc00203c>
		setEdge(35,9+i);
		setEdge(47,9+i);
	}
	userControlledBlockGrid(x, y, 4, 3);
	keyInput(x, y, 1,3);*/
	textVGADrawColorText ("Drawing black text with white background", 20, 20, 15, 0);
 c002074:	d8000015 	stw	zero,0(sp)
 c002078:	01c003c4 	movi	r7,15
 c00207c:	01800504 	movi	r6,20
 c002080:	01400504 	movi	r5,20
 c002084:	010300b4 	movhi	r4,3074
 c002088:	2121a104 	addi	r4,r4,-31100
 c00208c:	c0021280 	call	c002128 <textVGADrawColorText>
	textVGADrawColorText ("Drawing black text with white background", 20, 21, 15, 0);
 c002090:	d8000015 	stw	zero,0(sp)
 c002094:	01c003c4 	movi	r7,15
 c002098:	01800544 	movi	r6,21
 c00209c:	01400504 	movi	r5,20
 c0020a0:	010300b4 	movhi	r4,3074
 c0020a4:	2121a104 	addi	r4,r4,-31100
 c0020a8:	c0021280 	call	c002128 <textVGADrawColorText>
	VGADrawColorBox(3,5,2);
 c0020ac:	01800084 	movi	r6,2
 c0020b0:	01400144 	movi	r5,5
 c0020b4:	010000c4 	movi	r4,3
 c0020b8:	c0027140 	call	c002714 <VGADrawColorBox>
	textVGAColorScreenSaver();
 c0020bc:	c0024600 	call	c002460 <textVGAColorScreenSaver>
	return 1;
 c0020c0:	00800044 	movi	r2,1
}
 c0020c4:	e037883a 	mov	sp,fp
 c0020c8:	dfc00117 	ldw	ra,4(sp)
 c0020cc:	df000017 	ldw	fp,0(sp)
 c0020d0:	dec00204 	addi	sp,sp,8
 c0020d4:	f800283a 	ret

0c0020d8 <textVGAColorClr>:
#include <string.h>
#include <alt_types.h>
#include "text_mode_vga_color.h"

void textVGAColorClr()
{
 c0020d8:	defffe04 	addi	sp,sp,-8
 c0020dc:	df000115 	stw	fp,4(sp)
 c0020e0:	df000104 	addi	fp,sp,4
	for (int i = 0; i<(ROWS*COLUMNS) * 2; i++)
 c0020e4:	e03fff15 	stw	zero,-4(fp)
 c0020e8:	00000706 	br	c002108 <textVGAColorClr+0x30>
	{
		vga_ctrl->VRAM[i] = 0x00;
 c0020ec:	d0e00417 	ldw	r3,-32752(gp)
 c0020f0:	e0bfff17 	ldw	r2,-4(fp)
 c0020f4:	1885883a 	add	r2,r3,r2
 c0020f8:	10000005 	stb	zero,0(r2)
#include <alt_types.h>
#include "text_mode_vga_color.h"

void textVGAColorClr()
{
	for (int i = 0; i<(ROWS*COLUMNS) * 2; i++)
 c0020fc:	e0bfff17 	ldw	r2,-4(fp)
 c002100:	10800044 	addi	r2,r2,1
 c002104:	e0bfff15 	stw	r2,-4(fp)
 c002108:	e0bfff17 	ldw	r2,-4(fp)
 c00210c:	10896010 	cmplti	r2,r2,9600
 c002110:	103ff61e 	bne	r2,zero,c0020ec <__alt_data_end+0xfc0020ec>
	{
		vga_ctrl->VRAM[i] = 0x00;
	}
}
 c002114:	0001883a 	nop
 c002118:	e037883a 	mov	sp,fp
 c00211c:	df000017 	ldw	fp,0(sp)
 c002120:	dec00104 	addi	sp,sp,4
 c002124:	f800283a 	ret

0c002128 <textVGADrawColorText>:

void textVGADrawColorText(char* str, int x, int y, alt_u8 background, alt_u8 foreground)
{
 c002128:	defff704 	addi	sp,sp,-36
 c00212c:	dfc00815 	stw	ra,32(sp)
 c002130:	df000715 	stw	fp,28(sp)
 c002134:	dc000615 	stw	r16,24(sp)
 c002138:	df000704 	addi	fp,sp,28
 c00213c:	e13ffa15 	stw	r4,-24(fp)
 c002140:	e17ffb15 	stw	r5,-20(fp)
 c002144:	e1bffc15 	stw	r6,-16(fp)
 c002148:	3807883a 	mov	r3,r7
 c00214c:	e0800217 	ldw	r2,8(fp)
 c002150:	e0fffd05 	stb	r3,-12(fp)
 c002154:	e0bffe05 	stb	r2,-8(fp)
	int i = 0;
 c002158:	e03ff915 	stw	zero,-28(fp)
	while (str[i]!=0)
 c00215c:	00002706 	br	c0021fc <textVGADrawColorText+0xd4>
	{
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2] = foreground << 4 | background;
 c002160:	d4200417 	ldw	r16,-32752(gp)
 c002164:	01401404 	movi	r5,80
 c002168:	e13ffc17 	ldw	r4,-16(fp)
 c00216c:	c004de00 	call	c004de0 <__mulsi3>
 c002170:	1007883a 	mov	r3,r2
 c002174:	e0bffb17 	ldw	r2,-20(fp)
 c002178:	1887883a 	add	r3,r3,r2
 c00217c:	e0bff917 	ldw	r2,-28(fp)
 c002180:	1885883a 	add	r2,r3,r2
 c002184:	1085883a 	add	r2,r2,r2
 c002188:	1009883a 	mov	r4,r2
 c00218c:	e0bffe03 	ldbu	r2,-8(fp)
 c002190:	1004913a 	slli	r2,r2,4
 c002194:	1007883a 	mov	r3,r2
 c002198:	e0bffd03 	ldbu	r2,-12(fp)
 c00219c:	1884b03a 	or	r2,r3,r2
 c0021a0:	1007883a 	mov	r3,r2
 c0021a4:	8105883a 	add	r2,r16,r4
 c0021a8:	10c00005 	stb	r3,0(r2)
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2 + 1] = str[i];
 c0021ac:	d4200417 	ldw	r16,-32752(gp)
 c0021b0:	01401404 	movi	r5,80
 c0021b4:	e13ffc17 	ldw	r4,-16(fp)
 c0021b8:	c004de00 	call	c004de0 <__mulsi3>
 c0021bc:	1007883a 	mov	r3,r2
 c0021c0:	e0bffb17 	ldw	r2,-20(fp)
 c0021c4:	1887883a 	add	r3,r3,r2
 c0021c8:	e0bff917 	ldw	r2,-28(fp)
 c0021cc:	1885883a 	add	r2,r3,r2
 c0021d0:	1085883a 	add	r2,r2,r2
 c0021d4:	10800044 	addi	r2,r2,1
 c0021d8:	e0fff917 	ldw	r3,-28(fp)
 c0021dc:	e13ffa17 	ldw	r4,-24(fp)
 c0021e0:	20c7883a 	add	r3,r4,r3
 c0021e4:	18c00003 	ldbu	r3,0(r3)
 c0021e8:	8085883a 	add	r2,r16,r2
 c0021ec:	10c00005 	stb	r3,0(r2)
		i++;
 c0021f0:	e0bff917 	ldw	r2,-28(fp)
 c0021f4:	10800044 	addi	r2,r2,1
 c0021f8:	e0bff915 	stw	r2,-28(fp)
}

void textVGADrawColorText(char* str, int x, int y, alt_u8 background, alt_u8 foreground)
{
	int i = 0;
	while (str[i]!=0)
 c0021fc:	e0bff917 	ldw	r2,-28(fp)
 c002200:	e0fffa17 	ldw	r3,-24(fp)
 c002204:	1885883a 	add	r2,r3,r2
 c002208:	10800003 	ldbu	r2,0(r2)
 c00220c:	10803fcc 	andi	r2,r2,255
 c002210:	1080201c 	xori	r2,r2,128
 c002214:	10bfe004 	addi	r2,r2,-128
 c002218:	103fd11e 	bne	r2,zero,c002160 <__alt_data_end+0xfc002160>
	{
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2 + 1] = str[i];
		i++;
	}
}
 c00221c:	0001883a 	nop
 c002220:	e6ffff04 	addi	sp,fp,-4
 c002224:	dfc00217 	ldw	ra,8(sp)
 c002228:	df000117 	ldw	fp,4(sp)
 c00222c:	dc000017 	ldw	r16,0(sp)
 c002230:	dec00304 	addi	sp,sp,12
 c002234:	f800283a 	ret

0c002238 <setColorPalette>:

void setColorPalette (alt_u8 color, alt_u8 red, alt_u8 green, alt_u8 blue)
{
 c002238:	defff904 	addi	sp,sp,-28
 c00223c:	df000615 	stw	fp,24(sp)
 c002240:	df000604 	addi	fp,sp,24
 c002244:	2011883a 	mov	r8,r4
 c002248:	2809883a 	mov	r4,r5
 c00224c:	3007883a 	mov	r3,r6
 c002250:	3805883a 	mov	r2,r7
 c002254:	e23ffc05 	stb	r8,-16(fp)
 c002258:	e13ffd05 	stb	r4,-12(fp)
 c00225c:	e0fffe05 	stb	r3,-8(fp)
 c002260:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 shifts;
	alt_u32 original;
	original = vga_ctrl->palette[color/2];
 c002264:	d0e00417 	ldw	r3,-32752(gp)
 c002268:	e0bffc03 	ldbu	r2,-16(fp)
 c00226c:	1004d07a 	srli	r2,r2,1
 c002270:	10803fcc 	andi	r2,r2,255
 c002274:	10830004 	addi	r2,r2,3072
 c002278:	1085883a 	add	r2,r2,r2
 c00227c:	1085883a 	add	r2,r2,r2
 c002280:	1885883a 	add	r2,r3,r2
 c002284:	10800017 	ldw	r2,0(r2)
 c002288:	e0bffb15 	stw	r2,-20(fp)
	shifts = red;
 c00228c:	e0bffd03 	ldbu	r2,-12(fp)
 c002290:	e0bffa15 	stw	r2,-24(fp)
	shifts = shifts << 4;
 c002294:	e0bffa17 	ldw	r2,-24(fp)
 c002298:	1004913a 	slli	r2,r2,4
 c00229c:	e0bffa15 	stw	r2,-24(fp)
	shifts = shifts | green;
 c0022a0:	e0bffe03 	ldbu	r2,-8(fp)
 c0022a4:	e0fffa17 	ldw	r3,-24(fp)
 c0022a8:	1884b03a 	or	r2,r3,r2
 c0022ac:	e0bffa15 	stw	r2,-24(fp)
	shifts = shifts << 4;
 c0022b0:	e0bffa17 	ldw	r2,-24(fp)
 c0022b4:	1004913a 	slli	r2,r2,4
 c0022b8:	e0bffa15 	stw	r2,-24(fp)
	shifts = shifts | blue;
 c0022bc:	e0bfff03 	ldbu	r2,-4(fp)
 c0022c0:	e0fffa17 	ldw	r3,-24(fp)
 c0022c4:	1884b03a 	or	r2,r3,r2
 c0022c8:	e0bffa15 	stw	r2,-24(fp)
	if (color %2 ==0){
 c0022cc:	e0bffc03 	ldbu	r2,-16(fp)
 c0022d0:	1080004c 	andi	r2,r2,1
 c0022d4:	10803fcc 	andi	r2,r2,255
 c0022d8:	1000081e 	bne	r2,zero,c0022fc <setColorPalette+0xc4>
		original = original & 0xFFFFE000;
 c0022dc:	e0fffb17 	ldw	r3,-20(fp)
 c0022e0:	00b80004 	movi	r2,-8192
 c0022e4:	1884703a 	and	r2,r3,r2
 c0022e8:	e0bffb15 	stw	r2,-20(fp)
		shifts = shifts << 1;
 c0022ec:	e0bffa17 	ldw	r2,-24(fp)
 c0022f0:	1085883a 	add	r2,r2,r2
 c0022f4:	e0bffa15 	stw	r2,-24(fp)
 c0022f8:	00000606 	br	c002314 <setColorPalette+0xdc>
	} else {
		original = original & 0x00001FFF;
 c0022fc:	e0bffb17 	ldw	r2,-20(fp)
 c002300:	1087ffcc 	andi	r2,r2,8191
 c002304:	e0bffb15 	stw	r2,-20(fp)
		shifts = shifts << 13;
 c002308:	e0bffa17 	ldw	r2,-24(fp)
 c00230c:	1004937a 	slli	r2,r2,13
 c002310:	e0bffa15 	stw	r2,-24(fp)
	}
	original = original | shifts;
 c002314:	e0fffb17 	ldw	r3,-20(fp)
 c002318:	e0bffa17 	ldw	r2,-24(fp)
 c00231c:	1884b03a 	or	r2,r3,r2
 c002320:	e0bffb15 	stw	r2,-20(fp)
	vga_ctrl->palette[color/2] = original;
 c002324:	d0e00417 	ldw	r3,-32752(gp)
 c002328:	e0bffc03 	ldbu	r2,-16(fp)
 c00232c:	1004d07a 	srli	r2,r2,1
 c002330:	10803fcc 	andi	r2,r2,255
 c002334:	10830004 	addi	r2,r2,3072
 c002338:	1085883a 	add	r2,r2,r2
 c00233c:	1085883a 	add	r2,r2,r2
 c002340:	1885883a 	add	r2,r3,r2
 c002344:	e0fffb17 	ldw	r3,-20(fp)
 c002348:	10c00015 	stw	r3,0(r2)
}
 c00234c:	0001883a 	nop
 c002350:	e037883a 	mov	sp,fp
 c002354:	df000017 	ldw	fp,0(sp)
 c002358:	dec00104 	addi	sp,sp,4
 c00235c:	f800283a 	ret

0c002360 <screenVGAinitializer>:

void screenVGAinitializer() {
 c002360:	defff904 	addi	sp,sp,-28
 c002364:	dfc00615 	stw	ra,24(sp)
 c002368:	df000515 	stw	fp,20(sp)
 c00236c:	dcc00415 	stw	r19,16(sp)
 c002370:	dc800315 	stw	r18,12(sp)
 c002374:	dc400215 	stw	r17,8(sp)
 c002378:	dc000115 	stw	r16,4(sp)
 c00237c:	df000504 	addi	fp,sp,20
	textVGAColorClr();
 c002380:	c0020d80 	call	c0020d8 <textVGAColorClr>
	//initialize palette
	for (int i = 0; i < 16; i++)
 c002384:	e03ffb15 	stw	zero,-20(fp)
 c002388:	00002806 	br	c00242c <screenVGAinitializer+0xcc>
	{
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
 c00238c:	e0bffb17 	ldw	r2,-20(fp)
 c002390:	14403fcc 	andi	r17,r2,255
 c002394:	040300b4 	movhi	r16,3074
 c002398:	84230a04 	addi	r16,r16,-29656
 c00239c:	e0bffb17 	ldw	r2,-20(fp)
 c0023a0:	014005c4 	movi	r5,23
 c0023a4:	1009883a 	mov	r4,r2
 c0023a8:	c004de00 	call	c004de0 <__mulsi3>
 c0023ac:	8085883a 	add	r2,r16,r2
 c0023b0:	10800504 	addi	r2,r2,20
 c0023b4:	10800003 	ldbu	r2,0(r2)
 c0023b8:	14803fcc 	andi	r18,r2,255
 c0023bc:	040300b4 	movhi	r16,3074
 c0023c0:	84230a04 	addi	r16,r16,-29656
 c0023c4:	e0bffb17 	ldw	r2,-20(fp)
 c0023c8:	014005c4 	movi	r5,23
 c0023cc:	1009883a 	mov	r4,r2
 c0023d0:	c004de00 	call	c004de0 <__mulsi3>
 c0023d4:	8085883a 	add	r2,r16,r2
 c0023d8:	10800544 	addi	r2,r2,21
 c0023dc:	10800003 	ldbu	r2,0(r2)
 c0023e0:	14c03fcc 	andi	r19,r2,255
 c0023e4:	040300b4 	movhi	r16,3074
 c0023e8:	84230a04 	addi	r16,r16,-29656
 c0023ec:	e0bffb17 	ldw	r2,-20(fp)
 c0023f0:	014005c4 	movi	r5,23
 c0023f4:	1009883a 	mov	r4,r2
 c0023f8:	c004de00 	call	c004de0 <__mulsi3>
 c0023fc:	8085883a 	add	r2,r16,r2
 c002400:	10800584 	addi	r2,r2,22
 c002404:	10800003 	ldbu	r2,0(r2)
 c002408:	10803fcc 	andi	r2,r2,255
 c00240c:	100f883a 	mov	r7,r2
 c002410:	980d883a 	mov	r6,r19
 c002414:	900b883a 	mov	r5,r18
 c002418:	8809883a 	mov	r4,r17
 c00241c:	c0022380 	call	c002238 <setColorPalette>
}

void screenVGAinitializer() {
	textVGAColorClr();
	//initialize palette
	for (int i = 0; i < 16; i++)
 c002420:	e0bffb17 	ldw	r2,-20(fp)
 c002424:	10800044 	addi	r2,r2,1
 c002428:	e0bffb15 	stw	r2,-20(fp)
 c00242c:	e0bffb17 	ldw	r2,-20(fp)
 c002430:	10800410 	cmplti	r2,r2,16
 c002434:	103fd51e 	bne	r2,zero,c00238c <__alt_data_end+0xfc00238c>
	{
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
	}

}
 c002438:	0001883a 	nop
 c00243c:	e6fffc04 	addi	sp,fp,-16
 c002440:	dfc00517 	ldw	ra,20(sp)
 c002444:	df000417 	ldw	fp,16(sp)
 c002448:	dcc00317 	ldw	r19,12(sp)
 c00244c:	dc800217 	ldw	r18,8(sp)
 c002450:	dc400117 	ldw	r17,4(sp)
 c002454:	dc000017 	ldw	r16,0(sp)
 c002458:	dec00604 	addi	sp,sp,24
 c00245c:	f800283a 	ret

0c002460 <textVGAColorScreenSaver>:

void textVGAColorScreenSaver()
{
 c002460:	deffde04 	addi	sp,sp,-136
 c002464:	dfc02115 	stw	ra,132(sp)
 c002468:	df002015 	stw	fp,128(sp)
 c00246c:	dcc01f15 	stw	r19,124(sp)
 c002470:	dc801e15 	stw	r18,120(sp)
 c002474:	dc401d15 	stw	r17,116(sp)
 c002478:	dc001c15 	stw	r16,112(sp)
 c00247c:	df002004 	addi	fp,sp,128
	//This is the function you call for your week 2 demo
	int flag = 0;
 c002480:	e03fe415 	stw	zero,-112(fp)
	char color_string[80];
    int fg, bg, x, y;
	textVGAColorClr();
 c002484:	c0020d80 	call	c0020d8 <textVGAColorClr>
	//initialize palette
	for (int i = 0; i < 16; i++)
 c002488:	e03fe315 	stw	zero,-116(fp)
 c00248c:	00002806 	br	c002530 <textVGAColorScreenSaver+0xd0>
	{
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
 c002490:	e0bfe317 	ldw	r2,-116(fp)
 c002494:	14403fcc 	andi	r17,r2,255
 c002498:	040300b4 	movhi	r16,3074
 c00249c:	84230a04 	addi	r16,r16,-29656
 c0024a0:	e0bfe317 	ldw	r2,-116(fp)
 c0024a4:	014005c4 	movi	r5,23
 c0024a8:	1009883a 	mov	r4,r2
 c0024ac:	c004de00 	call	c004de0 <__mulsi3>
 c0024b0:	8085883a 	add	r2,r16,r2
 c0024b4:	10800504 	addi	r2,r2,20
 c0024b8:	10800003 	ldbu	r2,0(r2)
 c0024bc:	14803fcc 	andi	r18,r2,255
 c0024c0:	040300b4 	movhi	r16,3074
 c0024c4:	84230a04 	addi	r16,r16,-29656
 c0024c8:	e0bfe317 	ldw	r2,-116(fp)
 c0024cc:	014005c4 	movi	r5,23
 c0024d0:	1009883a 	mov	r4,r2
 c0024d4:	c004de00 	call	c004de0 <__mulsi3>
 c0024d8:	8085883a 	add	r2,r16,r2
 c0024dc:	10800544 	addi	r2,r2,21
 c0024e0:	10800003 	ldbu	r2,0(r2)
 c0024e4:	14c03fcc 	andi	r19,r2,255
 c0024e8:	040300b4 	movhi	r16,3074
 c0024ec:	84230a04 	addi	r16,r16,-29656
 c0024f0:	e0bfe317 	ldw	r2,-116(fp)
 c0024f4:	014005c4 	movi	r5,23
 c0024f8:	1009883a 	mov	r4,r2
 c0024fc:	c004de00 	call	c004de0 <__mulsi3>
 c002500:	8085883a 	add	r2,r16,r2
 c002504:	10800584 	addi	r2,r2,22
 c002508:	10800003 	ldbu	r2,0(r2)
 c00250c:	10803fcc 	andi	r2,r2,255
 c002510:	100f883a 	mov	r7,r2
 c002514:	980d883a 	mov	r6,r19
 c002518:	900b883a 	mov	r5,r18
 c00251c:	8809883a 	mov	r4,r17
 c002520:	c0022380 	call	c002238 <setColorPalette>
	int flag = 0;
	char color_string[80];
    int fg, bg, x, y;
	textVGAColorClr();
	//initialize palette
	for (int i = 0; i < 16; i++)
 c002524:	e0bfe317 	ldw	r2,-116(fp)
 c002528:	10800044 	addi	r2,r2,1
 c00252c:	e0bfe315 	stw	r2,-116(fp)
 c002530:	e0bfe317 	ldw	r2,-116(fp)
 c002534:	10800410 	cmplti	r2,r2,16
 c002538:	103fd51e 	bne	r2,zero,c002490 <__alt_data_end+0xfc002490>
	{
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
	}
	int count =0;
 c00253c:	e03fe515 	stw	zero,-108(fp)
	while (1) {
	//for(int y = 0; y < COLUMNS; y++){
		fg = rand() % 16;
 c002540:	c004f600 	call	c004f60 <rand>
 c002544:	1007883a 	mov	r3,r2
 c002548:	00a00034 	movhi	r2,32768
 c00254c:	108003c4 	addi	r2,r2,15
 c002550:	1884703a 	and	r2,r3,r2
 c002554:	1000040e 	bge	r2,zero,c002568 <textVGAColorScreenSaver+0x108>
 c002558:	10bfffc4 	addi	r2,r2,-1
 c00255c:	00fffc04 	movi	r3,-16
 c002560:	10c4b03a 	or	r2,r2,r3
 c002564:	10800044 	addi	r2,r2,1
 c002568:	e0bfe115 	stw	r2,-124(fp)
		bg = rand() % 16;
 c00256c:	c004f600 	call	c004f60 <rand>
 c002570:	1007883a 	mov	r3,r2
 c002574:	00a00034 	movhi	r2,32768
 c002578:	108003c4 	addi	r2,r2,15
 c00257c:	1884703a 	and	r2,r3,r2
 c002580:	1000040e 	bge	r2,zero,c002594 <textVGAColorScreenSaver+0x134>
 c002584:	10bfffc4 	addi	r2,r2,-1
 c002588:	00fffc04 	movi	r3,-16
 c00258c:	10c4b03a 	or	r2,r2,r3
 c002590:	10800044 	addi	r2,r2,1
 c002594:	e0bfe215 	stw	r2,-120(fp)
		while (fg == bg)
 c002598:	00001606 	br	c0025f4 <textVGAColorScreenSaver+0x194>
		{
			fg = rand() % 16;
 c00259c:	c004f600 	call	c004f60 <rand>
 c0025a0:	1007883a 	mov	r3,r2
 c0025a4:	00a00034 	movhi	r2,32768
 c0025a8:	108003c4 	addi	r2,r2,15
 c0025ac:	1884703a 	and	r2,r3,r2
 c0025b0:	1000040e 	bge	r2,zero,c0025c4 <textVGAColorScreenSaver+0x164>
 c0025b4:	10bfffc4 	addi	r2,r2,-1
 c0025b8:	00fffc04 	movi	r3,-16
 c0025bc:	10c4b03a 	or	r2,r2,r3
 c0025c0:	10800044 	addi	r2,r2,1
 c0025c4:	e0bfe115 	stw	r2,-124(fp)
			bg = rand() % 16;
 c0025c8:	c004f600 	call	c004f60 <rand>
 c0025cc:	1007883a 	mov	r3,r2
 c0025d0:	00a00034 	movhi	r2,32768
 c0025d4:	108003c4 	addi	r2,r2,15
 c0025d8:	1884703a 	and	r2,r3,r2
 c0025dc:	1000040e 	bge	r2,zero,c0025f0 <textVGAColorScreenSaver+0x190>
 c0025e0:	10bfffc4 	addi	r2,r2,-1
 c0025e4:	00fffc04 	movi	r3,-16
 c0025e8:	10c4b03a 	or	r2,r2,r3
 c0025ec:	10800044 	addi	r2,r2,1
 c0025f0:	e0bfe215 	stw	r2,-120(fp)
	int count =0;
	while (1) {
	//for(int y = 0; y < COLUMNS; y++){
		fg = rand() % 16;
		bg = rand() % 16;
		while (fg == bg)
 c0025f4:	e0ffe117 	ldw	r3,-124(fp)
 c0025f8:	e0bfe217 	ldw	r2,-120(fp)
 c0025fc:	18bfe726 	beq	r3,r2,c00259c <__alt_data_end+0xfc00259c>
		{
			fg = rand() % 16;
			bg = rand() % 16;
		}
		//sprintf(color_string," ttttttt ");
		sprintf(color_string, "Drawing %s text with %s background", colors[fg].name, colors[bg].name);
 c002600:	014005c4 	movi	r5,23
 c002604:	e13fe117 	ldw	r4,-124(fp)
 c002608:	c004de00 	call	c004de0 <__mulsi3>
 c00260c:	1007883a 	mov	r3,r2
 c002610:	008300b4 	movhi	r2,3074
 c002614:	10a30a04 	addi	r2,r2,-29656
 c002618:	18a1883a 	add	r16,r3,r2
 c00261c:	014005c4 	movi	r5,23
 c002620:	e13fe217 	ldw	r4,-120(fp)
 c002624:	c004de00 	call	c004de0 <__mulsi3>
 c002628:	1007883a 	mov	r3,r2
 c00262c:	008300b4 	movhi	r2,3074
 c002630:	10a30a04 	addi	r2,r2,-29656
 c002634:	1887883a 	add	r3,r3,r2
 c002638:	e0bfe804 	addi	r2,fp,-96
 c00263c:	180f883a 	mov	r7,r3
 c002640:	800d883a 	mov	r6,r16
 c002644:	014300b4 	movhi	r5,3074
 c002648:	2961ac04 	addi	r5,r5,-31056
 c00264c:	1009883a 	mov	r4,r2
 c002650:	c00501c0 	call	c00501c <sprintf>
		x = rand() % (ROWS-strlen(color_string));
 c002654:	c004f600 	call	c004f60 <rand>
 c002658:	1021883a 	mov	r16,r2
 c00265c:	e0bfe804 	addi	r2,fp,-96
 c002660:	1009883a 	mov	r4,r2
 c002664:	c0050880 	call	c005088 <strlen>
 c002668:	1007883a 	mov	r3,r2
 c00266c:	00800f04 	movi	r2,60
 c002670:	10c5c83a 	sub	r2,r2,r3
 c002674:	100b883a 	mov	r5,r2
 c002678:	8009883a 	mov	r4,r16
 c00267c:	c004d880 	call	c004d88 <__umodsi3>
 c002680:	e0bfe615 	stw	r2,-104(fp)
		y = rand() % 60;
 c002684:	c004f600 	call	c004f60 <rand>
 c002688:	01400f04 	movi	r5,60
 c00268c:	1009883a 	mov	r4,r2
 c002690:	c004cb00 	call	c004cb0 <__modsi3>
 c002694:	e0bfe715 	stw	r2,-100(fp)
		if (y %2==0) {
 c002698:	e0bfe717 	ldw	r2,-100(fp)
 c00269c:	1080004c 	andi	r2,r2,1
 c0026a0:	1000181e 	bne	r2,zero,c002704 <textVGAColorScreenSaver+0x2a4>
			textVGADrawColorText (color_string, x, y, bg, fg);
 c0026a4:	e0bfe217 	ldw	r2,-120(fp)
 c0026a8:	11003fcc 	andi	r4,r2,255
 c0026ac:	e0bfe117 	ldw	r2,-124(fp)
 c0026b0:	10803fcc 	andi	r2,r2,255
 c0026b4:	e0ffe804 	addi	r3,fp,-96
 c0026b8:	d8800015 	stw	r2,0(sp)
 c0026bc:	200f883a 	mov	r7,r4
 c0026c0:	e1bfe717 	ldw	r6,-100(fp)
 c0026c4:	e17fe617 	ldw	r5,-104(fp)
 c0026c8:	1809883a 	mov	r4,r3
 c0026cc:	c0021280 	call	c002128 <textVGADrawColorText>
			textVGADrawColorText (color_string, x, y+1, bg, fg);
 c0026d0:	e0bfe717 	ldw	r2,-100(fp)
 c0026d4:	11000044 	addi	r4,r2,1
 c0026d8:	e0bfe217 	ldw	r2,-120(fp)
 c0026dc:	11403fcc 	andi	r5,r2,255
 c0026e0:	e0bfe117 	ldw	r2,-124(fp)
 c0026e4:	10803fcc 	andi	r2,r2,255
 c0026e8:	e0ffe804 	addi	r3,fp,-96
 c0026ec:	d8800015 	stw	r2,0(sp)
 c0026f0:	280f883a 	mov	r7,r5
 c0026f4:	200d883a 	mov	r6,r4
 c0026f8:	e17fe617 	ldw	r5,-104(fp)
 c0026fc:	1809883a 	mov	r4,r3
 c002700:	c0021280 	call	c002128 <textVGADrawColorText>

		}
		usleep (100000);
 c002704:	010000b4 	movhi	r4,2
 c002708:	2121a804 	addi	r4,r4,-31072
 c00270c:	c0162480 	call	c016248 <usleep>
	//}
	}
 c002710:	003f8b06 	br	c002540 <__alt_data_end+0xfc002540>

0c002714 <VGADrawColorBox>:
	//VGADrawColorBox(2,2,15,0);
	//VGADrawColorBox(ROWS/2,COLUMNS/2,3,0);
}

void VGADrawColorBox(int x, int y, alt_u8 background)
{
 c002714:	defffa04 	addi	sp,sp,-24
 c002718:	dfc00515 	stw	ra,20(sp)
 c00271c:	df000415 	stw	fp,16(sp)
 c002720:	dc000315 	stw	r16,12(sp)
 c002724:	df000404 	addi	fp,sp,16
 c002728:	e13ffc15 	stw	r4,-16(fp)
 c00272c:	e17ffd15 	stw	r5,-12(fp)
 c002730:	3005883a 	mov	r2,r6
 c002734:	e0bffe05 	stb	r2,-8(fp)
	vga_ctrl->VRAM[(y*COLUMNS + x) * 2] = 0 << 4 | background;
 c002738:	d4200417 	ldw	r16,-32752(gp)
 c00273c:	01401404 	movi	r5,80
 c002740:	e13ffd17 	ldw	r4,-12(fp)
 c002744:	c004de00 	call	c004de0 <__mulsi3>
 c002748:	1007883a 	mov	r3,r2
 c00274c:	e0bffc17 	ldw	r2,-16(fp)
 c002750:	1885883a 	add	r2,r3,r2
 c002754:	1085883a 	add	r2,r2,r2
 c002758:	8085883a 	add	r2,r16,r2
 c00275c:	e0fffe03 	ldbu	r3,-8(fp)
 c002760:	10c00005 	stb	r3,0(r2)
}
 c002764:	0001883a 	nop
 c002768:	e6ffff04 	addi	sp,fp,-4
 c00276c:	dfc00217 	ldw	ra,8(sp)
 c002770:	df000117 	ldw	fp,4(sp)
 c002774:	dc000017 	ldw	r16,0(sp)
 c002778:	dec00304 	addi	sp,sp,12
 c00277c:	f800283a 	ret

0c002780 <userControlledBlock>:
/*
void VGAwriteText(int x, int y, int color, char text) {

}*/

void userControlledBlock(int x, int y, int index, int color) {
 c002780:	defffa04 	addi	sp,sp,-24
 c002784:	dfc00515 	stw	ra,20(sp)
 c002788:	df000415 	stw	fp,16(sp)
 c00278c:	df000404 	addi	fp,sp,16
 c002790:	e13ffc15 	stw	r4,-16(fp)
 c002794:	e17ffd15 	stw	r5,-12(fp)
 c002798:	e1bffe15 	stw	r6,-8(fp)
 c00279c:	e1ffff15 	stw	r7,-4(fp)
	switch(index) {
 c0027a0:	e0bffe17 	ldw	r2,-8(fp)
 c0027a4:	108001a8 	cmpgeui	r2,r2,6
 c0027a8:	1000dd1e 	bne	r2,zero,c002b20 <userControlledBlock+0x3a0>
 c0027ac:	e0bffe17 	ldw	r2,-8(fp)
 c0027b0:	100690ba 	slli	r3,r2,2
 c0027b4:	00830034 	movhi	r2,3072
 c0027b8:	1089f204 	addi	r2,r2,10184
 c0027bc:	1885883a 	add	r2,r3,r2
 c0027c0:	10800017 	ldw	r2,0(r2)
 c0027c4:	1000683a 	jmp	r2
 c0027c8:	0c0027e0 	cmpeqi	r16,at,159
 c0027cc:	0c00285c 	xori	r16,at,161
 c0027d0:	0c002900 	call	c00290 <__alt_mem_onchip_memory2_0+0xc00290>
 c0027d4:	0c00299c 	xori	r16,at,166
 c0027d8:	0c002a18 	cmpnei	r16,at,168
 c0027dc:	0c002a9c 	xori	r16,at,170
	   case 0  :
		   VGADrawColorBox(x,y-3,color);
 c0027e0:	e0bffd17 	ldw	r2,-12(fp)
 c0027e4:	10ffff44 	addi	r3,r2,-3
 c0027e8:	e0bfff17 	ldw	r2,-4(fp)
 c0027ec:	10803fcc 	andi	r2,r2,255
 c0027f0:	100d883a 	mov	r6,r2
 c0027f4:	180b883a 	mov	r5,r3
 c0027f8:	e13ffc17 	ldw	r4,-16(fp)
 c0027fc:	c0027140 	call	c002714 <VGADrawColorBox>
		   VGADrawColorBox(x,y-2,color);
 c002800:	e0bffd17 	ldw	r2,-12(fp)
 c002804:	10ffff84 	addi	r3,r2,-2
 c002808:	e0bfff17 	ldw	r2,-4(fp)
 c00280c:	10803fcc 	andi	r2,r2,255
 c002810:	100d883a 	mov	r6,r2
 c002814:	180b883a 	mov	r5,r3
 c002818:	e13ffc17 	ldw	r4,-16(fp)
 c00281c:	c0027140 	call	c002714 <VGADrawColorBox>
		   VGADrawColorBox(x,y-1,color);
 c002820:	e0bffd17 	ldw	r2,-12(fp)
 c002824:	10ffffc4 	addi	r3,r2,-1
 c002828:	e0bfff17 	ldw	r2,-4(fp)
 c00282c:	10803fcc 	andi	r2,r2,255
 c002830:	100d883a 	mov	r6,r2
 c002834:	180b883a 	mov	r5,r3
 c002838:	e13ffc17 	ldw	r4,-16(fp)
 c00283c:	c0027140 	call	c002714 <VGADrawColorBox>
		   VGADrawColorBox(x,y,color);
 c002840:	e0bfff17 	ldw	r2,-4(fp)
 c002844:	10803fcc 	andi	r2,r2,255
 c002848:	100d883a 	mov	r6,r2
 c00284c:	e17ffd17 	ldw	r5,-12(fp)
 c002850:	e13ffc17 	ldw	r4,-16(fp)
 c002854:	c0027140 	call	c002714 <VGADrawColorBox>
	      break;
 c002858:	0000d106 	br	c002ba0 <userControlledBlock+0x420>
	   case 1  :
		   VGADrawColorBox(x+1,y-3,color);
 c00285c:	e0bffc17 	ldw	r2,-16(fp)
 c002860:	10c00044 	addi	r3,r2,1
 c002864:	e0bffd17 	ldw	r2,-12(fp)
 c002868:	113fff44 	addi	r4,r2,-3
 c00286c:	e0bfff17 	ldw	r2,-4(fp)
 c002870:	10803fcc 	andi	r2,r2,255
 c002874:	100d883a 	mov	r6,r2
 c002878:	200b883a 	mov	r5,r4
 c00287c:	1809883a 	mov	r4,r3
 c002880:	c0027140 	call	c002714 <VGADrawColorBox>
		   VGADrawColorBox(x,y-3,color);
 c002884:	e0bffd17 	ldw	r2,-12(fp)
 c002888:	10ffff44 	addi	r3,r2,-3
 c00288c:	e0bfff17 	ldw	r2,-4(fp)
 c002890:	10803fcc 	andi	r2,r2,255
 c002894:	100d883a 	mov	r6,r2
 c002898:	180b883a 	mov	r5,r3
 c00289c:	e13ffc17 	ldw	r4,-16(fp)
 c0028a0:	c0027140 	call	c002714 <VGADrawColorBox>
		   VGADrawColorBox(x,y-2,color);
 c0028a4:	e0bffd17 	ldw	r2,-12(fp)
 c0028a8:	10ffff84 	addi	r3,r2,-2
 c0028ac:	e0bfff17 	ldw	r2,-4(fp)
 c0028b0:	10803fcc 	andi	r2,r2,255
 c0028b4:	100d883a 	mov	r6,r2
 c0028b8:	180b883a 	mov	r5,r3
 c0028bc:	e13ffc17 	ldw	r4,-16(fp)
 c0028c0:	c0027140 	call	c002714 <VGADrawColorBox>
		   VGADrawColorBox(x,y-1,color);
 c0028c4:	e0bffd17 	ldw	r2,-12(fp)
 c0028c8:	10ffffc4 	addi	r3,r2,-1
 c0028cc:	e0bfff17 	ldw	r2,-4(fp)
 c0028d0:	10803fcc 	andi	r2,r2,255
 c0028d4:	100d883a 	mov	r6,r2
 c0028d8:	180b883a 	mov	r5,r3
 c0028dc:	e13ffc17 	ldw	r4,-16(fp)
 c0028e0:	c0027140 	call	c002714 <VGADrawColorBox>
		   VGADrawColorBox(x,y,color);
 c0028e4:	e0bfff17 	ldw	r2,-4(fp)
 c0028e8:	10803fcc 	andi	r2,r2,255
 c0028ec:	100d883a 	mov	r6,r2
 c0028f0:	e17ffd17 	ldw	r5,-12(fp)
 c0028f4:	e13ffc17 	ldw	r4,-16(fp)
 c0028f8:	c0027140 	call	c002714 <VGADrawColorBox>
	      break;
 c0028fc:	0000a806 	br	c002ba0 <userControlledBlock+0x420>
	   case 2  :
		   VGADrawColorBox(x+1,y,color);
 c002900:	e0bffc17 	ldw	r2,-16(fp)
 c002904:	10c00044 	addi	r3,r2,1
 c002908:	e0bfff17 	ldw	r2,-4(fp)
 c00290c:	10803fcc 	andi	r2,r2,255
 c002910:	100d883a 	mov	r6,r2
 c002914:	e17ffd17 	ldw	r5,-12(fp)
 c002918:	1809883a 	mov	r4,r3
 c00291c:	c0027140 	call	c002714 <VGADrawColorBox>
		   VGADrawColorBox(x,y-3,color);
 c002920:	e0bffd17 	ldw	r2,-12(fp)
 c002924:	10ffff44 	addi	r3,r2,-3
 c002928:	e0bfff17 	ldw	r2,-4(fp)
 c00292c:	10803fcc 	andi	r2,r2,255
 c002930:	100d883a 	mov	r6,r2
 c002934:	180b883a 	mov	r5,r3
 c002938:	e13ffc17 	ldw	r4,-16(fp)
 c00293c:	c0027140 	call	c002714 <VGADrawColorBox>
		   VGADrawColorBox(x,y-2,color);
 c002940:	e0bffd17 	ldw	r2,-12(fp)
 c002944:	10ffff84 	addi	r3,r2,-2
 c002948:	e0bfff17 	ldw	r2,-4(fp)
 c00294c:	10803fcc 	andi	r2,r2,255
 c002950:	100d883a 	mov	r6,r2
 c002954:	180b883a 	mov	r5,r3
 c002958:	e13ffc17 	ldw	r4,-16(fp)
 c00295c:	c0027140 	call	c002714 <VGADrawColorBox>
		   VGADrawColorBox(x,y-1,color);
 c002960:	e0bffd17 	ldw	r2,-12(fp)
 c002964:	10ffffc4 	addi	r3,r2,-1
 c002968:	e0bfff17 	ldw	r2,-4(fp)
 c00296c:	10803fcc 	andi	r2,r2,255
 c002970:	100d883a 	mov	r6,r2
 c002974:	180b883a 	mov	r5,r3
 c002978:	e13ffc17 	ldw	r4,-16(fp)
 c00297c:	c0027140 	call	c002714 <VGADrawColorBox>
		   VGADrawColorBox(x,y,color);
 c002980:	e0bfff17 	ldw	r2,-4(fp)
 c002984:	10803fcc 	andi	r2,r2,255
 c002988:	100d883a 	mov	r6,r2
 c00298c:	e17ffd17 	ldw	r5,-12(fp)
 c002990:	e13ffc17 	ldw	r4,-16(fp)
 c002994:	c0027140 	call	c002714 <VGADrawColorBox>
	      break;
 c002998:	00008106 	br	c002ba0 <userControlledBlock+0x420>
	   case 3  :
		   VGADrawColorBox(x,y,color);
 c00299c:	e0bfff17 	ldw	r2,-4(fp)
 c0029a0:	10803fcc 	andi	r2,r2,255
 c0029a4:	100d883a 	mov	r6,r2
 c0029a8:	e17ffd17 	ldw	r5,-12(fp)
 c0029ac:	e13ffc17 	ldw	r4,-16(fp)
 c0029b0:	c0027140 	call	c002714 <VGADrawColorBox>
		   VGADrawColorBox(x-1,y,color);
 c0029b4:	e0bffc17 	ldw	r2,-16(fp)
 c0029b8:	10ffffc4 	addi	r3,r2,-1
 c0029bc:	e0bfff17 	ldw	r2,-4(fp)
 c0029c0:	10803fcc 	andi	r2,r2,255
 c0029c4:	100d883a 	mov	r6,r2
 c0029c8:	e17ffd17 	ldw	r5,-12(fp)
 c0029cc:	1809883a 	mov	r4,r3
 c0029d0:	c0027140 	call	c002714 <VGADrawColorBox>
		   VGADrawColorBox(x+1,y,color);
 c0029d4:	e0bffc17 	ldw	r2,-16(fp)
 c0029d8:	10c00044 	addi	r3,r2,1
 c0029dc:	e0bfff17 	ldw	r2,-4(fp)
 c0029e0:	10803fcc 	andi	r2,r2,255
 c0029e4:	100d883a 	mov	r6,r2
 c0029e8:	e17ffd17 	ldw	r5,-12(fp)
 c0029ec:	1809883a 	mov	r4,r3
 c0029f0:	c0027140 	call	c002714 <VGADrawColorBox>
		   VGADrawColorBox(x,y-1,color);
 c0029f4:	e0bffd17 	ldw	r2,-12(fp)
 c0029f8:	10ffffc4 	addi	r3,r2,-1
 c0029fc:	e0bfff17 	ldw	r2,-4(fp)
 c002a00:	10803fcc 	andi	r2,r2,255
 c002a04:	100d883a 	mov	r6,r2
 c002a08:	180b883a 	mov	r5,r3
 c002a0c:	e13ffc17 	ldw	r4,-16(fp)
 c002a10:	c0027140 	call	c002714 <VGADrawColorBox>
	      break;
 c002a14:	00006206 	br	c002ba0 <userControlledBlock+0x420>
	   case 4  :
		   VGADrawColorBox(x,y,color);
 c002a18:	e0bfff17 	ldw	r2,-4(fp)
 c002a1c:	10803fcc 	andi	r2,r2,255
 c002a20:	100d883a 	mov	r6,r2
 c002a24:	e17ffd17 	ldw	r5,-12(fp)
 c002a28:	e13ffc17 	ldw	r4,-16(fp)
 c002a2c:	c0027140 	call	c002714 <VGADrawColorBox>
		   VGADrawColorBox(x+1,y,color);
 c002a30:	e0bffc17 	ldw	r2,-16(fp)
 c002a34:	10c00044 	addi	r3,r2,1
 c002a38:	e0bfff17 	ldw	r2,-4(fp)
 c002a3c:	10803fcc 	andi	r2,r2,255
 c002a40:	100d883a 	mov	r6,r2
 c002a44:	e17ffd17 	ldw	r5,-12(fp)
 c002a48:	1809883a 	mov	r4,r3
 c002a4c:	c0027140 	call	c002714 <VGADrawColorBox>
		   VGADrawColorBox(x+1,y-1,color);
 c002a50:	e0bffc17 	ldw	r2,-16(fp)
 c002a54:	10c00044 	addi	r3,r2,1
 c002a58:	e0bffd17 	ldw	r2,-12(fp)
 c002a5c:	113fffc4 	addi	r4,r2,-1
 c002a60:	e0bfff17 	ldw	r2,-4(fp)
 c002a64:	10803fcc 	andi	r2,r2,255
 c002a68:	100d883a 	mov	r6,r2
 c002a6c:	200b883a 	mov	r5,r4
 c002a70:	1809883a 	mov	r4,r3
 c002a74:	c0027140 	call	c002714 <VGADrawColorBox>
		   VGADrawColorBox(x,y-1,color);
 c002a78:	e0bffd17 	ldw	r2,-12(fp)
 c002a7c:	10ffffc4 	addi	r3,r2,-1
 c002a80:	e0bfff17 	ldw	r2,-4(fp)
 c002a84:	10803fcc 	andi	r2,r2,255
 c002a88:	100d883a 	mov	r6,r2
 c002a8c:	180b883a 	mov	r5,r3
 c002a90:	e13ffc17 	ldw	r4,-16(fp)
 c002a94:	c0027140 	call	c002714 <VGADrawColorBox>
	      break;
 c002a98:	00004106 	br	c002ba0 <userControlledBlock+0x420>
	   case 5  :
		   VGADrawColorBox(x,y,color);
 c002a9c:	e0bfff17 	ldw	r2,-4(fp)
 c002aa0:	10803fcc 	andi	r2,r2,255
 c002aa4:	100d883a 	mov	r6,r2
 c002aa8:	e17ffd17 	ldw	r5,-12(fp)
 c002aac:	e13ffc17 	ldw	r4,-16(fp)
 c002ab0:	c0027140 	call	c002714 <VGADrawColorBox>
		   VGADrawColorBox(x+1,y,color);
 c002ab4:	e0bffc17 	ldw	r2,-16(fp)
 c002ab8:	10c00044 	addi	r3,r2,1
 c002abc:	e0bfff17 	ldw	r2,-4(fp)
 c002ac0:	10803fcc 	andi	r2,r2,255
 c002ac4:	100d883a 	mov	r6,r2
 c002ac8:	e17ffd17 	ldw	r5,-12(fp)
 c002acc:	1809883a 	mov	r4,r3
 c002ad0:	c0027140 	call	c002714 <VGADrawColorBox>
		   VGADrawColorBox(x,y-1,color);
 c002ad4:	e0bffd17 	ldw	r2,-12(fp)
 c002ad8:	10ffffc4 	addi	r3,r2,-1
 c002adc:	e0bfff17 	ldw	r2,-4(fp)
 c002ae0:	10803fcc 	andi	r2,r2,255
 c002ae4:	100d883a 	mov	r6,r2
 c002ae8:	180b883a 	mov	r5,r3
 c002aec:	e13ffc17 	ldw	r4,-16(fp)
 c002af0:	c0027140 	call	c002714 <VGADrawColorBox>
		   VGADrawColorBox(x-1,y-1,color);
 c002af4:	e0bffc17 	ldw	r2,-16(fp)
 c002af8:	10ffffc4 	addi	r3,r2,-1
 c002afc:	e0bffd17 	ldw	r2,-12(fp)
 c002b00:	113fffc4 	addi	r4,r2,-1
 c002b04:	e0bfff17 	ldw	r2,-4(fp)
 c002b08:	10803fcc 	andi	r2,r2,255
 c002b0c:	100d883a 	mov	r6,r2
 c002b10:	200b883a 	mov	r5,r4
 c002b14:	1809883a 	mov	r4,r3
 c002b18:	c0027140 	call	c002714 <VGADrawColorBox>
	      break;
 c002b1c:	00002006 	br	c002ba0 <userControlledBlock+0x420>
	   default :
		   VGADrawColorBox(x,y,color);
 c002b20:	e0bfff17 	ldw	r2,-4(fp)
 c002b24:	10803fcc 	andi	r2,r2,255
 c002b28:	100d883a 	mov	r6,r2
 c002b2c:	e17ffd17 	ldw	r5,-12(fp)
 c002b30:	e13ffc17 	ldw	r4,-16(fp)
 c002b34:	c0027140 	call	c002714 <VGADrawColorBox>
		   VGADrawColorBox(x,y-1,color);
 c002b38:	e0bffd17 	ldw	r2,-12(fp)
 c002b3c:	10ffffc4 	addi	r3,r2,-1
 c002b40:	e0bfff17 	ldw	r2,-4(fp)
 c002b44:	10803fcc 	andi	r2,r2,255
 c002b48:	100d883a 	mov	r6,r2
 c002b4c:	180b883a 	mov	r5,r3
 c002b50:	e13ffc17 	ldw	r4,-16(fp)
 c002b54:	c0027140 	call	c002714 <VGADrawColorBox>
		   VGADrawColorBox(x+1,y-1,color);
 c002b58:	e0bffc17 	ldw	r2,-16(fp)
 c002b5c:	10c00044 	addi	r3,r2,1
 c002b60:	e0bffd17 	ldw	r2,-12(fp)
 c002b64:	113fffc4 	addi	r4,r2,-1
 c002b68:	e0bfff17 	ldw	r2,-4(fp)
 c002b6c:	10803fcc 	andi	r2,r2,255
 c002b70:	100d883a 	mov	r6,r2
 c002b74:	200b883a 	mov	r5,r4
 c002b78:	1809883a 	mov	r4,r3
 c002b7c:	c0027140 	call	c002714 <VGADrawColorBox>
		   VGADrawColorBox(x+1,y,color);
 c002b80:	e0bffc17 	ldw	r2,-16(fp)
 c002b84:	10c00044 	addi	r3,r2,1
 c002b88:	e0bfff17 	ldw	r2,-4(fp)
 c002b8c:	10803fcc 	andi	r2,r2,255
 c002b90:	100d883a 	mov	r6,r2
 c002b94:	e17ffd17 	ldw	r5,-12(fp)
 c002b98:	1809883a 	mov	r4,r3
 c002b9c:	c0027140 	call	c002714 <VGADrawColorBox>
	}
}
 c002ba0:	0001883a 	nop
 c002ba4:	e037883a 	mov	sp,fp
 c002ba8:	dfc00117 	ldw	ra,4(sp)
 c002bac:	df000017 	ldw	fp,0(sp)
 c002bb0:	dec00204 	addi	sp,sp,8
 c002bb4:	f800283a 	ret

0c002bb8 <HIDMProbe>:
/* HID Mouse probe. Called from USB state machine.                          */
/* assumes configuration length is less than 256 bytes                      */
/* looks for Class:03, Subclass: 01, Protocol: 02 in interface descriptor   */
/* sets mouse in boot protocol                                              */
/* assumes single configuration and interface configuration 0               */
BOOL HIDMProbe(BYTE addr, DWORD flags) {
 c002bb8:	defff204 	addi	sp,sp,-56
 c002bbc:	dfc00d15 	stw	ra,52(sp)
 c002bc0:	df000c15 	stw	fp,48(sp)
 c002bc4:	df000c04 	addi	fp,sp,48
 c002bc8:	2005883a 	mov	r2,r4
 c002bcc:	e17fff15 	stw	r5,-4(fp)
 c002bd0:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 c002bd4:	008300b4 	movhi	r2,3074
 c002bd8:	10976404 	addi	r2,r2,23952
 c002bdc:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
 c002be0:	008300b4 	movhi	r2,3074
 c002be4:	10976404 	addi	r2,r2,23952
 c002be8:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 c002bec:	e0fffe03 	ldbu	r3,-8(fp)
 c002bf0:	008300b4 	movhi	r2,3074
 c002bf4:	10976404 	addi	r2,r2,23952
 c002bf8:	d8800415 	stw	r2,16(sp)
 c002bfc:	00800244 	movi	r2,9
 c002c00:	d8800315 	stw	r2,12(sp)
 c002c04:	d8000215 	stw	zero,8(sp)
 c002c08:	00800084 	movi	r2,2
 c002c0c:	d8800115 	stw	r2,4(sp)
 c002c10:	d8000015 	stw	zero,0(sp)
 c002c14:	01c00184 	movi	r7,6
 c002c18:	01802004 	movi	r6,128
 c002c1c:	000b883a 	mov	r5,zero
 c002c20:	1809883a 	mov	r4,r3
 c002c24:	c003d940 	call	c003d94 <XferCtrlReq>
 c002c28:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 c002c2c:	e0bffc03 	ldbu	r2,-16(fp)
 c002c30:	10000226 	beq	r2,zero,c002c3c <HIDMProbe+0x84>
		//printf("unable to get configuration descriptor");
		return (FALSE);
 c002c34:	0005883a 	mov	r2,zero
 c002c38:	0000dc06 	br	c002fac <HIDMProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 c002c3c:	e0bffa17 	ldw	r2,-24(fp)
 c002c40:	1080008b 	ldhu	r2,2(r2)
 c002c44:	10bfffcc 	andi	r2,r2,65535
 c002c48:	10804070 	cmpltui	r2,r2,257
 c002c4c:	1000031e 	bne	r2,zero,c002c5c <HIDMProbe+0xa4>
		total_length = 256;
 c002c50:	00804004 	movi	r2,256
 c002c54:	e0bff90d 	sth	r2,-28(fp)
 c002c58:	00000306 	br	c002c68 <HIDMProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 c002c5c:	e0bffa17 	ldw	r2,-24(fp)
 c002c60:	1080008b 	ldhu	r2,2(r2)
 c002c64:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 c002c68:	e13ffe03 	ldbu	r4,-8(fp)
 c002c6c:	e0fff90b 	ldhu	r3,-28(fp)
 c002c70:	008300b4 	movhi	r2,3074
 c002c74:	10976404 	addi	r2,r2,23952
 c002c78:	d8800415 	stw	r2,16(sp)
 c002c7c:	d8c00315 	stw	r3,12(sp)
 c002c80:	d8000215 	stw	zero,8(sp)
 c002c84:	00800084 	movi	r2,2
 c002c88:	d8800115 	stw	r2,4(sp)
 c002c8c:	d8000015 	stw	zero,0(sp)
 c002c90:	01c00184 	movi	r7,6
 c002c94:	01802004 	movi	r6,128
 c002c98:	000b883a 	mov	r5,zero
 c002c9c:	c003d940 	call	c003d94 <XferCtrlReq>
 c002ca0:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 c002ca4:	e0bffc03 	ldbu	r2,-16(fp)
 c002ca8:	10000226 	beq	r2,zero,c002cb4 <HIDMProbe+0xfc>
		//printf("unable to get configuration");
		return (FALSE);
 c002cac:	0005883a 	mov	r2,zero
 c002cb0:	0000be06 	br	c002fac <HIDMProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue;
 c002cb4:	e0bffa17 	ldw	r2,-24(fp)
 c002cb8:	10800143 	ldbu	r2,5(r2)
 c002cbc:	e0bffc45 	stb	r2,-15(fp)
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
 c002cc0:	0000b306 	br	c002f90 <HIDMProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) {
 c002cc4:	e0bffa17 	ldw	r2,-24(fp)
 c002cc8:	10800043 	ldbu	r2,1(r2)
 c002ccc:	10803fcc 	andi	r2,r2,255
 c002cd0:	10800120 	cmpeqi	r2,r2,4
 c002cd4:	1000091e 	bne	r2,zero,c002cfc <HIDMProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 c002cd8:	e0bffa17 	ldw	r2,-24(fp)
 c002cdc:	10800003 	ldbu	r2,0(r2)
 c002ce0:	10803fcc 	andi	r2,r2,255
 c002ce4:	e0fffb17 	ldw	r3,-20(fp)
 c002ce8:	1885883a 	add	r2,r3,r2
 c002cec:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 c002cf0:	e0bffb17 	ldw	r2,-20(fp)
 c002cf4:	e0bffa15 	stw	r2,-24(fp)
 c002cf8:	0000a506 	br	c002f90 <HIDMProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 c002cfc:	e0bffa17 	ldw	r2,-24(fp)
 c002d00:	10800143 	ldbu	r2,5(r2)
 c002d04:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 c002d08:	e0bffa17 	ldw	r2,-24(fp)
 c002d0c:	10800183 	ldbu	r2,6(r2)
 c002d10:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 c002d14:	e0bffa17 	ldw	r2,-24(fp)
 c002d18:	108001c3 	ldbu	r2,7(r2)
 c002d1c:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 c002d20:	e0bffc83 	ldbu	r2,-14(fp)
 c002d24:	108000d8 	cmpnei	r2,r2,3
 c002d28:	1000971e 	bne	r2,zero,c002f88 <HIDMProbe+0x3d0>
 c002d2c:	e0bffcc3 	ldbu	r2,-13(fp)
 c002d30:	10800058 	cmpnei	r2,r2,1
 c002d34:	1000941e 	bne	r2,zero,c002f88 <HIDMProbe+0x3d0>
					&& protocol == HID_PROTOCOL_MOUSE) {
 c002d38:	e0bffd03 	ldbu	r2,-12(fp)
 c002d3c:	10800098 	cmpnei	r2,r2,2
 c002d40:	1000911e 	bne	r2,zero,c002f88 <HIDMProbe+0x3d0>
				//detected a mouse
				devtable[addr].devclass = HID_M;                  //device class
 c002d44:	e0fffe03 	ldbu	r3,-8(fp)
 c002d48:	008300b4 	movhi	r2,3074
 c002d4c:	1097a404 	addi	r2,r2,24208
 c002d50:	180690fa 	slli	r3,r3,3
 c002d54:	10c5883a 	add	r2,r2,r3
 c002d58:	10800104 	addi	r2,r2,4
 c002d5c:	00c00084 	movi	r3,2
 c002d60:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
 c002d64:	e0fffe03 	ldbu	r3,-8(fp)
 c002d68:	008300b4 	movhi	r2,3074
 c002d6c:	1097a404 	addi	r2,r2,24208
 c002d70:	180690fa 	slli	r3,r3,3
 c002d74:	10c5883a 	add	r2,r2,r3
 c002d78:	10800017 	ldw	r2,0(r2)
 c002d7c:	1080008b 	ldhu	r2,2(r2)
 c002d80:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
 c002d84:	c0033c80 	call	c0033c8 <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 c002d88:	e0fffe03 	ldbu	r3,-8(fp)
 c002d8c:	008300b4 	movhi	r2,3074
 c002d90:	1097a404 	addi	r2,r2,24208
 c002d94:	180690fa 	slli	r3,r3,3
 c002d98:	10c7883a 	add	r3,r2,r3
 c002d9c:	008300b4 	movhi	r2,3074
 c002da0:	10b1d004 	addi	r2,r2,-14528
 c002da4:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
 c002da8:	e0fffe03 	ldbu	r3,-8(fp)
 c002dac:	008300b4 	movhi	r2,3074
 c002db0:	1097a404 	addi	r2,r2,24208
 c002db4:	180690fa 	slli	r3,r3,3
 c002db8:	10c5883a 	add	r2,r2,r3
 c002dbc:	10800017 	ldw	r2,0(r2)
 c002dc0:	e0fffd43 	ldbu	r3,-11(fp)
 c002dc4:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
 c002dc8:	e0bffa17 	ldw	r2,-24(fp)
 c002dcc:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_M;                  //device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
				hid_device.interface =
 c002dd0:	d0a79f45 	stb	r2,-24963(gp)
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
 c002dd4:	e0bffe03 	ldbu	r2,-8(fp)
 c002dd8:	d0a79f05 	stb	r2,-24964(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 c002ddc:	e0bffa17 	ldw	r2,-24(fp)
 c002de0:	10800003 	ldbu	r2,0(r2)
 c002de4:	10803fcc 	andi	r2,r2,255
 c002de8:	e0fffb17 	ldw	r3,-20(fp)
 c002dec:	1885883a 	add	r2,r3,r2
 c002df0:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 c002df4:	e0bffb17 	ldw	r2,-20(fp)
 c002df8:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
 c002dfc:	00005b06 	br	c002f6c <HIDMProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
 c002e00:	e0bffa17 	ldw	r2,-24(fp)
 c002e04:	10800043 	ldbu	r2,1(r2)
 c002e08:	10803fcc 	andi	r2,r2,255
 c002e0c:	10800160 	cmpeqi	r2,r2,5
 c002e10:	1000091e 	bne	r2,zero,c002e38 <HIDMProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 c002e14:	e0bffa17 	ldw	r2,-24(fp)
 c002e18:	10800003 	ldbu	r2,0(r2)
 c002e1c:	10803fcc 	andi	r2,r2,255
 c002e20:	e0fffb17 	ldw	r3,-20(fp)
 c002e24:	1885883a 	add	r2,r3,r2
 c002e28:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 c002e2c:	e0bffb17 	ldw	r2,-20(fp)
 c002e30:	e0bffa15 	stw	r2,-24(fp)
 c002e34:	00004d06 	br	c002f6c <HIDMProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 c002e38:	e0fffe03 	ldbu	r3,-8(fp)
 c002e3c:	008300b4 	movhi	r2,3074
 c002e40:	1097a404 	addi	r2,r2,24208
 c002e44:	180690fa 	slli	r3,r3,3
 c002e48:	10c5883a 	add	r2,r2,r3
 c002e4c:	10800017 	ldw	r2,0(r2)
 c002e50:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 c002e54:	e0fffa17 	ldw	r3,-24(fp)
 c002e58:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 c002e5c:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 c002e60:	e0fffe03 	ldbu	r3,-8(fp)
 c002e64:	008300b4 	movhi	r2,3074
 c002e68:	1097a404 	addi	r2,r2,24208
 c002e6c:	180690fa 	slli	r3,r3,3
 c002e70:	10c5883a 	add	r2,r2,r3
 c002e74:	10800017 	ldw	r2,0(r2)
 c002e78:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 c002e7c:	e0fffa17 	ldw	r3,-24(fp)
 c002e80:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 c002e84:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 c002e88:	e0fffe03 	ldbu	r3,-8(fp)
 c002e8c:	008300b4 	movhi	r2,3074
 c002e90:	1097a404 	addi	r2,r2,24208
 c002e94:	180690fa 	slli	r3,r3,3
 c002e98:	10c5883a 	add	r2,r2,r3
 c002e9c:	10800017 	ldw	r2,0(r2)
 c002ea0:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 c002ea4:	e0fffa17 	ldw	r3,-24(fp)
 c002ea8:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 c002eac:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 c002eb0:	e0fffe03 	ldbu	r3,-8(fp)
 c002eb4:	008300b4 	movhi	r2,3074
 c002eb8:	1097a404 	addi	r2,r2,24208
 c002ebc:	180690fa 	slli	r3,r3,3
 c002ec0:	10c5883a 	add	r2,r2,r3
 c002ec4:	10800017 	ldw	r2,0(r2)
 c002ec8:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 c002ecc:	e0fffa17 	ldw	r3,-24(fp)
 c002ed0:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 c002ed4:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						// devtable[ addr ].epinfo[ 1 ].rcvToggle = bmRCVTOG0;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 c002ed8:	e0fffe03 	ldbu	r3,-8(fp)
 c002edc:	e0bffc43 	ldbu	r2,-15(fp)
 c002ee0:	d8000415 	stw	zero,16(sp)
 c002ee4:	d8000315 	stw	zero,12(sp)
 c002ee8:	d8000215 	stw	zero,8(sp)
 c002eec:	d8000115 	stw	zero,4(sp)
 c002ef0:	d8800015 	stw	r2,0(sp)
 c002ef4:	01c00244 	movi	r7,9
 c002ef8:	000d883a 	mov	r6,zero
 c002efc:	000b883a 	mov	r5,zero
 c002f00:	1809883a 	mov	r4,r3
 c002f04:	c003d940 	call	c003d94 <XferCtrlReq>
 c002f08:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
 c002f0c:	e0bffc03 	ldbu	r2,-16(fp)
 c002f10:	10000226 	beq	r2,zero,c002f1c <HIDMProbe+0x364>
							return (FALSE);
 c002f14:	0005883a 	mov	r2,zero
 c002f18:	00002406 	br	c002fac <HIDMProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 c002f1c:	e0fffe03 	ldbu	r3,-8(fp)
 c002f20:	d0a79f43 	ldbu	r2,-24963(gp)
 c002f24:	10803fcc 	andi	r2,r2,255
 c002f28:	d8000415 	stw	zero,16(sp)
 c002f2c:	d8000315 	stw	zero,12(sp)
 c002f30:	d8800215 	stw	r2,8(sp)
 c002f34:	d8000115 	stw	zero,4(sp)
 c002f38:	d8000015 	stw	zero,0(sp)
 c002f3c:	01c002c4 	movi	r7,11
 c002f40:	01800844 	movi	r6,33
 c002f44:	000b883a 	mov	r5,zero
 c002f48:	1809883a 	mov	r4,r3
 c002f4c:	c003d940 	call	c003d94 <XferCtrlReq>
 c002f50:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 c002f54:	e0bffc03 	ldbu	r2,-16(fp)
 c002f58:	10000226 	beq	r2,zero,c002f64 <HIDMProbe+0x3ac>
							return (FALSE);
 c002f5c:	0005883a 	mov	r2,zero
 c002f60:	00001206 	br	c002fac <HIDMProbe+0x3f4>
						} else {
							return (TRUE);
 c002f64:	00800044 	movi	r2,1
 c002f68:	00001006 	br	c002fac <HIDMProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
 c002f6c:	e0fff90b 	ldhu	r3,-28(fp)
 c002f70:	008300b4 	movhi	r2,3074
 c002f74:	10976404 	addi	r2,r2,23952
 c002f78:	1885883a 	add	r2,r3,r2
 c002f7c:	e0fffb17 	ldw	r3,-20(fp)
 c002f80:	18bf9f36 	bltu	r3,r2,c002e00 <__alt_data_end+0xfc002e00>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 c002f84:	00000206 	br	c002f90 <HIDMProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
 c002f88:	0005883a 	mov	r2,zero
 c002f8c:	00000706 	br	c002fac <HIDMProbe+0x3f4>
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
 c002f90:	e0fff90b 	ldhu	r3,-28(fp)
 c002f94:	008300b4 	movhi	r2,3074
 c002f98:	10976404 	addi	r2,r2,23952
 c002f9c:	1885883a 	add	r2,r3,r2
 c002fa0:	e0fffb17 	ldw	r3,-20(fp)
 c002fa4:	18bf4736 	bltu	r3,r2,c002cc4 <__alt_data_end+0xfc002cc4>
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 c002fa8:	0005883a 	mov	r2,zero
}
 c002fac:	e037883a 	mov	sp,fp
 c002fb0:	dfc00117 	ldw	ra,4(sp)
 c002fb4:	df000017 	ldw	fp,0(sp)
 c002fb8:	dec00204 	addi	sp,sp,8
 c002fbc:	f800283a 	ret

0c002fc0 <HIDKProbe>:
/* HID Keyboard probe. Called from USB state machine.                           */
/* assumes configuration length is less than 256 bytes                          */
/* looks for Class:03, Subclass: 01, Protocol: 01 in interface descriptor       */
/* sets keyboard in boot protocol                                               */
/* assumes single configuration, single endpoint, and interface configuration 0 */
BOOL HIDKProbe(BYTE addr, DWORD flags) {
 c002fc0:	defff204 	addi	sp,sp,-56
 c002fc4:	dfc00d15 	stw	ra,52(sp)
 c002fc8:	df000c15 	stw	fp,48(sp)
 c002fcc:	df000c04 	addi	fp,sp,48
 c002fd0:	2005883a 	mov	r2,r4
 c002fd4:	e17fff15 	stw	r5,-4(fp)
 c002fd8:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 c002fdc:	008300b4 	movhi	r2,3074
 c002fe0:	10976404 	addi	r2,r2,23952
 c002fe4:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
 c002fe8:	008300b4 	movhi	r2,3074
 c002fec:	10976404 	addi	r2,r2,23952
 c002ff0:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 c002ff4:	e0fffe03 	ldbu	r3,-8(fp)
 c002ff8:	008300b4 	movhi	r2,3074
 c002ffc:	10976404 	addi	r2,r2,23952
 c003000:	d8800415 	stw	r2,16(sp)
 c003004:	00800244 	movi	r2,9
 c003008:	d8800315 	stw	r2,12(sp)
 c00300c:	d8000215 	stw	zero,8(sp)
 c003010:	00800084 	movi	r2,2
 c003014:	d8800115 	stw	r2,4(sp)
 c003018:	d8000015 	stw	zero,0(sp)
 c00301c:	01c00184 	movi	r7,6
 c003020:	01802004 	movi	r6,128
 c003024:	000b883a 	mov	r5,zero
 c003028:	1809883a 	mov	r4,r3
 c00302c:	c003d940 	call	c003d94 <XferCtrlReq>
 c003030:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling           
 c003034:	e0bffc03 	ldbu	r2,-16(fp)
 c003038:	10000226 	beq	r2,zero,c003044 <HIDKProbe+0x84>
		return (FALSE);
 c00303c:	0005883a 	mov	r2,zero
 c003040:	0000dc06 	br	c0033b4 <HIDKProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 c003044:	e0bffa17 	ldw	r2,-24(fp)
 c003048:	1080008b 	ldhu	r2,2(r2)
 c00304c:	10bfffcc 	andi	r2,r2,65535
 c003050:	10804070 	cmpltui	r2,r2,257
 c003054:	1000031e 	bne	r2,zero,c003064 <HIDKProbe+0xa4>
		total_length = 256;
 c003058:	00804004 	movi	r2,256
 c00305c:	e0bff90d 	sth	r2,-28(fp)
 c003060:	00000306 	br	c003070 <HIDKProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 c003064:	e0bffa17 	ldw	r2,-24(fp)
 c003068:	1080008b 	ldhu	r2,2(r2)
 c00306c:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 c003070:	e13ffe03 	ldbu	r4,-8(fp)
 c003074:	e0fff90b 	ldhu	r3,-28(fp)
 c003078:	008300b4 	movhi	r2,3074
 c00307c:	10976404 	addi	r2,r2,23952
 c003080:	d8800415 	stw	r2,16(sp)
 c003084:	d8c00315 	stw	r3,12(sp)
 c003088:	d8000215 	stw	zero,8(sp)
 c00308c:	00800084 	movi	r2,2
 c003090:	d8800115 	stw	r2,4(sp)
 c003094:	d8000015 	stw	zero,0(sp)
 c003098:	01c00184 	movi	r7,6
 c00309c:	01802004 	movi	r6,128
 c0030a0:	000b883a 	mov	r5,zero
 c0030a4:	c003d940 	call	c003d94 <XferCtrlReq>
 c0030a8:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 c0030ac:	e0bffc03 	ldbu	r2,-16(fp)
 c0030b0:	10000226 	beq	r2,zero,c0030bc <HIDKProbe+0xfc>
		return (FALSE);
 c0030b4:	0005883a 	mov	r2,zero
 c0030b8:	0000be06 	br	c0033b4 <HIDKProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
 c0030bc:	e0bffa17 	ldw	r2,-24(fp)
 c0030c0:	10800143 	ldbu	r2,5(r2)
 c0030c4:	e0bffc45 	stb	r2,-15(fp)
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 c0030c8:	0000b306 	br	c003398 <HIDKProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) { //skip to the next descriptor
 c0030cc:	e0bffa17 	ldw	r2,-24(fp)
 c0030d0:	10800043 	ldbu	r2,1(r2)
 c0030d4:	10803fcc 	andi	r2,r2,255
 c0030d8:	10800120 	cmpeqi	r2,r2,4
 c0030dc:	1000091e 	bne	r2,zero,c003104 <HIDKProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 c0030e0:	e0bffa17 	ldw	r2,-24(fp)
 c0030e4:	10800003 	ldbu	r2,0(r2)
 c0030e8:	10803fcc 	andi	r2,r2,255
 c0030ec:	e0fffb17 	ldw	r3,-20(fp)
 c0030f0:	1885883a 	add	r2,r3,r2
 c0030f4:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 c0030f8:	e0bffb17 	ldw	r2,-20(fp)
 c0030fc:	e0bffa15 	stw	r2,-24(fp)
 c003100:	0000a506 	br	c003398 <HIDKProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 c003104:	e0bffa17 	ldw	r2,-24(fp)
 c003108:	10800143 	ldbu	r2,5(r2)
 c00310c:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 c003110:	e0bffa17 	ldw	r2,-24(fp)
 c003114:	10800183 	ldbu	r2,6(r2)
 c003118:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 c00311c:	e0bffa17 	ldw	r2,-24(fp)
 c003120:	108001c3 	ldbu	r2,7(r2)
 c003124:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 c003128:	e0bffc83 	ldbu	r2,-14(fp)
 c00312c:	108000d8 	cmpnei	r2,r2,3
 c003130:	1000971e 	bne	r2,zero,c003390 <HIDKProbe+0x3d0>
 c003134:	e0bffcc3 	ldbu	r2,-13(fp)
 c003138:	10800058 	cmpnei	r2,r2,1
 c00313c:	1000941e 	bne	r2,zero,c003390 <HIDKProbe+0x3d0>
					&& protocol == HID_PROTOCOL_KEYBOARD) {
 c003140:	e0bffd03 	ldbu	r2,-12(fp)
 c003144:	10800058 	cmpnei	r2,r2,1
 c003148:	1000911e 	bne	r2,zero,c003390 <HIDKProbe+0x3d0>
				//detected a keyboard
				devtable[addr].devclass = HID_K;             //fill device class
 c00314c:	e0fffe03 	ldbu	r3,-8(fp)
 c003150:	008300b4 	movhi	r2,3074
 c003154:	1097a404 	addi	r2,r2,24208
 c003158:	180690fa 	slli	r3,r3,3
 c00315c:	10c5883a 	add	r2,r2,r3
 c003160:	10800104 	addi	r2,r2,4
 c003164:	00c00044 	movi	r3,1
 c003168:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
 c00316c:	e0fffe03 	ldbu	r3,-8(fp)
 c003170:	008300b4 	movhi	r2,3074
 c003174:	1097a404 	addi	r2,r2,24208
 c003178:	180690fa 	slli	r3,r3,3
 c00317c:	10c5883a 	add	r2,r2,r3
 c003180:	10800017 	ldw	r2,0(r2)
 c003184:	1080008b 	ldhu	r2,2(r2)
 c003188:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
 c00318c:	c0033c80 	call	c0033c8 <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 c003190:	e0fffe03 	ldbu	r3,-8(fp)
 c003194:	008300b4 	movhi	r2,3074
 c003198:	1097a404 	addi	r2,r2,24208
 c00319c:	180690fa 	slli	r3,r3,3
 c0031a0:	10c7883a 	add	r3,r2,r3
 c0031a4:	008300b4 	movhi	r2,3074
 c0031a8:	10b1d004 	addi	r2,r2,-14528
 c0031ac:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
 c0031b0:	e0fffe03 	ldbu	r3,-8(fp)
 c0031b4:	008300b4 	movhi	r2,3074
 c0031b8:	1097a404 	addi	r2,r2,24208
 c0031bc:	180690fa 	slli	r3,r3,3
 c0031c0:	10c5883a 	add	r2,r2,r3
 c0031c4:	10800017 	ldw	r2,0(r2)
 c0031c8:	e0fffd43 	ldbu	r3,-11(fp)
 c0031cc:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
 c0031d0:	e0bffa17 	ldw	r2,-24(fp)
 c0031d4:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_K;             //fill device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
				hid_device.interface =
 c0031d8:	d0a79f45 	stb	r2,-24963(gp)
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
 c0031dc:	e0bffe03 	ldbu	r2,-8(fp)
 c0031e0:	d0a79f05 	stb	r2,-24964(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
 c0031e4:	e0bffa17 	ldw	r2,-24(fp)
 c0031e8:	10800003 	ldbu	r2,0(r2)
 c0031ec:	10803fcc 	andi	r2,r2,255
 c0031f0:	e0fffb17 	ldw	r3,-20(fp)
 c0031f4:	1885883a 	add	r2,r3,r2
 c0031f8:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 c0031fc:	e0bffb17 	ldw	r2,-20(fp)
 c003200:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
 c003204:	00005b06 	br	c003374 <HIDKProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
 c003208:	e0bffa17 	ldw	r2,-24(fp)
 c00320c:	10800043 	ldbu	r2,1(r2)
 c003210:	10803fcc 	andi	r2,r2,255
 c003214:	10800160 	cmpeqi	r2,r2,5
 c003218:	1000091e 	bne	r2,zero,c003240 <HIDKProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 c00321c:	e0bffa17 	ldw	r2,-24(fp)
 c003220:	10800003 	ldbu	r2,0(r2)
 c003224:	10803fcc 	andi	r2,r2,255
 c003228:	e0fffb17 	ldw	r3,-20(fp)
 c00322c:	1885883a 	add	r2,r3,r2
 c003230:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 c003234:	e0bffb17 	ldw	r2,-20(fp)
 c003238:	e0bffa15 	stw	r2,-24(fp)
 c00323c:	00004d06 	br	c003374 <HIDKProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 c003240:	e0fffe03 	ldbu	r3,-8(fp)
 c003244:	008300b4 	movhi	r2,3074
 c003248:	1097a404 	addi	r2,r2,24208
 c00324c:	180690fa 	slli	r3,r3,3
 c003250:	10c5883a 	add	r2,r2,r3
 c003254:	10800017 	ldw	r2,0(r2)
 c003258:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 c00325c:	e0fffa17 	ldw	r3,-24(fp)
 c003260:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 c003264:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 c003268:	e0fffe03 	ldbu	r3,-8(fp)
 c00326c:	008300b4 	movhi	r2,3074
 c003270:	1097a404 	addi	r2,r2,24208
 c003274:	180690fa 	slli	r3,r3,3
 c003278:	10c5883a 	add	r2,r2,r3
 c00327c:	10800017 	ldw	r2,0(r2)
 c003280:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 c003284:	e0fffa17 	ldw	r3,-24(fp)
 c003288:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 c00328c:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 c003290:	e0fffe03 	ldbu	r3,-8(fp)
 c003294:	008300b4 	movhi	r2,3074
 c003298:	1097a404 	addi	r2,r2,24208
 c00329c:	180690fa 	slli	r3,r3,3
 c0032a0:	10c5883a 	add	r2,r2,r3
 c0032a4:	10800017 	ldw	r2,0(r2)
 c0032a8:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 c0032ac:	e0fffa17 	ldw	r3,-24(fp)
 c0032b0:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 c0032b4:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 c0032b8:	e0fffe03 	ldbu	r3,-8(fp)
 c0032bc:	008300b4 	movhi	r2,3074
 c0032c0:	1097a404 	addi	r2,r2,24208
 c0032c4:	180690fa 	slli	r3,r3,3
 c0032c8:	10c5883a 	add	r2,r2,r3
 c0032cc:	10800017 	ldw	r2,0(r2)
 c0032d0:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 c0032d4:	e0fffa17 	ldw	r3,-24(fp)
 c0032d8:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 c0032dc:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 c0032e0:	e0fffe03 	ldbu	r3,-8(fp)
 c0032e4:	e0bffc43 	ldbu	r2,-15(fp)
 c0032e8:	d8000415 	stw	zero,16(sp)
 c0032ec:	d8000315 	stw	zero,12(sp)
 c0032f0:	d8000215 	stw	zero,8(sp)
 c0032f4:	d8000115 	stw	zero,4(sp)
 c0032f8:	d8800015 	stw	r2,0(sp)
 c0032fc:	01c00244 	movi	r7,9
 c003300:	000d883a 	mov	r6,zero
 c003304:	000b883a 	mov	r5,zero
 c003308:	1809883a 	mov	r4,r3
 c00330c:	c003d940 	call	c003d94 <XferCtrlReq>
 c003310:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
 c003314:	e0bffc03 	ldbu	r2,-16(fp)
 c003318:	10000226 	beq	r2,zero,c003324 <HIDKProbe+0x364>
							return (FALSE);
 c00331c:	0005883a 	mov	r2,zero
 c003320:	00002406 	br	c0033b4 <HIDKProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 c003324:	e0fffe03 	ldbu	r3,-8(fp)
 c003328:	d0a79f43 	ldbu	r2,-24963(gp)
 c00332c:	10803fcc 	andi	r2,r2,255
 c003330:	d8000415 	stw	zero,16(sp)
 c003334:	d8000315 	stw	zero,12(sp)
 c003338:	d8800215 	stw	r2,8(sp)
 c00333c:	d8000115 	stw	zero,4(sp)
 c003340:	d8000015 	stw	zero,0(sp)
 c003344:	01c002c4 	movi	r7,11
 c003348:	01800844 	movi	r6,33
 c00334c:	000b883a 	mov	r5,zero
 c003350:	1809883a 	mov	r4,r3
 c003354:	c003d940 	call	c003d94 <XferCtrlReq>
 c003358:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 c00335c:	e0bffc03 	ldbu	r2,-16(fp)
 c003360:	10000226 	beq	r2,zero,c00336c <HIDKProbe+0x3ac>
							return (FALSE);
 c003364:	0005883a 	mov	r2,zero
 c003368:	00001206 	br	c0033b4 <HIDKProbe+0x3f4>
						} else {
							return (TRUE);
 c00336c:	00800044 	movi	r2,1
 c003370:	00001006 	br	c0033b4 <HIDKProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
 c003374:	e0fff90b 	ldhu	r3,-28(fp)
 c003378:	008300b4 	movhi	r2,3074
 c00337c:	10976404 	addi	r2,r2,23952
 c003380:	1885883a 	add	r2,r3,r2
 c003384:	e0fffb17 	ldw	r3,-20(fp)
 c003388:	18bf9f36 	bltu	r3,r2,c003208 <__alt_data_end+0xfc003208>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 c00338c:	00000206 	br	c003398 <HIDKProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
 c003390:	0005883a 	mov	r2,zero
 c003394:	00000706 	br	c0033b4 <HIDKProbe+0x3f4>
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
	if (rcode) {   //error handling
		return (FALSE);
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 c003398:	e0fff90b 	ldhu	r3,-28(fp)
 c00339c:	008300b4 	movhi	r2,3074
 c0033a0:	10976404 	addi	r2,r2,23952
 c0033a4:	1885883a 	add	r2,r3,r2
 c0033a8:	e0fffb17 	ldw	r3,-20(fp)
 c0033ac:	18bf4736 	bltu	r3,r2,c0030cc <__alt_data_end+0xfc0030cc>
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 c0033b0:	0005883a 	mov	r2,zero
}
 c0033b4:	e037883a 	mov	sp,fp
 c0033b8:	dfc00117 	ldw	ra,4(sp)
 c0033bc:	df000017 	ldw	fp,0(sp)
 c0033c0:	dec00204 	addi	sp,sp,8
 c0033c4:	f800283a 	ret

0c0033c8 <HID_init>:
/* HID data structures initialization */
void HID_init(void) {
 c0033c8:	deffff04 	addi	sp,sp,-4
 c0033cc:	df000015 	stw	fp,0(sp)
 c0033d0:	d839883a 	mov	fp,sp
	hid_ep[1].sndToggle = bmSNDTOG0;
 c0033d4:	008300b4 	movhi	r2,3074
 c0033d8:	10b1d004 	addi	r2,r2,-14528
 c0033dc:	00c01004 	movi	r3,64
 c0033e0:	10c00345 	stb	r3,13(r2)
	hid_ep[1].rcvToggle = bmRCVTOG0;
 c0033e4:	008300b4 	movhi	r2,3074
 c0033e8:	10b1d004 	addi	r2,r2,-14528
 c0033ec:	00c00404 	movi	r3,16
 c0033f0:	10c00385 	stb	r3,14(r2)
}
 c0033f4:	0001883a 	nop
 c0033f8:	e037883a 	mov	sp,fp
 c0033fc:	df000017 	ldw	fp,0(sp)
 c003400:	dec00104 	addi	sp,sp,4
 c003404:	f800283a 	ret

0c003408 <mousePoll>:
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
 c003408:	defffb04 	addi	sp,sp,-20
 c00340c:	dfc00415 	stw	ra,16(sp)
 c003410:	df000315 	stw	fp,12(sp)
 c003414:	df000304 	addi	fp,sp,12
 c003418:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 c00341c:	d0a79f03 	ldbu	r2,-24964(gp)
 c003420:	10803fcc 	andi	r2,r2,255
 c003424:	100b883a 	mov	r5,r2
 c003428:	01003804 	movi	r4,224
 c00342c:	c0035e40 	call	c0035e4 <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 c003430:	d0a79f03 	ldbu	r2,-24964(gp)
 c003434:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 c003438:	d0a79f03 	ldbu	r2,-24964(gp)
 c00343c:	10c03fcc 	andi	r3,r2,255
 c003440:	008300b4 	movhi	r2,3074
 c003444:	1097a404 	addi	r2,r2,24208
 c003448:	180690fa 	slli	r3,r3,3
 c00344c:	10c5883a 	add	r2,r2,r3
 c003450:	10800017 	ldw	r2,0(r2)
 c003454:	10800204 	addi	r2,r2,8
 c003458:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 c00345c:	10803fcc 	andi	r2,r2,255
 c003460:	d8800015 	stw	r2,0(sp)
 c003464:	e1ffff17 	ldw	r7,-4(fp)
 c003468:	01800204 	movi	r6,8
 c00346c:	01400044 	movi	r5,1
 c003470:	c0041b80 	call	c0041b8 <XferInTransfer>
 c003474:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	return (rcode);
 c003478:	e0bffe03 	ldbu	r2,-8(fp)
}
 c00347c:	e037883a 	mov	sp,fp
 c003480:	dfc00117 	ldw	ra,4(sp)
 c003484:	df000017 	ldw	fp,0(sp)
 c003488:	dec00204 	addi	sp,sp,8
 c00348c:	f800283a 	ret

0c003490 <kbdPoll>:
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
 c003490:	defffb04 	addi	sp,sp,-20
 c003494:	dfc00415 	stw	ra,16(sp)
 c003498:	df000315 	stw	fp,12(sp)
 c00349c:	df000304 	addi	fp,sp,12
 c0034a0:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 c0034a4:	d0a79f03 	ldbu	r2,-24964(gp)
 c0034a8:	10803fcc 	andi	r2,r2,255
 c0034ac:	100b883a 	mov	r5,r2
 c0034b0:	01003804 	movi	r4,224
 c0034b4:	c0035e40 	call	c0035e4 <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 c0034b8:	d0a79f03 	ldbu	r2,-24964(gp)
 c0034bc:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 c0034c0:	d0a79f03 	ldbu	r2,-24964(gp)
 c0034c4:	10c03fcc 	andi	r3,r2,255
 c0034c8:	008300b4 	movhi	r2,3074
 c0034cc:	1097a404 	addi	r2,r2,24208
 c0034d0:	180690fa 	slli	r3,r3,3
 c0034d4:	10c5883a 	add	r2,r2,r3
 c0034d8:	10800017 	ldw	r2,0(r2)
 c0034dc:	10800204 	addi	r2,r2,8
 c0034e0:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 c0034e4:	10803fcc 	andi	r2,r2,255
 c0034e8:	d8800015 	stw	r2,0(sp)
 c0034ec:	e1ffff17 	ldw	r7,-4(fp)
 c0034f0:	01800204 	movi	r6,8
 c0034f4:	01400044 	movi	r5,1
 c0034f8:	c0041b80 	call	c0041b8 <XferInTransfer>
 c0034fc:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	return (rcode);
 c003500:	e0bffe03 	ldbu	r2,-8(fp)
}
 c003504:	e037883a 	mov	sp,fp
 c003508:	dfc00117 	ldw	ra,4(sp)
 c00350c:	df000017 	ldw	fp,0(sp)
 c003510:	dec00204 	addi	sp,sp,8
 c003514:	f800283a 	ret

0c003518 <HIDMEventHandler>:
BOOL HIDMEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 c003518:	defffb04 	addi	sp,sp,-20
 c00351c:	df000415 	stw	fp,16(sp)
 c003520:	df000404 	addi	fp,sp,16
 c003524:	2007883a 	mov	r3,r4
 c003528:	2805883a 	mov	r2,r5
 c00352c:	e1bffe15 	stw	r6,-8(fp)
 c003530:	e1ffff15 	stw	r7,-4(fp)
 c003534:	e0fffc05 	stb	r3,-16(fp)
 c003538:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
 c00353c:	0005883a 	mov	r2,zero
}
 c003540:	e037883a 	mov	sp,fp
 c003544:	df000017 	ldw	fp,0(sp)
 c003548:	dec00104 	addi	sp,sp,4
 c00354c:	f800283a 	ret

0c003550 <HIDKEventHandler>:
BOOL HIDKEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 c003550:	defffb04 	addi	sp,sp,-20
 c003554:	df000415 	stw	fp,16(sp)
 c003558:	df000404 	addi	fp,sp,16
 c00355c:	2007883a 	mov	r3,r4
 c003560:	2805883a 	mov	r2,r5
 c003564:	e1bffe15 	stw	r6,-8(fp)
 c003568:	e1ffff15 	stw	r7,-4(fp)
 c00356c:	e0fffc05 	stb	r3,-16(fp)
 c003570:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
 c003574:	0005883a 	mov	r2,zero
}
 c003578:	e037883a 	mov	sp,fp
 c00357c:	df000017 	ldw	fp,0(sp)
 c003580:	dec00104 	addi	sp,sp,4
 c003584:	f800283a 	ret

0c003588 <SPI_init>:
//variables and data structures
//External variables
extern BYTE usb_task_state;

/* Functions    */
void SPI_init(BYTE sync_mode, BYTE bus_mode, BYTE smp_phase) {
 c003588:	defffc04 	addi	sp,sp,-16
 c00358c:	df000315 	stw	fp,12(sp)
 c003590:	df000304 	addi	fp,sp,12
 c003594:	2807883a 	mov	r3,r5
 c003598:	3005883a 	mov	r2,r6
 c00359c:	e13ffd05 	stb	r4,-12(fp)
 c0035a0:	e0fffe05 	stb	r3,-8(fp)
 c0035a4:	e0bfff05 	stb	r2,-4(fp)
	//Don't need to initialize SPI port, already ready to go with BSP
}
 c0035a8:	0001883a 	nop
 c0035ac:	e037883a 	mov	sp,fp
 c0035b0:	df000017 	ldw	fp,0(sp)
 c0035b4:	dec00104 	addi	sp,sp,4
 c0035b8:	f800283a 	ret

0c0035bc <SPI_wr>:

//writes single byte to MAX3421E via SPI, simultanously reads status register and returns it
BYTE SPI_wr(BYTE data) {
 c0035bc:	defffe04 	addi	sp,sp,-8
 c0035c0:	df000115 	stw	fp,4(sp)
 c0035c4:	df000104 	addi	fp,sp,4
 c0035c8:	2005883a 	mov	r2,r4
 c0035cc:	e0bfff05 	stb	r2,-4(fp)
	//This function is never used by the code, so you do not need to fill it in
}
 c0035d0:	0001883a 	nop
 c0035d4:	e037883a 	mov	sp,fp
 c0035d8:	df000017 	ldw	fp,0(sp)
 c0035dc:	dec00104 	addi	sp,sp,4
 c0035e0:	f800283a 	ret

0c0035e4 <MAXreg_wr>:
//writes register to MAX3421E via SPI
void MAXreg_wr(BYTE reg, BYTE val) {
 c0035e4:	defff704 	addi	sp,sp,-36
 c0035e8:	dfc00815 	stw	ra,32(sp)
 c0035ec:	df000715 	stw	fp,28(sp)
 c0035f0:	df000704 	addi	fp,sp,28
 c0035f4:	2007883a 	mov	r3,r4
 c0035f8:	2805883a 	mov	r2,r5
 c0035fc:	e0fffe05 	stb	r3,-8(fp)
 c003600:	e0bfff05 	stb	r2,-4(fp)
	//write val via SPI
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	BYTE array[2];
	array[0]=(reg+2);
 c003604:	e0bffe03 	ldbu	r2,-8(fp)
 c003608:	10800084 	addi	r2,r2,2
 c00360c:	e0bffd05 	stb	r2,-12(fp)
	array[1]=val;
 c003610:	e0bfff03 	ldbu	r2,-4(fp)
 c003614:	e0bffd45 	stb	r2,-11(fp)
	int retura=alt_avalon_spi_command(0xc0,0,2,array,0,0,0);
 c003618:	e0bffd04 	addi	r2,fp,-12
 c00361c:	d8000215 	stw	zero,8(sp)
 c003620:	d8000115 	stw	zero,4(sp)
 c003624:	d8000015 	stw	zero,0(sp)
 c003628:	100f883a 	mov	r7,r2
 c00362c:	01800084 	movi	r6,2
 c003630:	000b883a 	mov	r5,zero
 c003634:	01003004 	movi	r4,192
 c003638:	c016eec0 	call	c016eec <alt_avalon_spi_command>
 c00363c:	e0bffc15 	stw	r2,-16(fp)
			if (retura<0){alt_printf("errpr\n");}
 c003640:	e0bffc17 	ldw	r2,-16(fp)
 c003644:	1000030e 	bge	r2,zero,c003654 <MAXreg_wr+0x70>
 c003648:	010300b4 	movhi	r4,3074
 c00364c:	2121b504 	addi	r4,r4,-31020
 c003650:	c015bc80 	call	c015bc8 <alt_printf>


}
 c003654:	0001883a 	nop
 c003658:	e037883a 	mov	sp,fp
 c00365c:	dfc00117 	ldw	ra,4(sp)
 c003660:	df000017 	ldw	fp,0(sp)
 c003664:	dec00204 	addi	sp,sp,8
 c003668:	f800283a 	ret

0c00366c <MAXbytes_wr>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_wr(BYTE reg, BYTE nbytes, BYTE* data) {
 c00366c:	defff304 	addi	sp,sp,-52
 c003670:	dfc00c15 	stw	ra,48(sp)
 c003674:	df000b15 	stw	fp,44(sp)
 c003678:	dc000a15 	stw	r16,40(sp)
 c00367c:	df000b04 	addi	fp,sp,44
 c003680:	201b883a 	mov	r13,r4
 c003684:	2809883a 	mov	r4,r5
 c003688:	e1bffe15 	stw	r6,-8(fp)
 c00368c:	e37ffc05 	stb	r13,-16(fp)
 c003690:	e13ffd05 	stb	r4,-12(fp)
 c003694:	d809883a 	mov	r4,sp
 c003698:	2021883a 	mov	r16,r4
	//write data[n] via SPI, where n goes from 0 to nbytes-1
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0  print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	BYTE array[nbytes+1];
 c00369c:	e13ffd03 	ldbu	r4,-12(fp)
 c0036a0:	21000044 	addi	r4,r4,1
 c0036a4:	217fffc4 	addi	r5,r4,-1
 c0036a8:	e17ff915 	stw	r5,-28(fp)
 c0036ac:	200b883a 	mov	r5,r4
 c0036b0:	2817883a 	mov	r11,r5
 c0036b4:	0019883a 	mov	r12,zero
 c0036b8:	580ad77a 	srli	r5,r11,29
 c0036bc:	601090fa 	slli	r8,r12,3
 c0036c0:	2a10b03a 	or	r8,r5,r8
 c0036c4:	580e90fa 	slli	r7,r11,3
 c0036c8:	200b883a 	mov	r5,r4
 c0036cc:	2813883a 	mov	r9,r5
 c0036d0:	0015883a 	mov	r10,zero
 c0036d4:	480ad77a 	srli	r5,r9,29
 c0036d8:	500690fa 	slli	r3,r10,3
 c0036dc:	28c6b03a 	or	r3,r5,r3
 c0036e0:	480490fa 	slli	r2,r9,3
 c0036e4:	2005883a 	mov	r2,r4
 c0036e8:	108000c4 	addi	r2,r2,3
 c0036ec:	1004d0ba 	srli	r2,r2,2
 c0036f0:	1085883a 	add	r2,r2,r2
 c0036f4:	1085883a 	add	r2,r2,r2
 c0036f8:	d8b7c83a 	sub	sp,sp,r2
 c0036fc:	d8800304 	addi	r2,sp,12
 c003700:	1005883a 	mov	r2,r2
 c003704:	e0bffa15 	stw	r2,-24(fp)
	array[0]=reg+2;
 c003708:	e0bffc03 	ldbu	r2,-16(fp)
 c00370c:	10800084 	addi	r2,r2,2
 c003710:	1007883a 	mov	r3,r2
 c003714:	e0bffa17 	ldw	r2,-24(fp)
 c003718:	10c00005 	stb	r3,0(r2)
	for (int i=1;i<=nbytes;i++){
 c00371c:	00800044 	movi	r2,1
 c003720:	e0bff815 	stw	r2,-32(fp)
 c003724:	00000c06 	br	c003758 <MAXbytes_wr+0xec>
		array[i]=data[i-1];
 c003728:	e0bff817 	ldw	r2,-32(fp)
 c00372c:	10bfffc4 	addi	r2,r2,-1
 c003730:	e0fffe17 	ldw	r3,-8(fp)
 c003734:	1885883a 	add	r2,r3,r2
 c003738:	10c00003 	ldbu	r3,0(r2)
 c00373c:	e13ffa17 	ldw	r4,-24(fp)
 c003740:	e0bff817 	ldw	r2,-32(fp)
 c003744:	2085883a 	add	r2,r4,r2
 c003748:	10c00005 	stb	r3,0(r2)
	//if return code < 0  print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	BYTE array[nbytes+1];
	array[0]=reg+2;
	for (int i=1;i<=nbytes;i++){
 c00374c:	e0bff817 	ldw	r2,-32(fp)
 c003750:	10800044 	addi	r2,r2,1
 c003754:	e0bff815 	stw	r2,-32(fp)
 c003758:	e0fffd03 	ldbu	r3,-12(fp)
 c00375c:	e0bff817 	ldw	r2,-32(fp)
 c003760:	18bff10e 	bge	r3,r2,c003728 <__alt_data_end+0xfc003728>
		array[i]=data[i-1];
	}
	int retura=alt_avalon_spi_command(0xc0,0,nbytes+1,array,0,0,0);
 c003764:	e0bffd03 	ldbu	r2,-12(fp)
 c003768:	10800044 	addi	r2,r2,1
 c00376c:	1007883a 	mov	r3,r2
 c003770:	e0bffa17 	ldw	r2,-24(fp)
 c003774:	d8000215 	stw	zero,8(sp)
 c003778:	d8000115 	stw	zero,4(sp)
 c00377c:	d8000015 	stw	zero,0(sp)
 c003780:	100f883a 	mov	r7,r2
 c003784:	180d883a 	mov	r6,r3
 c003788:	000b883a 	mov	r5,zero
 c00378c:	01003004 	movi	r4,192
 c003790:	c016eec0 	call	c016eec <alt_avalon_spi_command>
 c003794:	e0bffb15 	stw	r2,-20(fp)
				if (retura<0){alt_printf("errpr\n");}
 c003798:	e0bffb17 	ldw	r2,-20(fp)
 c00379c:	1000030e 	bge	r2,zero,c0037ac <MAXbytes_wr+0x140>
 c0037a0:	010300b4 	movhi	r4,3074
 c0037a4:	2121b504 	addi	r4,r4,-31020
 c0037a8:	c015bc80 	call	c015bc8 <alt_printf>
				return (data+nbytes);
 c0037ac:	e0bffd03 	ldbu	r2,-12(fp)
 c0037b0:	e0fffe17 	ldw	r3,-8(fp)
 c0037b4:	1885883a 	add	r2,r3,r2
 c0037b8:	8037883a 	mov	sp,r16
}
 c0037bc:	e6ffff04 	addi	sp,fp,-4
 c0037c0:	dfc00217 	ldw	ra,8(sp)
 c0037c4:	df000117 	ldw	fp,4(sp)
 c0037c8:	dc000017 	ldw	r16,0(sp)
 c0037cc:	dec00304 	addi	sp,sp,12
 c0037d0:	f800283a 	ret

0c0037d4 <MAXreg_rd>:

//reads register from MAX3421E via SPI
BYTE MAXreg_rd(BYTE reg) {
 c0037d4:	defff804 	addi	sp,sp,-32
 c0037d8:	dfc00715 	stw	ra,28(sp)
 c0037dc:	df000615 	stw	fp,24(sp)
 c0037e0:	df000604 	addi	fp,sp,24
 c0037e4:	2005883a 	mov	r2,r4
 c0037e8:	e0bfff05 	stb	r2,-4(fp)
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return val
BYTE val;
	int retura=alt_avalon_spi_command(0xc0,0,1,&reg,1,&val,0);
 c0037ec:	e0ffff04 	addi	r3,fp,-4
 c0037f0:	d8000215 	stw	zero,8(sp)
 c0037f4:	e0bffe04 	addi	r2,fp,-8
 c0037f8:	d8800115 	stw	r2,4(sp)
 c0037fc:	00800044 	movi	r2,1
 c003800:	d8800015 	stw	r2,0(sp)
 c003804:	180f883a 	mov	r7,r3
 c003808:	01800044 	movi	r6,1
 c00380c:	000b883a 	mov	r5,zero
 c003810:	01003004 	movi	r4,192
 c003814:	c016eec0 	call	c016eec <alt_avalon_spi_command>
 c003818:	e0bffd15 	stw	r2,-12(fp)
	if (retura<0){alt_printf("errpr\n");}
 c00381c:	e0bffd17 	ldw	r2,-12(fp)
 c003820:	1000030e 	bge	r2,zero,c003830 <MAXreg_rd+0x5c>
 c003824:	010300b4 	movhi	r4,3074
 c003828:	2121b504 	addi	r4,r4,-31020
 c00382c:	c015bc80 	call	c015bc8 <alt_printf>
	return val;
 c003830:	e0bffe03 	ldbu	r2,-8(fp)

}
 c003834:	e037883a 	mov	sp,fp
 c003838:	dfc00117 	ldw	ra,4(sp)
 c00383c:	df000017 	ldw	fp,0(sp)
 c003840:	dec00204 	addi	sp,sp,8
 c003844:	f800283a 	ret

0c003848 <MAXbytes_rd>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_rd(BYTE reg, BYTE nbytes, BYTE* data) {
 c003848:	defff404 	addi	sp,sp,-48
 c00384c:	dfc00b15 	stw	ra,44(sp)
 c003850:	df000a15 	stw	fp,40(sp)
 c003854:	dc000915 	stw	r16,36(sp)
 c003858:	df000a04 	addi	fp,sp,40
 c00385c:	201b883a 	mov	r13,r4
 c003860:	2809883a 	mov	r4,r5
 c003864:	e1bffe15 	stw	r6,-8(fp)
 c003868:	e37ffc05 	stb	r13,-16(fp)
 c00386c:	e13ffd05 	stb	r4,-12(fp)
 c003870:	d809883a 	mov	r4,sp
 c003874:	2021883a 	mov	r16,r4
	//read data[n] from SPI, where n goes from 0 to nbytes-1
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	BYTE array[nbytes];
 c003878:	e13ffd03 	ldbu	r4,-12(fp)
 c00387c:	21403fcc 	andi	r5,r4,255
 c003880:	297fffc4 	addi	r5,r5,-1
 c003884:	e17ff915 	stw	r5,-28(fp)
 c003888:	21403fcc 	andi	r5,r4,255
 c00388c:	2817883a 	mov	r11,r5
 c003890:	0019883a 	mov	r12,zero
 c003894:	580ad77a 	srli	r5,r11,29
 c003898:	601090fa 	slli	r8,r12,3
 c00389c:	2a10b03a 	or	r8,r5,r8
 c0038a0:	580e90fa 	slli	r7,r11,3
 c0038a4:	21403fcc 	andi	r5,r4,255
 c0038a8:	2813883a 	mov	r9,r5
 c0038ac:	0015883a 	mov	r10,zero
 c0038b0:	480ad77a 	srli	r5,r9,29
 c0038b4:	500690fa 	slli	r3,r10,3
 c0038b8:	28c6b03a 	or	r3,r5,r3
 c0038bc:	480490fa 	slli	r2,r9,3
 c0038c0:	20803fcc 	andi	r2,r4,255
 c0038c4:	108000c4 	addi	r2,r2,3
 c0038c8:	1004d0ba 	srli	r2,r2,2
 c0038cc:	1085883a 	add	r2,r2,r2
 c0038d0:	1085883a 	add	r2,r2,r2
 c0038d4:	d8b7c83a 	sub	sp,sp,r2
 c0038d8:	d8800304 	addi	r2,sp,12
 c0038dc:	1005883a 	mov	r2,r2
 c0038e0:	e0bffa15 	stw	r2,-24(fp)


		int retura=alt_avalon_spi_command(0xc0,0,1,&reg,nbytes,data,0);
 c0038e4:	e0bffd03 	ldbu	r2,-12(fp)
 c0038e8:	e13ffc04 	addi	r4,fp,-16
 c0038ec:	d8000215 	stw	zero,8(sp)
 c0038f0:	e0fffe17 	ldw	r3,-8(fp)
 c0038f4:	d8c00115 	stw	r3,4(sp)
 c0038f8:	d8800015 	stw	r2,0(sp)
 c0038fc:	200f883a 	mov	r7,r4
 c003900:	01800044 	movi	r6,1
 c003904:	000b883a 	mov	r5,zero
 c003908:	01003004 	movi	r4,192
 c00390c:	c016eec0 	call	c016eec <alt_avalon_spi_command>
 c003910:	e0bffb15 	stw	r2,-20(fp)
					if (retura<0){alt_printf("errpr\n");}
 c003914:	e0bffb17 	ldw	r2,-20(fp)
 c003918:	1000030e 	bge	r2,zero,c003928 <MAXbytes_rd+0xe0>
 c00391c:	010300b4 	movhi	r4,3074
 c003920:	2121b504 	addi	r4,r4,-31020
 c003924:	c015bc80 	call	c015bc8 <alt_printf>
					return (data+nbytes);
 c003928:	e0bffd03 	ldbu	r2,-12(fp)
 c00392c:	e0fffe17 	ldw	r3,-8(fp)
 c003930:	1885883a 	add	r2,r3,r2
 c003934:	8037883a 	mov	sp,r16
	}
 c003938:	e6ffff04 	addi	sp,fp,-4
 c00393c:	dfc00217 	ldw	ra,8(sp)
 c003940:	df000117 	ldw	fp,4(sp)
 c003944:	dc000017 	ldw	r16,0(sp)
 c003948:	dec00304 	addi	sp,sp,12
 c00394c:	f800283a 	ret

0c003950 <MAX3421E_reset>:

/* reset MAX3421E using chip reset bit. SPI configuration is not affected   */
void MAX3421E_reset(void) {
 c003950:	defffd04 	addi	sp,sp,-12
 c003954:	dfc00215 	stw	ra,8(sp)
 c003958:	df000115 	stw	fp,4(sp)
 c00395c:	df000104 	addi	fp,sp,4
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
 c003960:	0007883a 	mov	r3,zero
 c003964:	00805804 	movi	r2,352
 c003968:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
 c00396c:	010003f4 	movhi	r4,15
 c003970:	21109004 	addi	r4,r4,16960
 c003974:	c0162480 	call	c016248 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
 c003978:	00c00044 	movi	r3,1
 c00397c:	00805804 	movi	r2,352
 c003980:	10c00035 	stwio	r3,0(r2)
	BYTE tmp = 0;
 c003984:	e03fff05 	stb	zero,-4(fp)
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
 c003988:	01400804 	movi	r5,32
 c00398c:	01001e04 	movi	r4,120
 c003990:	c0035e40 	call	c0035e4 <MAXreg_wr>
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
 c003994:	000b883a 	mov	r5,zero
 c003998:	01001e04 	movi	r4,120
 c00399c:	c0035e40 	call	c0035e4 <MAXreg_wr>
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 c0039a0:	00000806 	br	c0039c4 <MAX3421E_reset+0x74>
		tmp++;                                      //timeout after 256 attempts
 c0039a4:	e0bfff03 	ldbu	r2,-4(fp)
 c0039a8:	10800044 	addi	r2,r2,1
 c0039ac:	e0bfff05 	stb	r2,-4(fp)
		if (tmp == 0) {
 c0039b0:	e0bfff03 	ldbu	r2,-4(fp)
 c0039b4:	1000031e 	bne	r2,zero,c0039c4 <MAX3421E_reset+0x74>
			printf("reset timeout!");
 c0039b8:	010300b4 	movhi	r4,3074
 c0039bc:	2121b704 	addi	r4,r4,-31012
 c0039c0:	c004e380 	call	c004e38 <printf>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	BYTE tmp = 0;
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 c0039c4:	01001a04 	movi	r4,104
 c0039c8:	c0037d40 	call	c0037d4 <MAXreg_rd>
 c0039cc:	10803fcc 	andi	r2,r2,255
 c0039d0:	1080004c 	andi	r2,r2,1
 c0039d4:	103ff326 	beq	r2,zero,c0039a4 <__alt_data_end+0xfc0039a4>
		tmp++;                                      //timeout after 256 attempts
		if (tmp == 0) {
			printf("reset timeout!");
		}
	}
}
 c0039d8:	0001883a 	nop
 c0039dc:	e037883a 	mov	sp,fp
 c0039e0:	dfc00117 	ldw	ra,4(sp)
 c0039e4:	df000017 	ldw	fp,0(sp)
 c0039e8:	dec00204 	addi	sp,sp,8
 c0039ec:	f800283a 	ret

0c0039f0 <Vbus_power>:
/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
BOOL Vbus_power(BOOL action) {
 c0039f0:	defffe04 	addi	sp,sp,-8
 c0039f4:	df000115 	stw	fp,4(sp)
 c0039f8:	df000104 	addi	fp,sp,4
 c0039fc:	e13fff15 	stw	r4,-4(fp)
	// power on/off successful
	return (1);
 c003a00:	00800044 	movi	r2,1
}
 c003a04:	e037883a 	mov	sp,fp
 c003a08:	df000017 	ldw	fp,0(sp)
 c003a0c:	dec00104 	addi	sp,sp,4
 c003a10:	f800283a 	ret

0c003a14 <MAX_busprobe>:

/* probe bus to determine device presense and speed */
void MAX_busprobe(void) {
 c003a14:	defffd04 	addi	sp,sp,-12
 c003a18:	dfc00215 	stw	ra,8(sp)
 c003a1c:	df000115 	stw	fp,4(sp)
 c003a20:	df000104 	addi	fp,sp,4
	BYTE bus_sample;

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
 c003a24:	01003e04 	movi	r4,248
 c003a28:	c0037d40 	call	c0037d4 <MAXreg_rd>
 c003a2c:	e0bfff05 	stb	r2,-4(fp)
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte
 c003a30:	e0ffff03 	ldbu	r3,-4(fp)
 c003a34:	00bff004 	movi	r2,-64
 c003a38:	1884703a 	and	r2,r3,r2
 c003a3c:	e0bfff05 	stb	r2,-4(fp)

	switch (bus_sample) {                   //start full-speed or low-speed host
 c003a40:	e0bfff03 	ldbu	r2,-4(fp)
 c003a44:	10c01020 	cmpeqi	r3,r2,64
 c003a48:	1800221e 	bne	r3,zero,c003ad4 <MAX_busprobe+0xc0>
 c003a4c:	10c01048 	cmpgei	r3,r2,65
 c003a50:	1800021e 	bne	r3,zero,c003a5c <MAX_busprobe+0x48>
 c003a54:	10003b26 	beq	r2,zero,c003b44 <MAX_busprobe+0x130>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 c003a58:	00004a06 	br	c003b84 <MAX_busprobe+0x170>

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
 c003a5c:	10c02020 	cmpeqi	r3,r2,128
 c003a60:	1800031e 	bne	r3,zero,c003a70 <MAX_busprobe+0x5c>
 c003a64:	10803020 	cmpeqi	r2,r2,192
 c003a68:	1000331e 	bne	r2,zero,c003b38 <MAX_busprobe+0x124>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 c003a6c:	00004506 	br	c003b84 <MAX_busprobe+0x170>
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
	case ( bmJSTATUS):
		/*kludgy*/
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 c003a70:	d0a00703 	ldbu	r2,-32740(gp)
 c003a74:	10803fcc 	andi	r2,r2,255
 c003a78:	108004e0 	cmpeqi	r2,r2,19
 c003a7c:	10003e1e 	bne	r2,zero,c003b78 <MAX_busprobe+0x164>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 c003a80:	01003604 	movi	r4,216
 c003a84:	c0037d40 	call	c0037d4 <MAXreg_rd>
 c003a88:	10803fcc 	andi	r2,r2,255
 c003a8c:	1080008c 	andi	r2,r2,2
 c003a90:	1000071e 	bne	r2,zero,c003ab0 <MAX_busprobe+0x9c>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 c003a94:	01403244 	movi	r5,201
 c003a98:	01003604 	movi	r4,216
 c003a9c:	c0035e40 	call	c0035e4 <MAXreg_wr>
				printf("Starting in full speed\n");
 c003aa0:	010300b4 	movhi	r4,3074
 c003aa4:	2121bb04 	addi	r4,r4,-30996
 c003aa8:	c004f340 	call	c004f34 <puts>
 c003aac:	00000606 	br	c003ac8 <MAX_busprobe+0xb4>
			} else {
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
 c003ab0:	014032c4 	movi	r5,203
 c003ab4:	01003604 	movi	r4,216
 c003ab8:	c0035e40 	call	c0035e4 <MAXreg_wr>
				printf("Starting in low speed\n");
 c003abc:	010300b4 	movhi	r4,3074
 c003ac0:	2121c104 	addi	r4,r4,-30972
 c003ac4:	c004f340 	call	c004f34 <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 c003ac8:	00800404 	movi	r2,16
 c003acc:	d0a00705 	stb	r2,-32740(gp)
		}
		break;
 c003ad0:	00002906 	br	c003b78 <MAX_busprobe+0x164>
	case ( bmKSTATUS):
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 c003ad4:	d0a00703 	ldbu	r2,-32740(gp)
 c003ad8:	10803fcc 	andi	r2,r2,255
 c003adc:	108004e0 	cmpeqi	r2,r2,19
 c003ae0:	1000271e 	bne	r2,zero,c003b80 <MAX_busprobe+0x16c>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 c003ae4:	01003604 	movi	r4,216
 c003ae8:	c0037d40 	call	c0037d4 <MAXreg_rd>
 c003aec:	10803fcc 	andi	r2,r2,255
 c003af0:	1080008c 	andi	r2,r2,2
 c003af4:	1000071e 	bne	r2,zero,c003b14 <MAX_busprobe+0x100>
				MAXreg_wr( rMODE, MODE_LS_HOST);   //start low-speed host
 c003af8:	014032c4 	movi	r5,203
 c003afc:	01003604 	movi	r4,216
 c003b00:	c0035e40 	call	c0035e4 <MAXreg_wr>
				printf("Starting in low speed\n");
 c003b04:	010300b4 	movhi	r4,3074
 c003b08:	2121c104 	addi	r4,r4,-30972
 c003b0c:	c004f340 	call	c004f34 <puts>
 c003b10:	00000606 	br	c003b2c <MAX_busprobe+0x118>
			} else {
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 c003b14:	01403244 	movi	r5,201
 c003b18:	01003604 	movi	r4,216
 c003b1c:	c0035e40 	call	c0035e4 <MAXreg_wr>
				printf("Starting in full speed\n");
 c003b20:	010300b4 	movhi	r4,3074
 c003b24:	2121bb04 	addi	r4,r4,-30996
 c003b28:	c004f340 	call	c004f34 <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 c003b2c:	00800404 	movi	r2,16
 c003b30:	d0a00705 	stb	r2,-32740(gp)
		}
		break;
 c003b34:	00001206 	br	c003b80 <MAX_busprobe+0x16c>
	case ( bmSE1):              //illegal state
		usb_task_state = ( USB_DETACHED_SUBSTATE_ILLEGAL);
 c003b38:	00800104 	movi	r2,4
 c003b3c:	d0a00705 	stb	r2,-32740(gp)
		break;
 c003b40:	00001006 	br	c003b84 <MAX_busprobe+0x170>
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
 c003b44:	d0a00703 	ldbu	r2,-32740(gp)
 c003b48:	10803fcc 	andi	r2,r2,255
 c003b4c:	10803c0c 	andi	r2,r2,240
 c003b50:	10000326 	beq	r2,zero,c003b60 <MAX_busprobe+0x14c>
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
 c003b54:	00800044 	movi	r2,1
 c003b58:	d0a00705 	stb	r2,-32740(gp)
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
 c003b5c:	00000906 	br	c003b84 <MAX_busprobe+0x170>
		break;
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
 c003b60:	01403244 	movi	r5,201
 c003b64:	01003604 	movi	r4,216
 c003b68:	c0035e40 	call	c0035e4 <MAXreg_wr>
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
 c003b6c:	008000c4 	movi	r2,3
 c003b70:	d0a00705 	stb	r2,-32740(gp)
		}
		break;
 c003b74:	00000306 	br	c003b84 <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
				printf("Starting in low speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
 c003b78:	0001883a 	nop
 c003b7c:	00000106 	br	c003b84 <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
				printf("Starting in full speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
 c003b80:	0001883a 	nop
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 c003b84:	0001883a 	nop
 c003b88:	e037883a 	mov	sp,fp
 c003b8c:	dfc00117 	ldw	ra,4(sp)
 c003b90:	df000017 	ldw	fp,0(sp)
 c003b94:	dec00204 	addi	sp,sp,8
 c003b98:	f800283a 	ret

0c003b9c <MAX3421E_init>:
/* MAX3421E initialization after power-on   */
void MAX3421E_init(void) {
 c003b9c:	defffe04 	addi	sp,sp,-8
 c003ba0:	dfc00115 	stw	ra,4(sp)
 c003ba4:	df000015 	stw	fp,0(sp)
 c003ba8:	d839883a 	mov	fp,sp
	/* Configure full-duplex SPI, interrupt pulse   */
	MAXreg_wr( rPINCTL, (bmFDUPSPI + bmINTLEVEL + bmGPXB)); //Full-duplex SPI, level interrupt, GPX
 c003bac:	01400684 	movi	r5,26
 c003bb0:	01002204 	movi	r4,136
 c003bb4:	c0035e40 	call	c0035e4 <MAXreg_wr>
	MAX3421E_reset();                                //stop/start the oscillator
 c003bb8:	c0039500 	call	c003950 <MAX3421E_reset>
	/* configure power switch   */
	Vbus_power( OFF);                                      //turn Vbus power off
 c003bbc:	0009883a 	mov	r4,zero
 c003bc0:	c0039f00 	call	c0039f0 <Vbus_power>
	MAXreg_wr( rGPINIEN, bmGPINIEN7); //enable interrupt on GPIN7 (power switch overload flag)
 c003bc4:	01402004 	movi	r5,128
 c003bc8:	01002e04 	movi	r4,184
 c003bcc:	c0035e40 	call	c0035e4 <MAXreg_wr>
	Vbus_power( ON);
 c003bd0:	01000044 	movi	r4,1
 c003bd4:	c0039f00 	call	c0039f0 <Vbus_power>
	/* configure host operation */
	MAXreg_wr( rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ); // set pull-downs, SOF, Host, Separate GPIN IRQ on GPX
 c003bd8:	01403444 	movi	r5,209
 c003bdc:	01003604 	movi	r4,216
 c003be0:	c0035e40 	call	c0035e4 <MAXreg_wr>
	//MAXreg_wr( rHIEN, bmFRAMEIE|bmCONDETIE|bmBUSEVENTIE );                      // enable SOF, connection detection, bus event IRQs
	MAXreg_wr( rHIEN, bmCONDETIE);                        //connection detection
 c003be4:	01400804 	movi	r5,32
 c003be8:	01003404 	movi	r4,208
 c003bec:	c0035e40 	call	c0035e4 <MAXreg_wr>
	/* HXFRDNIRQ is checked in Dispatch packet function */
	MAXreg_wr(rHCTL, bmSAMPLEBUS);        // update the JSTATUS and KSTATUS bits
 c003bf0:	01400104 	movi	r5,4
 c003bf4:	01003a04 	movi	r4,232
 c003bf8:	c0035e40 	call	c0035e4 <MAXreg_wr>
	MAX_busprobe();                             //check if anything is connected
 c003bfc:	c003a140 	call	c003a14 <MAX_busprobe>
	MAXreg_wr( rHIRQ, bmCONDETIRQ); //clear connection detect interrupt                 
 c003c00:	01400804 	movi	r5,32
 c003c04:	01003204 	movi	r4,200
 c003c08:	c0035e40 	call	c0035e4 <MAXreg_wr>
	MAXreg_wr( rCPUCTL, 0x01);                            //enable interrupt pin
 c003c0c:	01400044 	movi	r5,1
 c003c10:	01002004 	movi	r4,128
 c003c14:	c0035e40 	call	c0035e4 <MAXreg_wr>
}
 c003c18:	0001883a 	nop
 c003c1c:	e037883a 	mov	sp,fp
 c003c20:	dfc00117 	ldw	ra,4(sp)
 c003c24:	df000017 	ldw	fp,0(sp)
 c003c28:	dec00204 	addi	sp,sp,8
 c003c2c:	f800283a 	ret

0c003c30 <MAX3421E_Task>:

/* MAX3421 state change task and interrupt handler */
void MAX3421E_Task(void) {
 c003c30:	defffe04 	addi	sp,sp,-8
 c003c34:	dfc00115 	stw	ra,4(sp)
 c003c38:	df000015 	stw	fp,0(sp)
 c003c3c:	d839883a 	mov	fp,sp
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
 c003c40:	00806404 	movi	r2,400
 c003c44:	10800037 	ldwio	r2,0(r2)
 c003c48:	1000041e 	bne	r2,zero,c003c5c <MAX3421E_Task+0x2c>
		printf("MAX interrupt\n\r");
 c003c4c:	010300b4 	movhi	r4,3074
 c003c50:	2121c704 	addi	r4,r4,-30948
 c003c54:	c004e380 	call	c004e38 <printf>
		MaxIntHandler();
 c003c58:	c003c940 	call	c003c94 <MaxIntHandler>
	}
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_GPX_BASE) == 1) {
 c003c5c:	00806004 	movi	r2,384
 c003c60:	10800037 	ldwio	r2,0(r2)
 c003c64:	10800058 	cmpnei	r2,r2,1
 c003c68:	1000041e 	bne	r2,zero,c003c7c <MAX3421E_Task+0x4c>
		printf("GPX interrupt\n\r");
 c003c6c:	010300b4 	movhi	r4,3074
 c003c70:	2121cb04 	addi	r4,r4,-30932
 c003c74:	c004e380 	call	c004e38 <printf>
		MaxGpxHandler();
 c003c78:	c003d600 	call	c003d60 <MaxGpxHandler>
	}
}
 c003c7c:	0001883a 	nop
 c003c80:	e037883a 	mov	sp,fp
 c003c84:	dfc00117 	ldw	ra,4(sp)
 c003c88:	df000017 	ldw	fp,0(sp)
 c003c8c:	dec00204 	addi	sp,sp,8
 c003c90:	f800283a 	ret

0c003c94 <MaxIntHandler>:

void MaxIntHandler(void) {
 c003c94:	defffd04 	addi	sp,sp,-12
 c003c98:	dfc00215 	stw	ra,8(sp)
 c003c9c:	df000115 	stw	fp,4(sp)
 c003ca0:	df000104 	addi	fp,sp,4
	BYTE HIRQ;
	BYTE HIRQ_sendback = 0x00;
 c003ca4:	e03fff05 	stb	zero,-4(fp)
	HIRQ = MAXreg_rd( rHIRQ);                  //determine interrupt source
 c003ca8:	01003204 	movi	r4,200
 c003cac:	c0037d40 	call	c0037d4 <MAXreg_rd>
 c003cb0:	e0bfff45 	stb	r2,-3(fp)
	printf("IRQ: %x\n", HIRQ);
 c003cb4:	e0bfff43 	ldbu	r2,-3(fp)
 c003cb8:	100b883a 	mov	r5,r2
 c003cbc:	010300b4 	movhi	r4,3074
 c003cc0:	2121cf04 	addi	r4,r4,-30916
 c003cc4:	c004e380 	call	c004e38 <printf>
	if (HIRQ & bmFRAMEIRQ) {                   //->1ms SOF interrupt handler
 c003cc8:	e0bfff43 	ldbu	r2,-3(fp)
 c003ccc:	1080100c 	andi	r2,r2,64
 c003cd0:	10000326 	beq	r2,zero,c003ce0 <MaxIntHandler+0x4c>
		HIRQ_sendback |= bmFRAMEIRQ;
 c003cd4:	e0bfff03 	ldbu	r2,-4(fp)
 c003cd8:	10801014 	ori	r2,r2,64
 c003cdc:	e0bfff05 	stb	r2,-4(fp)
	}                   //end FRAMEIRQ handling

	if (HIRQ & bmCONDETIRQ) {
 c003ce0:	e0bfff43 	ldbu	r2,-3(fp)
 c003ce4:	1080080c 	andi	r2,r2,32
 c003ce8:	10000426 	beq	r2,zero,c003cfc <MaxIntHandler+0x68>
		MAX_busprobe();
 c003cec:	c003a140 	call	c003a14 <MAX_busprobe>
		HIRQ_sendback |= bmCONDETIRQ;      //set sendback to 1 to clear register
 c003cf0:	e0bfff03 	ldbu	r2,-4(fp)
 c003cf4:	10800814 	ori	r2,r2,32
 c003cf8:	e0bfff05 	stb	r2,-4(fp)
	}
	if (HIRQ & bmSNDBAVIRQ) //if the send buffer is clear (previous transfer completed without issue)
 c003cfc:	e0bfff43 	ldbu	r2,-3(fp)
 c003d00:	1080020c 	andi	r2,r2,8
 c003d04:	10000326 	beq	r2,zero,c003d14 <MaxIntHandler+0x80>
	{
		MAXreg_wr(rSNDBC, 0x00);//clear the send buffer (not really necessary, but clears interrupt)
 c003d08:	000b883a 	mov	r5,zero
 c003d0c:	01000e04 	movi	r4,56
 c003d10:	c0035e40 	call	c0035e4 <MAXreg_wr>
	}
	if (HIRQ & bmBUSEVENTIRQ) {           //bus event is either reset or suspend
 c003d14:	e0bfff43 	ldbu	r2,-3(fp)
 c003d18:	1080004c 	andi	r2,r2,1
 c003d1c:	10000626 	beq	r2,zero,c003d38 <MaxIntHandler+0xa4>
		usb_task_state++;                       //advance USB task state machine
 c003d20:	d0a00703 	ldbu	r2,-32740(gp)
 c003d24:	10800044 	addi	r2,r2,1
 c003d28:	d0a00705 	stb	r2,-32740(gp)
		HIRQ_sendback |= bmBUSEVENTIRQ;
 c003d2c:	e0bfff03 	ldbu	r2,-4(fp)
 c003d30:	10800054 	ori	r2,r2,1
 c003d34:	e0bfff05 	stb	r2,-4(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	MAXreg_wr( rHIRQ, HIRQ_sendback); //write '1' to CONDETIRQ to ack bus state change
 c003d38:	e0bfff03 	ldbu	r2,-4(fp)
 c003d3c:	100b883a 	mov	r5,r2
 c003d40:	01003204 	movi	r4,200
 c003d44:	c0035e40 	call	c0035e4 <MAXreg_wr>
}
 c003d48:	0001883a 	nop
 c003d4c:	e037883a 	mov	sp,fp
 c003d50:	dfc00117 	ldw	ra,4(sp)
 c003d54:	df000017 	ldw	fp,0(sp)
 c003d58:	dec00204 	addi	sp,sp,8
 c003d5c:	f800283a 	ret

0c003d60 <MaxGpxHandler>:

void MaxGpxHandler(void) {
 c003d60:	defffd04 	addi	sp,sp,-12
 c003d64:	dfc00215 	stw	ra,8(sp)
 c003d68:	df000115 	stw	fp,4(sp)
 c003d6c:	df000104 	addi	fp,sp,4
	BYTE GPINIRQ;
	GPINIRQ = MAXreg_rd( rGPINIRQ);            //read both IRQ registers
 c003d70:	01002c04 	movi	r4,176
 c003d74:	c0037d40 	call	c0037d4 <MAXreg_rd>
 c003d78:	e0bfff05 	stb	r2,-4(fp)
}
 c003d7c:	0001883a 	nop
 c003d80:	e037883a 	mov	sp,fp
 c003d84:	dfc00117 	ldw	ra,4(sp)
 c003d88:	df000017 	ldw	fp,0(sp)
 c003d8c:	dec00204 	addi	sp,sp,8
 c003d90:	f800283a 	ret

0c003d94 <XferCtrlReq>:
/* depending on request. Actual requests are defined as macros                                                                                      */
/* return codes:                */
/* 00       =   success         */
/* 01-0f    =   non-zero HRSLT  */
BYTE XferCtrlReq( BYTE addr, BYTE ep, BYTE bmReqType, BYTE bRequest, BYTE wValLo, BYTE wValHi, WORD wInd, WORD nbytes, BYTE* dataptr )
{
 c003d94:	defff104 	addi	sp,sp,-60
 c003d98:	dfc00e15 	stw	ra,56(sp)
 c003d9c:	df000d15 	stw	fp,52(sp)
 c003da0:	df000d04 	addi	fp,sp,52
 c003da4:	2015883a 	mov	r10,r4
 c003da8:	2813883a 	mov	r9,r5
 c003dac:	3011883a 	mov	r8,r6
 c003db0:	380d883a 	mov	r6,r7
 c003db4:	e1400217 	ldw	r5,8(fp)
 c003db8:	e1000317 	ldw	r4,12(fp)
 c003dbc:	e0c00417 	ldw	r3,16(fp)
 c003dc0:	e0800517 	ldw	r2,20(fp)
 c003dc4:	e2bff805 	stb	r10,-32(fp)
 c003dc8:	e27ff905 	stb	r9,-28(fp)
 c003dcc:	e23ffa05 	stb	r8,-24(fp)
 c003dd0:	e1bffb05 	stb	r6,-20(fp)
 c003dd4:	e17ffc05 	stb	r5,-16(fp)
 c003dd8:	e13ffd05 	stb	r4,-12(fp)
 c003ddc:	e0fffe0d 	sth	r3,-8(fp)
 c003de0:	e0bfff0d 	sth	r2,-4(fp)
 BOOL direction = FALSE;        //request direction, IN or OUT
 c003de4:	e03ff415 	stw	zero,-48(fp)
 BYTE datastage = 1; //request data stage present or absent
 c003de8:	00800044 	movi	r2,1
 c003dec:	e0bff505 	stb	r2,-44(fp)
 BYTE rcode;
 SETUP_PKT setup_pkt;
    if( dataptr == NULL ) {
 c003df0:	e0800617 	ldw	r2,24(fp)
 c003df4:	1000011e 	bne	r2,zero,c003dfc <XferCtrlReq+0x68>
        datastage = 0;
 c003df8:	e03ff505 	stb	zero,-44(fp)
    }
    MAXreg_wr( rPERADDR, addr );                    //set peripheral address
 c003dfc:	e0bff803 	ldbu	r2,-32(fp)
 c003e00:	100b883a 	mov	r5,r2
 c003e04:	01003804 	movi	r4,224
 c003e08:	c0035e40 	call	c0035e4 <MAXreg_wr>
    /* fill in setup packet */
    if( bmReqType & 0x80 ) {
 c003e0c:	e0bffa03 	ldbu	r2,-24(fp)
 c003e10:	10803fcc 	andi	r2,r2,255
 c003e14:	1080201c 	xori	r2,r2,128
 c003e18:	10bfe004 	addi	r2,r2,-128
 c003e1c:	1000020e 	bge	r2,zero,c003e28 <XferCtrlReq+0x94>
        direction = TRUE;                   		//determine request direction
 c003e20:	00800044 	movi	r2,1
 c003e24:	e0bff415 	stw	r2,-48(fp)
    }
    /* fill in setup packet */
    setup_pkt.ReqType_u.bmRequestType = bmReqType;
 c003e28:	e0bffa03 	ldbu	r2,-24(fp)
 c003e2c:	e0bff585 	stb	r2,-42(fp)
    setup_pkt.bRequest = bRequest;
 c003e30:	e0bffb03 	ldbu	r2,-20(fp)
 c003e34:	e0bff5c5 	stb	r2,-41(fp)
    setup_pkt.wVal_u.wValueLo = wValLo;
 c003e38:	e0bffc03 	ldbu	r2,-16(fp)
 c003e3c:	e0bff605 	stb	r2,-40(fp)
    setup_pkt.wVal_u.wValueHi = wValHi;
 c003e40:	e0bffd03 	ldbu	r2,-12(fp)
 c003e44:	e0bff645 	stb	r2,-39(fp)
    setup_pkt.wIndex = wInd;
 c003e48:	e0bffe0b 	ldhu	r2,-8(fp)
 c003e4c:	e0bff68d 	sth	r2,-38(fp)
    setup_pkt.wLength = nbytes;
 c003e50:	e0bfff0b 	ldhu	r2,-4(fp)
 c003e54:	e0bff70d 	sth	r2,-36(fp)
    MAXbytes_wr( rSUDFIFO, 8, (BYTE *)&setup_pkt );     //transfer to setup packet FIFO
 c003e58:	e0bff584 	addi	r2,fp,-42
 c003e5c:	100d883a 	mov	r6,r2
 c003e60:	01400204 	movi	r5,8
 c003e64:	01000804 	movi	r4,32
 c003e68:	c00366c0 	call	c00366c <MAXbytes_wr>
    rcode = XferDispatchPkt( tokSETUP, ep );            //dispatch packet
 c003e6c:	e0bff903 	ldbu	r2,-28(fp)
 c003e70:	100b883a 	mov	r5,r2
 c003e74:	01000404 	movi	r4,16
 c003e78:	c00403c0 	call	c00403c <XferDispatchPkt>
 c003e7c:	e0bff545 	stb	r2,-43(fp)
    if( rcode ) {                                       //return HRSLT if not zero
 c003e80:	e0bff543 	ldbu	r2,-43(fp)
 c003e84:	10000226 	beq	r2,zero,c003e90 <XferCtrlReq+0xfc>
        return( rcode );
 c003e88:	e0bff543 	ldbu	r2,-43(fp)
 c003e8c:	00000f06 	br	c003ecc <XferCtrlReq+0x138>
    }
    rcode = ctrl_xfers[ datastage ]( addr, ep, nbytes, dataptr, direction );    //call data stage or no data stage transfer
 c003e90:	e0bff503 	ldbu	r2,-44(fp)
 c003e94:	1085883a 	add	r2,r2,r2
 c003e98:	1087883a 	add	r3,r2,r2
 c003e9c:	d0a00504 	addi	r2,gp,-32748
 c003ea0:	1885883a 	add	r2,r3,r2
 c003ea4:	10800017 	ldw	r2,0(r2)
 c003ea8:	e13ff803 	ldbu	r4,-32(fp)
 c003eac:	e17ff903 	ldbu	r5,-28(fp)
 c003eb0:	e1bfff0b 	ldhu	r6,-4(fp)
 c003eb4:	e0fff417 	ldw	r3,-48(fp)
 c003eb8:	d8c00015 	stw	r3,0(sp)
 c003ebc:	e1c00617 	ldw	r7,24(fp)
 c003ec0:	103ee83a 	callr	r2
 c003ec4:	e0bff545 	stb	r2,-43(fp)
    return( rcode );
 c003ec8:	e0bff543 	ldbu	r2,-43(fp)
}
 c003ecc:	e037883a 	mov	sp,fp
 c003ed0:	dfc00117 	ldw	ra,4(sp)
 c003ed4:	df000017 	ldw	fp,0(sp)
 c003ed8:	dec00204 	addi	sp,sp,8
 c003edc:	f800283a 	ret

0c003ee0 <XferCtrlData>:
/* Control transfer with data stage */
BYTE XferCtrlData( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 c003ee0:	defff804 	addi	sp,sp,-32
 c003ee4:	dfc00715 	stw	ra,28(sp)
 c003ee8:	df000615 	stw	fp,24(sp)
 c003eec:	df000604 	addi	fp,sp,24
 c003ef0:	2807883a 	mov	r3,r5
 c003ef4:	3005883a 	mov	r2,r6
 c003ef8:	e1ffff15 	stw	r7,-4(fp)
 c003efc:	e13ffc05 	stb	r4,-16(fp)
 c003f00:	e0fffd05 	stb	r3,-12(fp)
 c003f04:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;

    //MAXreg_wr( rHCTL, bmRCVTOG1 );       //set toggle to DATA1
    if( direction ) {   //IN transfer
 c003f08:	e0800217 	ldw	r2,8(fp)
 c003f0c:	10002826 	beq	r2,zero,c003fb0 <XferCtrlData+0xd0>
        devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 c003f10:	e0fffc03 	ldbu	r3,-16(fp)
 c003f14:	008300b4 	movhi	r2,3074
 c003f18:	1097a404 	addi	r2,r2,24208
 c003f1c:	180690fa 	slli	r3,r3,3
 c003f20:	10c5883a 	add	r2,r2,r3
 c003f24:	10c00017 	ldw	r3,0(r2)
 c003f28:	e0bffd03 	ldbu	r2,-12(fp)
 c003f2c:	100490fa 	slli	r2,r2,3
 c003f30:	1885883a 	add	r2,r3,r2
 c003f34:	00c00804 	movi	r3,32
 c003f38:	10c00185 	stb	r3,6(r2)
        rcode = XferInTransfer( addr, ep, nbytes, dataptr, devtable[ addr ].epinfo[ ep ].MaxPktSize );
 c003f3c:	e13ffc03 	ldbu	r4,-16(fp)
 c003f40:	e17ffd03 	ldbu	r5,-12(fp)
 c003f44:	e1bffe0b 	ldhu	r6,-8(fp)
 c003f48:	e0fffc03 	ldbu	r3,-16(fp)
 c003f4c:	008300b4 	movhi	r2,3074
 c003f50:	1097a404 	addi	r2,r2,24208
 c003f54:	180690fa 	slli	r3,r3,3
 c003f58:	10c5883a 	add	r2,r2,r3
 c003f5c:	10c00017 	ldw	r3,0(r2)
 c003f60:	e0bffd03 	ldbu	r2,-12(fp)
 c003f64:	100490fa 	slli	r2,r2,3
 c003f68:	1885883a 	add	r2,r3,r2
 c003f6c:	1080008b 	ldhu	r2,2(r2)
 c003f70:	10803fcc 	andi	r2,r2,255
 c003f74:	d8800015 	stw	r2,0(sp)
 c003f78:	e1ffff17 	ldw	r7,-4(fp)
 c003f7c:	c0041b80 	call	c0041b8 <XferInTransfer>
 c003f80:	e0bffb05 	stb	r2,-20(fp)
        if( rcode ) {
 c003f84:	e0bffb03 	ldbu	r2,-20(fp)
 c003f88:	10000226 	beq	r2,zero,c003f94 <XferCtrlData+0xb4>
        return( rcode );
 c003f8c:	e0bffb03 	ldbu	r2,-20(fp)
 c003f90:	00000806 	br	c003fb4 <XferCtrlData+0xd4>
        }
        rcode = XferDispatchPkt( tokOUTHS, ep );
 c003f94:	e0bffd03 	ldbu	r2,-12(fp)
 c003f98:	100b883a 	mov	r5,r2
 c003f9c:	01002804 	movi	r4,160
 c003fa0:	c00403c0 	call	c00403c <XferDispatchPkt>
 c003fa4:	e0bffb05 	stb	r2,-20(fp)
        return( rcode );
 c003fa8:	e0bffb03 	ldbu	r2,-20(fp)
 c003fac:	00000106 	br	c003fb4 <XferCtrlData+0xd4>
    }
    else {              //OUT not implemented
        return( 0xff );
 c003fb0:	00bfffc4 	movi	r2,-1
    }
}
 c003fb4:	e037883a 	mov	sp,fp
 c003fb8:	dfc00117 	ldw	ra,4(sp)
 c003fbc:	df000017 	ldw	fp,0(sp)
 c003fc0:	dec00204 	addi	sp,sp,8
 c003fc4:	f800283a 	ret

0c003fc8 <XferCtrlND>:
/* Control transfer with status stage and no data stage */
BYTE XferCtrlND( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 c003fc8:	defff904 	addi	sp,sp,-28
 c003fcc:	dfc00615 	stw	ra,24(sp)
 c003fd0:	df000515 	stw	fp,20(sp)
 c003fd4:	df000504 	addi	fp,sp,20
 c003fd8:	2807883a 	mov	r3,r5
 c003fdc:	3005883a 	mov	r2,r6
 c003fe0:	e1ffff15 	stw	r7,-4(fp)
 c003fe4:	e13ffc05 	stb	r4,-16(fp)
 c003fe8:	e0fffd05 	stb	r3,-12(fp)
 c003fec:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;
    if( direction ) { //GET
 c003ff0:	e0800217 	ldw	r2,8(fp)
 c003ff4:	10000626 	beq	r2,zero,c004010 <XferCtrlND+0x48>
        rcode = XferDispatchPkt( tokOUTHS, ep );
 c003ff8:	e0bffd03 	ldbu	r2,-12(fp)
 c003ffc:	100b883a 	mov	r5,r2
 c004000:	01002804 	movi	r4,160
 c004004:	c00403c0 	call	c00403c <XferDispatchPkt>
 c004008:	e0bffb05 	stb	r2,-20(fp)
 c00400c:	00000506 	br	c004024 <XferCtrlND+0x5c>
    }
    else {
        rcode = XferDispatchPkt( tokINHS, ep );
 c004010:	e0bffd03 	ldbu	r2,-12(fp)
 c004014:	100b883a 	mov	r5,r2
 c004018:	01002004 	movi	r4,128
 c00401c:	c00403c0 	call	c00403c <XferDispatchPkt>
 c004020:	e0bffb05 	stb	r2,-20(fp)
    }
    return( rcode );
 c004024:	e0bffb03 	ldbu	r2,-20(fp)
}
 c004028:	e037883a 	mov	sp,fp
 c00402c:	dfc00117 	ldw	ra,4(sp)
 c004030:	df000017 	ldw	fp,0(sp)
 c004034:	dec00204 	addi	sp,sp,8
 c004038:	f800283a 	ret

0c00403c <XferDispatchPkt>:
/* Result code: 0 success, nonzero = error condition                                                */
/* If NAK, tries to re-send up to USB_NAK_LIMIT times                                               */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */
/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
BYTE XferDispatchPkt( BYTE token, BYTE ep )
{
 c00403c:	defff904 	addi	sp,sp,-28
 c004040:	dfc00615 	stw	ra,24(sp)
 c004044:	df000515 	stw	fp,20(sp)
 c004048:	df000504 	addi	fp,sp,20
 c00404c:	2007883a 	mov	r3,r4
 c004050:	2805883a 	mov	r2,r5
 c004054:	e0fffe05 	stb	r3,-8(fp)
 c004058:	e0bfff05 	stb	r2,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 c00405c:	d0a7b017 	ldw	r2,-24896(gp)
 DWORD timeout = (alt_nticks()*1000)/alt_ticks_per_second() + USB_XFER_TIMEOUT;
 c004060:	0140fa04 	movi	r5,1000
 c004064:	1009883a 	mov	r4,r2
 c004068:	c004de00 	call	c004de0 <__mulsi3>
 c00406c:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 c004070:	d0a7af17 	ldw	r2,-24900(gp)
 c004074:	100b883a 	mov	r5,r2
 c004078:	1809883a 	mov	r4,r3
 c00407c:	c004d240 	call	c004d24 <__udivsi3>
 c004080:	1084e204 	addi	r2,r2,5000
 c004084:	e0bffc15 	stw	r2,-16(fp)
 BYTE tmpdata;
 BYTE rcode;
 char retry_count = 0;
 c004088:	e03ffb45 	stb	zero,-19(fp)
 BYTE nak_count = 0;
 c00408c:	e03ffb85 	stb	zero,-18(fp)

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
 c004090:	e0fffe03 	ldbu	r3,-8(fp)
 c004094:	e0bfff03 	ldbu	r2,-4(fp)
 c004098:	1884b03a 	or	r2,r3,r2
 c00409c:	10803fcc 	andi	r2,r2,255
 c0040a0:	100b883a 	mov	r5,r2
 c0040a4:	01003c04 	movi	r4,240
 c0040a8:	c0035e40 	call	c0035e4 <MAXreg_wr>
        rcode = 0xff;
 c0040ac:	00bfffc4 	movi	r2,-1
 c0040b0:	e0bffb05 	stb	r2,-20(fp)
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 c0040b4:	00000d06 	br	c0040ec <XferDispatchPkt+0xb0>
            tmpdata = MAXreg_rd( rHIRQ );
 c0040b8:	01003204 	movi	r4,200
 c0040bc:	c0037d40 	call	c0037d4 <MAXreg_rd>
 c0040c0:	e0bffd05 	stb	r2,-12(fp)
            if( tmpdata & bmHXFRDNIRQ ) {
 c0040c4:	e0bffd03 	ldbu	r2,-12(fp)
 c0040c8:	10803fcc 	andi	r2,r2,255
 c0040cc:	1080201c 	xori	r2,r2,128
 c0040d0:	10bfe004 	addi	r2,r2,-128
 c0040d4:	1000050e 	bge	r2,zero,c0040ec <XferDispatchPkt+0xb0>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
 c0040d8:	01402004 	movi	r5,128
 c0040dc:	01003204 	movi	r4,200
 c0040e0:	c0035e40 	call	c0035e4 <MAXreg_wr>
                rcode = 0x00;
 c0040e4:	e03ffb05 	stb	zero,-20(fp)
                break;
 c0040e8:	00000c06 	br	c00411c <XferDispatchPkt+0xe0>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 c0040ec:	d0a7b017 	ldw	r2,-24896(gp)
 BYTE nak_count = 0;

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
        rcode = 0xff;
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 c0040f0:	0140fa04 	movi	r5,1000
 c0040f4:	1009883a 	mov	r4,r2
 c0040f8:	c004de00 	call	c004de0 <__mulsi3>
 c0040fc:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 c004100:	d0a7af17 	ldw	r2,-24900(gp)
 c004104:	100b883a 	mov	r5,r2
 c004108:	1809883a 	mov	r4,r3
 c00410c:	c004d240 	call	c004d24 <__udivsi3>
 c004110:	1007883a 	mov	r3,r2
 c004114:	e0bffc17 	ldw	r2,-16(fp)
 c004118:	18bfe736 	bltu	r3,r2,c0040b8 <__alt_data_end+0xfc0040b8>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
                rcode = 0x00;
                break;
            }
        }
        if( rcode != 0x00 ) {               //exit if timeout
 c00411c:	e0bffb03 	ldbu	r2,-20(fp)
 c004120:	10000226 	beq	r2,zero,c00412c <XferDispatchPkt+0xf0>
            return( rcode );
 c004124:	e0bffb03 	ldbu	r2,-20(fp)
 c004128:	00001e06 	br	c0041a4 <XferDispatchPkt+0x168>
        }
        rcode = ( MAXreg_rd( rHRSL ) & 0x0f );
 c00412c:	01003e04 	movi	r4,248
 c004130:	c0037d40 	call	c0037d4 <MAXreg_rd>
 c004134:	108003cc 	andi	r2,r2,15
 c004138:	e0bffb05 	stb	r2,-20(fp)
        if( rcode == hrNAK ) {
 c00413c:	e0bffb03 	ldbu	r2,-20(fp)
 c004140:	10800118 	cmpnei	r2,r2,4
 c004144:	1000071e 	bne	r2,zero,c004164 <XferDispatchPkt+0x128>
            nak_count++;
 c004148:	e0bffb83 	ldbu	r2,-18(fp)
 c00414c:	10800044 	addi	r2,r2,1
 c004150:	e0bffb85 	stb	r2,-18(fp)
            if( nak_count == USB_NAK_LIMIT ) {
 c004154:	e0bffb83 	ldbu	r2,-18(fp)
 c004158:	10803218 	cmpnei	r2,r2,200
 c00415c:	10000b1e 	bne	r2,zero,c00418c <XferDispatchPkt+0x150>
                break;
 c004160:	00000f06 	br	c0041a0 <XferDispatchPkt+0x164>
            }
            else {
                continue;
            }
        }
        if( rcode == hrTIMEOUT ) {
 c004164:	e0bffb03 	ldbu	r2,-20(fp)
 c004168:	10800398 	cmpnei	r2,r2,14
 c00416c:	1000091e 	bne	r2,zero,c004194 <XferDispatchPkt+0x158>
            retry_count++;
 c004170:	e0bffb43 	ldbu	r2,-19(fp)
 c004174:	10800044 	addi	r2,r2,1
 c004178:	e0bffb45 	stb	r2,-19(fp)
            if( retry_count == USB_RETRY_LIMIT ) {
 c00417c:	e0bffb47 	ldb	r2,-19(fp)
 c004180:	108000d8 	cmpnei	r2,r2,3
 c004184:	10000526 	beq	r2,zero,c00419c <XferDispatchPkt+0x160>
                break;
            }
            else {
                continue;
 c004188:	00000106 	br	c004190 <XferDispatchPkt+0x154>
            nak_count++;
            if( nak_count == USB_NAK_LIMIT ) {
                break;
            }
            else {
                continue;
 c00418c:	0001883a 	nop
            else {
                continue;
            }
        }
        else break;
    }//while( 1 )
 c004190:	003fbf06 	br	c004090 <__alt_data_end+0xfc004090>
            }
            else {
                continue;
            }
        }
        else break;
 c004194:	0001883a 	nop
 c004198:	00000106 	br	c0041a0 <XferDispatchPkt+0x164>
            }
        }
        if( rcode == hrTIMEOUT ) {
            retry_count++;
            if( retry_count == USB_RETRY_LIMIT ) {
                break;
 c00419c:	0001883a 	nop
                continue;
            }
        }
        else break;
    }//while( 1 )
    return( rcode );
 c0041a0:	e0bffb03 	ldbu	r2,-20(fp)
}
 c0041a4:	e037883a 	mov	sp,fp
 c0041a8:	dfc00117 	ldw	ra,4(sp)
 c0041ac:	df000017 	ldw	fp,0(sp)
 c0041b0:	dec00204 	addi	sp,sp,8
 c0041b4:	f800283a 	ret

0c0041b8 <XferInTransfer>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes.
    Keep sending INs and writes data to memory area pointed by 'data' */
/* rcode 0 if no errors. rcode 01-0f is relayed from prvXferDispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
BYTE XferInTransfer( BYTE addr/* not sure if it's necessary */, BYTE ep, WORD nbytes, BYTE* data, BYTE maxpktsize )
{
 c0041b8:	defff804 	addi	sp,sp,-32
 c0041bc:	dfc00715 	stw	ra,28(sp)
 c0041c0:	df000615 	stw	fp,24(sp)
 c0041c4:	df000604 	addi	fp,sp,24
 c0041c8:	2011883a 	mov	r8,r4
 c0041cc:	2809883a 	mov	r4,r5
 c0041d0:	3007883a 	mov	r3,r6
 c0041d4:	e1fffe15 	stw	r7,-8(fp)
 c0041d8:	e0800217 	ldw	r2,8(fp)
 c0041dc:	e23ffb05 	stb	r8,-20(fp)
 c0041e0:	e13ffc05 	stb	r4,-16(fp)
 c0041e4:	e0fffd0d 	sth	r3,-12(fp)
 c0041e8:	e0bfff05 	stb	r2,-4(fp)
 BYTE rcode;
 BYTE i;
 BYTE tmpbyte;
 BYTE pktsize;
 WORD xfrlen = 0;
 c0041ec:	e03ffa0d 	sth	zero,-24(fp)
    MAXreg_wr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
 c0041f0:	e0fffb03 	ldbu	r3,-20(fp)
 c0041f4:	008300b4 	movhi	r2,3074
 c0041f8:	1097a404 	addi	r2,r2,24208
 c0041fc:	180690fa 	slli	r3,r3,3
 c004200:	10c5883a 	add	r2,r2,r3
 c004204:	10c00017 	ldw	r3,0(r2)
 c004208:	e0bffc03 	ldbu	r2,-16(fp)
 c00420c:	100490fa 	slli	r2,r2,3
 c004210:	1885883a 	add	r2,r3,r2
 c004214:	10800183 	ldbu	r2,6(r2)
 c004218:	10803fcc 	andi	r2,r2,255
 c00421c:	100b883a 	mov	r5,r2
 c004220:	01003a04 	movi	r4,232
 c004224:	c0035e40 	call	c0035e4 <MAXreg_wr>
    while( 1 ) { // use a 'return' to exit this loop
        rcode = XferDispatchPkt( tokIN, ep );           //IN packet to EP-'endpoint'. Function takes care of NAKS.
 c004228:	e0bffc03 	ldbu	r2,-16(fp)
 c00422c:	100b883a 	mov	r5,r2
 c004230:	0009883a 	mov	r4,zero
 c004234:	c00403c0 	call	c00403c <XferDispatchPkt>
 c004238:	e0bffa85 	stb	r2,-22(fp)
        if( rcode ) {
 c00423c:	e0bffa83 	ldbu	r2,-22(fp)
 c004240:	10000226 	beq	r2,zero,c00424c <XferInTransfer+0x94>
            return( rcode );                            //should be 0, indicating ACK. Else return error code.
 c004244:	e0bffa83 	ldbu	r2,-22(fp)
 c004248:	00003a06 	br	c004334 <XferInTransfer+0x17c>
        }
        /* check for RCVDAVIRQ and generate error if not present */
        /* the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred. Need to add handling for that */
        if(( MAXreg_rd( rHIRQ ) & bmRCVDAVIRQ ) == 0 ) {
 c00424c:	01003204 	movi	r4,200
 c004250:	c0037d40 	call	c0037d4 <MAXreg_rd>
 c004254:	10803fcc 	andi	r2,r2,255
 c004258:	1080010c 	andi	r2,r2,4
 c00425c:	1000021e 	bne	r2,zero,c004268 <XferInTransfer+0xb0>
            return ( 0xf0 );                            //receive error
 c004260:	00bffc04 	movi	r2,-16
 c004264:	00003306 	br	c004334 <XferInTransfer+0x17c>
        }
        pktsize = MAXreg_rd( rRCVBC );                  //number of received bytes
 c004268:	01000c04 	movi	r4,48
 c00426c:	c0037d40 	call	c0037d4 <MAXreg_rd>
 c004270:	e0bffac5 	stb	r2,-21(fp)
        //printf ("pktsize: %d\n", pktsize);
        data = MAXbytes_rd( rRCVFIFO, pktsize, data );
 c004274:	e0bffac3 	ldbu	r2,-21(fp)
 c004278:	e1bffe17 	ldw	r6,-8(fp)
 c00427c:	100b883a 	mov	r5,r2
 c004280:	01000204 	movi	r4,8
 c004284:	c0038480 	call	c003848 <MAXbytes_rd>
 c004288:	e0bffe15 	stw	r2,-8(fp)
        MAXreg_wr( rHIRQ, bmRCVDAVIRQ );                // Clear the IRQ & free the buffer
 c00428c:	01400104 	movi	r5,4
 c004290:	01003204 	movi	r4,200
 c004294:	c0035e40 	call	c0035e4 <MAXreg_wr>
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
 c004298:	e0fffac3 	ldbu	r3,-21(fp)
 c00429c:	e0bffa0b 	ldhu	r2,-24(fp)
 c0042a0:	1885883a 	add	r2,r3,r2
 c0042a4:	e0bffa0d 	sth	r2,-24(fp)
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {    // have we transferred 'nbytes' bytes?
 c0042a8:	e0fffac3 	ldbu	r3,-21(fp)
 c0042ac:	e0bfff03 	ldbu	r2,-4(fp)
 c0042b0:	18800336 	bltu	r3,r2,c0042c0 <XferInTransfer+0x108>
 c0042b4:	e0fffa0b 	ldhu	r3,-24(fp)
 c0042b8:	e0bffd0b 	ldhu	r2,-12(fp)
 c0042bc:	18bfda36 	bltu	r3,r2,c004228 <__alt_data_end+0xfc004228>
            if( MAXreg_rd( rHRSL ) & bmRCVTOGRD ) {                 //save toggle value
 c0042c0:	01003e04 	movi	r4,248
 c0042c4:	c0037d40 	call	c0037d4 <MAXreg_rd>
 c0042c8:	10803fcc 	andi	r2,r2,255
 c0042cc:	1080040c 	andi	r2,r2,16
 c0042d0:	10000c26 	beq	r2,zero,c004304 <XferInTransfer+0x14c>
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 c0042d4:	e0fffb03 	ldbu	r3,-20(fp)
 c0042d8:	008300b4 	movhi	r2,3074
 c0042dc:	1097a404 	addi	r2,r2,24208
 c0042e0:	180690fa 	slli	r3,r3,3
 c0042e4:	10c5883a 	add	r2,r2,r3
 c0042e8:	10c00017 	ldw	r3,0(r2)
 c0042ec:	e0bffc03 	ldbu	r2,-16(fp)
 c0042f0:	100490fa 	slli	r2,r2,3
 c0042f4:	1885883a 	add	r2,r3,r2
 c0042f8:	00c00804 	movi	r3,32
 c0042fc:	10c00185 	stb	r3,6(r2)
 c004300:	00000b06 	br	c004330 <XferInTransfer+0x178>
            }
            else {
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
 c004304:	e0fffb03 	ldbu	r3,-20(fp)
 c004308:	008300b4 	movhi	r2,3074
 c00430c:	1097a404 	addi	r2,r2,24208
 c004310:	180690fa 	slli	r3,r3,3
 c004314:	10c5883a 	add	r2,r2,r3
 c004318:	10c00017 	ldw	r3,0(r2)
 c00431c:	e0bffc03 	ldbu	r2,-16(fp)
 c004320:	100490fa 	slli	r2,r2,3
 c004324:	1885883a 	add	r2,r3,r2
 c004328:	00c00404 	movi	r3,16
 c00432c:	10c00185 	stb	r3,6(r2)
            }
            return( 0 );
 c004330:	0005883a 	mov	r2,zero
        }
  }//while( 1 )
}
 c004334:	e037883a 	mov	sp,fp
 c004338:	dfc00117 	ldw	ra,4(sp)
 c00433c:	df000017 	ldw	fp,0(sp)
 c004340:	dec00204 	addi	sp,sp,8
 c004344:	f800283a 	ret

0c004348 <USB_init>:
/* initialization of USB data structures */
void USB_init( void )
{
 c004348:	defffe04 	addi	sp,sp,-8
 c00434c:	df000115 	stw	fp,4(sp)
 c004350:	df000104 	addi	fp,sp,4
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 c004354:	e03fff05 	stb	zero,-4(fp)
 c004358:	00001006 	br	c00439c <USB_init+0x54>
        devtable[ i ].epinfo = NULL;       //clear device table
 c00435c:	e0ffff03 	ldbu	r3,-4(fp)
 c004360:	008300b4 	movhi	r2,3074
 c004364:	1097a404 	addi	r2,r2,24208
 c004368:	180690fa 	slli	r3,r3,3
 c00436c:	10c5883a 	add	r2,r2,r3
 c004370:	10000015 	stw	zero,0(r2)
        devtable[ i ].devclass = 0;
 c004374:	e0ffff03 	ldbu	r3,-4(fp)
 c004378:	008300b4 	movhi	r2,3074
 c00437c:	1097a404 	addi	r2,r2,24208
 c004380:	180690fa 	slli	r3,r3,3
 c004384:	10c5883a 	add	r2,r2,r3
 c004388:	10800104 	addi	r2,r2,4
 c00438c:	10000005 	stb	zero,0(r2)
}
/* initialization of USB data structures */
void USB_init( void )
{
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 c004390:	e0bfff03 	ldbu	r2,-4(fp)
 c004394:	10800044 	addi	r2,r2,1
 c004398:	e0bfff05 	stb	r2,-4(fp)
 c00439c:	e0bfff03 	ldbu	r2,-4(fp)
 c0043a0:	10800270 	cmpltui	r2,r2,9
 c0043a4:	103fed1e 	bne	r2,zero,c00435c <__alt_data_end+0xfc00435c>
        devtable[ i ].epinfo = NULL;       //clear device table
        devtable[ i ].devclass = 0;
    }
    devtable[ 0 ].epinfo = &dev0ep;  //set single ep for uninitialized device
 c0043a8:	008300b4 	movhi	r2,3074
 c0043ac:	1097a404 	addi	r2,r2,24208
 c0043b0:	d0e7a004 	addi	r3,gp,-24960
 c0043b4:	10c00015 	stw	r3,0(r2)
    dev0ep.MaxPktSize = 0;
 c0043b8:	d027a08d 	sth	zero,-24958(gp)
    dev0ep.sndToggle = bmSNDTOG0;   //set DATA0/1 toggles to 0
 c0043bc:	00801004 	movi	r2,64
 c0043c0:	d0a7a145 	stb	r2,-24955(gp)
    dev0ep.rcvToggle = bmRCVTOG0;
 c0043c4:	00800404 	movi	r2,16
 c0043c8:	d0a7a185 	stb	r2,-24954(gp)
}
 c0043cc:	0001883a 	nop
 c0043d0:	e037883a 	mov	sp,fp
 c0043d4:	df000017 	ldw	fp,0(sp)
 c0043d8:	dec00104 	addi	sp,sp,4
 c0043dc:	f800283a 	ret

0c0043e0 <USB_Task>:
/* error codes: 01-0f HRSLT        */
/* ff - unsupported device         */
/* fe - no address available       */
/* fd - no client driver available */
void USB_Task( void )
{
 c0043e0:	deffb204 	addi	sp,sp,-312
 c0043e4:	dfc04d15 	stw	ra,308(sp)
 c0043e8:	df004c15 	stw	fp,304(sp)
 c0043ec:	dc004b15 	stw	r16,300(sp)
 c0043f0:	df004c04 	addi	fp,sp,304
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 c0043f4:	d0a00703 	ldbu	r2,-32740(gp)
 c0043f8:	10803fcc 	andi	r2,r2,255
 c0043fc:	10803c0c 	andi	r2,r2,240
 c004400:	10c00820 	cmpeqi	r3,r2,32
 c004404:	1801121e 	bne	r3,zero,c004850 <USB_Task+0x470>
 c004408:	10c00848 	cmpgei	r3,r2,33
 c00440c:	1800041e 	bne	r3,zero,c004420 <USB_Task+0x40>
 c004410:	10000a26 	beq	r2,zero,c00443c <USB_Task+0x5c>
 c004414:	10800420 	cmpeqi	r2,r2,16
 c004418:	10001b1e 	bne	r2,zero,c004488 <USB_Task+0xa8>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
 c00441c:	00017a06 	br	c004a08 <USB_Task+0x628>
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 c004420:	10c01020 	cmpeqi	r3,r2,64
 c004424:	18016f1e 	bne	r3,zero,c0049e4 <USB_Task+0x604>
 c004428:	10c03fe0 	cmpeqi	r3,r2,255
 c00442c:	18016f1e 	bne	r3,zero,c0049ec <USB_Task+0x60c>
 c004430:	10800c20 	cmpeqi	r2,r2,48
 c004434:	1001441e 	bne	r2,zero,c004948 <USB_Task+0x568>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
 c004438:	00017306 	br	c004a08 <USB_Task+0x628>
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
 c00443c:	d0a00703 	ldbu	r2,-32740(gp)
 c004440:	10803fcc 	andi	r2,r2,255
 c004444:	10c000e0 	cmpeqi	r3,r2,3
 c004448:	1800091e 	bne	r3,zero,c004470 <USB_Task+0x90>
 c00444c:	10c00120 	cmpeqi	r3,r2,4
 c004450:	18000b1e 	bne	r3,zero,c004480 <USB_Task+0xa0>
 c004454:	10800060 	cmpeqi	r2,r2,1
 c004458:	1000011e 	bne	r2,zero,c004460 <USB_Task+0x80>
                    break;
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
 c00445c:	00016a06 	br	c004a08 <USB_Task+0x628>
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
                case( USB_DETACHED_SUBSTATE_INITIALIZE ):
                    /* cleanup device data structures */
                    USB_init();
 c004460:	c0043480 	call	c004348 <USB_init>
                    usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 c004464:	008000c4 	movi	r2,3
 c004468:	d0a00705 	stb	r2,-32740(gp)
                    break;
 c00446c:	00000506 	br	c004484 <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE ):
                    /* Do nothing */
                    MAXreg_wr(rHCTL,bmSAMPLEBUS);
 c004470:	01400104 	movi	r5,4
 c004474:	01003a04 	movi	r4,232
 c004478:	c0035e40 	call	c0035e4 <MAXreg_wr>
                    break;
 c00447c:	00000106 	br	c004484 <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
 c004480:	0001883a 	nop
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
 c004484:	00016006 	br	c004a08 <USB_Task+0x628>
            /**/
        case( USB_STATE_ATTACHED ):                     //prepare for enumeration
            switch( usb_task_state ) {
 c004488:	d0a00703 	ldbu	r2,-32740(gp)
 c00448c:	10803fcc 	andi	r2,r2,255
 c004490:	10bffc04 	addi	r2,r2,-16
 c004494:	10c001a8 	cmpgeui	r3,r2,6
 c004498:	1801561e 	bne	r3,zero,c0049f4 <USB_Task+0x614>
 c00449c:	100690ba 	slli	r3,r2,2
 c0044a0:	00830034 	movhi	r2,3072
 c0044a4:	10912d04 	addi	r2,r2,17588
 c0044a8:	1885883a 	add	r2,r3,r2
 c0044ac:	10800017 	ldw	r2,0(r2)
 c0044b0:	1000683a 	jmp	r2
 c0044b4:	0c0044cc 	andi	r16,at,275
 c0044b8:	0c004504 	addi	r16,at,276
 c0044bc:	0c004540 	call	c00454 <__alt_mem_onchip_memory2_0+0xc00454>
 c0044c0:	0c004564 	muli	r16,at,277
 c0044c4:	0c0045a4 	muli	r16,at,278
 c0044c8:	0c0045b8 	rdprs	r16,at,278
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 c0044cc:	d0a7b017 	ldw	r2,-24896(gp)
                case( USB_STATE_ATTACHED ):
                    usb_delay = (alt_nticks()*1000)/alt_ticks_per_second() + 200;           //initial settle 200ms
 c0044d0:	0140fa04 	movi	r5,1000
 c0044d4:	1009883a 	mov	r4,r2
 c0044d8:	c004de00 	call	c004de0 <__mulsi3>
 c0044dc:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 c0044e0:	d0a7af17 	ldw	r2,-24900(gp)
 c0044e4:	100b883a 	mov	r5,r2
 c0044e8:	1809883a 	mov	r4,r3
 c0044ec:	c004d240 	call	c004d24 <__udivsi3>
 c0044f0:	10803204 	addi	r2,r2,200
 c0044f4:	d0a7a315 	stw	r2,-24948(gp)
                    usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 c0044f8:	00800444 	movi	r2,17
 c0044fc:	d0a00705 	stb	r2,-32740(gp)
                    break;//case( USB_STATE_ATTACHED )
 c004500:	0000d206 	br	c00484c <USB_Task+0x46c>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 c004504:	d0a7b017 	ldw	r2,-24896(gp)
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
 c004508:	0140fa04 	movi	r5,1000
 c00450c:	1009883a 	mov	r4,r2
 c004510:	c004de00 	call	c004de0 <__mulsi3>
 c004514:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 c004518:	d0a7af17 	ldw	r2,-24900(gp)
 c00451c:	100b883a 	mov	r5,r2
 c004520:	1809883a 	mov	r4,r3
 c004524:	c004d240 	call	c004d24 <__udivsi3>
 c004528:	1007883a 	mov	r3,r2
 c00452c:	d0a7a317 	ldw	r2,-24948(gp)
 c004530:	10c0c32e 	bgeu	r2,r3,c004840 <USB_Task+0x460>
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 c004534:	00800484 	movi	r2,18
 c004538:	d0a00705 	stb	r2,-32740(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 c00453c:	0000c006 	br	c004840 <USB_Task+0x460>
                case( USB_ATTACHED_SUBSTATE_RESET_DEVICE ):
                    MAXreg_wr( rHIRQ, bmBUSEVENTIRQ );                               //clear bus event IRQ
 c004540:	01400044 	movi	r5,1
 c004544:	01003204 	movi	r4,200
 c004548:	c0035e40 	call	c0035e4 <MAXreg_wr>
                    MAXreg_wr( rHCTL, bmBUSRST );                                    //issue bus reset
 c00454c:	01400044 	movi	r5,1
 c004550:	01003a04 	movi	r4,232
 c004554:	c0035e40 	call	c0035e4 <MAXreg_wr>
                    usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 c004558:	008004c4 	movi	r2,19
 c00455c:	d0a00705 	stb	r2,-32740(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_RESET_DEVICE )
 c004560:	0000ba06 	br	c00484c <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE ):                  //wait for bus reset and first SOF
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
 c004564:	01003a04 	movi	r4,232
 c004568:	c0037d40 	call	c0037d4 <MAXreg_rd>
 c00456c:	10803fcc 	andi	r2,r2,255
 c004570:	1080004c 	andi	r2,r2,1
 c004574:	1000b41e 	bne	r2,zero,c004848 <USB_Task+0x468>
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
 c004578:	01003604 	movi	r4,216
 c00457c:	c0037d40 	call	c0037d4 <MAXreg_rd>
 c004580:	10800214 	ori	r2,r2,8
 c004584:	e0bfb945 	stb	r2,-283(fp)
                        MAXreg_wr( rMODE, tmpdata );
 c004588:	e0bfb943 	ldbu	r2,-283(fp)
 c00458c:	100b883a 	mov	r5,r2
 c004590:	01003604 	movi	r4,216
 c004594:	c0035e40 	call	c0035e4 <MAXreg_wr>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 c004598:	00800504 	movi	r2,20
 c00459c:	d0a00705 	stb	r2,-32740(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 c0045a0:	0000a906 	br	c004848 <USB_Task+0x468>
                case( USB_ATTACHED_SUBSTATE_WAIT_SOF ):
                    if( MAXreg_rd( rHIRQ ) | bmFRAMEIRQ ) {                     //when first SOF received we can continue
 c0045a4:	01003204 	movi	r4,200
 c0045a8:	c0037d40 	call	c0037d4 <MAXreg_rd>
                        usb_task_state = USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE;
 c0045ac:	00800544 	movi	r2,21
 c0045b0:	d0a00705 	stb	r2,-32740(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_SOF )
 c0045b4:	0000a506 	br	c00484c <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):   //send request for first 8 bytes of device descriptor
                    devtable[ 0 ].epinfo->MaxPktSize = 0x0008;             //fill max packet size with minimum allowed
 c0045b8:	008300b4 	movhi	r2,3074
 c0045bc:	1097a404 	addi	r2,r2,24208
 c0045c0:	10800017 	ldw	r2,0(r2)
 c0045c4:	00c00204 	movi	r3,8
 c0045c8:	10c0008d 	sth	r3,2(r2)
                	rcode = XferGetDevDescr( 0, 0, 8, (BYTE *)&buf );       //get device descriptor size
 c0045cc:	e0bfba04 	addi	r2,fp,-280
 c0045d0:	d8800415 	stw	r2,16(sp)
 c0045d4:	00800204 	movi	r2,8
 c0045d8:	d8800315 	stw	r2,12(sp)
 c0045dc:	d8000215 	stw	zero,8(sp)
 c0045e0:	00800044 	movi	r2,1
 c0045e4:	d8800115 	stw	r2,4(sp)
 c0045e8:	d8000015 	stw	zero,0(sp)
 c0045ec:	01c00184 	movi	r7,6
 c0045f0:	01802004 	movi	r6,128
 c0045f4:	000b883a 	mov	r5,zero
 c0045f8:	0009883a 	mov	r4,zero
 c0045fc:	c003d940 	call	c003d94 <XferCtrlReq>
 c004600:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
 c004604:	e0bfb983 	ldbu	r2,-282(fp)
 c004608:	1000861e 	bne	r2,zero,c004824 <USB_Task+0x444>
                        devtable[ 0 ].epinfo->MaxPktSize = buf.bMaxPacketSize0;
 c00460c:	008300b4 	movhi	r2,3074
 c004610:	1097a404 	addi	r2,r2,24208
 c004614:	10800017 	ldw	r2,0(r2)
 c004618:	e0ffbbc3 	ldbu	r3,-273(fp)
 c00461c:	18c03fcc 	andi	r3,r3,255
 c004620:	10c0008d 	sth	r3,2(r2)

                        rcode = XferGetDevDescr( 0, 0, buf.bLength, (BYTE *)&buf );     //get full descriptor
 c004624:	e0bfba03 	ldbu	r2,-280(fp)
 c004628:	10803fcc 	andi	r2,r2,255
 c00462c:	e0ffba04 	addi	r3,fp,-280
 c004630:	d8c00415 	stw	r3,16(sp)
 c004634:	d8800315 	stw	r2,12(sp)
 c004638:	d8000215 	stw	zero,8(sp)
 c00463c:	00800044 	movi	r2,1
 c004640:	d8800115 	stw	r2,4(sp)
 c004644:	d8000015 	stw	zero,0(sp)
 c004648:	01c00184 	movi	r7,6
 c00464c:	01802004 	movi	r6,128
 c004650:	000b883a 	mov	r5,zero
 c004654:	0009883a 	mov	r4,zero
 c004658:	c003d940 	call	c003d94 <XferCtrlReq>
 c00465c:	e0bfb985 	stb	r2,-282(fp)
                        //pull the string descriptor for the product if it exists
            			//hackish, store this somewhere
                        if (buf.iManufacturer != 0)
 c004660:	e0bfbd83 	ldbu	r2,-266(fp)
 c004664:	10803fcc 	andi	r2,r2,255
 c004668:	10003426 	beq	r2,zero,c00473c <USB_Task+0x35c>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                			rcode = XferGetStrDescr( 0, 0, 2, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 c00466c:	e0bfbd83 	ldbu	r2,-266(fp)
 c004670:	10803fcc 	andi	r2,r2,255
 c004674:	e0ffbe84 	addi	r3,fp,-262
 c004678:	d8c00415 	stw	r3,16(sp)
 c00467c:	00c00084 	movi	r3,2
 c004680:	d8c00315 	stw	r3,12(sp)
 c004684:	00c10244 	movi	r3,1033
 c004688:	d8c00215 	stw	r3,8(sp)
 c00468c:	00c000c4 	movi	r3,3
 c004690:	d8c00115 	stw	r3,4(sp)
 c004694:	d8800015 	stw	r2,0(sp)
 c004698:	01c00184 	movi	r7,6
 c00469c:	01802004 	movi	r6,128
 c0046a0:	000b883a 	mov	r5,zero
 c0046a4:	0009883a 	mov	r4,zero
 c0046a8:	c003d940 	call	c003d94 <XferCtrlReq>
 c0046ac:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 c0046b0:	e0bfbd83 	ldbu	r2,-266(fp)
 c0046b4:	10803fcc 	andi	r2,r2,255
 c0046b8:	e0ffbe83 	ldbu	r3,-262(fp)
 c0046bc:	18c03fcc 	andi	r3,r3,255
 c0046c0:	e13fbe84 	addi	r4,fp,-262
 c0046c4:	d9000415 	stw	r4,16(sp)
 c0046c8:	d8c00315 	stw	r3,12(sp)
 c0046cc:	00c10244 	movi	r3,1033
 c0046d0:	d8c00215 	stw	r3,8(sp)
 c0046d4:	00c000c4 	movi	r3,3
 c0046d8:	d8c00115 	stw	r3,4(sp)
 c0046dc:	d8800015 	stw	r2,0(sp)
 c0046e0:	01c00184 	movi	r7,6
 c0046e4:	01802004 	movi	r6,128
 c0046e8:	000b883a 	mov	r5,zero
 c0046ec:	0009883a 	mov	r4,zero
 c0046f0:	c003d940 	call	c003d94 <XferCtrlReq>
 c0046f4:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Mfgr string(%i): %s\n", buf.iManufacturer, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 c0046f8:	e0bfbd83 	ldbu	r2,-266(fp)
 c0046fc:	14003fcc 	andi	r16,r2,255
 c004700:	e0bfbe83 	ldbu	r2,-262(fp)
 c004704:	10803fcc 	andi	r2,r2,255
 c004708:	1004d07a 	srli	r2,r2,1
 c00470c:	10bfffc4 	addi	r2,r2,-1
 c004710:	10c03fcc 	andi	r3,r2,255
 c004714:	e0bfbe84 	addi	r2,fp,-262
 c004718:	10800084 	addi	r2,r2,2
 c00471c:	180b883a 	mov	r5,r3
 c004720:	1009883a 	mov	r4,r2
 c004724:	c004ba80 	call	c004ba8 <ConvUTF8ToStr>
 c004728:	100d883a 	mov	r6,r2
 c00472c:	800b883a 	mov	r5,r16
 c004730:	010300b4 	movhi	r4,3074
 c004734:	2121d204 	addi	r4,r4,-30904
 c004738:	c004e380 	call	c004e38 <printf>
                		}
                		if (buf.iProduct != 0)
 c00473c:	e0bfbdc3 	ldbu	r2,-265(fp)
 c004740:	10803fcc 	andi	r2,r2,255
 c004744:	10003426 	beq	r2,zero,c004818 <USB_Task+0x438>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                        	rcode = XferGetStrDescr( 0, 0, 2, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 c004748:	e0bfbdc3 	ldbu	r2,-265(fp)
 c00474c:	10803fcc 	andi	r2,r2,255
 c004750:	e0ffbe84 	addi	r3,fp,-262
 c004754:	d8c00415 	stw	r3,16(sp)
 c004758:	00c00084 	movi	r3,2
 c00475c:	d8c00315 	stw	r3,12(sp)
 c004760:	00c10244 	movi	r3,1033
 c004764:	d8c00215 	stw	r3,8(sp)
 c004768:	00c000c4 	movi	r3,3
 c00476c:	d8c00115 	stw	r3,4(sp)
 c004770:	d8800015 	stw	r2,0(sp)
 c004774:	01c00184 	movi	r7,6
 c004778:	01802004 	movi	r6,128
 c00477c:	000b883a 	mov	r5,zero
 c004780:	0009883a 	mov	r4,zero
 c004784:	c003d940 	call	c003d94 <XferCtrlReq>
 c004788:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 c00478c:	e0bfbdc3 	ldbu	r2,-265(fp)
 c004790:	10803fcc 	andi	r2,r2,255
 c004794:	e0ffbe83 	ldbu	r3,-262(fp)
 c004798:	18c03fcc 	andi	r3,r3,255
 c00479c:	e13fbe84 	addi	r4,fp,-262
 c0047a0:	d9000415 	stw	r4,16(sp)
 c0047a4:	d8c00315 	stw	r3,12(sp)
 c0047a8:	00c10244 	movi	r3,1033
 c0047ac:	d8c00215 	stw	r3,8(sp)
 c0047b0:	00c000c4 	movi	r3,3
 c0047b4:	d8c00115 	stw	r3,4(sp)
 c0047b8:	d8800015 	stw	r2,0(sp)
 c0047bc:	01c00184 	movi	r7,6
 c0047c0:	01802004 	movi	r6,128
 c0047c4:	000b883a 	mov	r5,zero
 c0047c8:	0009883a 	mov	r4,zero
 c0047cc:	c003d940 	call	c003d94 <XferCtrlReq>
 c0047d0:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Product string(%i): %s\n", buf.iProduct, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 c0047d4:	e0bfbdc3 	ldbu	r2,-265(fp)
 c0047d8:	14003fcc 	andi	r16,r2,255
 c0047dc:	e0bfbe83 	ldbu	r2,-262(fp)
 c0047e0:	10803fcc 	andi	r2,r2,255
 c0047e4:	1004d07a 	srli	r2,r2,1
 c0047e8:	10bfffc4 	addi	r2,r2,-1
 c0047ec:	10c03fcc 	andi	r3,r2,255
 c0047f0:	e0bfbe84 	addi	r2,fp,-262
 c0047f4:	10800084 	addi	r2,r2,2
 c0047f8:	180b883a 	mov	r5,r3
 c0047fc:	1009883a 	mov	r4,r2
 c004800:	c004ba80 	call	c004ba8 <ConvUTF8ToStr>
 c004804:	100d883a 	mov	r6,r2
 c004808:	800b883a 	mov	r5,r16
 c00480c:	010300b4 	movhi	r4,3074
 c004810:	2121d804 	addi	r4,r4,-30880
 c004814:	c004e380 	call	c004e38 <printf>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;
 c004818:	00800804 	movi	r2,32
 c00481c:	d0a00705 	stb	r2,-32740(gp)
                    else {
                        usb_error = rcode;
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 c004820:	00000a06 	br	c00484c <USB_Task+0x46c>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;

                    }
                    else {
                        usb_error = rcode;
 c004824:	e0bfb983 	ldbu	r2,-282(fp)
 c004828:	d0a7a445 	stb	r2,-24943(gp)
                        last_usb_task_state = usb_task_state;
 c00482c:	d0a00703 	ldbu	r2,-32740(gp)
 c004830:	d0a7a205 	stb	r2,-24952(gp)
                        usb_task_state = USB_STATE_ERROR;
 c004834:	00bfffc4 	movi	r2,-1
 c004838:	d0a00705 	stb	r2,-32740(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 c00483c:	00000306 	br	c00484c <USB_Task+0x46c>
                    break;//case( USB_STATE_ATTACHED )
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 c004840:	0001883a 	nop
 c004844:	00006b06 	br	c0049f4 <USB_Task+0x614>
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
                        MAXreg_wr( rMODE, tmpdata );
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 c004848:	0001883a 	nop
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
 c00484c:	00006906 	br	c0049f4 <USB_Task+0x614>
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 c004850:	00800044 	movi	r2,1
 c004854:	e0bfb905 	stb	r2,-284(fp)
 c004858:	00002d06 	br	c004910 <USB_Task+0x530>
                if( devtable[ i ].epinfo == NULL ) {
 c00485c:	e0ffb903 	ldbu	r3,-284(fp)
 c004860:	008300b4 	movhi	r2,3074
 c004864:	1097a404 	addi	r2,r2,24208
 c004868:	180690fa 	slli	r3,r3,3
 c00486c:	10c5883a 	add	r2,r2,r3
 c004870:	10800017 	ldw	r2,0(r2)
 c004874:	1000231e 	bne	r2,zero,c004904 <USB_Task+0x524>
                    devtable[ i ].epinfo = devtable[ 0 ].epinfo;        //set correct MaxPktSize
 c004878:	e13fb903 	ldbu	r4,-284(fp)
 c00487c:	008300b4 	movhi	r2,3074
 c004880:	1097a404 	addi	r2,r2,24208
 c004884:	10c00017 	ldw	r3,0(r2)
 c004888:	008300b4 	movhi	r2,3074
 c00488c:	1097a404 	addi	r2,r2,24208
 c004890:	200890fa 	slli	r4,r4,3
 c004894:	1105883a 	add	r2,r2,r4
 c004898:	10c00015 	stw	r3,0(r2)
                    //devtable[ i ].epinfo->MaxPktSize = devtable[ 0 ].epinfo->MaxPktSize;  //copy uninitialized device record to have correct MaxPktSize
                    rcode = XferSetAddr( 0, 0, i );
 c00489c:	e0bfb903 	ldbu	r2,-284(fp)
 c0048a0:	d8000415 	stw	zero,16(sp)
 c0048a4:	d8000315 	stw	zero,12(sp)
 c0048a8:	d8000215 	stw	zero,8(sp)
 c0048ac:	d8000115 	stw	zero,4(sp)
 c0048b0:	d8800015 	stw	r2,0(sp)
 c0048b4:	01c00144 	movi	r7,5
 c0048b8:	000d883a 	mov	r6,zero
 c0048bc:	000b883a 	mov	r5,zero
 c0048c0:	0009883a 	mov	r4,zero
 c0048c4:	c003d940 	call	c003d94 <XferCtrlReq>
 c0048c8:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
 c0048cc:	e0bfb983 	ldbu	r2,-282(fp)
 c0048d0:	1000051e 	bne	r2,zero,c0048e8 <USB_Task+0x508>
                        tmp_addr = i;
 c0048d4:	e0bfb903 	ldbu	r2,-284(fp)
 c0048d8:	d0a7a405 	stb	r2,-24944(gp)
                        usb_task_state = USB_STATE_CONFIGURING;
 c0048dc:	00800c04 	movi	r2,48
 c0048e0:	d0a00705 	stb	r2,-32740(gp)
                    else {
                        usb_error = rcode;          //set address error
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
 c0048e4:	00000d06 	br	c00491c <USB_Task+0x53c>
                    if( rcode == 0 ) {
                        tmp_addr = i;
                        usb_task_state = USB_STATE_CONFIGURING;
                    }
                    else {
                        usb_error = rcode;          //set address error
 c0048e8:	e0bfb983 	ldbu	r2,-282(fp)
 c0048ec:	d0a7a445 	stb	r2,-24943(gp)
                        last_usb_task_state = usb_task_state;
 c0048f0:	d0a00703 	ldbu	r2,-32740(gp)
 c0048f4:	d0a7a205 	stb	r2,-24952(gp)
                        usb_task_state = USB_STATE_ERROR;
 c0048f8:	00bfffc4 	movi	r2,-1
 c0048fc:	d0a00705 	stb	r2,-32740(gp)
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
 c004900:	00000606 	br	c00491c <USB_Task+0x53c>
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 c004904:	e0bfb903 	ldbu	r2,-284(fp)
 c004908:	10800044 	addi	r2,r2,1
 c00490c:	e0bfb905 	stb	r2,-284(fp)
 c004910:	e0bfb903 	ldbu	r2,-284(fp)
 c004914:	10800230 	cmpltui	r2,r2,8
 c004918:	103fd01e 	bne	r2,zero,c00485c <__alt_data_end+0xfc00485c>
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
                }
            }
            if( usb_task_state == USB_STATE_ADDRESSING ) {
 c00491c:	d0a00703 	ldbu	r2,-32740(gp)
 c004920:	10803fcc 	andi	r2,r2,255
 c004924:	10800818 	cmpnei	r2,r2,32
 c004928:	1000341e 	bne	r2,zero,c0049fc <USB_Task+0x61c>
                usb_error = 0xfe;
 c00492c:	00bfff84 	movi	r2,-2
 c004930:	d0a7a445 	stb	r2,-24943(gp)
                last_usb_task_state = usb_task_state;
 c004934:	d0a00703 	ldbu	r2,-32740(gp)
 c004938:	d0a7a205 	stb	r2,-24952(gp)
                usb_task_state = USB_STATE_ERROR;
 c00493c:	00bfffc4 	movi	r2,-1
 c004940:	d0a00705 	stb	r2,-32740(gp)
            }
            break;//case ( USB_STATE_ADDRESSING )
 c004944:	00002d06 	br	c0049fc <USB_Task+0x61c>
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 c004948:	e03fb905 	stb	zero,-284(fp)
 c00494c:	00001706 	br	c0049ac <USB_Task+0x5cc>
                rcode = ClientDriverTable[ i ].Initialize( tmp_addr, 0 );
 c004950:	e0bfb903 	ldbu	r2,-284(fp)
 c004954:	040300b4 	movhi	r16,3074
 c004958:	84236604 	addi	r16,r16,-29288
 c00495c:	01400304 	movi	r5,12
 c004960:	1009883a 	mov	r4,r2
 c004964:	c004de00 	call	c004de0 <__mulsi3>
 c004968:	8085883a 	add	r2,r16,r2
 c00496c:	10800017 	ldw	r2,0(r2)
 c004970:	d0e7a403 	ldbu	r3,-24944(gp)
 c004974:	18c03fcc 	andi	r3,r3,255
 c004978:	000b883a 	mov	r5,zero
 c00497c:	1809883a 	mov	r4,r3
 c004980:	103ee83a 	callr	r2
 c004984:	e0bfb985 	stb	r2,-282(fp)
                if( rcode == TRUE ) {
 c004988:	e0bfb983 	ldbu	r2,-282(fp)
 c00498c:	10800058 	cmpnei	r2,r2,1
 c004990:	1000031e 	bne	r2,zero,c0049a0 <USB_Task+0x5c0>
			        usb_task_state = USB_STATE_RUNNING;
 c004994:	00801004 	movi	r2,64
 c004998:	d0a00705 	stb	r2,-32740(gp)
                    break;
 c00499c:	00000606 	br	c0049b8 <USB_Task+0x5d8>
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 c0049a0:	e0bfb903 	ldbu	r2,-284(fp)
 c0049a4:	10800044 	addi	r2,r2,1
 c0049a8:	e0bfb905 	stb	r2,-284(fp)
 c0049ac:	e0bfb903 	ldbu	r2,-284(fp)
 c0049b0:	10800130 	cmpltui	r2,r2,4
 c0049b4:	103fe61e 	bne	r2,zero,c004950 <__alt_data_end+0xfc004950>
                if( rcode == TRUE ) {
			        usb_task_state = USB_STATE_RUNNING;
                    break;
                }
            }
            if( usb_task_state == USB_STATE_CONFIGURING ) {
 c0049b8:	d0a00703 	ldbu	r2,-32740(gp)
 c0049bc:	10803fcc 	andi	r2,r2,255
 c0049c0:	10800c18 	cmpnei	r2,r2,48
 c0049c4:	10000f1e 	bne	r2,zero,c004a04 <USB_Task+0x624>
                usb_error = 0xfd;
 c0049c8:	00bfff44 	movi	r2,-3
 c0049cc:	d0a7a445 	stb	r2,-24943(gp)
                last_usb_task_state = usb_task_state;
 c0049d0:	d0a00703 	ldbu	r2,-32740(gp)
 c0049d4:	d0a7a205 	stb	r2,-24952(gp)
                usb_task_state = USB_STATE_ERROR;
 c0049d8:	00bfffc4 	movi	r2,-1
 c0049dc:	d0a00705 	stb	r2,-32740(gp)
            }
            break;//( USB_STATE_CONFIGURING )
 c0049e0:	00000806 	br	c004a04 <USB_Task+0x624>
        case( USB_STATE_RUNNING ):
          //vTaskDelay( LED_RATE );
            break;//( USB_STATE_RUNNING )
 c0049e4:	0001883a 	nop
 c0049e8:	00000706 	br	c004a08 <USB_Task+0x628>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
 c0049ec:	0001883a 	nop
 c0049f0:	00000506 	br	c004a08 <USB_Task+0x628>
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
 c0049f4:	0001883a 	nop
 c0049f8:	00000306 	br	c004a08 <USB_Task+0x628>
            if( usb_task_state == USB_STATE_ADDRESSING ) {
                usb_error = 0xfe;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
 c0049fc:	0001883a 	nop
 c004a00:	00000106 	br	c004a08 <USB_Task+0x628>
            if( usb_task_state == USB_STATE_CONFIGURING ) {
                usb_error = 0xfd;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//( USB_STATE_CONFIGURING )
 c004a04:	0001883a 	nop
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
    }//switch( usb_task_state & STATE_MASK )
}
 c004a08:	0001883a 	nop
 c004a0c:	e6ffff04 	addi	sp,fp,-4
 c004a10:	dfc00217 	ldw	ra,8(sp)
 c004a14:	df000117 	ldw	fp,4(sp)
 c004a18:	dc000017 	ldw	r16,0(sp)
 c004a1c:	dec00304 	addi	sp,sp,12
 c004a20:	f800283a 	ret

0c004a24 <MSDProbe>:

//place-holders for MSD (mass-storage device) drivers, we don't have them ported.
//returns TRUE if device is successfully identified and configured, otherwise returns FALSE
BOOL MSDProbe( BYTE addr, DWORD flags )
{
 c004a24:	defffd04 	addi	sp,sp,-12
 c004a28:	df000215 	stw	fp,8(sp)
 c004a2c:	df000204 	addi	fp,sp,8
 c004a30:	2005883a 	mov	r2,r4
 c004a34:	e17fff15 	stw	r5,-4(fp)
 c004a38:	e0bffe05 	stb	r2,-8(fp)
    return( FALSE );
 c004a3c:	0005883a 	mov	r2,zero
}
 c004a40:	e037883a 	mov	sp,fp
 c004a44:	df000017 	ldw	fp,0(sp)
 c004a48:	dec00104 	addi	sp,sp,4
 c004a4c:	f800283a 	ret

0c004a50 <MSDEventHandler>:

BOOL MSDEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 c004a50:	defffb04 	addi	sp,sp,-20
 c004a54:	df000415 	stw	fp,16(sp)
 c004a58:	df000404 	addi	fp,sp,16
 c004a5c:	2007883a 	mov	r3,r4
 c004a60:	2805883a 	mov	r2,r5
 c004a64:	e1bffe15 	stw	r6,-8(fp)
 c004a68:	e1ffff15 	stw	r7,-4(fp)
 c004a6c:	e0fffc05 	stb	r3,-16(fp)
 c004a70:	e0bffd05 	stb	r2,-12(fp)

	return( FALSE );
 c004a74:	0005883a 	mov	r2,zero

}
 c004a78:	e037883a 	mov	sp,fp
 c004a7c:	df000017 	ldw	fp,0(sp)
 c004a80:	dec00104 	addi	sp,sp,4
 c004a84:	f800283a 	ret

0c004a88 <CDCProbe>:
//CDC (communication device class also not supported)
BOOL CDCProbe( BYTE address, DWORD flags )
{
 c004a88:	defffd04 	addi	sp,sp,-12
 c004a8c:	df000215 	stw	fp,8(sp)
 c004a90:	df000204 	addi	fp,sp,8
 c004a94:	2005883a 	mov	r2,r4
 c004a98:	e17fff15 	stw	r5,-4(fp)
 c004a9c:	e0bffe05 	stb	r2,-8(fp)

	return( FALSE );
 c004aa0:	0005883a 	mov	r2,zero

}
 c004aa4:	e037883a 	mov	sp,fp
 c004aa8:	df000017 	ldw	fp,0(sp)
 c004aac:	dec00104 	addi	sp,sp,4
 c004ab0:	f800283a 	ret

0c004ab4 <CDCEventHandler>:

BOOL CDCEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 c004ab4:	defffb04 	addi	sp,sp,-20
 c004ab8:	df000415 	stw	fp,16(sp)
 c004abc:	df000404 	addi	fp,sp,16
 c004ac0:	2007883a 	mov	r3,r4
 c004ac4:	2805883a 	mov	r2,r5
 c004ac8:	e1bffe15 	stw	r6,-8(fp)
 c004acc:	e1ffff15 	stw	r7,-4(fp)
 c004ad0:	e0fffc05 	stb	r3,-16(fp)
 c004ad4:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
 c004ad8:	0005883a 	mov	r2,zero
}
 c004adc:	e037883a 	mov	sp,fp
 c004ae0:	df000017 	ldw	fp,0(sp)
 c004ae4:	dec00104 	addi	sp,sp,4
 c004ae8:	f800283a 	ret

0c004aec <DummyProbe>:

BOOL DummyProbe( BYTE address , DWORD flags )
{
 c004aec:	defffd04 	addi	sp,sp,-12
 c004af0:	df000215 	stw	fp,8(sp)
 c004af4:	df000204 	addi	fp,sp,8
 c004af8:	2005883a 	mov	r2,r4
 c004afc:	e17fff15 	stw	r5,-4(fp)
 c004b00:	e0bffe05 	stb	r2,-8(fp)
	return( FALSE );
 c004b04:	0005883a 	mov	r2,zero
}
 c004b08:	e037883a 	mov	sp,fp
 c004b0c:	df000017 	ldw	fp,0(sp)
 c004b10:	dec00104 	addi	sp,sp,4
 c004b14:	f800283a 	ret

0c004b18 <DummyEventHandler>:

BOOL DummyEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 c004b18:	defffb04 	addi	sp,sp,-20
 c004b1c:	df000415 	stw	fp,16(sp)
 c004b20:	df000404 	addi	fp,sp,16
 c004b24:	2007883a 	mov	r3,r4
 c004b28:	2805883a 	mov	r2,r5
 c004b2c:	e1bffe15 	stw	r6,-8(fp)
 c004b30:	e1ffff15 	stw	r7,-4(fp)
 c004b34:	e0fffc05 	stb	r3,-16(fp)
 c004b38:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
 c004b3c:	0005883a 	mov	r2,zero
}
 c004b40:	e037883a 	mov	sp,fp
 c004b44:	df000017 	ldw	fp,0(sp)
 c004b48:	dec00104 	addi	sp,sp,4
 c004b4c:	f800283a 	ret

0c004b50 <GetUsbTaskState>:
/* Function to access usb_task_state variable from outside */
BYTE GetUsbTaskState( void )
{
 c004b50:	deffff04 	addi	sp,sp,-4
 c004b54:	df000015 	stw	fp,0(sp)
 c004b58:	d839883a 	mov	fp,sp
    return( usb_task_state );
 c004b5c:	d0a00703 	ldbu	r2,-32740(gp)
}
 c004b60:	e037883a 	mov	sp,fp
 c004b64:	df000017 	ldw	fp,0(sp)
 c004b68:	dec00104 	addi	sp,sp,4
 c004b6c:	f800283a 	ret

0c004b70 <GetDevtable>:
/* Function to access devtable[] from outside */
DEV_RECORD* GetDevtable( BYTE index )
{
 c004b70:	defffe04 	addi	sp,sp,-8
 c004b74:	df000115 	stw	fp,4(sp)
 c004b78:	df000104 	addi	fp,sp,4
 c004b7c:	2005883a 	mov	r2,r4
 c004b80:	e0bfff05 	stb	r2,-4(fp)
    return( &devtable[ index ] );
 c004b84:	e0bfff03 	ldbu	r2,-4(fp)
 c004b88:	100690fa 	slli	r3,r2,3
 c004b8c:	008300b4 	movhi	r2,3074
 c004b90:	1097a404 	addi	r2,r2,24208
 c004b94:	1885883a 	add	r2,r3,r2
}
 c004b98:	e037883a 	mov	sp,fp
 c004b9c:	df000017 	ldw	fp,0(sp)
 c004ba0:	dec00104 	addi	sp,sp,4
 c004ba4:	f800283a 	ret

0c004ba8 <ConvUTF8ToStr>:

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
 c004ba8:	defffc04 	addi	sp,sp,-16
 c004bac:	df000315 	stw	fp,12(sp)
 c004bb0:	df000304 	addi	fp,sp,12
 c004bb4:	e13ffe15 	stw	r4,-8(fp)
 c004bb8:	2805883a 	mov	r2,r5
 c004bbc:	e0bfff05 	stb	r2,-4(fp)
	BYTE i;
	for (i = 0; i < length; i++)
 c004bc0:	e03ffd05 	stb	zero,-12(fp)
 c004bc4:	00000d06 	br	c004bfc <ConvUTF8ToStr+0x54>
	{
		utf8[i] = utf8[2*i];
 c004bc8:	e0bffd03 	ldbu	r2,-12(fp)
 c004bcc:	e0fffe17 	ldw	r3,-8(fp)
 c004bd0:	1887883a 	add	r3,r3,r2
 c004bd4:	e0bffd03 	ldbu	r2,-12(fp)
 c004bd8:	1085883a 	add	r2,r2,r2
 c004bdc:	1009883a 	mov	r4,r2
 c004be0:	e0bffe17 	ldw	r2,-8(fp)
 c004be4:	1105883a 	add	r2,r2,r4
 c004be8:	10800003 	ldbu	r2,0(r2)
 c004bec:	18800005 	stb	r2,0(r3)
}

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
	BYTE i;
	for (i = 0; i < length; i++)
 c004bf0:	e0bffd03 	ldbu	r2,-12(fp)
 c004bf4:	10800044 	addi	r2,r2,1
 c004bf8:	e0bffd05 	stb	r2,-12(fp)
 c004bfc:	e0fffd03 	ldbu	r3,-12(fp)
 c004c00:	e0bfff03 	ldbu	r2,-4(fp)
 c004c04:	18bff036 	bltu	r3,r2,c004bc8 <__alt_data_end+0xfc004bc8>
	{
		utf8[i] = utf8[2*i];
	}
	utf8[length] = 0x00;
 c004c08:	e0bfff03 	ldbu	r2,-4(fp)
 c004c0c:	e0fffe17 	ldw	r3,-8(fp)
 c004c10:	1885883a 	add	r2,r3,r2
 c004c14:	10000005 	stb	zero,0(r2)
	return (char*)utf8;
 c004c18:	e0bffe17 	ldw	r2,-8(fp)
}
 c004c1c:	e037883a 	mov	sp,fp
 c004c20:	df000017 	ldw	fp,0(sp)
 c004c24:	dec00104 	addi	sp,sp,4
 c004c28:	f800283a 	ret

0c004c2c <__divsi3>:
 c004c2c:	20001b16 	blt	r4,zero,c004c9c <__divsi3+0x70>
 c004c30:	000f883a 	mov	r7,zero
 c004c34:	28001616 	blt	r5,zero,c004c90 <__divsi3+0x64>
 c004c38:	200d883a 	mov	r6,r4
 c004c3c:	29001a2e 	bgeu	r5,r4,c004ca8 <__divsi3+0x7c>
 c004c40:	00800804 	movi	r2,32
 c004c44:	00c00044 	movi	r3,1
 c004c48:	00000106 	br	c004c50 <__divsi3+0x24>
 c004c4c:	10000d26 	beq	r2,zero,c004c84 <__divsi3+0x58>
 c004c50:	294b883a 	add	r5,r5,r5
 c004c54:	10bfffc4 	addi	r2,r2,-1
 c004c58:	18c7883a 	add	r3,r3,r3
 c004c5c:	293ffb36 	bltu	r5,r4,c004c4c <__alt_data_end+0xfc004c4c>
 c004c60:	0005883a 	mov	r2,zero
 c004c64:	18000726 	beq	r3,zero,c004c84 <__divsi3+0x58>
 c004c68:	0005883a 	mov	r2,zero
 c004c6c:	31400236 	bltu	r6,r5,c004c78 <__divsi3+0x4c>
 c004c70:	314dc83a 	sub	r6,r6,r5
 c004c74:	10c4b03a 	or	r2,r2,r3
 c004c78:	1806d07a 	srli	r3,r3,1
 c004c7c:	280ad07a 	srli	r5,r5,1
 c004c80:	183ffa1e 	bne	r3,zero,c004c6c <__alt_data_end+0xfc004c6c>
 c004c84:	38000126 	beq	r7,zero,c004c8c <__divsi3+0x60>
 c004c88:	0085c83a 	sub	r2,zero,r2
 c004c8c:	f800283a 	ret
 c004c90:	014bc83a 	sub	r5,zero,r5
 c004c94:	39c0005c 	xori	r7,r7,1
 c004c98:	003fe706 	br	c004c38 <__alt_data_end+0xfc004c38>
 c004c9c:	0109c83a 	sub	r4,zero,r4
 c004ca0:	01c00044 	movi	r7,1
 c004ca4:	003fe306 	br	c004c34 <__alt_data_end+0xfc004c34>
 c004ca8:	00c00044 	movi	r3,1
 c004cac:	003fee06 	br	c004c68 <__alt_data_end+0xfc004c68>

0c004cb0 <__modsi3>:
 c004cb0:	20001716 	blt	r4,zero,c004d10 <__modsi3+0x60>
 c004cb4:	000f883a 	mov	r7,zero
 c004cb8:	2005883a 	mov	r2,r4
 c004cbc:	28001216 	blt	r5,zero,c004d08 <__modsi3+0x58>
 c004cc0:	2900162e 	bgeu	r5,r4,c004d1c <__modsi3+0x6c>
 c004cc4:	01800804 	movi	r6,32
 c004cc8:	00c00044 	movi	r3,1
 c004ccc:	00000106 	br	c004cd4 <__modsi3+0x24>
 c004cd0:	30000a26 	beq	r6,zero,c004cfc <__modsi3+0x4c>
 c004cd4:	294b883a 	add	r5,r5,r5
 c004cd8:	31bfffc4 	addi	r6,r6,-1
 c004cdc:	18c7883a 	add	r3,r3,r3
 c004ce0:	293ffb36 	bltu	r5,r4,c004cd0 <__alt_data_end+0xfc004cd0>
 c004ce4:	18000526 	beq	r3,zero,c004cfc <__modsi3+0x4c>
 c004ce8:	1806d07a 	srli	r3,r3,1
 c004cec:	11400136 	bltu	r2,r5,c004cf4 <__modsi3+0x44>
 c004cf0:	1145c83a 	sub	r2,r2,r5
 c004cf4:	280ad07a 	srli	r5,r5,1
 c004cf8:	183ffb1e 	bne	r3,zero,c004ce8 <__alt_data_end+0xfc004ce8>
 c004cfc:	38000126 	beq	r7,zero,c004d04 <__modsi3+0x54>
 c004d00:	0085c83a 	sub	r2,zero,r2
 c004d04:	f800283a 	ret
 c004d08:	014bc83a 	sub	r5,zero,r5
 c004d0c:	003fec06 	br	c004cc0 <__alt_data_end+0xfc004cc0>
 c004d10:	0109c83a 	sub	r4,zero,r4
 c004d14:	01c00044 	movi	r7,1
 c004d18:	003fe706 	br	c004cb8 <__alt_data_end+0xfc004cb8>
 c004d1c:	00c00044 	movi	r3,1
 c004d20:	003ff106 	br	c004ce8 <__alt_data_end+0xfc004ce8>

0c004d24 <__udivsi3>:
 c004d24:	200d883a 	mov	r6,r4
 c004d28:	2900152e 	bgeu	r5,r4,c004d80 <__udivsi3+0x5c>
 c004d2c:	28001416 	blt	r5,zero,c004d80 <__udivsi3+0x5c>
 c004d30:	00800804 	movi	r2,32
 c004d34:	00c00044 	movi	r3,1
 c004d38:	00000206 	br	c004d44 <__udivsi3+0x20>
 c004d3c:	10000e26 	beq	r2,zero,c004d78 <__udivsi3+0x54>
 c004d40:	28000516 	blt	r5,zero,c004d58 <__udivsi3+0x34>
 c004d44:	294b883a 	add	r5,r5,r5
 c004d48:	10bfffc4 	addi	r2,r2,-1
 c004d4c:	18c7883a 	add	r3,r3,r3
 c004d50:	293ffa36 	bltu	r5,r4,c004d3c <__alt_data_end+0xfc004d3c>
 c004d54:	18000826 	beq	r3,zero,c004d78 <__udivsi3+0x54>
 c004d58:	0005883a 	mov	r2,zero
 c004d5c:	31400236 	bltu	r6,r5,c004d68 <__udivsi3+0x44>
 c004d60:	314dc83a 	sub	r6,r6,r5
 c004d64:	10c4b03a 	or	r2,r2,r3
 c004d68:	1806d07a 	srli	r3,r3,1
 c004d6c:	280ad07a 	srli	r5,r5,1
 c004d70:	183ffa1e 	bne	r3,zero,c004d5c <__alt_data_end+0xfc004d5c>
 c004d74:	f800283a 	ret
 c004d78:	0005883a 	mov	r2,zero
 c004d7c:	f800283a 	ret
 c004d80:	00c00044 	movi	r3,1
 c004d84:	003ff406 	br	c004d58 <__alt_data_end+0xfc004d58>

0c004d88 <__umodsi3>:
 c004d88:	2005883a 	mov	r2,r4
 c004d8c:	2900122e 	bgeu	r5,r4,c004dd8 <__umodsi3+0x50>
 c004d90:	28001116 	blt	r5,zero,c004dd8 <__umodsi3+0x50>
 c004d94:	01800804 	movi	r6,32
 c004d98:	00c00044 	movi	r3,1
 c004d9c:	00000206 	br	c004da8 <__umodsi3+0x20>
 c004da0:	30000c26 	beq	r6,zero,c004dd4 <__umodsi3+0x4c>
 c004da4:	28000516 	blt	r5,zero,c004dbc <__umodsi3+0x34>
 c004da8:	294b883a 	add	r5,r5,r5
 c004dac:	31bfffc4 	addi	r6,r6,-1
 c004db0:	18c7883a 	add	r3,r3,r3
 c004db4:	293ffa36 	bltu	r5,r4,c004da0 <__alt_data_end+0xfc004da0>
 c004db8:	18000626 	beq	r3,zero,c004dd4 <__umodsi3+0x4c>
 c004dbc:	1806d07a 	srli	r3,r3,1
 c004dc0:	11400136 	bltu	r2,r5,c004dc8 <__umodsi3+0x40>
 c004dc4:	1145c83a 	sub	r2,r2,r5
 c004dc8:	280ad07a 	srli	r5,r5,1
 c004dcc:	183ffb1e 	bne	r3,zero,c004dbc <__alt_data_end+0xfc004dbc>
 c004dd0:	f800283a 	ret
 c004dd4:	f800283a 	ret
 c004dd8:	00c00044 	movi	r3,1
 c004ddc:	003ff706 	br	c004dbc <__alt_data_end+0xfc004dbc>

0c004de0 <__mulsi3>:
 c004de0:	0005883a 	mov	r2,zero
 c004de4:	20000726 	beq	r4,zero,c004e04 <__mulsi3+0x24>
 c004de8:	20c0004c 	andi	r3,r4,1
 c004dec:	2008d07a 	srli	r4,r4,1
 c004df0:	18000126 	beq	r3,zero,c004df8 <__mulsi3+0x18>
 c004df4:	1145883a 	add	r2,r2,r5
 c004df8:	294b883a 	add	r5,r5,r5
 c004dfc:	203ffa1e 	bne	r4,zero,c004de8 <__alt_data_end+0xfc004de8>
 c004e00:	f800283a 	ret
 c004e04:	f800283a 	ret

0c004e08 <_printf_r>:
 c004e08:	defffd04 	addi	sp,sp,-12
 c004e0c:	2805883a 	mov	r2,r5
 c004e10:	dfc00015 	stw	ra,0(sp)
 c004e14:	d9800115 	stw	r6,4(sp)
 c004e18:	d9c00215 	stw	r7,8(sp)
 c004e1c:	21400217 	ldw	r5,8(r4)
 c004e20:	d9c00104 	addi	r7,sp,4
 c004e24:	100d883a 	mov	r6,r2
 c004e28:	c0073dc0 	call	c0073dc <___vfprintf_internal_r>
 c004e2c:	dfc00017 	ldw	ra,0(sp)
 c004e30:	dec00304 	addi	sp,sp,12
 c004e34:	f800283a 	ret

0c004e38 <printf>:
 c004e38:	defffc04 	addi	sp,sp,-16
 c004e3c:	dfc00015 	stw	ra,0(sp)
 c004e40:	d9400115 	stw	r5,4(sp)
 c004e44:	d9800215 	stw	r6,8(sp)
 c004e48:	d9c00315 	stw	r7,12(sp)
 c004e4c:	008300b4 	movhi	r2,3074
 c004e50:	10aa2604 	addi	r2,r2,-22376
 c004e54:	10800017 	ldw	r2,0(r2)
 c004e58:	200b883a 	mov	r5,r4
 c004e5c:	d9800104 	addi	r6,sp,4
 c004e60:	11000217 	ldw	r4,8(r2)
 c004e64:	c0096b80 	call	c0096b8 <__vfprintf_internal>
 c004e68:	dfc00017 	ldw	ra,0(sp)
 c004e6c:	dec00404 	addi	sp,sp,16
 c004e70:	f800283a 	ret

0c004e74 <_puts_r>:
 c004e74:	defff604 	addi	sp,sp,-40
 c004e78:	dc000715 	stw	r16,28(sp)
 c004e7c:	2021883a 	mov	r16,r4
 c004e80:	2809883a 	mov	r4,r5
 c004e84:	dc400815 	stw	r17,32(sp)
 c004e88:	dfc00915 	stw	ra,36(sp)
 c004e8c:	2823883a 	mov	r17,r5
 c004e90:	c0050880 	call	c005088 <strlen>
 c004e94:	10c00044 	addi	r3,r2,1
 c004e98:	d8800115 	stw	r2,4(sp)
 c004e9c:	008300b4 	movhi	r2,3074
 c004ea0:	10a1de04 	addi	r2,r2,-30856
 c004ea4:	d8800215 	stw	r2,8(sp)
 c004ea8:	00800044 	movi	r2,1
 c004eac:	d8800315 	stw	r2,12(sp)
 c004eb0:	00800084 	movi	r2,2
 c004eb4:	dc400015 	stw	r17,0(sp)
 c004eb8:	d8c00615 	stw	r3,24(sp)
 c004ebc:	dec00415 	stw	sp,16(sp)
 c004ec0:	d8800515 	stw	r2,20(sp)
 c004ec4:	80000226 	beq	r16,zero,c004ed0 <_puts_r+0x5c>
 c004ec8:	80800e17 	ldw	r2,56(r16)
 c004ecc:	10001426 	beq	r2,zero,c004f20 <_puts_r+0xac>
 c004ed0:	81400217 	ldw	r5,8(r16)
 c004ed4:	2880030b 	ldhu	r2,12(r5)
 c004ed8:	10c8000c 	andi	r3,r2,8192
 c004edc:	1800061e 	bne	r3,zero,c004ef8 <_puts_r+0x84>
 c004ee0:	29001917 	ldw	r4,100(r5)
 c004ee4:	00f7ffc4 	movi	r3,-8193
 c004ee8:	10880014 	ori	r2,r2,8192
 c004eec:	20c6703a 	and	r3,r4,r3
 c004ef0:	2880030d 	sth	r2,12(r5)
 c004ef4:	28c01915 	stw	r3,100(r5)
 c004ef8:	d9800404 	addi	r6,sp,16
 c004efc:	8009883a 	mov	r4,r16
 c004f00:	c00bc200 	call	c00bc20 <__sfvwrite_r>
 c004f04:	1000091e 	bne	r2,zero,c004f2c <_puts_r+0xb8>
 c004f08:	00800284 	movi	r2,10
 c004f0c:	dfc00917 	ldw	ra,36(sp)
 c004f10:	dc400817 	ldw	r17,32(sp)
 c004f14:	dc000717 	ldw	r16,28(sp)
 c004f18:	dec00a04 	addi	sp,sp,40
 c004f1c:	f800283a 	ret
 c004f20:	8009883a 	mov	r4,r16
 c004f24:	c00b79c0 	call	c00b79c <__sinit>
 c004f28:	003fe906 	br	c004ed0 <__alt_data_end+0xfc004ed0>
 c004f2c:	00bfffc4 	movi	r2,-1
 c004f30:	003ff606 	br	c004f0c <__alt_data_end+0xfc004f0c>

0c004f34 <puts>:
 c004f34:	008300b4 	movhi	r2,3074
 c004f38:	10aa2604 	addi	r2,r2,-22376
 c004f3c:	200b883a 	mov	r5,r4
 c004f40:	11000017 	ldw	r4,0(r2)
 c004f44:	c004e741 	jmpi	c004e74 <_puts_r>

0c004f48 <srand>:
 c004f48:	008300b4 	movhi	r2,3074
 c004f4c:	10aa2604 	addi	r2,r2,-22376
 c004f50:	10800017 	ldw	r2,0(r2)
 c004f54:	11002915 	stw	r4,164(r2)
 c004f58:	10002a15 	stw	zero,168(r2)
 c004f5c:	f800283a 	ret

0c004f60 <rand>:
 c004f60:	008300b4 	movhi	r2,3074
 c004f64:	defffe04 	addi	sp,sp,-8
 c004f68:	10aa2604 	addi	r2,r2,-22376
 c004f6c:	dc000015 	stw	r16,0(sp)
 c004f70:	14000017 	ldw	r16,0(r2)
 c004f74:	dfc00115 	stw	ra,4(sp)
 c004f78:	01932574 	movhi	r6,19605
 c004f7c:	81002917 	ldw	r4,164(r16)
 c004f80:	81402a17 	ldw	r5,168(r16)
 c004f84:	01d614b4 	movhi	r7,22610
 c004f88:	319fcb44 	addi	r6,r6,32557
 c004f8c:	39fd0b44 	addi	r7,r7,-3027
 c004f90:	c0120740 	call	c012074 <__muldi3>
 c004f94:	11000044 	addi	r4,r2,1
 c004f98:	2085803a 	cmpltu	r2,r4,r2
 c004f9c:	10c7883a 	add	r3,r2,r3
 c004fa0:	00a00034 	movhi	r2,32768
 c004fa4:	10bfffc4 	addi	r2,r2,-1
 c004fa8:	1884703a 	and	r2,r3,r2
 c004fac:	81002915 	stw	r4,164(r16)
 c004fb0:	80c02a15 	stw	r3,168(r16)
 c004fb4:	dfc00117 	ldw	ra,4(sp)
 c004fb8:	dc000017 	ldw	r16,0(sp)
 c004fbc:	dec00204 	addi	sp,sp,8
 c004fc0:	f800283a 	ret

0c004fc4 <_sprintf_r>:
 c004fc4:	deffe404 	addi	sp,sp,-112
 c004fc8:	2807883a 	mov	r3,r5
 c004fcc:	dfc01a15 	stw	ra,104(sp)
 c004fd0:	d9c01b15 	stw	r7,108(sp)
 c004fd4:	00a00034 	movhi	r2,32768
 c004fd8:	10bfffc4 	addi	r2,r2,-1
 c004fdc:	02008204 	movi	r8,520
 c004fe0:	d8800215 	stw	r2,8(sp)
 c004fe4:	d8800515 	stw	r2,20(sp)
 c004fe8:	d9c01b04 	addi	r7,sp,108
 c004fec:	d80b883a 	mov	r5,sp
 c004ff0:	00bfffc4 	movi	r2,-1
 c004ff4:	d8c00015 	stw	r3,0(sp)
 c004ff8:	d8c00415 	stw	r3,16(sp)
 c004ffc:	da00030d 	sth	r8,12(sp)
 c005000:	d880038d 	sth	r2,14(sp)
 c005004:	c0051200 	call	c005120 <___svfprintf_internal_r>
 c005008:	d8c00017 	ldw	r3,0(sp)
 c00500c:	18000005 	stb	zero,0(r3)
 c005010:	dfc01a17 	ldw	ra,104(sp)
 c005014:	dec01c04 	addi	sp,sp,112
 c005018:	f800283a 	ret

0c00501c <sprintf>:
 c00501c:	deffe304 	addi	sp,sp,-116
 c005020:	2007883a 	mov	r3,r4
 c005024:	dfc01a15 	stw	ra,104(sp)
 c005028:	d9801b15 	stw	r6,108(sp)
 c00502c:	d9c01c15 	stw	r7,112(sp)
 c005030:	010300b4 	movhi	r4,3074
 c005034:	212a2604 	addi	r4,r4,-22376
 c005038:	21000017 	ldw	r4,0(r4)
 c00503c:	00a00034 	movhi	r2,32768
 c005040:	10bfffc4 	addi	r2,r2,-1
 c005044:	280d883a 	mov	r6,r5
 c005048:	02008204 	movi	r8,520
 c00504c:	d8800215 	stw	r2,8(sp)
 c005050:	d8800515 	stw	r2,20(sp)
 c005054:	d9c01b04 	addi	r7,sp,108
 c005058:	d80b883a 	mov	r5,sp
 c00505c:	00bfffc4 	movi	r2,-1
 c005060:	d8c00015 	stw	r3,0(sp)
 c005064:	d8c00415 	stw	r3,16(sp)
 c005068:	da00030d 	sth	r8,12(sp)
 c00506c:	d880038d 	sth	r2,14(sp)
 c005070:	c0051200 	call	c005120 <___svfprintf_internal_r>
 c005074:	d8c00017 	ldw	r3,0(sp)
 c005078:	18000005 	stb	zero,0(r3)
 c00507c:	dfc01a17 	ldw	ra,104(sp)
 c005080:	dec01d04 	addi	sp,sp,116
 c005084:	f800283a 	ret

0c005088 <strlen>:
 c005088:	208000cc 	andi	r2,r4,3
 c00508c:	10002026 	beq	r2,zero,c005110 <strlen+0x88>
 c005090:	20800007 	ldb	r2,0(r4)
 c005094:	10002026 	beq	r2,zero,c005118 <strlen+0x90>
 c005098:	2005883a 	mov	r2,r4
 c00509c:	00000206 	br	c0050a8 <strlen+0x20>
 c0050a0:	10c00007 	ldb	r3,0(r2)
 c0050a4:	18001826 	beq	r3,zero,c005108 <strlen+0x80>
 c0050a8:	10800044 	addi	r2,r2,1
 c0050ac:	10c000cc 	andi	r3,r2,3
 c0050b0:	183ffb1e 	bne	r3,zero,c0050a0 <__alt_data_end+0xfc0050a0>
 c0050b4:	10c00017 	ldw	r3,0(r2)
 c0050b8:	01ffbff4 	movhi	r7,65279
 c0050bc:	39ffbfc4 	addi	r7,r7,-257
 c0050c0:	00ca303a 	nor	r5,zero,r3
 c0050c4:	01a02074 	movhi	r6,32897
 c0050c8:	19c7883a 	add	r3,r3,r7
 c0050cc:	31a02004 	addi	r6,r6,-32640
 c0050d0:	1946703a 	and	r3,r3,r5
 c0050d4:	1986703a 	and	r3,r3,r6
 c0050d8:	1800091e 	bne	r3,zero,c005100 <strlen+0x78>
 c0050dc:	10800104 	addi	r2,r2,4
 c0050e0:	10c00017 	ldw	r3,0(r2)
 c0050e4:	19cb883a 	add	r5,r3,r7
 c0050e8:	00c6303a 	nor	r3,zero,r3
 c0050ec:	28c6703a 	and	r3,r5,r3
 c0050f0:	1986703a 	and	r3,r3,r6
 c0050f4:	183ff926 	beq	r3,zero,c0050dc <__alt_data_end+0xfc0050dc>
 c0050f8:	00000106 	br	c005100 <strlen+0x78>
 c0050fc:	10800044 	addi	r2,r2,1
 c005100:	10c00007 	ldb	r3,0(r2)
 c005104:	183ffd1e 	bne	r3,zero,c0050fc <__alt_data_end+0xfc0050fc>
 c005108:	1105c83a 	sub	r2,r2,r4
 c00510c:	f800283a 	ret
 c005110:	2005883a 	mov	r2,r4
 c005114:	003fe706 	br	c0050b4 <__alt_data_end+0xfc0050b4>
 c005118:	0005883a 	mov	r2,zero
 c00511c:	f800283a 	ret

0c005120 <___svfprintf_internal_r>:
 c005120:	deffb704 	addi	sp,sp,-292
 c005124:	dfc04815 	stw	ra,288(sp)
 c005128:	ddc04615 	stw	r23,280(sp)
 c00512c:	d9402d15 	stw	r5,180(sp)
 c005130:	d9003915 	stw	r4,228(sp)
 c005134:	302f883a 	mov	r23,r6
 c005138:	d9c02e15 	stw	r7,184(sp)
 c00513c:	df004715 	stw	fp,284(sp)
 c005140:	dd804515 	stw	r22,276(sp)
 c005144:	dd404415 	stw	r21,272(sp)
 c005148:	dd004315 	stw	r20,268(sp)
 c00514c:	dcc04215 	stw	r19,264(sp)
 c005150:	dc804115 	stw	r18,260(sp)
 c005154:	dc404015 	stw	r17,256(sp)
 c005158:	dc003f15 	stw	r16,252(sp)
 c00515c:	c00c31c0 	call	c00c31c <_localeconv_r>
 c005160:	10800017 	ldw	r2,0(r2)
 c005164:	1009883a 	mov	r4,r2
 c005168:	d8803415 	stw	r2,208(sp)
 c00516c:	c0050880 	call	c005088 <strlen>
 c005170:	d8c02d17 	ldw	r3,180(sp)
 c005174:	d8803815 	stw	r2,224(sp)
 c005178:	1880030b 	ldhu	r2,12(r3)
 c00517c:	1080200c 	andi	r2,r2,128
 c005180:	10000226 	beq	r2,zero,c00518c <___svfprintf_internal_r+0x6c>
 c005184:	18800417 	ldw	r2,16(r3)
 c005188:	1006b126 	beq	r2,zero,c006c50 <___svfprintf_internal_r+0x1b30>
 c00518c:	dcc03917 	ldw	r19,228(sp)
 c005190:	d8c00404 	addi	r3,sp,16
 c005194:	054300b4 	movhi	r21,3074
 c005198:	d9001e04 	addi	r4,sp,120
 c00519c:	ad61ef84 	addi	r21,r21,-30786
 c0051a0:	d8c01e15 	stw	r3,120(sp)
 c0051a4:	d8002015 	stw	zero,128(sp)
 c0051a8:	d8001f15 	stw	zero,124(sp)
 c0051ac:	d8003315 	stw	zero,204(sp)
 c0051b0:	d8003615 	stw	zero,216(sp)
 c0051b4:	d8003715 	stw	zero,220(sp)
 c0051b8:	1811883a 	mov	r8,r3
 c0051bc:	d8003a15 	stw	zero,232(sp)
 c0051c0:	d8003b15 	stw	zero,236(sp)
 c0051c4:	d8002f15 	stw	zero,188(sp)
 c0051c8:	d9002815 	stw	r4,160(sp)
 c0051cc:	b8800007 	ldb	r2,0(r23)
 c0051d0:	10027726 	beq	r2,zero,c005bb0 <___svfprintf_internal_r+0xa90>
 c0051d4:	00c00944 	movi	r3,37
 c0051d8:	b823883a 	mov	r17,r23
 c0051dc:	10c0021e 	bne	r2,r3,c0051e8 <___svfprintf_internal_r+0xc8>
 c0051e0:	00001406 	br	c005234 <___svfprintf_internal_r+0x114>
 c0051e4:	10c00326 	beq	r2,r3,c0051f4 <___svfprintf_internal_r+0xd4>
 c0051e8:	8c400044 	addi	r17,r17,1
 c0051ec:	88800007 	ldb	r2,0(r17)
 c0051f0:	103ffc1e 	bne	r2,zero,c0051e4 <__alt_data_end+0xfc0051e4>
 c0051f4:	8de1c83a 	sub	r16,r17,r23
 c0051f8:	80000e26 	beq	r16,zero,c005234 <___svfprintf_internal_r+0x114>
 c0051fc:	d8c02017 	ldw	r3,128(sp)
 c005200:	d8801f17 	ldw	r2,124(sp)
 c005204:	45c00015 	stw	r23,0(r8)
 c005208:	1c07883a 	add	r3,r3,r16
 c00520c:	10800044 	addi	r2,r2,1
 c005210:	d8c02015 	stw	r3,128(sp)
 c005214:	44000115 	stw	r16,4(r8)
 c005218:	d8801f15 	stw	r2,124(sp)
 c00521c:	00c001c4 	movi	r3,7
 c005220:	18809916 	blt	r3,r2,c005488 <___svfprintf_internal_r+0x368>
 c005224:	42000204 	addi	r8,r8,8
 c005228:	d9402f17 	ldw	r5,188(sp)
 c00522c:	2c0b883a 	add	r5,r5,r16
 c005230:	d9402f15 	stw	r5,188(sp)
 c005234:	88800007 	ldb	r2,0(r17)
 c005238:	10009a26 	beq	r2,zero,c0054a4 <___svfprintf_internal_r+0x384>
 c00523c:	8dc00044 	addi	r23,r17,1
 c005240:	8c400047 	ldb	r17,1(r17)
 c005244:	0021883a 	mov	r16,zero
 c005248:	00bfffc4 	movi	r2,-1
 c00524c:	0025883a 	mov	r18,zero
 c005250:	dc002905 	stb	r16,164(sp)
 c005254:	d8002785 	stb	zero,158(sp)
 c005258:	d8002b05 	stb	zero,172(sp)
 c00525c:	d8802a15 	stw	r2,168(sp)
 c005260:	d8003115 	stw	zero,196(sp)
 c005264:	05001604 	movi	r20,88
 c005268:	05800244 	movi	r22,9
 c00526c:	4039883a 	mov	fp,r8
 c005270:	9021883a 	mov	r16,r18
 c005274:	bdc00044 	addi	r23,r23,1
 c005278:	88bff804 	addi	r2,r17,-32
 c00527c:	a0831e36 	bltu	r20,r2,c005ef8 <___svfprintf_internal_r+0xdd8>
 c005280:	100490ba 	slli	r2,r2,2
 c005284:	00c30034 	movhi	r3,3072
 c005288:	18d4a604 	addi	r3,r3,21144
 c00528c:	10c5883a 	add	r2,r2,r3
 c005290:	10800017 	ldw	r2,0(r2)
 c005294:	1000683a 	jmp	r2
 c005298:	0c005e40 	call	c005e4 <__alt_mem_onchip_memory2_0+0xc005e4>
 c00529c:	0c005ef8 	rdprs	r16,at,379
 c0052a0:	0c005ef8 	rdprs	r16,at,379
 c0052a4:	0c005e34 	orhi	r16,at,376
 c0052a8:	0c005ef8 	rdprs	r16,at,379
 c0052ac:	0c005ef8 	rdprs	r16,at,379
 c0052b0:	0c005ef8 	rdprs	r16,at,379
 c0052b4:	0c005ef8 	rdprs	r16,at,379
 c0052b8:	0c005ef8 	rdprs	r16,at,379
 c0052bc:	0c005ef8 	rdprs	r16,at,379
 c0052c0:	0c005500 	call	c00550 <__alt_mem_onchip_memory2_0+0xc00550>
 c0052c4:	0c005d44 	addi	r16,at,373
 c0052c8:	0c005ef8 	rdprs	r16,at,379
 c0052cc:	0c00540c 	andi	r16,at,336
 c0052d0:	0c005524 	muli	r16,at,340
 c0052d4:	0c005ef8 	rdprs	r16,at,379
 c0052d8:	0c0055b0 	cmpltui	r16,at,342
 c0052dc:	0c005574 	orhi	r16,at,341
 c0052e0:	0c005574 	orhi	r16,at,341
 c0052e4:	0c005574 	orhi	r16,at,341
 c0052e8:	0c005574 	orhi	r16,at,341
 c0052ec:	0c005574 	orhi	r16,at,341
 c0052f0:	0c005574 	orhi	r16,at,341
 c0052f4:	0c005574 	orhi	r16,at,341
 c0052f8:	0c005574 	orhi	r16,at,341
 c0052fc:	0c005574 	orhi	r16,at,341
 c005300:	0c005ef8 	rdprs	r16,at,379
 c005304:	0c005ef8 	rdprs	r16,at,379
 c005308:	0c005ef8 	rdprs	r16,at,379
 c00530c:	0c005ef8 	rdprs	r16,at,379
 c005310:	0c005ef8 	rdprs	r16,at,379
 c005314:	0c005ef8 	rdprs	r16,at,379
 c005318:	0c005ef8 	rdprs	r16,at,379
 c00531c:	0c005ef8 	rdprs	r16,at,379
 c005320:	0c005ef8 	rdprs	r16,at,379
 c005324:	0c005ef8 	rdprs	r16,at,379
 c005328:	0c005674 	orhi	r16,at,345
 c00532c:	0c0055bc 	xorhi	r16,at,342
 c005330:	0c005ef8 	rdprs	r16,at,379
 c005334:	0c0055bc 	xorhi	r16,at,342
 c005338:	0c005ef8 	rdprs	r16,at,379
 c00533c:	0c005ef8 	rdprs	r16,at,379
 c005340:	0c005ef8 	rdprs	r16,at,379
 c005344:	0c005ef8 	rdprs	r16,at,379
 c005348:	0c005668 	cmpgeui	r16,at,345
 c00534c:	0c005ef8 	rdprs	r16,at,379
 c005350:	0c005ef8 	rdprs	r16,at,379
 c005354:	0c00573c 	xorhi	r16,at,348
 c005358:	0c005ef8 	rdprs	r16,at,379
 c00535c:	0c005ef8 	rdprs	r16,at,379
 c005360:	0c005ef8 	rdprs	r16,at,379
 c005364:	0c005ef8 	rdprs	r16,at,379
 c005368:	0c005ef8 	rdprs	r16,at,379
 c00536c:	0c005bb8 	rdprs	r16,at,366
 c005370:	0c005ef8 	rdprs	r16,at,379
 c005374:	0c005ef8 	rdprs	r16,at,379
 c005378:	0c005c24 	muli	r16,at,368
 c00537c:	0c005ef8 	rdprs	r16,at,379
 c005380:	0c005ef8 	rdprs	r16,at,379
 c005384:	0c005ef8 	rdprs	r16,at,379
 c005388:	0c005ef8 	rdprs	r16,at,379
 c00538c:	0c005ef8 	rdprs	r16,at,379
 c005390:	0c005ef8 	rdprs	r16,at,379
 c005394:	0c005ef8 	rdprs	r16,at,379
 c005398:	0c005ef8 	rdprs	r16,at,379
 c00539c:	0c005ef8 	rdprs	r16,at,379
 c0053a0:	0c005ef8 	rdprs	r16,at,379
 c0053a4:	0c005ce0 	cmpeqi	r16,at,371
 c0053a8:	0c005e60 	cmpeqi	r16,at,377
 c0053ac:	0c0055bc 	xorhi	r16,at,342
 c0053b0:	0c0055bc 	xorhi	r16,at,342
 c0053b4:	0c0055bc 	xorhi	r16,at,342
 c0053b8:	0c005ed4 	ori	r16,at,379
 c0053bc:	0c005e60 	cmpeqi	r16,at,377
 c0053c0:	0c005ef8 	rdprs	r16,at,379
 c0053c4:	0c005ef8 	rdprs	r16,at,379
 c0053c8:	0c005e80 	call	c005e8 <__alt_mem_onchip_memory2_0+0xc005e8>
 c0053cc:	0c005ef8 	rdprs	r16,at,379
 c0053d0:	0c005e94 	ori	r16,at,378
 c0053d4:	0c005d24 	muli	r16,at,372
 c0053d8:	0c005418 	cmpnei	r16,at,336
 c0053dc:	0c005d5c 	xori	r16,at,373
 c0053e0:	0c005ef8 	rdprs	r16,at,379
 c0053e4:	0c005d68 	cmpgeui	r16,at,373
 c0053e8:	0c005ef8 	rdprs	r16,at,379
 c0053ec:	0c005dcc 	andi	r16,at,375
 c0053f0:	0c005ef8 	rdprs	r16,at,379
 c0053f4:	0c005ef8 	rdprs	r16,at,379
 c0053f8:	0c005dec 	andhi	r16,at,375
 c0053fc:	d8c03117 	ldw	r3,196(sp)
 c005400:	d8802e15 	stw	r2,184(sp)
 c005404:	00c7c83a 	sub	r3,zero,r3
 c005408:	d8c03115 	stw	r3,196(sp)
 c00540c:	84000114 	ori	r16,r16,4
 c005410:	bc400007 	ldb	r17,0(r23)
 c005414:	003f9706 	br	c005274 <__alt_data_end+0xfc005274>
 c005418:	00800c04 	movi	r2,48
 c00541c:	d8802705 	stb	r2,156(sp)
 c005420:	00801e04 	movi	r2,120
 c005424:	d8802745 	stb	r2,157(sp)
 c005428:	d9002a17 	ldw	r4,168(sp)
 c00542c:	d8802e17 	ldw	r2,184(sp)
 c005430:	d8002785 	stb	zero,158(sp)
 c005434:	e011883a 	mov	r8,fp
 c005438:	10c00104 	addi	r3,r2,4
 c00543c:	15000017 	ldw	r20,0(r2)
 c005440:	002d883a 	mov	r22,zero
 c005444:	80800094 	ori	r2,r16,2
 c005448:	2002b616 	blt	r4,zero,c005f24 <___svfprintf_internal_r+0xe04>
 c00544c:	00bfdfc4 	movi	r2,-129
 c005450:	80a4703a 	and	r18,r16,r2
 c005454:	d8c02e15 	stw	r3,184(sp)
 c005458:	94800094 	ori	r18,r18,2
 c00545c:	a002a01e 	bne	r20,zero,c005ee0 <___svfprintf_internal_r+0xdc0>
 c005460:	014300b4 	movhi	r5,3074
 c005464:	2961e804 	addi	r5,r5,-30816
 c005468:	d9403a15 	stw	r5,232(sp)
 c00546c:	04401e04 	movi	r17,120
 c005470:	d8c02a17 	ldw	r3,168(sp)
 c005474:	0039883a 	mov	fp,zero
 c005478:	1801e626 	beq	r3,zero,c005c14 <___svfprintf_internal_r+0xaf4>
 c00547c:	0029883a 	mov	r20,zero
 c005480:	002d883a 	mov	r22,zero
 c005484:	00020506 	br	c005c9c <___svfprintf_internal_r+0xb7c>
 c005488:	d9402d17 	ldw	r5,180(sp)
 c00548c:	d9801e04 	addi	r6,sp,120
 c005490:	9809883a 	mov	r4,r19
 c005494:	c00eac00 	call	c00eac0 <__ssprint_r>
 c005498:	1000081e 	bne	r2,zero,c0054bc <___svfprintf_internal_r+0x39c>
 c00549c:	da000404 	addi	r8,sp,16
 c0054a0:	003f6106 	br	c005228 <__alt_data_end+0xfc005228>
 c0054a4:	d8802017 	ldw	r2,128(sp)
 c0054a8:	10000426 	beq	r2,zero,c0054bc <___svfprintf_internal_r+0x39c>
 c0054ac:	d9402d17 	ldw	r5,180(sp)
 c0054b0:	d9003917 	ldw	r4,228(sp)
 c0054b4:	d9801e04 	addi	r6,sp,120
 c0054b8:	c00eac00 	call	c00eac0 <__ssprint_r>
 c0054bc:	d8802d17 	ldw	r2,180(sp)
 c0054c0:	10c0030b 	ldhu	r3,12(r2)
 c0054c4:	d8802f17 	ldw	r2,188(sp)
 c0054c8:	18c0100c 	andi	r3,r3,64
 c0054cc:	1806251e 	bne	r3,zero,c006d64 <___svfprintf_internal_r+0x1c44>
 c0054d0:	dfc04817 	ldw	ra,288(sp)
 c0054d4:	df004717 	ldw	fp,284(sp)
 c0054d8:	ddc04617 	ldw	r23,280(sp)
 c0054dc:	dd804517 	ldw	r22,276(sp)
 c0054e0:	dd404417 	ldw	r21,272(sp)
 c0054e4:	dd004317 	ldw	r20,268(sp)
 c0054e8:	dcc04217 	ldw	r19,264(sp)
 c0054ec:	dc804117 	ldw	r18,260(sp)
 c0054f0:	dc404017 	ldw	r17,256(sp)
 c0054f4:	dc003f17 	ldw	r16,252(sp)
 c0054f8:	dec04904 	addi	sp,sp,292
 c0054fc:	f800283a 	ret
 c005500:	d9002e17 	ldw	r4,184(sp)
 c005504:	d9402e17 	ldw	r5,184(sp)
 c005508:	21000017 	ldw	r4,0(r4)
 c00550c:	28800104 	addi	r2,r5,4
 c005510:	d9003115 	stw	r4,196(sp)
 c005514:	203fb916 	blt	r4,zero,c0053fc <__alt_data_end+0xfc0053fc>
 c005518:	d8802e15 	stw	r2,184(sp)
 c00551c:	bc400007 	ldb	r17,0(r23)
 c005520:	003f5406 	br	c005274 <__alt_data_end+0xfc005274>
 c005524:	bc400007 	ldb	r17,0(r23)
 c005528:	01000a84 	movi	r4,42
 c00552c:	b8c00044 	addi	r3,r23,1
 c005530:	89076926 	beq	r17,r4,c0072d8 <___svfprintf_internal_r+0x21b8>
 c005534:	8cbff404 	addi	r18,r17,-48
 c005538:	b486b936 	bltu	r22,r18,c007020 <___svfprintf_internal_r+0x1f00>
 c00553c:	0009883a 	mov	r4,zero
 c005540:	1823883a 	mov	r17,r3
 c005544:	01400284 	movi	r5,10
 c005548:	c004de00 	call	c004de0 <__mulsi3>
 c00554c:	88c00007 	ldb	r3,0(r17)
 c005550:	1489883a 	add	r4,r2,r18
 c005554:	8dc00044 	addi	r23,r17,1
 c005558:	1cbff404 	addi	r18,r3,-48
 c00555c:	b823883a 	mov	r17,r23
 c005560:	b4bff82e 	bgeu	r22,r18,c005544 <__alt_data_end+0xfc005544>
 c005564:	1823883a 	mov	r17,r3
 c005568:	20060416 	blt	r4,zero,c006d7c <___svfprintf_internal_r+0x1c5c>
 c00556c:	d9002a15 	stw	r4,168(sp)
 c005570:	003f4106 	br	c005278 <__alt_data_end+0xfc005278>
 c005574:	8cbff404 	addi	r18,r17,-48
 c005578:	d8003115 	stw	zero,196(sp)
 c00557c:	0009883a 	mov	r4,zero
 c005580:	b823883a 	mov	r17,r23
 c005584:	01400284 	movi	r5,10
 c005588:	c004de00 	call	c004de0 <__mulsi3>
 c00558c:	88c00007 	ldb	r3,0(r17)
 c005590:	9089883a 	add	r4,r18,r2
 c005594:	bdc00044 	addi	r23,r23,1
 c005598:	1cbff404 	addi	r18,r3,-48
 c00559c:	b823883a 	mov	r17,r23
 c0055a0:	b4bff82e 	bgeu	r22,r18,c005584 <__alt_data_end+0xfc005584>
 c0055a4:	1823883a 	mov	r17,r3
 c0055a8:	d9003115 	stw	r4,196(sp)
 c0055ac:	003f3206 	br	c005278 <__alt_data_end+0xfc005278>
 c0055b0:	84002014 	ori	r16,r16,128
 c0055b4:	bc400007 	ldb	r17,0(r23)
 c0055b8:	003f2e06 	br	c005274 <__alt_data_end+0xfc005274>
 c0055bc:	8025883a 	mov	r18,r16
 c0055c0:	dc002903 	ldbu	r16,164(sp)
 c0055c4:	e011883a 	mov	r8,fp
 c0055c8:	84003fcc 	andi	r16,r16,255
 c0055cc:	8007721e 	bne	r16,zero,c007398 <___svfprintf_internal_r+0x2278>
 c0055d0:	9080020c 	andi	r2,r18,8
 c0055d4:	1004a526 	beq	r2,zero,c00686c <___svfprintf_internal_r+0x174c>
 c0055d8:	d9002e17 	ldw	r4,184(sp)
 c0055dc:	d9402e17 	ldw	r5,184(sp)
 c0055e0:	d8802e17 	ldw	r2,184(sp)
 c0055e4:	21000017 	ldw	r4,0(r4)
 c0055e8:	29400117 	ldw	r5,4(r5)
 c0055ec:	10800204 	addi	r2,r2,8
 c0055f0:	d9003615 	stw	r4,216(sp)
 c0055f4:	d9403715 	stw	r5,220(sp)
 c0055f8:	d8802e15 	stw	r2,184(sp)
 c0055fc:	d9003617 	ldw	r4,216(sp)
 c005600:	d9403717 	ldw	r5,220(sp)
 c005604:	da003e15 	stw	r8,248(sp)
 c005608:	04000044 	movi	r16,1
 c00560c:	c00e7e00 	call	c00e7e0 <__fpclassifyd>
 c005610:	da003e17 	ldw	r8,248(sp)
 c005614:	1404731e 	bne	r2,r16,c0067e4 <___svfprintf_internal_r+0x16c4>
 c005618:	d9003617 	ldw	r4,216(sp)
 c00561c:	d9403717 	ldw	r5,220(sp)
 c005620:	000d883a 	mov	r6,zero
 c005624:	000f883a 	mov	r7,zero
 c005628:	c0141200 	call	c014120 <__ledf2>
 c00562c:	da003e17 	ldw	r8,248(sp)
 c005630:	10061b16 	blt	r2,zero,c006ea0 <___svfprintf_internal_r+0x1d80>
 c005634:	df002783 	ldbu	fp,158(sp)
 c005638:	008011c4 	movi	r2,71
 c00563c:	1445810e 	bge	r2,r17,c006c44 <___svfprintf_internal_r+0x1b24>
 c005640:	040300b4 	movhi	r16,3074
 c005644:	8421e004 	addi	r16,r16,-30848
 c005648:	00c000c4 	movi	r3,3
 c00564c:	00bfdfc4 	movi	r2,-129
 c005650:	d8c02915 	stw	r3,164(sp)
 c005654:	90a4703a 	and	r18,r18,r2
 c005658:	d8c02b15 	stw	r3,172(sp)
 c00565c:	d8002a15 	stw	zero,168(sp)
 c005660:	d8003215 	stw	zero,200(sp)
 c005664:	00006c06 	br	c005818 <___svfprintf_internal_r+0x6f8>
 c005668:	84000214 	ori	r16,r16,8
 c00566c:	bc400007 	ldb	r17,0(r23)
 c005670:	003f0006 	br	c005274 <__alt_data_end+0xfc005274>
 c005674:	8025883a 	mov	r18,r16
 c005678:	dc002903 	ldbu	r16,164(sp)
 c00567c:	e011883a 	mov	r8,fp
 c005680:	84003fcc 	andi	r16,r16,255
 c005684:	80073f1e 	bne	r16,zero,c007384 <___svfprintf_internal_r+0x2264>
 c005688:	94800414 	ori	r18,r18,16
 c00568c:	9080080c 	andi	r2,r18,32
 c005690:	1003bb26 	beq	r2,zero,c006580 <___svfprintf_internal_r+0x1460>
 c005694:	d9002e17 	ldw	r4,184(sp)
 c005698:	20800117 	ldw	r2,4(r4)
 c00569c:	25000017 	ldw	r20,0(r4)
 c0056a0:	21000204 	addi	r4,r4,8
 c0056a4:	d9002e15 	stw	r4,184(sp)
 c0056a8:	102d883a 	mov	r22,r2
 c0056ac:	1003bd16 	blt	r2,zero,c0065a4 <___svfprintf_internal_r+0x1484>
 c0056b0:	d9002a17 	ldw	r4,168(sp)
 c0056b4:	df002783 	ldbu	fp,158(sp)
 c0056b8:	2003d016 	blt	r4,zero,c0065fc <___svfprintf_internal_r+0x14dc>
 c0056bc:	00ffdfc4 	movi	r3,-129
 c0056c0:	a584b03a 	or	r2,r20,r22
 c0056c4:	90e4703a 	and	r18,r18,r3
 c0056c8:	10015026 	beq	r2,zero,c005c0c <___svfprintf_internal_r+0xaec>
 c0056cc:	b0037026 	beq	r22,zero,c006490 <___svfprintf_internal_r+0x1370>
 c0056d0:	dc402915 	stw	r17,164(sp)
 c0056d4:	dc001e04 	addi	r16,sp,120
 c0056d8:	b023883a 	mov	r17,r22
 c0056dc:	402d883a 	mov	r22,r8
 c0056e0:	a009883a 	mov	r4,r20
 c0056e4:	880b883a 	mov	r5,r17
 c0056e8:	01800284 	movi	r6,10
 c0056ec:	000f883a 	mov	r7,zero
 c0056f0:	c01277c0 	call	c01277c <__umoddi3>
 c0056f4:	10800c04 	addi	r2,r2,48
 c0056f8:	843fffc4 	addi	r16,r16,-1
 c0056fc:	a009883a 	mov	r4,r20
 c005700:	880b883a 	mov	r5,r17
 c005704:	80800005 	stb	r2,0(r16)
 c005708:	01800284 	movi	r6,10
 c00570c:	000f883a 	mov	r7,zero
 c005710:	c0121800 	call	c012180 <__udivdi3>
 c005714:	1029883a 	mov	r20,r2
 c005718:	10c4b03a 	or	r2,r2,r3
 c00571c:	1823883a 	mov	r17,r3
 c005720:	103fef1e 	bne	r2,zero,c0056e0 <__alt_data_end+0xfc0056e0>
 c005724:	d8c02817 	ldw	r3,160(sp)
 c005728:	dc402917 	ldw	r17,164(sp)
 c00572c:	b011883a 	mov	r8,r22
 c005730:	1c07c83a 	sub	r3,r3,r16
 c005734:	d8c02b15 	stw	r3,172(sp)
 c005738:	00003106 	br	c005800 <___svfprintf_internal_r+0x6e0>
 c00573c:	8025883a 	mov	r18,r16
 c005740:	dc002903 	ldbu	r16,164(sp)
 c005744:	e011883a 	mov	r8,fp
 c005748:	84003fcc 	andi	r16,r16,255
 c00574c:	80070a1e 	bne	r16,zero,c007378 <___svfprintf_internal_r+0x2258>
 c005750:	94800414 	ori	r18,r18,16
 c005754:	9080080c 	andi	r2,r18,32
 c005758:	1002f626 	beq	r2,zero,c006334 <___svfprintf_internal_r+0x1214>
 c00575c:	d9002e17 	ldw	r4,184(sp)
 c005760:	d9402a17 	ldw	r5,168(sp)
 c005764:	d8002785 	stb	zero,158(sp)
 c005768:	20800204 	addi	r2,r4,8
 c00576c:	25000017 	ldw	r20,0(r4)
 c005770:	25800117 	ldw	r22,4(r4)
 c005774:	28043716 	blt	r5,zero,c006854 <___svfprintf_internal_r+0x1734>
 c005778:	013fdfc4 	movi	r4,-129
 c00577c:	a586b03a 	or	r3,r20,r22
 c005780:	d8802e15 	stw	r2,184(sp)
 c005784:	9124703a 	and	r18,r18,r4
 c005788:	1802f71e 	bne	r3,zero,c006368 <___svfprintf_internal_r+0x1248>
 c00578c:	d9402a17 	ldw	r5,168(sp)
 c005790:	0039883a 	mov	fp,zero
 c005794:	2806df26 	beq	r5,zero,c007314 <___svfprintf_internal_r+0x21f4>
 c005798:	0029883a 	mov	r20,zero
 c00579c:	002d883a 	mov	r22,zero
 c0057a0:	dc001e04 	addi	r16,sp,120
 c0057a4:	a006d0fa 	srli	r3,r20,3
 c0057a8:	b008977a 	slli	r4,r22,29
 c0057ac:	b02cd0fa 	srli	r22,r22,3
 c0057b0:	a50001cc 	andi	r20,r20,7
 c0057b4:	a0800c04 	addi	r2,r20,48
 c0057b8:	843fffc4 	addi	r16,r16,-1
 c0057bc:	20e8b03a 	or	r20,r4,r3
 c0057c0:	80800005 	stb	r2,0(r16)
 c0057c4:	a586b03a 	or	r3,r20,r22
 c0057c8:	183ff61e 	bne	r3,zero,c0057a4 <__alt_data_end+0xfc0057a4>
 c0057cc:	90c0004c 	andi	r3,r18,1
 c0057d0:	18013f26 	beq	r3,zero,c005cd0 <___svfprintf_internal_r+0xbb0>
 c0057d4:	10803fcc 	andi	r2,r2,255
 c0057d8:	1080201c 	xori	r2,r2,128
 c0057dc:	10bfe004 	addi	r2,r2,-128
 c0057e0:	00c00c04 	movi	r3,48
 c0057e4:	10c13a26 	beq	r2,r3,c005cd0 <___svfprintf_internal_r+0xbb0>
 c0057e8:	80ffffc5 	stb	r3,-1(r16)
 c0057ec:	d8c02817 	ldw	r3,160(sp)
 c0057f0:	80bfffc4 	addi	r2,r16,-1
 c0057f4:	1021883a 	mov	r16,r2
 c0057f8:	1887c83a 	sub	r3,r3,r2
 c0057fc:	d8c02b15 	stw	r3,172(sp)
 c005800:	d8802b17 	ldw	r2,172(sp)
 c005804:	d9002a17 	ldw	r4,168(sp)
 c005808:	1100010e 	bge	r2,r4,c005810 <___svfprintf_internal_r+0x6f0>
 c00580c:	2005883a 	mov	r2,r4
 c005810:	d8802915 	stw	r2,164(sp)
 c005814:	d8003215 	stw	zero,200(sp)
 c005818:	e7003fcc 	andi	fp,fp,255
 c00581c:	e700201c 	xori	fp,fp,128
 c005820:	e73fe004 	addi	fp,fp,-128
 c005824:	e0000326 	beq	fp,zero,c005834 <___svfprintf_internal_r+0x714>
 c005828:	d8c02917 	ldw	r3,164(sp)
 c00582c:	18c00044 	addi	r3,r3,1
 c005830:	d8c02915 	stw	r3,164(sp)
 c005834:	90c0008c 	andi	r3,r18,2
 c005838:	d8c02c15 	stw	r3,176(sp)
 c00583c:	18000326 	beq	r3,zero,c00584c <___svfprintf_internal_r+0x72c>
 c005840:	d8c02917 	ldw	r3,164(sp)
 c005844:	18c00084 	addi	r3,r3,2
 c005848:	d8c02915 	stw	r3,164(sp)
 c00584c:	90c0210c 	andi	r3,r18,132
 c005850:	d8c03015 	stw	r3,192(sp)
 c005854:	1801c31e 	bne	r3,zero,c005f64 <___svfprintf_internal_r+0xe44>
 c005858:	d9003117 	ldw	r4,196(sp)
 c00585c:	d8c02917 	ldw	r3,164(sp)
 c005860:	20e9c83a 	sub	r20,r4,r3
 c005864:	0501bf0e 	bge	zero,r20,c005f64 <___svfprintf_internal_r+0xe44>
 c005868:	02400404 	movi	r9,16
 c00586c:	d8c02017 	ldw	r3,128(sp)
 c005870:	d8801f17 	ldw	r2,124(sp)
 c005874:	4d053d0e 	bge	r9,r20,c006d6c <___svfprintf_internal_r+0x1c4c>
 c005878:	014300b4 	movhi	r5,3074
 c00587c:	2961f384 	addi	r5,r5,-30770
 c005880:	dc403c15 	stw	r17,240(sp)
 c005884:	d9403515 	stw	r5,212(sp)
 c005888:	a023883a 	mov	r17,r20
 c00588c:	482d883a 	mov	r22,r9
 c005890:	9029883a 	mov	r20,r18
 c005894:	070001c4 	movi	fp,7
 c005898:	8025883a 	mov	r18,r16
 c00589c:	dc002d17 	ldw	r16,180(sp)
 c0058a0:	00000306 	br	c0058b0 <___svfprintf_internal_r+0x790>
 c0058a4:	8c7ffc04 	addi	r17,r17,-16
 c0058a8:	42000204 	addi	r8,r8,8
 c0058ac:	b440130e 	bge	r22,r17,c0058fc <___svfprintf_internal_r+0x7dc>
 c0058b0:	010300b4 	movhi	r4,3074
 c0058b4:	18c00404 	addi	r3,r3,16
 c0058b8:	10800044 	addi	r2,r2,1
 c0058bc:	2121f384 	addi	r4,r4,-30770
 c0058c0:	41000015 	stw	r4,0(r8)
 c0058c4:	45800115 	stw	r22,4(r8)
 c0058c8:	d8c02015 	stw	r3,128(sp)
 c0058cc:	d8801f15 	stw	r2,124(sp)
 c0058d0:	e0bff40e 	bge	fp,r2,c0058a4 <__alt_data_end+0xfc0058a4>
 c0058d4:	d9801e04 	addi	r6,sp,120
 c0058d8:	800b883a 	mov	r5,r16
 c0058dc:	9809883a 	mov	r4,r19
 c0058e0:	c00eac00 	call	c00eac0 <__ssprint_r>
 c0058e4:	103ef51e 	bne	r2,zero,c0054bc <__alt_data_end+0xfc0054bc>
 c0058e8:	8c7ffc04 	addi	r17,r17,-16
 c0058ec:	d8c02017 	ldw	r3,128(sp)
 c0058f0:	d8801f17 	ldw	r2,124(sp)
 c0058f4:	da000404 	addi	r8,sp,16
 c0058f8:	b47fed16 	blt	r22,r17,c0058b0 <__alt_data_end+0xfc0058b0>
 c0058fc:	9021883a 	mov	r16,r18
 c005900:	a025883a 	mov	r18,r20
 c005904:	8829883a 	mov	r20,r17
 c005908:	dc403c17 	ldw	r17,240(sp)
 c00590c:	d9403517 	ldw	r5,212(sp)
 c005910:	a0c7883a 	add	r3,r20,r3
 c005914:	10800044 	addi	r2,r2,1
 c005918:	41400015 	stw	r5,0(r8)
 c00591c:	45000115 	stw	r20,4(r8)
 c005920:	d8c02015 	stw	r3,128(sp)
 c005924:	d8801f15 	stw	r2,124(sp)
 c005928:	010001c4 	movi	r4,7
 c00592c:	2082c116 	blt	r4,r2,c006434 <___svfprintf_internal_r+0x1314>
 c005930:	df002787 	ldb	fp,158(sp)
 c005934:	42000204 	addi	r8,r8,8
 c005938:	e0000c26 	beq	fp,zero,c00596c <___svfprintf_internal_r+0x84c>
 c00593c:	d8801f17 	ldw	r2,124(sp)
 c005940:	d9002784 	addi	r4,sp,158
 c005944:	18c00044 	addi	r3,r3,1
 c005948:	10800044 	addi	r2,r2,1
 c00594c:	41000015 	stw	r4,0(r8)
 c005950:	01000044 	movi	r4,1
 c005954:	41000115 	stw	r4,4(r8)
 c005958:	d8c02015 	stw	r3,128(sp)
 c00595c:	d8801f15 	stw	r2,124(sp)
 c005960:	010001c4 	movi	r4,7
 c005964:	20825a16 	blt	r4,r2,c0062d0 <___svfprintf_internal_r+0x11b0>
 c005968:	42000204 	addi	r8,r8,8
 c00596c:	d8802c17 	ldw	r2,176(sp)
 c005970:	10000c26 	beq	r2,zero,c0059a4 <___svfprintf_internal_r+0x884>
 c005974:	d8801f17 	ldw	r2,124(sp)
 c005978:	d9002704 	addi	r4,sp,156
 c00597c:	18c00084 	addi	r3,r3,2
 c005980:	10800044 	addi	r2,r2,1
 c005984:	41000015 	stw	r4,0(r8)
 c005988:	01000084 	movi	r4,2
 c00598c:	41000115 	stw	r4,4(r8)
 c005990:	d8c02015 	stw	r3,128(sp)
 c005994:	d8801f15 	stw	r2,124(sp)
 c005998:	010001c4 	movi	r4,7
 c00599c:	20825416 	blt	r4,r2,c0062f0 <___svfprintf_internal_r+0x11d0>
 c0059a0:	42000204 	addi	r8,r8,8
 c0059a4:	d9003017 	ldw	r4,192(sp)
 c0059a8:	00802004 	movi	r2,128
 c0059ac:	2081b926 	beq	r4,r2,c006094 <___svfprintf_internal_r+0xf74>
 c0059b0:	d9402a17 	ldw	r5,168(sp)
 c0059b4:	d8802b17 	ldw	r2,172(sp)
 c0059b8:	28adc83a 	sub	r22,r5,r2
 c0059bc:	05802f0e 	bge	zero,r22,c005a7c <___svfprintf_internal_r+0x95c>
 c0059c0:	07000404 	movi	fp,16
 c0059c4:	d8801f17 	ldw	r2,124(sp)
 c0059c8:	e583e20e 	bge	fp,r22,c006954 <___svfprintf_internal_r+0x1834>
 c0059cc:	014300b4 	movhi	r5,3074
 c0059d0:	2961ef84 	addi	r5,r5,-30786
 c0059d4:	dc402a15 	stw	r17,168(sp)
 c0059d8:	d9402c15 	stw	r5,176(sp)
 c0059dc:	b023883a 	mov	r17,r22
 c0059e0:	050001c4 	movi	r20,7
 c0059e4:	902d883a 	mov	r22,r18
 c0059e8:	8025883a 	mov	r18,r16
 c0059ec:	dc002d17 	ldw	r16,180(sp)
 c0059f0:	00000306 	br	c005a00 <___svfprintf_internal_r+0x8e0>
 c0059f4:	8c7ffc04 	addi	r17,r17,-16
 c0059f8:	42000204 	addi	r8,r8,8
 c0059fc:	e440110e 	bge	fp,r17,c005a44 <___svfprintf_internal_r+0x924>
 c005a00:	18c00404 	addi	r3,r3,16
 c005a04:	10800044 	addi	r2,r2,1
 c005a08:	45400015 	stw	r21,0(r8)
 c005a0c:	47000115 	stw	fp,4(r8)
 c005a10:	d8c02015 	stw	r3,128(sp)
 c005a14:	d8801f15 	stw	r2,124(sp)
 c005a18:	a0bff60e 	bge	r20,r2,c0059f4 <__alt_data_end+0xfc0059f4>
 c005a1c:	d9801e04 	addi	r6,sp,120
 c005a20:	800b883a 	mov	r5,r16
 c005a24:	9809883a 	mov	r4,r19
 c005a28:	c00eac00 	call	c00eac0 <__ssprint_r>
 c005a2c:	103ea31e 	bne	r2,zero,c0054bc <__alt_data_end+0xfc0054bc>
 c005a30:	8c7ffc04 	addi	r17,r17,-16
 c005a34:	d8c02017 	ldw	r3,128(sp)
 c005a38:	d8801f17 	ldw	r2,124(sp)
 c005a3c:	da000404 	addi	r8,sp,16
 c005a40:	e47fef16 	blt	fp,r17,c005a00 <__alt_data_end+0xfc005a00>
 c005a44:	9021883a 	mov	r16,r18
 c005a48:	b025883a 	mov	r18,r22
 c005a4c:	882d883a 	mov	r22,r17
 c005a50:	dc402a17 	ldw	r17,168(sp)
 c005a54:	d9002c17 	ldw	r4,176(sp)
 c005a58:	1d87883a 	add	r3,r3,r22
 c005a5c:	10800044 	addi	r2,r2,1
 c005a60:	41000015 	stw	r4,0(r8)
 c005a64:	45800115 	stw	r22,4(r8)
 c005a68:	d8c02015 	stw	r3,128(sp)
 c005a6c:	d8801f15 	stw	r2,124(sp)
 c005a70:	010001c4 	movi	r4,7
 c005a74:	20820e16 	blt	r4,r2,c0062b0 <___svfprintf_internal_r+0x1190>
 c005a78:	42000204 	addi	r8,r8,8
 c005a7c:	9080400c 	andi	r2,r18,256
 c005a80:	10013a1e 	bne	r2,zero,c005f6c <___svfprintf_internal_r+0xe4c>
 c005a84:	d9402b17 	ldw	r5,172(sp)
 c005a88:	d8801f17 	ldw	r2,124(sp)
 c005a8c:	44000015 	stw	r16,0(r8)
 c005a90:	1947883a 	add	r3,r3,r5
 c005a94:	10800044 	addi	r2,r2,1
 c005a98:	41400115 	stw	r5,4(r8)
 c005a9c:	d8c02015 	stw	r3,128(sp)
 c005aa0:	d8801f15 	stw	r2,124(sp)
 c005aa4:	010001c4 	movi	r4,7
 c005aa8:	2081f316 	blt	r4,r2,c006278 <___svfprintf_internal_r+0x1158>
 c005aac:	42000204 	addi	r8,r8,8
 c005ab0:	9480010c 	andi	r18,r18,4
 c005ab4:	90003226 	beq	r18,zero,c005b80 <___svfprintf_internal_r+0xa60>
 c005ab8:	d9403117 	ldw	r5,196(sp)
 c005abc:	d8802917 	ldw	r2,164(sp)
 c005ac0:	28a1c83a 	sub	r16,r5,r2
 c005ac4:	04002e0e 	bge	zero,r16,c005b80 <___svfprintf_internal_r+0xa60>
 c005ac8:	04400404 	movi	r17,16
 c005acc:	d8801f17 	ldw	r2,124(sp)
 c005ad0:	8c04db0e 	bge	r17,r16,c006e40 <___svfprintf_internal_r+0x1d20>
 c005ad4:	014300b4 	movhi	r5,3074
 c005ad8:	2961f384 	addi	r5,r5,-30770
 c005adc:	d9403515 	stw	r5,212(sp)
 c005ae0:	048001c4 	movi	r18,7
 c005ae4:	dd002d17 	ldw	r20,180(sp)
 c005ae8:	00000306 	br	c005af8 <___svfprintf_internal_r+0x9d8>
 c005aec:	843ffc04 	addi	r16,r16,-16
 c005af0:	42000204 	addi	r8,r8,8
 c005af4:	8c00130e 	bge	r17,r16,c005b44 <___svfprintf_internal_r+0xa24>
 c005af8:	010300b4 	movhi	r4,3074
 c005afc:	18c00404 	addi	r3,r3,16
 c005b00:	10800044 	addi	r2,r2,1
 c005b04:	2121f384 	addi	r4,r4,-30770
 c005b08:	41000015 	stw	r4,0(r8)
 c005b0c:	44400115 	stw	r17,4(r8)
 c005b10:	d8c02015 	stw	r3,128(sp)
 c005b14:	d8801f15 	stw	r2,124(sp)
 c005b18:	90bff40e 	bge	r18,r2,c005aec <__alt_data_end+0xfc005aec>
 c005b1c:	d9801e04 	addi	r6,sp,120
 c005b20:	a00b883a 	mov	r5,r20
 c005b24:	9809883a 	mov	r4,r19
 c005b28:	c00eac00 	call	c00eac0 <__ssprint_r>
 c005b2c:	103e631e 	bne	r2,zero,c0054bc <__alt_data_end+0xfc0054bc>
 c005b30:	843ffc04 	addi	r16,r16,-16
 c005b34:	d8c02017 	ldw	r3,128(sp)
 c005b38:	d8801f17 	ldw	r2,124(sp)
 c005b3c:	da000404 	addi	r8,sp,16
 c005b40:	8c3fed16 	blt	r17,r16,c005af8 <__alt_data_end+0xfc005af8>
 c005b44:	d9403517 	ldw	r5,212(sp)
 c005b48:	1c07883a 	add	r3,r3,r16
 c005b4c:	10800044 	addi	r2,r2,1
 c005b50:	41400015 	stw	r5,0(r8)
 c005b54:	44000115 	stw	r16,4(r8)
 c005b58:	d8c02015 	stw	r3,128(sp)
 c005b5c:	d8801f15 	stw	r2,124(sp)
 c005b60:	010001c4 	movi	r4,7
 c005b64:	2080060e 	bge	r4,r2,c005b80 <___svfprintf_internal_r+0xa60>
 c005b68:	d9402d17 	ldw	r5,180(sp)
 c005b6c:	d9801e04 	addi	r6,sp,120
 c005b70:	9809883a 	mov	r4,r19
 c005b74:	c00eac00 	call	c00eac0 <__ssprint_r>
 c005b78:	103e501e 	bne	r2,zero,c0054bc <__alt_data_end+0xfc0054bc>
 c005b7c:	d8c02017 	ldw	r3,128(sp)
 c005b80:	d8803117 	ldw	r2,196(sp)
 c005b84:	d9002917 	ldw	r4,164(sp)
 c005b88:	1100010e 	bge	r2,r4,c005b90 <___svfprintf_internal_r+0xa70>
 c005b8c:	2005883a 	mov	r2,r4
 c005b90:	d9402f17 	ldw	r5,188(sp)
 c005b94:	288b883a 	add	r5,r5,r2
 c005b98:	d9402f15 	stw	r5,188(sp)
 c005b9c:	1801be1e 	bne	r3,zero,c006298 <___svfprintf_internal_r+0x1178>
 c005ba0:	b8800007 	ldb	r2,0(r23)
 c005ba4:	d8001f15 	stw	zero,124(sp)
 c005ba8:	da000404 	addi	r8,sp,16
 c005bac:	103d891e 	bne	r2,zero,c0051d4 <__alt_data_end+0xfc0051d4>
 c005bb0:	b823883a 	mov	r17,r23
 c005bb4:	003d9f06 	br	c005234 <__alt_data_end+0xfc005234>
 c005bb8:	8025883a 	mov	r18,r16
 c005bbc:	dc002903 	ldbu	r16,164(sp)
 c005bc0:	e011883a 	mov	r8,fp
 c005bc4:	84003fcc 	andi	r16,r16,255
 c005bc8:	8005e61e 	bne	r16,zero,c007364 <___svfprintf_internal_r+0x2244>
 c005bcc:	94800414 	ori	r18,r18,16
 c005bd0:	9080080c 	andi	r2,r18,32
 c005bd4:	10022026 	beq	r2,zero,c006458 <___svfprintf_internal_r+0x1338>
 c005bd8:	d9002e17 	ldw	r4,184(sp)
 c005bdc:	d9402a17 	ldw	r5,168(sp)
 c005be0:	d8002785 	stb	zero,158(sp)
 c005be4:	20c00204 	addi	r3,r4,8
 c005be8:	25000017 	ldw	r20,0(r4)
 c005bec:	25800117 	ldw	r22,4(r4)
 c005bf0:	2803ad16 	blt	r5,zero,c006aa8 <___svfprintf_internal_r+0x1988>
 c005bf4:	013fdfc4 	movi	r4,-129
 c005bf8:	a584b03a 	or	r2,r20,r22
 c005bfc:	d8c02e15 	stw	r3,184(sp)
 c005c00:	9124703a 	and	r18,r18,r4
 c005c04:	0039883a 	mov	fp,zero
 c005c08:	103eb01e 	bne	r2,zero,c0056cc <__alt_data_end+0xfc0056cc>
 c005c0c:	d8802a17 	ldw	r2,168(sp)
 c005c10:	1002e71e 	bne	r2,zero,c0067b0 <___svfprintf_internal_r+0x1690>
 c005c14:	d8002a15 	stw	zero,168(sp)
 c005c18:	d8002b15 	stw	zero,172(sp)
 c005c1c:	dc001e04 	addi	r16,sp,120
 c005c20:	003ef706 	br	c005800 <__alt_data_end+0xfc005800>
 c005c24:	8025883a 	mov	r18,r16
 c005c28:	dc002903 	ldbu	r16,164(sp)
 c005c2c:	e011883a 	mov	r8,fp
 c005c30:	84003fcc 	andi	r16,r16,255
 c005c34:	8005c81e 	bne	r16,zero,c007358 <___svfprintf_internal_r+0x2238>
 c005c38:	010300b4 	movhi	r4,3074
 c005c3c:	2121e304 	addi	r4,r4,-30836
 c005c40:	d9003a15 	stw	r4,232(sp)
 c005c44:	9080080c 	andi	r2,r18,32
 c005c48:	10007226 	beq	r2,zero,c005e14 <___svfprintf_internal_r+0xcf4>
 c005c4c:	d9402e17 	ldw	r5,184(sp)
 c005c50:	2d000017 	ldw	r20,0(r5)
 c005c54:	2d800117 	ldw	r22,4(r5)
 c005c58:	29400204 	addi	r5,r5,8
 c005c5c:	d9402e15 	stw	r5,184(sp)
 c005c60:	9080004c 	andi	r2,r18,1
 c005c64:	1001aa26 	beq	r2,zero,c006310 <___svfprintf_internal_r+0x11f0>
 c005c68:	a584b03a 	or	r2,r20,r22
 c005c6c:	10032526 	beq	r2,zero,c006904 <___svfprintf_internal_r+0x17e4>
 c005c70:	d8c02a17 	ldw	r3,168(sp)
 c005c74:	00800c04 	movi	r2,48
 c005c78:	d8802705 	stb	r2,156(sp)
 c005c7c:	dc402745 	stb	r17,157(sp)
 c005c80:	d8002785 	stb	zero,158(sp)
 c005c84:	90800094 	ori	r2,r18,2
 c005c88:	1804a316 	blt	r3,zero,c006f18 <___svfprintf_internal_r+0x1df8>
 c005c8c:	00bfdfc4 	movi	r2,-129
 c005c90:	90a4703a 	and	r18,r18,r2
 c005c94:	94800094 	ori	r18,r18,2
 c005c98:	0039883a 	mov	fp,zero
 c005c9c:	d9003a17 	ldw	r4,232(sp)
 c005ca0:	dc001e04 	addi	r16,sp,120
 c005ca4:	a08003cc 	andi	r2,r20,15
 c005ca8:	b006973a 	slli	r3,r22,28
 c005cac:	2085883a 	add	r2,r4,r2
 c005cb0:	a028d13a 	srli	r20,r20,4
 c005cb4:	10800003 	ldbu	r2,0(r2)
 c005cb8:	b02cd13a 	srli	r22,r22,4
 c005cbc:	843fffc4 	addi	r16,r16,-1
 c005cc0:	1d28b03a 	or	r20,r3,r20
 c005cc4:	80800005 	stb	r2,0(r16)
 c005cc8:	a584b03a 	or	r2,r20,r22
 c005ccc:	103ff51e 	bne	r2,zero,c005ca4 <__alt_data_end+0xfc005ca4>
 c005cd0:	d8c02817 	ldw	r3,160(sp)
 c005cd4:	1c07c83a 	sub	r3,r3,r16
 c005cd8:	d8c02b15 	stw	r3,172(sp)
 c005cdc:	003ec806 	br	c005800 <__alt_data_end+0xfc005800>
 c005ce0:	d8c02e17 	ldw	r3,184(sp)
 c005ce4:	d9002e17 	ldw	r4,184(sp)
 c005ce8:	8025883a 	mov	r18,r16
 c005cec:	18800017 	ldw	r2,0(r3)
 c005cf0:	21000104 	addi	r4,r4,4
 c005cf4:	00c00044 	movi	r3,1
 c005cf8:	e011883a 	mov	r8,fp
 c005cfc:	d8c02915 	stw	r3,164(sp)
 c005d00:	d8002785 	stb	zero,158(sp)
 c005d04:	d8801405 	stb	r2,80(sp)
 c005d08:	d9002e15 	stw	r4,184(sp)
 c005d0c:	d8c02b15 	stw	r3,172(sp)
 c005d10:	d8002a15 	stw	zero,168(sp)
 c005d14:	d8003215 	stw	zero,200(sp)
 c005d18:	dc001404 	addi	r16,sp,80
 c005d1c:	0039883a 	mov	fp,zero
 c005d20:	003ec406 	br	c005834 <__alt_data_end+0xfc005834>
 c005d24:	8025883a 	mov	r18,r16
 c005d28:	dc002903 	ldbu	r16,164(sp)
 c005d2c:	e011883a 	mov	r8,fp
 c005d30:	84003fcc 	andi	r16,r16,255
 c005d34:	803e8726 	beq	r16,zero,c005754 <__alt_data_end+0xfc005754>
 c005d38:	d8c02b03 	ldbu	r3,172(sp)
 c005d3c:	d8c02785 	stb	r3,158(sp)
 c005d40:	003e8406 	br	c005754 <__alt_data_end+0xfc005754>
 c005d44:	00c00044 	movi	r3,1
 c005d48:	d8c02905 	stb	r3,164(sp)
 c005d4c:	00c00ac4 	movi	r3,43
 c005d50:	d8c02b05 	stb	r3,172(sp)
 c005d54:	bc400007 	ldb	r17,0(r23)
 c005d58:	003d4606 	br	c005274 <__alt_data_end+0xfc005274>
 c005d5c:	84000814 	ori	r16,r16,32
 c005d60:	bc400007 	ldb	r17,0(r23)
 c005d64:	003d4306 	br	c005274 <__alt_data_end+0xfc005274>
 c005d68:	d8802e17 	ldw	r2,184(sp)
 c005d6c:	8025883a 	mov	r18,r16
 c005d70:	d8002785 	stb	zero,158(sp)
 c005d74:	14000017 	ldw	r16,0(r2)
 c005d78:	e011883a 	mov	r8,fp
 c005d7c:	15000104 	addi	r20,r2,4
 c005d80:	80042126 	beq	r16,zero,c006e08 <___svfprintf_internal_r+0x1ce8>
 c005d84:	d8c02a17 	ldw	r3,168(sp)
 c005d88:	1803ee16 	blt	r3,zero,c006d44 <___svfprintf_internal_r+0x1c24>
 c005d8c:	180d883a 	mov	r6,r3
 c005d90:	000b883a 	mov	r5,zero
 c005d94:	8009883a 	mov	r4,r16
 c005d98:	df003e15 	stw	fp,248(sp)
 c005d9c:	c00cd140 	call	c00cd14 <memchr>
 c005da0:	da003e17 	ldw	r8,248(sp)
 c005da4:	10046a26 	beq	r2,zero,c006f50 <___svfprintf_internal_r+0x1e30>
 c005da8:	1405c83a 	sub	r2,r2,r16
 c005dac:	d8802b15 	stw	r2,172(sp)
 c005db0:	1003ea16 	blt	r2,zero,c006d5c <___svfprintf_internal_r+0x1c3c>
 c005db4:	df002783 	ldbu	fp,158(sp)
 c005db8:	d8802915 	stw	r2,164(sp)
 c005dbc:	dd002e15 	stw	r20,184(sp)
 c005dc0:	d8002a15 	stw	zero,168(sp)
 c005dc4:	d8003215 	stw	zero,200(sp)
 c005dc8:	003e9306 	br	c005818 <__alt_data_end+0xfc005818>
 c005dcc:	8025883a 	mov	r18,r16
 c005dd0:	dc002903 	ldbu	r16,164(sp)
 c005dd4:	e011883a 	mov	r8,fp
 c005dd8:	84003fcc 	andi	r16,r16,255
 c005ddc:	803f7c26 	beq	r16,zero,c005bd0 <__alt_data_end+0xfc005bd0>
 c005de0:	d8c02b03 	ldbu	r3,172(sp)
 c005de4:	d8c02785 	stb	r3,158(sp)
 c005de8:	003f7906 	br	c005bd0 <__alt_data_end+0xfc005bd0>
 c005dec:	8025883a 	mov	r18,r16
 c005df0:	dc002903 	ldbu	r16,164(sp)
 c005df4:	e011883a 	mov	r8,fp
 c005df8:	84003fcc 	andi	r16,r16,255
 c005dfc:	8005741e 	bne	r16,zero,c0073d0 <___svfprintf_internal_r+0x22b0>
 c005e00:	010300b4 	movhi	r4,3074
 c005e04:	2121e804 	addi	r4,r4,-30816
 c005e08:	d9003a15 	stw	r4,232(sp)
 c005e0c:	9080080c 	andi	r2,r18,32
 c005e10:	103f8e1e 	bne	r2,zero,c005c4c <__alt_data_end+0xfc005c4c>
 c005e14:	9080040c 	andi	r2,r18,16
 c005e18:	1002a726 	beq	r2,zero,c0068b8 <___svfprintf_internal_r+0x1798>
 c005e1c:	d8802e17 	ldw	r2,184(sp)
 c005e20:	002d883a 	mov	r22,zero
 c005e24:	15000017 	ldw	r20,0(r2)
 c005e28:	10800104 	addi	r2,r2,4
 c005e2c:	d8802e15 	stw	r2,184(sp)
 c005e30:	003f8b06 	br	c005c60 <__alt_data_end+0xfc005c60>
 c005e34:	84000054 	ori	r16,r16,1
 c005e38:	bc400007 	ldb	r17,0(r23)
 c005e3c:	003d0d06 	br	c005274 <__alt_data_end+0xfc005274>
 c005e40:	d8802b07 	ldb	r2,172(sp)
 c005e44:	1002a41e 	bne	r2,zero,c0068d8 <___svfprintf_internal_r+0x17b8>
 c005e48:	00c00044 	movi	r3,1
 c005e4c:	d8c02905 	stb	r3,164(sp)
 c005e50:	00c00804 	movi	r3,32
 c005e54:	d8c02b05 	stb	r3,172(sp)
 c005e58:	bc400007 	ldb	r17,0(r23)
 c005e5c:	003d0506 	br	c005274 <__alt_data_end+0xfc005274>
 c005e60:	8025883a 	mov	r18,r16
 c005e64:	dc002903 	ldbu	r16,164(sp)
 c005e68:	e011883a 	mov	r8,fp
 c005e6c:	84003fcc 	andi	r16,r16,255
 c005e70:	803e0626 	beq	r16,zero,c00568c <__alt_data_end+0xfc00568c>
 c005e74:	d8c02b03 	ldbu	r3,172(sp)
 c005e78:	d8c02785 	stb	r3,158(sp)
 c005e7c:	003e0306 	br	c00568c <__alt_data_end+0xfc00568c>
 c005e80:	bc400007 	ldb	r17,0(r23)
 c005e84:	00801b04 	movi	r2,108
 c005e88:	88830a26 	beq	r17,r2,c006ab4 <___svfprintf_internal_r+0x1994>
 c005e8c:	84000414 	ori	r16,r16,16
 c005e90:	003cf806 	br	c005274 <__alt_data_end+0xfc005274>
 c005e94:	8025883a 	mov	r18,r16
 c005e98:	dc002903 	ldbu	r16,164(sp)
 c005e9c:	e011883a 	mov	r8,fp
 c005ea0:	84003fcc 	andi	r16,r16,255
 c005ea4:	8005471e 	bne	r16,zero,c0073c4 <___svfprintf_internal_r+0x22a4>
 c005ea8:	9080080c 	andi	r2,r18,32
 c005eac:	10028c26 	beq	r2,zero,c0068e0 <___svfprintf_internal_r+0x17c0>
 c005eb0:	d9002e17 	ldw	r4,184(sp)
 c005eb4:	d9402f17 	ldw	r5,188(sp)
 c005eb8:	20800017 	ldw	r2,0(r4)
 c005ebc:	2807d7fa 	srai	r3,r5,31
 c005ec0:	21000104 	addi	r4,r4,4
 c005ec4:	d9002e15 	stw	r4,184(sp)
 c005ec8:	11400015 	stw	r5,0(r2)
 c005ecc:	10c00115 	stw	r3,4(r2)
 c005ed0:	003cbe06 	br	c0051cc <__alt_data_end+0xfc0051cc>
 c005ed4:	84001014 	ori	r16,r16,64
 c005ed8:	bc400007 	ldb	r17,0(r23)
 c005edc:	003ce506 	br	c005274 <__alt_data_end+0xfc005274>
 c005ee0:	010300b4 	movhi	r4,3074
 c005ee4:	2121e804 	addi	r4,r4,-30816
 c005ee8:	0039883a 	mov	fp,zero
 c005eec:	d9003a15 	stw	r4,232(sp)
 c005ef0:	04401e04 	movi	r17,120
 c005ef4:	003f6906 	br	c005c9c <__alt_data_end+0xfc005c9c>
 c005ef8:	8025883a 	mov	r18,r16
 c005efc:	dc002903 	ldbu	r16,164(sp)
 c005f00:	e011883a 	mov	r8,fp
 c005f04:	84003fcc 	andi	r16,r16,255
 c005f08:	8005261e 	bne	r16,zero,c0073a4 <___svfprintf_internal_r+0x2284>
 c005f0c:	883d6526 	beq	r17,zero,c0054a4 <__alt_data_end+0xfc0054a4>
 c005f10:	00c00044 	movi	r3,1
 c005f14:	d8c02915 	stw	r3,164(sp)
 c005f18:	dc401405 	stb	r17,80(sp)
 c005f1c:	d8002785 	stb	zero,158(sp)
 c005f20:	003f7a06 	br	c005d0c <__alt_data_end+0xfc005d0c>
 c005f24:	010300b4 	movhi	r4,3074
 c005f28:	2121e804 	addi	r4,r4,-30816
 c005f2c:	d9003a15 	stw	r4,232(sp)
 c005f30:	d8c02e15 	stw	r3,184(sp)
 c005f34:	1025883a 	mov	r18,r2
 c005f38:	04401e04 	movi	r17,120
 c005f3c:	a584b03a 	or	r2,r20,r22
 c005f40:	1000fa1e 	bne	r2,zero,c00632c <___svfprintf_internal_r+0x120c>
 c005f44:	0039883a 	mov	fp,zero
 c005f48:	00800084 	movi	r2,2
 c005f4c:	10803fcc 	andi	r2,r2,255
 c005f50:	00c00044 	movi	r3,1
 c005f54:	10c21626 	beq	r2,r3,c0067b0 <___svfprintf_internal_r+0x1690>
 c005f58:	00c00084 	movi	r3,2
 c005f5c:	10fe0e1e 	bne	r2,r3,c005798 <__alt_data_end+0xfc005798>
 c005f60:	003d4606 	br	c00547c <__alt_data_end+0xfc00547c>
 c005f64:	d8c02017 	ldw	r3,128(sp)
 c005f68:	003e7306 	br	c005938 <__alt_data_end+0xfc005938>
 c005f6c:	00801944 	movi	r2,101
 c005f70:	14407c0e 	bge	r2,r17,c006164 <___svfprintf_internal_r+0x1044>
 c005f74:	d9003617 	ldw	r4,216(sp)
 c005f78:	d9403717 	ldw	r5,220(sp)
 c005f7c:	000d883a 	mov	r6,zero
 c005f80:	000f883a 	mov	r7,zero
 c005f84:	d8c03d15 	stw	r3,244(sp)
 c005f88:	da003e15 	stw	r8,248(sp)
 c005f8c:	c013fbc0 	call	c013fbc <__eqdf2>
 c005f90:	d8c03d17 	ldw	r3,244(sp)
 c005f94:	da003e17 	ldw	r8,248(sp)
 c005f98:	1000f51e 	bne	r2,zero,c006370 <___svfprintf_internal_r+0x1250>
 c005f9c:	d8801f17 	ldw	r2,124(sp)
 c005fa0:	010300b4 	movhi	r4,3074
 c005fa4:	2121ef04 	addi	r4,r4,-30788
 c005fa8:	18c00044 	addi	r3,r3,1
 c005fac:	10800044 	addi	r2,r2,1
 c005fb0:	41000015 	stw	r4,0(r8)
 c005fb4:	01000044 	movi	r4,1
 c005fb8:	41000115 	stw	r4,4(r8)
 c005fbc:	d8c02015 	stw	r3,128(sp)
 c005fc0:	d8801f15 	stw	r2,124(sp)
 c005fc4:	010001c4 	movi	r4,7
 c005fc8:	20826616 	blt	r4,r2,c006964 <___svfprintf_internal_r+0x1844>
 c005fcc:	42000204 	addi	r8,r8,8
 c005fd0:	d8802617 	ldw	r2,152(sp)
 c005fd4:	d9403317 	ldw	r5,204(sp)
 c005fd8:	11400216 	blt	r2,r5,c005fe4 <___svfprintf_internal_r+0xec4>
 c005fdc:	9080004c 	andi	r2,r18,1
 c005fe0:	103eb326 	beq	r2,zero,c005ab0 <__alt_data_end+0xfc005ab0>
 c005fe4:	d8803817 	ldw	r2,224(sp)
 c005fe8:	d9003417 	ldw	r4,208(sp)
 c005fec:	d9403817 	ldw	r5,224(sp)
 c005ff0:	1887883a 	add	r3,r3,r2
 c005ff4:	d8801f17 	ldw	r2,124(sp)
 c005ff8:	41000015 	stw	r4,0(r8)
 c005ffc:	41400115 	stw	r5,4(r8)
 c006000:	10800044 	addi	r2,r2,1
 c006004:	d8c02015 	stw	r3,128(sp)
 c006008:	d8801f15 	stw	r2,124(sp)
 c00600c:	010001c4 	movi	r4,7
 c006010:	2082af16 	blt	r4,r2,c006ad0 <___svfprintf_internal_r+0x19b0>
 c006014:	42000204 	addi	r8,r8,8
 c006018:	d8803317 	ldw	r2,204(sp)
 c00601c:	143fffc4 	addi	r16,r2,-1
 c006020:	043ea30e 	bge	zero,r16,c005ab0 <__alt_data_end+0xfc005ab0>
 c006024:	04400404 	movi	r17,16
 c006028:	d8801f17 	ldw	r2,124(sp)
 c00602c:	8c00860e 	bge	r17,r16,c006248 <___svfprintf_internal_r+0x1128>
 c006030:	014300b4 	movhi	r5,3074
 c006034:	2961ef84 	addi	r5,r5,-30786
 c006038:	d9402c15 	stw	r5,176(sp)
 c00603c:	058001c4 	movi	r22,7
 c006040:	dd002d17 	ldw	r20,180(sp)
 c006044:	00000306 	br	c006054 <___svfprintf_internal_r+0xf34>
 c006048:	42000204 	addi	r8,r8,8
 c00604c:	843ffc04 	addi	r16,r16,-16
 c006050:	8c00800e 	bge	r17,r16,c006254 <___svfprintf_internal_r+0x1134>
 c006054:	18c00404 	addi	r3,r3,16
 c006058:	10800044 	addi	r2,r2,1
 c00605c:	45400015 	stw	r21,0(r8)
 c006060:	44400115 	stw	r17,4(r8)
 c006064:	d8c02015 	stw	r3,128(sp)
 c006068:	d8801f15 	stw	r2,124(sp)
 c00606c:	b0bff60e 	bge	r22,r2,c006048 <__alt_data_end+0xfc006048>
 c006070:	d9801e04 	addi	r6,sp,120
 c006074:	a00b883a 	mov	r5,r20
 c006078:	9809883a 	mov	r4,r19
 c00607c:	c00eac00 	call	c00eac0 <__ssprint_r>
 c006080:	103d0e1e 	bne	r2,zero,c0054bc <__alt_data_end+0xfc0054bc>
 c006084:	d8c02017 	ldw	r3,128(sp)
 c006088:	d8801f17 	ldw	r2,124(sp)
 c00608c:	da000404 	addi	r8,sp,16
 c006090:	003fee06 	br	c00604c <__alt_data_end+0xfc00604c>
 c006094:	d9403117 	ldw	r5,196(sp)
 c006098:	d8802917 	ldw	r2,164(sp)
 c00609c:	28adc83a 	sub	r22,r5,r2
 c0060a0:	05be430e 	bge	zero,r22,c0059b0 <__alt_data_end+0xfc0059b0>
 c0060a4:	07000404 	movi	fp,16
 c0060a8:	d8801f17 	ldw	r2,124(sp)
 c0060ac:	e583a20e 	bge	fp,r22,c006f38 <___svfprintf_internal_r+0x1e18>
 c0060b0:	014300b4 	movhi	r5,3074
 c0060b4:	2961ef84 	addi	r5,r5,-30786
 c0060b8:	dc403015 	stw	r17,192(sp)
 c0060bc:	d9402c15 	stw	r5,176(sp)
 c0060c0:	b023883a 	mov	r17,r22
 c0060c4:	050001c4 	movi	r20,7
 c0060c8:	902d883a 	mov	r22,r18
 c0060cc:	8025883a 	mov	r18,r16
 c0060d0:	dc002d17 	ldw	r16,180(sp)
 c0060d4:	00000306 	br	c0060e4 <___svfprintf_internal_r+0xfc4>
 c0060d8:	8c7ffc04 	addi	r17,r17,-16
 c0060dc:	42000204 	addi	r8,r8,8
 c0060e0:	e440110e 	bge	fp,r17,c006128 <___svfprintf_internal_r+0x1008>
 c0060e4:	18c00404 	addi	r3,r3,16
 c0060e8:	10800044 	addi	r2,r2,1
 c0060ec:	45400015 	stw	r21,0(r8)
 c0060f0:	47000115 	stw	fp,4(r8)
 c0060f4:	d8c02015 	stw	r3,128(sp)
 c0060f8:	d8801f15 	stw	r2,124(sp)
 c0060fc:	a0bff60e 	bge	r20,r2,c0060d8 <__alt_data_end+0xfc0060d8>
 c006100:	d9801e04 	addi	r6,sp,120
 c006104:	800b883a 	mov	r5,r16
 c006108:	9809883a 	mov	r4,r19
 c00610c:	c00eac00 	call	c00eac0 <__ssprint_r>
 c006110:	103cea1e 	bne	r2,zero,c0054bc <__alt_data_end+0xfc0054bc>
 c006114:	8c7ffc04 	addi	r17,r17,-16
 c006118:	d8c02017 	ldw	r3,128(sp)
 c00611c:	d8801f17 	ldw	r2,124(sp)
 c006120:	da000404 	addi	r8,sp,16
 c006124:	e47fef16 	blt	fp,r17,c0060e4 <__alt_data_end+0xfc0060e4>
 c006128:	9021883a 	mov	r16,r18
 c00612c:	b025883a 	mov	r18,r22
 c006130:	882d883a 	mov	r22,r17
 c006134:	dc403017 	ldw	r17,192(sp)
 c006138:	d9002c17 	ldw	r4,176(sp)
 c00613c:	1d87883a 	add	r3,r3,r22
 c006140:	10800044 	addi	r2,r2,1
 c006144:	41000015 	stw	r4,0(r8)
 c006148:	45800115 	stw	r22,4(r8)
 c00614c:	d8c02015 	stw	r3,128(sp)
 c006150:	d8801f15 	stw	r2,124(sp)
 c006154:	010001c4 	movi	r4,7
 c006158:	20819a16 	blt	r4,r2,c0067c4 <___svfprintf_internal_r+0x16a4>
 c00615c:	42000204 	addi	r8,r8,8
 c006160:	003e1306 	br	c0059b0 <__alt_data_end+0xfc0059b0>
 c006164:	d9403317 	ldw	r5,204(sp)
 c006168:	00800044 	movi	r2,1
 c00616c:	18c00044 	addi	r3,r3,1
 c006170:	1141710e 	bge	r2,r5,c006738 <___svfprintf_internal_r+0x1618>
 c006174:	dc401f17 	ldw	r17,124(sp)
 c006178:	00800044 	movi	r2,1
 c00617c:	40800115 	stw	r2,4(r8)
 c006180:	8c400044 	addi	r17,r17,1
 c006184:	44000015 	stw	r16,0(r8)
 c006188:	d8c02015 	stw	r3,128(sp)
 c00618c:	dc401f15 	stw	r17,124(sp)
 c006190:	008001c4 	movi	r2,7
 c006194:	14417416 	blt	r2,r17,c006768 <___svfprintf_internal_r+0x1648>
 c006198:	42000204 	addi	r8,r8,8
 c00619c:	d8803817 	ldw	r2,224(sp)
 c0061a0:	d9003417 	ldw	r4,208(sp)
 c0061a4:	8c400044 	addi	r17,r17,1
 c0061a8:	10c7883a 	add	r3,r2,r3
 c0061ac:	40800115 	stw	r2,4(r8)
 c0061b0:	41000015 	stw	r4,0(r8)
 c0061b4:	d8c02015 	stw	r3,128(sp)
 c0061b8:	dc401f15 	stw	r17,124(sp)
 c0061bc:	008001c4 	movi	r2,7
 c0061c0:	14417216 	blt	r2,r17,c00678c <___svfprintf_internal_r+0x166c>
 c0061c4:	45800204 	addi	r22,r8,8
 c0061c8:	d9003617 	ldw	r4,216(sp)
 c0061cc:	d9403717 	ldw	r5,220(sp)
 c0061d0:	000d883a 	mov	r6,zero
 c0061d4:	000f883a 	mov	r7,zero
 c0061d8:	d8c03d15 	stw	r3,244(sp)
 c0061dc:	c013fbc0 	call	c013fbc <__eqdf2>
 c0061e0:	d8c03d17 	ldw	r3,244(sp)
 c0061e4:	1000b326 	beq	r2,zero,c0064b4 <___svfprintf_internal_r+0x1394>
 c0061e8:	d9403317 	ldw	r5,204(sp)
 c0061ec:	84000044 	addi	r16,r16,1
 c0061f0:	8c400044 	addi	r17,r17,1
 c0061f4:	28bfffc4 	addi	r2,r5,-1
 c0061f8:	1887883a 	add	r3,r3,r2
 c0061fc:	b0800115 	stw	r2,4(r22)
 c006200:	b4000015 	stw	r16,0(r22)
 c006204:	d8c02015 	stw	r3,128(sp)
 c006208:	dc401f15 	stw	r17,124(sp)
 c00620c:	008001c4 	movi	r2,7
 c006210:	1440d216 	blt	r2,r17,c00655c <___svfprintf_internal_r+0x143c>
 c006214:	b5800204 	addi	r22,r22,8
 c006218:	d9003b17 	ldw	r4,236(sp)
 c00621c:	df0022c4 	addi	fp,sp,139
 c006220:	8c400044 	addi	r17,r17,1
 c006224:	20c7883a 	add	r3,r4,r3
 c006228:	b7000015 	stw	fp,0(r22)
 c00622c:	b1000115 	stw	r4,4(r22)
 c006230:	d8c02015 	stw	r3,128(sp)
 c006234:	dc401f15 	stw	r17,124(sp)
 c006238:	008001c4 	movi	r2,7
 c00623c:	14400e16 	blt	r2,r17,c006278 <___svfprintf_internal_r+0x1158>
 c006240:	b2000204 	addi	r8,r22,8
 c006244:	003e1a06 	br	c005ab0 <__alt_data_end+0xfc005ab0>
 c006248:	010300b4 	movhi	r4,3074
 c00624c:	2121ef84 	addi	r4,r4,-30786
 c006250:	d9002c15 	stw	r4,176(sp)
 c006254:	d9002c17 	ldw	r4,176(sp)
 c006258:	1c07883a 	add	r3,r3,r16
 c00625c:	44000115 	stw	r16,4(r8)
 c006260:	41000015 	stw	r4,0(r8)
 c006264:	10800044 	addi	r2,r2,1
 c006268:	d8c02015 	stw	r3,128(sp)
 c00626c:	d8801f15 	stw	r2,124(sp)
 c006270:	010001c4 	movi	r4,7
 c006274:	20be0d0e 	bge	r4,r2,c005aac <__alt_data_end+0xfc005aac>
 c006278:	d9402d17 	ldw	r5,180(sp)
 c00627c:	d9801e04 	addi	r6,sp,120
 c006280:	9809883a 	mov	r4,r19
 c006284:	c00eac00 	call	c00eac0 <__ssprint_r>
 c006288:	103c8c1e 	bne	r2,zero,c0054bc <__alt_data_end+0xfc0054bc>
 c00628c:	d8c02017 	ldw	r3,128(sp)
 c006290:	da000404 	addi	r8,sp,16
 c006294:	003e0606 	br	c005ab0 <__alt_data_end+0xfc005ab0>
 c006298:	d9402d17 	ldw	r5,180(sp)
 c00629c:	d9801e04 	addi	r6,sp,120
 c0062a0:	9809883a 	mov	r4,r19
 c0062a4:	c00eac00 	call	c00eac0 <__ssprint_r>
 c0062a8:	103e3d26 	beq	r2,zero,c005ba0 <__alt_data_end+0xfc005ba0>
 c0062ac:	003c8306 	br	c0054bc <__alt_data_end+0xfc0054bc>
 c0062b0:	d9402d17 	ldw	r5,180(sp)
 c0062b4:	d9801e04 	addi	r6,sp,120
 c0062b8:	9809883a 	mov	r4,r19
 c0062bc:	c00eac00 	call	c00eac0 <__ssprint_r>
 c0062c0:	103c7e1e 	bne	r2,zero,c0054bc <__alt_data_end+0xfc0054bc>
 c0062c4:	d8c02017 	ldw	r3,128(sp)
 c0062c8:	da000404 	addi	r8,sp,16
 c0062cc:	003deb06 	br	c005a7c <__alt_data_end+0xfc005a7c>
 c0062d0:	d9402d17 	ldw	r5,180(sp)
 c0062d4:	d9801e04 	addi	r6,sp,120
 c0062d8:	9809883a 	mov	r4,r19
 c0062dc:	c00eac00 	call	c00eac0 <__ssprint_r>
 c0062e0:	103c761e 	bne	r2,zero,c0054bc <__alt_data_end+0xfc0054bc>
 c0062e4:	d8c02017 	ldw	r3,128(sp)
 c0062e8:	da000404 	addi	r8,sp,16
 c0062ec:	003d9f06 	br	c00596c <__alt_data_end+0xfc00596c>
 c0062f0:	d9402d17 	ldw	r5,180(sp)
 c0062f4:	d9801e04 	addi	r6,sp,120
 c0062f8:	9809883a 	mov	r4,r19
 c0062fc:	c00eac00 	call	c00eac0 <__ssprint_r>
 c006300:	103c6e1e 	bne	r2,zero,c0054bc <__alt_data_end+0xfc0054bc>
 c006304:	d8c02017 	ldw	r3,128(sp)
 c006308:	da000404 	addi	r8,sp,16
 c00630c:	003da506 	br	c0059a4 <__alt_data_end+0xfc0059a4>
 c006310:	d9402a17 	ldw	r5,168(sp)
 c006314:	d8002785 	stb	zero,158(sp)
 c006318:	283f0816 	blt	r5,zero,c005f3c <__alt_data_end+0xfc005f3c>
 c00631c:	00ffdfc4 	movi	r3,-129
 c006320:	a584b03a 	or	r2,r20,r22
 c006324:	90e4703a 	and	r18,r18,r3
 c006328:	103c5126 	beq	r2,zero,c005470 <__alt_data_end+0xfc005470>
 c00632c:	0039883a 	mov	fp,zero
 c006330:	003e5a06 	br	c005c9c <__alt_data_end+0xfc005c9c>
 c006334:	9080040c 	andi	r2,r18,16
 c006338:	10013d26 	beq	r2,zero,c006830 <___svfprintf_internal_r+0x1710>
 c00633c:	d8c02e17 	ldw	r3,184(sp)
 c006340:	d9002a17 	ldw	r4,168(sp)
 c006344:	d8002785 	stb	zero,158(sp)
 c006348:	18800104 	addi	r2,r3,4
 c00634c:	1d000017 	ldw	r20,0(r3)
 c006350:	002d883a 	mov	r22,zero
 c006354:	20013f16 	blt	r4,zero,c006854 <___svfprintf_internal_r+0x1734>
 c006358:	00ffdfc4 	movi	r3,-129
 c00635c:	d8802e15 	stw	r2,184(sp)
 c006360:	90e4703a 	and	r18,r18,r3
 c006364:	a03d0926 	beq	r20,zero,c00578c <__alt_data_end+0xfc00578c>
 c006368:	0039883a 	mov	fp,zero
 c00636c:	003d0c06 	br	c0057a0 <__alt_data_end+0xfc0057a0>
 c006370:	dc402617 	ldw	r17,152(sp)
 c006374:	0441830e 	bge	zero,r17,c006984 <___svfprintf_internal_r+0x1864>
 c006378:	dc403217 	ldw	r17,200(sp)
 c00637c:	d8803317 	ldw	r2,204(sp)
 c006380:	1440010e 	bge	r2,r17,c006388 <___svfprintf_internal_r+0x1268>
 c006384:	1023883a 	mov	r17,r2
 c006388:	04400a0e 	bge	zero,r17,c0063b4 <___svfprintf_internal_r+0x1294>
 c00638c:	d8801f17 	ldw	r2,124(sp)
 c006390:	1c47883a 	add	r3,r3,r17
 c006394:	44000015 	stw	r16,0(r8)
 c006398:	10800044 	addi	r2,r2,1
 c00639c:	44400115 	stw	r17,4(r8)
 c0063a0:	d8c02015 	stw	r3,128(sp)
 c0063a4:	d8801f15 	stw	r2,124(sp)
 c0063a8:	010001c4 	movi	r4,7
 c0063ac:	20827516 	blt	r4,r2,c006d84 <___svfprintf_internal_r+0x1c64>
 c0063b0:	42000204 	addi	r8,r8,8
 c0063b4:	88027b16 	blt	r17,zero,c006da4 <___svfprintf_internal_r+0x1c84>
 c0063b8:	d9003217 	ldw	r4,200(sp)
 c0063bc:	2463c83a 	sub	r17,r4,r17
 c0063c0:	0440990e 	bge	zero,r17,c006628 <___svfprintf_internal_r+0x1508>
 c0063c4:	05800404 	movi	r22,16
 c0063c8:	d8801f17 	ldw	r2,124(sp)
 c0063cc:	b441530e 	bge	r22,r17,c00691c <___svfprintf_internal_r+0x17fc>
 c0063d0:	010300b4 	movhi	r4,3074
 c0063d4:	2121ef84 	addi	r4,r4,-30786
 c0063d8:	d9002c15 	stw	r4,176(sp)
 c0063dc:	070001c4 	movi	fp,7
 c0063e0:	dd002d17 	ldw	r20,180(sp)
 c0063e4:	00000306 	br	c0063f4 <___svfprintf_internal_r+0x12d4>
 c0063e8:	42000204 	addi	r8,r8,8
 c0063ec:	8c7ffc04 	addi	r17,r17,-16
 c0063f0:	b4414d0e 	bge	r22,r17,c006928 <___svfprintf_internal_r+0x1808>
 c0063f4:	18c00404 	addi	r3,r3,16
 c0063f8:	10800044 	addi	r2,r2,1
 c0063fc:	45400015 	stw	r21,0(r8)
 c006400:	45800115 	stw	r22,4(r8)
 c006404:	d8c02015 	stw	r3,128(sp)
 c006408:	d8801f15 	stw	r2,124(sp)
 c00640c:	e0bff60e 	bge	fp,r2,c0063e8 <__alt_data_end+0xfc0063e8>
 c006410:	d9801e04 	addi	r6,sp,120
 c006414:	a00b883a 	mov	r5,r20
 c006418:	9809883a 	mov	r4,r19
 c00641c:	c00eac00 	call	c00eac0 <__ssprint_r>
 c006420:	103c261e 	bne	r2,zero,c0054bc <__alt_data_end+0xfc0054bc>
 c006424:	d8c02017 	ldw	r3,128(sp)
 c006428:	d8801f17 	ldw	r2,124(sp)
 c00642c:	da000404 	addi	r8,sp,16
 c006430:	003fee06 	br	c0063ec <__alt_data_end+0xfc0063ec>
 c006434:	d9402d17 	ldw	r5,180(sp)
 c006438:	d9801e04 	addi	r6,sp,120
 c00643c:	9809883a 	mov	r4,r19
 c006440:	c00eac00 	call	c00eac0 <__ssprint_r>
 c006444:	103c1d1e 	bne	r2,zero,c0054bc <__alt_data_end+0xfc0054bc>
 c006448:	d8c02017 	ldw	r3,128(sp)
 c00644c:	df002787 	ldb	fp,158(sp)
 c006450:	da000404 	addi	r8,sp,16
 c006454:	003d3806 	br	c005938 <__alt_data_end+0xfc005938>
 c006458:	9080040c 	andi	r2,r18,16
 c00645c:	10005c26 	beq	r2,zero,c0065d0 <___svfprintf_internal_r+0x14b0>
 c006460:	d8c02e17 	ldw	r3,184(sp)
 c006464:	d9002a17 	ldw	r4,168(sp)
 c006468:	d8002785 	stb	zero,158(sp)
 c00646c:	18800104 	addi	r2,r3,4
 c006470:	1d000017 	ldw	r20,0(r3)
 c006474:	002d883a 	mov	r22,zero
 c006478:	20005e16 	blt	r4,zero,c0065f4 <___svfprintf_internal_r+0x14d4>
 c00647c:	00ffdfc4 	movi	r3,-129
 c006480:	d8802e15 	stw	r2,184(sp)
 c006484:	90e4703a 	and	r18,r18,r3
 c006488:	0039883a 	mov	fp,zero
 c00648c:	a03ddf26 	beq	r20,zero,c005c0c <__alt_data_end+0xfc005c0c>
 c006490:	00800244 	movi	r2,9
 c006494:	153c8e36 	bltu	r2,r20,c0056d0 <__alt_data_end+0xfc0056d0>
 c006498:	a5000c04 	addi	r20,r20,48
 c00649c:	dc001dc4 	addi	r16,sp,119
 c0064a0:	dd001dc5 	stb	r20,119(sp)
 c0064a4:	d8c02817 	ldw	r3,160(sp)
 c0064a8:	1c07c83a 	sub	r3,r3,r16
 c0064ac:	d8c02b15 	stw	r3,172(sp)
 c0064b0:	003cd306 	br	c005800 <__alt_data_end+0xfc005800>
 c0064b4:	d8803317 	ldw	r2,204(sp)
 c0064b8:	143fffc4 	addi	r16,r2,-1
 c0064bc:	043f560e 	bge	zero,r16,c006218 <__alt_data_end+0xfc006218>
 c0064c0:	07000404 	movi	fp,16
 c0064c4:	e403530e 	bge	fp,r16,c007214 <___svfprintf_internal_r+0x20f4>
 c0064c8:	014300b4 	movhi	r5,3074
 c0064cc:	2961ef84 	addi	r5,r5,-30786
 c0064d0:	d9402c15 	stw	r5,176(sp)
 c0064d4:	01c001c4 	movi	r7,7
 c0064d8:	dd002d17 	ldw	r20,180(sp)
 c0064dc:	00000306 	br	c0064ec <___svfprintf_internal_r+0x13cc>
 c0064e0:	843ffc04 	addi	r16,r16,-16
 c0064e4:	b5800204 	addi	r22,r22,8
 c0064e8:	e400130e 	bge	fp,r16,c006538 <___svfprintf_internal_r+0x1418>
 c0064ec:	18c00404 	addi	r3,r3,16
 c0064f0:	8c400044 	addi	r17,r17,1
 c0064f4:	b5400015 	stw	r21,0(r22)
 c0064f8:	b7000115 	stw	fp,4(r22)
 c0064fc:	d8c02015 	stw	r3,128(sp)
 c006500:	dc401f15 	stw	r17,124(sp)
 c006504:	3c7ff60e 	bge	r7,r17,c0064e0 <__alt_data_end+0xfc0064e0>
 c006508:	d9801e04 	addi	r6,sp,120
 c00650c:	a00b883a 	mov	r5,r20
 c006510:	9809883a 	mov	r4,r19
 c006514:	d9c03d15 	stw	r7,244(sp)
 c006518:	c00eac00 	call	c00eac0 <__ssprint_r>
 c00651c:	d9c03d17 	ldw	r7,244(sp)
 c006520:	103be61e 	bne	r2,zero,c0054bc <__alt_data_end+0xfc0054bc>
 c006524:	843ffc04 	addi	r16,r16,-16
 c006528:	d8c02017 	ldw	r3,128(sp)
 c00652c:	dc401f17 	ldw	r17,124(sp)
 c006530:	dd800404 	addi	r22,sp,16
 c006534:	e43fed16 	blt	fp,r16,c0064ec <__alt_data_end+0xfc0064ec>
 c006538:	d8802c17 	ldw	r2,176(sp)
 c00653c:	1c07883a 	add	r3,r3,r16
 c006540:	8c400044 	addi	r17,r17,1
 c006544:	b0800015 	stw	r2,0(r22)
 c006548:	b4000115 	stw	r16,4(r22)
 c00654c:	d8c02015 	stw	r3,128(sp)
 c006550:	dc401f15 	stw	r17,124(sp)
 c006554:	008001c4 	movi	r2,7
 c006558:	147f2e0e 	bge	r2,r17,c006214 <__alt_data_end+0xfc006214>
 c00655c:	d9402d17 	ldw	r5,180(sp)
 c006560:	d9801e04 	addi	r6,sp,120
 c006564:	9809883a 	mov	r4,r19
 c006568:	c00eac00 	call	c00eac0 <__ssprint_r>
 c00656c:	103bd31e 	bne	r2,zero,c0054bc <__alt_data_end+0xfc0054bc>
 c006570:	d8c02017 	ldw	r3,128(sp)
 c006574:	dc401f17 	ldw	r17,124(sp)
 c006578:	dd800404 	addi	r22,sp,16
 c00657c:	003f2606 	br	c006218 <__alt_data_end+0xfc006218>
 c006580:	9080040c 	andi	r2,r18,16
 c006584:	1000c326 	beq	r2,zero,c006894 <___svfprintf_internal_r+0x1774>
 c006588:	d9402e17 	ldw	r5,184(sp)
 c00658c:	2d000017 	ldw	r20,0(r5)
 c006590:	29400104 	addi	r5,r5,4
 c006594:	d9402e15 	stw	r5,184(sp)
 c006598:	a02dd7fa 	srai	r22,r20,31
 c00659c:	b005883a 	mov	r2,r22
 c0065a0:	103c430e 	bge	r2,zero,c0056b0 <__alt_data_end+0xfc0056b0>
 c0065a4:	d9402a17 	ldw	r5,168(sp)
 c0065a8:	0529c83a 	sub	r20,zero,r20
 c0065ac:	07000b44 	movi	fp,45
 c0065b0:	a004c03a 	cmpne	r2,r20,zero
 c0065b4:	05adc83a 	sub	r22,zero,r22
 c0065b8:	df002785 	stb	fp,158(sp)
 c0065bc:	b0adc83a 	sub	r22,r22,r2
 c0065c0:	28022e16 	blt	r5,zero,c006e7c <___svfprintf_internal_r+0x1d5c>
 c0065c4:	00bfdfc4 	movi	r2,-129
 c0065c8:	90a4703a 	and	r18,r18,r2
 c0065cc:	003c3f06 	br	c0056cc <__alt_data_end+0xfc0056cc>
 c0065d0:	9080100c 	andi	r2,r18,64
 c0065d4:	d8002785 	stb	zero,158(sp)
 c0065d8:	10012526 	beq	r2,zero,c006a70 <___svfprintf_internal_r+0x1950>
 c0065dc:	d9402e17 	ldw	r5,184(sp)
 c0065e0:	d8c02a17 	ldw	r3,168(sp)
 c0065e4:	002d883a 	mov	r22,zero
 c0065e8:	28800104 	addi	r2,r5,4
 c0065ec:	2d00000b 	ldhu	r20,0(r5)
 c0065f0:	183fa20e 	bge	r3,zero,c00647c <__alt_data_end+0xfc00647c>
 c0065f4:	d8802e15 	stw	r2,184(sp)
 c0065f8:	0039883a 	mov	fp,zero
 c0065fc:	a584b03a 	or	r2,r20,r22
 c006600:	103c321e 	bne	r2,zero,c0056cc <__alt_data_end+0xfc0056cc>
 c006604:	00800044 	movi	r2,1
 c006608:	003e5006 	br	c005f4c <__alt_data_end+0xfc005f4c>
 c00660c:	d9402d17 	ldw	r5,180(sp)
 c006610:	d9801e04 	addi	r6,sp,120
 c006614:	9809883a 	mov	r4,r19
 c006618:	c00eac00 	call	c00eac0 <__ssprint_r>
 c00661c:	103ba71e 	bne	r2,zero,c0054bc <__alt_data_end+0xfc0054bc>
 c006620:	d8c02017 	ldw	r3,128(sp)
 c006624:	da000404 	addi	r8,sp,16
 c006628:	d9003217 	ldw	r4,200(sp)
 c00662c:	d8802617 	ldw	r2,152(sp)
 c006630:	d9403317 	ldw	r5,204(sp)
 c006634:	8123883a 	add	r17,r16,r4
 c006638:	11400216 	blt	r2,r5,c006644 <___svfprintf_internal_r+0x1524>
 c00663c:	9100004c 	andi	r4,r18,1
 c006640:	20000d26 	beq	r4,zero,c006678 <___svfprintf_internal_r+0x1558>
 c006644:	d9003817 	ldw	r4,224(sp)
 c006648:	d9403417 	ldw	r5,208(sp)
 c00664c:	1907883a 	add	r3,r3,r4
 c006650:	d9001f17 	ldw	r4,124(sp)
 c006654:	41400015 	stw	r5,0(r8)
 c006658:	d9403817 	ldw	r5,224(sp)
 c00665c:	21000044 	addi	r4,r4,1
 c006660:	d8c02015 	stw	r3,128(sp)
 c006664:	41400115 	stw	r5,4(r8)
 c006668:	d9001f15 	stw	r4,124(sp)
 c00666c:	014001c4 	movi	r5,7
 c006670:	2901dc16 	blt	r5,r4,c006de4 <___svfprintf_internal_r+0x1cc4>
 c006674:	42000204 	addi	r8,r8,8
 c006678:	d9003317 	ldw	r4,204(sp)
 c00667c:	8121883a 	add	r16,r16,r4
 c006680:	2085c83a 	sub	r2,r4,r2
 c006684:	8461c83a 	sub	r16,r16,r17
 c006688:	1400010e 	bge	r2,r16,c006690 <___svfprintf_internal_r+0x1570>
 c00668c:	1021883a 	mov	r16,r2
 c006690:	04000a0e 	bge	zero,r16,c0066bc <___svfprintf_internal_r+0x159c>
 c006694:	d9001f17 	ldw	r4,124(sp)
 c006698:	1c07883a 	add	r3,r3,r16
 c00669c:	44400015 	stw	r17,0(r8)
 c0066a0:	21000044 	addi	r4,r4,1
 c0066a4:	44000115 	stw	r16,4(r8)
 c0066a8:	d8c02015 	stw	r3,128(sp)
 c0066ac:	d9001f15 	stw	r4,124(sp)
 c0066b0:	014001c4 	movi	r5,7
 c0066b4:	2901e616 	blt	r5,r4,c006e50 <___svfprintf_internal_r+0x1d30>
 c0066b8:	42000204 	addi	r8,r8,8
 c0066bc:	8001f616 	blt	r16,zero,c006e98 <___svfprintf_internal_r+0x1d78>
 c0066c0:	1421c83a 	sub	r16,r2,r16
 c0066c4:	043cfa0e 	bge	zero,r16,c005ab0 <__alt_data_end+0xfc005ab0>
 c0066c8:	04400404 	movi	r17,16
 c0066cc:	d8801f17 	ldw	r2,124(sp)
 c0066d0:	8c3edd0e 	bge	r17,r16,c006248 <__alt_data_end+0xfc006248>
 c0066d4:	014300b4 	movhi	r5,3074
 c0066d8:	2961ef84 	addi	r5,r5,-30786
 c0066dc:	d9402c15 	stw	r5,176(sp)
 c0066e0:	058001c4 	movi	r22,7
 c0066e4:	dd002d17 	ldw	r20,180(sp)
 c0066e8:	00000306 	br	c0066f8 <___svfprintf_internal_r+0x15d8>
 c0066ec:	42000204 	addi	r8,r8,8
 c0066f0:	843ffc04 	addi	r16,r16,-16
 c0066f4:	8c3ed70e 	bge	r17,r16,c006254 <__alt_data_end+0xfc006254>
 c0066f8:	18c00404 	addi	r3,r3,16
 c0066fc:	10800044 	addi	r2,r2,1
 c006700:	45400015 	stw	r21,0(r8)
 c006704:	44400115 	stw	r17,4(r8)
 c006708:	d8c02015 	stw	r3,128(sp)
 c00670c:	d8801f15 	stw	r2,124(sp)
 c006710:	b0bff60e 	bge	r22,r2,c0066ec <__alt_data_end+0xfc0066ec>
 c006714:	d9801e04 	addi	r6,sp,120
 c006718:	a00b883a 	mov	r5,r20
 c00671c:	9809883a 	mov	r4,r19
 c006720:	c00eac00 	call	c00eac0 <__ssprint_r>
 c006724:	103b651e 	bne	r2,zero,c0054bc <__alt_data_end+0xfc0054bc>
 c006728:	d8c02017 	ldw	r3,128(sp)
 c00672c:	d8801f17 	ldw	r2,124(sp)
 c006730:	da000404 	addi	r8,sp,16
 c006734:	003fee06 	br	c0066f0 <__alt_data_end+0xfc0066f0>
 c006738:	9088703a 	and	r4,r18,r2
 c00673c:	203e8d1e 	bne	r4,zero,c006174 <__alt_data_end+0xfc006174>
 c006740:	dc401f17 	ldw	r17,124(sp)
 c006744:	40800115 	stw	r2,4(r8)
 c006748:	44000015 	stw	r16,0(r8)
 c00674c:	8c400044 	addi	r17,r17,1
 c006750:	d8c02015 	stw	r3,128(sp)
 c006754:	dc401f15 	stw	r17,124(sp)
 c006758:	008001c4 	movi	r2,7
 c00675c:	147f7f16 	blt	r2,r17,c00655c <__alt_data_end+0xfc00655c>
 c006760:	45800204 	addi	r22,r8,8
 c006764:	003eac06 	br	c006218 <__alt_data_end+0xfc006218>
 c006768:	d9402d17 	ldw	r5,180(sp)
 c00676c:	d9801e04 	addi	r6,sp,120
 c006770:	9809883a 	mov	r4,r19
 c006774:	c00eac00 	call	c00eac0 <__ssprint_r>
 c006778:	103b501e 	bne	r2,zero,c0054bc <__alt_data_end+0xfc0054bc>
 c00677c:	d8c02017 	ldw	r3,128(sp)
 c006780:	dc401f17 	ldw	r17,124(sp)
 c006784:	da000404 	addi	r8,sp,16
 c006788:	003e8406 	br	c00619c <__alt_data_end+0xfc00619c>
 c00678c:	d9402d17 	ldw	r5,180(sp)
 c006790:	d9801e04 	addi	r6,sp,120
 c006794:	9809883a 	mov	r4,r19
 c006798:	c00eac00 	call	c00eac0 <__ssprint_r>
 c00679c:	103b471e 	bne	r2,zero,c0054bc <__alt_data_end+0xfc0054bc>
 c0067a0:	d8c02017 	ldw	r3,128(sp)
 c0067a4:	dc401f17 	ldw	r17,124(sp)
 c0067a8:	dd800404 	addi	r22,sp,16
 c0067ac:	003e8606 	br	c0061c8 <__alt_data_end+0xfc0061c8>
 c0067b0:	0029883a 	mov	r20,zero
 c0067b4:	a5000c04 	addi	r20,r20,48
 c0067b8:	dc001dc4 	addi	r16,sp,119
 c0067bc:	dd001dc5 	stb	r20,119(sp)
 c0067c0:	003f3806 	br	c0064a4 <__alt_data_end+0xfc0064a4>
 c0067c4:	d9402d17 	ldw	r5,180(sp)
 c0067c8:	d9801e04 	addi	r6,sp,120
 c0067cc:	9809883a 	mov	r4,r19
 c0067d0:	c00eac00 	call	c00eac0 <__ssprint_r>
 c0067d4:	103b391e 	bne	r2,zero,c0054bc <__alt_data_end+0xfc0054bc>
 c0067d8:	d8c02017 	ldw	r3,128(sp)
 c0067dc:	da000404 	addi	r8,sp,16
 c0067e0:	003c7306 	br	c0059b0 <__alt_data_end+0xfc0059b0>
 c0067e4:	d9003617 	ldw	r4,216(sp)
 c0067e8:	d9403717 	ldw	r5,220(sp)
 c0067ec:	da003e15 	stw	r8,248(sp)
 c0067f0:	c00e7e00 	call	c00e7e0 <__fpclassifyd>
 c0067f4:	da003e17 	ldw	r8,248(sp)
 c0067f8:	1000bd1e 	bne	r2,zero,c006af0 <___svfprintf_internal_r+0x19d0>
 c0067fc:	008011c4 	movi	r2,71
 c006800:	14411e0e 	bge	r2,r17,c006c7c <___svfprintf_internal_r+0x1b5c>
 c006804:	040300b4 	movhi	r16,3074
 c006808:	8421e204 	addi	r16,r16,-30840
 c00680c:	00c000c4 	movi	r3,3
 c006810:	00bfdfc4 	movi	r2,-129
 c006814:	d8c02915 	stw	r3,164(sp)
 c006818:	90a4703a 	and	r18,r18,r2
 c00681c:	df002783 	ldbu	fp,158(sp)
 c006820:	d8c02b15 	stw	r3,172(sp)
 c006824:	d8002a15 	stw	zero,168(sp)
 c006828:	d8003215 	stw	zero,200(sp)
 c00682c:	003bfa06 	br	c005818 <__alt_data_end+0xfc005818>
 c006830:	9080100c 	andi	r2,r18,64
 c006834:	d8002785 	stb	zero,158(sp)
 c006838:	10009426 	beq	r2,zero,c006a8c <___svfprintf_internal_r+0x196c>
 c00683c:	d9402e17 	ldw	r5,184(sp)
 c006840:	d8c02a17 	ldw	r3,168(sp)
 c006844:	002d883a 	mov	r22,zero
 c006848:	28800104 	addi	r2,r5,4
 c00684c:	2d00000b 	ldhu	r20,0(r5)
 c006850:	183ec10e 	bge	r3,zero,c006358 <__alt_data_end+0xfc006358>
 c006854:	a586b03a 	or	r3,r20,r22
 c006858:	d8802e15 	stw	r2,184(sp)
 c00685c:	183ec21e 	bne	r3,zero,c006368 <__alt_data_end+0xfc006368>
 c006860:	0039883a 	mov	fp,zero
 c006864:	0005883a 	mov	r2,zero
 c006868:	003db806 	br	c005f4c <__alt_data_end+0xfc005f4c>
 c00686c:	d8c02e17 	ldw	r3,184(sp)
 c006870:	d9002e17 	ldw	r4,184(sp)
 c006874:	d9402e17 	ldw	r5,184(sp)
 c006878:	18c00017 	ldw	r3,0(r3)
 c00687c:	21000117 	ldw	r4,4(r4)
 c006880:	29400204 	addi	r5,r5,8
 c006884:	d8c03615 	stw	r3,216(sp)
 c006888:	d9003715 	stw	r4,220(sp)
 c00688c:	d9402e15 	stw	r5,184(sp)
 c006890:	003b5a06 	br	c0055fc <__alt_data_end+0xfc0055fc>
 c006894:	9080100c 	andi	r2,r18,64
 c006898:	10010726 	beq	r2,zero,c006cb8 <___svfprintf_internal_r+0x1b98>
 c00689c:	d8802e17 	ldw	r2,184(sp)
 c0068a0:	1500000f 	ldh	r20,0(r2)
 c0068a4:	10800104 	addi	r2,r2,4
 c0068a8:	d8802e15 	stw	r2,184(sp)
 c0068ac:	a02dd7fa 	srai	r22,r20,31
 c0068b0:	b005883a 	mov	r2,r22
 c0068b4:	003b7d06 	br	c0056ac <__alt_data_end+0xfc0056ac>
 c0068b8:	9080100c 	andi	r2,r18,64
 c0068bc:	10010526 	beq	r2,zero,c006cd4 <___svfprintf_internal_r+0x1bb4>
 c0068c0:	d8c02e17 	ldw	r3,184(sp)
 c0068c4:	002d883a 	mov	r22,zero
 c0068c8:	1d00000b 	ldhu	r20,0(r3)
 c0068cc:	18c00104 	addi	r3,r3,4
 c0068d0:	d8c02e15 	stw	r3,184(sp)
 c0068d4:	003ce206 	br	c005c60 <__alt_data_end+0xfc005c60>
 c0068d8:	bc400007 	ldb	r17,0(r23)
 c0068dc:	003a6506 	br	c005274 <__alt_data_end+0xfc005274>
 c0068e0:	9080040c 	andi	r2,r18,16
 c0068e4:	10010126 	beq	r2,zero,c006cec <___svfprintf_internal_r+0x1bcc>
 c0068e8:	d8c02e17 	ldw	r3,184(sp)
 c0068ec:	d9002f17 	ldw	r4,188(sp)
 c0068f0:	18800017 	ldw	r2,0(r3)
 c0068f4:	18c00104 	addi	r3,r3,4
 c0068f8:	d8c02e15 	stw	r3,184(sp)
 c0068fc:	11000015 	stw	r4,0(r2)
 c006900:	003a3206 	br	c0051cc <__alt_data_end+0xfc0051cc>
 c006904:	d9002a17 	ldw	r4,168(sp)
 c006908:	d8002785 	stb	zero,158(sp)
 c00690c:	203d8d16 	blt	r4,zero,c005f44 <__alt_data_end+0xfc005f44>
 c006910:	00bfdfc4 	movi	r2,-129
 c006914:	90a4703a 	and	r18,r18,r2
 c006918:	003ad506 	br	c005470 <__alt_data_end+0xfc005470>
 c00691c:	014300b4 	movhi	r5,3074
 c006920:	2961ef84 	addi	r5,r5,-30786
 c006924:	d9402c15 	stw	r5,176(sp)
 c006928:	d9402c17 	ldw	r5,176(sp)
 c00692c:	1c47883a 	add	r3,r3,r17
 c006930:	10800044 	addi	r2,r2,1
 c006934:	41400015 	stw	r5,0(r8)
 c006938:	44400115 	stw	r17,4(r8)
 c00693c:	d8c02015 	stw	r3,128(sp)
 c006940:	d8801f15 	stw	r2,124(sp)
 c006944:	010001c4 	movi	r4,7
 c006948:	20bf3016 	blt	r4,r2,c00660c <__alt_data_end+0xfc00660c>
 c00694c:	42000204 	addi	r8,r8,8
 c006950:	003f3506 	br	c006628 <__alt_data_end+0xfc006628>
 c006954:	010300b4 	movhi	r4,3074
 c006958:	2121ef84 	addi	r4,r4,-30786
 c00695c:	d9002c15 	stw	r4,176(sp)
 c006960:	003c3c06 	br	c005a54 <__alt_data_end+0xfc005a54>
 c006964:	d9402d17 	ldw	r5,180(sp)
 c006968:	d9801e04 	addi	r6,sp,120
 c00696c:	9809883a 	mov	r4,r19
 c006970:	c00eac00 	call	c00eac0 <__ssprint_r>
 c006974:	103ad11e 	bne	r2,zero,c0054bc <__alt_data_end+0xfc0054bc>
 c006978:	d8c02017 	ldw	r3,128(sp)
 c00697c:	da000404 	addi	r8,sp,16
 c006980:	003d9306 	br	c005fd0 <__alt_data_end+0xfc005fd0>
 c006984:	d8801f17 	ldw	r2,124(sp)
 c006988:	014300b4 	movhi	r5,3074
 c00698c:	01000044 	movi	r4,1
 c006990:	18c00044 	addi	r3,r3,1
 c006994:	10800044 	addi	r2,r2,1
 c006998:	2961ef04 	addi	r5,r5,-30788
 c00699c:	41000115 	stw	r4,4(r8)
 c0069a0:	41400015 	stw	r5,0(r8)
 c0069a4:	d8c02015 	stw	r3,128(sp)
 c0069a8:	d8801f15 	stw	r2,124(sp)
 c0069ac:	010001c4 	movi	r4,7
 c0069b0:	2080b516 	blt	r4,r2,c006c88 <___svfprintf_internal_r+0x1b68>
 c0069b4:	42000204 	addi	r8,r8,8
 c0069b8:	8800041e 	bne	r17,zero,c0069cc <___svfprintf_internal_r+0x18ac>
 c0069bc:	d8803317 	ldw	r2,204(sp)
 c0069c0:	1000021e 	bne	r2,zero,c0069cc <___svfprintf_internal_r+0x18ac>
 c0069c4:	9080004c 	andi	r2,r18,1
 c0069c8:	103c3926 	beq	r2,zero,c005ab0 <__alt_data_end+0xfc005ab0>
 c0069cc:	d9003817 	ldw	r4,224(sp)
 c0069d0:	d8801f17 	ldw	r2,124(sp)
 c0069d4:	d9403417 	ldw	r5,208(sp)
 c0069d8:	20c7883a 	add	r3,r4,r3
 c0069dc:	10800044 	addi	r2,r2,1
 c0069e0:	41000115 	stw	r4,4(r8)
 c0069e4:	41400015 	stw	r5,0(r8)
 c0069e8:	d8c02015 	stw	r3,128(sp)
 c0069ec:	d8801f15 	stw	r2,124(sp)
 c0069f0:	010001c4 	movi	r4,7
 c0069f4:	20818016 	blt	r4,r2,c006ff8 <___svfprintf_internal_r+0x1ed8>
 c0069f8:	42000204 	addi	r8,r8,8
 c0069fc:	0463c83a 	sub	r17,zero,r17
 c006a00:	0440cb0e 	bge	zero,r17,c006d30 <___svfprintf_internal_r+0x1c10>
 c006a04:	05800404 	movi	r22,16
 c006a08:	b440e80e 	bge	r22,r17,c006dac <___svfprintf_internal_r+0x1c8c>
 c006a0c:	014300b4 	movhi	r5,3074
 c006a10:	2961ef84 	addi	r5,r5,-30786
 c006a14:	d9402c15 	stw	r5,176(sp)
 c006a18:	070001c4 	movi	fp,7
 c006a1c:	dd002d17 	ldw	r20,180(sp)
 c006a20:	00000306 	br	c006a30 <___svfprintf_internal_r+0x1910>
 c006a24:	42000204 	addi	r8,r8,8
 c006a28:	8c7ffc04 	addi	r17,r17,-16
 c006a2c:	b440e20e 	bge	r22,r17,c006db8 <___svfprintf_internal_r+0x1c98>
 c006a30:	18c00404 	addi	r3,r3,16
 c006a34:	10800044 	addi	r2,r2,1
 c006a38:	45400015 	stw	r21,0(r8)
 c006a3c:	45800115 	stw	r22,4(r8)
 c006a40:	d8c02015 	stw	r3,128(sp)
 c006a44:	d8801f15 	stw	r2,124(sp)
 c006a48:	e0bff60e 	bge	fp,r2,c006a24 <__alt_data_end+0xfc006a24>
 c006a4c:	d9801e04 	addi	r6,sp,120
 c006a50:	a00b883a 	mov	r5,r20
 c006a54:	9809883a 	mov	r4,r19
 c006a58:	c00eac00 	call	c00eac0 <__ssprint_r>
 c006a5c:	103a971e 	bne	r2,zero,c0054bc <__alt_data_end+0xfc0054bc>
 c006a60:	d8c02017 	ldw	r3,128(sp)
 c006a64:	d8801f17 	ldw	r2,124(sp)
 c006a68:	da000404 	addi	r8,sp,16
 c006a6c:	003fee06 	br	c006a28 <__alt_data_end+0xfc006a28>
 c006a70:	d9002e17 	ldw	r4,184(sp)
 c006a74:	d9402a17 	ldw	r5,168(sp)
 c006a78:	002d883a 	mov	r22,zero
 c006a7c:	20800104 	addi	r2,r4,4
 c006a80:	25000017 	ldw	r20,0(r4)
 c006a84:	283e7d0e 	bge	r5,zero,c00647c <__alt_data_end+0xfc00647c>
 c006a88:	003eda06 	br	c0065f4 <__alt_data_end+0xfc0065f4>
 c006a8c:	d9002e17 	ldw	r4,184(sp)
 c006a90:	d9402a17 	ldw	r5,168(sp)
 c006a94:	002d883a 	mov	r22,zero
 c006a98:	20800104 	addi	r2,r4,4
 c006a9c:	25000017 	ldw	r20,0(r4)
 c006aa0:	283e2d0e 	bge	r5,zero,c006358 <__alt_data_end+0xfc006358>
 c006aa4:	003f6b06 	br	c006854 <__alt_data_end+0xfc006854>
 c006aa8:	d8c02e15 	stw	r3,184(sp)
 c006aac:	0039883a 	mov	fp,zero
 c006ab0:	003ed206 	br	c0065fc <__alt_data_end+0xfc0065fc>
 c006ab4:	bc400043 	ldbu	r17,1(r23)
 c006ab8:	84000814 	ori	r16,r16,32
 c006abc:	bdc00044 	addi	r23,r23,1
 c006ac0:	8c403fcc 	andi	r17,r17,255
 c006ac4:	8c40201c 	xori	r17,r17,128
 c006ac8:	8c7fe004 	addi	r17,r17,-128
 c006acc:	0039e906 	br	c005274 <__alt_data_end+0xfc005274>
 c006ad0:	d9402d17 	ldw	r5,180(sp)
 c006ad4:	d9801e04 	addi	r6,sp,120
 c006ad8:	9809883a 	mov	r4,r19
 c006adc:	c00eac00 	call	c00eac0 <__ssprint_r>
 c006ae0:	103a761e 	bne	r2,zero,c0054bc <__alt_data_end+0xfc0054bc>
 c006ae4:	d8c02017 	ldw	r3,128(sp)
 c006ae8:	da000404 	addi	r8,sp,16
 c006aec:	003d4a06 	br	c006018 <__alt_data_end+0xfc006018>
 c006af0:	d9002a17 	ldw	r4,168(sp)
 c006af4:	05bff7c4 	movi	r22,-33
 c006af8:	00bfffc4 	movi	r2,-1
 c006afc:	8dac703a 	and	r22,r17,r22
 c006b00:	20806a26 	beq	r4,r2,c006cac <___svfprintf_internal_r+0x1b8c>
 c006b04:	008011c4 	movi	r2,71
 c006b08:	b0813726 	beq	r22,r2,c006fe8 <___svfprintf_internal_r+0x1ec8>
 c006b0c:	d9003717 	ldw	r4,220(sp)
 c006b10:	90c04014 	ori	r3,r18,256
 c006b14:	d8c02c15 	stw	r3,176(sp)
 c006b18:	20015d16 	blt	r4,zero,c007090 <___svfprintf_internal_r+0x1f70>
 c006b1c:	dd003717 	ldw	r20,220(sp)
 c006b20:	d8002905 	stb	zero,164(sp)
 c006b24:	00801984 	movi	r2,102
 c006b28:	88814026 	beq	r17,r2,c00702c <___svfprintf_internal_r+0x1f0c>
 c006b2c:	00801184 	movi	r2,70
 c006b30:	88817126 	beq	r17,r2,c0070f8 <___svfprintf_internal_r+0x1fd8>
 c006b34:	00801144 	movi	r2,69
 c006b38:	b0816226 	beq	r22,r2,c0070c4 <___svfprintf_internal_r+0x1fa4>
 c006b3c:	d8c02a17 	ldw	r3,168(sp)
 c006b40:	d8802104 	addi	r2,sp,132
 c006b44:	d8800315 	stw	r2,12(sp)
 c006b48:	d9403617 	ldw	r5,216(sp)
 c006b4c:	d8802504 	addi	r2,sp,148
 c006b50:	d8800215 	stw	r2,8(sp)
 c006b54:	d8802604 	addi	r2,sp,152
 c006b58:	d8c00015 	stw	r3,0(sp)
 c006b5c:	d8800115 	stw	r2,4(sp)
 c006b60:	01c00084 	movi	r7,2
 c006b64:	a00d883a 	mov	r6,r20
 c006b68:	9809883a 	mov	r4,r19
 c006b6c:	d8c03d15 	stw	r3,244(sp)
 c006b70:	da003e15 	stw	r8,248(sp)
 c006b74:	c009b0c0 	call	c009b0c <_dtoa_r>
 c006b78:	1021883a 	mov	r16,r2
 c006b7c:	008019c4 	movi	r2,103
 c006b80:	d8c03d17 	ldw	r3,244(sp)
 c006b84:	da003e17 	ldw	r8,248(sp)
 c006b88:	8880e726 	beq	r17,r2,c006f28 <___svfprintf_internal_r+0x1e08>
 c006b8c:	008011c4 	movi	r2,71
 c006b90:	8880d426 	beq	r17,r2,c006ee4 <___svfprintf_internal_r+0x1dc4>
 c006b94:	80f9883a 	add	fp,r16,r3
 c006b98:	d9003617 	ldw	r4,216(sp)
 c006b9c:	000d883a 	mov	r6,zero
 c006ba0:	000f883a 	mov	r7,zero
 c006ba4:	a00b883a 	mov	r5,r20
 c006ba8:	da003e15 	stw	r8,248(sp)
 c006bac:	c013fbc0 	call	c013fbc <__eqdf2>
 c006bb0:	da003e17 	ldw	r8,248(sp)
 c006bb4:	1000e426 	beq	r2,zero,c006f48 <___svfprintf_internal_r+0x1e28>
 c006bb8:	d8802117 	ldw	r2,132(sp)
 c006bbc:	1700062e 	bgeu	r2,fp,c006bd8 <___svfprintf_internal_r+0x1ab8>
 c006bc0:	01000c04 	movi	r4,48
 c006bc4:	10c00044 	addi	r3,r2,1
 c006bc8:	d8c02115 	stw	r3,132(sp)
 c006bcc:	11000005 	stb	r4,0(r2)
 c006bd0:	d8802117 	ldw	r2,132(sp)
 c006bd4:	173ffb36 	bltu	r2,fp,c006bc4 <__alt_data_end+0xfc006bc4>
 c006bd8:	1405c83a 	sub	r2,r2,r16
 c006bdc:	d8803315 	stw	r2,204(sp)
 c006be0:	008011c4 	movi	r2,71
 c006be4:	b080c526 	beq	r22,r2,c006efc <___svfprintf_internal_r+0x1ddc>
 c006be8:	00801944 	movi	r2,101
 c006bec:	1441d80e 	bge	r2,r17,c007350 <___svfprintf_internal_r+0x2230>
 c006bf0:	d8c02617 	ldw	r3,152(sp)
 c006bf4:	00801984 	movi	r2,102
 c006bf8:	d8c03215 	stw	r3,200(sp)
 c006bfc:	88813426 	beq	r17,r2,c0070d0 <___svfprintf_internal_r+0x1fb0>
 c006c00:	d8c03217 	ldw	r3,200(sp)
 c006c04:	d9003317 	ldw	r4,204(sp)
 c006c08:	19012516 	blt	r3,r4,c0070a0 <___svfprintf_internal_r+0x1f80>
 c006c0c:	9480004c 	andi	r18,r18,1
 c006c10:	9001841e 	bne	r18,zero,c007224 <___svfprintf_internal_r+0x2104>
 c006c14:	1805883a 	mov	r2,r3
 c006c18:	1801cb16 	blt	r3,zero,c007348 <___svfprintf_internal_r+0x2228>
 c006c1c:	d8c03217 	ldw	r3,200(sp)
 c006c20:	044019c4 	movi	r17,103
 c006c24:	d8c02b15 	stw	r3,172(sp)
 c006c28:	df002907 	ldb	fp,164(sp)
 c006c2c:	e000a61e 	bne	fp,zero,c006ec8 <___svfprintf_internal_r+0x1da8>
 c006c30:	df002783 	ldbu	fp,158(sp)
 c006c34:	d8802915 	stw	r2,164(sp)
 c006c38:	dc802c17 	ldw	r18,176(sp)
 c006c3c:	d8002a15 	stw	zero,168(sp)
 c006c40:	003af506 	br	c005818 <__alt_data_end+0xfc005818>
 c006c44:	040300b4 	movhi	r16,3074
 c006c48:	8421df04 	addi	r16,r16,-30852
 c006c4c:	003a7e06 	br	c005648 <__alt_data_end+0xfc005648>
 c006c50:	d9003917 	ldw	r4,228(sp)
 c006c54:	04001004 	movi	r16,64
 c006c58:	800b883a 	mov	r5,r16
 c006c5c:	c00c5080 	call	c00c508 <_malloc_r>
 c006c60:	d9002d17 	ldw	r4,180(sp)
 c006c64:	20800015 	stw	r2,0(r4)
 c006c68:	20800415 	stw	r2,16(r4)
 c006c6c:	1001d026 	beq	r2,zero,c0073b0 <___svfprintf_internal_r+0x2290>
 c006c70:	d8802d17 	ldw	r2,180(sp)
 c006c74:	14000515 	stw	r16,20(r2)
 c006c78:	00394406 	br	c00518c <__alt_data_end+0xfc00518c>
 c006c7c:	040300b4 	movhi	r16,3074
 c006c80:	8421e104 	addi	r16,r16,-30844
 c006c84:	003ee106 	br	c00680c <__alt_data_end+0xfc00680c>
 c006c88:	d9402d17 	ldw	r5,180(sp)
 c006c8c:	d9801e04 	addi	r6,sp,120
 c006c90:	9809883a 	mov	r4,r19
 c006c94:	c00eac00 	call	c00eac0 <__ssprint_r>
 c006c98:	103a081e 	bne	r2,zero,c0054bc <__alt_data_end+0xfc0054bc>
 c006c9c:	dc402617 	ldw	r17,152(sp)
 c006ca0:	d8c02017 	ldw	r3,128(sp)
 c006ca4:	da000404 	addi	r8,sp,16
 c006ca8:	003f4306 	br	c0069b8 <__alt_data_end+0xfc0069b8>
 c006cac:	01400184 	movi	r5,6
 c006cb0:	d9402a15 	stw	r5,168(sp)
 c006cb4:	003f9506 	br	c006b0c <__alt_data_end+0xfc006b0c>
 c006cb8:	d8c02e17 	ldw	r3,184(sp)
 c006cbc:	1d000017 	ldw	r20,0(r3)
 c006cc0:	18c00104 	addi	r3,r3,4
 c006cc4:	d8c02e15 	stw	r3,184(sp)
 c006cc8:	a02dd7fa 	srai	r22,r20,31
 c006ccc:	b005883a 	mov	r2,r22
 c006cd0:	003a7606 	br	c0056ac <__alt_data_end+0xfc0056ac>
 c006cd4:	d9002e17 	ldw	r4,184(sp)
 c006cd8:	002d883a 	mov	r22,zero
 c006cdc:	25000017 	ldw	r20,0(r4)
 c006ce0:	21000104 	addi	r4,r4,4
 c006ce4:	d9002e15 	stw	r4,184(sp)
 c006ce8:	003bdd06 	br	c005c60 <__alt_data_end+0xfc005c60>
 c006cec:	9480100c 	andi	r18,r18,64
 c006cf0:	90006e26 	beq	r18,zero,c006eac <___svfprintf_internal_r+0x1d8c>
 c006cf4:	d9402e17 	ldw	r5,184(sp)
 c006cf8:	d8c02f17 	ldw	r3,188(sp)
 c006cfc:	28800017 	ldw	r2,0(r5)
 c006d00:	29400104 	addi	r5,r5,4
 c006d04:	d9402e15 	stw	r5,184(sp)
 c006d08:	10c0000d 	sth	r3,0(r2)
 c006d0c:	00392f06 	br	c0051cc <__alt_data_end+0xfc0051cc>
 c006d10:	d9402d17 	ldw	r5,180(sp)
 c006d14:	d9801e04 	addi	r6,sp,120
 c006d18:	9809883a 	mov	r4,r19
 c006d1c:	c00eac00 	call	c00eac0 <__ssprint_r>
 c006d20:	1039e61e 	bne	r2,zero,c0054bc <__alt_data_end+0xfc0054bc>
 c006d24:	d8c02017 	ldw	r3,128(sp)
 c006d28:	d8801f17 	ldw	r2,124(sp)
 c006d2c:	da000404 	addi	r8,sp,16
 c006d30:	d9403317 	ldw	r5,204(sp)
 c006d34:	10800044 	addi	r2,r2,1
 c006d38:	44000015 	stw	r16,0(r8)
 c006d3c:	28c7883a 	add	r3,r5,r3
 c006d40:	003b5506 	br	c005a98 <__alt_data_end+0xfc005a98>
 c006d44:	8009883a 	mov	r4,r16
 c006d48:	df003e15 	stw	fp,248(sp)
 c006d4c:	c0050880 	call	c005088 <strlen>
 c006d50:	d8802b15 	stw	r2,172(sp)
 c006d54:	da003e17 	ldw	r8,248(sp)
 c006d58:	103c160e 	bge	r2,zero,c005db4 <__alt_data_end+0xfc005db4>
 c006d5c:	0005883a 	mov	r2,zero
 c006d60:	003c1406 	br	c005db4 <__alt_data_end+0xfc005db4>
 c006d64:	00bfffc4 	movi	r2,-1
 c006d68:	0039d906 	br	c0054d0 <__alt_data_end+0xfc0054d0>
 c006d6c:	010300b4 	movhi	r4,3074
 c006d70:	2121f384 	addi	r4,r4,-30770
 c006d74:	d9003515 	stw	r4,212(sp)
 c006d78:	003ae406 	br	c00590c <__alt_data_end+0xfc00590c>
 c006d7c:	013fffc4 	movi	r4,-1
 c006d80:	0039fa06 	br	c00556c <__alt_data_end+0xfc00556c>
 c006d84:	d9402d17 	ldw	r5,180(sp)
 c006d88:	d9801e04 	addi	r6,sp,120
 c006d8c:	9809883a 	mov	r4,r19
 c006d90:	c00eac00 	call	c00eac0 <__ssprint_r>
 c006d94:	1039c91e 	bne	r2,zero,c0054bc <__alt_data_end+0xfc0054bc>
 c006d98:	d8c02017 	ldw	r3,128(sp)
 c006d9c:	da000404 	addi	r8,sp,16
 c006da0:	003d8406 	br	c0063b4 <__alt_data_end+0xfc0063b4>
 c006da4:	0023883a 	mov	r17,zero
 c006da8:	003d8306 	br	c0063b8 <__alt_data_end+0xfc0063b8>
 c006dac:	010300b4 	movhi	r4,3074
 c006db0:	2121ef84 	addi	r4,r4,-30786
 c006db4:	d9002c15 	stw	r4,176(sp)
 c006db8:	d9002c17 	ldw	r4,176(sp)
 c006dbc:	1c47883a 	add	r3,r3,r17
 c006dc0:	10800044 	addi	r2,r2,1
 c006dc4:	41000015 	stw	r4,0(r8)
 c006dc8:	44400115 	stw	r17,4(r8)
 c006dcc:	d8c02015 	stw	r3,128(sp)
 c006dd0:	d8801f15 	stw	r2,124(sp)
 c006dd4:	010001c4 	movi	r4,7
 c006dd8:	20bfcd16 	blt	r4,r2,c006d10 <__alt_data_end+0xfc006d10>
 c006ddc:	42000204 	addi	r8,r8,8
 c006de0:	003fd306 	br	c006d30 <__alt_data_end+0xfc006d30>
 c006de4:	d9402d17 	ldw	r5,180(sp)
 c006de8:	d9801e04 	addi	r6,sp,120
 c006dec:	9809883a 	mov	r4,r19
 c006df0:	c00eac00 	call	c00eac0 <__ssprint_r>
 c006df4:	1039b11e 	bne	r2,zero,c0054bc <__alt_data_end+0xfc0054bc>
 c006df8:	d8802617 	ldw	r2,152(sp)
 c006dfc:	d8c02017 	ldw	r3,128(sp)
 c006e00:	da000404 	addi	r8,sp,16
 c006e04:	003e1c06 	br	c006678 <__alt_data_end+0xfc006678>
 c006e08:	d8802a17 	ldw	r2,168(sp)
 c006e0c:	00c00184 	movi	r3,6
 c006e10:	1880012e 	bgeu	r3,r2,c006e18 <___svfprintf_internal_r+0x1cf8>
 c006e14:	1805883a 	mov	r2,r3
 c006e18:	d8802b15 	stw	r2,172(sp)
 c006e1c:	1000f316 	blt	r2,zero,c0071ec <___svfprintf_internal_r+0x20cc>
 c006e20:	040300b4 	movhi	r16,3074
 c006e24:	d8802915 	stw	r2,164(sp)
 c006e28:	dd002e15 	stw	r20,184(sp)
 c006e2c:	d8002a15 	stw	zero,168(sp)
 c006e30:	d8003215 	stw	zero,200(sp)
 c006e34:	8421ed04 	addi	r16,r16,-30796
 c006e38:	0039883a 	mov	fp,zero
 c006e3c:	003a7d06 	br	c005834 <__alt_data_end+0xfc005834>
 c006e40:	010300b4 	movhi	r4,3074
 c006e44:	2121f384 	addi	r4,r4,-30770
 c006e48:	d9003515 	stw	r4,212(sp)
 c006e4c:	003b3d06 	br	c005b44 <__alt_data_end+0xfc005b44>
 c006e50:	d9402d17 	ldw	r5,180(sp)
 c006e54:	d9801e04 	addi	r6,sp,120
 c006e58:	9809883a 	mov	r4,r19
 c006e5c:	c00eac00 	call	c00eac0 <__ssprint_r>
 c006e60:	1039961e 	bne	r2,zero,c0054bc <__alt_data_end+0xfc0054bc>
 c006e64:	d8802617 	ldw	r2,152(sp)
 c006e68:	d9403317 	ldw	r5,204(sp)
 c006e6c:	d8c02017 	ldw	r3,128(sp)
 c006e70:	da000404 	addi	r8,sp,16
 c006e74:	2885c83a 	sub	r2,r5,r2
 c006e78:	003e1006 	br	c0066bc <__alt_data_end+0xfc0066bc>
 c006e7c:	00800044 	movi	r2,1
 c006e80:	10803fcc 	andi	r2,r2,255
 c006e84:	00c00044 	movi	r3,1
 c006e88:	10fa1026 	beq	r2,r3,c0056cc <__alt_data_end+0xfc0056cc>
 c006e8c:	00c00084 	movi	r3,2
 c006e90:	10fb8226 	beq	r2,r3,c005c9c <__alt_data_end+0xfc005c9c>
 c006e94:	003a4206 	br	c0057a0 <__alt_data_end+0xfc0057a0>
 c006e98:	0021883a 	mov	r16,zero
 c006e9c:	003e0806 	br	c0066c0 <__alt_data_end+0xfc0066c0>
 c006ea0:	07000b44 	movi	fp,45
 c006ea4:	df002785 	stb	fp,158(sp)
 c006ea8:	0039e306 	br	c005638 <__alt_data_end+0xfc005638>
 c006eac:	d9002e17 	ldw	r4,184(sp)
 c006eb0:	d9402f17 	ldw	r5,188(sp)
 c006eb4:	20800017 	ldw	r2,0(r4)
 c006eb8:	21000104 	addi	r4,r4,4
 c006ebc:	d9002e15 	stw	r4,184(sp)
 c006ec0:	11400015 	stw	r5,0(r2)
 c006ec4:	0038c106 	br	c0051cc <__alt_data_end+0xfc0051cc>
 c006ec8:	00c00b44 	movi	r3,45
 c006ecc:	d8c02785 	stb	r3,158(sp)
 c006ed0:	d8802915 	stw	r2,164(sp)
 c006ed4:	dc802c17 	ldw	r18,176(sp)
 c006ed8:	d8002a15 	stw	zero,168(sp)
 c006edc:	07000b44 	movi	fp,45
 c006ee0:	003a5106 	br	c005828 <__alt_data_end+0xfc005828>
 c006ee4:	9080004c 	andi	r2,r18,1
 c006ee8:	1000941e 	bne	r2,zero,c00713c <___svfprintf_internal_r+0x201c>
 c006eec:	d8802117 	ldw	r2,132(sp)
 c006ef0:	1405c83a 	sub	r2,r2,r16
 c006ef4:	d8803315 	stw	r2,204(sp)
 c006ef8:	b441151e 	bne	r22,r17,c007350 <___svfprintf_internal_r+0x2230>
 c006efc:	dd802617 	ldw	r22,152(sp)
 c006f00:	00bfff44 	movi	r2,-3
 c006f04:	b0801a16 	blt	r22,r2,c006f70 <___svfprintf_internal_r+0x1e50>
 c006f08:	d9402a17 	ldw	r5,168(sp)
 c006f0c:	2d801816 	blt	r5,r22,c006f70 <___svfprintf_internal_r+0x1e50>
 c006f10:	dd803215 	stw	r22,200(sp)
 c006f14:	003f3a06 	br	c006c00 <__alt_data_end+0xfc006c00>
 c006f18:	1025883a 	mov	r18,r2
 c006f1c:	0039883a 	mov	fp,zero
 c006f20:	00800084 	movi	r2,2
 c006f24:	003fd606 	br	c006e80 <__alt_data_end+0xfc006e80>
 c006f28:	9080004c 	andi	r2,r18,1
 c006f2c:	103f191e 	bne	r2,zero,c006b94 <__alt_data_end+0xfc006b94>
 c006f30:	d8802117 	ldw	r2,132(sp)
 c006f34:	003f2806 	br	c006bd8 <__alt_data_end+0xfc006bd8>
 c006f38:	010300b4 	movhi	r4,3074
 c006f3c:	2121ef84 	addi	r4,r4,-30786
 c006f40:	d9002c15 	stw	r4,176(sp)
 c006f44:	003c7c06 	br	c006138 <__alt_data_end+0xfc006138>
 c006f48:	e005883a 	mov	r2,fp
 c006f4c:	003f2206 	br	c006bd8 <__alt_data_end+0xfc006bd8>
 c006f50:	d9002a17 	ldw	r4,168(sp)
 c006f54:	df002783 	ldbu	fp,158(sp)
 c006f58:	dd002e15 	stw	r20,184(sp)
 c006f5c:	d9002915 	stw	r4,164(sp)
 c006f60:	d9002b15 	stw	r4,172(sp)
 c006f64:	d8002a15 	stw	zero,168(sp)
 c006f68:	d8003215 	stw	zero,200(sp)
 c006f6c:	003a2a06 	br	c005818 <__alt_data_end+0xfc005818>
 c006f70:	8c7fff84 	addi	r17,r17,-2
 c006f74:	b5bfffc4 	addi	r22,r22,-1
 c006f78:	dd802615 	stw	r22,152(sp)
 c006f7c:	dc4022c5 	stb	r17,139(sp)
 c006f80:	b000c316 	blt	r22,zero,c007290 <___svfprintf_internal_r+0x2170>
 c006f84:	00800ac4 	movi	r2,43
 c006f88:	d8802305 	stb	r2,140(sp)
 c006f8c:	00800244 	movi	r2,9
 c006f90:	15806e16 	blt	r2,r22,c00714c <___svfprintf_internal_r+0x202c>
 c006f94:	00800c04 	movi	r2,48
 c006f98:	b5800c04 	addi	r22,r22,48
 c006f9c:	d8802345 	stb	r2,141(sp)
 c006fa0:	dd802385 	stb	r22,142(sp)
 c006fa4:	d88023c4 	addi	r2,sp,143
 c006fa8:	df0022c4 	addi	fp,sp,139
 c006fac:	d8c03317 	ldw	r3,204(sp)
 c006fb0:	1739c83a 	sub	fp,r2,fp
 c006fb4:	d9003317 	ldw	r4,204(sp)
 c006fb8:	e0c7883a 	add	r3,fp,r3
 c006fbc:	df003b15 	stw	fp,236(sp)
 c006fc0:	d8c02b15 	stw	r3,172(sp)
 c006fc4:	00800044 	movi	r2,1
 c006fc8:	1100b70e 	bge	r2,r4,c0072a8 <___svfprintf_internal_r+0x2188>
 c006fcc:	d8c02b17 	ldw	r3,172(sp)
 c006fd0:	18c00044 	addi	r3,r3,1
 c006fd4:	d8c02b15 	stw	r3,172(sp)
 c006fd8:	1805883a 	mov	r2,r3
 c006fdc:	1800b016 	blt	r3,zero,c0072a0 <___svfprintf_internal_r+0x2180>
 c006fe0:	d8003215 	stw	zero,200(sp)
 c006fe4:	003f1006 	br	c006c28 <__alt_data_end+0xfc006c28>
 c006fe8:	d8802a17 	ldw	r2,168(sp)
 c006fec:	103ec71e 	bne	r2,zero,c006b0c <__alt_data_end+0xfc006b0c>
 c006ff0:	dc002a15 	stw	r16,168(sp)
 c006ff4:	003ec506 	br	c006b0c <__alt_data_end+0xfc006b0c>
 c006ff8:	d9402d17 	ldw	r5,180(sp)
 c006ffc:	d9801e04 	addi	r6,sp,120
 c007000:	9809883a 	mov	r4,r19
 c007004:	c00eac00 	call	c00eac0 <__ssprint_r>
 c007008:	10392c1e 	bne	r2,zero,c0054bc <__alt_data_end+0xfc0054bc>
 c00700c:	dc402617 	ldw	r17,152(sp)
 c007010:	d8c02017 	ldw	r3,128(sp)
 c007014:	d8801f17 	ldw	r2,124(sp)
 c007018:	da000404 	addi	r8,sp,16
 c00701c:	003e7706 	br	c0069fc <__alt_data_end+0xfc0069fc>
 c007020:	182f883a 	mov	r23,r3
 c007024:	d8002a15 	stw	zero,168(sp)
 c007028:	00389306 	br	c005278 <__alt_data_end+0xfc005278>
 c00702c:	d8c02a17 	ldw	r3,168(sp)
 c007030:	d8802104 	addi	r2,sp,132
 c007034:	d8800315 	stw	r2,12(sp)
 c007038:	d9403617 	ldw	r5,216(sp)
 c00703c:	d8802504 	addi	r2,sp,148
 c007040:	d8800215 	stw	r2,8(sp)
 c007044:	d8802604 	addi	r2,sp,152
 c007048:	d8c00015 	stw	r3,0(sp)
 c00704c:	9809883a 	mov	r4,r19
 c007050:	d8800115 	stw	r2,4(sp)
 c007054:	01c000c4 	movi	r7,3
 c007058:	a00d883a 	mov	r6,r20
 c00705c:	da003e15 	stw	r8,248(sp)
 c007060:	c009b0c0 	call	c009b0c <_dtoa_r>
 c007064:	d9002a17 	ldw	r4,168(sp)
 c007068:	da003e17 	ldw	r8,248(sp)
 c00706c:	1021883a 	mov	r16,r2
 c007070:	1139883a 	add	fp,r2,r4
 c007074:	2007883a 	mov	r3,r4
 c007078:	81000007 	ldb	r4,0(r16)
 c00707c:	00800c04 	movi	r2,48
 c007080:	20806f26 	beq	r4,r2,c007240 <___svfprintf_internal_r+0x2120>
 c007084:	d8c02617 	ldw	r3,152(sp)
 c007088:	e0f9883a 	add	fp,fp,r3
 c00708c:	003ec206 	br	c006b98 <__alt_data_end+0xfc006b98>
 c007090:	00c00b44 	movi	r3,45
 c007094:	2520003c 	xorhi	r20,r4,32768
 c007098:	d8c02905 	stb	r3,164(sp)
 c00709c:	003ea106 	br	c006b24 <__alt_data_end+0xfc006b24>
 c0070a0:	d8c03217 	ldw	r3,200(sp)
 c0070a4:	00c0890e 	bge	zero,r3,c0072cc <___svfprintf_internal_r+0x21ac>
 c0070a8:	00800044 	movi	r2,1
 c0070ac:	d9003317 	ldw	r4,204(sp)
 c0070b0:	1105883a 	add	r2,r2,r4
 c0070b4:	d8802b15 	stw	r2,172(sp)
 c0070b8:	10005f16 	blt	r2,zero,c007238 <___svfprintf_internal_r+0x2118>
 c0070bc:	044019c4 	movi	r17,103
 c0070c0:	003ed906 	br	c006c28 <__alt_data_end+0xfc006c28>
 c0070c4:	d9002a17 	ldw	r4,168(sp)
 c0070c8:	20c00044 	addi	r3,r4,1
 c0070cc:	003e9c06 	br	c006b40 <__alt_data_end+0xfc006b40>
 c0070d0:	d9002a17 	ldw	r4,168(sp)
 c0070d4:	00c0680e 	bge	zero,r3,c007278 <___svfprintf_internal_r+0x2158>
 c0070d8:	2000461e 	bne	r4,zero,c0071f4 <___svfprintf_internal_r+0x20d4>
 c0070dc:	9480004c 	andi	r18,r18,1
 c0070e0:	9000441e 	bne	r18,zero,c0071f4 <___svfprintf_internal_r+0x20d4>
 c0070e4:	1805883a 	mov	r2,r3
 c0070e8:	1800a116 	blt	r3,zero,c007370 <___svfprintf_internal_r+0x2250>
 c0070ec:	d8c03217 	ldw	r3,200(sp)
 c0070f0:	d8c02b15 	stw	r3,172(sp)
 c0070f4:	003ecc06 	br	c006c28 <__alt_data_end+0xfc006c28>
 c0070f8:	d9402a17 	ldw	r5,168(sp)
 c0070fc:	d8802104 	addi	r2,sp,132
 c007100:	d8800315 	stw	r2,12(sp)
 c007104:	d9400015 	stw	r5,0(sp)
 c007108:	d8802504 	addi	r2,sp,148
 c00710c:	d9403617 	ldw	r5,216(sp)
 c007110:	d8800215 	stw	r2,8(sp)
 c007114:	d8802604 	addi	r2,sp,152
 c007118:	d8800115 	stw	r2,4(sp)
 c00711c:	01c000c4 	movi	r7,3
 c007120:	a00d883a 	mov	r6,r20
 c007124:	9809883a 	mov	r4,r19
 c007128:	da003e15 	stw	r8,248(sp)
 c00712c:	c009b0c0 	call	c009b0c <_dtoa_r>
 c007130:	d8c02a17 	ldw	r3,168(sp)
 c007134:	da003e17 	ldw	r8,248(sp)
 c007138:	1021883a 	mov	r16,r2
 c00713c:	00801184 	movi	r2,70
 c007140:	80f9883a 	add	fp,r16,r3
 c007144:	88bfcc26 	beq	r17,r2,c007078 <__alt_data_end+0xfc007078>
 c007148:	003e9306 	br	c006b98 <__alt_data_end+0xfc006b98>
 c00714c:	df0022c4 	addi	fp,sp,139
 c007150:	dc002a15 	stw	r16,168(sp)
 c007154:	9829883a 	mov	r20,r19
 c007158:	e021883a 	mov	r16,fp
 c00715c:	4027883a 	mov	r19,r8
 c007160:	b009883a 	mov	r4,r22
 c007164:	01400284 	movi	r5,10
 c007168:	c004cb00 	call	c004cb0 <__modsi3>
 c00716c:	10800c04 	addi	r2,r2,48
 c007170:	843fffc4 	addi	r16,r16,-1
 c007174:	b009883a 	mov	r4,r22
 c007178:	01400284 	movi	r5,10
 c00717c:	80800005 	stb	r2,0(r16)
 c007180:	c004c2c0 	call	c004c2c <__divsi3>
 c007184:	102d883a 	mov	r22,r2
 c007188:	00800244 	movi	r2,9
 c00718c:	15bff416 	blt	r2,r22,c007160 <__alt_data_end+0xfc007160>
 c007190:	9811883a 	mov	r8,r19
 c007194:	b0800c04 	addi	r2,r22,48
 c007198:	a027883a 	mov	r19,r20
 c00719c:	8029883a 	mov	r20,r16
 c0071a0:	a17fffc4 	addi	r5,r20,-1
 c0071a4:	a0bfffc5 	stb	r2,-1(r20)
 c0071a8:	dc002a17 	ldw	r16,168(sp)
 c0071ac:	2f00782e 	bgeu	r5,fp,c007390 <___svfprintf_internal_r+0x2270>
 c0071b0:	d9c02384 	addi	r7,sp,142
 c0071b4:	3d0fc83a 	sub	r7,r7,r20
 c0071b8:	d9002344 	addi	r4,sp,141
 c0071bc:	e1cf883a 	add	r7,fp,r7
 c0071c0:	00000106 	br	c0071c8 <___svfprintf_internal_r+0x20a8>
 c0071c4:	28800003 	ldbu	r2,0(r5)
 c0071c8:	20800005 	stb	r2,0(r4)
 c0071cc:	21000044 	addi	r4,r4,1
 c0071d0:	29400044 	addi	r5,r5,1
 c0071d4:	21fffb1e 	bne	r4,r7,c0071c4 <__alt_data_end+0xfc0071c4>
 c0071d8:	d8802304 	addi	r2,sp,140
 c0071dc:	1505c83a 	sub	r2,r2,r20
 c0071e0:	d8c02344 	addi	r3,sp,141
 c0071e4:	1885883a 	add	r2,r3,r2
 c0071e8:	003f7006 	br	c006fac <__alt_data_end+0xfc006fac>
 c0071ec:	0005883a 	mov	r2,zero
 c0071f0:	003f0b06 	br	c006e20 <__alt_data_end+0xfc006e20>
 c0071f4:	d9002a17 	ldw	r4,168(sp)
 c0071f8:	d8c03217 	ldw	r3,200(sp)
 c0071fc:	20800044 	addi	r2,r4,1
 c007200:	1885883a 	add	r2,r3,r2
 c007204:	d8802b15 	stw	r2,172(sp)
 c007208:	103e870e 	bge	r2,zero,c006c28 <__alt_data_end+0xfc006c28>
 c00720c:	0005883a 	mov	r2,zero
 c007210:	003e8506 	br	c006c28 <__alt_data_end+0xfc006c28>
 c007214:	010300b4 	movhi	r4,3074
 c007218:	2121ef84 	addi	r4,r4,-30786
 c00721c:	d9002c15 	stw	r4,176(sp)
 c007220:	003cc506 	br	c006538 <__alt_data_end+0xfc006538>
 c007224:	d8c03217 	ldw	r3,200(sp)
 c007228:	18c00044 	addi	r3,r3,1
 c00722c:	d8c02b15 	stw	r3,172(sp)
 c007230:	1805883a 	mov	r2,r3
 c007234:	183fa10e 	bge	r3,zero,c0070bc <__alt_data_end+0xfc0070bc>
 c007238:	0005883a 	mov	r2,zero
 c00723c:	003f9f06 	br	c0070bc <__alt_data_end+0xfc0070bc>
 c007240:	d9003617 	ldw	r4,216(sp)
 c007244:	000d883a 	mov	r6,zero
 c007248:	000f883a 	mov	r7,zero
 c00724c:	a00b883a 	mov	r5,r20
 c007250:	d8c03d15 	stw	r3,244(sp)
 c007254:	da003e15 	stw	r8,248(sp)
 c007258:	c013fbc0 	call	c013fbc <__eqdf2>
 c00725c:	d8c03d17 	ldw	r3,244(sp)
 c007260:	da003e17 	ldw	r8,248(sp)
 c007264:	103f8726 	beq	r2,zero,c007084 <__alt_data_end+0xfc007084>
 c007268:	00800044 	movi	r2,1
 c00726c:	10c7c83a 	sub	r3,r2,r3
 c007270:	d8c02615 	stw	r3,152(sp)
 c007274:	003f8406 	br	c007088 <__alt_data_end+0xfc007088>
 c007278:	20000e1e 	bne	r4,zero,c0072b4 <___svfprintf_internal_r+0x2194>
 c00727c:	9480004c 	andi	r18,r18,1
 c007280:	90000c1e 	bne	r18,zero,c0072b4 <___svfprintf_internal_r+0x2194>
 c007284:	00800044 	movi	r2,1
 c007288:	d8802b15 	stw	r2,172(sp)
 c00728c:	003e6606 	br	c006c28 <__alt_data_end+0xfc006c28>
 c007290:	00800b44 	movi	r2,45
 c007294:	05adc83a 	sub	r22,zero,r22
 c007298:	d8802305 	stb	r2,140(sp)
 c00729c:	003f3b06 	br	c006f8c <__alt_data_end+0xfc006f8c>
 c0072a0:	0005883a 	mov	r2,zero
 c0072a4:	003f4e06 	br	c006fe0 <__alt_data_end+0xfc006fe0>
 c0072a8:	90a4703a 	and	r18,r18,r2
 c0072ac:	903f4a26 	beq	r18,zero,c006fd8 <__alt_data_end+0xfc006fd8>
 c0072b0:	003f4606 	br	c006fcc <__alt_data_end+0xfc006fcc>
 c0072b4:	d8c02a17 	ldw	r3,168(sp)
 c0072b8:	18c00084 	addi	r3,r3,2
 c0072bc:	d8c02b15 	stw	r3,172(sp)
 c0072c0:	1805883a 	mov	r2,r3
 c0072c4:	183e580e 	bge	r3,zero,c006c28 <__alt_data_end+0xfc006c28>
 c0072c8:	003fd006 	br	c00720c <__alt_data_end+0xfc00720c>
 c0072cc:	00800084 	movi	r2,2
 c0072d0:	10c5c83a 	sub	r2,r2,r3
 c0072d4:	003f7506 	br	c0070ac <__alt_data_end+0xfc0070ac>
 c0072d8:	d9402e17 	ldw	r5,184(sp)
 c0072dc:	d9002e17 	ldw	r4,184(sp)
 c0072e0:	bc400043 	ldbu	r17,1(r23)
 c0072e4:	29400017 	ldw	r5,0(r5)
 c0072e8:	20800104 	addi	r2,r4,4
 c0072ec:	d8802e15 	stw	r2,184(sp)
 c0072f0:	d9402a15 	stw	r5,168(sp)
 c0072f4:	182f883a 	mov	r23,r3
 c0072f8:	283df10e 	bge	r5,zero,c006ac0 <__alt_data_end+0xfc006ac0>
 c0072fc:	8c403fcc 	andi	r17,r17,255
 c007300:	017fffc4 	movi	r5,-1
 c007304:	8c40201c 	xori	r17,r17,128
 c007308:	d9402a15 	stw	r5,168(sp)
 c00730c:	8c7fe004 	addi	r17,r17,-128
 c007310:	0037d806 	br	c005274 <__alt_data_end+0xfc005274>
 c007314:	9080004c 	andi	r2,r18,1
 c007318:	0039883a 	mov	fp,zero
 c00731c:	10000726 	beq	r2,zero,c00733c <___svfprintf_internal_r+0x221c>
 c007320:	d8c02817 	ldw	r3,160(sp)
 c007324:	dc001dc4 	addi	r16,sp,119
 c007328:	00800c04 	movi	r2,48
 c00732c:	1c07c83a 	sub	r3,r3,r16
 c007330:	d8801dc5 	stb	r2,119(sp)
 c007334:	d8c02b15 	stw	r3,172(sp)
 c007338:	00393106 	br	c005800 <__alt_data_end+0xfc005800>
 c00733c:	d8002b15 	stw	zero,172(sp)
 c007340:	dc001e04 	addi	r16,sp,120
 c007344:	00392e06 	br	c005800 <__alt_data_end+0xfc005800>
 c007348:	0005883a 	mov	r2,zero
 c00734c:	003e3306 	br	c006c1c <__alt_data_end+0xfc006c1c>
 c007350:	dd802617 	ldw	r22,152(sp)
 c007354:	003f0706 	br	c006f74 <__alt_data_end+0xfc006f74>
 c007358:	d8c02b03 	ldbu	r3,172(sp)
 c00735c:	d8c02785 	stb	r3,158(sp)
 c007360:	003a3506 	br	c005c38 <__alt_data_end+0xfc005c38>
 c007364:	d8c02b03 	ldbu	r3,172(sp)
 c007368:	d8c02785 	stb	r3,158(sp)
 c00736c:	003a1706 	br	c005bcc <__alt_data_end+0xfc005bcc>
 c007370:	0005883a 	mov	r2,zero
 c007374:	003f5d06 	br	c0070ec <__alt_data_end+0xfc0070ec>
 c007378:	d8c02b03 	ldbu	r3,172(sp)
 c00737c:	d8c02785 	stb	r3,158(sp)
 c007380:	0038f306 	br	c005750 <__alt_data_end+0xfc005750>
 c007384:	d8c02b03 	ldbu	r3,172(sp)
 c007388:	d8c02785 	stb	r3,158(sp)
 c00738c:	0038be06 	br	c005688 <__alt_data_end+0xfc005688>
 c007390:	d8802344 	addi	r2,sp,141
 c007394:	003f0506 	br	c006fac <__alt_data_end+0xfc006fac>
 c007398:	d8c02b03 	ldbu	r3,172(sp)
 c00739c:	d8c02785 	stb	r3,158(sp)
 c0073a0:	00388b06 	br	c0055d0 <__alt_data_end+0xfc0055d0>
 c0073a4:	d8c02b03 	ldbu	r3,172(sp)
 c0073a8:	d8c02785 	stb	r3,158(sp)
 c0073ac:	003ad706 	br	c005f0c <__alt_data_end+0xfc005f0c>
 c0073b0:	d9403917 	ldw	r5,228(sp)
 c0073b4:	00800304 	movi	r2,12
 c0073b8:	28800015 	stw	r2,0(r5)
 c0073bc:	00bfffc4 	movi	r2,-1
 c0073c0:	00384306 	br	c0054d0 <__alt_data_end+0xfc0054d0>
 c0073c4:	d8c02b03 	ldbu	r3,172(sp)
 c0073c8:	d8c02785 	stb	r3,158(sp)
 c0073cc:	003ab606 	br	c005ea8 <__alt_data_end+0xfc005ea8>
 c0073d0:	d8c02b03 	ldbu	r3,172(sp)
 c0073d4:	d8c02785 	stb	r3,158(sp)
 c0073d8:	003a8906 	br	c005e00 <__alt_data_end+0xfc005e00>

0c0073dc <___vfprintf_internal_r>:
 c0073dc:	deffb804 	addi	sp,sp,-288
 c0073e0:	dfc04715 	stw	ra,284(sp)
 c0073e4:	ddc04515 	stw	r23,276(sp)
 c0073e8:	dd404315 	stw	r21,268(sp)
 c0073ec:	d9002d15 	stw	r4,180(sp)
 c0073f0:	282f883a 	mov	r23,r5
 c0073f4:	302b883a 	mov	r21,r6
 c0073f8:	d9c02e15 	stw	r7,184(sp)
 c0073fc:	df004615 	stw	fp,280(sp)
 c007400:	dd804415 	stw	r22,272(sp)
 c007404:	dd004215 	stw	r20,264(sp)
 c007408:	dcc04115 	stw	r19,260(sp)
 c00740c:	dc804015 	stw	r18,256(sp)
 c007410:	dc403f15 	stw	r17,252(sp)
 c007414:	dc003e15 	stw	r16,248(sp)
 c007418:	c00c31c0 	call	c00c31c <_localeconv_r>
 c00741c:	10800017 	ldw	r2,0(r2)
 c007420:	1009883a 	mov	r4,r2
 c007424:	d8803415 	stw	r2,208(sp)
 c007428:	c0050880 	call	c005088 <strlen>
 c00742c:	d8803715 	stw	r2,220(sp)
 c007430:	d8802d17 	ldw	r2,180(sp)
 c007434:	10000226 	beq	r2,zero,c007440 <___vfprintf_internal_r+0x64>
 c007438:	10800e17 	ldw	r2,56(r2)
 c00743c:	1000fb26 	beq	r2,zero,c00782c <___vfprintf_internal_r+0x450>
 c007440:	b880030b 	ldhu	r2,12(r23)
 c007444:	10c8000c 	andi	r3,r2,8192
 c007448:	1800061e 	bne	r3,zero,c007464 <___vfprintf_internal_r+0x88>
 c00744c:	b9001917 	ldw	r4,100(r23)
 c007450:	00f7ffc4 	movi	r3,-8193
 c007454:	10880014 	ori	r2,r2,8192
 c007458:	20c6703a 	and	r3,r4,r3
 c00745c:	b880030d 	sth	r2,12(r23)
 c007460:	b8c01915 	stw	r3,100(r23)
 c007464:	10c0020c 	andi	r3,r2,8
 c007468:	1800c326 	beq	r3,zero,c007778 <___vfprintf_internal_r+0x39c>
 c00746c:	b8c00417 	ldw	r3,16(r23)
 c007470:	1800c126 	beq	r3,zero,c007778 <___vfprintf_internal_r+0x39c>
 c007474:	1080068c 	andi	r2,r2,26
 c007478:	00c00284 	movi	r3,10
 c00747c:	10c0c626 	beq	r2,r3,c007798 <___vfprintf_internal_r+0x3bc>
 c007480:	d8c00404 	addi	r3,sp,16
 c007484:	050300b4 	movhi	r20,3074
 c007488:	d9001e04 	addi	r4,sp,120
 c00748c:	a521f784 	addi	r20,r20,-30754
 c007490:	d8c01e15 	stw	r3,120(sp)
 c007494:	d8002015 	stw	zero,128(sp)
 c007498:	d8001f15 	stw	zero,124(sp)
 c00749c:	d8003315 	stw	zero,204(sp)
 c0074a0:	d8003615 	stw	zero,216(sp)
 c0074a4:	d8003815 	stw	zero,224(sp)
 c0074a8:	1811883a 	mov	r8,r3
 c0074ac:	d8003915 	stw	zero,228(sp)
 c0074b0:	d8003a15 	stw	zero,232(sp)
 c0074b4:	d8002f15 	stw	zero,188(sp)
 c0074b8:	d9002815 	stw	r4,160(sp)
 c0074bc:	a8800007 	ldb	r2,0(r21)
 c0074c0:	10028b26 	beq	r2,zero,c007ef0 <___vfprintf_internal_r+0xb14>
 c0074c4:	00c00944 	movi	r3,37
 c0074c8:	a823883a 	mov	r17,r21
 c0074cc:	10c0021e 	bne	r2,r3,c0074d8 <___vfprintf_internal_r+0xfc>
 c0074d0:	00001406 	br	c007524 <___vfprintf_internal_r+0x148>
 c0074d4:	10c00326 	beq	r2,r3,c0074e4 <___vfprintf_internal_r+0x108>
 c0074d8:	8c400044 	addi	r17,r17,1
 c0074dc:	88800007 	ldb	r2,0(r17)
 c0074e0:	103ffc1e 	bne	r2,zero,c0074d4 <__alt_data_end+0xfc0074d4>
 c0074e4:	8d61c83a 	sub	r16,r17,r21
 c0074e8:	80000e26 	beq	r16,zero,c007524 <___vfprintf_internal_r+0x148>
 c0074ec:	d8c02017 	ldw	r3,128(sp)
 c0074f0:	d8801f17 	ldw	r2,124(sp)
 c0074f4:	45400015 	stw	r21,0(r8)
 c0074f8:	1c07883a 	add	r3,r3,r16
 c0074fc:	10800044 	addi	r2,r2,1
 c007500:	d8c02015 	stw	r3,128(sp)
 c007504:	44000115 	stw	r16,4(r8)
 c007508:	d8801f15 	stw	r2,124(sp)
 c00750c:	00c001c4 	movi	r3,7
 c007510:	1880a916 	blt	r3,r2,c0077b8 <___vfprintf_internal_r+0x3dc>
 c007514:	42000204 	addi	r8,r8,8
 c007518:	d9402f17 	ldw	r5,188(sp)
 c00751c:	2c0b883a 	add	r5,r5,r16
 c007520:	d9402f15 	stw	r5,188(sp)
 c007524:	88800007 	ldb	r2,0(r17)
 c007528:	1000aa26 	beq	r2,zero,c0077d4 <___vfprintf_internal_r+0x3f8>
 c00752c:	8d400044 	addi	r21,r17,1
 c007530:	8c400047 	ldb	r17,1(r17)
 c007534:	0021883a 	mov	r16,zero
 c007538:	00bfffc4 	movi	r2,-1
 c00753c:	0025883a 	mov	r18,zero
 c007540:	dc002905 	stb	r16,164(sp)
 c007544:	d8002785 	stb	zero,158(sp)
 c007548:	d8002b05 	stb	zero,172(sp)
 c00754c:	d8802a15 	stw	r2,168(sp)
 c007550:	d8003115 	stw	zero,196(sp)
 c007554:	04c01604 	movi	r19,88
 c007558:	05800244 	movi	r22,9
 c00755c:	9021883a 	mov	r16,r18
 c007560:	4039883a 	mov	fp,r8
 c007564:	ad400044 	addi	r21,r21,1
 c007568:	88bff804 	addi	r2,r17,-32
 c00756c:	98833236 	bltu	r19,r2,c008238 <___vfprintf_internal_r+0xe5c>
 c007570:	100490ba 	slli	r2,r2,2
 c007574:	00c30034 	movhi	r3,3072
 c007578:	18dd6204 	addi	r3,r3,30088
 c00757c:	10c5883a 	add	r2,r2,r3
 c007580:	10800017 	ldw	r2,0(r2)
 c007584:	1000683a 	jmp	r2
 c007588:	0c008130 	cmpltui	r16,at,516
 c00758c:	0c008238 	rdprs	r16,at,520
 c007590:	0c008238 	rdprs	r16,at,520
 c007594:	0c008150 	cmplti	r16,at,517
 c007598:	0c008238 	rdprs	r16,at,520
 c00759c:	0c008238 	rdprs	r16,at,520
 c0075a0:	0c008238 	rdprs	r16,at,520
 c0075a4:	0c008238 	rdprs	r16,at,520
 c0075a8:	0c008238 	rdprs	r16,at,520
 c0075ac:	0c008238 	rdprs	r16,at,520
 c0075b0:	0c007838 	rdprs	r16,at,480
 c0075b4:	0c008040 	call	c00804 <__alt_mem_onchip_memory2_0+0xc00804>
 c0075b8:	0c008238 	rdprs	r16,at,520
 c0075bc:	0c0076fc 	xorhi	r16,at,475
 c0075c0:	0c00785c 	xori	r16,at,481
 c0075c4:	0c008238 	rdprs	r16,at,520
 c0075c8:	0c0078ac 	andhi	r16,at,482
 c0075cc:	0c0078b8 	rdprs	r16,at,482
 c0075d0:	0c0078b8 	rdprs	r16,at,482
 c0075d4:	0c0078b8 	rdprs	r16,at,482
 c0075d8:	0c0078b8 	rdprs	r16,at,482
 c0075dc:	0c0078b8 	rdprs	r16,at,482
 c0075e0:	0c0078b8 	rdprs	r16,at,482
 c0075e4:	0c0078b8 	rdprs	r16,at,482
 c0075e8:	0c0078b8 	rdprs	r16,at,482
 c0075ec:	0c0078b8 	rdprs	r16,at,482
 c0075f0:	0c008238 	rdprs	r16,at,520
 c0075f4:	0c008238 	rdprs	r16,at,520
 c0075f8:	0c008238 	rdprs	r16,at,520
 c0075fc:	0c008238 	rdprs	r16,at,520
 c007600:	0c008238 	rdprs	r16,at,520
 c007604:	0c008238 	rdprs	r16,at,520
 c007608:	0c008238 	rdprs	r16,at,520
 c00760c:	0c008238 	rdprs	r16,at,520
 c007610:	0c008238 	rdprs	r16,at,520
 c007614:	0c008238 	rdprs	r16,at,520
 c007618:	0c0078f4 	orhi	r16,at,483
 c00761c:	0c0079bc 	xorhi	r16,at,486
 c007620:	0c008238 	rdprs	r16,at,520
 c007624:	0c0079bc 	xorhi	r16,at,486
 c007628:	0c008238 	rdprs	r16,at,520
 c00762c:	0c008238 	rdprs	r16,at,520
 c007630:	0c008238 	rdprs	r16,at,520
 c007634:	0c008238 	rdprs	r16,at,520
 c007638:	0c007a68 	cmpgeui	r16,at,489
 c00763c:	0c008238 	rdprs	r16,at,520
 c007640:	0c008238 	rdprs	r16,at,520
 c007644:	0c007a74 	orhi	r16,at,489
 c007648:	0c008238 	rdprs	r16,at,520
 c00764c:	0c008238 	rdprs	r16,at,520
 c007650:	0c008238 	rdprs	r16,at,520
 c007654:	0c008238 	rdprs	r16,at,520
 c007658:	0c008238 	rdprs	r16,at,520
 c00765c:	0c007ef8 	rdprs	r16,at,507
 c007660:	0c008238 	rdprs	r16,at,520
 c007664:	0c008238 	rdprs	r16,at,520
 c007668:	0c007f64 	muli	r16,at,509
 c00766c:	0c008238 	rdprs	r16,at,520
 c007670:	0c008238 	rdprs	r16,at,520
 c007674:	0c008238 	rdprs	r16,at,520
 c007678:	0c008238 	rdprs	r16,at,520
 c00767c:	0c008238 	rdprs	r16,at,520
 c007680:	0c008238 	rdprs	r16,at,520
 c007684:	0c008238 	rdprs	r16,at,520
 c007688:	0c008238 	rdprs	r16,at,520
 c00768c:	0c008238 	rdprs	r16,at,520
 c007690:	0c008238 	rdprs	r16,at,520
 c007694:	0c0081dc 	xori	r16,at,519
 c007698:	0c00815c 	xori	r16,at,517
 c00769c:	0c0079bc 	xorhi	r16,at,486
 c0076a0:	0c0079bc 	xorhi	r16,at,486
 c0076a4:	0c0079bc 	xorhi	r16,at,486
 c0076a8:	0c00817c 	xorhi	r16,at,517
 c0076ac:	0c00815c 	xori	r16,at,517
 c0076b0:	0c008238 	rdprs	r16,at,520
 c0076b4:	0c008238 	rdprs	r16,at,520
 c0076b8:	0c008188 	cmpgei	r16,at,518
 c0076bc:	0c008238 	rdprs	r16,at,520
 c0076c0:	0c00819c 	xori	r16,at,518
 c0076c4:	0c008020 	cmpeqi	r16,at,512
 c0076c8:	0c007708 	cmpgei	r16,at,476
 c0076cc:	0c008058 	cmpnei	r16,at,513
 c0076d0:	0c008238 	rdprs	r16,at,520
 c0076d4:	0c008064 	muli	r16,at,513
 c0076d8:	0c008238 	rdprs	r16,at,520
 c0076dc:	0c0080c8 	cmpgei	r16,at,515
 c0076e0:	0c008238 	rdprs	r16,at,520
 c0076e4:	0c008238 	rdprs	r16,at,520
 c0076e8:	0c0080e8 	cmpgeui	r16,at,515
 c0076ec:	d8c03117 	ldw	r3,196(sp)
 c0076f0:	d8802e15 	stw	r2,184(sp)
 c0076f4:	00c7c83a 	sub	r3,zero,r3
 c0076f8:	d8c03115 	stw	r3,196(sp)
 c0076fc:	84000114 	ori	r16,r16,4
 c007700:	ac400007 	ldb	r17,0(r21)
 c007704:	003f9706 	br	c007564 <__alt_data_end+0xfc007564>
 c007708:	00800c04 	movi	r2,48
 c00770c:	d8802705 	stb	r2,156(sp)
 c007710:	00801e04 	movi	r2,120
 c007714:	d8802745 	stb	r2,157(sp)
 c007718:	d9002a17 	ldw	r4,168(sp)
 c00771c:	d8802e17 	ldw	r2,184(sp)
 c007720:	d8002785 	stb	zero,158(sp)
 c007724:	e011883a 	mov	r8,fp
 c007728:	10c00104 	addi	r3,r2,4
 c00772c:	14c00017 	ldw	r19,0(r2)
 c007730:	002d883a 	mov	r22,zero
 c007734:	80800094 	ori	r2,r16,2
 c007738:	2002ca16 	blt	r4,zero,c008264 <___vfprintf_internal_r+0xe88>
 c00773c:	00bfdfc4 	movi	r2,-129
 c007740:	80a4703a 	and	r18,r16,r2
 c007744:	d8c02e15 	stw	r3,184(sp)
 c007748:	94800094 	ori	r18,r18,2
 c00774c:	9802b41e 	bne	r19,zero,c008220 <___vfprintf_internal_r+0xe44>
 c007750:	014300b4 	movhi	r5,3074
 c007754:	2961e804 	addi	r5,r5,-30816
 c007758:	d9403915 	stw	r5,228(sp)
 c00775c:	04401e04 	movi	r17,120
 c007760:	d8802a17 	ldw	r2,168(sp)
 c007764:	0039883a 	mov	fp,zero
 c007768:	1001fa26 	beq	r2,zero,c007f54 <___vfprintf_internal_r+0xb78>
 c00776c:	0027883a 	mov	r19,zero
 c007770:	002d883a 	mov	r22,zero
 c007774:	00021906 	br	c007fdc <___vfprintf_internal_r+0xc00>
 c007778:	d9002d17 	ldw	r4,180(sp)
 c00777c:	b80b883a 	mov	r5,r23
 c007780:	c0097900 	call	c009790 <__swsetup_r>
 c007784:	1005dc1e 	bne	r2,zero,c008ef8 <___vfprintf_internal_r+0x1b1c>
 c007788:	b880030b 	ldhu	r2,12(r23)
 c00778c:	00c00284 	movi	r3,10
 c007790:	1080068c 	andi	r2,r2,26
 c007794:	10ff3a1e 	bne	r2,r3,c007480 <__alt_data_end+0xfc007480>
 c007798:	b880038f 	ldh	r2,14(r23)
 c00779c:	103f3816 	blt	r2,zero,c007480 <__alt_data_end+0xfc007480>
 c0077a0:	d9c02e17 	ldw	r7,184(sp)
 c0077a4:	d9002d17 	ldw	r4,180(sp)
 c0077a8:	a80d883a 	mov	r6,r21
 c0077ac:	b80b883a 	mov	r5,r23
 c0077b0:	c0096d40 	call	c0096d4 <__sbprintf>
 c0077b4:	00001106 	br	c0077fc <___vfprintf_internal_r+0x420>
 c0077b8:	d9002d17 	ldw	r4,180(sp)
 c0077bc:	d9801e04 	addi	r6,sp,120
 c0077c0:	b80b883a 	mov	r5,r23
 c0077c4:	c01012c0 	call	c01012c <__sprint_r>
 c0077c8:	1000081e 	bne	r2,zero,c0077ec <___vfprintf_internal_r+0x410>
 c0077cc:	da000404 	addi	r8,sp,16
 c0077d0:	003f5106 	br	c007518 <__alt_data_end+0xfc007518>
 c0077d4:	d8802017 	ldw	r2,128(sp)
 c0077d8:	10000426 	beq	r2,zero,c0077ec <___vfprintf_internal_r+0x410>
 c0077dc:	d9002d17 	ldw	r4,180(sp)
 c0077e0:	d9801e04 	addi	r6,sp,120
 c0077e4:	b80b883a 	mov	r5,r23
 c0077e8:	c01012c0 	call	c01012c <__sprint_r>
 c0077ec:	b880030b 	ldhu	r2,12(r23)
 c0077f0:	1080100c 	andi	r2,r2,64
 c0077f4:	1005c01e 	bne	r2,zero,c008ef8 <___vfprintf_internal_r+0x1b1c>
 c0077f8:	d8802f17 	ldw	r2,188(sp)
 c0077fc:	dfc04717 	ldw	ra,284(sp)
 c007800:	df004617 	ldw	fp,280(sp)
 c007804:	ddc04517 	ldw	r23,276(sp)
 c007808:	dd804417 	ldw	r22,272(sp)
 c00780c:	dd404317 	ldw	r21,268(sp)
 c007810:	dd004217 	ldw	r20,264(sp)
 c007814:	dcc04117 	ldw	r19,260(sp)
 c007818:	dc804017 	ldw	r18,256(sp)
 c00781c:	dc403f17 	ldw	r17,252(sp)
 c007820:	dc003e17 	ldw	r16,248(sp)
 c007824:	dec04804 	addi	sp,sp,288
 c007828:	f800283a 	ret
 c00782c:	d9002d17 	ldw	r4,180(sp)
 c007830:	c00b79c0 	call	c00b79c <__sinit>
 c007834:	003f0206 	br	c007440 <__alt_data_end+0xfc007440>
 c007838:	d9002e17 	ldw	r4,184(sp)
 c00783c:	d9402e17 	ldw	r5,184(sp)
 c007840:	21000017 	ldw	r4,0(r4)
 c007844:	28800104 	addi	r2,r5,4
 c007848:	d9003115 	stw	r4,196(sp)
 c00784c:	203fa716 	blt	r4,zero,c0076ec <__alt_data_end+0xfc0076ec>
 c007850:	d8802e15 	stw	r2,184(sp)
 c007854:	ac400007 	ldb	r17,0(r21)
 c007858:	003f4206 	br	c007564 <__alt_data_end+0xfc007564>
 c00785c:	ac400007 	ldb	r17,0(r21)
 c007860:	01000a84 	movi	r4,42
 c007864:	a8c00044 	addi	r3,r21,1
 c007868:	89075826 	beq	r17,r4,c0095cc <___vfprintf_internal_r+0x21f0>
 c00786c:	8cbff404 	addi	r18,r17,-48
 c007870:	b486ae36 	bltu	r22,r18,c00932c <___vfprintf_internal_r+0x1f50>
 c007874:	0009883a 	mov	r4,zero
 c007878:	1823883a 	mov	r17,r3
 c00787c:	01400284 	movi	r5,10
 c007880:	c004de00 	call	c004de0 <__mulsi3>
 c007884:	88c00007 	ldb	r3,0(r17)
 c007888:	1489883a 	add	r4,r2,r18
 c00788c:	8d400044 	addi	r21,r17,1
 c007890:	1cbff404 	addi	r18,r3,-48
 c007894:	a823883a 	mov	r17,r21
 c007898:	b4bff82e 	bgeu	r22,r18,c00787c <__alt_data_end+0xfc00787c>
 c00789c:	1823883a 	mov	r17,r3
 c0078a0:	2005f616 	blt	r4,zero,c00907c <___vfprintf_internal_r+0x1ca0>
 c0078a4:	d9002a15 	stw	r4,168(sp)
 c0078a8:	003f2f06 	br	c007568 <__alt_data_end+0xfc007568>
 c0078ac:	84002014 	ori	r16,r16,128
 c0078b0:	ac400007 	ldb	r17,0(r21)
 c0078b4:	003f2b06 	br	c007564 <__alt_data_end+0xfc007564>
 c0078b8:	8cbff404 	addi	r18,r17,-48
 c0078bc:	d8003115 	stw	zero,196(sp)
 c0078c0:	0009883a 	mov	r4,zero
 c0078c4:	a823883a 	mov	r17,r21
 c0078c8:	01400284 	movi	r5,10
 c0078cc:	c004de00 	call	c004de0 <__mulsi3>
 c0078d0:	88c00007 	ldb	r3,0(r17)
 c0078d4:	9089883a 	add	r4,r18,r2
 c0078d8:	ad400044 	addi	r21,r21,1
 c0078dc:	1cbff404 	addi	r18,r3,-48
 c0078e0:	a823883a 	mov	r17,r21
 c0078e4:	b4bff82e 	bgeu	r22,r18,c0078c8 <__alt_data_end+0xfc0078c8>
 c0078e8:	1823883a 	mov	r17,r3
 c0078ec:	d9003115 	stw	r4,196(sp)
 c0078f0:	003f1d06 	br	c007568 <__alt_data_end+0xfc007568>
 c0078f4:	8025883a 	mov	r18,r16
 c0078f8:	dc002903 	ldbu	r16,164(sp)
 c0078fc:	e011883a 	mov	r8,fp
 c007900:	84003fcc 	andi	r16,r16,255
 c007904:	8007531e 	bne	r16,zero,c009654 <___vfprintf_internal_r+0x2278>
 c007908:	94800414 	ori	r18,r18,16
 c00790c:	9080080c 	andi	r2,r18,32
 c007910:	1003a326 	beq	r2,zero,c0087a0 <___vfprintf_internal_r+0x13c4>
 c007914:	d9002e17 	ldw	r4,184(sp)
 c007918:	20800117 	ldw	r2,4(r4)
 c00791c:	24c00017 	ldw	r19,0(r4)
 c007920:	21000204 	addi	r4,r4,8
 c007924:	d9002e15 	stw	r4,184(sp)
 c007928:	102d883a 	mov	r22,r2
 c00792c:	10047316 	blt	r2,zero,c008afc <___vfprintf_internal_r+0x1720>
 c007930:	d9002a17 	ldw	r4,168(sp)
 c007934:	df002783 	ldbu	fp,158(sp)
 c007938:	2003e416 	blt	r4,zero,c0088cc <___vfprintf_internal_r+0x14f0>
 c00793c:	00ffdfc4 	movi	r3,-129
 c007940:	9d84b03a 	or	r2,r19,r22
 c007944:	90e4703a 	and	r18,r18,r3
 c007948:	10018026 	beq	r2,zero,c007f4c <___vfprintf_internal_r+0xb70>
 c00794c:	b003ab26 	beq	r22,zero,c0087fc <___vfprintf_internal_r+0x1420>
 c007950:	dc402915 	stw	r17,164(sp)
 c007954:	dc001e04 	addi	r16,sp,120
 c007958:	b023883a 	mov	r17,r22
 c00795c:	402d883a 	mov	r22,r8
 c007960:	9809883a 	mov	r4,r19
 c007964:	880b883a 	mov	r5,r17
 c007968:	01800284 	movi	r6,10
 c00796c:	000f883a 	mov	r7,zero
 c007970:	c01277c0 	call	c01277c <__umoddi3>
 c007974:	10800c04 	addi	r2,r2,48
 c007978:	843fffc4 	addi	r16,r16,-1
 c00797c:	9809883a 	mov	r4,r19
 c007980:	880b883a 	mov	r5,r17
 c007984:	80800005 	stb	r2,0(r16)
 c007988:	01800284 	movi	r6,10
 c00798c:	000f883a 	mov	r7,zero
 c007990:	c0121800 	call	c012180 <__udivdi3>
 c007994:	1027883a 	mov	r19,r2
 c007998:	10c4b03a 	or	r2,r2,r3
 c00799c:	1823883a 	mov	r17,r3
 c0079a0:	103fef1e 	bne	r2,zero,c007960 <__alt_data_end+0xfc007960>
 c0079a4:	d8c02817 	ldw	r3,160(sp)
 c0079a8:	dc402917 	ldw	r17,164(sp)
 c0079ac:	b011883a 	mov	r8,r22
 c0079b0:	1c07c83a 	sub	r3,r3,r16
 c0079b4:	d8c02b15 	stw	r3,172(sp)
 c0079b8:	00005f06 	br	c007b38 <___vfprintf_internal_r+0x75c>
 c0079bc:	8025883a 	mov	r18,r16
 c0079c0:	dc002903 	ldbu	r16,164(sp)
 c0079c4:	e011883a 	mov	r8,fp
 c0079c8:	84003fcc 	andi	r16,r16,255
 c0079cc:	80071e1e 	bne	r16,zero,c009648 <___vfprintf_internal_r+0x226c>
 c0079d0:	9080020c 	andi	r2,r18,8
 c0079d4:	1004af26 	beq	r2,zero,c008c94 <___vfprintf_internal_r+0x18b8>
 c0079d8:	d9002e17 	ldw	r4,184(sp)
 c0079dc:	d9402e17 	ldw	r5,184(sp)
 c0079e0:	d8802e17 	ldw	r2,184(sp)
 c0079e4:	21000017 	ldw	r4,0(r4)
 c0079e8:	29400117 	ldw	r5,4(r5)
 c0079ec:	10800204 	addi	r2,r2,8
 c0079f0:	d9003615 	stw	r4,216(sp)
 c0079f4:	d9403815 	stw	r5,224(sp)
 c0079f8:	d8802e15 	stw	r2,184(sp)
 c0079fc:	d9003617 	ldw	r4,216(sp)
 c007a00:	d9403817 	ldw	r5,224(sp)
 c007a04:	da003d15 	stw	r8,244(sp)
 c007a08:	04000044 	movi	r16,1
 c007a0c:	c00e7e00 	call	c00e7e0 <__fpclassifyd>
 c007a10:	da003d17 	ldw	r8,244(sp)
 c007a14:	1404441e 	bne	r2,r16,c008b28 <___vfprintf_internal_r+0x174c>
 c007a18:	d9003617 	ldw	r4,216(sp)
 c007a1c:	d9403817 	ldw	r5,224(sp)
 c007a20:	000d883a 	mov	r6,zero
 c007a24:	000f883a 	mov	r7,zero
 c007a28:	c0141200 	call	c014120 <__ledf2>
 c007a2c:	da003d17 	ldw	r8,244(sp)
 c007a30:	1005e316 	blt	r2,zero,c0091c0 <___vfprintf_internal_r+0x1de4>
 c007a34:	df002783 	ldbu	fp,158(sp)
 c007a38:	008011c4 	movi	r2,71
 c007a3c:	1445580e 	bge	r2,r17,c008fa0 <___vfprintf_internal_r+0x1bc4>
 c007a40:	040300b4 	movhi	r16,3074
 c007a44:	8421e004 	addi	r16,r16,-30848
 c007a48:	00c000c4 	movi	r3,3
 c007a4c:	00bfdfc4 	movi	r2,-129
 c007a50:	d8c02915 	stw	r3,164(sp)
 c007a54:	90a4703a 	and	r18,r18,r2
 c007a58:	d8c02b15 	stw	r3,172(sp)
 c007a5c:	d8002a15 	stw	zero,168(sp)
 c007a60:	d8003215 	stw	zero,200(sp)
 c007a64:	00003a06 	br	c007b50 <___vfprintf_internal_r+0x774>
 c007a68:	84000214 	ori	r16,r16,8
 c007a6c:	ac400007 	ldb	r17,0(r21)
 c007a70:	003ebc06 	br	c007564 <__alt_data_end+0xfc007564>
 c007a74:	8025883a 	mov	r18,r16
 c007a78:	dc002903 	ldbu	r16,164(sp)
 c007a7c:	e011883a 	mov	r8,fp
 c007a80:	84003fcc 	andi	r16,r16,255
 c007a84:	8007001e 	bne	r16,zero,c009688 <___vfprintf_internal_r+0x22ac>
 c007a88:	94800414 	ori	r18,r18,16
 c007a8c:	9080080c 	andi	r2,r18,32
 c007a90:	1002fa26 	beq	r2,zero,c00867c <___vfprintf_internal_r+0x12a0>
 c007a94:	d9002e17 	ldw	r4,184(sp)
 c007a98:	d9402a17 	ldw	r5,168(sp)
 c007a9c:	d8002785 	stb	zero,158(sp)
 c007aa0:	20800204 	addi	r2,r4,8
 c007aa4:	24c00017 	ldw	r19,0(r4)
 c007aa8:	25800117 	ldw	r22,4(r4)
 c007aac:	2804b116 	blt	r5,zero,c008d74 <___vfprintf_internal_r+0x1998>
 c007ab0:	013fdfc4 	movi	r4,-129
 c007ab4:	9d86b03a 	or	r3,r19,r22
 c007ab8:	d8802e15 	stw	r2,184(sp)
 c007abc:	9124703a 	and	r18,r18,r4
 c007ac0:	1802fb1e 	bne	r3,zero,c0086b0 <___vfprintf_internal_r+0x12d4>
 c007ac4:	d8c02a17 	ldw	r3,168(sp)
 c007ac8:	0039883a 	mov	fp,zero
 c007acc:	1805e526 	beq	r3,zero,c009264 <___vfprintf_internal_r+0x1e88>
 c007ad0:	0027883a 	mov	r19,zero
 c007ad4:	002d883a 	mov	r22,zero
 c007ad8:	dc001e04 	addi	r16,sp,120
 c007adc:	9806d0fa 	srli	r3,r19,3
 c007ae0:	b008977a 	slli	r4,r22,29
 c007ae4:	b02cd0fa 	srli	r22,r22,3
 c007ae8:	9cc001cc 	andi	r19,r19,7
 c007aec:	98800c04 	addi	r2,r19,48
 c007af0:	843fffc4 	addi	r16,r16,-1
 c007af4:	20e6b03a 	or	r19,r4,r3
 c007af8:	80800005 	stb	r2,0(r16)
 c007afc:	9d86b03a 	or	r3,r19,r22
 c007b00:	183ff61e 	bne	r3,zero,c007adc <__alt_data_end+0xfc007adc>
 c007b04:	90c0004c 	andi	r3,r18,1
 c007b08:	18014126 	beq	r3,zero,c008010 <___vfprintf_internal_r+0xc34>
 c007b0c:	10803fcc 	andi	r2,r2,255
 c007b10:	1080201c 	xori	r2,r2,128
 c007b14:	10bfe004 	addi	r2,r2,-128
 c007b18:	00c00c04 	movi	r3,48
 c007b1c:	10c13c26 	beq	r2,r3,c008010 <___vfprintf_internal_r+0xc34>
 c007b20:	80ffffc5 	stb	r3,-1(r16)
 c007b24:	d8c02817 	ldw	r3,160(sp)
 c007b28:	80bfffc4 	addi	r2,r16,-1
 c007b2c:	1021883a 	mov	r16,r2
 c007b30:	1887c83a 	sub	r3,r3,r2
 c007b34:	d8c02b15 	stw	r3,172(sp)
 c007b38:	d8802b17 	ldw	r2,172(sp)
 c007b3c:	d9002a17 	ldw	r4,168(sp)
 c007b40:	1100010e 	bge	r2,r4,c007b48 <___vfprintf_internal_r+0x76c>
 c007b44:	2005883a 	mov	r2,r4
 c007b48:	d8802915 	stw	r2,164(sp)
 c007b4c:	d8003215 	stw	zero,200(sp)
 c007b50:	e7003fcc 	andi	fp,fp,255
 c007b54:	e700201c 	xori	fp,fp,128
 c007b58:	e73fe004 	addi	fp,fp,-128
 c007b5c:	e0000326 	beq	fp,zero,c007b6c <___vfprintf_internal_r+0x790>
 c007b60:	d8c02917 	ldw	r3,164(sp)
 c007b64:	18c00044 	addi	r3,r3,1
 c007b68:	d8c02915 	stw	r3,164(sp)
 c007b6c:	90c0008c 	andi	r3,r18,2
 c007b70:	d8c02c15 	stw	r3,176(sp)
 c007b74:	18000326 	beq	r3,zero,c007b84 <___vfprintf_internal_r+0x7a8>
 c007b78:	d8c02917 	ldw	r3,164(sp)
 c007b7c:	18c00084 	addi	r3,r3,2
 c007b80:	d8c02915 	stw	r3,164(sp)
 c007b84:	90c0210c 	andi	r3,r18,132
 c007b88:	d8c03015 	stw	r3,192(sp)
 c007b8c:	1801c51e 	bne	r3,zero,c0082a4 <___vfprintf_internal_r+0xec8>
 c007b90:	d9003117 	ldw	r4,196(sp)
 c007b94:	d8c02917 	ldw	r3,164(sp)
 c007b98:	20e7c83a 	sub	r19,r4,r3
 c007b9c:	04c1c10e 	bge	zero,r19,c0082a4 <___vfprintf_internal_r+0xec8>
 c007ba0:	02400404 	movi	r9,16
 c007ba4:	d8c02017 	ldw	r3,128(sp)
 c007ba8:	d8801f17 	ldw	r2,124(sp)
 c007bac:	4cc52f0e 	bge	r9,r19,c00906c <___vfprintf_internal_r+0x1c90>
 c007bb0:	014300b4 	movhi	r5,3074
 c007bb4:	2961fb84 	addi	r5,r5,-30738
 c007bb8:	dc403b15 	stw	r17,236(sp)
 c007bbc:	d9403515 	stw	r5,212(sp)
 c007bc0:	9823883a 	mov	r17,r19
 c007bc4:	482d883a 	mov	r22,r9
 c007bc8:	9027883a 	mov	r19,r18
 c007bcc:	070001c4 	movi	fp,7
 c007bd0:	8025883a 	mov	r18,r16
 c007bd4:	dc002d17 	ldw	r16,180(sp)
 c007bd8:	00000306 	br	c007be8 <___vfprintf_internal_r+0x80c>
 c007bdc:	8c7ffc04 	addi	r17,r17,-16
 c007be0:	42000204 	addi	r8,r8,8
 c007be4:	b440130e 	bge	r22,r17,c007c34 <___vfprintf_internal_r+0x858>
 c007be8:	010300b4 	movhi	r4,3074
 c007bec:	18c00404 	addi	r3,r3,16
 c007bf0:	10800044 	addi	r2,r2,1
 c007bf4:	2121fb84 	addi	r4,r4,-30738
 c007bf8:	41000015 	stw	r4,0(r8)
 c007bfc:	45800115 	stw	r22,4(r8)
 c007c00:	d8c02015 	stw	r3,128(sp)
 c007c04:	d8801f15 	stw	r2,124(sp)
 c007c08:	e0bff40e 	bge	fp,r2,c007bdc <__alt_data_end+0xfc007bdc>
 c007c0c:	d9801e04 	addi	r6,sp,120
 c007c10:	b80b883a 	mov	r5,r23
 c007c14:	8009883a 	mov	r4,r16
 c007c18:	c01012c0 	call	c01012c <__sprint_r>
 c007c1c:	103ef31e 	bne	r2,zero,c0077ec <__alt_data_end+0xfc0077ec>
 c007c20:	8c7ffc04 	addi	r17,r17,-16
 c007c24:	d8c02017 	ldw	r3,128(sp)
 c007c28:	d8801f17 	ldw	r2,124(sp)
 c007c2c:	da000404 	addi	r8,sp,16
 c007c30:	b47fed16 	blt	r22,r17,c007be8 <__alt_data_end+0xfc007be8>
 c007c34:	9021883a 	mov	r16,r18
 c007c38:	9825883a 	mov	r18,r19
 c007c3c:	8827883a 	mov	r19,r17
 c007c40:	dc403b17 	ldw	r17,236(sp)
 c007c44:	d9403517 	ldw	r5,212(sp)
 c007c48:	98c7883a 	add	r3,r19,r3
 c007c4c:	10800044 	addi	r2,r2,1
 c007c50:	41400015 	stw	r5,0(r8)
 c007c54:	44c00115 	stw	r19,4(r8)
 c007c58:	d8c02015 	stw	r3,128(sp)
 c007c5c:	d8801f15 	stw	r2,124(sp)
 c007c60:	010001c4 	movi	r4,7
 c007c64:	2082c516 	blt	r4,r2,c00877c <___vfprintf_internal_r+0x13a0>
 c007c68:	df002787 	ldb	fp,158(sp)
 c007c6c:	42000204 	addi	r8,r8,8
 c007c70:	e0000c26 	beq	fp,zero,c007ca4 <___vfprintf_internal_r+0x8c8>
 c007c74:	d8801f17 	ldw	r2,124(sp)
 c007c78:	d9002784 	addi	r4,sp,158
 c007c7c:	18c00044 	addi	r3,r3,1
 c007c80:	10800044 	addi	r2,r2,1
 c007c84:	41000015 	stw	r4,0(r8)
 c007c88:	01000044 	movi	r4,1
 c007c8c:	41000115 	stw	r4,4(r8)
 c007c90:	d8c02015 	stw	r3,128(sp)
 c007c94:	d8801f15 	stw	r2,124(sp)
 c007c98:	010001c4 	movi	r4,7
 c007c9c:	20825e16 	blt	r4,r2,c008618 <___vfprintf_internal_r+0x123c>
 c007ca0:	42000204 	addi	r8,r8,8
 c007ca4:	d8802c17 	ldw	r2,176(sp)
 c007ca8:	10000c26 	beq	r2,zero,c007cdc <___vfprintf_internal_r+0x900>
 c007cac:	d8801f17 	ldw	r2,124(sp)
 c007cb0:	d9002704 	addi	r4,sp,156
 c007cb4:	18c00084 	addi	r3,r3,2
 c007cb8:	10800044 	addi	r2,r2,1
 c007cbc:	41000015 	stw	r4,0(r8)
 c007cc0:	01000084 	movi	r4,2
 c007cc4:	41000115 	stw	r4,4(r8)
 c007cc8:	d8c02015 	stw	r3,128(sp)
 c007ccc:	d8801f15 	stw	r2,124(sp)
 c007cd0:	010001c4 	movi	r4,7
 c007cd4:	20825816 	blt	r4,r2,c008638 <___vfprintf_internal_r+0x125c>
 c007cd8:	42000204 	addi	r8,r8,8
 c007cdc:	d9003017 	ldw	r4,192(sp)
 c007ce0:	00802004 	movi	r2,128
 c007ce4:	2081bb26 	beq	r4,r2,c0083d4 <___vfprintf_internal_r+0xff8>
 c007ce8:	d9402a17 	ldw	r5,168(sp)
 c007cec:	d8802b17 	ldw	r2,172(sp)
 c007cf0:	28adc83a 	sub	r22,r5,r2
 c007cf4:	0580310e 	bge	zero,r22,c007dbc <___vfprintf_internal_r+0x9e0>
 c007cf8:	07000404 	movi	fp,16
 c007cfc:	d8801f17 	ldw	r2,124(sp)
 c007d00:	e584360e 	bge	fp,r22,c008ddc <___vfprintf_internal_r+0x1a00>
 c007d04:	014300b4 	movhi	r5,3074
 c007d08:	2961f784 	addi	r5,r5,-30754
 c007d0c:	dc402a15 	stw	r17,168(sp)
 c007d10:	d9402c15 	stw	r5,176(sp)
 c007d14:	b023883a 	mov	r17,r22
 c007d18:	04c001c4 	movi	r19,7
 c007d1c:	a82d883a 	mov	r22,r21
 c007d20:	902b883a 	mov	r21,r18
 c007d24:	8025883a 	mov	r18,r16
 c007d28:	dc002d17 	ldw	r16,180(sp)
 c007d2c:	00000306 	br	c007d3c <___vfprintf_internal_r+0x960>
 c007d30:	8c7ffc04 	addi	r17,r17,-16
 c007d34:	42000204 	addi	r8,r8,8
 c007d38:	e440110e 	bge	fp,r17,c007d80 <___vfprintf_internal_r+0x9a4>
 c007d3c:	18c00404 	addi	r3,r3,16
 c007d40:	10800044 	addi	r2,r2,1
 c007d44:	45000015 	stw	r20,0(r8)
 c007d48:	47000115 	stw	fp,4(r8)
 c007d4c:	d8c02015 	stw	r3,128(sp)
 c007d50:	d8801f15 	stw	r2,124(sp)
 c007d54:	98bff60e 	bge	r19,r2,c007d30 <__alt_data_end+0xfc007d30>
 c007d58:	d9801e04 	addi	r6,sp,120
 c007d5c:	b80b883a 	mov	r5,r23
 c007d60:	8009883a 	mov	r4,r16
 c007d64:	c01012c0 	call	c01012c <__sprint_r>
 c007d68:	103ea01e 	bne	r2,zero,c0077ec <__alt_data_end+0xfc0077ec>
 c007d6c:	8c7ffc04 	addi	r17,r17,-16
 c007d70:	d8c02017 	ldw	r3,128(sp)
 c007d74:	d8801f17 	ldw	r2,124(sp)
 c007d78:	da000404 	addi	r8,sp,16
 c007d7c:	e47fef16 	blt	fp,r17,c007d3c <__alt_data_end+0xfc007d3c>
 c007d80:	9021883a 	mov	r16,r18
 c007d84:	a825883a 	mov	r18,r21
 c007d88:	b02b883a 	mov	r21,r22
 c007d8c:	882d883a 	mov	r22,r17
 c007d90:	dc402a17 	ldw	r17,168(sp)
 c007d94:	d9002c17 	ldw	r4,176(sp)
 c007d98:	1d87883a 	add	r3,r3,r22
 c007d9c:	10800044 	addi	r2,r2,1
 c007da0:	41000015 	stw	r4,0(r8)
 c007da4:	45800115 	stw	r22,4(r8)
 c007da8:	d8c02015 	stw	r3,128(sp)
 c007dac:	d8801f15 	stw	r2,124(sp)
 c007db0:	010001c4 	movi	r4,7
 c007db4:	20821016 	blt	r4,r2,c0085f8 <___vfprintf_internal_r+0x121c>
 c007db8:	42000204 	addi	r8,r8,8
 c007dbc:	9080400c 	andi	r2,r18,256
 c007dc0:	10013a1e 	bne	r2,zero,c0082ac <___vfprintf_internal_r+0xed0>
 c007dc4:	d9402b17 	ldw	r5,172(sp)
 c007dc8:	d8801f17 	ldw	r2,124(sp)
 c007dcc:	44000015 	stw	r16,0(r8)
 c007dd0:	1947883a 	add	r3,r3,r5
 c007dd4:	10800044 	addi	r2,r2,1
 c007dd8:	41400115 	stw	r5,4(r8)
 c007ddc:	d8c02015 	stw	r3,128(sp)
 c007de0:	d8801f15 	stw	r2,124(sp)
 c007de4:	010001c4 	movi	r4,7
 c007de8:	2081f516 	blt	r4,r2,c0085c0 <___vfprintf_internal_r+0x11e4>
 c007dec:	42000204 	addi	r8,r8,8
 c007df0:	9480010c 	andi	r18,r18,4
 c007df4:	90003226 	beq	r18,zero,c007ec0 <___vfprintf_internal_r+0xae4>
 c007df8:	d9403117 	ldw	r5,196(sp)
 c007dfc:	d8802917 	ldw	r2,164(sp)
 c007e00:	28a1c83a 	sub	r16,r5,r2
 c007e04:	04002e0e 	bge	zero,r16,c007ec0 <___vfprintf_internal_r+0xae4>
 c007e08:	04400404 	movi	r17,16
 c007e0c:	d8801f17 	ldw	r2,124(sp)
 c007e10:	8c04c40e 	bge	r17,r16,c009124 <___vfprintf_internal_r+0x1d48>
 c007e14:	014300b4 	movhi	r5,3074
 c007e18:	2961fb84 	addi	r5,r5,-30738
 c007e1c:	d9403515 	stw	r5,212(sp)
 c007e20:	048001c4 	movi	r18,7
 c007e24:	dcc02d17 	ldw	r19,180(sp)
 c007e28:	00000306 	br	c007e38 <___vfprintf_internal_r+0xa5c>
 c007e2c:	843ffc04 	addi	r16,r16,-16
 c007e30:	42000204 	addi	r8,r8,8
 c007e34:	8c00130e 	bge	r17,r16,c007e84 <___vfprintf_internal_r+0xaa8>
 c007e38:	010300b4 	movhi	r4,3074
 c007e3c:	18c00404 	addi	r3,r3,16
 c007e40:	10800044 	addi	r2,r2,1
 c007e44:	2121fb84 	addi	r4,r4,-30738
 c007e48:	41000015 	stw	r4,0(r8)
 c007e4c:	44400115 	stw	r17,4(r8)
 c007e50:	d8c02015 	stw	r3,128(sp)
 c007e54:	d8801f15 	stw	r2,124(sp)
 c007e58:	90bff40e 	bge	r18,r2,c007e2c <__alt_data_end+0xfc007e2c>
 c007e5c:	d9801e04 	addi	r6,sp,120
 c007e60:	b80b883a 	mov	r5,r23
 c007e64:	9809883a 	mov	r4,r19
 c007e68:	c01012c0 	call	c01012c <__sprint_r>
 c007e6c:	103e5f1e 	bne	r2,zero,c0077ec <__alt_data_end+0xfc0077ec>
 c007e70:	843ffc04 	addi	r16,r16,-16
 c007e74:	d8c02017 	ldw	r3,128(sp)
 c007e78:	d8801f17 	ldw	r2,124(sp)
 c007e7c:	da000404 	addi	r8,sp,16
 c007e80:	8c3fed16 	blt	r17,r16,c007e38 <__alt_data_end+0xfc007e38>
 c007e84:	d9403517 	ldw	r5,212(sp)
 c007e88:	1c07883a 	add	r3,r3,r16
 c007e8c:	10800044 	addi	r2,r2,1
 c007e90:	41400015 	stw	r5,0(r8)
 c007e94:	44000115 	stw	r16,4(r8)
 c007e98:	d8c02015 	stw	r3,128(sp)
 c007e9c:	d8801f15 	stw	r2,124(sp)
 c007ea0:	010001c4 	movi	r4,7
 c007ea4:	2080060e 	bge	r4,r2,c007ec0 <___vfprintf_internal_r+0xae4>
 c007ea8:	d9002d17 	ldw	r4,180(sp)
 c007eac:	d9801e04 	addi	r6,sp,120
 c007eb0:	b80b883a 	mov	r5,r23
 c007eb4:	c01012c0 	call	c01012c <__sprint_r>
 c007eb8:	103e4c1e 	bne	r2,zero,c0077ec <__alt_data_end+0xfc0077ec>
 c007ebc:	d8c02017 	ldw	r3,128(sp)
 c007ec0:	d8803117 	ldw	r2,196(sp)
 c007ec4:	d9002917 	ldw	r4,164(sp)
 c007ec8:	1100010e 	bge	r2,r4,c007ed0 <___vfprintf_internal_r+0xaf4>
 c007ecc:	2005883a 	mov	r2,r4
 c007ed0:	d9402f17 	ldw	r5,188(sp)
 c007ed4:	288b883a 	add	r5,r5,r2
 c007ed8:	d9402f15 	stw	r5,188(sp)
 c007edc:	1801c01e 	bne	r3,zero,c0085e0 <___vfprintf_internal_r+0x1204>
 c007ee0:	a8800007 	ldb	r2,0(r21)
 c007ee4:	d8001f15 	stw	zero,124(sp)
 c007ee8:	da000404 	addi	r8,sp,16
 c007eec:	103d751e 	bne	r2,zero,c0074c4 <__alt_data_end+0xfc0074c4>
 c007ef0:	a823883a 	mov	r17,r21
 c007ef4:	003d8b06 	br	c007524 <__alt_data_end+0xfc007524>
 c007ef8:	8025883a 	mov	r18,r16
 c007efc:	dc002903 	ldbu	r16,164(sp)
 c007f00:	e011883a 	mov	r8,fp
 c007f04:	84003fcc 	andi	r16,r16,255
 c007f08:	8005e51e 	bne	r16,zero,c0096a0 <___vfprintf_internal_r+0x22c4>
 c007f0c:	94800414 	ori	r18,r18,16
 c007f10:	9080080c 	andi	r2,r18,32
 c007f14:	10022b26 	beq	r2,zero,c0087c4 <___vfprintf_internal_r+0x13e8>
 c007f18:	d9002e17 	ldw	r4,184(sp)
 c007f1c:	d9402a17 	ldw	r5,168(sp)
 c007f20:	d8002785 	stb	zero,158(sp)
 c007f24:	20c00204 	addi	r3,r4,8
 c007f28:	24c00017 	ldw	r19,0(r4)
 c007f2c:	25800117 	ldw	r22,4(r4)
 c007f30:	28042e16 	blt	r5,zero,c008fec <___vfprintf_internal_r+0x1c10>
 c007f34:	013fdfc4 	movi	r4,-129
 c007f38:	9d84b03a 	or	r2,r19,r22
 c007f3c:	d8c02e15 	stw	r3,184(sp)
 c007f40:	9124703a 	and	r18,r18,r4
 c007f44:	0039883a 	mov	fp,zero
 c007f48:	103e801e 	bne	r2,zero,c00794c <__alt_data_end+0xfc00794c>
 c007f4c:	d9002a17 	ldw	r4,168(sp)
 c007f50:	2002e01e 	bne	r4,zero,c008ad4 <___vfprintf_internal_r+0x16f8>
 c007f54:	d8002a15 	stw	zero,168(sp)
 c007f58:	d8002b15 	stw	zero,172(sp)
 c007f5c:	dc001e04 	addi	r16,sp,120
 c007f60:	003ef506 	br	c007b38 <__alt_data_end+0xfc007b38>
 c007f64:	8025883a 	mov	r18,r16
 c007f68:	dc002903 	ldbu	r16,164(sp)
 c007f6c:	e011883a 	mov	r8,fp
 c007f70:	84003fcc 	andi	r16,r16,255
 c007f74:	8005ba1e 	bne	r16,zero,c009660 <___vfprintf_internal_r+0x2284>
 c007f78:	010300b4 	movhi	r4,3074
 c007f7c:	2121e304 	addi	r4,r4,-30836
 c007f80:	d9003915 	stw	r4,228(sp)
 c007f84:	9080080c 	andi	r2,r18,32
 c007f88:	10006126 	beq	r2,zero,c008110 <___vfprintf_internal_r+0xd34>
 c007f8c:	d9402e17 	ldw	r5,184(sp)
 c007f90:	2cc00017 	ldw	r19,0(r5)
 c007f94:	2d800117 	ldw	r22,4(r5)
 c007f98:	29400204 	addi	r5,r5,8
 c007f9c:	d9402e15 	stw	r5,184(sp)
 c007fa0:	9080004c 	andi	r2,r18,1
 c007fa4:	1001ac26 	beq	r2,zero,c008658 <___vfprintf_internal_r+0x127c>
 c007fa8:	9d84b03a 	or	r2,r19,r22
 c007fac:	10038526 	beq	r2,zero,c008dc4 <___vfprintf_internal_r+0x19e8>
 c007fb0:	d8c02a17 	ldw	r3,168(sp)
 c007fb4:	00800c04 	movi	r2,48
 c007fb8:	d8802705 	stb	r2,156(sp)
 c007fbc:	dc402745 	stb	r17,157(sp)
 c007fc0:	d8002785 	stb	zero,158(sp)
 c007fc4:	90800094 	ori	r2,r18,2
 c007fc8:	18047916 	blt	r3,zero,c0091b0 <___vfprintf_internal_r+0x1dd4>
 c007fcc:	00bfdfc4 	movi	r2,-129
 c007fd0:	90a4703a 	and	r18,r18,r2
 c007fd4:	94800094 	ori	r18,r18,2
 c007fd8:	0039883a 	mov	fp,zero
 c007fdc:	d9003917 	ldw	r4,228(sp)
 c007fe0:	dc001e04 	addi	r16,sp,120
 c007fe4:	988003cc 	andi	r2,r19,15
 c007fe8:	b006973a 	slli	r3,r22,28
 c007fec:	2085883a 	add	r2,r4,r2
 c007ff0:	9826d13a 	srli	r19,r19,4
 c007ff4:	10800003 	ldbu	r2,0(r2)
 c007ff8:	b02cd13a 	srli	r22,r22,4
 c007ffc:	843fffc4 	addi	r16,r16,-1
 c008000:	1ce6b03a 	or	r19,r3,r19
 c008004:	80800005 	stb	r2,0(r16)
 c008008:	9d84b03a 	or	r2,r19,r22
 c00800c:	103ff51e 	bne	r2,zero,c007fe4 <__alt_data_end+0xfc007fe4>
 c008010:	d8c02817 	ldw	r3,160(sp)
 c008014:	1c07c83a 	sub	r3,r3,r16
 c008018:	d8c02b15 	stw	r3,172(sp)
 c00801c:	003ec606 	br	c007b38 <__alt_data_end+0xfc007b38>
 c008020:	8025883a 	mov	r18,r16
 c008024:	dc002903 	ldbu	r16,164(sp)
 c008028:	e011883a 	mov	r8,fp
 c00802c:	84003fcc 	andi	r16,r16,255
 c008030:	803e9626 	beq	r16,zero,c007a8c <__alt_data_end+0xfc007a8c>
 c008034:	d8c02b03 	ldbu	r3,172(sp)
 c008038:	d8c02785 	stb	r3,158(sp)
 c00803c:	003e9306 	br	c007a8c <__alt_data_end+0xfc007a8c>
 c008040:	00c00044 	movi	r3,1
 c008044:	d8c02905 	stb	r3,164(sp)
 c008048:	00c00ac4 	movi	r3,43
 c00804c:	d8c02b05 	stb	r3,172(sp)
 c008050:	ac400007 	ldb	r17,0(r21)
 c008054:	003d4306 	br	c007564 <__alt_data_end+0xfc007564>
 c008058:	84000814 	ori	r16,r16,32
 c00805c:	ac400007 	ldb	r17,0(r21)
 c008060:	003d4006 	br	c007564 <__alt_data_end+0xfc007564>
 c008064:	d8802e17 	ldw	r2,184(sp)
 c008068:	8025883a 	mov	r18,r16
 c00806c:	d8002785 	stb	zero,158(sp)
 c008070:	14000017 	ldw	r16,0(r2)
 c008074:	e011883a 	mov	r8,fp
 c008078:	14c00104 	addi	r19,r2,4
 c00807c:	80042d26 	beq	r16,zero,c009134 <___vfprintf_internal_r+0x1d58>
 c008080:	d8c02a17 	ldw	r3,168(sp)
 c008084:	1803e416 	blt	r3,zero,c009018 <___vfprintf_internal_r+0x1c3c>
 c008088:	180d883a 	mov	r6,r3
 c00808c:	000b883a 	mov	r5,zero
 c008090:	8009883a 	mov	r4,r16
 c008094:	df003d15 	stw	fp,244(sp)
 c008098:	c00cd140 	call	c00cd14 <memchr>
 c00809c:	da003d17 	ldw	r8,244(sp)
 c0080a0:	10046826 	beq	r2,zero,c009244 <___vfprintf_internal_r+0x1e68>
 c0080a4:	1405c83a 	sub	r2,r2,r16
 c0080a8:	d8802b15 	stw	r2,172(sp)
 c0080ac:	1003e016 	blt	r2,zero,c009030 <___vfprintf_internal_r+0x1c54>
 c0080b0:	df002783 	ldbu	fp,158(sp)
 c0080b4:	d8802915 	stw	r2,164(sp)
 c0080b8:	dcc02e15 	stw	r19,184(sp)
 c0080bc:	d8002a15 	stw	zero,168(sp)
 c0080c0:	d8003215 	stw	zero,200(sp)
 c0080c4:	003ea206 	br	c007b50 <__alt_data_end+0xfc007b50>
 c0080c8:	8025883a 	mov	r18,r16
 c0080cc:	dc002903 	ldbu	r16,164(sp)
 c0080d0:	e011883a 	mov	r8,fp
 c0080d4:	84003fcc 	andi	r16,r16,255
 c0080d8:	803f8d26 	beq	r16,zero,c007f10 <__alt_data_end+0xfc007f10>
 c0080dc:	d8c02b03 	ldbu	r3,172(sp)
 c0080e0:	d8c02785 	stb	r3,158(sp)
 c0080e4:	003f8a06 	br	c007f10 <__alt_data_end+0xfc007f10>
 c0080e8:	8025883a 	mov	r18,r16
 c0080ec:	dc002903 	ldbu	r16,164(sp)
 c0080f0:	e011883a 	mov	r8,fp
 c0080f4:	84003fcc 	andi	r16,r16,255
 c0080f8:	8005661e 	bne	r16,zero,c009694 <___vfprintf_internal_r+0x22b8>
 c0080fc:	010300b4 	movhi	r4,3074
 c008100:	2121e804 	addi	r4,r4,-30816
 c008104:	d9003915 	stw	r4,228(sp)
 c008108:	9080080c 	andi	r2,r18,32
 c00810c:	103f9f1e 	bne	r2,zero,c007f8c <__alt_data_end+0xfc007f8c>
 c008110:	9080040c 	andi	r2,r18,16
 c008114:	1002eb26 	beq	r2,zero,c008cc4 <___vfprintf_internal_r+0x18e8>
 c008118:	d8802e17 	ldw	r2,184(sp)
 c00811c:	002d883a 	mov	r22,zero
 c008120:	14c00017 	ldw	r19,0(r2)
 c008124:	10800104 	addi	r2,r2,4
 c008128:	d8802e15 	stw	r2,184(sp)
 c00812c:	003f9c06 	br	c007fa0 <__alt_data_end+0xfc007fa0>
 c008130:	d8802b07 	ldb	r2,172(sp)
 c008134:	1002e11e 	bne	r2,zero,c008cbc <___vfprintf_internal_r+0x18e0>
 c008138:	00c00044 	movi	r3,1
 c00813c:	d8c02905 	stb	r3,164(sp)
 c008140:	00c00804 	movi	r3,32
 c008144:	d8c02b05 	stb	r3,172(sp)
 c008148:	ac400007 	ldb	r17,0(r21)
 c00814c:	003d0506 	br	c007564 <__alt_data_end+0xfc007564>
 c008150:	84000054 	ori	r16,r16,1
 c008154:	ac400007 	ldb	r17,0(r21)
 c008158:	003d0206 	br	c007564 <__alt_data_end+0xfc007564>
 c00815c:	8025883a 	mov	r18,r16
 c008160:	dc002903 	ldbu	r16,164(sp)
 c008164:	e011883a 	mov	r8,fp
 c008168:	84003fcc 	andi	r16,r16,255
 c00816c:	803de726 	beq	r16,zero,c00790c <__alt_data_end+0xfc00790c>
 c008170:	d8c02b03 	ldbu	r3,172(sp)
 c008174:	d8c02785 	stb	r3,158(sp)
 c008178:	003de406 	br	c00790c <__alt_data_end+0xfc00790c>
 c00817c:	84001014 	ori	r16,r16,64
 c008180:	ac400007 	ldb	r17,0(r21)
 c008184:	003cf706 	br	c007564 <__alt_data_end+0xfc007564>
 c008188:	ac400007 	ldb	r17,0(r21)
 c00818c:	00801b04 	movi	r2,108
 c008190:	88838f26 	beq	r17,r2,c008fd0 <___vfprintf_internal_r+0x1bf4>
 c008194:	84000414 	ori	r16,r16,16
 c008198:	003cf206 	br	c007564 <__alt_data_end+0xfc007564>
 c00819c:	8025883a 	mov	r18,r16
 c0081a0:	dc002903 	ldbu	r16,164(sp)
 c0081a4:	e011883a 	mov	r8,fp
 c0081a8:	84003fcc 	andi	r16,r16,255
 c0081ac:	80053f1e 	bne	r16,zero,c0096ac <___vfprintf_internal_r+0x22d0>
 c0081b0:	9080080c 	andi	r2,r18,32
 c0081b4:	1002d226 	beq	r2,zero,c008d00 <___vfprintf_internal_r+0x1924>
 c0081b8:	d9002e17 	ldw	r4,184(sp)
 c0081bc:	d9402f17 	ldw	r5,188(sp)
 c0081c0:	20800017 	ldw	r2,0(r4)
 c0081c4:	2807d7fa 	srai	r3,r5,31
 c0081c8:	21000104 	addi	r4,r4,4
 c0081cc:	d9002e15 	stw	r4,184(sp)
 c0081d0:	11400015 	stw	r5,0(r2)
 c0081d4:	10c00115 	stw	r3,4(r2)
 c0081d8:	003cb806 	br	c0074bc <__alt_data_end+0xfc0074bc>
 c0081dc:	d8c02e17 	ldw	r3,184(sp)
 c0081e0:	d9002e17 	ldw	r4,184(sp)
 c0081e4:	8025883a 	mov	r18,r16
 c0081e8:	18800017 	ldw	r2,0(r3)
 c0081ec:	21000104 	addi	r4,r4,4
 c0081f0:	00c00044 	movi	r3,1
 c0081f4:	e011883a 	mov	r8,fp
 c0081f8:	d8c02915 	stw	r3,164(sp)
 c0081fc:	d8002785 	stb	zero,158(sp)
 c008200:	d8801405 	stb	r2,80(sp)
 c008204:	d9002e15 	stw	r4,184(sp)
 c008208:	d8c02b15 	stw	r3,172(sp)
 c00820c:	d8002a15 	stw	zero,168(sp)
 c008210:	d8003215 	stw	zero,200(sp)
 c008214:	dc001404 	addi	r16,sp,80
 c008218:	0039883a 	mov	fp,zero
 c00821c:	003e5306 	br	c007b6c <__alt_data_end+0xfc007b6c>
 c008220:	010300b4 	movhi	r4,3074
 c008224:	2121e804 	addi	r4,r4,-30816
 c008228:	0039883a 	mov	fp,zero
 c00822c:	d9003915 	stw	r4,228(sp)
 c008230:	04401e04 	movi	r17,120
 c008234:	003f6906 	br	c007fdc <__alt_data_end+0xfc007fdc>
 c008238:	8025883a 	mov	r18,r16
 c00823c:	dc002903 	ldbu	r16,164(sp)
 c008240:	e011883a 	mov	r8,fp
 c008244:	84003fcc 	andi	r16,r16,255
 c008248:	8005081e 	bne	r16,zero,c00966c <___vfprintf_internal_r+0x2290>
 c00824c:	883d6126 	beq	r17,zero,c0077d4 <__alt_data_end+0xfc0077d4>
 c008250:	00c00044 	movi	r3,1
 c008254:	d8c02915 	stw	r3,164(sp)
 c008258:	dc401405 	stb	r17,80(sp)
 c00825c:	d8002785 	stb	zero,158(sp)
 c008260:	003fe906 	br	c008208 <__alt_data_end+0xfc008208>
 c008264:	014300b4 	movhi	r5,3074
 c008268:	2961e804 	addi	r5,r5,-30816
 c00826c:	d9403915 	stw	r5,228(sp)
 c008270:	d8c02e15 	stw	r3,184(sp)
 c008274:	1025883a 	mov	r18,r2
 c008278:	04401e04 	movi	r17,120
 c00827c:	9d84b03a 	or	r2,r19,r22
 c008280:	1000fc1e 	bne	r2,zero,c008674 <___vfprintf_internal_r+0x1298>
 c008284:	0039883a 	mov	fp,zero
 c008288:	00800084 	movi	r2,2
 c00828c:	10803fcc 	andi	r2,r2,255
 c008290:	00c00044 	movi	r3,1
 c008294:	10c20f26 	beq	r2,r3,c008ad4 <___vfprintf_internal_r+0x16f8>
 c008298:	00c00084 	movi	r3,2
 c00829c:	10fd3326 	beq	r2,r3,c00776c <__alt_data_end+0xfc00776c>
 c0082a0:	003e0b06 	br	c007ad0 <__alt_data_end+0xfc007ad0>
 c0082a4:	d8c02017 	ldw	r3,128(sp)
 c0082a8:	003e7106 	br	c007c70 <__alt_data_end+0xfc007c70>
 c0082ac:	00801944 	movi	r2,101
 c0082b0:	14407e0e 	bge	r2,r17,c0084ac <___vfprintf_internal_r+0x10d0>
 c0082b4:	d9003617 	ldw	r4,216(sp)
 c0082b8:	d9403817 	ldw	r5,224(sp)
 c0082bc:	000d883a 	mov	r6,zero
 c0082c0:	000f883a 	mov	r7,zero
 c0082c4:	d8c03c15 	stw	r3,240(sp)
 c0082c8:	da003d15 	stw	r8,244(sp)
 c0082cc:	c013fbc0 	call	c013fbc <__eqdf2>
 c0082d0:	d8c03c17 	ldw	r3,240(sp)
 c0082d4:	da003d17 	ldw	r8,244(sp)
 c0082d8:	1000f71e 	bne	r2,zero,c0086b8 <___vfprintf_internal_r+0x12dc>
 c0082dc:	d8801f17 	ldw	r2,124(sp)
 c0082e0:	010300b4 	movhi	r4,3074
 c0082e4:	2121ef04 	addi	r4,r4,-30788
 c0082e8:	18c00044 	addi	r3,r3,1
 c0082ec:	10800044 	addi	r2,r2,1
 c0082f0:	41000015 	stw	r4,0(r8)
 c0082f4:	01000044 	movi	r4,1
 c0082f8:	41000115 	stw	r4,4(r8)
 c0082fc:	d8c02015 	stw	r3,128(sp)
 c008300:	d8801f15 	stw	r2,124(sp)
 c008304:	010001c4 	movi	r4,7
 c008308:	2082b816 	blt	r4,r2,c008dec <___vfprintf_internal_r+0x1a10>
 c00830c:	42000204 	addi	r8,r8,8
 c008310:	d8802617 	ldw	r2,152(sp)
 c008314:	d9403317 	ldw	r5,204(sp)
 c008318:	11400216 	blt	r2,r5,c008324 <___vfprintf_internal_r+0xf48>
 c00831c:	9080004c 	andi	r2,r18,1
 c008320:	103eb326 	beq	r2,zero,c007df0 <__alt_data_end+0xfc007df0>
 c008324:	d8803717 	ldw	r2,220(sp)
 c008328:	d9003417 	ldw	r4,208(sp)
 c00832c:	d9403717 	ldw	r5,220(sp)
 c008330:	1887883a 	add	r3,r3,r2
 c008334:	d8801f17 	ldw	r2,124(sp)
 c008338:	41000015 	stw	r4,0(r8)
 c00833c:	41400115 	stw	r5,4(r8)
 c008340:	10800044 	addi	r2,r2,1
 c008344:	d8c02015 	stw	r3,128(sp)
 c008348:	d8801f15 	stw	r2,124(sp)
 c00834c:	010001c4 	movi	r4,7
 c008350:	20832916 	blt	r4,r2,c008ff8 <___vfprintf_internal_r+0x1c1c>
 c008354:	42000204 	addi	r8,r8,8
 c008358:	d8803317 	ldw	r2,204(sp)
 c00835c:	143fffc4 	addi	r16,r2,-1
 c008360:	043ea30e 	bge	zero,r16,c007df0 <__alt_data_end+0xfc007df0>
 c008364:	04400404 	movi	r17,16
 c008368:	d8801f17 	ldw	r2,124(sp)
 c00836c:	8c00880e 	bge	r17,r16,c008590 <___vfprintf_internal_r+0x11b4>
 c008370:	014300b4 	movhi	r5,3074
 c008374:	2961f784 	addi	r5,r5,-30754
 c008378:	d9402c15 	stw	r5,176(sp)
 c00837c:	058001c4 	movi	r22,7
 c008380:	dcc02d17 	ldw	r19,180(sp)
 c008384:	00000306 	br	c008394 <___vfprintf_internal_r+0xfb8>
 c008388:	42000204 	addi	r8,r8,8
 c00838c:	843ffc04 	addi	r16,r16,-16
 c008390:	8c00820e 	bge	r17,r16,c00859c <___vfprintf_internal_r+0x11c0>
 c008394:	18c00404 	addi	r3,r3,16
 c008398:	10800044 	addi	r2,r2,1
 c00839c:	45000015 	stw	r20,0(r8)
 c0083a0:	44400115 	stw	r17,4(r8)
 c0083a4:	d8c02015 	stw	r3,128(sp)
 c0083a8:	d8801f15 	stw	r2,124(sp)
 c0083ac:	b0bff60e 	bge	r22,r2,c008388 <__alt_data_end+0xfc008388>
 c0083b0:	d9801e04 	addi	r6,sp,120
 c0083b4:	b80b883a 	mov	r5,r23
 c0083b8:	9809883a 	mov	r4,r19
 c0083bc:	c01012c0 	call	c01012c <__sprint_r>
 c0083c0:	103d0a1e 	bne	r2,zero,c0077ec <__alt_data_end+0xfc0077ec>
 c0083c4:	d8c02017 	ldw	r3,128(sp)
 c0083c8:	d8801f17 	ldw	r2,124(sp)
 c0083cc:	da000404 	addi	r8,sp,16
 c0083d0:	003fee06 	br	c00838c <__alt_data_end+0xfc00838c>
 c0083d4:	d9403117 	ldw	r5,196(sp)
 c0083d8:	d8802917 	ldw	r2,164(sp)
 c0083dc:	28adc83a 	sub	r22,r5,r2
 c0083e0:	05be410e 	bge	zero,r22,c007ce8 <__alt_data_end+0xfc007ce8>
 c0083e4:	07000404 	movi	fp,16
 c0083e8:	d8801f17 	ldw	r2,124(sp)
 c0083ec:	e5838f0e 	bge	fp,r22,c00922c <___vfprintf_internal_r+0x1e50>
 c0083f0:	014300b4 	movhi	r5,3074
 c0083f4:	2961f784 	addi	r5,r5,-30754
 c0083f8:	dc403015 	stw	r17,192(sp)
 c0083fc:	d9402c15 	stw	r5,176(sp)
 c008400:	b023883a 	mov	r17,r22
 c008404:	04c001c4 	movi	r19,7
 c008408:	a82d883a 	mov	r22,r21
 c00840c:	902b883a 	mov	r21,r18
 c008410:	8025883a 	mov	r18,r16
 c008414:	dc002d17 	ldw	r16,180(sp)
 c008418:	00000306 	br	c008428 <___vfprintf_internal_r+0x104c>
 c00841c:	8c7ffc04 	addi	r17,r17,-16
 c008420:	42000204 	addi	r8,r8,8
 c008424:	e440110e 	bge	fp,r17,c00846c <___vfprintf_internal_r+0x1090>
 c008428:	18c00404 	addi	r3,r3,16
 c00842c:	10800044 	addi	r2,r2,1
 c008430:	45000015 	stw	r20,0(r8)
 c008434:	47000115 	stw	fp,4(r8)
 c008438:	d8c02015 	stw	r3,128(sp)
 c00843c:	d8801f15 	stw	r2,124(sp)
 c008440:	98bff60e 	bge	r19,r2,c00841c <__alt_data_end+0xfc00841c>
 c008444:	d9801e04 	addi	r6,sp,120
 c008448:	b80b883a 	mov	r5,r23
 c00844c:	8009883a 	mov	r4,r16
 c008450:	c01012c0 	call	c01012c <__sprint_r>
 c008454:	103ce51e 	bne	r2,zero,c0077ec <__alt_data_end+0xfc0077ec>
 c008458:	8c7ffc04 	addi	r17,r17,-16
 c00845c:	d8c02017 	ldw	r3,128(sp)
 c008460:	d8801f17 	ldw	r2,124(sp)
 c008464:	da000404 	addi	r8,sp,16
 c008468:	e47fef16 	blt	fp,r17,c008428 <__alt_data_end+0xfc008428>
 c00846c:	9021883a 	mov	r16,r18
 c008470:	a825883a 	mov	r18,r21
 c008474:	b02b883a 	mov	r21,r22
 c008478:	882d883a 	mov	r22,r17
 c00847c:	dc403017 	ldw	r17,192(sp)
 c008480:	d9002c17 	ldw	r4,176(sp)
 c008484:	1d87883a 	add	r3,r3,r22
 c008488:	10800044 	addi	r2,r2,1
 c00848c:	41000015 	stw	r4,0(r8)
 c008490:	45800115 	stw	r22,4(r8)
 c008494:	d8c02015 	stw	r3,128(sp)
 c008498:	d8801f15 	stw	r2,124(sp)
 c00849c:	010001c4 	movi	r4,7
 c0084a0:	20818e16 	blt	r4,r2,c008adc <___vfprintf_internal_r+0x1700>
 c0084a4:	42000204 	addi	r8,r8,8
 c0084a8:	003e0f06 	br	c007ce8 <__alt_data_end+0xfc007ce8>
 c0084ac:	d9403317 	ldw	r5,204(sp)
 c0084b0:	00800044 	movi	r2,1
 c0084b4:	18c00044 	addi	r3,r3,1
 c0084b8:	1141530e 	bge	r2,r5,c008a08 <___vfprintf_internal_r+0x162c>
 c0084bc:	dc401f17 	ldw	r17,124(sp)
 c0084c0:	00800044 	movi	r2,1
 c0084c4:	40800115 	stw	r2,4(r8)
 c0084c8:	8c400044 	addi	r17,r17,1
 c0084cc:	44000015 	stw	r16,0(r8)
 c0084d0:	d8c02015 	stw	r3,128(sp)
 c0084d4:	dc401f15 	stw	r17,124(sp)
 c0084d8:	008001c4 	movi	r2,7
 c0084dc:	14416b16 	blt	r2,r17,c008a8c <___vfprintf_internal_r+0x16b0>
 c0084e0:	42000204 	addi	r8,r8,8
 c0084e4:	d8803717 	ldw	r2,220(sp)
 c0084e8:	d9003417 	ldw	r4,208(sp)
 c0084ec:	8c400044 	addi	r17,r17,1
 c0084f0:	10c7883a 	add	r3,r2,r3
 c0084f4:	40800115 	stw	r2,4(r8)
 c0084f8:	41000015 	stw	r4,0(r8)
 c0084fc:	d8c02015 	stw	r3,128(sp)
 c008500:	dc401f15 	stw	r17,124(sp)
 c008504:	008001c4 	movi	r2,7
 c008508:	14416916 	blt	r2,r17,c008ab0 <___vfprintf_internal_r+0x16d4>
 c00850c:	45800204 	addi	r22,r8,8
 c008510:	d9003617 	ldw	r4,216(sp)
 c008514:	d9403817 	ldw	r5,224(sp)
 c008518:	000d883a 	mov	r6,zero
 c00851c:	000f883a 	mov	r7,zero
 c008520:	d8c03c15 	stw	r3,240(sp)
 c008524:	c013fbc0 	call	c013fbc <__eqdf2>
 c008528:	d8c03c17 	ldw	r3,240(sp)
 c00852c:	1000bc26 	beq	r2,zero,c008820 <___vfprintf_internal_r+0x1444>
 c008530:	d9403317 	ldw	r5,204(sp)
 c008534:	84000044 	addi	r16,r16,1
 c008538:	8c400044 	addi	r17,r17,1
 c00853c:	28bfffc4 	addi	r2,r5,-1
 c008540:	1887883a 	add	r3,r3,r2
 c008544:	b0800115 	stw	r2,4(r22)
 c008548:	b4000015 	stw	r16,0(r22)
 c00854c:	d8c02015 	stw	r3,128(sp)
 c008550:	dc401f15 	stw	r17,124(sp)
 c008554:	008001c4 	movi	r2,7
 c008558:	14414316 	blt	r2,r17,c008a68 <___vfprintf_internal_r+0x168c>
 c00855c:	b5800204 	addi	r22,r22,8
 c008560:	d9003a17 	ldw	r4,232(sp)
 c008564:	df0022c4 	addi	fp,sp,139
 c008568:	8c400044 	addi	r17,r17,1
 c00856c:	20c7883a 	add	r3,r4,r3
 c008570:	b7000015 	stw	fp,0(r22)
 c008574:	b1000115 	stw	r4,4(r22)
 c008578:	d8c02015 	stw	r3,128(sp)
 c00857c:	dc401f15 	stw	r17,124(sp)
 c008580:	008001c4 	movi	r2,7
 c008584:	14400e16 	blt	r2,r17,c0085c0 <___vfprintf_internal_r+0x11e4>
 c008588:	b2000204 	addi	r8,r22,8
 c00858c:	003e1806 	br	c007df0 <__alt_data_end+0xfc007df0>
 c008590:	010300b4 	movhi	r4,3074
 c008594:	2121f784 	addi	r4,r4,-30754
 c008598:	d9002c15 	stw	r4,176(sp)
 c00859c:	d9002c17 	ldw	r4,176(sp)
 c0085a0:	1c07883a 	add	r3,r3,r16
 c0085a4:	44000115 	stw	r16,4(r8)
 c0085a8:	41000015 	stw	r4,0(r8)
 c0085ac:	10800044 	addi	r2,r2,1
 c0085b0:	d8c02015 	stw	r3,128(sp)
 c0085b4:	d8801f15 	stw	r2,124(sp)
 c0085b8:	010001c4 	movi	r4,7
 c0085bc:	20be0b0e 	bge	r4,r2,c007dec <__alt_data_end+0xfc007dec>
 c0085c0:	d9002d17 	ldw	r4,180(sp)
 c0085c4:	d9801e04 	addi	r6,sp,120
 c0085c8:	b80b883a 	mov	r5,r23
 c0085cc:	c01012c0 	call	c01012c <__sprint_r>
 c0085d0:	103c861e 	bne	r2,zero,c0077ec <__alt_data_end+0xfc0077ec>
 c0085d4:	d8c02017 	ldw	r3,128(sp)
 c0085d8:	da000404 	addi	r8,sp,16
 c0085dc:	003e0406 	br	c007df0 <__alt_data_end+0xfc007df0>
 c0085e0:	d9002d17 	ldw	r4,180(sp)
 c0085e4:	d9801e04 	addi	r6,sp,120
 c0085e8:	b80b883a 	mov	r5,r23
 c0085ec:	c01012c0 	call	c01012c <__sprint_r>
 c0085f0:	103e3b26 	beq	r2,zero,c007ee0 <__alt_data_end+0xfc007ee0>
 c0085f4:	003c7d06 	br	c0077ec <__alt_data_end+0xfc0077ec>
 c0085f8:	d9002d17 	ldw	r4,180(sp)
 c0085fc:	d9801e04 	addi	r6,sp,120
 c008600:	b80b883a 	mov	r5,r23
 c008604:	c01012c0 	call	c01012c <__sprint_r>
 c008608:	103c781e 	bne	r2,zero,c0077ec <__alt_data_end+0xfc0077ec>
 c00860c:	d8c02017 	ldw	r3,128(sp)
 c008610:	da000404 	addi	r8,sp,16
 c008614:	003de906 	br	c007dbc <__alt_data_end+0xfc007dbc>
 c008618:	d9002d17 	ldw	r4,180(sp)
 c00861c:	d9801e04 	addi	r6,sp,120
 c008620:	b80b883a 	mov	r5,r23
 c008624:	c01012c0 	call	c01012c <__sprint_r>
 c008628:	103c701e 	bne	r2,zero,c0077ec <__alt_data_end+0xfc0077ec>
 c00862c:	d8c02017 	ldw	r3,128(sp)
 c008630:	da000404 	addi	r8,sp,16
 c008634:	003d9b06 	br	c007ca4 <__alt_data_end+0xfc007ca4>
 c008638:	d9002d17 	ldw	r4,180(sp)
 c00863c:	d9801e04 	addi	r6,sp,120
 c008640:	b80b883a 	mov	r5,r23
 c008644:	c01012c0 	call	c01012c <__sprint_r>
 c008648:	103c681e 	bne	r2,zero,c0077ec <__alt_data_end+0xfc0077ec>
 c00864c:	d8c02017 	ldw	r3,128(sp)
 c008650:	da000404 	addi	r8,sp,16
 c008654:	003da106 	br	c007cdc <__alt_data_end+0xfc007cdc>
 c008658:	d9402a17 	ldw	r5,168(sp)
 c00865c:	d8002785 	stb	zero,158(sp)
 c008660:	283f0616 	blt	r5,zero,c00827c <__alt_data_end+0xfc00827c>
 c008664:	00ffdfc4 	movi	r3,-129
 c008668:	9d84b03a 	or	r2,r19,r22
 c00866c:	90e4703a 	and	r18,r18,r3
 c008670:	103c3b26 	beq	r2,zero,c007760 <__alt_data_end+0xfc007760>
 c008674:	0039883a 	mov	fp,zero
 c008678:	003e5806 	br	c007fdc <__alt_data_end+0xfc007fdc>
 c00867c:	9080040c 	andi	r2,r18,16
 c008680:	1001b326 	beq	r2,zero,c008d50 <___vfprintf_internal_r+0x1974>
 c008684:	d8c02e17 	ldw	r3,184(sp)
 c008688:	d9002a17 	ldw	r4,168(sp)
 c00868c:	d8002785 	stb	zero,158(sp)
 c008690:	18800104 	addi	r2,r3,4
 c008694:	1cc00017 	ldw	r19,0(r3)
 c008698:	002d883a 	mov	r22,zero
 c00869c:	2001b516 	blt	r4,zero,c008d74 <___vfprintf_internal_r+0x1998>
 c0086a0:	00ffdfc4 	movi	r3,-129
 c0086a4:	d8802e15 	stw	r2,184(sp)
 c0086a8:	90e4703a 	and	r18,r18,r3
 c0086ac:	983d0526 	beq	r19,zero,c007ac4 <__alt_data_end+0xfc007ac4>
 c0086b0:	0039883a 	mov	fp,zero
 c0086b4:	003d0806 	br	c007ad8 <__alt_data_end+0xfc007ad8>
 c0086b8:	dc402617 	ldw	r17,152(sp)
 c0086bc:	0441d30e 	bge	zero,r17,c008e0c <___vfprintf_internal_r+0x1a30>
 c0086c0:	dc403217 	ldw	r17,200(sp)
 c0086c4:	d8803317 	ldw	r2,204(sp)
 c0086c8:	1440010e 	bge	r2,r17,c0086d0 <___vfprintf_internal_r+0x12f4>
 c0086cc:	1023883a 	mov	r17,r2
 c0086d0:	04400a0e 	bge	zero,r17,c0086fc <___vfprintf_internal_r+0x1320>
 c0086d4:	d8801f17 	ldw	r2,124(sp)
 c0086d8:	1c47883a 	add	r3,r3,r17
 c0086dc:	44000015 	stw	r16,0(r8)
 c0086e0:	10800044 	addi	r2,r2,1
 c0086e4:	44400115 	stw	r17,4(r8)
 c0086e8:	d8c02015 	stw	r3,128(sp)
 c0086ec:	d8801f15 	stw	r2,124(sp)
 c0086f0:	010001c4 	movi	r4,7
 c0086f4:	20826516 	blt	r4,r2,c00908c <___vfprintf_internal_r+0x1cb0>
 c0086f8:	42000204 	addi	r8,r8,8
 c0086fc:	88026116 	blt	r17,zero,c009084 <___vfprintf_internal_r+0x1ca8>
 c008700:	d9003217 	ldw	r4,200(sp)
 c008704:	2463c83a 	sub	r17,r4,r17
 c008708:	04407b0e 	bge	zero,r17,c0088f8 <___vfprintf_internal_r+0x151c>
 c00870c:	05800404 	movi	r22,16
 c008710:	d8801f17 	ldw	r2,124(sp)
 c008714:	b4419d0e 	bge	r22,r17,c008d8c <___vfprintf_internal_r+0x19b0>
 c008718:	010300b4 	movhi	r4,3074
 c00871c:	2121f784 	addi	r4,r4,-30754
 c008720:	d9002c15 	stw	r4,176(sp)
 c008724:	070001c4 	movi	fp,7
 c008728:	dcc02d17 	ldw	r19,180(sp)
 c00872c:	00000306 	br	c00873c <___vfprintf_internal_r+0x1360>
 c008730:	42000204 	addi	r8,r8,8
 c008734:	8c7ffc04 	addi	r17,r17,-16
 c008738:	b441970e 	bge	r22,r17,c008d98 <___vfprintf_internal_r+0x19bc>
 c00873c:	18c00404 	addi	r3,r3,16
 c008740:	10800044 	addi	r2,r2,1
 c008744:	45000015 	stw	r20,0(r8)
 c008748:	45800115 	stw	r22,4(r8)
 c00874c:	d8c02015 	stw	r3,128(sp)
 c008750:	d8801f15 	stw	r2,124(sp)
 c008754:	e0bff60e 	bge	fp,r2,c008730 <__alt_data_end+0xfc008730>
 c008758:	d9801e04 	addi	r6,sp,120
 c00875c:	b80b883a 	mov	r5,r23
 c008760:	9809883a 	mov	r4,r19
 c008764:	c01012c0 	call	c01012c <__sprint_r>
 c008768:	103c201e 	bne	r2,zero,c0077ec <__alt_data_end+0xfc0077ec>
 c00876c:	d8c02017 	ldw	r3,128(sp)
 c008770:	d8801f17 	ldw	r2,124(sp)
 c008774:	da000404 	addi	r8,sp,16
 c008778:	003fee06 	br	c008734 <__alt_data_end+0xfc008734>
 c00877c:	d9002d17 	ldw	r4,180(sp)
 c008780:	d9801e04 	addi	r6,sp,120
 c008784:	b80b883a 	mov	r5,r23
 c008788:	c01012c0 	call	c01012c <__sprint_r>
 c00878c:	103c171e 	bne	r2,zero,c0077ec <__alt_data_end+0xfc0077ec>
 c008790:	d8c02017 	ldw	r3,128(sp)
 c008794:	df002787 	ldb	fp,158(sp)
 c008798:	da000404 	addi	r8,sp,16
 c00879c:	003d3406 	br	c007c70 <__alt_data_end+0xfc007c70>
 c0087a0:	9080040c 	andi	r2,r18,16
 c0087a4:	10016126 	beq	r2,zero,c008d2c <___vfprintf_internal_r+0x1950>
 c0087a8:	d9402e17 	ldw	r5,184(sp)
 c0087ac:	2cc00017 	ldw	r19,0(r5)
 c0087b0:	29400104 	addi	r5,r5,4
 c0087b4:	d9402e15 	stw	r5,184(sp)
 c0087b8:	982dd7fa 	srai	r22,r19,31
 c0087bc:	b005883a 	mov	r2,r22
 c0087c0:	003c5a06 	br	c00792c <__alt_data_end+0xfc00792c>
 c0087c4:	9080040c 	andi	r2,r18,16
 c0087c8:	10003526 	beq	r2,zero,c0088a0 <___vfprintf_internal_r+0x14c4>
 c0087cc:	d8c02e17 	ldw	r3,184(sp)
 c0087d0:	d9002a17 	ldw	r4,168(sp)
 c0087d4:	d8002785 	stb	zero,158(sp)
 c0087d8:	18800104 	addi	r2,r3,4
 c0087dc:	1cc00017 	ldw	r19,0(r3)
 c0087e0:	002d883a 	mov	r22,zero
 c0087e4:	20003716 	blt	r4,zero,c0088c4 <___vfprintf_internal_r+0x14e8>
 c0087e8:	00ffdfc4 	movi	r3,-129
 c0087ec:	d8802e15 	stw	r2,184(sp)
 c0087f0:	90e4703a 	and	r18,r18,r3
 c0087f4:	0039883a 	mov	fp,zero
 c0087f8:	983dd426 	beq	r19,zero,c007f4c <__alt_data_end+0xfc007f4c>
 c0087fc:	00800244 	movi	r2,9
 c008800:	14fc5336 	bltu	r2,r19,c007950 <__alt_data_end+0xfc007950>
 c008804:	d8c02817 	ldw	r3,160(sp)
 c008808:	dc001dc4 	addi	r16,sp,119
 c00880c:	9cc00c04 	addi	r19,r19,48
 c008810:	1c07c83a 	sub	r3,r3,r16
 c008814:	dcc01dc5 	stb	r19,119(sp)
 c008818:	d8c02b15 	stw	r3,172(sp)
 c00881c:	003cc606 	br	c007b38 <__alt_data_end+0xfc007b38>
 c008820:	d8803317 	ldw	r2,204(sp)
 c008824:	143fffc4 	addi	r16,r2,-1
 c008828:	043f4d0e 	bge	zero,r16,c008560 <__alt_data_end+0xfc008560>
 c00882c:	07000404 	movi	fp,16
 c008830:	e400810e 	bge	fp,r16,c008a38 <___vfprintf_internal_r+0x165c>
 c008834:	014300b4 	movhi	r5,3074
 c008838:	2961f784 	addi	r5,r5,-30754
 c00883c:	d9402c15 	stw	r5,176(sp)
 c008840:	01c001c4 	movi	r7,7
 c008844:	dcc02d17 	ldw	r19,180(sp)
 c008848:	00000306 	br	c008858 <___vfprintf_internal_r+0x147c>
 c00884c:	b5800204 	addi	r22,r22,8
 c008850:	843ffc04 	addi	r16,r16,-16
 c008854:	e4007b0e 	bge	fp,r16,c008a44 <___vfprintf_internal_r+0x1668>
 c008858:	18c00404 	addi	r3,r3,16
 c00885c:	8c400044 	addi	r17,r17,1
 c008860:	b5000015 	stw	r20,0(r22)
 c008864:	b7000115 	stw	fp,4(r22)
 c008868:	d8c02015 	stw	r3,128(sp)
 c00886c:	dc401f15 	stw	r17,124(sp)
 c008870:	3c7ff60e 	bge	r7,r17,c00884c <__alt_data_end+0xfc00884c>
 c008874:	d9801e04 	addi	r6,sp,120
 c008878:	b80b883a 	mov	r5,r23
 c00887c:	9809883a 	mov	r4,r19
 c008880:	d9c03c15 	stw	r7,240(sp)
 c008884:	c01012c0 	call	c01012c <__sprint_r>
 c008888:	d9c03c17 	ldw	r7,240(sp)
 c00888c:	103bd71e 	bne	r2,zero,c0077ec <__alt_data_end+0xfc0077ec>
 c008890:	d8c02017 	ldw	r3,128(sp)
 c008894:	dc401f17 	ldw	r17,124(sp)
 c008898:	dd800404 	addi	r22,sp,16
 c00889c:	003fec06 	br	c008850 <__alt_data_end+0xfc008850>
 c0088a0:	9080100c 	andi	r2,r18,64
 c0088a4:	d8002785 	stb	zero,158(sp)
 c0088a8:	10010e26 	beq	r2,zero,c008ce4 <___vfprintf_internal_r+0x1908>
 c0088ac:	d9402e17 	ldw	r5,184(sp)
 c0088b0:	d8c02a17 	ldw	r3,168(sp)
 c0088b4:	002d883a 	mov	r22,zero
 c0088b8:	28800104 	addi	r2,r5,4
 c0088bc:	2cc0000b 	ldhu	r19,0(r5)
 c0088c0:	183fc90e 	bge	r3,zero,c0087e8 <__alt_data_end+0xfc0087e8>
 c0088c4:	d8802e15 	stw	r2,184(sp)
 c0088c8:	0039883a 	mov	fp,zero
 c0088cc:	9d84b03a 	or	r2,r19,r22
 c0088d0:	103c1e1e 	bne	r2,zero,c00794c <__alt_data_end+0xfc00794c>
 c0088d4:	00800044 	movi	r2,1
 c0088d8:	003e6c06 	br	c00828c <__alt_data_end+0xfc00828c>
 c0088dc:	d9002d17 	ldw	r4,180(sp)
 c0088e0:	d9801e04 	addi	r6,sp,120
 c0088e4:	b80b883a 	mov	r5,r23
 c0088e8:	c01012c0 	call	c01012c <__sprint_r>
 c0088ec:	103bbf1e 	bne	r2,zero,c0077ec <__alt_data_end+0xfc0077ec>
 c0088f0:	d8c02017 	ldw	r3,128(sp)
 c0088f4:	da000404 	addi	r8,sp,16
 c0088f8:	d9003217 	ldw	r4,200(sp)
 c0088fc:	d8802617 	ldw	r2,152(sp)
 c008900:	d9403317 	ldw	r5,204(sp)
 c008904:	8123883a 	add	r17,r16,r4
 c008908:	11400216 	blt	r2,r5,c008914 <___vfprintf_internal_r+0x1538>
 c00890c:	9100004c 	andi	r4,r18,1
 c008910:	20000d26 	beq	r4,zero,c008948 <___vfprintf_internal_r+0x156c>
 c008914:	d9003717 	ldw	r4,220(sp)
 c008918:	d9403417 	ldw	r5,208(sp)
 c00891c:	1907883a 	add	r3,r3,r4
 c008920:	d9001f17 	ldw	r4,124(sp)
 c008924:	41400015 	stw	r5,0(r8)
 c008928:	d9403717 	ldw	r5,220(sp)
 c00892c:	21000044 	addi	r4,r4,1
 c008930:	d8c02015 	stw	r3,128(sp)
 c008934:	41400115 	stw	r5,4(r8)
 c008938:	d9001f15 	stw	r4,124(sp)
 c00893c:	014001c4 	movi	r5,7
 c008940:	2901e816 	blt	r5,r4,c0090e4 <___vfprintf_internal_r+0x1d08>
 c008944:	42000204 	addi	r8,r8,8
 c008948:	d9003317 	ldw	r4,204(sp)
 c00894c:	8121883a 	add	r16,r16,r4
 c008950:	2085c83a 	sub	r2,r4,r2
 c008954:	8461c83a 	sub	r16,r16,r17
 c008958:	1400010e 	bge	r2,r16,c008960 <___vfprintf_internal_r+0x1584>
 c00895c:	1021883a 	mov	r16,r2
 c008960:	04000a0e 	bge	zero,r16,c00898c <___vfprintf_internal_r+0x15b0>
 c008964:	d9001f17 	ldw	r4,124(sp)
 c008968:	1c07883a 	add	r3,r3,r16
 c00896c:	44400015 	stw	r17,0(r8)
 c008970:	21000044 	addi	r4,r4,1
 c008974:	44000115 	stw	r16,4(r8)
 c008978:	d8c02015 	stw	r3,128(sp)
 c00897c:	d9001f15 	stw	r4,124(sp)
 c008980:	014001c4 	movi	r5,7
 c008984:	2901fb16 	blt	r5,r4,c009174 <___vfprintf_internal_r+0x1d98>
 c008988:	42000204 	addi	r8,r8,8
 c00898c:	8001f716 	blt	r16,zero,c00916c <___vfprintf_internal_r+0x1d90>
 c008990:	1421c83a 	sub	r16,r2,r16
 c008994:	043d160e 	bge	zero,r16,c007df0 <__alt_data_end+0xfc007df0>
 c008998:	04400404 	movi	r17,16
 c00899c:	d8801f17 	ldw	r2,124(sp)
 c0089a0:	8c3efb0e 	bge	r17,r16,c008590 <__alt_data_end+0xfc008590>
 c0089a4:	014300b4 	movhi	r5,3074
 c0089a8:	2961f784 	addi	r5,r5,-30754
 c0089ac:	d9402c15 	stw	r5,176(sp)
 c0089b0:	058001c4 	movi	r22,7
 c0089b4:	dcc02d17 	ldw	r19,180(sp)
 c0089b8:	00000306 	br	c0089c8 <___vfprintf_internal_r+0x15ec>
 c0089bc:	42000204 	addi	r8,r8,8
 c0089c0:	843ffc04 	addi	r16,r16,-16
 c0089c4:	8c3ef50e 	bge	r17,r16,c00859c <__alt_data_end+0xfc00859c>
 c0089c8:	18c00404 	addi	r3,r3,16
 c0089cc:	10800044 	addi	r2,r2,1
 c0089d0:	45000015 	stw	r20,0(r8)
 c0089d4:	44400115 	stw	r17,4(r8)
 c0089d8:	d8c02015 	stw	r3,128(sp)
 c0089dc:	d8801f15 	stw	r2,124(sp)
 c0089e0:	b0bff60e 	bge	r22,r2,c0089bc <__alt_data_end+0xfc0089bc>
 c0089e4:	d9801e04 	addi	r6,sp,120
 c0089e8:	b80b883a 	mov	r5,r23
 c0089ec:	9809883a 	mov	r4,r19
 c0089f0:	c01012c0 	call	c01012c <__sprint_r>
 c0089f4:	103b7d1e 	bne	r2,zero,c0077ec <__alt_data_end+0xfc0077ec>
 c0089f8:	d8c02017 	ldw	r3,128(sp)
 c0089fc:	d8801f17 	ldw	r2,124(sp)
 c008a00:	da000404 	addi	r8,sp,16
 c008a04:	003fee06 	br	c0089c0 <__alt_data_end+0xfc0089c0>
 c008a08:	9088703a 	and	r4,r18,r2
 c008a0c:	203eab1e 	bne	r4,zero,c0084bc <__alt_data_end+0xfc0084bc>
 c008a10:	dc401f17 	ldw	r17,124(sp)
 c008a14:	40800115 	stw	r2,4(r8)
 c008a18:	44000015 	stw	r16,0(r8)
 c008a1c:	8c400044 	addi	r17,r17,1
 c008a20:	d8c02015 	stw	r3,128(sp)
 c008a24:	dc401f15 	stw	r17,124(sp)
 c008a28:	008001c4 	movi	r2,7
 c008a2c:	14400e16 	blt	r2,r17,c008a68 <___vfprintf_internal_r+0x168c>
 c008a30:	45800204 	addi	r22,r8,8
 c008a34:	003eca06 	br	c008560 <__alt_data_end+0xfc008560>
 c008a38:	010300b4 	movhi	r4,3074
 c008a3c:	2121f784 	addi	r4,r4,-30754
 c008a40:	d9002c15 	stw	r4,176(sp)
 c008a44:	d8802c17 	ldw	r2,176(sp)
 c008a48:	1c07883a 	add	r3,r3,r16
 c008a4c:	8c400044 	addi	r17,r17,1
 c008a50:	b0800015 	stw	r2,0(r22)
 c008a54:	b4000115 	stw	r16,4(r22)
 c008a58:	d8c02015 	stw	r3,128(sp)
 c008a5c:	dc401f15 	stw	r17,124(sp)
 c008a60:	008001c4 	movi	r2,7
 c008a64:	147ebd0e 	bge	r2,r17,c00855c <__alt_data_end+0xfc00855c>
 c008a68:	d9002d17 	ldw	r4,180(sp)
 c008a6c:	d9801e04 	addi	r6,sp,120
 c008a70:	b80b883a 	mov	r5,r23
 c008a74:	c01012c0 	call	c01012c <__sprint_r>
 c008a78:	103b5c1e 	bne	r2,zero,c0077ec <__alt_data_end+0xfc0077ec>
 c008a7c:	d8c02017 	ldw	r3,128(sp)
 c008a80:	dc401f17 	ldw	r17,124(sp)
 c008a84:	dd800404 	addi	r22,sp,16
 c008a88:	003eb506 	br	c008560 <__alt_data_end+0xfc008560>
 c008a8c:	d9002d17 	ldw	r4,180(sp)
 c008a90:	d9801e04 	addi	r6,sp,120
 c008a94:	b80b883a 	mov	r5,r23
 c008a98:	c01012c0 	call	c01012c <__sprint_r>
 c008a9c:	103b531e 	bne	r2,zero,c0077ec <__alt_data_end+0xfc0077ec>
 c008aa0:	d8c02017 	ldw	r3,128(sp)
 c008aa4:	dc401f17 	ldw	r17,124(sp)
 c008aa8:	da000404 	addi	r8,sp,16
 c008aac:	003e8d06 	br	c0084e4 <__alt_data_end+0xfc0084e4>
 c008ab0:	d9002d17 	ldw	r4,180(sp)
 c008ab4:	d9801e04 	addi	r6,sp,120
 c008ab8:	b80b883a 	mov	r5,r23
 c008abc:	c01012c0 	call	c01012c <__sprint_r>
 c008ac0:	103b4a1e 	bne	r2,zero,c0077ec <__alt_data_end+0xfc0077ec>
 c008ac4:	d8c02017 	ldw	r3,128(sp)
 c008ac8:	dc401f17 	ldw	r17,124(sp)
 c008acc:	dd800404 	addi	r22,sp,16
 c008ad0:	003e8f06 	br	c008510 <__alt_data_end+0xfc008510>
 c008ad4:	0027883a 	mov	r19,zero
 c008ad8:	003f4a06 	br	c008804 <__alt_data_end+0xfc008804>
 c008adc:	d9002d17 	ldw	r4,180(sp)
 c008ae0:	d9801e04 	addi	r6,sp,120
 c008ae4:	b80b883a 	mov	r5,r23
 c008ae8:	c01012c0 	call	c01012c <__sprint_r>
 c008aec:	103b3f1e 	bne	r2,zero,c0077ec <__alt_data_end+0xfc0077ec>
 c008af0:	d8c02017 	ldw	r3,128(sp)
 c008af4:	da000404 	addi	r8,sp,16
 c008af8:	003c7b06 	br	c007ce8 <__alt_data_end+0xfc007ce8>
 c008afc:	d9402a17 	ldw	r5,168(sp)
 c008b00:	04e7c83a 	sub	r19,zero,r19
 c008b04:	07000b44 	movi	fp,45
 c008b08:	9804c03a 	cmpne	r2,r19,zero
 c008b0c:	05adc83a 	sub	r22,zero,r22
 c008b10:	df002785 	stb	fp,158(sp)
 c008b14:	b0adc83a 	sub	r22,r22,r2
 c008b18:	28017b16 	blt	r5,zero,c009108 <___vfprintf_internal_r+0x1d2c>
 c008b1c:	00bfdfc4 	movi	r2,-129
 c008b20:	90a4703a 	and	r18,r18,r2
 c008b24:	003b8906 	br	c00794c <__alt_data_end+0xfc00794c>
 c008b28:	d9003617 	ldw	r4,216(sp)
 c008b2c:	d9403817 	ldw	r5,224(sp)
 c008b30:	da003d15 	stw	r8,244(sp)
 c008b34:	c00e7e00 	call	c00e7e0 <__fpclassifyd>
 c008b38:	da003d17 	ldw	r8,244(sp)
 c008b3c:	1000f026 	beq	r2,zero,c008f00 <___vfprintf_internal_r+0x1b24>
 c008b40:	d9002a17 	ldw	r4,168(sp)
 c008b44:	05bff7c4 	movi	r22,-33
 c008b48:	00bfffc4 	movi	r2,-1
 c008b4c:	8dac703a 	and	r22,r17,r22
 c008b50:	20820026 	beq	r4,r2,c009354 <___vfprintf_internal_r+0x1f78>
 c008b54:	008011c4 	movi	r2,71
 c008b58:	b081f726 	beq	r22,r2,c009338 <___vfprintf_internal_r+0x1f5c>
 c008b5c:	d9003817 	ldw	r4,224(sp)
 c008b60:	90c04014 	ori	r3,r18,256
 c008b64:	d8c02c15 	stw	r3,176(sp)
 c008b68:	20021516 	blt	r4,zero,c0093c0 <___vfprintf_internal_r+0x1fe4>
 c008b6c:	dcc03817 	ldw	r19,224(sp)
 c008b70:	d8002905 	stb	zero,164(sp)
 c008b74:	00801984 	movi	r2,102
 c008b78:	8881f926 	beq	r17,r2,c009360 <___vfprintf_internal_r+0x1f84>
 c008b7c:	00801184 	movi	r2,70
 c008b80:	88821c26 	beq	r17,r2,c0093f4 <___vfprintf_internal_r+0x2018>
 c008b84:	00801144 	movi	r2,69
 c008b88:	b081ef26 	beq	r22,r2,c009348 <___vfprintf_internal_r+0x1f6c>
 c008b8c:	d8c02a17 	ldw	r3,168(sp)
 c008b90:	d8802104 	addi	r2,sp,132
 c008b94:	d8800315 	stw	r2,12(sp)
 c008b98:	d9403617 	ldw	r5,216(sp)
 c008b9c:	d8802504 	addi	r2,sp,148
 c008ba0:	d9002d17 	ldw	r4,180(sp)
 c008ba4:	d8800215 	stw	r2,8(sp)
 c008ba8:	d8802604 	addi	r2,sp,152
 c008bac:	d8c00015 	stw	r3,0(sp)
 c008bb0:	d8800115 	stw	r2,4(sp)
 c008bb4:	01c00084 	movi	r7,2
 c008bb8:	980d883a 	mov	r6,r19
 c008bbc:	d8c03c15 	stw	r3,240(sp)
 c008bc0:	da003d15 	stw	r8,244(sp)
 c008bc4:	c009b0c0 	call	c009b0c <_dtoa_r>
 c008bc8:	1021883a 	mov	r16,r2
 c008bcc:	008019c4 	movi	r2,103
 c008bd0:	d8c03c17 	ldw	r3,240(sp)
 c008bd4:	da003d17 	ldw	r8,244(sp)
 c008bd8:	88817126 	beq	r17,r2,c0091a0 <___vfprintf_internal_r+0x1dc4>
 c008bdc:	008011c4 	movi	r2,71
 c008be0:	88829126 	beq	r17,r2,c009628 <___vfprintf_internal_r+0x224c>
 c008be4:	80f9883a 	add	fp,r16,r3
 c008be8:	d9003617 	ldw	r4,216(sp)
 c008bec:	000d883a 	mov	r6,zero
 c008bf0:	000f883a 	mov	r7,zero
 c008bf4:	980b883a 	mov	r5,r19
 c008bf8:	da003d15 	stw	r8,244(sp)
 c008bfc:	c013fbc0 	call	c013fbc <__eqdf2>
 c008c00:	da003d17 	ldw	r8,244(sp)
 c008c04:	10018d26 	beq	r2,zero,c00923c <___vfprintf_internal_r+0x1e60>
 c008c08:	d8802117 	ldw	r2,132(sp)
 c008c0c:	1700062e 	bgeu	r2,fp,c008c28 <___vfprintf_internal_r+0x184c>
 c008c10:	01000c04 	movi	r4,48
 c008c14:	10c00044 	addi	r3,r2,1
 c008c18:	d8c02115 	stw	r3,132(sp)
 c008c1c:	11000005 	stb	r4,0(r2)
 c008c20:	d8802117 	ldw	r2,132(sp)
 c008c24:	173ffb36 	bltu	r2,fp,c008c14 <__alt_data_end+0xfc008c14>
 c008c28:	1405c83a 	sub	r2,r2,r16
 c008c2c:	d8803315 	stw	r2,204(sp)
 c008c30:	008011c4 	movi	r2,71
 c008c34:	b0817626 	beq	r22,r2,c009210 <___vfprintf_internal_r+0x1e34>
 c008c38:	00801944 	movi	r2,101
 c008c3c:	1442800e 	bge	r2,r17,c009640 <___vfprintf_internal_r+0x2264>
 c008c40:	d8c02617 	ldw	r3,152(sp)
 c008c44:	00801984 	movi	r2,102
 c008c48:	d8c03215 	stw	r3,200(sp)
 c008c4c:	8881fe26 	beq	r17,r2,c009448 <___vfprintf_internal_r+0x206c>
 c008c50:	d8c03217 	ldw	r3,200(sp)
 c008c54:	d9003317 	ldw	r4,204(sp)
 c008c58:	1901dd16 	blt	r3,r4,c0093d0 <___vfprintf_internal_r+0x1ff4>
 c008c5c:	9480004c 	andi	r18,r18,1
 c008c60:	90022b1e 	bne	r18,zero,c009510 <___vfprintf_internal_r+0x2134>
 c008c64:	1805883a 	mov	r2,r3
 c008c68:	18028316 	blt	r3,zero,c009678 <___vfprintf_internal_r+0x229c>
 c008c6c:	d8c03217 	ldw	r3,200(sp)
 c008c70:	044019c4 	movi	r17,103
 c008c74:	d8c02b15 	stw	r3,172(sp)
 c008c78:	df002907 	ldb	fp,164(sp)
 c008c7c:	e001531e 	bne	fp,zero,c0091cc <___vfprintf_internal_r+0x1df0>
 c008c80:	df002783 	ldbu	fp,158(sp)
 c008c84:	d8802915 	stw	r2,164(sp)
 c008c88:	dc802c17 	ldw	r18,176(sp)
 c008c8c:	d8002a15 	stw	zero,168(sp)
 c008c90:	003baf06 	br	c007b50 <__alt_data_end+0xfc007b50>
 c008c94:	d8c02e17 	ldw	r3,184(sp)
 c008c98:	d9002e17 	ldw	r4,184(sp)
 c008c9c:	d9402e17 	ldw	r5,184(sp)
 c008ca0:	18c00017 	ldw	r3,0(r3)
 c008ca4:	21000117 	ldw	r4,4(r4)
 c008ca8:	29400204 	addi	r5,r5,8
 c008cac:	d8c03615 	stw	r3,216(sp)
 c008cb0:	d9003815 	stw	r4,224(sp)
 c008cb4:	d9402e15 	stw	r5,184(sp)
 c008cb8:	003b5006 	br	c0079fc <__alt_data_end+0xfc0079fc>
 c008cbc:	ac400007 	ldb	r17,0(r21)
 c008cc0:	003a2806 	br	c007564 <__alt_data_end+0xfc007564>
 c008cc4:	9080100c 	andi	r2,r18,64
 c008cc8:	1000a826 	beq	r2,zero,c008f6c <___vfprintf_internal_r+0x1b90>
 c008ccc:	d8c02e17 	ldw	r3,184(sp)
 c008cd0:	002d883a 	mov	r22,zero
 c008cd4:	1cc0000b 	ldhu	r19,0(r3)
 c008cd8:	18c00104 	addi	r3,r3,4
 c008cdc:	d8c02e15 	stw	r3,184(sp)
 c008ce0:	003caf06 	br	c007fa0 <__alt_data_end+0xfc007fa0>
 c008ce4:	d9002e17 	ldw	r4,184(sp)
 c008ce8:	d9402a17 	ldw	r5,168(sp)
 c008cec:	002d883a 	mov	r22,zero
 c008cf0:	20800104 	addi	r2,r4,4
 c008cf4:	24c00017 	ldw	r19,0(r4)
 c008cf8:	283ebb0e 	bge	r5,zero,c0087e8 <__alt_data_end+0xfc0087e8>
 c008cfc:	003ef106 	br	c0088c4 <__alt_data_end+0xfc0088c4>
 c008d00:	9080040c 	andi	r2,r18,16
 c008d04:	1000921e 	bne	r2,zero,c008f50 <___vfprintf_internal_r+0x1b74>
 c008d08:	9480100c 	andi	r18,r18,64
 c008d0c:	90013926 	beq	r18,zero,c0091f4 <___vfprintf_internal_r+0x1e18>
 c008d10:	d9402e17 	ldw	r5,184(sp)
 c008d14:	d8c02f17 	ldw	r3,188(sp)
 c008d18:	28800017 	ldw	r2,0(r5)
 c008d1c:	29400104 	addi	r5,r5,4
 c008d20:	d9402e15 	stw	r5,184(sp)
 c008d24:	10c0000d 	sth	r3,0(r2)
 c008d28:	0039e406 	br	c0074bc <__alt_data_end+0xfc0074bc>
 c008d2c:	9080100c 	andi	r2,r18,64
 c008d30:	10008026 	beq	r2,zero,c008f34 <___vfprintf_internal_r+0x1b58>
 c008d34:	d8802e17 	ldw	r2,184(sp)
 c008d38:	14c0000f 	ldh	r19,0(r2)
 c008d3c:	10800104 	addi	r2,r2,4
 c008d40:	d8802e15 	stw	r2,184(sp)
 c008d44:	982dd7fa 	srai	r22,r19,31
 c008d48:	b005883a 	mov	r2,r22
 c008d4c:	003af706 	br	c00792c <__alt_data_end+0xfc00792c>
 c008d50:	9080100c 	andi	r2,r18,64
 c008d54:	d8002785 	stb	zero,158(sp)
 c008d58:	10008a1e 	bne	r2,zero,c008f84 <___vfprintf_internal_r+0x1ba8>
 c008d5c:	d9002e17 	ldw	r4,184(sp)
 c008d60:	d9402a17 	ldw	r5,168(sp)
 c008d64:	002d883a 	mov	r22,zero
 c008d68:	20800104 	addi	r2,r4,4
 c008d6c:	24c00017 	ldw	r19,0(r4)
 c008d70:	283e4b0e 	bge	r5,zero,c0086a0 <__alt_data_end+0xfc0086a0>
 c008d74:	9d86b03a 	or	r3,r19,r22
 c008d78:	d8802e15 	stw	r2,184(sp)
 c008d7c:	183e4c1e 	bne	r3,zero,c0086b0 <__alt_data_end+0xfc0086b0>
 c008d80:	0039883a 	mov	fp,zero
 c008d84:	0005883a 	mov	r2,zero
 c008d88:	003d4006 	br	c00828c <__alt_data_end+0xfc00828c>
 c008d8c:	014300b4 	movhi	r5,3074
 c008d90:	2961f784 	addi	r5,r5,-30754
 c008d94:	d9402c15 	stw	r5,176(sp)
 c008d98:	d9402c17 	ldw	r5,176(sp)
 c008d9c:	1c47883a 	add	r3,r3,r17
 c008da0:	10800044 	addi	r2,r2,1
 c008da4:	41400015 	stw	r5,0(r8)
 c008da8:	44400115 	stw	r17,4(r8)
 c008dac:	d8c02015 	stw	r3,128(sp)
 c008db0:	d8801f15 	stw	r2,124(sp)
 c008db4:	010001c4 	movi	r4,7
 c008db8:	20bec816 	blt	r4,r2,c0088dc <__alt_data_end+0xfc0088dc>
 c008dbc:	42000204 	addi	r8,r8,8
 c008dc0:	003ecd06 	br	c0088f8 <__alt_data_end+0xfc0088f8>
 c008dc4:	d9002a17 	ldw	r4,168(sp)
 c008dc8:	d8002785 	stb	zero,158(sp)
 c008dcc:	203d2d16 	blt	r4,zero,c008284 <__alt_data_end+0xfc008284>
 c008dd0:	00bfdfc4 	movi	r2,-129
 c008dd4:	90a4703a 	and	r18,r18,r2
 c008dd8:	003a6106 	br	c007760 <__alt_data_end+0xfc007760>
 c008ddc:	010300b4 	movhi	r4,3074
 c008de0:	2121f784 	addi	r4,r4,-30754
 c008de4:	d9002c15 	stw	r4,176(sp)
 c008de8:	003bea06 	br	c007d94 <__alt_data_end+0xfc007d94>
 c008dec:	d9002d17 	ldw	r4,180(sp)
 c008df0:	d9801e04 	addi	r6,sp,120
 c008df4:	b80b883a 	mov	r5,r23
 c008df8:	c01012c0 	call	c01012c <__sprint_r>
 c008dfc:	103a7b1e 	bne	r2,zero,c0077ec <__alt_data_end+0xfc0077ec>
 c008e00:	d8c02017 	ldw	r3,128(sp)
 c008e04:	da000404 	addi	r8,sp,16
 c008e08:	003d4106 	br	c008310 <__alt_data_end+0xfc008310>
 c008e0c:	d8801f17 	ldw	r2,124(sp)
 c008e10:	014300b4 	movhi	r5,3074
 c008e14:	01000044 	movi	r4,1
 c008e18:	18c00044 	addi	r3,r3,1
 c008e1c:	10800044 	addi	r2,r2,1
 c008e20:	2961ef04 	addi	r5,r5,-30788
 c008e24:	41000115 	stw	r4,4(r8)
 c008e28:	41400015 	stw	r5,0(r8)
 c008e2c:	d8c02015 	stw	r3,128(sp)
 c008e30:	d8801f15 	stw	r2,124(sp)
 c008e34:	010001c4 	movi	r4,7
 c008e38:	20805c16 	blt	r4,r2,c008fac <___vfprintf_internal_r+0x1bd0>
 c008e3c:	42000204 	addi	r8,r8,8
 c008e40:	8800041e 	bne	r17,zero,c008e54 <___vfprintf_internal_r+0x1a78>
 c008e44:	d8803317 	ldw	r2,204(sp)
 c008e48:	1000021e 	bne	r2,zero,c008e54 <___vfprintf_internal_r+0x1a78>
 c008e4c:	9080004c 	andi	r2,r18,1
 c008e50:	103be726 	beq	r2,zero,c007df0 <__alt_data_end+0xfc007df0>
 c008e54:	d9003717 	ldw	r4,220(sp)
 c008e58:	d8801f17 	ldw	r2,124(sp)
 c008e5c:	d9403417 	ldw	r5,208(sp)
 c008e60:	20c7883a 	add	r3,r4,r3
 c008e64:	10800044 	addi	r2,r2,1
 c008e68:	41000115 	stw	r4,4(r8)
 c008e6c:	41400015 	stw	r5,0(r8)
 c008e70:	d8c02015 	stw	r3,128(sp)
 c008e74:	d8801f15 	stw	r2,124(sp)
 c008e78:	010001c4 	movi	r4,7
 c008e7c:	20812116 	blt	r4,r2,c009304 <___vfprintf_internal_r+0x1f28>
 c008e80:	42000204 	addi	r8,r8,8
 c008e84:	0463c83a 	sub	r17,zero,r17
 c008e88:	0440730e 	bge	zero,r17,c009058 <___vfprintf_internal_r+0x1c7c>
 c008e8c:	05800404 	movi	r22,16
 c008e90:	b440860e 	bge	r22,r17,c0090ac <___vfprintf_internal_r+0x1cd0>
 c008e94:	014300b4 	movhi	r5,3074
 c008e98:	2961f784 	addi	r5,r5,-30754
 c008e9c:	d9402c15 	stw	r5,176(sp)
 c008ea0:	070001c4 	movi	fp,7
 c008ea4:	dcc02d17 	ldw	r19,180(sp)
 c008ea8:	00000306 	br	c008eb8 <___vfprintf_internal_r+0x1adc>
 c008eac:	42000204 	addi	r8,r8,8
 c008eb0:	8c7ffc04 	addi	r17,r17,-16
 c008eb4:	b440800e 	bge	r22,r17,c0090b8 <___vfprintf_internal_r+0x1cdc>
 c008eb8:	18c00404 	addi	r3,r3,16
 c008ebc:	10800044 	addi	r2,r2,1
 c008ec0:	45000015 	stw	r20,0(r8)
 c008ec4:	45800115 	stw	r22,4(r8)
 c008ec8:	d8c02015 	stw	r3,128(sp)
 c008ecc:	d8801f15 	stw	r2,124(sp)
 c008ed0:	e0bff60e 	bge	fp,r2,c008eac <__alt_data_end+0xfc008eac>
 c008ed4:	d9801e04 	addi	r6,sp,120
 c008ed8:	b80b883a 	mov	r5,r23
 c008edc:	9809883a 	mov	r4,r19
 c008ee0:	c01012c0 	call	c01012c <__sprint_r>
 c008ee4:	103a411e 	bne	r2,zero,c0077ec <__alt_data_end+0xfc0077ec>
 c008ee8:	d8c02017 	ldw	r3,128(sp)
 c008eec:	d8801f17 	ldw	r2,124(sp)
 c008ef0:	da000404 	addi	r8,sp,16
 c008ef4:	003fee06 	br	c008eb0 <__alt_data_end+0xfc008eb0>
 c008ef8:	00bfffc4 	movi	r2,-1
 c008efc:	003a3f06 	br	c0077fc <__alt_data_end+0xfc0077fc>
 c008f00:	008011c4 	movi	r2,71
 c008f04:	1440b816 	blt	r2,r17,c0091e8 <___vfprintf_internal_r+0x1e0c>
 c008f08:	040300b4 	movhi	r16,3074
 c008f0c:	8421e104 	addi	r16,r16,-30844
 c008f10:	00c000c4 	movi	r3,3
 c008f14:	00bfdfc4 	movi	r2,-129
 c008f18:	d8c02915 	stw	r3,164(sp)
 c008f1c:	90a4703a 	and	r18,r18,r2
 c008f20:	df002783 	ldbu	fp,158(sp)
 c008f24:	d8c02b15 	stw	r3,172(sp)
 c008f28:	d8002a15 	stw	zero,168(sp)
 c008f2c:	d8003215 	stw	zero,200(sp)
 c008f30:	003b0706 	br	c007b50 <__alt_data_end+0xfc007b50>
 c008f34:	d8c02e17 	ldw	r3,184(sp)
 c008f38:	1cc00017 	ldw	r19,0(r3)
 c008f3c:	18c00104 	addi	r3,r3,4
 c008f40:	d8c02e15 	stw	r3,184(sp)
 c008f44:	982dd7fa 	srai	r22,r19,31
 c008f48:	b005883a 	mov	r2,r22
 c008f4c:	003a7706 	br	c00792c <__alt_data_end+0xfc00792c>
 c008f50:	d8c02e17 	ldw	r3,184(sp)
 c008f54:	d9002f17 	ldw	r4,188(sp)
 c008f58:	18800017 	ldw	r2,0(r3)
 c008f5c:	18c00104 	addi	r3,r3,4
 c008f60:	d8c02e15 	stw	r3,184(sp)
 c008f64:	11000015 	stw	r4,0(r2)
 c008f68:	00395406 	br	c0074bc <__alt_data_end+0xfc0074bc>
 c008f6c:	d9002e17 	ldw	r4,184(sp)
 c008f70:	002d883a 	mov	r22,zero
 c008f74:	24c00017 	ldw	r19,0(r4)
 c008f78:	21000104 	addi	r4,r4,4
 c008f7c:	d9002e15 	stw	r4,184(sp)
 c008f80:	003c0706 	br	c007fa0 <__alt_data_end+0xfc007fa0>
 c008f84:	d9402e17 	ldw	r5,184(sp)
 c008f88:	d8c02a17 	ldw	r3,168(sp)
 c008f8c:	002d883a 	mov	r22,zero
 c008f90:	28800104 	addi	r2,r5,4
 c008f94:	2cc0000b 	ldhu	r19,0(r5)
 c008f98:	183dc10e 	bge	r3,zero,c0086a0 <__alt_data_end+0xfc0086a0>
 c008f9c:	003f7506 	br	c008d74 <__alt_data_end+0xfc008d74>
 c008fa0:	040300b4 	movhi	r16,3074
 c008fa4:	8421df04 	addi	r16,r16,-30852
 c008fa8:	003aa706 	br	c007a48 <__alt_data_end+0xfc007a48>
 c008fac:	d9002d17 	ldw	r4,180(sp)
 c008fb0:	d9801e04 	addi	r6,sp,120
 c008fb4:	b80b883a 	mov	r5,r23
 c008fb8:	c01012c0 	call	c01012c <__sprint_r>
 c008fbc:	103a0b1e 	bne	r2,zero,c0077ec <__alt_data_end+0xfc0077ec>
 c008fc0:	dc402617 	ldw	r17,152(sp)
 c008fc4:	d8c02017 	ldw	r3,128(sp)
 c008fc8:	da000404 	addi	r8,sp,16
 c008fcc:	003f9c06 	br	c008e40 <__alt_data_end+0xfc008e40>
 c008fd0:	ac400043 	ldbu	r17,1(r21)
 c008fd4:	84000814 	ori	r16,r16,32
 c008fd8:	ad400044 	addi	r21,r21,1
 c008fdc:	8c403fcc 	andi	r17,r17,255
 c008fe0:	8c40201c 	xori	r17,r17,128
 c008fe4:	8c7fe004 	addi	r17,r17,-128
 c008fe8:	00395e06 	br	c007564 <__alt_data_end+0xfc007564>
 c008fec:	d8c02e15 	stw	r3,184(sp)
 c008ff0:	0039883a 	mov	fp,zero
 c008ff4:	003e3506 	br	c0088cc <__alt_data_end+0xfc0088cc>
 c008ff8:	d9002d17 	ldw	r4,180(sp)
 c008ffc:	d9801e04 	addi	r6,sp,120
 c009000:	b80b883a 	mov	r5,r23
 c009004:	c01012c0 	call	c01012c <__sprint_r>
 c009008:	1039f81e 	bne	r2,zero,c0077ec <__alt_data_end+0xfc0077ec>
 c00900c:	d8c02017 	ldw	r3,128(sp)
 c009010:	da000404 	addi	r8,sp,16
 c009014:	003cd006 	br	c008358 <__alt_data_end+0xfc008358>
 c009018:	8009883a 	mov	r4,r16
 c00901c:	df003d15 	stw	fp,244(sp)
 c009020:	c0050880 	call	c005088 <strlen>
 c009024:	d8802b15 	stw	r2,172(sp)
 c009028:	da003d17 	ldw	r8,244(sp)
 c00902c:	103c200e 	bge	r2,zero,c0080b0 <__alt_data_end+0xfc0080b0>
 c009030:	0005883a 	mov	r2,zero
 c009034:	003c1e06 	br	c0080b0 <__alt_data_end+0xfc0080b0>
 c009038:	d9002d17 	ldw	r4,180(sp)
 c00903c:	d9801e04 	addi	r6,sp,120
 c009040:	b80b883a 	mov	r5,r23
 c009044:	c01012c0 	call	c01012c <__sprint_r>
 c009048:	1039e81e 	bne	r2,zero,c0077ec <__alt_data_end+0xfc0077ec>
 c00904c:	d8c02017 	ldw	r3,128(sp)
 c009050:	d8801f17 	ldw	r2,124(sp)
 c009054:	da000404 	addi	r8,sp,16
 c009058:	d9403317 	ldw	r5,204(sp)
 c00905c:	10800044 	addi	r2,r2,1
 c009060:	44000015 	stw	r16,0(r8)
 c009064:	28c7883a 	add	r3,r5,r3
 c009068:	003b5b06 	br	c007dd8 <__alt_data_end+0xfc007dd8>
 c00906c:	010300b4 	movhi	r4,3074
 c009070:	2121fb84 	addi	r4,r4,-30738
 c009074:	d9003515 	stw	r4,212(sp)
 c009078:	003af206 	br	c007c44 <__alt_data_end+0xfc007c44>
 c00907c:	013fffc4 	movi	r4,-1
 c009080:	003a0806 	br	c0078a4 <__alt_data_end+0xfc0078a4>
 c009084:	0023883a 	mov	r17,zero
 c009088:	003d9d06 	br	c008700 <__alt_data_end+0xfc008700>
 c00908c:	d9002d17 	ldw	r4,180(sp)
 c009090:	d9801e04 	addi	r6,sp,120
 c009094:	b80b883a 	mov	r5,r23
 c009098:	c01012c0 	call	c01012c <__sprint_r>
 c00909c:	1039d31e 	bne	r2,zero,c0077ec <__alt_data_end+0xfc0077ec>
 c0090a0:	d8c02017 	ldw	r3,128(sp)
 c0090a4:	da000404 	addi	r8,sp,16
 c0090a8:	003d9406 	br	c0086fc <__alt_data_end+0xfc0086fc>
 c0090ac:	010300b4 	movhi	r4,3074
 c0090b0:	2121f784 	addi	r4,r4,-30754
 c0090b4:	d9002c15 	stw	r4,176(sp)
 c0090b8:	d9002c17 	ldw	r4,176(sp)
 c0090bc:	1c47883a 	add	r3,r3,r17
 c0090c0:	10800044 	addi	r2,r2,1
 c0090c4:	41000015 	stw	r4,0(r8)
 c0090c8:	44400115 	stw	r17,4(r8)
 c0090cc:	d8c02015 	stw	r3,128(sp)
 c0090d0:	d8801f15 	stw	r2,124(sp)
 c0090d4:	010001c4 	movi	r4,7
 c0090d8:	20bfd716 	blt	r4,r2,c009038 <__alt_data_end+0xfc009038>
 c0090dc:	42000204 	addi	r8,r8,8
 c0090e0:	003fdd06 	br	c009058 <__alt_data_end+0xfc009058>
 c0090e4:	d9002d17 	ldw	r4,180(sp)
 c0090e8:	d9801e04 	addi	r6,sp,120
 c0090ec:	b80b883a 	mov	r5,r23
 c0090f0:	c01012c0 	call	c01012c <__sprint_r>
 c0090f4:	1039bd1e 	bne	r2,zero,c0077ec <__alt_data_end+0xfc0077ec>
 c0090f8:	d8802617 	ldw	r2,152(sp)
 c0090fc:	d8c02017 	ldw	r3,128(sp)
 c009100:	da000404 	addi	r8,sp,16
 c009104:	003e1006 	br	c008948 <__alt_data_end+0xfc008948>
 c009108:	00800044 	movi	r2,1
 c00910c:	10803fcc 	andi	r2,r2,255
 c009110:	00c00044 	movi	r3,1
 c009114:	10fa0d26 	beq	r2,r3,c00794c <__alt_data_end+0xfc00794c>
 c009118:	00c00084 	movi	r3,2
 c00911c:	10fbaf26 	beq	r2,r3,c007fdc <__alt_data_end+0xfc007fdc>
 c009120:	003a6d06 	br	c007ad8 <__alt_data_end+0xfc007ad8>
 c009124:	010300b4 	movhi	r4,3074
 c009128:	2121fb84 	addi	r4,r4,-30738
 c00912c:	d9003515 	stw	r4,212(sp)
 c009130:	003b5406 	br	c007e84 <__alt_data_end+0xfc007e84>
 c009134:	d8802a17 	ldw	r2,168(sp)
 c009138:	00c00184 	movi	r3,6
 c00913c:	1880012e 	bgeu	r3,r2,c009144 <___vfprintf_internal_r+0x1d68>
 c009140:	1805883a 	mov	r2,r3
 c009144:	d8802b15 	stw	r2,172(sp)
 c009148:	1000ef16 	blt	r2,zero,c009508 <___vfprintf_internal_r+0x212c>
 c00914c:	040300b4 	movhi	r16,3074
 c009150:	d8802915 	stw	r2,164(sp)
 c009154:	dcc02e15 	stw	r19,184(sp)
 c009158:	d8002a15 	stw	zero,168(sp)
 c00915c:	d8003215 	stw	zero,200(sp)
 c009160:	8421ed04 	addi	r16,r16,-30796
 c009164:	0039883a 	mov	fp,zero
 c009168:	003a8006 	br	c007b6c <__alt_data_end+0xfc007b6c>
 c00916c:	0021883a 	mov	r16,zero
 c009170:	003e0706 	br	c008990 <__alt_data_end+0xfc008990>
 c009174:	d9002d17 	ldw	r4,180(sp)
 c009178:	d9801e04 	addi	r6,sp,120
 c00917c:	b80b883a 	mov	r5,r23
 c009180:	c01012c0 	call	c01012c <__sprint_r>
 c009184:	1039991e 	bne	r2,zero,c0077ec <__alt_data_end+0xfc0077ec>
 c009188:	d8802617 	ldw	r2,152(sp)
 c00918c:	d9403317 	ldw	r5,204(sp)
 c009190:	d8c02017 	ldw	r3,128(sp)
 c009194:	da000404 	addi	r8,sp,16
 c009198:	2885c83a 	sub	r2,r5,r2
 c00919c:	003dfb06 	br	c00898c <__alt_data_end+0xfc00898c>
 c0091a0:	9080004c 	andi	r2,r18,1
 c0091a4:	103e8f1e 	bne	r2,zero,c008be4 <__alt_data_end+0xfc008be4>
 c0091a8:	d8802117 	ldw	r2,132(sp)
 c0091ac:	003e9e06 	br	c008c28 <__alt_data_end+0xfc008c28>
 c0091b0:	1025883a 	mov	r18,r2
 c0091b4:	0039883a 	mov	fp,zero
 c0091b8:	00800084 	movi	r2,2
 c0091bc:	003fd306 	br	c00910c <__alt_data_end+0xfc00910c>
 c0091c0:	07000b44 	movi	fp,45
 c0091c4:	df002785 	stb	fp,158(sp)
 c0091c8:	003a1b06 	br	c007a38 <__alt_data_end+0xfc007a38>
 c0091cc:	00c00b44 	movi	r3,45
 c0091d0:	d8c02785 	stb	r3,158(sp)
 c0091d4:	d8802915 	stw	r2,164(sp)
 c0091d8:	dc802c17 	ldw	r18,176(sp)
 c0091dc:	d8002a15 	stw	zero,168(sp)
 c0091e0:	07000b44 	movi	fp,45
 c0091e4:	003a5e06 	br	c007b60 <__alt_data_end+0xfc007b60>
 c0091e8:	040300b4 	movhi	r16,3074
 c0091ec:	8421e204 	addi	r16,r16,-30840
 c0091f0:	003f4706 	br	c008f10 <__alt_data_end+0xfc008f10>
 c0091f4:	d9002e17 	ldw	r4,184(sp)
 c0091f8:	d9402f17 	ldw	r5,188(sp)
 c0091fc:	20800017 	ldw	r2,0(r4)
 c009200:	21000104 	addi	r4,r4,4
 c009204:	d9002e15 	stw	r4,184(sp)
 c009208:	11400015 	stw	r5,0(r2)
 c00920c:	0038ab06 	br	c0074bc <__alt_data_end+0xfc0074bc>
 c009210:	dd802617 	ldw	r22,152(sp)
 c009214:	00bfff44 	movi	r2,-3
 c009218:	b0801c16 	blt	r22,r2,c00928c <___vfprintf_internal_r+0x1eb0>
 c00921c:	d9402a17 	ldw	r5,168(sp)
 c009220:	2d801a16 	blt	r5,r22,c00928c <___vfprintf_internal_r+0x1eb0>
 c009224:	dd803215 	stw	r22,200(sp)
 c009228:	003e8906 	br	c008c50 <__alt_data_end+0xfc008c50>
 c00922c:	010300b4 	movhi	r4,3074
 c009230:	2121f784 	addi	r4,r4,-30754
 c009234:	d9002c15 	stw	r4,176(sp)
 c009238:	003c9106 	br	c008480 <__alt_data_end+0xfc008480>
 c00923c:	e005883a 	mov	r2,fp
 c009240:	003e7906 	br	c008c28 <__alt_data_end+0xfc008c28>
 c009244:	d9002a17 	ldw	r4,168(sp)
 c009248:	df002783 	ldbu	fp,158(sp)
 c00924c:	dcc02e15 	stw	r19,184(sp)
 c009250:	d9002915 	stw	r4,164(sp)
 c009254:	d9002b15 	stw	r4,172(sp)
 c009258:	d8002a15 	stw	zero,168(sp)
 c00925c:	d8003215 	stw	zero,200(sp)
 c009260:	003a3b06 	br	c007b50 <__alt_data_end+0xfc007b50>
 c009264:	9080004c 	andi	r2,r18,1
 c009268:	0039883a 	mov	fp,zero
 c00926c:	10000426 	beq	r2,zero,c009280 <___vfprintf_internal_r+0x1ea4>
 c009270:	00800c04 	movi	r2,48
 c009274:	dc001dc4 	addi	r16,sp,119
 c009278:	d8801dc5 	stb	r2,119(sp)
 c00927c:	003b6406 	br	c008010 <__alt_data_end+0xfc008010>
 c009280:	d8002b15 	stw	zero,172(sp)
 c009284:	dc001e04 	addi	r16,sp,120
 c009288:	003a2b06 	br	c007b38 <__alt_data_end+0xfc007b38>
 c00928c:	8c7fff84 	addi	r17,r17,-2
 c009290:	b5bfffc4 	addi	r22,r22,-1
 c009294:	dd802615 	stw	r22,152(sp)
 c009298:	dc4022c5 	stb	r17,139(sp)
 c00929c:	b000bf16 	blt	r22,zero,c00959c <___vfprintf_internal_r+0x21c0>
 c0092a0:	00800ac4 	movi	r2,43
 c0092a4:	d8802305 	stb	r2,140(sp)
 c0092a8:	00800244 	movi	r2,9
 c0092ac:	15807016 	blt	r2,r22,c009470 <___vfprintf_internal_r+0x2094>
 c0092b0:	00800c04 	movi	r2,48
 c0092b4:	b5800c04 	addi	r22,r22,48
 c0092b8:	d8802345 	stb	r2,141(sp)
 c0092bc:	dd802385 	stb	r22,142(sp)
 c0092c0:	d88023c4 	addi	r2,sp,143
 c0092c4:	df0022c4 	addi	fp,sp,139
 c0092c8:	d8c03317 	ldw	r3,204(sp)
 c0092cc:	1739c83a 	sub	fp,r2,fp
 c0092d0:	d9003317 	ldw	r4,204(sp)
 c0092d4:	e0c7883a 	add	r3,fp,r3
 c0092d8:	df003a15 	stw	fp,232(sp)
 c0092dc:	d8c02b15 	stw	r3,172(sp)
 c0092e0:	00800044 	movi	r2,1
 c0092e4:	1100b30e 	bge	r2,r4,c0095b4 <___vfprintf_internal_r+0x21d8>
 c0092e8:	d8c02b17 	ldw	r3,172(sp)
 c0092ec:	18c00044 	addi	r3,r3,1
 c0092f0:	d8c02b15 	stw	r3,172(sp)
 c0092f4:	1805883a 	mov	r2,r3
 c0092f8:	1800ac16 	blt	r3,zero,c0095ac <___vfprintf_internal_r+0x21d0>
 c0092fc:	d8003215 	stw	zero,200(sp)
 c009300:	003e5d06 	br	c008c78 <__alt_data_end+0xfc008c78>
 c009304:	d9002d17 	ldw	r4,180(sp)
 c009308:	d9801e04 	addi	r6,sp,120
 c00930c:	b80b883a 	mov	r5,r23
 c009310:	c01012c0 	call	c01012c <__sprint_r>
 c009314:	1039351e 	bne	r2,zero,c0077ec <__alt_data_end+0xfc0077ec>
 c009318:	dc402617 	ldw	r17,152(sp)
 c00931c:	d8c02017 	ldw	r3,128(sp)
 c009320:	d8801f17 	ldw	r2,124(sp)
 c009324:	da000404 	addi	r8,sp,16
 c009328:	003ed606 	br	c008e84 <__alt_data_end+0xfc008e84>
 c00932c:	182b883a 	mov	r21,r3
 c009330:	d8002a15 	stw	zero,168(sp)
 c009334:	00388c06 	br	c007568 <__alt_data_end+0xfc007568>
 c009338:	d8802a17 	ldw	r2,168(sp)
 c00933c:	103e071e 	bne	r2,zero,c008b5c <__alt_data_end+0xfc008b5c>
 c009340:	dc002a15 	stw	r16,168(sp)
 c009344:	003e0506 	br	c008b5c <__alt_data_end+0xfc008b5c>
 c009348:	d9002a17 	ldw	r4,168(sp)
 c00934c:	20c00044 	addi	r3,r4,1
 c009350:	003e0f06 	br	c008b90 <__alt_data_end+0xfc008b90>
 c009354:	01400184 	movi	r5,6
 c009358:	d9402a15 	stw	r5,168(sp)
 c00935c:	003dff06 	br	c008b5c <__alt_data_end+0xfc008b5c>
 c009360:	d8802104 	addi	r2,sp,132
 c009364:	d8800315 	stw	r2,12(sp)
 c009368:	d8802504 	addi	r2,sp,148
 c00936c:	d8800215 	stw	r2,8(sp)
 c009370:	d8802604 	addi	r2,sp,152
 c009374:	d8800115 	stw	r2,4(sp)
 c009378:	d8802a17 	ldw	r2,168(sp)
 c00937c:	d9403617 	ldw	r5,216(sp)
 c009380:	d9002d17 	ldw	r4,180(sp)
 c009384:	d8800015 	stw	r2,0(sp)
 c009388:	01c000c4 	movi	r7,3
 c00938c:	980d883a 	mov	r6,r19
 c009390:	da003d15 	stw	r8,244(sp)
 c009394:	c009b0c0 	call	c009b0c <_dtoa_r>
 c009398:	d8c02a17 	ldw	r3,168(sp)
 c00939c:	da003d17 	ldw	r8,244(sp)
 c0093a0:	1021883a 	mov	r16,r2
 c0093a4:	10f9883a 	add	fp,r2,r3
 c0093a8:	81000007 	ldb	r4,0(r16)
 c0093ac:	00800c04 	movi	r2,48
 c0093b0:	20805e26 	beq	r4,r2,c00952c <___vfprintf_internal_r+0x2150>
 c0093b4:	d8c02617 	ldw	r3,152(sp)
 c0093b8:	e0f9883a 	add	fp,fp,r3
 c0093bc:	003e0a06 	br	c008be8 <__alt_data_end+0xfc008be8>
 c0093c0:	00c00b44 	movi	r3,45
 c0093c4:	24e0003c 	xorhi	r19,r4,32768
 c0093c8:	d8c02905 	stb	r3,164(sp)
 c0093cc:	003de906 	br	c008b74 <__alt_data_end+0xfc008b74>
 c0093d0:	d8c03217 	ldw	r3,200(sp)
 c0093d4:	00c07a0e 	bge	zero,r3,c0095c0 <___vfprintf_internal_r+0x21e4>
 c0093d8:	00800044 	movi	r2,1
 c0093dc:	d9003317 	ldw	r4,204(sp)
 c0093e0:	1105883a 	add	r2,r2,r4
 c0093e4:	d8802b15 	stw	r2,172(sp)
 c0093e8:	10004e16 	blt	r2,zero,c009524 <___vfprintf_internal_r+0x2148>
 c0093ec:	044019c4 	movi	r17,103
 c0093f0:	003e2106 	br	c008c78 <__alt_data_end+0xfc008c78>
 c0093f4:	d9002a17 	ldw	r4,168(sp)
 c0093f8:	d8802104 	addi	r2,sp,132
 c0093fc:	d8800315 	stw	r2,12(sp)
 c009400:	d9000015 	stw	r4,0(sp)
 c009404:	d8802504 	addi	r2,sp,148
 c009408:	d9403617 	ldw	r5,216(sp)
 c00940c:	d9002d17 	ldw	r4,180(sp)
 c009410:	d8800215 	stw	r2,8(sp)
 c009414:	d8802604 	addi	r2,sp,152
 c009418:	d8800115 	stw	r2,4(sp)
 c00941c:	01c000c4 	movi	r7,3
 c009420:	980d883a 	mov	r6,r19
 c009424:	da003d15 	stw	r8,244(sp)
 c009428:	c009b0c0 	call	c009b0c <_dtoa_r>
 c00942c:	d8c02a17 	ldw	r3,168(sp)
 c009430:	da003d17 	ldw	r8,244(sp)
 c009434:	1021883a 	mov	r16,r2
 c009438:	00801184 	movi	r2,70
 c00943c:	80f9883a 	add	fp,r16,r3
 c009440:	88bfd926 	beq	r17,r2,c0093a8 <__alt_data_end+0xfc0093a8>
 c009444:	003de806 	br	c008be8 <__alt_data_end+0xfc008be8>
 c009448:	d9002a17 	ldw	r4,168(sp)
 c00944c:	00c04d0e 	bge	zero,r3,c009584 <___vfprintf_internal_r+0x21a8>
 c009450:	2000441e 	bne	r4,zero,c009564 <___vfprintf_internal_r+0x2188>
 c009454:	9480004c 	andi	r18,r18,1
 c009458:	9000421e 	bne	r18,zero,c009564 <___vfprintf_internal_r+0x2188>
 c00945c:	1805883a 	mov	r2,r3
 c009460:	18006f16 	blt	r3,zero,c009620 <___vfprintf_internal_r+0x2244>
 c009464:	d8c03217 	ldw	r3,200(sp)
 c009468:	d8c02b15 	stw	r3,172(sp)
 c00946c:	003e0206 	br	c008c78 <__alt_data_end+0xfc008c78>
 c009470:	df0022c4 	addi	fp,sp,139
 c009474:	dc002a15 	stw	r16,168(sp)
 c009478:	4027883a 	mov	r19,r8
 c00947c:	e021883a 	mov	r16,fp
 c009480:	b009883a 	mov	r4,r22
 c009484:	01400284 	movi	r5,10
 c009488:	c004cb00 	call	c004cb0 <__modsi3>
 c00948c:	10800c04 	addi	r2,r2,48
 c009490:	843fffc4 	addi	r16,r16,-1
 c009494:	b009883a 	mov	r4,r22
 c009498:	01400284 	movi	r5,10
 c00949c:	80800005 	stb	r2,0(r16)
 c0094a0:	c004c2c0 	call	c004c2c <__divsi3>
 c0094a4:	102d883a 	mov	r22,r2
 c0094a8:	00800244 	movi	r2,9
 c0094ac:	15bff416 	blt	r2,r22,c009480 <__alt_data_end+0xfc009480>
 c0094b0:	9811883a 	mov	r8,r19
 c0094b4:	b0800c04 	addi	r2,r22,48
 c0094b8:	8027883a 	mov	r19,r16
 c0094bc:	997fffc4 	addi	r5,r19,-1
 c0094c0:	98bfffc5 	stb	r2,-1(r19)
 c0094c4:	dc002a17 	ldw	r16,168(sp)
 c0094c8:	2f006d2e 	bgeu	r5,fp,c009680 <___vfprintf_internal_r+0x22a4>
 c0094cc:	d9c02384 	addi	r7,sp,142
 c0094d0:	3ccfc83a 	sub	r7,r7,r19
 c0094d4:	d9002344 	addi	r4,sp,141
 c0094d8:	e1cf883a 	add	r7,fp,r7
 c0094dc:	00000106 	br	c0094e4 <___vfprintf_internal_r+0x2108>
 c0094e0:	28800003 	ldbu	r2,0(r5)
 c0094e4:	20800005 	stb	r2,0(r4)
 c0094e8:	21000044 	addi	r4,r4,1
 c0094ec:	29400044 	addi	r5,r5,1
 c0094f0:	393ffb1e 	bne	r7,r4,c0094e0 <__alt_data_end+0xfc0094e0>
 c0094f4:	d8802304 	addi	r2,sp,140
 c0094f8:	14c5c83a 	sub	r2,r2,r19
 c0094fc:	d8c02344 	addi	r3,sp,141
 c009500:	1885883a 	add	r2,r3,r2
 c009504:	003f7006 	br	c0092c8 <__alt_data_end+0xfc0092c8>
 c009508:	0005883a 	mov	r2,zero
 c00950c:	003f0f06 	br	c00914c <__alt_data_end+0xfc00914c>
 c009510:	d8c03217 	ldw	r3,200(sp)
 c009514:	18c00044 	addi	r3,r3,1
 c009518:	d8c02b15 	stw	r3,172(sp)
 c00951c:	1805883a 	mov	r2,r3
 c009520:	183fb20e 	bge	r3,zero,c0093ec <__alt_data_end+0xfc0093ec>
 c009524:	0005883a 	mov	r2,zero
 c009528:	003fb006 	br	c0093ec <__alt_data_end+0xfc0093ec>
 c00952c:	d9003617 	ldw	r4,216(sp)
 c009530:	000d883a 	mov	r6,zero
 c009534:	000f883a 	mov	r7,zero
 c009538:	980b883a 	mov	r5,r19
 c00953c:	d8c03c15 	stw	r3,240(sp)
 c009540:	da003d15 	stw	r8,244(sp)
 c009544:	c013fbc0 	call	c013fbc <__eqdf2>
 c009548:	d8c03c17 	ldw	r3,240(sp)
 c00954c:	da003d17 	ldw	r8,244(sp)
 c009550:	103f9826 	beq	r2,zero,c0093b4 <__alt_data_end+0xfc0093b4>
 c009554:	00800044 	movi	r2,1
 c009558:	10c7c83a 	sub	r3,r2,r3
 c00955c:	d8c02615 	stw	r3,152(sp)
 c009560:	003f9506 	br	c0093b8 <__alt_data_end+0xfc0093b8>
 c009564:	d9002a17 	ldw	r4,168(sp)
 c009568:	d8c03217 	ldw	r3,200(sp)
 c00956c:	20800044 	addi	r2,r4,1
 c009570:	1885883a 	add	r2,r3,r2
 c009574:	d8802b15 	stw	r2,172(sp)
 c009578:	103dbf0e 	bge	r2,zero,c008c78 <__alt_data_end+0xfc008c78>
 c00957c:	0005883a 	mov	r2,zero
 c009580:	003dbd06 	br	c008c78 <__alt_data_end+0xfc008c78>
 c009584:	2000201e 	bne	r4,zero,c009608 <___vfprintf_internal_r+0x222c>
 c009588:	9480004c 	andi	r18,r18,1
 c00958c:	90001e1e 	bne	r18,zero,c009608 <___vfprintf_internal_r+0x222c>
 c009590:	00800044 	movi	r2,1
 c009594:	d8802b15 	stw	r2,172(sp)
 c009598:	003db706 	br	c008c78 <__alt_data_end+0xfc008c78>
 c00959c:	00800b44 	movi	r2,45
 c0095a0:	05adc83a 	sub	r22,zero,r22
 c0095a4:	d8802305 	stb	r2,140(sp)
 c0095a8:	003f3f06 	br	c0092a8 <__alt_data_end+0xfc0092a8>
 c0095ac:	0005883a 	mov	r2,zero
 c0095b0:	003f5206 	br	c0092fc <__alt_data_end+0xfc0092fc>
 c0095b4:	90a4703a 	and	r18,r18,r2
 c0095b8:	903f4e26 	beq	r18,zero,c0092f4 <__alt_data_end+0xfc0092f4>
 c0095bc:	003f4a06 	br	c0092e8 <__alt_data_end+0xfc0092e8>
 c0095c0:	00800084 	movi	r2,2
 c0095c4:	10c5c83a 	sub	r2,r2,r3
 c0095c8:	003f8406 	br	c0093dc <__alt_data_end+0xfc0093dc>
 c0095cc:	d9402e17 	ldw	r5,184(sp)
 c0095d0:	d9002e17 	ldw	r4,184(sp)
 c0095d4:	ac400043 	ldbu	r17,1(r21)
 c0095d8:	29400017 	ldw	r5,0(r5)
 c0095dc:	20800104 	addi	r2,r4,4
 c0095e0:	d8802e15 	stw	r2,184(sp)
 c0095e4:	d9402a15 	stw	r5,168(sp)
 c0095e8:	182b883a 	mov	r21,r3
 c0095ec:	283e7b0e 	bge	r5,zero,c008fdc <__alt_data_end+0xfc008fdc>
 c0095f0:	8c403fcc 	andi	r17,r17,255
 c0095f4:	017fffc4 	movi	r5,-1
 c0095f8:	8c40201c 	xori	r17,r17,128
 c0095fc:	d9402a15 	stw	r5,168(sp)
 c009600:	8c7fe004 	addi	r17,r17,-128
 c009604:	0037d706 	br	c007564 <__alt_data_end+0xfc007564>
 c009608:	d8c02a17 	ldw	r3,168(sp)
 c00960c:	18c00084 	addi	r3,r3,2
 c009610:	d8c02b15 	stw	r3,172(sp)
 c009614:	1805883a 	mov	r2,r3
 c009618:	183d970e 	bge	r3,zero,c008c78 <__alt_data_end+0xfc008c78>
 c00961c:	003fd706 	br	c00957c <__alt_data_end+0xfc00957c>
 c009620:	0005883a 	mov	r2,zero
 c009624:	003f8f06 	br	c009464 <__alt_data_end+0xfc009464>
 c009628:	9080004c 	andi	r2,r18,1
 c00962c:	103f821e 	bne	r2,zero,c009438 <__alt_data_end+0xfc009438>
 c009630:	d8802117 	ldw	r2,132(sp)
 c009634:	1405c83a 	sub	r2,r2,r16
 c009638:	d8803315 	stw	r2,204(sp)
 c00963c:	b47ef426 	beq	r22,r17,c009210 <__alt_data_end+0xfc009210>
 c009640:	dd802617 	ldw	r22,152(sp)
 c009644:	003f1206 	br	c009290 <__alt_data_end+0xfc009290>
 c009648:	d8c02b03 	ldbu	r3,172(sp)
 c00964c:	d8c02785 	stb	r3,158(sp)
 c009650:	0038df06 	br	c0079d0 <__alt_data_end+0xfc0079d0>
 c009654:	d8c02b03 	ldbu	r3,172(sp)
 c009658:	d8c02785 	stb	r3,158(sp)
 c00965c:	0038aa06 	br	c007908 <__alt_data_end+0xfc007908>
 c009660:	d8c02b03 	ldbu	r3,172(sp)
 c009664:	d8c02785 	stb	r3,158(sp)
 c009668:	003a4306 	br	c007f78 <__alt_data_end+0xfc007f78>
 c00966c:	d8c02b03 	ldbu	r3,172(sp)
 c009670:	d8c02785 	stb	r3,158(sp)
 c009674:	003af506 	br	c00824c <__alt_data_end+0xfc00824c>
 c009678:	0005883a 	mov	r2,zero
 c00967c:	003d7b06 	br	c008c6c <__alt_data_end+0xfc008c6c>
 c009680:	d8802344 	addi	r2,sp,141
 c009684:	003f1006 	br	c0092c8 <__alt_data_end+0xfc0092c8>
 c009688:	d8c02b03 	ldbu	r3,172(sp)
 c00968c:	d8c02785 	stb	r3,158(sp)
 c009690:	0038fd06 	br	c007a88 <__alt_data_end+0xfc007a88>
 c009694:	d8c02b03 	ldbu	r3,172(sp)
 c009698:	d8c02785 	stb	r3,158(sp)
 c00969c:	003a9706 	br	c0080fc <__alt_data_end+0xfc0080fc>
 c0096a0:	d8c02b03 	ldbu	r3,172(sp)
 c0096a4:	d8c02785 	stb	r3,158(sp)
 c0096a8:	003a1806 	br	c007f0c <__alt_data_end+0xfc007f0c>
 c0096ac:	d8c02b03 	ldbu	r3,172(sp)
 c0096b0:	d8c02785 	stb	r3,158(sp)
 c0096b4:	003abe06 	br	c0081b0 <__alt_data_end+0xfc0081b0>

0c0096b8 <__vfprintf_internal>:
 c0096b8:	008300b4 	movhi	r2,3074
 c0096bc:	10aa2604 	addi	r2,r2,-22376
 c0096c0:	300f883a 	mov	r7,r6
 c0096c4:	280d883a 	mov	r6,r5
 c0096c8:	200b883a 	mov	r5,r4
 c0096cc:	11000017 	ldw	r4,0(r2)
 c0096d0:	c0073dc1 	jmpi	c0073dc <___vfprintf_internal_r>

0c0096d4 <__sbprintf>:
 c0096d4:	2880030b 	ldhu	r2,12(r5)
 c0096d8:	2ac01917 	ldw	r11,100(r5)
 c0096dc:	2a80038b 	ldhu	r10,14(r5)
 c0096e0:	2a400717 	ldw	r9,28(r5)
 c0096e4:	2a000917 	ldw	r8,36(r5)
 c0096e8:	defee204 	addi	sp,sp,-1144
 c0096ec:	00c10004 	movi	r3,1024
 c0096f0:	dc011a15 	stw	r16,1128(sp)
 c0096f4:	10bfff4c 	andi	r2,r2,65533
 c0096f8:	2821883a 	mov	r16,r5
 c0096fc:	d8cb883a 	add	r5,sp,r3
 c009700:	dc811c15 	stw	r18,1136(sp)
 c009704:	dc411b15 	stw	r17,1132(sp)
 c009708:	dfc11d15 	stw	ra,1140(sp)
 c00970c:	2025883a 	mov	r18,r4
 c009710:	d881030d 	sth	r2,1036(sp)
 c009714:	dac11915 	stw	r11,1124(sp)
 c009718:	da81038d 	sth	r10,1038(sp)
 c00971c:	da410715 	stw	r9,1052(sp)
 c009720:	da010915 	stw	r8,1060(sp)
 c009724:	dec10015 	stw	sp,1024(sp)
 c009728:	dec10415 	stw	sp,1040(sp)
 c00972c:	d8c10215 	stw	r3,1032(sp)
 c009730:	d8c10515 	stw	r3,1044(sp)
 c009734:	d8010615 	stw	zero,1048(sp)
 c009738:	c0073dc0 	call	c0073dc <___vfprintf_internal_r>
 c00973c:	1023883a 	mov	r17,r2
 c009740:	10000416 	blt	r2,zero,c009754 <__sbprintf+0x80>
 c009744:	d9410004 	addi	r5,sp,1024
 c009748:	9009883a 	mov	r4,r18
 c00974c:	c00b3b00 	call	c00b3b0 <_fflush_r>
 c009750:	10000d1e 	bne	r2,zero,c009788 <__sbprintf+0xb4>
 c009754:	d881030b 	ldhu	r2,1036(sp)
 c009758:	1080100c 	andi	r2,r2,64
 c00975c:	10000326 	beq	r2,zero,c00976c <__sbprintf+0x98>
 c009760:	8080030b 	ldhu	r2,12(r16)
 c009764:	10801014 	ori	r2,r2,64
 c009768:	8080030d 	sth	r2,12(r16)
 c00976c:	8805883a 	mov	r2,r17
 c009770:	dfc11d17 	ldw	ra,1140(sp)
 c009774:	dc811c17 	ldw	r18,1136(sp)
 c009778:	dc411b17 	ldw	r17,1132(sp)
 c00977c:	dc011a17 	ldw	r16,1128(sp)
 c009780:	dec11e04 	addi	sp,sp,1144
 c009784:	f800283a 	ret
 c009788:	047fffc4 	movi	r17,-1
 c00978c:	003ff106 	br	c009754 <__alt_data_end+0xfc009754>

0c009790 <__swsetup_r>:
 c009790:	008300b4 	movhi	r2,3074
 c009794:	defffd04 	addi	sp,sp,-12
 c009798:	10aa2604 	addi	r2,r2,-22376
 c00979c:	dc400115 	stw	r17,4(sp)
 c0097a0:	2023883a 	mov	r17,r4
 c0097a4:	11000017 	ldw	r4,0(r2)
 c0097a8:	dc000015 	stw	r16,0(sp)
 c0097ac:	dfc00215 	stw	ra,8(sp)
 c0097b0:	2821883a 	mov	r16,r5
 c0097b4:	20000226 	beq	r4,zero,c0097c0 <__swsetup_r+0x30>
 c0097b8:	20800e17 	ldw	r2,56(r4)
 c0097bc:	10003126 	beq	r2,zero,c009884 <__swsetup_r+0xf4>
 c0097c0:	8080030b 	ldhu	r2,12(r16)
 c0097c4:	10c0020c 	andi	r3,r2,8
 c0097c8:	1009883a 	mov	r4,r2
 c0097cc:	18000f26 	beq	r3,zero,c00980c <__swsetup_r+0x7c>
 c0097d0:	80c00417 	ldw	r3,16(r16)
 c0097d4:	18001526 	beq	r3,zero,c00982c <__swsetup_r+0x9c>
 c0097d8:	1100004c 	andi	r4,r2,1
 c0097dc:	20001c1e 	bne	r4,zero,c009850 <__swsetup_r+0xc0>
 c0097e0:	1080008c 	andi	r2,r2,2
 c0097e4:	1000291e 	bne	r2,zero,c00988c <__swsetup_r+0xfc>
 c0097e8:	80800517 	ldw	r2,20(r16)
 c0097ec:	80800215 	stw	r2,8(r16)
 c0097f0:	18001c26 	beq	r3,zero,c009864 <__swsetup_r+0xd4>
 c0097f4:	0005883a 	mov	r2,zero
 c0097f8:	dfc00217 	ldw	ra,8(sp)
 c0097fc:	dc400117 	ldw	r17,4(sp)
 c009800:	dc000017 	ldw	r16,0(sp)
 c009804:	dec00304 	addi	sp,sp,12
 c009808:	f800283a 	ret
 c00980c:	2080040c 	andi	r2,r4,16
 c009810:	10002e26 	beq	r2,zero,c0098cc <__swsetup_r+0x13c>
 c009814:	2080010c 	andi	r2,r4,4
 c009818:	10001e1e 	bne	r2,zero,c009894 <__swsetup_r+0x104>
 c00981c:	80c00417 	ldw	r3,16(r16)
 c009820:	20800214 	ori	r2,r4,8
 c009824:	8080030d 	sth	r2,12(r16)
 c009828:	183feb1e 	bne	r3,zero,c0097d8 <__alt_data_end+0xfc0097d8>
 c00982c:	1100a00c 	andi	r4,r2,640
 c009830:	01408004 	movi	r5,512
 c009834:	217fe826 	beq	r4,r5,c0097d8 <__alt_data_end+0xfc0097d8>
 c009838:	800b883a 	mov	r5,r16
 c00983c:	8809883a 	mov	r4,r17
 c009840:	c00c34c0 	call	c00c34c <__smakebuf_r>
 c009844:	8080030b 	ldhu	r2,12(r16)
 c009848:	80c00417 	ldw	r3,16(r16)
 c00984c:	003fe206 	br	c0097d8 <__alt_data_end+0xfc0097d8>
 c009850:	80800517 	ldw	r2,20(r16)
 c009854:	80000215 	stw	zero,8(r16)
 c009858:	0085c83a 	sub	r2,zero,r2
 c00985c:	80800615 	stw	r2,24(r16)
 c009860:	183fe41e 	bne	r3,zero,c0097f4 <__alt_data_end+0xfc0097f4>
 c009864:	80c0030b 	ldhu	r3,12(r16)
 c009868:	0005883a 	mov	r2,zero
 c00986c:	1900200c 	andi	r4,r3,128
 c009870:	203fe126 	beq	r4,zero,c0097f8 <__alt_data_end+0xfc0097f8>
 c009874:	18c01014 	ori	r3,r3,64
 c009878:	80c0030d 	sth	r3,12(r16)
 c00987c:	00bfffc4 	movi	r2,-1
 c009880:	003fdd06 	br	c0097f8 <__alt_data_end+0xfc0097f8>
 c009884:	c00b79c0 	call	c00b79c <__sinit>
 c009888:	003fcd06 	br	c0097c0 <__alt_data_end+0xfc0097c0>
 c00988c:	0005883a 	mov	r2,zero
 c009890:	003fd606 	br	c0097ec <__alt_data_end+0xfc0097ec>
 c009894:	81400c17 	ldw	r5,48(r16)
 c009898:	28000626 	beq	r5,zero,c0098b4 <__swsetup_r+0x124>
 c00989c:	80801004 	addi	r2,r16,64
 c0098a0:	28800326 	beq	r5,r2,c0098b0 <__swsetup_r+0x120>
 c0098a4:	8809883a 	mov	r4,r17
 c0098a8:	c00b9100 	call	c00b910 <_free_r>
 c0098ac:	8100030b 	ldhu	r4,12(r16)
 c0098b0:	80000c15 	stw	zero,48(r16)
 c0098b4:	80c00417 	ldw	r3,16(r16)
 c0098b8:	00bff6c4 	movi	r2,-37
 c0098bc:	1108703a 	and	r4,r2,r4
 c0098c0:	80000115 	stw	zero,4(r16)
 c0098c4:	80c00015 	stw	r3,0(r16)
 c0098c8:	003fd506 	br	c009820 <__alt_data_end+0xfc009820>
 c0098cc:	00800244 	movi	r2,9
 c0098d0:	88800015 	stw	r2,0(r17)
 c0098d4:	20801014 	ori	r2,r4,64
 c0098d8:	8080030d 	sth	r2,12(r16)
 c0098dc:	00bfffc4 	movi	r2,-1
 c0098e0:	003fc506 	br	c0097f8 <__alt_data_end+0xfc0097f8>

0c0098e4 <quorem>:
 c0098e4:	defff204 	addi	sp,sp,-56
 c0098e8:	ddc00b15 	stw	r23,44(sp)
 c0098ec:	20800417 	ldw	r2,16(r4)
 c0098f0:	2dc00417 	ldw	r23,16(r5)
 c0098f4:	dfc00d15 	stw	ra,52(sp)
 c0098f8:	df000c15 	stw	fp,48(sp)
 c0098fc:	dd800a15 	stw	r22,40(sp)
 c009900:	dd400915 	stw	r21,36(sp)
 c009904:	dd000815 	stw	r20,32(sp)
 c009908:	dcc00715 	stw	r19,28(sp)
 c00990c:	dc800615 	stw	r18,24(sp)
 c009910:	dc400515 	stw	r17,20(sp)
 c009914:	dc000415 	stw	r16,16(sp)
 c009918:	15c07a16 	blt	r2,r23,c009b04 <quorem+0x220>
 c00991c:	bdffffc4 	addi	r23,r23,-1
 c009920:	bde9883a 	add	r20,r23,r23
 c009924:	28c00504 	addi	r3,r5,20
 c009928:	a529883a 	add	r20,r20,r20
 c00992c:	1d39883a 	add	fp,r3,r20
 c009930:	24c00504 	addi	r19,r4,20
 c009934:	d9400215 	stw	r5,8(sp)
 c009938:	9d29883a 	add	r20,r19,r20
 c00993c:	e1400017 	ldw	r5,0(fp)
 c009940:	d9000015 	stw	r4,0(sp)
 c009944:	a1000017 	ldw	r4,0(r20)
 c009948:	29400044 	addi	r5,r5,1
 c00994c:	d8c00115 	stw	r3,4(sp)
 c009950:	dd000315 	stw	r20,12(sp)
 c009954:	c004d240 	call	c004d24 <__udivsi3>
 c009958:	1025883a 	mov	r18,r2
 c00995c:	10003026 	beq	r2,zero,c009a20 <quorem+0x13c>
 c009960:	dc400117 	ldw	r17,4(sp)
 c009964:	9829883a 	mov	r20,r19
 c009968:	002d883a 	mov	r22,zero
 c00996c:	0021883a 	mov	r16,zero
 c009970:	8d400017 	ldw	r21,0(r17)
 c009974:	900b883a 	mov	r5,r18
 c009978:	8c400104 	addi	r17,r17,4
 c00997c:	a93fffcc 	andi	r4,r21,65535
 c009980:	c004de00 	call	c004de0 <__mulsi3>
 c009984:	a808d43a 	srli	r4,r21,16
 c009988:	900b883a 	mov	r5,r18
 c00998c:	15ad883a 	add	r22,r2,r22
 c009990:	c004de00 	call	c004de0 <__mulsi3>
 c009994:	a1000017 	ldw	r4,0(r20)
 c009998:	b00cd43a 	srli	r6,r22,16
 c00999c:	b0ffffcc 	andi	r3,r22,65535
 c0099a0:	217fffcc 	andi	r5,r4,65535
 c0099a4:	2c21883a 	add	r16,r5,r16
 c0099a8:	80c7c83a 	sub	r3,r16,r3
 c0099ac:	2008d43a 	srli	r4,r4,16
 c0099b0:	1185883a 	add	r2,r2,r6
 c0099b4:	1821d43a 	srai	r16,r3,16
 c0099b8:	117fffcc 	andi	r5,r2,65535
 c0099bc:	2149c83a 	sub	r4,r4,r5
 c0099c0:	2421883a 	add	r16,r4,r16
 c0099c4:	8008943a 	slli	r4,r16,16
 c0099c8:	18ffffcc 	andi	r3,r3,65535
 c0099cc:	102cd43a 	srli	r22,r2,16
 c0099d0:	20c8b03a 	or	r4,r4,r3
 c0099d4:	a1000015 	stw	r4,0(r20)
 c0099d8:	8021d43a 	srai	r16,r16,16
 c0099dc:	a5000104 	addi	r20,r20,4
 c0099e0:	e47fe32e 	bgeu	fp,r17,c009970 <__alt_data_end+0xfc009970>
 c0099e4:	d8c00317 	ldw	r3,12(sp)
 c0099e8:	18800017 	ldw	r2,0(r3)
 c0099ec:	10000c1e 	bne	r2,zero,c009a20 <quorem+0x13c>
 c0099f0:	18bfff04 	addi	r2,r3,-4
 c0099f4:	9880082e 	bgeu	r19,r2,c009a18 <quorem+0x134>
 c0099f8:	18ffff17 	ldw	r3,-4(r3)
 c0099fc:	18000326 	beq	r3,zero,c009a0c <quorem+0x128>
 c009a00:	00000506 	br	c009a18 <quorem+0x134>
 c009a04:	10c00017 	ldw	r3,0(r2)
 c009a08:	1800031e 	bne	r3,zero,c009a18 <quorem+0x134>
 c009a0c:	10bfff04 	addi	r2,r2,-4
 c009a10:	bdffffc4 	addi	r23,r23,-1
 c009a14:	98bffb36 	bltu	r19,r2,c009a04 <__alt_data_end+0xfc009a04>
 c009a18:	d8c00017 	ldw	r3,0(sp)
 c009a1c:	1dc00415 	stw	r23,16(r3)
 c009a20:	d9400217 	ldw	r5,8(sp)
 c009a24:	d9000017 	ldw	r4,0(sp)
 c009a28:	c00db480 	call	c00db48 <__mcmp>
 c009a2c:	10002816 	blt	r2,zero,c009ad0 <quorem+0x1ec>
 c009a30:	dc400117 	ldw	r17,4(sp)
 c009a34:	94800044 	addi	r18,r18,1
 c009a38:	980d883a 	mov	r6,r19
 c009a3c:	0007883a 	mov	r3,zero
 c009a40:	31000017 	ldw	r4,0(r6)
 c009a44:	89400017 	ldw	r5,0(r17)
 c009a48:	31800104 	addi	r6,r6,4
 c009a4c:	20bfffcc 	andi	r2,r4,65535
 c009a50:	10c7883a 	add	r3,r2,r3
 c009a54:	28bfffcc 	andi	r2,r5,65535
 c009a58:	1885c83a 	sub	r2,r3,r2
 c009a5c:	280ad43a 	srli	r5,r5,16
 c009a60:	2008d43a 	srli	r4,r4,16
 c009a64:	1007d43a 	srai	r3,r2,16
 c009a68:	10bfffcc 	andi	r2,r2,65535
 c009a6c:	2149c83a 	sub	r4,r4,r5
 c009a70:	20c9883a 	add	r4,r4,r3
 c009a74:	200a943a 	slli	r5,r4,16
 c009a78:	8c400104 	addi	r17,r17,4
 c009a7c:	2007d43a 	srai	r3,r4,16
 c009a80:	2884b03a 	or	r2,r5,r2
 c009a84:	30bfff15 	stw	r2,-4(r6)
 c009a88:	e47fed2e 	bgeu	fp,r17,c009a40 <__alt_data_end+0xfc009a40>
 c009a8c:	bdc5883a 	add	r2,r23,r23
 c009a90:	1085883a 	add	r2,r2,r2
 c009a94:	9887883a 	add	r3,r19,r2
 c009a98:	18800017 	ldw	r2,0(r3)
 c009a9c:	10000c1e 	bne	r2,zero,c009ad0 <quorem+0x1ec>
 c009aa0:	18bfff04 	addi	r2,r3,-4
 c009aa4:	9880082e 	bgeu	r19,r2,c009ac8 <quorem+0x1e4>
 c009aa8:	18ffff17 	ldw	r3,-4(r3)
 c009aac:	18000326 	beq	r3,zero,c009abc <quorem+0x1d8>
 c009ab0:	00000506 	br	c009ac8 <quorem+0x1e4>
 c009ab4:	10c00017 	ldw	r3,0(r2)
 c009ab8:	1800031e 	bne	r3,zero,c009ac8 <quorem+0x1e4>
 c009abc:	10bfff04 	addi	r2,r2,-4
 c009ac0:	bdffffc4 	addi	r23,r23,-1
 c009ac4:	98bffb36 	bltu	r19,r2,c009ab4 <__alt_data_end+0xfc009ab4>
 c009ac8:	d8c00017 	ldw	r3,0(sp)
 c009acc:	1dc00415 	stw	r23,16(r3)
 c009ad0:	9005883a 	mov	r2,r18
 c009ad4:	dfc00d17 	ldw	ra,52(sp)
 c009ad8:	df000c17 	ldw	fp,48(sp)
 c009adc:	ddc00b17 	ldw	r23,44(sp)
 c009ae0:	dd800a17 	ldw	r22,40(sp)
 c009ae4:	dd400917 	ldw	r21,36(sp)
 c009ae8:	dd000817 	ldw	r20,32(sp)
 c009aec:	dcc00717 	ldw	r19,28(sp)
 c009af0:	dc800617 	ldw	r18,24(sp)
 c009af4:	dc400517 	ldw	r17,20(sp)
 c009af8:	dc000417 	ldw	r16,16(sp)
 c009afc:	dec00e04 	addi	sp,sp,56
 c009b00:	f800283a 	ret
 c009b04:	0005883a 	mov	r2,zero
 c009b08:	003ff206 	br	c009ad4 <__alt_data_end+0xfc009ad4>

0c009b0c <_dtoa_r>:
 c009b0c:	20801017 	ldw	r2,64(r4)
 c009b10:	deffde04 	addi	sp,sp,-136
 c009b14:	df002015 	stw	fp,128(sp)
 c009b18:	dcc01b15 	stw	r19,108(sp)
 c009b1c:	dc801a15 	stw	r18,104(sp)
 c009b20:	dc401915 	stw	r17,100(sp)
 c009b24:	dc001815 	stw	r16,96(sp)
 c009b28:	dfc02115 	stw	ra,132(sp)
 c009b2c:	ddc01f15 	stw	r23,124(sp)
 c009b30:	dd801e15 	stw	r22,120(sp)
 c009b34:	dd401d15 	stw	r21,116(sp)
 c009b38:	dd001c15 	stw	r20,112(sp)
 c009b3c:	d9c00315 	stw	r7,12(sp)
 c009b40:	2039883a 	mov	fp,r4
 c009b44:	3023883a 	mov	r17,r6
 c009b48:	2825883a 	mov	r18,r5
 c009b4c:	dc002417 	ldw	r16,144(sp)
 c009b50:	3027883a 	mov	r19,r6
 c009b54:	10000826 	beq	r2,zero,c009b78 <_dtoa_r+0x6c>
 c009b58:	21801117 	ldw	r6,68(r4)
 c009b5c:	00c00044 	movi	r3,1
 c009b60:	100b883a 	mov	r5,r2
 c009b64:	1986983a 	sll	r3,r3,r6
 c009b68:	11800115 	stw	r6,4(r2)
 c009b6c:	10c00215 	stw	r3,8(r2)
 c009b70:	c00d26c0 	call	c00d26c <_Bfree>
 c009b74:	e0001015 	stw	zero,64(fp)
 c009b78:	88002e16 	blt	r17,zero,c009c34 <_dtoa_r+0x128>
 c009b7c:	80000015 	stw	zero,0(r16)
 c009b80:	889ffc2c 	andhi	r2,r17,32752
 c009b84:	00dffc34 	movhi	r3,32752
 c009b88:	10c01c26 	beq	r2,r3,c009bfc <_dtoa_r+0xf0>
 c009b8c:	000d883a 	mov	r6,zero
 c009b90:	000f883a 	mov	r7,zero
 c009b94:	9009883a 	mov	r4,r18
 c009b98:	980b883a 	mov	r5,r19
 c009b9c:	c013fbc0 	call	c013fbc <__eqdf2>
 c009ba0:	10002b1e 	bne	r2,zero,c009c50 <_dtoa_r+0x144>
 c009ba4:	d9c02317 	ldw	r7,140(sp)
 c009ba8:	00800044 	movi	r2,1
 c009bac:	38800015 	stw	r2,0(r7)
 c009bb0:	d8802517 	ldw	r2,148(sp)
 c009bb4:	10019e26 	beq	r2,zero,c00a230 <_dtoa_r+0x724>
 c009bb8:	d8c02517 	ldw	r3,148(sp)
 c009bbc:	008300b4 	movhi	r2,3074
 c009bc0:	10a1ef44 	addi	r2,r2,-30787
 c009bc4:	18800015 	stw	r2,0(r3)
 c009bc8:	10bfffc4 	addi	r2,r2,-1
 c009bcc:	dfc02117 	ldw	ra,132(sp)
 c009bd0:	df002017 	ldw	fp,128(sp)
 c009bd4:	ddc01f17 	ldw	r23,124(sp)
 c009bd8:	dd801e17 	ldw	r22,120(sp)
 c009bdc:	dd401d17 	ldw	r21,116(sp)
 c009be0:	dd001c17 	ldw	r20,112(sp)
 c009be4:	dcc01b17 	ldw	r19,108(sp)
 c009be8:	dc801a17 	ldw	r18,104(sp)
 c009bec:	dc401917 	ldw	r17,100(sp)
 c009bf0:	dc001817 	ldw	r16,96(sp)
 c009bf4:	dec02204 	addi	sp,sp,136
 c009bf8:	f800283a 	ret
 c009bfc:	d8c02317 	ldw	r3,140(sp)
 c009c00:	0089c3c4 	movi	r2,9999
 c009c04:	18800015 	stw	r2,0(r3)
 c009c08:	90017726 	beq	r18,zero,c00a1e8 <_dtoa_r+0x6dc>
 c009c0c:	008300b4 	movhi	r2,3074
 c009c10:	10a20304 	addi	r2,r2,-30708
 c009c14:	d9002517 	ldw	r4,148(sp)
 c009c18:	203fec26 	beq	r4,zero,c009bcc <__alt_data_end+0xfc009bcc>
 c009c1c:	10c000c7 	ldb	r3,3(r2)
 c009c20:	1801781e 	bne	r3,zero,c00a204 <_dtoa_r+0x6f8>
 c009c24:	10c000c4 	addi	r3,r2,3
 c009c28:	d9802517 	ldw	r6,148(sp)
 c009c2c:	30c00015 	stw	r3,0(r6)
 c009c30:	003fe606 	br	c009bcc <__alt_data_end+0xfc009bcc>
 c009c34:	04e00034 	movhi	r19,32768
 c009c38:	9cffffc4 	addi	r19,r19,-1
 c009c3c:	00800044 	movi	r2,1
 c009c40:	8ce6703a 	and	r19,r17,r19
 c009c44:	80800015 	stw	r2,0(r16)
 c009c48:	9823883a 	mov	r17,r19
 c009c4c:	003fcc06 	br	c009b80 <__alt_data_end+0xfc009b80>
 c009c50:	d8800204 	addi	r2,sp,8
 c009c54:	d8800015 	stw	r2,0(sp)
 c009c58:	d9c00104 	addi	r7,sp,4
 c009c5c:	900b883a 	mov	r5,r18
 c009c60:	980d883a 	mov	r6,r19
 c009c64:	e009883a 	mov	r4,fp
 c009c68:	8820d53a 	srli	r16,r17,20
 c009c6c:	c00df140 	call	c00df14 <__d2b>
 c009c70:	d8800915 	stw	r2,36(sp)
 c009c74:	8001651e 	bne	r16,zero,c00a20c <_dtoa_r+0x700>
 c009c78:	dd800217 	ldw	r22,8(sp)
 c009c7c:	dc000117 	ldw	r16,4(sp)
 c009c80:	00800804 	movi	r2,32
 c009c84:	b421883a 	add	r16,r22,r16
 c009c88:	80c10c84 	addi	r3,r16,1074
 c009c8c:	10c2d10e 	bge	r2,r3,c00a7d4 <_dtoa_r+0xcc8>
 c009c90:	00801004 	movi	r2,64
 c009c94:	81010484 	addi	r4,r16,1042
 c009c98:	10c7c83a 	sub	r3,r2,r3
 c009c9c:	9108d83a 	srl	r4,r18,r4
 c009ca0:	88e2983a 	sll	r17,r17,r3
 c009ca4:	2448b03a 	or	r4,r4,r17
 c009ca8:	c0154d80 	call	c0154d8 <__floatunsidf>
 c009cac:	017f8434 	movhi	r5,65040
 c009cb0:	01800044 	movi	r6,1
 c009cb4:	1009883a 	mov	r4,r2
 c009cb8:	194b883a 	add	r5,r3,r5
 c009cbc:	843fffc4 	addi	r16,r16,-1
 c009cc0:	d9801115 	stw	r6,68(sp)
 c009cc4:	000d883a 	mov	r6,zero
 c009cc8:	01cffe34 	movhi	r7,16376
 c009ccc:	c014a800 	call	c014a80 <__subdf3>
 c009cd0:	0198dbf4 	movhi	r6,25455
 c009cd4:	01cff4f4 	movhi	r7,16339
 c009cd8:	3190d844 	addi	r6,r6,17249
 c009cdc:	39e1e9c4 	addi	r7,r7,-30809
 c009ce0:	1009883a 	mov	r4,r2
 c009ce4:	180b883a 	mov	r5,r3
 c009ce8:	c0142140 	call	c014214 <__muldf3>
 c009cec:	01a2d874 	movhi	r6,35681
 c009cf0:	01cff1f4 	movhi	r7,16327
 c009cf4:	31b22cc4 	addi	r6,r6,-14157
 c009cf8:	39e28a04 	addi	r7,r7,-30168
 c009cfc:	180b883a 	mov	r5,r3
 c009d00:	1009883a 	mov	r4,r2
 c009d04:	c012d400 	call	c012d40 <__adddf3>
 c009d08:	8009883a 	mov	r4,r16
 c009d0c:	1029883a 	mov	r20,r2
 c009d10:	1823883a 	mov	r17,r3
 c009d14:	c0153fc0 	call	c0153fc <__floatsidf>
 c009d18:	019427f4 	movhi	r6,20639
 c009d1c:	01cff4f4 	movhi	r7,16339
 c009d20:	319e7ec4 	addi	r6,r6,31227
 c009d24:	39d104c4 	addi	r7,r7,17427
 c009d28:	1009883a 	mov	r4,r2
 c009d2c:	180b883a 	mov	r5,r3
 c009d30:	c0142140 	call	c014214 <__muldf3>
 c009d34:	100d883a 	mov	r6,r2
 c009d38:	180f883a 	mov	r7,r3
 c009d3c:	a009883a 	mov	r4,r20
 c009d40:	880b883a 	mov	r5,r17
 c009d44:	c012d400 	call	c012d40 <__adddf3>
 c009d48:	1009883a 	mov	r4,r2
 c009d4c:	180b883a 	mov	r5,r3
 c009d50:	1029883a 	mov	r20,r2
 c009d54:	1823883a 	mov	r17,r3
 c009d58:	c01537c0 	call	c01537c <__fixdfsi>
 c009d5c:	000d883a 	mov	r6,zero
 c009d60:	000f883a 	mov	r7,zero
 c009d64:	a009883a 	mov	r4,r20
 c009d68:	880b883a 	mov	r5,r17
 c009d6c:	d8800515 	stw	r2,20(sp)
 c009d70:	c0141200 	call	c014120 <__ledf2>
 c009d74:	10028716 	blt	r2,zero,c00a794 <_dtoa_r+0xc88>
 c009d78:	d8c00517 	ldw	r3,20(sp)
 c009d7c:	00800584 	movi	r2,22
 c009d80:	10c27536 	bltu	r2,r3,c00a758 <_dtoa_r+0xc4c>
 c009d84:	180490fa 	slli	r2,r3,3
 c009d88:	00c300b4 	movhi	r3,3074
 c009d8c:	18e21f04 	addi	r3,r3,-30596
 c009d90:	1885883a 	add	r2,r3,r2
 c009d94:	11000017 	ldw	r4,0(r2)
 c009d98:	11400117 	ldw	r5,4(r2)
 c009d9c:	900d883a 	mov	r6,r18
 c009da0:	980f883a 	mov	r7,r19
 c009da4:	c0140440 	call	c014044 <__gedf2>
 c009da8:	00828d0e 	bge	zero,r2,c00a7e0 <_dtoa_r+0xcd4>
 c009dac:	d9000517 	ldw	r4,20(sp)
 c009db0:	d8000e15 	stw	zero,56(sp)
 c009db4:	213fffc4 	addi	r4,r4,-1
 c009db8:	d9000515 	stw	r4,20(sp)
 c009dbc:	b42dc83a 	sub	r22,r22,r16
 c009dc0:	b5bfffc4 	addi	r22,r22,-1
 c009dc4:	b0026f16 	blt	r22,zero,c00a784 <_dtoa_r+0xc78>
 c009dc8:	d8000815 	stw	zero,32(sp)
 c009dcc:	d9c00517 	ldw	r7,20(sp)
 c009dd0:	38026416 	blt	r7,zero,c00a764 <_dtoa_r+0xc58>
 c009dd4:	b1ed883a 	add	r22,r22,r7
 c009dd8:	d9c00d15 	stw	r7,52(sp)
 c009ddc:	d8000a15 	stw	zero,40(sp)
 c009de0:	d9800317 	ldw	r6,12(sp)
 c009de4:	00800244 	movi	r2,9
 c009de8:	11811436 	bltu	r2,r6,c00a23c <_dtoa_r+0x730>
 c009dec:	00800144 	movi	r2,5
 c009df0:	1184e10e 	bge	r2,r6,c00b178 <_dtoa_r+0x166c>
 c009df4:	31bfff04 	addi	r6,r6,-4
 c009df8:	d9800315 	stw	r6,12(sp)
 c009dfc:	0023883a 	mov	r17,zero
 c009e00:	d9800317 	ldw	r6,12(sp)
 c009e04:	008000c4 	movi	r2,3
 c009e08:	30836726 	beq	r6,r2,c00aba8 <_dtoa_r+0x109c>
 c009e0c:	1183410e 	bge	r2,r6,c00ab14 <_dtoa_r+0x1008>
 c009e10:	d9c00317 	ldw	r7,12(sp)
 c009e14:	00800104 	movi	r2,4
 c009e18:	38827c26 	beq	r7,r2,c00a80c <_dtoa_r+0xd00>
 c009e1c:	00800144 	movi	r2,5
 c009e20:	3884c41e 	bne	r7,r2,c00b134 <_dtoa_r+0x1628>
 c009e24:	00800044 	movi	r2,1
 c009e28:	d8800b15 	stw	r2,44(sp)
 c009e2c:	d8c00517 	ldw	r3,20(sp)
 c009e30:	d9002217 	ldw	r4,136(sp)
 c009e34:	1907883a 	add	r3,r3,r4
 c009e38:	19800044 	addi	r6,r3,1
 c009e3c:	d8c00c15 	stw	r3,48(sp)
 c009e40:	d9800615 	stw	r6,24(sp)
 c009e44:	0183a40e 	bge	zero,r6,c00acd8 <_dtoa_r+0x11cc>
 c009e48:	d9800617 	ldw	r6,24(sp)
 c009e4c:	3021883a 	mov	r16,r6
 c009e50:	e0001115 	stw	zero,68(fp)
 c009e54:	008005c4 	movi	r2,23
 c009e58:	1184c92e 	bgeu	r2,r6,c00b180 <_dtoa_r+0x1674>
 c009e5c:	00c00044 	movi	r3,1
 c009e60:	00800104 	movi	r2,4
 c009e64:	1085883a 	add	r2,r2,r2
 c009e68:	11000504 	addi	r4,r2,20
 c009e6c:	180b883a 	mov	r5,r3
 c009e70:	18c00044 	addi	r3,r3,1
 c009e74:	313ffb2e 	bgeu	r6,r4,c009e64 <__alt_data_end+0xfc009e64>
 c009e78:	e1401115 	stw	r5,68(fp)
 c009e7c:	e009883a 	mov	r4,fp
 c009e80:	c00d1c40 	call	c00d1c4 <_Balloc>
 c009e84:	d8800715 	stw	r2,28(sp)
 c009e88:	e0801015 	stw	r2,64(fp)
 c009e8c:	00800384 	movi	r2,14
 c009e90:	1400f736 	bltu	r2,r16,c00a270 <_dtoa_r+0x764>
 c009e94:	8800f626 	beq	r17,zero,c00a270 <_dtoa_r+0x764>
 c009e98:	d9c00517 	ldw	r7,20(sp)
 c009e9c:	01c39a0e 	bge	zero,r7,c00ad08 <_dtoa_r+0x11fc>
 c009ea0:	388003cc 	andi	r2,r7,15
 c009ea4:	100490fa 	slli	r2,r2,3
 c009ea8:	382bd13a 	srai	r21,r7,4
 c009eac:	00c300b4 	movhi	r3,3074
 c009eb0:	18e21f04 	addi	r3,r3,-30596
 c009eb4:	1885883a 	add	r2,r3,r2
 c009eb8:	a8c0040c 	andi	r3,r21,16
 c009ebc:	12400017 	ldw	r9,0(r2)
 c009ec0:	12000117 	ldw	r8,4(r2)
 c009ec4:	18037926 	beq	r3,zero,c00acac <_dtoa_r+0x11a0>
 c009ec8:	008300b4 	movhi	r2,3074
 c009ecc:	10a21504 	addi	r2,r2,-30636
 c009ed0:	11800817 	ldw	r6,32(r2)
 c009ed4:	11c00917 	ldw	r7,36(r2)
 c009ed8:	9009883a 	mov	r4,r18
 c009edc:	980b883a 	mov	r5,r19
 c009ee0:	da001715 	stw	r8,92(sp)
 c009ee4:	da401615 	stw	r9,88(sp)
 c009ee8:	c0135ec0 	call	c0135ec <__divdf3>
 c009eec:	da001717 	ldw	r8,92(sp)
 c009ef0:	da401617 	ldw	r9,88(sp)
 c009ef4:	ad4003cc 	andi	r21,r21,15
 c009ef8:	040000c4 	movi	r16,3
 c009efc:	1023883a 	mov	r17,r2
 c009f00:	1829883a 	mov	r20,r3
 c009f04:	a8001126 	beq	r21,zero,c009f4c <_dtoa_r+0x440>
 c009f08:	05c300b4 	movhi	r23,3074
 c009f0c:	bde21504 	addi	r23,r23,-30636
 c009f10:	4805883a 	mov	r2,r9
 c009f14:	4007883a 	mov	r3,r8
 c009f18:	a980004c 	andi	r6,r21,1
 c009f1c:	1009883a 	mov	r4,r2
 c009f20:	a82bd07a 	srai	r21,r21,1
 c009f24:	180b883a 	mov	r5,r3
 c009f28:	30000426 	beq	r6,zero,c009f3c <_dtoa_r+0x430>
 c009f2c:	b9800017 	ldw	r6,0(r23)
 c009f30:	b9c00117 	ldw	r7,4(r23)
 c009f34:	84000044 	addi	r16,r16,1
 c009f38:	c0142140 	call	c014214 <__muldf3>
 c009f3c:	bdc00204 	addi	r23,r23,8
 c009f40:	a83ff51e 	bne	r21,zero,c009f18 <__alt_data_end+0xfc009f18>
 c009f44:	1013883a 	mov	r9,r2
 c009f48:	1811883a 	mov	r8,r3
 c009f4c:	480d883a 	mov	r6,r9
 c009f50:	400f883a 	mov	r7,r8
 c009f54:	8809883a 	mov	r4,r17
 c009f58:	a00b883a 	mov	r5,r20
 c009f5c:	c0135ec0 	call	c0135ec <__divdf3>
 c009f60:	d8800f15 	stw	r2,60(sp)
 c009f64:	d8c01015 	stw	r3,64(sp)
 c009f68:	d8c00e17 	ldw	r3,56(sp)
 c009f6c:	18000626 	beq	r3,zero,c009f88 <_dtoa_r+0x47c>
 c009f70:	d9000f17 	ldw	r4,60(sp)
 c009f74:	d9401017 	ldw	r5,64(sp)
 c009f78:	000d883a 	mov	r6,zero
 c009f7c:	01cffc34 	movhi	r7,16368
 c009f80:	c0141200 	call	c014120 <__ledf2>
 c009f84:	10040b16 	blt	r2,zero,c00afb4 <_dtoa_r+0x14a8>
 c009f88:	8009883a 	mov	r4,r16
 c009f8c:	c0153fc0 	call	c0153fc <__floatsidf>
 c009f90:	d9800f17 	ldw	r6,60(sp)
 c009f94:	d9c01017 	ldw	r7,64(sp)
 c009f98:	1009883a 	mov	r4,r2
 c009f9c:	180b883a 	mov	r5,r3
 c009fa0:	c0142140 	call	c014214 <__muldf3>
 c009fa4:	000d883a 	mov	r6,zero
 c009fa8:	01d00734 	movhi	r7,16412
 c009fac:	1009883a 	mov	r4,r2
 c009fb0:	180b883a 	mov	r5,r3
 c009fb4:	c012d400 	call	c012d40 <__adddf3>
 c009fb8:	1021883a 	mov	r16,r2
 c009fbc:	d8800617 	ldw	r2,24(sp)
 c009fc0:	047f3034 	movhi	r17,64704
 c009fc4:	1c63883a 	add	r17,r3,r17
 c009fc8:	10031826 	beq	r2,zero,c00ac2c <_dtoa_r+0x1120>
 c009fcc:	d8c00517 	ldw	r3,20(sp)
 c009fd0:	db000617 	ldw	r12,24(sp)
 c009fd4:	d8c01315 	stw	r3,76(sp)
 c009fd8:	d9000b17 	ldw	r4,44(sp)
 c009fdc:	20038f26 	beq	r4,zero,c00ae1c <_dtoa_r+0x1310>
 c009fe0:	60bfffc4 	addi	r2,r12,-1
 c009fe4:	100490fa 	slli	r2,r2,3
 c009fe8:	00c300b4 	movhi	r3,3074
 c009fec:	18e21f04 	addi	r3,r3,-30596
 c009ff0:	1885883a 	add	r2,r3,r2
 c009ff4:	11800017 	ldw	r6,0(r2)
 c009ff8:	11c00117 	ldw	r7,4(r2)
 c009ffc:	d8800717 	ldw	r2,28(sp)
 c00a000:	0009883a 	mov	r4,zero
 c00a004:	014ff834 	movhi	r5,16352
 c00a008:	db001615 	stw	r12,88(sp)
 c00a00c:	15c00044 	addi	r23,r2,1
 c00a010:	c0135ec0 	call	c0135ec <__divdf3>
 c00a014:	800d883a 	mov	r6,r16
 c00a018:	880f883a 	mov	r7,r17
 c00a01c:	1009883a 	mov	r4,r2
 c00a020:	180b883a 	mov	r5,r3
 c00a024:	c014a800 	call	c014a80 <__subdf3>
 c00a028:	d9401017 	ldw	r5,64(sp)
 c00a02c:	d9000f17 	ldw	r4,60(sp)
 c00a030:	102b883a 	mov	r21,r2
 c00a034:	d8c01215 	stw	r3,72(sp)
 c00a038:	c01537c0 	call	c01537c <__fixdfsi>
 c00a03c:	1009883a 	mov	r4,r2
 c00a040:	1029883a 	mov	r20,r2
 c00a044:	c0153fc0 	call	c0153fc <__floatsidf>
 c00a048:	d9000f17 	ldw	r4,60(sp)
 c00a04c:	d9401017 	ldw	r5,64(sp)
 c00a050:	100d883a 	mov	r6,r2
 c00a054:	180f883a 	mov	r7,r3
 c00a058:	c014a800 	call	c014a80 <__subdf3>
 c00a05c:	1823883a 	mov	r17,r3
 c00a060:	d8c00717 	ldw	r3,28(sp)
 c00a064:	d9401217 	ldw	r5,72(sp)
 c00a068:	a2000c04 	addi	r8,r20,48
 c00a06c:	1021883a 	mov	r16,r2
 c00a070:	1a000005 	stb	r8,0(r3)
 c00a074:	800d883a 	mov	r6,r16
 c00a078:	880f883a 	mov	r7,r17
 c00a07c:	a809883a 	mov	r4,r21
 c00a080:	4029883a 	mov	r20,r8
 c00a084:	c0140440 	call	c014044 <__gedf2>
 c00a088:	00841d16 	blt	zero,r2,c00b100 <_dtoa_r+0x15f4>
 c00a08c:	800d883a 	mov	r6,r16
 c00a090:	880f883a 	mov	r7,r17
 c00a094:	0009883a 	mov	r4,zero
 c00a098:	014ffc34 	movhi	r5,16368
 c00a09c:	c014a800 	call	c014a80 <__subdf3>
 c00a0a0:	d9401217 	ldw	r5,72(sp)
 c00a0a4:	100d883a 	mov	r6,r2
 c00a0a8:	180f883a 	mov	r7,r3
 c00a0ac:	a809883a 	mov	r4,r21
 c00a0b0:	c0140440 	call	c014044 <__gedf2>
 c00a0b4:	db001617 	ldw	r12,88(sp)
 c00a0b8:	00840e16 	blt	zero,r2,c00b0f4 <_dtoa_r+0x15e8>
 c00a0bc:	00800044 	movi	r2,1
 c00a0c0:	13006b0e 	bge	r2,r12,c00a270 <_dtoa_r+0x764>
 c00a0c4:	d9000717 	ldw	r4,28(sp)
 c00a0c8:	dd800f15 	stw	r22,60(sp)
 c00a0cc:	dcc01015 	stw	r19,64(sp)
 c00a0d0:	2319883a 	add	r12,r4,r12
 c00a0d4:	dcc01217 	ldw	r19,72(sp)
 c00a0d8:	602d883a 	mov	r22,r12
 c00a0dc:	dc801215 	stw	r18,72(sp)
 c00a0e0:	b825883a 	mov	r18,r23
 c00a0e4:	00000906 	br	c00a10c <_dtoa_r+0x600>
 c00a0e8:	c014a800 	call	c014a80 <__subdf3>
 c00a0ec:	a80d883a 	mov	r6,r21
 c00a0f0:	980f883a 	mov	r7,r19
 c00a0f4:	1009883a 	mov	r4,r2
 c00a0f8:	180b883a 	mov	r5,r3
 c00a0fc:	c0141200 	call	c014120 <__ledf2>
 c00a100:	1003e816 	blt	r2,zero,c00b0a4 <_dtoa_r+0x1598>
 c00a104:	b825883a 	mov	r18,r23
 c00a108:	bd83e926 	beq	r23,r22,c00b0b0 <_dtoa_r+0x15a4>
 c00a10c:	a809883a 	mov	r4,r21
 c00a110:	980b883a 	mov	r5,r19
 c00a114:	000d883a 	mov	r6,zero
 c00a118:	01d00934 	movhi	r7,16420
 c00a11c:	c0142140 	call	c014214 <__muldf3>
 c00a120:	000d883a 	mov	r6,zero
 c00a124:	01d00934 	movhi	r7,16420
 c00a128:	8009883a 	mov	r4,r16
 c00a12c:	880b883a 	mov	r5,r17
 c00a130:	102b883a 	mov	r21,r2
 c00a134:	1827883a 	mov	r19,r3
 c00a138:	c0142140 	call	c014214 <__muldf3>
 c00a13c:	180b883a 	mov	r5,r3
 c00a140:	1009883a 	mov	r4,r2
 c00a144:	1821883a 	mov	r16,r3
 c00a148:	1023883a 	mov	r17,r2
 c00a14c:	c01537c0 	call	c01537c <__fixdfsi>
 c00a150:	1009883a 	mov	r4,r2
 c00a154:	1029883a 	mov	r20,r2
 c00a158:	c0153fc0 	call	c0153fc <__floatsidf>
 c00a15c:	8809883a 	mov	r4,r17
 c00a160:	800b883a 	mov	r5,r16
 c00a164:	100d883a 	mov	r6,r2
 c00a168:	180f883a 	mov	r7,r3
 c00a16c:	c014a800 	call	c014a80 <__subdf3>
 c00a170:	a5000c04 	addi	r20,r20,48
 c00a174:	a80d883a 	mov	r6,r21
 c00a178:	980f883a 	mov	r7,r19
 c00a17c:	1009883a 	mov	r4,r2
 c00a180:	180b883a 	mov	r5,r3
 c00a184:	95000005 	stb	r20,0(r18)
 c00a188:	1021883a 	mov	r16,r2
 c00a18c:	1823883a 	mov	r17,r3
 c00a190:	c0141200 	call	c014120 <__ledf2>
 c00a194:	bdc00044 	addi	r23,r23,1
 c00a198:	800d883a 	mov	r6,r16
 c00a19c:	880f883a 	mov	r7,r17
 c00a1a0:	0009883a 	mov	r4,zero
 c00a1a4:	014ffc34 	movhi	r5,16368
 c00a1a8:	103fcf0e 	bge	r2,zero,c00a0e8 <__alt_data_end+0xfc00a0e8>
 c00a1ac:	d8c01317 	ldw	r3,76(sp)
 c00a1b0:	d8c00515 	stw	r3,20(sp)
 c00a1b4:	d9400917 	ldw	r5,36(sp)
 c00a1b8:	e009883a 	mov	r4,fp
 c00a1bc:	c00d26c0 	call	c00d26c <_Bfree>
 c00a1c0:	d9000517 	ldw	r4,20(sp)
 c00a1c4:	d9802317 	ldw	r6,140(sp)
 c00a1c8:	d9c02517 	ldw	r7,148(sp)
 c00a1cc:	b8000005 	stb	zero,0(r23)
 c00a1d0:	20800044 	addi	r2,r4,1
 c00a1d4:	30800015 	stw	r2,0(r6)
 c00a1d8:	3802aa26 	beq	r7,zero,c00ac84 <_dtoa_r+0x1178>
 c00a1dc:	3dc00015 	stw	r23,0(r7)
 c00a1e0:	d8800717 	ldw	r2,28(sp)
 c00a1e4:	003e7906 	br	c009bcc <__alt_data_end+0xfc009bcc>
 c00a1e8:	00800434 	movhi	r2,16
 c00a1ec:	10bfffc4 	addi	r2,r2,-1
 c00a1f0:	88a2703a 	and	r17,r17,r2
 c00a1f4:	883e851e 	bne	r17,zero,c009c0c <__alt_data_end+0xfc009c0c>
 c00a1f8:	008300b4 	movhi	r2,3074
 c00a1fc:	10a20004 	addi	r2,r2,-30720
 c00a200:	003e8406 	br	c009c14 <__alt_data_end+0xfc009c14>
 c00a204:	10c00204 	addi	r3,r2,8
 c00a208:	003e8706 	br	c009c28 <__alt_data_end+0xfc009c28>
 c00a20c:	01400434 	movhi	r5,16
 c00a210:	297fffc4 	addi	r5,r5,-1
 c00a214:	994a703a 	and	r5,r19,r5
 c00a218:	9009883a 	mov	r4,r18
 c00a21c:	843f0044 	addi	r16,r16,-1023
 c00a220:	294ffc34 	orhi	r5,r5,16368
 c00a224:	dd800217 	ldw	r22,8(sp)
 c00a228:	d8001115 	stw	zero,68(sp)
 c00a22c:	003ea506 	br	c009cc4 <__alt_data_end+0xfc009cc4>
 c00a230:	008300b4 	movhi	r2,3074
 c00a234:	10a1ef04 	addi	r2,r2,-30788
 c00a238:	003e6406 	br	c009bcc <__alt_data_end+0xfc009bcc>
 c00a23c:	e0001115 	stw	zero,68(fp)
 c00a240:	000b883a 	mov	r5,zero
 c00a244:	e009883a 	mov	r4,fp
 c00a248:	c00d1c40 	call	c00d1c4 <_Balloc>
 c00a24c:	01bfffc4 	movi	r6,-1
 c00a250:	01c00044 	movi	r7,1
 c00a254:	d8800715 	stw	r2,28(sp)
 c00a258:	d9800c15 	stw	r6,48(sp)
 c00a25c:	e0801015 	stw	r2,64(fp)
 c00a260:	d8000315 	stw	zero,12(sp)
 c00a264:	d9c00b15 	stw	r7,44(sp)
 c00a268:	d9800615 	stw	r6,24(sp)
 c00a26c:	d8002215 	stw	zero,136(sp)
 c00a270:	d8800117 	ldw	r2,4(sp)
 c00a274:	10008916 	blt	r2,zero,c00a49c <_dtoa_r+0x990>
 c00a278:	d9000517 	ldw	r4,20(sp)
 c00a27c:	00c00384 	movi	r3,14
 c00a280:	19008616 	blt	r3,r4,c00a49c <_dtoa_r+0x990>
 c00a284:	200490fa 	slli	r2,r4,3
 c00a288:	00c300b4 	movhi	r3,3074
 c00a28c:	d9802217 	ldw	r6,136(sp)
 c00a290:	18e21f04 	addi	r3,r3,-30596
 c00a294:	1885883a 	add	r2,r3,r2
 c00a298:	14000017 	ldw	r16,0(r2)
 c00a29c:	14400117 	ldw	r17,4(r2)
 c00a2a0:	30016316 	blt	r6,zero,c00a830 <_dtoa_r+0xd24>
 c00a2a4:	800d883a 	mov	r6,r16
 c00a2a8:	880f883a 	mov	r7,r17
 c00a2ac:	9009883a 	mov	r4,r18
 c00a2b0:	980b883a 	mov	r5,r19
 c00a2b4:	c0135ec0 	call	c0135ec <__divdf3>
 c00a2b8:	180b883a 	mov	r5,r3
 c00a2bc:	1009883a 	mov	r4,r2
 c00a2c0:	c01537c0 	call	c01537c <__fixdfsi>
 c00a2c4:	1009883a 	mov	r4,r2
 c00a2c8:	102b883a 	mov	r21,r2
 c00a2cc:	c0153fc0 	call	c0153fc <__floatsidf>
 c00a2d0:	800d883a 	mov	r6,r16
 c00a2d4:	880f883a 	mov	r7,r17
 c00a2d8:	1009883a 	mov	r4,r2
 c00a2dc:	180b883a 	mov	r5,r3
 c00a2e0:	c0142140 	call	c014214 <__muldf3>
 c00a2e4:	100d883a 	mov	r6,r2
 c00a2e8:	180f883a 	mov	r7,r3
 c00a2ec:	9009883a 	mov	r4,r18
 c00a2f0:	980b883a 	mov	r5,r19
 c00a2f4:	c014a800 	call	c014a80 <__subdf3>
 c00a2f8:	d9c00717 	ldw	r7,28(sp)
 c00a2fc:	1009883a 	mov	r4,r2
 c00a300:	a8800c04 	addi	r2,r21,48
 c00a304:	38800005 	stb	r2,0(r7)
 c00a308:	3dc00044 	addi	r23,r7,1
 c00a30c:	d9c00617 	ldw	r7,24(sp)
 c00a310:	01800044 	movi	r6,1
 c00a314:	180b883a 	mov	r5,r3
 c00a318:	2005883a 	mov	r2,r4
 c00a31c:	39803826 	beq	r7,r6,c00a400 <_dtoa_r+0x8f4>
 c00a320:	000d883a 	mov	r6,zero
 c00a324:	01d00934 	movhi	r7,16420
 c00a328:	c0142140 	call	c014214 <__muldf3>
 c00a32c:	000d883a 	mov	r6,zero
 c00a330:	000f883a 	mov	r7,zero
 c00a334:	1009883a 	mov	r4,r2
 c00a338:	180b883a 	mov	r5,r3
 c00a33c:	1025883a 	mov	r18,r2
 c00a340:	1827883a 	mov	r19,r3
 c00a344:	c013fbc0 	call	c013fbc <__eqdf2>
 c00a348:	103f9a26 	beq	r2,zero,c00a1b4 <__alt_data_end+0xfc00a1b4>
 c00a34c:	d9c00617 	ldw	r7,24(sp)
 c00a350:	d8c00717 	ldw	r3,28(sp)
 c00a354:	b829883a 	mov	r20,r23
 c00a358:	38bfffc4 	addi	r2,r7,-1
 c00a35c:	18ad883a 	add	r22,r3,r2
 c00a360:	00000a06 	br	c00a38c <_dtoa_r+0x880>
 c00a364:	c0142140 	call	c014214 <__muldf3>
 c00a368:	000d883a 	mov	r6,zero
 c00a36c:	000f883a 	mov	r7,zero
 c00a370:	1009883a 	mov	r4,r2
 c00a374:	180b883a 	mov	r5,r3
 c00a378:	1025883a 	mov	r18,r2
 c00a37c:	1827883a 	mov	r19,r3
 c00a380:	b829883a 	mov	r20,r23
 c00a384:	c013fbc0 	call	c013fbc <__eqdf2>
 c00a388:	103f8a26 	beq	r2,zero,c00a1b4 <__alt_data_end+0xfc00a1b4>
 c00a38c:	800d883a 	mov	r6,r16
 c00a390:	880f883a 	mov	r7,r17
 c00a394:	9009883a 	mov	r4,r18
 c00a398:	980b883a 	mov	r5,r19
 c00a39c:	c0135ec0 	call	c0135ec <__divdf3>
 c00a3a0:	180b883a 	mov	r5,r3
 c00a3a4:	1009883a 	mov	r4,r2
 c00a3a8:	c01537c0 	call	c01537c <__fixdfsi>
 c00a3ac:	1009883a 	mov	r4,r2
 c00a3b0:	102b883a 	mov	r21,r2
 c00a3b4:	c0153fc0 	call	c0153fc <__floatsidf>
 c00a3b8:	800d883a 	mov	r6,r16
 c00a3bc:	880f883a 	mov	r7,r17
 c00a3c0:	1009883a 	mov	r4,r2
 c00a3c4:	180b883a 	mov	r5,r3
 c00a3c8:	c0142140 	call	c014214 <__muldf3>
 c00a3cc:	100d883a 	mov	r6,r2
 c00a3d0:	180f883a 	mov	r7,r3
 c00a3d4:	9009883a 	mov	r4,r18
 c00a3d8:	980b883a 	mov	r5,r19
 c00a3dc:	c014a800 	call	c014a80 <__subdf3>
 c00a3e0:	aa000c04 	addi	r8,r21,48
 c00a3e4:	a2000005 	stb	r8,0(r20)
 c00a3e8:	000d883a 	mov	r6,zero
 c00a3ec:	01d00934 	movhi	r7,16420
 c00a3f0:	1009883a 	mov	r4,r2
 c00a3f4:	180b883a 	mov	r5,r3
 c00a3f8:	a5c00044 	addi	r23,r20,1
 c00a3fc:	b53fd91e 	bne	r22,r20,c00a364 <__alt_data_end+0xfc00a364>
 c00a400:	100d883a 	mov	r6,r2
 c00a404:	180f883a 	mov	r7,r3
 c00a408:	1009883a 	mov	r4,r2
 c00a40c:	180b883a 	mov	r5,r3
 c00a410:	c012d400 	call	c012d40 <__adddf3>
 c00a414:	100d883a 	mov	r6,r2
 c00a418:	180f883a 	mov	r7,r3
 c00a41c:	8009883a 	mov	r4,r16
 c00a420:	880b883a 	mov	r5,r17
 c00a424:	1027883a 	mov	r19,r2
 c00a428:	1825883a 	mov	r18,r3
 c00a42c:	c0141200 	call	c014120 <__ledf2>
 c00a430:	10000816 	blt	r2,zero,c00a454 <_dtoa_r+0x948>
 c00a434:	980d883a 	mov	r6,r19
 c00a438:	900f883a 	mov	r7,r18
 c00a43c:	8009883a 	mov	r4,r16
 c00a440:	880b883a 	mov	r5,r17
 c00a444:	c013fbc0 	call	c013fbc <__eqdf2>
 c00a448:	103f5a1e 	bne	r2,zero,c00a1b4 <__alt_data_end+0xfc00a1b4>
 c00a44c:	ad40004c 	andi	r21,r21,1
 c00a450:	a83f5826 	beq	r21,zero,c00a1b4 <__alt_data_end+0xfc00a1b4>
 c00a454:	bd3fffc3 	ldbu	r20,-1(r23)
 c00a458:	b8bfffc4 	addi	r2,r23,-1
 c00a45c:	1007883a 	mov	r3,r2
 c00a460:	01400e44 	movi	r5,57
 c00a464:	d9800717 	ldw	r6,28(sp)
 c00a468:	00000506 	br	c00a480 <_dtoa_r+0x974>
 c00a46c:	18ffffc4 	addi	r3,r3,-1
 c00a470:	11824726 	beq	r2,r6,c00ad90 <_dtoa_r+0x1284>
 c00a474:	1d000003 	ldbu	r20,0(r3)
 c00a478:	102f883a 	mov	r23,r2
 c00a47c:	10bfffc4 	addi	r2,r2,-1
 c00a480:	a1003fcc 	andi	r4,r20,255
 c00a484:	2100201c 	xori	r4,r4,128
 c00a488:	213fe004 	addi	r4,r4,-128
 c00a48c:	217ff726 	beq	r4,r5,c00a46c <__alt_data_end+0xfc00a46c>
 c00a490:	a2000044 	addi	r8,r20,1
 c00a494:	12000005 	stb	r8,0(r2)
 c00a498:	003f4606 	br	c00a1b4 <__alt_data_end+0xfc00a1b4>
 c00a49c:	d9000b17 	ldw	r4,44(sp)
 c00a4a0:	2000c826 	beq	r4,zero,c00a7c4 <_dtoa_r+0xcb8>
 c00a4a4:	d9800317 	ldw	r6,12(sp)
 c00a4a8:	00c00044 	movi	r3,1
 c00a4ac:	1980f90e 	bge	r3,r6,c00a894 <_dtoa_r+0xd88>
 c00a4b0:	d8800617 	ldw	r2,24(sp)
 c00a4b4:	d8c00a17 	ldw	r3,40(sp)
 c00a4b8:	157fffc4 	addi	r21,r2,-1
 c00a4bc:	1d41f316 	blt	r3,r21,c00ac8c <_dtoa_r+0x1180>
 c00a4c0:	1d6bc83a 	sub	r21,r3,r21
 c00a4c4:	d9c00617 	ldw	r7,24(sp)
 c00a4c8:	3802aa16 	blt	r7,zero,c00af74 <_dtoa_r+0x1468>
 c00a4cc:	dd000817 	ldw	r20,32(sp)
 c00a4d0:	d8800617 	ldw	r2,24(sp)
 c00a4d4:	d8c00817 	ldw	r3,32(sp)
 c00a4d8:	01400044 	movi	r5,1
 c00a4dc:	e009883a 	mov	r4,fp
 c00a4e0:	1887883a 	add	r3,r3,r2
 c00a4e4:	d8c00815 	stw	r3,32(sp)
 c00a4e8:	b0ad883a 	add	r22,r22,r2
 c00a4ec:	c00d5f80 	call	c00d5f8 <__i2b>
 c00a4f0:	1023883a 	mov	r17,r2
 c00a4f4:	a0000826 	beq	r20,zero,c00a518 <_dtoa_r+0xa0c>
 c00a4f8:	0580070e 	bge	zero,r22,c00a518 <_dtoa_r+0xa0c>
 c00a4fc:	a005883a 	mov	r2,r20
 c00a500:	b500b916 	blt	r22,r20,c00a7e8 <_dtoa_r+0xcdc>
 c00a504:	d9000817 	ldw	r4,32(sp)
 c00a508:	a0a9c83a 	sub	r20,r20,r2
 c00a50c:	b0adc83a 	sub	r22,r22,r2
 c00a510:	2089c83a 	sub	r4,r4,r2
 c00a514:	d9000815 	stw	r4,32(sp)
 c00a518:	d9800a17 	ldw	r6,40(sp)
 c00a51c:	0181810e 	bge	zero,r6,c00ab24 <_dtoa_r+0x1018>
 c00a520:	d9c00b17 	ldw	r7,44(sp)
 c00a524:	3800b326 	beq	r7,zero,c00a7f4 <_dtoa_r+0xce8>
 c00a528:	a800b226 	beq	r21,zero,c00a7f4 <_dtoa_r+0xce8>
 c00a52c:	880b883a 	mov	r5,r17
 c00a530:	a80d883a 	mov	r6,r21
 c00a534:	e009883a 	mov	r4,fp
 c00a538:	c00d8c00 	call	c00d8c0 <__pow5mult>
 c00a53c:	d9800917 	ldw	r6,36(sp)
 c00a540:	100b883a 	mov	r5,r2
 c00a544:	e009883a 	mov	r4,fp
 c00a548:	1023883a 	mov	r17,r2
 c00a54c:	c00d6340 	call	c00d634 <__multiply>
 c00a550:	1021883a 	mov	r16,r2
 c00a554:	d8800a17 	ldw	r2,40(sp)
 c00a558:	d9400917 	ldw	r5,36(sp)
 c00a55c:	e009883a 	mov	r4,fp
 c00a560:	1545c83a 	sub	r2,r2,r21
 c00a564:	d8800a15 	stw	r2,40(sp)
 c00a568:	c00d26c0 	call	c00d26c <_Bfree>
 c00a56c:	d8c00a17 	ldw	r3,40(sp)
 c00a570:	18009f1e 	bne	r3,zero,c00a7f0 <_dtoa_r+0xce4>
 c00a574:	05c00044 	movi	r23,1
 c00a578:	e009883a 	mov	r4,fp
 c00a57c:	b80b883a 	mov	r5,r23
 c00a580:	c00d5f80 	call	c00d5f8 <__i2b>
 c00a584:	d9000d17 	ldw	r4,52(sp)
 c00a588:	102b883a 	mov	r21,r2
 c00a58c:	2000ce26 	beq	r4,zero,c00a8c8 <_dtoa_r+0xdbc>
 c00a590:	200d883a 	mov	r6,r4
 c00a594:	100b883a 	mov	r5,r2
 c00a598:	e009883a 	mov	r4,fp
 c00a59c:	c00d8c00 	call	c00d8c0 <__pow5mult>
 c00a5a0:	d9800317 	ldw	r6,12(sp)
 c00a5a4:	102b883a 	mov	r21,r2
 c00a5a8:	b981810e 	bge	r23,r6,c00abb0 <_dtoa_r+0x10a4>
 c00a5ac:	0027883a 	mov	r19,zero
 c00a5b0:	a8800417 	ldw	r2,16(r21)
 c00a5b4:	05c00804 	movi	r23,32
 c00a5b8:	10800104 	addi	r2,r2,4
 c00a5bc:	1085883a 	add	r2,r2,r2
 c00a5c0:	1085883a 	add	r2,r2,r2
 c00a5c4:	a885883a 	add	r2,r21,r2
 c00a5c8:	11000017 	ldw	r4,0(r2)
 c00a5cc:	c00d4e00 	call	c00d4e0 <__hi0bits>
 c00a5d0:	b885c83a 	sub	r2,r23,r2
 c00a5d4:	1585883a 	add	r2,r2,r22
 c00a5d8:	108007cc 	andi	r2,r2,31
 c00a5dc:	1000b326 	beq	r2,zero,c00a8ac <_dtoa_r+0xda0>
 c00a5e0:	00c00804 	movi	r3,32
 c00a5e4:	1887c83a 	sub	r3,r3,r2
 c00a5e8:	01000104 	movi	r4,4
 c00a5ec:	20c2cd0e 	bge	r4,r3,c00b124 <_dtoa_r+0x1618>
 c00a5f0:	00c00704 	movi	r3,28
 c00a5f4:	1885c83a 	sub	r2,r3,r2
 c00a5f8:	d8c00817 	ldw	r3,32(sp)
 c00a5fc:	a0a9883a 	add	r20,r20,r2
 c00a600:	b0ad883a 	add	r22,r22,r2
 c00a604:	1887883a 	add	r3,r3,r2
 c00a608:	d8c00815 	stw	r3,32(sp)
 c00a60c:	d9800817 	ldw	r6,32(sp)
 c00a610:	0180040e 	bge	zero,r6,c00a624 <_dtoa_r+0xb18>
 c00a614:	800b883a 	mov	r5,r16
 c00a618:	e009883a 	mov	r4,fp
 c00a61c:	c00da000 	call	c00da00 <__lshift>
 c00a620:	1021883a 	mov	r16,r2
 c00a624:	0580050e 	bge	zero,r22,c00a63c <_dtoa_r+0xb30>
 c00a628:	a80b883a 	mov	r5,r21
 c00a62c:	b00d883a 	mov	r6,r22
 c00a630:	e009883a 	mov	r4,fp
 c00a634:	c00da000 	call	c00da00 <__lshift>
 c00a638:	102b883a 	mov	r21,r2
 c00a63c:	d9c00e17 	ldw	r7,56(sp)
 c00a640:	3801211e 	bne	r7,zero,c00aac8 <_dtoa_r+0xfbc>
 c00a644:	d9800617 	ldw	r6,24(sp)
 c00a648:	0181380e 	bge	zero,r6,c00ab2c <_dtoa_r+0x1020>
 c00a64c:	d8c00b17 	ldw	r3,44(sp)
 c00a650:	1800ab1e 	bne	r3,zero,c00a900 <_dtoa_r+0xdf4>
 c00a654:	dc800717 	ldw	r18,28(sp)
 c00a658:	dcc00617 	ldw	r19,24(sp)
 c00a65c:	9029883a 	mov	r20,r18
 c00a660:	00000206 	br	c00a66c <_dtoa_r+0xb60>
 c00a664:	c00d2940 	call	c00d294 <__multadd>
 c00a668:	1021883a 	mov	r16,r2
 c00a66c:	a80b883a 	mov	r5,r21
 c00a670:	8009883a 	mov	r4,r16
 c00a674:	c0098e40 	call	c0098e4 <quorem>
 c00a678:	10800c04 	addi	r2,r2,48
 c00a67c:	90800005 	stb	r2,0(r18)
 c00a680:	94800044 	addi	r18,r18,1
 c00a684:	9507c83a 	sub	r3,r18,r20
 c00a688:	000f883a 	mov	r7,zero
 c00a68c:	01800284 	movi	r6,10
 c00a690:	800b883a 	mov	r5,r16
 c00a694:	e009883a 	mov	r4,fp
 c00a698:	1cfff216 	blt	r3,r19,c00a664 <__alt_data_end+0xfc00a664>
 c00a69c:	1011883a 	mov	r8,r2
 c00a6a0:	d8800617 	ldw	r2,24(sp)
 c00a6a4:	0082370e 	bge	zero,r2,c00af84 <_dtoa_r+0x1478>
 c00a6a8:	d9000717 	ldw	r4,28(sp)
 c00a6ac:	0025883a 	mov	r18,zero
 c00a6b0:	20af883a 	add	r23,r4,r2
 c00a6b4:	01800044 	movi	r6,1
 c00a6b8:	800b883a 	mov	r5,r16
 c00a6bc:	e009883a 	mov	r4,fp
 c00a6c0:	da001715 	stw	r8,92(sp)
 c00a6c4:	c00da000 	call	c00da00 <__lshift>
 c00a6c8:	a80b883a 	mov	r5,r21
 c00a6cc:	1009883a 	mov	r4,r2
 c00a6d0:	d8800915 	stw	r2,36(sp)
 c00a6d4:	c00db480 	call	c00db48 <__mcmp>
 c00a6d8:	da001717 	ldw	r8,92(sp)
 c00a6dc:	0081800e 	bge	zero,r2,c00ace0 <_dtoa_r+0x11d4>
 c00a6e0:	b93fffc3 	ldbu	r4,-1(r23)
 c00a6e4:	b8bfffc4 	addi	r2,r23,-1
 c00a6e8:	1007883a 	mov	r3,r2
 c00a6ec:	01800e44 	movi	r6,57
 c00a6f0:	d9c00717 	ldw	r7,28(sp)
 c00a6f4:	00000506 	br	c00a70c <_dtoa_r+0xc00>
 c00a6f8:	18ffffc4 	addi	r3,r3,-1
 c00a6fc:	11c12326 	beq	r2,r7,c00ab8c <_dtoa_r+0x1080>
 c00a700:	19000003 	ldbu	r4,0(r3)
 c00a704:	102f883a 	mov	r23,r2
 c00a708:	10bfffc4 	addi	r2,r2,-1
 c00a70c:	21403fcc 	andi	r5,r4,255
 c00a710:	2940201c 	xori	r5,r5,128
 c00a714:	297fe004 	addi	r5,r5,-128
 c00a718:	29bff726 	beq	r5,r6,c00a6f8 <__alt_data_end+0xfc00a6f8>
 c00a71c:	21000044 	addi	r4,r4,1
 c00a720:	11000005 	stb	r4,0(r2)
 c00a724:	a80b883a 	mov	r5,r21
 c00a728:	e009883a 	mov	r4,fp
 c00a72c:	c00d26c0 	call	c00d26c <_Bfree>
 c00a730:	883ea026 	beq	r17,zero,c00a1b4 <__alt_data_end+0xfc00a1b4>
 c00a734:	90000426 	beq	r18,zero,c00a748 <_dtoa_r+0xc3c>
 c00a738:	94400326 	beq	r18,r17,c00a748 <_dtoa_r+0xc3c>
 c00a73c:	900b883a 	mov	r5,r18
 c00a740:	e009883a 	mov	r4,fp
 c00a744:	c00d26c0 	call	c00d26c <_Bfree>
 c00a748:	880b883a 	mov	r5,r17
 c00a74c:	e009883a 	mov	r4,fp
 c00a750:	c00d26c0 	call	c00d26c <_Bfree>
 c00a754:	003e9706 	br	c00a1b4 <__alt_data_end+0xfc00a1b4>
 c00a758:	01800044 	movi	r6,1
 c00a75c:	d9800e15 	stw	r6,56(sp)
 c00a760:	003d9606 	br	c009dbc <__alt_data_end+0xfc009dbc>
 c00a764:	d8800817 	ldw	r2,32(sp)
 c00a768:	d8c00517 	ldw	r3,20(sp)
 c00a76c:	d8000d15 	stw	zero,52(sp)
 c00a770:	10c5c83a 	sub	r2,r2,r3
 c00a774:	00c9c83a 	sub	r4,zero,r3
 c00a778:	d8800815 	stw	r2,32(sp)
 c00a77c:	d9000a15 	stw	r4,40(sp)
 c00a780:	003d9706 	br	c009de0 <__alt_data_end+0xfc009de0>
 c00a784:	05adc83a 	sub	r22,zero,r22
 c00a788:	dd800815 	stw	r22,32(sp)
 c00a78c:	002d883a 	mov	r22,zero
 c00a790:	003d8e06 	br	c009dcc <__alt_data_end+0xfc009dcc>
 c00a794:	d9000517 	ldw	r4,20(sp)
 c00a798:	c0153fc0 	call	c0153fc <__floatsidf>
 c00a79c:	100d883a 	mov	r6,r2
 c00a7a0:	180f883a 	mov	r7,r3
 c00a7a4:	a009883a 	mov	r4,r20
 c00a7a8:	880b883a 	mov	r5,r17
 c00a7ac:	c013fbc0 	call	c013fbc <__eqdf2>
 c00a7b0:	103d7126 	beq	r2,zero,c009d78 <__alt_data_end+0xfc009d78>
 c00a7b4:	d9c00517 	ldw	r7,20(sp)
 c00a7b8:	39ffffc4 	addi	r7,r7,-1
 c00a7bc:	d9c00515 	stw	r7,20(sp)
 c00a7c0:	003d6d06 	br	c009d78 <__alt_data_end+0xfc009d78>
 c00a7c4:	dd400a17 	ldw	r21,40(sp)
 c00a7c8:	dd000817 	ldw	r20,32(sp)
 c00a7cc:	0023883a 	mov	r17,zero
 c00a7d0:	003f4806 	br	c00a4f4 <__alt_data_end+0xfc00a4f4>
 c00a7d4:	10e3c83a 	sub	r17,r2,r3
 c00a7d8:	9448983a 	sll	r4,r18,r17
 c00a7dc:	003d3206 	br	c009ca8 <__alt_data_end+0xfc009ca8>
 c00a7e0:	d8000e15 	stw	zero,56(sp)
 c00a7e4:	003d7506 	br	c009dbc <__alt_data_end+0xfc009dbc>
 c00a7e8:	b005883a 	mov	r2,r22
 c00a7ec:	003f4506 	br	c00a504 <__alt_data_end+0xfc00a504>
 c00a7f0:	dc000915 	stw	r16,36(sp)
 c00a7f4:	d9800a17 	ldw	r6,40(sp)
 c00a7f8:	d9400917 	ldw	r5,36(sp)
 c00a7fc:	e009883a 	mov	r4,fp
 c00a800:	c00d8c00 	call	c00d8c0 <__pow5mult>
 c00a804:	1021883a 	mov	r16,r2
 c00a808:	003f5a06 	br	c00a574 <__alt_data_end+0xfc00a574>
 c00a80c:	01c00044 	movi	r7,1
 c00a810:	d9c00b15 	stw	r7,44(sp)
 c00a814:	d8802217 	ldw	r2,136(sp)
 c00a818:	0081280e 	bge	zero,r2,c00acbc <_dtoa_r+0x11b0>
 c00a81c:	100d883a 	mov	r6,r2
 c00a820:	1021883a 	mov	r16,r2
 c00a824:	d8800c15 	stw	r2,48(sp)
 c00a828:	d8800615 	stw	r2,24(sp)
 c00a82c:	003d8806 	br	c009e50 <__alt_data_end+0xfc009e50>
 c00a830:	d8800617 	ldw	r2,24(sp)
 c00a834:	00be9b16 	blt	zero,r2,c00a2a4 <__alt_data_end+0xfc00a2a4>
 c00a838:	10010f1e 	bne	r2,zero,c00ac78 <_dtoa_r+0x116c>
 c00a83c:	880b883a 	mov	r5,r17
 c00a840:	000d883a 	mov	r6,zero
 c00a844:	01d00534 	movhi	r7,16404
 c00a848:	8009883a 	mov	r4,r16
 c00a84c:	c0142140 	call	c014214 <__muldf3>
 c00a850:	900d883a 	mov	r6,r18
 c00a854:	980f883a 	mov	r7,r19
 c00a858:	1009883a 	mov	r4,r2
 c00a85c:	180b883a 	mov	r5,r3
 c00a860:	c0140440 	call	c014044 <__gedf2>
 c00a864:	002b883a 	mov	r21,zero
 c00a868:	0023883a 	mov	r17,zero
 c00a86c:	1000bf16 	blt	r2,zero,c00ab6c <_dtoa_r+0x1060>
 c00a870:	d9802217 	ldw	r6,136(sp)
 c00a874:	ddc00717 	ldw	r23,28(sp)
 c00a878:	018c303a 	nor	r6,zero,r6
 c00a87c:	d9800515 	stw	r6,20(sp)
 c00a880:	a80b883a 	mov	r5,r21
 c00a884:	e009883a 	mov	r4,fp
 c00a888:	c00d26c0 	call	c00d26c <_Bfree>
 c00a88c:	883e4926 	beq	r17,zero,c00a1b4 <__alt_data_end+0xfc00a1b4>
 c00a890:	003fad06 	br	c00a748 <__alt_data_end+0xfc00a748>
 c00a894:	d9c01117 	ldw	r7,68(sp)
 c00a898:	3801bc26 	beq	r7,zero,c00af8c <_dtoa_r+0x1480>
 c00a89c:	10810cc4 	addi	r2,r2,1075
 c00a8a0:	dd400a17 	ldw	r21,40(sp)
 c00a8a4:	dd000817 	ldw	r20,32(sp)
 c00a8a8:	003f0a06 	br	c00a4d4 <__alt_data_end+0xfc00a4d4>
 c00a8ac:	00800704 	movi	r2,28
 c00a8b0:	d9000817 	ldw	r4,32(sp)
 c00a8b4:	a0a9883a 	add	r20,r20,r2
 c00a8b8:	b0ad883a 	add	r22,r22,r2
 c00a8bc:	2089883a 	add	r4,r4,r2
 c00a8c0:	d9000815 	stw	r4,32(sp)
 c00a8c4:	003f5106 	br	c00a60c <__alt_data_end+0xfc00a60c>
 c00a8c8:	d8c00317 	ldw	r3,12(sp)
 c00a8cc:	b8c1fc0e 	bge	r23,r3,c00b0c0 <_dtoa_r+0x15b4>
 c00a8d0:	0027883a 	mov	r19,zero
 c00a8d4:	b805883a 	mov	r2,r23
 c00a8d8:	003f3e06 	br	c00a5d4 <__alt_data_end+0xfc00a5d4>
 c00a8dc:	880b883a 	mov	r5,r17
 c00a8e0:	e009883a 	mov	r4,fp
 c00a8e4:	000f883a 	mov	r7,zero
 c00a8e8:	01800284 	movi	r6,10
 c00a8ec:	c00d2940 	call	c00d294 <__multadd>
 c00a8f0:	d9000c17 	ldw	r4,48(sp)
 c00a8f4:	1023883a 	mov	r17,r2
 c00a8f8:	0102040e 	bge	zero,r4,c00b10c <_dtoa_r+0x1600>
 c00a8fc:	d9000615 	stw	r4,24(sp)
 c00a900:	0500050e 	bge	zero,r20,c00a918 <_dtoa_r+0xe0c>
 c00a904:	880b883a 	mov	r5,r17
 c00a908:	a00d883a 	mov	r6,r20
 c00a90c:	e009883a 	mov	r4,fp
 c00a910:	c00da000 	call	c00da00 <__lshift>
 c00a914:	1023883a 	mov	r17,r2
 c00a918:	9801241e 	bne	r19,zero,c00adac <_dtoa_r+0x12a0>
 c00a91c:	8829883a 	mov	r20,r17
 c00a920:	d9000617 	ldw	r4,24(sp)
 c00a924:	dcc00717 	ldw	r19,28(sp)
 c00a928:	9480004c 	andi	r18,r18,1
 c00a92c:	20bfffc4 	addi	r2,r4,-1
 c00a930:	9885883a 	add	r2,r19,r2
 c00a934:	d8800415 	stw	r2,16(sp)
 c00a938:	dc800615 	stw	r18,24(sp)
 c00a93c:	a80b883a 	mov	r5,r21
 c00a940:	8009883a 	mov	r4,r16
 c00a944:	c0098e40 	call	c0098e4 <quorem>
 c00a948:	880b883a 	mov	r5,r17
 c00a94c:	8009883a 	mov	r4,r16
 c00a950:	102f883a 	mov	r23,r2
 c00a954:	c00db480 	call	c00db48 <__mcmp>
 c00a958:	a80b883a 	mov	r5,r21
 c00a95c:	a00d883a 	mov	r6,r20
 c00a960:	e009883a 	mov	r4,fp
 c00a964:	102d883a 	mov	r22,r2
 c00a968:	c00dba80 	call	c00dba8 <__mdiff>
 c00a96c:	1007883a 	mov	r3,r2
 c00a970:	10800317 	ldw	r2,12(r2)
 c00a974:	bc800c04 	addi	r18,r23,48
 c00a978:	180b883a 	mov	r5,r3
 c00a97c:	10004e1e 	bne	r2,zero,c00aab8 <_dtoa_r+0xfac>
 c00a980:	8009883a 	mov	r4,r16
 c00a984:	d8c01615 	stw	r3,88(sp)
 c00a988:	c00db480 	call	c00db48 <__mcmp>
 c00a98c:	d8c01617 	ldw	r3,88(sp)
 c00a990:	e009883a 	mov	r4,fp
 c00a994:	d8801615 	stw	r2,88(sp)
 c00a998:	180b883a 	mov	r5,r3
 c00a99c:	c00d26c0 	call	c00d26c <_Bfree>
 c00a9a0:	d8801617 	ldw	r2,88(sp)
 c00a9a4:	1000041e 	bne	r2,zero,c00a9b8 <_dtoa_r+0xeac>
 c00a9a8:	d9800317 	ldw	r6,12(sp)
 c00a9ac:	3000021e 	bne	r6,zero,c00a9b8 <_dtoa_r+0xeac>
 c00a9b0:	d8c00617 	ldw	r3,24(sp)
 c00a9b4:	18003726 	beq	r3,zero,c00aa94 <_dtoa_r+0xf88>
 c00a9b8:	b0002016 	blt	r22,zero,c00aa3c <_dtoa_r+0xf30>
 c00a9bc:	b000041e 	bne	r22,zero,c00a9d0 <_dtoa_r+0xec4>
 c00a9c0:	d9000317 	ldw	r4,12(sp)
 c00a9c4:	2000021e 	bne	r4,zero,c00a9d0 <_dtoa_r+0xec4>
 c00a9c8:	d8c00617 	ldw	r3,24(sp)
 c00a9cc:	18001b26 	beq	r3,zero,c00aa3c <_dtoa_r+0xf30>
 c00a9d0:	00810716 	blt	zero,r2,c00adf0 <_dtoa_r+0x12e4>
 c00a9d4:	d8c00417 	ldw	r3,16(sp)
 c00a9d8:	9d800044 	addi	r22,r19,1
 c00a9dc:	9c800005 	stb	r18,0(r19)
 c00a9e0:	b02f883a 	mov	r23,r22
 c00a9e4:	98c10626 	beq	r19,r3,c00ae00 <_dtoa_r+0x12f4>
 c00a9e8:	800b883a 	mov	r5,r16
 c00a9ec:	000f883a 	mov	r7,zero
 c00a9f0:	01800284 	movi	r6,10
 c00a9f4:	e009883a 	mov	r4,fp
 c00a9f8:	c00d2940 	call	c00d294 <__multadd>
 c00a9fc:	1021883a 	mov	r16,r2
 c00aa00:	000f883a 	mov	r7,zero
 c00aa04:	01800284 	movi	r6,10
 c00aa08:	880b883a 	mov	r5,r17
 c00aa0c:	e009883a 	mov	r4,fp
 c00aa10:	8d002526 	beq	r17,r20,c00aaa8 <_dtoa_r+0xf9c>
 c00aa14:	c00d2940 	call	c00d294 <__multadd>
 c00aa18:	a00b883a 	mov	r5,r20
 c00aa1c:	000f883a 	mov	r7,zero
 c00aa20:	01800284 	movi	r6,10
 c00aa24:	e009883a 	mov	r4,fp
 c00aa28:	1023883a 	mov	r17,r2
 c00aa2c:	c00d2940 	call	c00d294 <__multadd>
 c00aa30:	1029883a 	mov	r20,r2
 c00aa34:	b027883a 	mov	r19,r22
 c00aa38:	003fc006 	br	c00a93c <__alt_data_end+0xfc00a93c>
 c00aa3c:	9011883a 	mov	r8,r18
 c00aa40:	00800e0e 	bge	zero,r2,c00aa7c <_dtoa_r+0xf70>
 c00aa44:	800b883a 	mov	r5,r16
 c00aa48:	01800044 	movi	r6,1
 c00aa4c:	e009883a 	mov	r4,fp
 c00aa50:	da001715 	stw	r8,92(sp)
 c00aa54:	c00da000 	call	c00da00 <__lshift>
 c00aa58:	a80b883a 	mov	r5,r21
 c00aa5c:	1009883a 	mov	r4,r2
 c00aa60:	1021883a 	mov	r16,r2
 c00aa64:	c00db480 	call	c00db48 <__mcmp>
 c00aa68:	da001717 	ldw	r8,92(sp)
 c00aa6c:	0081960e 	bge	zero,r2,c00b0c8 <_dtoa_r+0x15bc>
 c00aa70:	00800e44 	movi	r2,57
 c00aa74:	40817026 	beq	r8,r2,c00b038 <_dtoa_r+0x152c>
 c00aa78:	ba000c44 	addi	r8,r23,49
 c00aa7c:	8825883a 	mov	r18,r17
 c00aa80:	9dc00044 	addi	r23,r19,1
 c00aa84:	9a000005 	stb	r8,0(r19)
 c00aa88:	a023883a 	mov	r17,r20
 c00aa8c:	dc000915 	stw	r16,36(sp)
 c00aa90:	003f2406 	br	c00a724 <__alt_data_end+0xfc00a724>
 c00aa94:	00800e44 	movi	r2,57
 c00aa98:	9011883a 	mov	r8,r18
 c00aa9c:	90816626 	beq	r18,r2,c00b038 <_dtoa_r+0x152c>
 c00aaa0:	05bff516 	blt	zero,r22,c00aa78 <__alt_data_end+0xfc00aa78>
 c00aaa4:	003ff506 	br	c00aa7c <__alt_data_end+0xfc00aa7c>
 c00aaa8:	c00d2940 	call	c00d294 <__multadd>
 c00aaac:	1023883a 	mov	r17,r2
 c00aab0:	1029883a 	mov	r20,r2
 c00aab4:	003fdf06 	br	c00aa34 <__alt_data_end+0xfc00aa34>
 c00aab8:	e009883a 	mov	r4,fp
 c00aabc:	c00d26c0 	call	c00d26c <_Bfree>
 c00aac0:	00800044 	movi	r2,1
 c00aac4:	003fbc06 	br	c00a9b8 <__alt_data_end+0xfc00a9b8>
 c00aac8:	a80b883a 	mov	r5,r21
 c00aacc:	8009883a 	mov	r4,r16
 c00aad0:	c00db480 	call	c00db48 <__mcmp>
 c00aad4:	103edb0e 	bge	r2,zero,c00a644 <__alt_data_end+0xfc00a644>
 c00aad8:	800b883a 	mov	r5,r16
 c00aadc:	000f883a 	mov	r7,zero
 c00aae0:	01800284 	movi	r6,10
 c00aae4:	e009883a 	mov	r4,fp
 c00aae8:	c00d2940 	call	c00d294 <__multadd>
 c00aaec:	1021883a 	mov	r16,r2
 c00aaf0:	d8800517 	ldw	r2,20(sp)
 c00aaf4:	d8c00b17 	ldw	r3,44(sp)
 c00aaf8:	10bfffc4 	addi	r2,r2,-1
 c00aafc:	d8800515 	stw	r2,20(sp)
 c00ab00:	183f761e 	bne	r3,zero,c00a8dc <__alt_data_end+0xfc00a8dc>
 c00ab04:	d9000c17 	ldw	r4,48(sp)
 c00ab08:	0101730e 	bge	zero,r4,c00b0d8 <_dtoa_r+0x15cc>
 c00ab0c:	d9000615 	stw	r4,24(sp)
 c00ab10:	003ed006 	br	c00a654 <__alt_data_end+0xfc00a654>
 c00ab14:	00800084 	movi	r2,2
 c00ab18:	3081861e 	bne	r6,r2,c00b134 <_dtoa_r+0x1628>
 c00ab1c:	d8000b15 	stw	zero,44(sp)
 c00ab20:	003f3c06 	br	c00a814 <__alt_data_end+0xfc00a814>
 c00ab24:	dc000917 	ldw	r16,36(sp)
 c00ab28:	003e9206 	br	c00a574 <__alt_data_end+0xfc00a574>
 c00ab2c:	d9c00317 	ldw	r7,12(sp)
 c00ab30:	00800084 	movi	r2,2
 c00ab34:	11fec50e 	bge	r2,r7,c00a64c <__alt_data_end+0xfc00a64c>
 c00ab38:	d9000617 	ldw	r4,24(sp)
 c00ab3c:	20013c1e 	bne	r4,zero,c00b030 <_dtoa_r+0x1524>
 c00ab40:	a80b883a 	mov	r5,r21
 c00ab44:	000f883a 	mov	r7,zero
 c00ab48:	01800144 	movi	r6,5
 c00ab4c:	e009883a 	mov	r4,fp
 c00ab50:	c00d2940 	call	c00d294 <__multadd>
 c00ab54:	100b883a 	mov	r5,r2
 c00ab58:	8009883a 	mov	r4,r16
 c00ab5c:	102b883a 	mov	r21,r2
 c00ab60:	c00db480 	call	c00db48 <__mcmp>
 c00ab64:	dc000915 	stw	r16,36(sp)
 c00ab68:	00bf410e 	bge	zero,r2,c00a870 <__alt_data_end+0xfc00a870>
 c00ab6c:	d9c00717 	ldw	r7,28(sp)
 c00ab70:	00800c44 	movi	r2,49
 c00ab74:	38800005 	stb	r2,0(r7)
 c00ab78:	d8800517 	ldw	r2,20(sp)
 c00ab7c:	3dc00044 	addi	r23,r7,1
 c00ab80:	10800044 	addi	r2,r2,1
 c00ab84:	d8800515 	stw	r2,20(sp)
 c00ab88:	003f3d06 	br	c00a880 <__alt_data_end+0xfc00a880>
 c00ab8c:	d9800517 	ldw	r6,20(sp)
 c00ab90:	d9c00717 	ldw	r7,28(sp)
 c00ab94:	00800c44 	movi	r2,49
 c00ab98:	31800044 	addi	r6,r6,1
 c00ab9c:	d9800515 	stw	r6,20(sp)
 c00aba0:	38800005 	stb	r2,0(r7)
 c00aba4:	003edf06 	br	c00a724 <__alt_data_end+0xfc00a724>
 c00aba8:	d8000b15 	stw	zero,44(sp)
 c00abac:	003c9f06 	br	c009e2c <__alt_data_end+0xfc009e2c>
 c00abb0:	903e7e1e 	bne	r18,zero,c00a5ac <__alt_data_end+0xfc00a5ac>
 c00abb4:	00800434 	movhi	r2,16
 c00abb8:	10bfffc4 	addi	r2,r2,-1
 c00abbc:	9884703a 	and	r2,r19,r2
 c00abc0:	1000ea1e 	bne	r2,zero,c00af6c <_dtoa_r+0x1460>
 c00abc4:	9cdffc2c 	andhi	r19,r19,32752
 c00abc8:	9800e826 	beq	r19,zero,c00af6c <_dtoa_r+0x1460>
 c00abcc:	d9c00817 	ldw	r7,32(sp)
 c00abd0:	b5800044 	addi	r22,r22,1
 c00abd4:	04c00044 	movi	r19,1
 c00abd8:	39c00044 	addi	r7,r7,1
 c00abdc:	d9c00815 	stw	r7,32(sp)
 c00abe0:	d8800d17 	ldw	r2,52(sp)
 c00abe4:	103e721e 	bne	r2,zero,c00a5b0 <__alt_data_end+0xfc00a5b0>
 c00abe8:	00800044 	movi	r2,1
 c00abec:	003e7906 	br	c00a5d4 <__alt_data_end+0xfc00a5d4>
 c00abf0:	8009883a 	mov	r4,r16
 c00abf4:	c0153fc0 	call	c0153fc <__floatsidf>
 c00abf8:	d9800f17 	ldw	r6,60(sp)
 c00abfc:	d9c01017 	ldw	r7,64(sp)
 c00ac00:	1009883a 	mov	r4,r2
 c00ac04:	180b883a 	mov	r5,r3
 c00ac08:	c0142140 	call	c014214 <__muldf3>
 c00ac0c:	000d883a 	mov	r6,zero
 c00ac10:	01d00734 	movhi	r7,16412
 c00ac14:	1009883a 	mov	r4,r2
 c00ac18:	180b883a 	mov	r5,r3
 c00ac1c:	c012d400 	call	c012d40 <__adddf3>
 c00ac20:	047f3034 	movhi	r17,64704
 c00ac24:	1021883a 	mov	r16,r2
 c00ac28:	1c63883a 	add	r17,r3,r17
 c00ac2c:	d9000f17 	ldw	r4,60(sp)
 c00ac30:	d9401017 	ldw	r5,64(sp)
 c00ac34:	000d883a 	mov	r6,zero
 c00ac38:	01d00534 	movhi	r7,16404
 c00ac3c:	c014a800 	call	c014a80 <__subdf3>
 c00ac40:	800d883a 	mov	r6,r16
 c00ac44:	880f883a 	mov	r7,r17
 c00ac48:	1009883a 	mov	r4,r2
 c00ac4c:	180b883a 	mov	r5,r3
 c00ac50:	102b883a 	mov	r21,r2
 c00ac54:	1829883a 	mov	r20,r3
 c00ac58:	c0140440 	call	c014044 <__gedf2>
 c00ac5c:	00806c16 	blt	zero,r2,c00ae10 <_dtoa_r+0x1304>
 c00ac60:	89e0003c 	xorhi	r7,r17,32768
 c00ac64:	800d883a 	mov	r6,r16
 c00ac68:	a809883a 	mov	r4,r21
 c00ac6c:	a00b883a 	mov	r5,r20
 c00ac70:	c0141200 	call	c014120 <__ledf2>
 c00ac74:	103d7e0e 	bge	r2,zero,c00a270 <__alt_data_end+0xfc00a270>
 c00ac78:	002b883a 	mov	r21,zero
 c00ac7c:	0023883a 	mov	r17,zero
 c00ac80:	003efb06 	br	c00a870 <__alt_data_end+0xfc00a870>
 c00ac84:	d8800717 	ldw	r2,28(sp)
 c00ac88:	003bd006 	br	c009bcc <__alt_data_end+0xfc009bcc>
 c00ac8c:	d9000a17 	ldw	r4,40(sp)
 c00ac90:	d9800d17 	ldw	r6,52(sp)
 c00ac94:	dd400a15 	stw	r21,40(sp)
 c00ac98:	a905c83a 	sub	r2,r21,r4
 c00ac9c:	308d883a 	add	r6,r6,r2
 c00aca0:	d9800d15 	stw	r6,52(sp)
 c00aca4:	002b883a 	mov	r21,zero
 c00aca8:	003e0606 	br	c00a4c4 <__alt_data_end+0xfc00a4c4>
 c00acac:	9023883a 	mov	r17,r18
 c00acb0:	9829883a 	mov	r20,r19
 c00acb4:	04000084 	movi	r16,2
 c00acb8:	003c9206 	br	c009f04 <__alt_data_end+0xfc009f04>
 c00acbc:	04000044 	movi	r16,1
 c00acc0:	dc000c15 	stw	r16,48(sp)
 c00acc4:	dc000615 	stw	r16,24(sp)
 c00acc8:	dc002215 	stw	r16,136(sp)
 c00accc:	e0001115 	stw	zero,68(fp)
 c00acd0:	000b883a 	mov	r5,zero
 c00acd4:	003c6906 	br	c009e7c <__alt_data_end+0xfc009e7c>
 c00acd8:	3021883a 	mov	r16,r6
 c00acdc:	003ffb06 	br	c00accc <__alt_data_end+0xfc00accc>
 c00ace0:	1000021e 	bne	r2,zero,c00acec <_dtoa_r+0x11e0>
 c00ace4:	4200004c 	andi	r8,r8,1
 c00ace8:	403e7d1e 	bne	r8,zero,c00a6e0 <__alt_data_end+0xfc00a6e0>
 c00acec:	01000c04 	movi	r4,48
 c00acf0:	00000106 	br	c00acf8 <_dtoa_r+0x11ec>
 c00acf4:	102f883a 	mov	r23,r2
 c00acf8:	b8bfffc4 	addi	r2,r23,-1
 c00acfc:	10c00007 	ldb	r3,0(r2)
 c00ad00:	193ffc26 	beq	r3,r4,c00acf4 <__alt_data_end+0xfc00acf4>
 c00ad04:	003e8706 	br	c00a724 <__alt_data_end+0xfc00a724>
 c00ad08:	d8800517 	ldw	r2,20(sp)
 c00ad0c:	00a3c83a 	sub	r17,zero,r2
 c00ad10:	8800a426 	beq	r17,zero,c00afa4 <_dtoa_r+0x1498>
 c00ad14:	888003cc 	andi	r2,r17,15
 c00ad18:	100490fa 	slli	r2,r2,3
 c00ad1c:	00c300b4 	movhi	r3,3074
 c00ad20:	18e21f04 	addi	r3,r3,-30596
 c00ad24:	1885883a 	add	r2,r3,r2
 c00ad28:	11800017 	ldw	r6,0(r2)
 c00ad2c:	11c00117 	ldw	r7,4(r2)
 c00ad30:	9009883a 	mov	r4,r18
 c00ad34:	980b883a 	mov	r5,r19
 c00ad38:	8823d13a 	srai	r17,r17,4
 c00ad3c:	c0142140 	call	c014214 <__muldf3>
 c00ad40:	d8800f15 	stw	r2,60(sp)
 c00ad44:	d8c01015 	stw	r3,64(sp)
 c00ad48:	8800e826 	beq	r17,zero,c00b0ec <_dtoa_r+0x15e0>
 c00ad4c:	050300b4 	movhi	r20,3074
 c00ad50:	a5221504 	addi	r20,r20,-30636
 c00ad54:	04000084 	movi	r16,2
 c00ad58:	8980004c 	andi	r6,r17,1
 c00ad5c:	1009883a 	mov	r4,r2
 c00ad60:	8823d07a 	srai	r17,r17,1
 c00ad64:	180b883a 	mov	r5,r3
 c00ad68:	30000426 	beq	r6,zero,c00ad7c <_dtoa_r+0x1270>
 c00ad6c:	a1800017 	ldw	r6,0(r20)
 c00ad70:	a1c00117 	ldw	r7,4(r20)
 c00ad74:	84000044 	addi	r16,r16,1
 c00ad78:	c0142140 	call	c014214 <__muldf3>
 c00ad7c:	a5000204 	addi	r20,r20,8
 c00ad80:	883ff51e 	bne	r17,zero,c00ad58 <__alt_data_end+0xfc00ad58>
 c00ad84:	d8800f15 	stw	r2,60(sp)
 c00ad88:	d8c01015 	stw	r3,64(sp)
 c00ad8c:	003c7606 	br	c009f68 <__alt_data_end+0xfc009f68>
 c00ad90:	00c00c04 	movi	r3,48
 c00ad94:	10c00005 	stb	r3,0(r2)
 c00ad98:	d8c00517 	ldw	r3,20(sp)
 c00ad9c:	bd3fffc3 	ldbu	r20,-1(r23)
 c00ada0:	18c00044 	addi	r3,r3,1
 c00ada4:	d8c00515 	stw	r3,20(sp)
 c00ada8:	003db906 	br	c00a490 <__alt_data_end+0xfc00a490>
 c00adac:	89400117 	ldw	r5,4(r17)
 c00adb0:	e009883a 	mov	r4,fp
 c00adb4:	c00d1c40 	call	c00d1c4 <_Balloc>
 c00adb8:	89800417 	ldw	r6,16(r17)
 c00adbc:	89400304 	addi	r5,r17,12
 c00adc0:	11000304 	addi	r4,r2,12
 c00adc4:	31800084 	addi	r6,r6,2
 c00adc8:	318d883a 	add	r6,r6,r6
 c00adcc:	318d883a 	add	r6,r6,r6
 c00add0:	1027883a 	mov	r19,r2
 c00add4:	c00cdf80 	call	c00cdf8 <memcpy>
 c00add8:	01800044 	movi	r6,1
 c00addc:	980b883a 	mov	r5,r19
 c00ade0:	e009883a 	mov	r4,fp
 c00ade4:	c00da000 	call	c00da00 <__lshift>
 c00ade8:	1029883a 	mov	r20,r2
 c00adec:	003ecc06 	br	c00a920 <__alt_data_end+0xfc00a920>
 c00adf0:	00800e44 	movi	r2,57
 c00adf4:	90809026 	beq	r18,r2,c00b038 <_dtoa_r+0x152c>
 c00adf8:	92000044 	addi	r8,r18,1
 c00adfc:	003f1f06 	br	c00aa7c <__alt_data_end+0xfc00aa7c>
 c00ae00:	9011883a 	mov	r8,r18
 c00ae04:	8825883a 	mov	r18,r17
 c00ae08:	a023883a 	mov	r17,r20
 c00ae0c:	003e2906 	br	c00a6b4 <__alt_data_end+0xfc00a6b4>
 c00ae10:	002b883a 	mov	r21,zero
 c00ae14:	0023883a 	mov	r17,zero
 c00ae18:	003f5406 	br	c00ab6c <__alt_data_end+0xfc00ab6c>
 c00ae1c:	61bfffc4 	addi	r6,r12,-1
 c00ae20:	300490fa 	slli	r2,r6,3
 c00ae24:	00c300b4 	movhi	r3,3074
 c00ae28:	18e21f04 	addi	r3,r3,-30596
 c00ae2c:	1885883a 	add	r2,r3,r2
 c00ae30:	11000017 	ldw	r4,0(r2)
 c00ae34:	11400117 	ldw	r5,4(r2)
 c00ae38:	d8800717 	ldw	r2,28(sp)
 c00ae3c:	880f883a 	mov	r7,r17
 c00ae40:	d9801215 	stw	r6,72(sp)
 c00ae44:	800d883a 	mov	r6,r16
 c00ae48:	db001615 	stw	r12,88(sp)
 c00ae4c:	15c00044 	addi	r23,r2,1
 c00ae50:	c0142140 	call	c014214 <__muldf3>
 c00ae54:	d9401017 	ldw	r5,64(sp)
 c00ae58:	d9000f17 	ldw	r4,60(sp)
 c00ae5c:	d8c01515 	stw	r3,84(sp)
 c00ae60:	d8801415 	stw	r2,80(sp)
 c00ae64:	c01537c0 	call	c01537c <__fixdfsi>
 c00ae68:	1009883a 	mov	r4,r2
 c00ae6c:	1021883a 	mov	r16,r2
 c00ae70:	c0153fc0 	call	c0153fc <__floatsidf>
 c00ae74:	d9000f17 	ldw	r4,60(sp)
 c00ae78:	d9401017 	ldw	r5,64(sp)
 c00ae7c:	100d883a 	mov	r6,r2
 c00ae80:	180f883a 	mov	r7,r3
 c00ae84:	c014a800 	call	c014a80 <__subdf3>
 c00ae88:	1829883a 	mov	r20,r3
 c00ae8c:	d8c00717 	ldw	r3,28(sp)
 c00ae90:	84000c04 	addi	r16,r16,48
 c00ae94:	1023883a 	mov	r17,r2
 c00ae98:	1c000005 	stb	r16,0(r3)
 c00ae9c:	db001617 	ldw	r12,88(sp)
 c00aea0:	00800044 	movi	r2,1
 c00aea4:	60802226 	beq	r12,r2,c00af30 <_dtoa_r+0x1424>
 c00aea8:	d9c00717 	ldw	r7,28(sp)
 c00aeac:	8805883a 	mov	r2,r17
 c00aeb0:	b82b883a 	mov	r21,r23
 c00aeb4:	3b19883a 	add	r12,r7,r12
 c00aeb8:	6023883a 	mov	r17,r12
 c00aebc:	a007883a 	mov	r3,r20
 c00aec0:	dc800f15 	stw	r18,60(sp)
 c00aec4:	000d883a 	mov	r6,zero
 c00aec8:	01d00934 	movhi	r7,16420
 c00aecc:	1009883a 	mov	r4,r2
 c00aed0:	180b883a 	mov	r5,r3
 c00aed4:	c0142140 	call	c014214 <__muldf3>
 c00aed8:	180b883a 	mov	r5,r3
 c00aedc:	1009883a 	mov	r4,r2
 c00aee0:	1829883a 	mov	r20,r3
 c00aee4:	1025883a 	mov	r18,r2
 c00aee8:	c01537c0 	call	c01537c <__fixdfsi>
 c00aeec:	1009883a 	mov	r4,r2
 c00aef0:	1021883a 	mov	r16,r2
 c00aef4:	c0153fc0 	call	c0153fc <__floatsidf>
 c00aef8:	100d883a 	mov	r6,r2
 c00aefc:	180f883a 	mov	r7,r3
 c00af00:	9009883a 	mov	r4,r18
 c00af04:	a00b883a 	mov	r5,r20
 c00af08:	84000c04 	addi	r16,r16,48
 c00af0c:	c014a800 	call	c014a80 <__subdf3>
 c00af10:	ad400044 	addi	r21,r21,1
 c00af14:	ac3fffc5 	stb	r16,-1(r21)
 c00af18:	ac7fea1e 	bne	r21,r17,c00aec4 <__alt_data_end+0xfc00aec4>
 c00af1c:	1023883a 	mov	r17,r2
 c00af20:	d8801217 	ldw	r2,72(sp)
 c00af24:	dc800f17 	ldw	r18,60(sp)
 c00af28:	1829883a 	mov	r20,r3
 c00af2c:	b8af883a 	add	r23,r23,r2
 c00af30:	d9001417 	ldw	r4,80(sp)
 c00af34:	d9401517 	ldw	r5,84(sp)
 c00af38:	000d883a 	mov	r6,zero
 c00af3c:	01cff834 	movhi	r7,16352
 c00af40:	c012d400 	call	c012d40 <__adddf3>
 c00af44:	880d883a 	mov	r6,r17
 c00af48:	a00f883a 	mov	r7,r20
 c00af4c:	1009883a 	mov	r4,r2
 c00af50:	180b883a 	mov	r5,r3
 c00af54:	c0141200 	call	c014120 <__ledf2>
 c00af58:	10003e0e 	bge	r2,zero,c00b054 <_dtoa_r+0x1548>
 c00af5c:	d9001317 	ldw	r4,76(sp)
 c00af60:	bd3fffc3 	ldbu	r20,-1(r23)
 c00af64:	d9000515 	stw	r4,20(sp)
 c00af68:	003d3b06 	br	c00a458 <__alt_data_end+0xfc00a458>
 c00af6c:	0027883a 	mov	r19,zero
 c00af70:	003f1b06 	br	c00abe0 <__alt_data_end+0xfc00abe0>
 c00af74:	d8800817 	ldw	r2,32(sp)
 c00af78:	11e9c83a 	sub	r20,r2,r7
 c00af7c:	0005883a 	mov	r2,zero
 c00af80:	003d5406 	br	c00a4d4 <__alt_data_end+0xfc00a4d4>
 c00af84:	00800044 	movi	r2,1
 c00af88:	003dc706 	br	c00a6a8 <__alt_data_end+0xfc00a6a8>
 c00af8c:	d8c00217 	ldw	r3,8(sp)
 c00af90:	00800d84 	movi	r2,54
 c00af94:	dd400a17 	ldw	r21,40(sp)
 c00af98:	10c5c83a 	sub	r2,r2,r3
 c00af9c:	dd000817 	ldw	r20,32(sp)
 c00afa0:	003d4c06 	br	c00a4d4 <__alt_data_end+0xfc00a4d4>
 c00afa4:	dc800f15 	stw	r18,60(sp)
 c00afa8:	dcc01015 	stw	r19,64(sp)
 c00afac:	04000084 	movi	r16,2
 c00afb0:	003bed06 	br	c009f68 <__alt_data_end+0xfc009f68>
 c00afb4:	d9000617 	ldw	r4,24(sp)
 c00afb8:	203f0d26 	beq	r4,zero,c00abf0 <__alt_data_end+0xfc00abf0>
 c00afbc:	d9800c17 	ldw	r6,48(sp)
 c00afc0:	01bcab0e 	bge	zero,r6,c00a270 <__alt_data_end+0xfc00a270>
 c00afc4:	d9401017 	ldw	r5,64(sp)
 c00afc8:	d9000f17 	ldw	r4,60(sp)
 c00afcc:	000d883a 	mov	r6,zero
 c00afd0:	01d00934 	movhi	r7,16420
 c00afd4:	c0142140 	call	c014214 <__muldf3>
 c00afd8:	81000044 	addi	r4,r16,1
 c00afdc:	d8800f15 	stw	r2,60(sp)
 c00afe0:	d8c01015 	stw	r3,64(sp)
 c00afe4:	c0153fc0 	call	c0153fc <__floatsidf>
 c00afe8:	d9800f17 	ldw	r6,60(sp)
 c00afec:	d9c01017 	ldw	r7,64(sp)
 c00aff0:	1009883a 	mov	r4,r2
 c00aff4:	180b883a 	mov	r5,r3
 c00aff8:	c0142140 	call	c014214 <__muldf3>
 c00affc:	01d00734 	movhi	r7,16412
 c00b000:	000d883a 	mov	r6,zero
 c00b004:	1009883a 	mov	r4,r2
 c00b008:	180b883a 	mov	r5,r3
 c00b00c:	c012d400 	call	c012d40 <__adddf3>
 c00b010:	d9c00517 	ldw	r7,20(sp)
 c00b014:	047f3034 	movhi	r17,64704
 c00b018:	1021883a 	mov	r16,r2
 c00b01c:	39ffffc4 	addi	r7,r7,-1
 c00b020:	d9c01315 	stw	r7,76(sp)
 c00b024:	1c63883a 	add	r17,r3,r17
 c00b028:	db000c17 	ldw	r12,48(sp)
 c00b02c:	003bea06 	br	c009fd8 <__alt_data_end+0xfc009fd8>
 c00b030:	dc000915 	stw	r16,36(sp)
 c00b034:	003e0e06 	br	c00a870 <__alt_data_end+0xfc00a870>
 c00b038:	01000e44 	movi	r4,57
 c00b03c:	8825883a 	mov	r18,r17
 c00b040:	9dc00044 	addi	r23,r19,1
 c00b044:	99000005 	stb	r4,0(r19)
 c00b048:	a023883a 	mov	r17,r20
 c00b04c:	dc000915 	stw	r16,36(sp)
 c00b050:	003da406 	br	c00a6e4 <__alt_data_end+0xfc00a6e4>
 c00b054:	d9801417 	ldw	r6,80(sp)
 c00b058:	d9c01517 	ldw	r7,84(sp)
 c00b05c:	0009883a 	mov	r4,zero
 c00b060:	014ff834 	movhi	r5,16352
 c00b064:	c014a800 	call	c014a80 <__subdf3>
 c00b068:	880d883a 	mov	r6,r17
 c00b06c:	a00f883a 	mov	r7,r20
 c00b070:	1009883a 	mov	r4,r2
 c00b074:	180b883a 	mov	r5,r3
 c00b078:	c0140440 	call	c014044 <__gedf2>
 c00b07c:	00bc7c0e 	bge	zero,r2,c00a270 <__alt_data_end+0xfc00a270>
 c00b080:	01000c04 	movi	r4,48
 c00b084:	00000106 	br	c00b08c <_dtoa_r+0x1580>
 c00b088:	102f883a 	mov	r23,r2
 c00b08c:	b8bfffc4 	addi	r2,r23,-1
 c00b090:	10c00007 	ldb	r3,0(r2)
 c00b094:	193ffc26 	beq	r3,r4,c00b088 <__alt_data_end+0xfc00b088>
 c00b098:	d9801317 	ldw	r6,76(sp)
 c00b09c:	d9800515 	stw	r6,20(sp)
 c00b0a0:	003c4406 	br	c00a1b4 <__alt_data_end+0xfc00a1b4>
 c00b0a4:	d9801317 	ldw	r6,76(sp)
 c00b0a8:	d9800515 	stw	r6,20(sp)
 c00b0ac:	003cea06 	br	c00a458 <__alt_data_end+0xfc00a458>
 c00b0b0:	dd800f17 	ldw	r22,60(sp)
 c00b0b4:	dcc01017 	ldw	r19,64(sp)
 c00b0b8:	dc801217 	ldw	r18,72(sp)
 c00b0bc:	003c6c06 	br	c00a270 <__alt_data_end+0xfc00a270>
 c00b0c0:	903e031e 	bne	r18,zero,c00a8d0 <__alt_data_end+0xfc00a8d0>
 c00b0c4:	003ebb06 	br	c00abb4 <__alt_data_end+0xfc00abb4>
 c00b0c8:	103e6c1e 	bne	r2,zero,c00aa7c <__alt_data_end+0xfc00aa7c>
 c00b0cc:	4080004c 	andi	r2,r8,1
 c00b0d0:	103e6a26 	beq	r2,zero,c00aa7c <__alt_data_end+0xfc00aa7c>
 c00b0d4:	003e6606 	br	c00aa70 <__alt_data_end+0xfc00aa70>
 c00b0d8:	d8c00317 	ldw	r3,12(sp)
 c00b0dc:	00800084 	movi	r2,2
 c00b0e0:	10c02916 	blt	r2,r3,c00b188 <_dtoa_r+0x167c>
 c00b0e4:	d9000c17 	ldw	r4,48(sp)
 c00b0e8:	003e8806 	br	c00ab0c <__alt_data_end+0xfc00ab0c>
 c00b0ec:	04000084 	movi	r16,2
 c00b0f0:	003b9d06 	br	c009f68 <__alt_data_end+0xfc009f68>
 c00b0f4:	d9001317 	ldw	r4,76(sp)
 c00b0f8:	d9000515 	stw	r4,20(sp)
 c00b0fc:	003cd606 	br	c00a458 <__alt_data_end+0xfc00a458>
 c00b100:	d8801317 	ldw	r2,76(sp)
 c00b104:	d8800515 	stw	r2,20(sp)
 c00b108:	003c2a06 	br	c00a1b4 <__alt_data_end+0xfc00a1b4>
 c00b10c:	d9800317 	ldw	r6,12(sp)
 c00b110:	00800084 	movi	r2,2
 c00b114:	11801516 	blt	r2,r6,c00b16c <_dtoa_r+0x1660>
 c00b118:	d9c00c17 	ldw	r7,48(sp)
 c00b11c:	d9c00615 	stw	r7,24(sp)
 c00b120:	003df706 	br	c00a900 <__alt_data_end+0xfc00a900>
 c00b124:	193d3926 	beq	r3,r4,c00a60c <__alt_data_end+0xfc00a60c>
 c00b128:	00c00f04 	movi	r3,60
 c00b12c:	1885c83a 	sub	r2,r3,r2
 c00b130:	003ddf06 	br	c00a8b0 <__alt_data_end+0xfc00a8b0>
 c00b134:	e009883a 	mov	r4,fp
 c00b138:	e0001115 	stw	zero,68(fp)
 c00b13c:	000b883a 	mov	r5,zero
 c00b140:	c00d1c40 	call	c00d1c4 <_Balloc>
 c00b144:	d8800715 	stw	r2,28(sp)
 c00b148:	d8c00717 	ldw	r3,28(sp)
 c00b14c:	00bfffc4 	movi	r2,-1
 c00b150:	01000044 	movi	r4,1
 c00b154:	d8800c15 	stw	r2,48(sp)
 c00b158:	e0c01015 	stw	r3,64(fp)
 c00b15c:	d9000b15 	stw	r4,44(sp)
 c00b160:	d8800615 	stw	r2,24(sp)
 c00b164:	d8002215 	stw	zero,136(sp)
 c00b168:	003c4106 	br	c00a270 <__alt_data_end+0xfc00a270>
 c00b16c:	d8c00c17 	ldw	r3,48(sp)
 c00b170:	d8c00615 	stw	r3,24(sp)
 c00b174:	003e7006 	br	c00ab38 <__alt_data_end+0xfc00ab38>
 c00b178:	04400044 	movi	r17,1
 c00b17c:	003b2006 	br	c009e00 <__alt_data_end+0xfc009e00>
 c00b180:	000b883a 	mov	r5,zero
 c00b184:	003b3d06 	br	c009e7c <__alt_data_end+0xfc009e7c>
 c00b188:	d8800c17 	ldw	r2,48(sp)
 c00b18c:	d8800615 	stw	r2,24(sp)
 c00b190:	003e6906 	br	c00ab38 <__alt_data_end+0xfc00ab38>

0c00b194 <__sflush_r>:
 c00b194:	2880030b 	ldhu	r2,12(r5)
 c00b198:	defffb04 	addi	sp,sp,-20
 c00b19c:	dcc00315 	stw	r19,12(sp)
 c00b1a0:	dc400115 	stw	r17,4(sp)
 c00b1a4:	dfc00415 	stw	ra,16(sp)
 c00b1a8:	dc800215 	stw	r18,8(sp)
 c00b1ac:	dc000015 	stw	r16,0(sp)
 c00b1b0:	10c0020c 	andi	r3,r2,8
 c00b1b4:	2823883a 	mov	r17,r5
 c00b1b8:	2027883a 	mov	r19,r4
 c00b1bc:	1800311e 	bne	r3,zero,c00b284 <__sflush_r+0xf0>
 c00b1c0:	28c00117 	ldw	r3,4(r5)
 c00b1c4:	10820014 	ori	r2,r2,2048
 c00b1c8:	2880030d 	sth	r2,12(r5)
 c00b1cc:	00c04b0e 	bge	zero,r3,c00b2fc <__sflush_r+0x168>
 c00b1d0:	8a000a17 	ldw	r8,40(r17)
 c00b1d4:	40002326 	beq	r8,zero,c00b264 <__sflush_r+0xd0>
 c00b1d8:	9c000017 	ldw	r16,0(r19)
 c00b1dc:	10c4000c 	andi	r3,r2,4096
 c00b1e0:	98000015 	stw	zero,0(r19)
 c00b1e4:	18004826 	beq	r3,zero,c00b308 <__sflush_r+0x174>
 c00b1e8:	89801417 	ldw	r6,80(r17)
 c00b1ec:	10c0010c 	andi	r3,r2,4
 c00b1f0:	18000626 	beq	r3,zero,c00b20c <__sflush_r+0x78>
 c00b1f4:	88c00117 	ldw	r3,4(r17)
 c00b1f8:	88800c17 	ldw	r2,48(r17)
 c00b1fc:	30cdc83a 	sub	r6,r6,r3
 c00b200:	10000226 	beq	r2,zero,c00b20c <__sflush_r+0x78>
 c00b204:	88800f17 	ldw	r2,60(r17)
 c00b208:	308dc83a 	sub	r6,r6,r2
 c00b20c:	89400717 	ldw	r5,28(r17)
 c00b210:	000f883a 	mov	r7,zero
 c00b214:	9809883a 	mov	r4,r19
 c00b218:	403ee83a 	callr	r8
 c00b21c:	00ffffc4 	movi	r3,-1
 c00b220:	10c04426 	beq	r2,r3,c00b334 <__sflush_r+0x1a0>
 c00b224:	88c0030b 	ldhu	r3,12(r17)
 c00b228:	89000417 	ldw	r4,16(r17)
 c00b22c:	88000115 	stw	zero,4(r17)
 c00b230:	197dffcc 	andi	r5,r3,63487
 c00b234:	8940030d 	sth	r5,12(r17)
 c00b238:	89000015 	stw	r4,0(r17)
 c00b23c:	18c4000c 	andi	r3,r3,4096
 c00b240:	18002c1e 	bne	r3,zero,c00b2f4 <__sflush_r+0x160>
 c00b244:	89400c17 	ldw	r5,48(r17)
 c00b248:	9c000015 	stw	r16,0(r19)
 c00b24c:	28000526 	beq	r5,zero,c00b264 <__sflush_r+0xd0>
 c00b250:	88801004 	addi	r2,r17,64
 c00b254:	28800226 	beq	r5,r2,c00b260 <__sflush_r+0xcc>
 c00b258:	9809883a 	mov	r4,r19
 c00b25c:	c00b9100 	call	c00b910 <_free_r>
 c00b260:	88000c15 	stw	zero,48(r17)
 c00b264:	0005883a 	mov	r2,zero
 c00b268:	dfc00417 	ldw	ra,16(sp)
 c00b26c:	dcc00317 	ldw	r19,12(sp)
 c00b270:	dc800217 	ldw	r18,8(sp)
 c00b274:	dc400117 	ldw	r17,4(sp)
 c00b278:	dc000017 	ldw	r16,0(sp)
 c00b27c:	dec00504 	addi	sp,sp,20
 c00b280:	f800283a 	ret
 c00b284:	2c800417 	ldw	r18,16(r5)
 c00b288:	903ff626 	beq	r18,zero,c00b264 <__alt_data_end+0xfc00b264>
 c00b28c:	2c000017 	ldw	r16,0(r5)
 c00b290:	108000cc 	andi	r2,r2,3
 c00b294:	2c800015 	stw	r18,0(r5)
 c00b298:	84a1c83a 	sub	r16,r16,r18
 c00b29c:	1000131e 	bne	r2,zero,c00b2ec <__sflush_r+0x158>
 c00b2a0:	28800517 	ldw	r2,20(r5)
 c00b2a4:	88800215 	stw	r2,8(r17)
 c00b2a8:	04000316 	blt	zero,r16,c00b2b8 <__sflush_r+0x124>
 c00b2ac:	003fed06 	br	c00b264 <__alt_data_end+0xfc00b264>
 c00b2b0:	90a5883a 	add	r18,r18,r2
 c00b2b4:	043feb0e 	bge	zero,r16,c00b264 <__alt_data_end+0xfc00b264>
 c00b2b8:	88800917 	ldw	r2,36(r17)
 c00b2bc:	89400717 	ldw	r5,28(r17)
 c00b2c0:	800f883a 	mov	r7,r16
 c00b2c4:	900d883a 	mov	r6,r18
 c00b2c8:	9809883a 	mov	r4,r19
 c00b2cc:	103ee83a 	callr	r2
 c00b2d0:	80a1c83a 	sub	r16,r16,r2
 c00b2d4:	00bff616 	blt	zero,r2,c00b2b0 <__alt_data_end+0xfc00b2b0>
 c00b2d8:	88c0030b 	ldhu	r3,12(r17)
 c00b2dc:	00bfffc4 	movi	r2,-1
 c00b2e0:	18c01014 	ori	r3,r3,64
 c00b2e4:	88c0030d 	sth	r3,12(r17)
 c00b2e8:	003fdf06 	br	c00b268 <__alt_data_end+0xfc00b268>
 c00b2ec:	0005883a 	mov	r2,zero
 c00b2f0:	003fec06 	br	c00b2a4 <__alt_data_end+0xfc00b2a4>
 c00b2f4:	88801415 	stw	r2,80(r17)
 c00b2f8:	003fd206 	br	c00b244 <__alt_data_end+0xfc00b244>
 c00b2fc:	28c00f17 	ldw	r3,60(r5)
 c00b300:	00ffb316 	blt	zero,r3,c00b1d0 <__alt_data_end+0xfc00b1d0>
 c00b304:	003fd706 	br	c00b264 <__alt_data_end+0xfc00b264>
 c00b308:	89400717 	ldw	r5,28(r17)
 c00b30c:	000d883a 	mov	r6,zero
 c00b310:	01c00044 	movi	r7,1
 c00b314:	9809883a 	mov	r4,r19
 c00b318:	403ee83a 	callr	r8
 c00b31c:	100d883a 	mov	r6,r2
 c00b320:	00bfffc4 	movi	r2,-1
 c00b324:	30801426 	beq	r6,r2,c00b378 <__sflush_r+0x1e4>
 c00b328:	8880030b 	ldhu	r2,12(r17)
 c00b32c:	8a000a17 	ldw	r8,40(r17)
 c00b330:	003fae06 	br	c00b1ec <__alt_data_end+0xfc00b1ec>
 c00b334:	98c00017 	ldw	r3,0(r19)
 c00b338:	183fba26 	beq	r3,zero,c00b224 <__alt_data_end+0xfc00b224>
 c00b33c:	01000744 	movi	r4,29
 c00b340:	19000626 	beq	r3,r4,c00b35c <__sflush_r+0x1c8>
 c00b344:	01000584 	movi	r4,22
 c00b348:	19000426 	beq	r3,r4,c00b35c <__sflush_r+0x1c8>
 c00b34c:	88c0030b 	ldhu	r3,12(r17)
 c00b350:	18c01014 	ori	r3,r3,64
 c00b354:	88c0030d 	sth	r3,12(r17)
 c00b358:	003fc306 	br	c00b268 <__alt_data_end+0xfc00b268>
 c00b35c:	8880030b 	ldhu	r2,12(r17)
 c00b360:	88c00417 	ldw	r3,16(r17)
 c00b364:	88000115 	stw	zero,4(r17)
 c00b368:	10bdffcc 	andi	r2,r2,63487
 c00b36c:	8880030d 	sth	r2,12(r17)
 c00b370:	88c00015 	stw	r3,0(r17)
 c00b374:	003fb306 	br	c00b244 <__alt_data_end+0xfc00b244>
 c00b378:	98800017 	ldw	r2,0(r19)
 c00b37c:	103fea26 	beq	r2,zero,c00b328 <__alt_data_end+0xfc00b328>
 c00b380:	00c00744 	movi	r3,29
 c00b384:	10c00226 	beq	r2,r3,c00b390 <__sflush_r+0x1fc>
 c00b388:	00c00584 	movi	r3,22
 c00b38c:	10c0031e 	bne	r2,r3,c00b39c <__sflush_r+0x208>
 c00b390:	9c000015 	stw	r16,0(r19)
 c00b394:	0005883a 	mov	r2,zero
 c00b398:	003fb306 	br	c00b268 <__alt_data_end+0xfc00b268>
 c00b39c:	88c0030b 	ldhu	r3,12(r17)
 c00b3a0:	3005883a 	mov	r2,r6
 c00b3a4:	18c01014 	ori	r3,r3,64
 c00b3a8:	88c0030d 	sth	r3,12(r17)
 c00b3ac:	003fae06 	br	c00b268 <__alt_data_end+0xfc00b268>

0c00b3b0 <_fflush_r>:
 c00b3b0:	defffd04 	addi	sp,sp,-12
 c00b3b4:	dc000115 	stw	r16,4(sp)
 c00b3b8:	dfc00215 	stw	ra,8(sp)
 c00b3bc:	2021883a 	mov	r16,r4
 c00b3c0:	20000226 	beq	r4,zero,c00b3cc <_fflush_r+0x1c>
 c00b3c4:	20800e17 	ldw	r2,56(r4)
 c00b3c8:	10000c26 	beq	r2,zero,c00b3fc <_fflush_r+0x4c>
 c00b3cc:	2880030f 	ldh	r2,12(r5)
 c00b3d0:	1000051e 	bne	r2,zero,c00b3e8 <_fflush_r+0x38>
 c00b3d4:	0005883a 	mov	r2,zero
 c00b3d8:	dfc00217 	ldw	ra,8(sp)
 c00b3dc:	dc000117 	ldw	r16,4(sp)
 c00b3e0:	dec00304 	addi	sp,sp,12
 c00b3e4:	f800283a 	ret
 c00b3e8:	8009883a 	mov	r4,r16
 c00b3ec:	dfc00217 	ldw	ra,8(sp)
 c00b3f0:	dc000117 	ldw	r16,4(sp)
 c00b3f4:	dec00304 	addi	sp,sp,12
 c00b3f8:	c00b1941 	jmpi	c00b194 <__sflush_r>
 c00b3fc:	d9400015 	stw	r5,0(sp)
 c00b400:	c00b79c0 	call	c00b79c <__sinit>
 c00b404:	d9400017 	ldw	r5,0(sp)
 c00b408:	003ff006 	br	c00b3cc <__alt_data_end+0xfc00b3cc>

0c00b40c <fflush>:
 c00b40c:	20000526 	beq	r4,zero,c00b424 <fflush+0x18>
 c00b410:	008300b4 	movhi	r2,3074
 c00b414:	10aa2604 	addi	r2,r2,-22376
 c00b418:	200b883a 	mov	r5,r4
 c00b41c:	11000017 	ldw	r4,0(r2)
 c00b420:	c00b3b01 	jmpi	c00b3b0 <_fflush_r>
 c00b424:	008300b4 	movhi	r2,3074
 c00b428:	10aa2504 	addi	r2,r2,-22380
 c00b42c:	11000017 	ldw	r4,0(r2)
 c00b430:	01430074 	movhi	r5,3073
 c00b434:	296cec04 	addi	r5,r5,-19536
 c00b438:	c00c1ac1 	jmpi	c00c1ac <_fwalk_reent>

0c00b43c <__fp_unlock>:
 c00b43c:	0005883a 	mov	r2,zero
 c00b440:	f800283a 	ret

0c00b444 <_cleanup_r>:
 c00b444:	01430074 	movhi	r5,3073
 c00b448:	29462e04 	addi	r5,r5,6328
 c00b44c:	c00c1ac1 	jmpi	c00c1ac <_fwalk_reent>

0c00b450 <__sinit.part.1>:
 c00b450:	defff704 	addi	sp,sp,-36
 c00b454:	00c30074 	movhi	r3,3073
 c00b458:	dfc00815 	stw	ra,32(sp)
 c00b45c:	ddc00715 	stw	r23,28(sp)
 c00b460:	dd800615 	stw	r22,24(sp)
 c00b464:	dd400515 	stw	r21,20(sp)
 c00b468:	dd000415 	stw	r20,16(sp)
 c00b46c:	dcc00315 	stw	r19,12(sp)
 c00b470:	dc800215 	stw	r18,8(sp)
 c00b474:	dc400115 	stw	r17,4(sp)
 c00b478:	dc000015 	stw	r16,0(sp)
 c00b47c:	18ed1104 	addi	r3,r3,-19388
 c00b480:	24000117 	ldw	r16,4(r4)
 c00b484:	20c00f15 	stw	r3,60(r4)
 c00b488:	2080bb04 	addi	r2,r4,748
 c00b48c:	00c000c4 	movi	r3,3
 c00b490:	20c0b915 	stw	r3,740(r4)
 c00b494:	2080ba15 	stw	r2,744(r4)
 c00b498:	2000b815 	stw	zero,736(r4)
 c00b49c:	05c00204 	movi	r23,8
 c00b4a0:	00800104 	movi	r2,4
 c00b4a4:	2025883a 	mov	r18,r4
 c00b4a8:	b80d883a 	mov	r6,r23
 c00b4ac:	81001704 	addi	r4,r16,92
 c00b4b0:	000b883a 	mov	r5,zero
 c00b4b4:	80000015 	stw	zero,0(r16)
 c00b4b8:	80000115 	stw	zero,4(r16)
 c00b4bc:	80000215 	stw	zero,8(r16)
 c00b4c0:	8080030d 	sth	r2,12(r16)
 c00b4c4:	80001915 	stw	zero,100(r16)
 c00b4c8:	8000038d 	sth	zero,14(r16)
 c00b4cc:	80000415 	stw	zero,16(r16)
 c00b4d0:	80000515 	stw	zero,20(r16)
 c00b4d4:	80000615 	stw	zero,24(r16)
 c00b4d8:	c00d09c0 	call	c00d09c <memset>
 c00b4dc:	05830074 	movhi	r22,3073
 c00b4e0:	94400217 	ldw	r17,8(r18)
 c00b4e4:	05430074 	movhi	r21,3073
 c00b4e8:	05030074 	movhi	r20,3073
 c00b4ec:	04c30074 	movhi	r19,3073
 c00b4f0:	b5ba2a04 	addi	r22,r22,-5976
 c00b4f4:	ad7a4104 	addi	r21,r21,-5884
 c00b4f8:	a53a6004 	addi	r20,r20,-5760
 c00b4fc:	9cfa7704 	addi	r19,r19,-5668
 c00b500:	85800815 	stw	r22,32(r16)
 c00b504:	85400915 	stw	r21,36(r16)
 c00b508:	85000a15 	stw	r20,40(r16)
 c00b50c:	84c00b15 	stw	r19,44(r16)
 c00b510:	84000715 	stw	r16,28(r16)
 c00b514:	00800284 	movi	r2,10
 c00b518:	8880030d 	sth	r2,12(r17)
 c00b51c:	00800044 	movi	r2,1
 c00b520:	b80d883a 	mov	r6,r23
 c00b524:	89001704 	addi	r4,r17,92
 c00b528:	000b883a 	mov	r5,zero
 c00b52c:	88000015 	stw	zero,0(r17)
 c00b530:	88000115 	stw	zero,4(r17)
 c00b534:	88000215 	stw	zero,8(r17)
 c00b538:	88001915 	stw	zero,100(r17)
 c00b53c:	8880038d 	sth	r2,14(r17)
 c00b540:	88000415 	stw	zero,16(r17)
 c00b544:	88000515 	stw	zero,20(r17)
 c00b548:	88000615 	stw	zero,24(r17)
 c00b54c:	c00d09c0 	call	c00d09c <memset>
 c00b550:	94000317 	ldw	r16,12(r18)
 c00b554:	00800484 	movi	r2,18
 c00b558:	8c400715 	stw	r17,28(r17)
 c00b55c:	8d800815 	stw	r22,32(r17)
 c00b560:	8d400915 	stw	r21,36(r17)
 c00b564:	8d000a15 	stw	r20,40(r17)
 c00b568:	8cc00b15 	stw	r19,44(r17)
 c00b56c:	8080030d 	sth	r2,12(r16)
 c00b570:	00800084 	movi	r2,2
 c00b574:	80000015 	stw	zero,0(r16)
 c00b578:	80000115 	stw	zero,4(r16)
 c00b57c:	80000215 	stw	zero,8(r16)
 c00b580:	80001915 	stw	zero,100(r16)
 c00b584:	8080038d 	sth	r2,14(r16)
 c00b588:	80000415 	stw	zero,16(r16)
 c00b58c:	80000515 	stw	zero,20(r16)
 c00b590:	80000615 	stw	zero,24(r16)
 c00b594:	b80d883a 	mov	r6,r23
 c00b598:	000b883a 	mov	r5,zero
 c00b59c:	81001704 	addi	r4,r16,92
 c00b5a0:	c00d09c0 	call	c00d09c <memset>
 c00b5a4:	00800044 	movi	r2,1
 c00b5a8:	84000715 	stw	r16,28(r16)
 c00b5ac:	85800815 	stw	r22,32(r16)
 c00b5b0:	85400915 	stw	r21,36(r16)
 c00b5b4:	85000a15 	stw	r20,40(r16)
 c00b5b8:	84c00b15 	stw	r19,44(r16)
 c00b5bc:	90800e15 	stw	r2,56(r18)
 c00b5c0:	dfc00817 	ldw	ra,32(sp)
 c00b5c4:	ddc00717 	ldw	r23,28(sp)
 c00b5c8:	dd800617 	ldw	r22,24(sp)
 c00b5cc:	dd400517 	ldw	r21,20(sp)
 c00b5d0:	dd000417 	ldw	r20,16(sp)
 c00b5d4:	dcc00317 	ldw	r19,12(sp)
 c00b5d8:	dc800217 	ldw	r18,8(sp)
 c00b5dc:	dc400117 	ldw	r17,4(sp)
 c00b5e0:	dc000017 	ldw	r16,0(sp)
 c00b5e4:	dec00904 	addi	sp,sp,36
 c00b5e8:	f800283a 	ret

0c00b5ec <__fp_lock>:
 c00b5ec:	0005883a 	mov	r2,zero
 c00b5f0:	f800283a 	ret

0c00b5f4 <__sfmoreglue>:
 c00b5f4:	defffc04 	addi	sp,sp,-16
 c00b5f8:	dc800215 	stw	r18,8(sp)
 c00b5fc:	2825883a 	mov	r18,r5
 c00b600:	dc000015 	stw	r16,0(sp)
 c00b604:	01401a04 	movi	r5,104
 c00b608:	2021883a 	mov	r16,r4
 c00b60c:	913fffc4 	addi	r4,r18,-1
 c00b610:	dfc00315 	stw	ra,12(sp)
 c00b614:	dc400115 	stw	r17,4(sp)
 c00b618:	c004de00 	call	c004de0 <__mulsi3>
 c00b61c:	8009883a 	mov	r4,r16
 c00b620:	11401d04 	addi	r5,r2,116
 c00b624:	1023883a 	mov	r17,r2
 c00b628:	c00c5080 	call	c00c508 <_malloc_r>
 c00b62c:	1021883a 	mov	r16,r2
 c00b630:	10000726 	beq	r2,zero,c00b650 <__sfmoreglue+0x5c>
 c00b634:	11000304 	addi	r4,r2,12
 c00b638:	10000015 	stw	zero,0(r2)
 c00b63c:	14800115 	stw	r18,4(r2)
 c00b640:	11000215 	stw	r4,8(r2)
 c00b644:	89801a04 	addi	r6,r17,104
 c00b648:	000b883a 	mov	r5,zero
 c00b64c:	c00d09c0 	call	c00d09c <memset>
 c00b650:	8005883a 	mov	r2,r16
 c00b654:	dfc00317 	ldw	ra,12(sp)
 c00b658:	dc800217 	ldw	r18,8(sp)
 c00b65c:	dc400117 	ldw	r17,4(sp)
 c00b660:	dc000017 	ldw	r16,0(sp)
 c00b664:	dec00404 	addi	sp,sp,16
 c00b668:	f800283a 	ret

0c00b66c <__sfp>:
 c00b66c:	defffb04 	addi	sp,sp,-20
 c00b670:	dc000015 	stw	r16,0(sp)
 c00b674:	040300b4 	movhi	r16,3074
 c00b678:	842a2504 	addi	r16,r16,-22380
 c00b67c:	dcc00315 	stw	r19,12(sp)
 c00b680:	2027883a 	mov	r19,r4
 c00b684:	81000017 	ldw	r4,0(r16)
 c00b688:	dfc00415 	stw	ra,16(sp)
 c00b68c:	dc800215 	stw	r18,8(sp)
 c00b690:	20800e17 	ldw	r2,56(r4)
 c00b694:	dc400115 	stw	r17,4(sp)
 c00b698:	1000021e 	bne	r2,zero,c00b6a4 <__sfp+0x38>
 c00b69c:	c00b4500 	call	c00b450 <__sinit.part.1>
 c00b6a0:	81000017 	ldw	r4,0(r16)
 c00b6a4:	2480b804 	addi	r18,r4,736
 c00b6a8:	047fffc4 	movi	r17,-1
 c00b6ac:	91000117 	ldw	r4,4(r18)
 c00b6b0:	94000217 	ldw	r16,8(r18)
 c00b6b4:	213fffc4 	addi	r4,r4,-1
 c00b6b8:	20000a16 	blt	r4,zero,c00b6e4 <__sfp+0x78>
 c00b6bc:	8080030f 	ldh	r2,12(r16)
 c00b6c0:	10000c26 	beq	r2,zero,c00b6f4 <__sfp+0x88>
 c00b6c4:	80c01d04 	addi	r3,r16,116
 c00b6c8:	00000206 	br	c00b6d4 <__sfp+0x68>
 c00b6cc:	18bfe60f 	ldh	r2,-104(r3)
 c00b6d0:	10000826 	beq	r2,zero,c00b6f4 <__sfp+0x88>
 c00b6d4:	213fffc4 	addi	r4,r4,-1
 c00b6d8:	1c3ffd04 	addi	r16,r3,-12
 c00b6dc:	18c01a04 	addi	r3,r3,104
 c00b6e0:	247ffa1e 	bne	r4,r17,c00b6cc <__alt_data_end+0xfc00b6cc>
 c00b6e4:	90800017 	ldw	r2,0(r18)
 c00b6e8:	10001d26 	beq	r2,zero,c00b760 <__sfp+0xf4>
 c00b6ec:	1025883a 	mov	r18,r2
 c00b6f0:	003fee06 	br	c00b6ac <__alt_data_end+0xfc00b6ac>
 c00b6f4:	00bfffc4 	movi	r2,-1
 c00b6f8:	8080038d 	sth	r2,14(r16)
 c00b6fc:	00800044 	movi	r2,1
 c00b700:	8080030d 	sth	r2,12(r16)
 c00b704:	80001915 	stw	zero,100(r16)
 c00b708:	80000015 	stw	zero,0(r16)
 c00b70c:	80000215 	stw	zero,8(r16)
 c00b710:	80000115 	stw	zero,4(r16)
 c00b714:	80000415 	stw	zero,16(r16)
 c00b718:	80000515 	stw	zero,20(r16)
 c00b71c:	80000615 	stw	zero,24(r16)
 c00b720:	01800204 	movi	r6,8
 c00b724:	000b883a 	mov	r5,zero
 c00b728:	81001704 	addi	r4,r16,92
 c00b72c:	c00d09c0 	call	c00d09c <memset>
 c00b730:	8005883a 	mov	r2,r16
 c00b734:	80000c15 	stw	zero,48(r16)
 c00b738:	80000d15 	stw	zero,52(r16)
 c00b73c:	80001115 	stw	zero,68(r16)
 c00b740:	80001215 	stw	zero,72(r16)
 c00b744:	dfc00417 	ldw	ra,16(sp)
 c00b748:	dcc00317 	ldw	r19,12(sp)
 c00b74c:	dc800217 	ldw	r18,8(sp)
 c00b750:	dc400117 	ldw	r17,4(sp)
 c00b754:	dc000017 	ldw	r16,0(sp)
 c00b758:	dec00504 	addi	sp,sp,20
 c00b75c:	f800283a 	ret
 c00b760:	01400104 	movi	r5,4
 c00b764:	9809883a 	mov	r4,r19
 c00b768:	c00b5f40 	call	c00b5f4 <__sfmoreglue>
 c00b76c:	90800015 	stw	r2,0(r18)
 c00b770:	103fde1e 	bne	r2,zero,c00b6ec <__alt_data_end+0xfc00b6ec>
 c00b774:	00800304 	movi	r2,12
 c00b778:	98800015 	stw	r2,0(r19)
 c00b77c:	0005883a 	mov	r2,zero
 c00b780:	003ff006 	br	c00b744 <__alt_data_end+0xfc00b744>

0c00b784 <_cleanup>:
 c00b784:	008300b4 	movhi	r2,3074
 c00b788:	10aa2504 	addi	r2,r2,-22380
 c00b78c:	11000017 	ldw	r4,0(r2)
 c00b790:	01430074 	movhi	r5,3073
 c00b794:	29462e04 	addi	r5,r5,6328
 c00b798:	c00c1ac1 	jmpi	c00c1ac <_fwalk_reent>

0c00b79c <__sinit>:
 c00b79c:	20800e17 	ldw	r2,56(r4)
 c00b7a0:	10000126 	beq	r2,zero,c00b7a8 <__sinit+0xc>
 c00b7a4:	f800283a 	ret
 c00b7a8:	c00b4501 	jmpi	c00b450 <__sinit.part.1>

0c00b7ac <__sfp_lock_acquire>:
 c00b7ac:	f800283a 	ret

0c00b7b0 <__sfp_lock_release>:
 c00b7b0:	f800283a 	ret

0c00b7b4 <__sinit_lock_acquire>:
 c00b7b4:	f800283a 	ret

0c00b7b8 <__sinit_lock_release>:
 c00b7b8:	f800283a 	ret

0c00b7bc <__fp_lock_all>:
 c00b7bc:	008300b4 	movhi	r2,3074
 c00b7c0:	10aa2604 	addi	r2,r2,-22376
 c00b7c4:	11000017 	ldw	r4,0(r2)
 c00b7c8:	01430074 	movhi	r5,3073
 c00b7cc:	296d7b04 	addi	r5,r5,-18964
 c00b7d0:	c00c0e81 	jmpi	c00c0e8 <_fwalk>

0c00b7d4 <__fp_unlock_all>:
 c00b7d4:	008300b4 	movhi	r2,3074
 c00b7d8:	10aa2604 	addi	r2,r2,-22376
 c00b7dc:	11000017 	ldw	r4,0(r2)
 c00b7e0:	01430074 	movhi	r5,3073
 c00b7e4:	296d0f04 	addi	r5,r5,-19396
 c00b7e8:	c00c0e81 	jmpi	c00c0e8 <_fwalk>

0c00b7ec <_malloc_trim_r>:
 c00b7ec:	defffb04 	addi	sp,sp,-20
 c00b7f0:	dcc00315 	stw	r19,12(sp)
 c00b7f4:	04c300b4 	movhi	r19,3074
 c00b7f8:	dc800215 	stw	r18,8(sp)
 c00b7fc:	dc400115 	stw	r17,4(sp)
 c00b800:	dc000015 	stw	r16,0(sp)
 c00b804:	dfc00415 	stw	ra,16(sp)
 c00b808:	2821883a 	mov	r16,r5
 c00b80c:	9ce49904 	addi	r19,r19,-28060
 c00b810:	2025883a 	mov	r18,r4
 c00b814:	c015b800 	call	c015b80 <__malloc_lock>
 c00b818:	98800217 	ldw	r2,8(r19)
 c00b81c:	14400117 	ldw	r17,4(r2)
 c00b820:	00bfff04 	movi	r2,-4
 c00b824:	88a2703a 	and	r17,r17,r2
 c00b828:	8c21c83a 	sub	r16,r17,r16
 c00b82c:	8403fbc4 	addi	r16,r16,4079
 c00b830:	8020d33a 	srli	r16,r16,12
 c00b834:	0083ffc4 	movi	r2,4095
 c00b838:	843fffc4 	addi	r16,r16,-1
 c00b83c:	8020933a 	slli	r16,r16,12
 c00b840:	1400060e 	bge	r2,r16,c00b85c <_malloc_trim_r+0x70>
 c00b844:	000b883a 	mov	r5,zero
 c00b848:	9009883a 	mov	r4,r18
 c00b84c:	c00e8540 	call	c00e854 <_sbrk_r>
 c00b850:	98c00217 	ldw	r3,8(r19)
 c00b854:	1c47883a 	add	r3,r3,r17
 c00b858:	10c00a26 	beq	r2,r3,c00b884 <_malloc_trim_r+0x98>
 c00b85c:	9009883a 	mov	r4,r18
 c00b860:	c015ba40 	call	c015ba4 <__malloc_unlock>
 c00b864:	0005883a 	mov	r2,zero
 c00b868:	dfc00417 	ldw	ra,16(sp)
 c00b86c:	dcc00317 	ldw	r19,12(sp)
 c00b870:	dc800217 	ldw	r18,8(sp)
 c00b874:	dc400117 	ldw	r17,4(sp)
 c00b878:	dc000017 	ldw	r16,0(sp)
 c00b87c:	dec00504 	addi	sp,sp,20
 c00b880:	f800283a 	ret
 c00b884:	040bc83a 	sub	r5,zero,r16
 c00b888:	9009883a 	mov	r4,r18
 c00b88c:	c00e8540 	call	c00e854 <_sbrk_r>
 c00b890:	00ffffc4 	movi	r3,-1
 c00b894:	10c00d26 	beq	r2,r3,c00b8cc <_malloc_trim_r+0xe0>
 c00b898:	00c300b4 	movhi	r3,3074
 c00b89c:	18f1da04 	addi	r3,r3,-14488
 c00b8a0:	18800017 	ldw	r2,0(r3)
 c00b8a4:	99000217 	ldw	r4,8(r19)
 c00b8a8:	8c23c83a 	sub	r17,r17,r16
 c00b8ac:	8c400054 	ori	r17,r17,1
 c00b8b0:	1421c83a 	sub	r16,r2,r16
 c00b8b4:	24400115 	stw	r17,4(r4)
 c00b8b8:	9009883a 	mov	r4,r18
 c00b8bc:	1c000015 	stw	r16,0(r3)
 c00b8c0:	c015ba40 	call	c015ba4 <__malloc_unlock>
 c00b8c4:	00800044 	movi	r2,1
 c00b8c8:	003fe706 	br	c00b868 <__alt_data_end+0xfc00b868>
 c00b8cc:	000b883a 	mov	r5,zero
 c00b8d0:	9009883a 	mov	r4,r18
 c00b8d4:	c00e8540 	call	c00e854 <_sbrk_r>
 c00b8d8:	99000217 	ldw	r4,8(r19)
 c00b8dc:	014003c4 	movi	r5,15
 c00b8e0:	1107c83a 	sub	r3,r2,r4
 c00b8e4:	28ffdd0e 	bge	r5,r3,c00b85c <__alt_data_end+0xfc00b85c>
 c00b8e8:	014300b4 	movhi	r5,3074
 c00b8ec:	296a2804 	addi	r5,r5,-22368
 c00b8f0:	29400017 	ldw	r5,0(r5)
 c00b8f4:	18c00054 	ori	r3,r3,1
 c00b8f8:	20c00115 	stw	r3,4(r4)
 c00b8fc:	00c300b4 	movhi	r3,3074
 c00b900:	1145c83a 	sub	r2,r2,r5
 c00b904:	18f1da04 	addi	r3,r3,-14488
 c00b908:	18800015 	stw	r2,0(r3)
 c00b90c:	003fd306 	br	c00b85c <__alt_data_end+0xfc00b85c>

0c00b910 <_free_r>:
 c00b910:	28004126 	beq	r5,zero,c00ba18 <_free_r+0x108>
 c00b914:	defffd04 	addi	sp,sp,-12
 c00b918:	dc400115 	stw	r17,4(sp)
 c00b91c:	dc000015 	stw	r16,0(sp)
 c00b920:	2023883a 	mov	r17,r4
 c00b924:	2821883a 	mov	r16,r5
 c00b928:	dfc00215 	stw	ra,8(sp)
 c00b92c:	c015b800 	call	c015b80 <__malloc_lock>
 c00b930:	81ffff17 	ldw	r7,-4(r16)
 c00b934:	00bfff84 	movi	r2,-2
 c00b938:	010300b4 	movhi	r4,3074
 c00b93c:	81bffe04 	addi	r6,r16,-8
 c00b940:	3884703a 	and	r2,r7,r2
 c00b944:	21249904 	addi	r4,r4,-28060
 c00b948:	308b883a 	add	r5,r6,r2
 c00b94c:	2a400117 	ldw	r9,4(r5)
 c00b950:	22000217 	ldw	r8,8(r4)
 c00b954:	00ffff04 	movi	r3,-4
 c00b958:	48c6703a 	and	r3,r9,r3
 c00b95c:	2a005726 	beq	r5,r8,c00babc <_free_r+0x1ac>
 c00b960:	28c00115 	stw	r3,4(r5)
 c00b964:	39c0004c 	andi	r7,r7,1
 c00b968:	3800091e 	bne	r7,zero,c00b990 <_free_r+0x80>
 c00b96c:	823ffe17 	ldw	r8,-8(r16)
 c00b970:	22400204 	addi	r9,r4,8
 c00b974:	320dc83a 	sub	r6,r6,r8
 c00b978:	31c00217 	ldw	r7,8(r6)
 c00b97c:	1205883a 	add	r2,r2,r8
 c00b980:	3a406526 	beq	r7,r9,c00bb18 <_free_r+0x208>
 c00b984:	32000317 	ldw	r8,12(r6)
 c00b988:	3a000315 	stw	r8,12(r7)
 c00b98c:	41c00215 	stw	r7,8(r8)
 c00b990:	28cf883a 	add	r7,r5,r3
 c00b994:	39c00117 	ldw	r7,4(r7)
 c00b998:	39c0004c 	andi	r7,r7,1
 c00b99c:	38003a26 	beq	r7,zero,c00ba88 <_free_r+0x178>
 c00b9a0:	10c00054 	ori	r3,r2,1
 c00b9a4:	30c00115 	stw	r3,4(r6)
 c00b9a8:	3087883a 	add	r3,r6,r2
 c00b9ac:	18800015 	stw	r2,0(r3)
 c00b9b0:	00c07fc4 	movi	r3,511
 c00b9b4:	18801936 	bltu	r3,r2,c00ba1c <_free_r+0x10c>
 c00b9b8:	1004d0fa 	srli	r2,r2,3
 c00b9bc:	01c00044 	movi	r7,1
 c00b9c0:	21400117 	ldw	r5,4(r4)
 c00b9c4:	10c00044 	addi	r3,r2,1
 c00b9c8:	18c7883a 	add	r3,r3,r3
 c00b9cc:	1005d0ba 	srai	r2,r2,2
 c00b9d0:	18c7883a 	add	r3,r3,r3
 c00b9d4:	18c7883a 	add	r3,r3,r3
 c00b9d8:	1907883a 	add	r3,r3,r4
 c00b9dc:	3884983a 	sll	r2,r7,r2
 c00b9e0:	19c00017 	ldw	r7,0(r3)
 c00b9e4:	1a3ffe04 	addi	r8,r3,-8
 c00b9e8:	1144b03a 	or	r2,r2,r5
 c00b9ec:	32000315 	stw	r8,12(r6)
 c00b9f0:	31c00215 	stw	r7,8(r6)
 c00b9f4:	20800115 	stw	r2,4(r4)
 c00b9f8:	19800015 	stw	r6,0(r3)
 c00b9fc:	39800315 	stw	r6,12(r7)
 c00ba00:	8809883a 	mov	r4,r17
 c00ba04:	dfc00217 	ldw	ra,8(sp)
 c00ba08:	dc400117 	ldw	r17,4(sp)
 c00ba0c:	dc000017 	ldw	r16,0(sp)
 c00ba10:	dec00304 	addi	sp,sp,12
 c00ba14:	c015ba41 	jmpi	c015ba4 <__malloc_unlock>
 c00ba18:	f800283a 	ret
 c00ba1c:	100ad27a 	srli	r5,r2,9
 c00ba20:	00c00104 	movi	r3,4
 c00ba24:	19404a36 	bltu	r3,r5,c00bb50 <_free_r+0x240>
 c00ba28:	100ad1ba 	srli	r5,r2,6
 c00ba2c:	28c00e44 	addi	r3,r5,57
 c00ba30:	18c7883a 	add	r3,r3,r3
 c00ba34:	29400e04 	addi	r5,r5,56
 c00ba38:	18c7883a 	add	r3,r3,r3
 c00ba3c:	18c7883a 	add	r3,r3,r3
 c00ba40:	1909883a 	add	r4,r3,r4
 c00ba44:	20c00017 	ldw	r3,0(r4)
 c00ba48:	01c300b4 	movhi	r7,3074
 c00ba4c:	213ffe04 	addi	r4,r4,-8
 c00ba50:	39e49904 	addi	r7,r7,-28060
 c00ba54:	20c04426 	beq	r4,r3,c00bb68 <_free_r+0x258>
 c00ba58:	01ffff04 	movi	r7,-4
 c00ba5c:	19400117 	ldw	r5,4(r3)
 c00ba60:	29ca703a 	and	r5,r5,r7
 c00ba64:	1140022e 	bgeu	r2,r5,c00ba70 <_free_r+0x160>
 c00ba68:	18c00217 	ldw	r3,8(r3)
 c00ba6c:	20fffb1e 	bne	r4,r3,c00ba5c <__alt_data_end+0xfc00ba5c>
 c00ba70:	19000317 	ldw	r4,12(r3)
 c00ba74:	31000315 	stw	r4,12(r6)
 c00ba78:	30c00215 	stw	r3,8(r6)
 c00ba7c:	21800215 	stw	r6,8(r4)
 c00ba80:	19800315 	stw	r6,12(r3)
 c00ba84:	003fde06 	br	c00ba00 <__alt_data_end+0xfc00ba00>
 c00ba88:	29c00217 	ldw	r7,8(r5)
 c00ba8c:	10c5883a 	add	r2,r2,r3
 c00ba90:	00c300b4 	movhi	r3,3074
 c00ba94:	18e49b04 	addi	r3,r3,-28052
 c00ba98:	38c03b26 	beq	r7,r3,c00bb88 <_free_r+0x278>
 c00ba9c:	2a000317 	ldw	r8,12(r5)
 c00baa0:	11400054 	ori	r5,r2,1
 c00baa4:	3087883a 	add	r3,r6,r2
 c00baa8:	3a000315 	stw	r8,12(r7)
 c00baac:	41c00215 	stw	r7,8(r8)
 c00bab0:	31400115 	stw	r5,4(r6)
 c00bab4:	18800015 	stw	r2,0(r3)
 c00bab8:	003fbd06 	br	c00b9b0 <__alt_data_end+0xfc00b9b0>
 c00babc:	39c0004c 	andi	r7,r7,1
 c00bac0:	10c5883a 	add	r2,r2,r3
 c00bac4:	3800071e 	bne	r7,zero,c00bae4 <_free_r+0x1d4>
 c00bac8:	81fffe17 	ldw	r7,-8(r16)
 c00bacc:	31cdc83a 	sub	r6,r6,r7
 c00bad0:	30c00317 	ldw	r3,12(r6)
 c00bad4:	31400217 	ldw	r5,8(r6)
 c00bad8:	11c5883a 	add	r2,r2,r7
 c00badc:	28c00315 	stw	r3,12(r5)
 c00bae0:	19400215 	stw	r5,8(r3)
 c00bae4:	10c00054 	ori	r3,r2,1
 c00bae8:	30c00115 	stw	r3,4(r6)
 c00baec:	00c300b4 	movhi	r3,3074
 c00baf0:	18ea2904 	addi	r3,r3,-22364
 c00baf4:	18c00017 	ldw	r3,0(r3)
 c00baf8:	21800215 	stw	r6,8(r4)
 c00bafc:	10ffc036 	bltu	r2,r3,c00ba00 <__alt_data_end+0xfc00ba00>
 c00bb00:	008300b4 	movhi	r2,3074
 c00bb04:	10b1c704 	addi	r2,r2,-14564
 c00bb08:	11400017 	ldw	r5,0(r2)
 c00bb0c:	8809883a 	mov	r4,r17
 c00bb10:	c00b7ec0 	call	c00b7ec <_malloc_trim_r>
 c00bb14:	003fba06 	br	c00ba00 <__alt_data_end+0xfc00ba00>
 c00bb18:	28c9883a 	add	r4,r5,r3
 c00bb1c:	21000117 	ldw	r4,4(r4)
 c00bb20:	2100004c 	andi	r4,r4,1
 c00bb24:	2000391e 	bne	r4,zero,c00bc0c <_free_r+0x2fc>
 c00bb28:	29c00217 	ldw	r7,8(r5)
 c00bb2c:	29000317 	ldw	r4,12(r5)
 c00bb30:	1885883a 	add	r2,r3,r2
 c00bb34:	10c00054 	ori	r3,r2,1
 c00bb38:	39000315 	stw	r4,12(r7)
 c00bb3c:	21c00215 	stw	r7,8(r4)
 c00bb40:	30c00115 	stw	r3,4(r6)
 c00bb44:	308d883a 	add	r6,r6,r2
 c00bb48:	30800015 	stw	r2,0(r6)
 c00bb4c:	003fac06 	br	c00ba00 <__alt_data_end+0xfc00ba00>
 c00bb50:	00c00504 	movi	r3,20
 c00bb54:	19401536 	bltu	r3,r5,c00bbac <_free_r+0x29c>
 c00bb58:	28c01704 	addi	r3,r5,92
 c00bb5c:	18c7883a 	add	r3,r3,r3
 c00bb60:	294016c4 	addi	r5,r5,91
 c00bb64:	003fb406 	br	c00ba38 <__alt_data_end+0xfc00ba38>
 c00bb68:	280bd0ba 	srai	r5,r5,2
 c00bb6c:	00c00044 	movi	r3,1
 c00bb70:	38800117 	ldw	r2,4(r7)
 c00bb74:	194a983a 	sll	r5,r3,r5
 c00bb78:	2007883a 	mov	r3,r4
 c00bb7c:	2884b03a 	or	r2,r5,r2
 c00bb80:	38800115 	stw	r2,4(r7)
 c00bb84:	003fbb06 	br	c00ba74 <__alt_data_end+0xfc00ba74>
 c00bb88:	21800515 	stw	r6,20(r4)
 c00bb8c:	21800415 	stw	r6,16(r4)
 c00bb90:	10c00054 	ori	r3,r2,1
 c00bb94:	31c00315 	stw	r7,12(r6)
 c00bb98:	31c00215 	stw	r7,8(r6)
 c00bb9c:	30c00115 	stw	r3,4(r6)
 c00bba0:	308d883a 	add	r6,r6,r2
 c00bba4:	30800015 	stw	r2,0(r6)
 c00bba8:	003f9506 	br	c00ba00 <__alt_data_end+0xfc00ba00>
 c00bbac:	00c01504 	movi	r3,84
 c00bbb0:	19400536 	bltu	r3,r5,c00bbc8 <_free_r+0x2b8>
 c00bbb4:	100ad33a 	srli	r5,r2,12
 c00bbb8:	28c01bc4 	addi	r3,r5,111
 c00bbbc:	18c7883a 	add	r3,r3,r3
 c00bbc0:	29401b84 	addi	r5,r5,110
 c00bbc4:	003f9c06 	br	c00ba38 <__alt_data_end+0xfc00ba38>
 c00bbc8:	00c05504 	movi	r3,340
 c00bbcc:	19400536 	bltu	r3,r5,c00bbe4 <_free_r+0x2d4>
 c00bbd0:	100ad3fa 	srli	r5,r2,15
 c00bbd4:	28c01e04 	addi	r3,r5,120
 c00bbd8:	18c7883a 	add	r3,r3,r3
 c00bbdc:	29401dc4 	addi	r5,r5,119
 c00bbe0:	003f9506 	br	c00ba38 <__alt_data_end+0xfc00ba38>
 c00bbe4:	00c15504 	movi	r3,1364
 c00bbe8:	19400536 	bltu	r3,r5,c00bc00 <_free_r+0x2f0>
 c00bbec:	100ad4ba 	srli	r5,r2,18
 c00bbf0:	28c01f44 	addi	r3,r5,125
 c00bbf4:	18c7883a 	add	r3,r3,r3
 c00bbf8:	29401f04 	addi	r5,r5,124
 c00bbfc:	003f8e06 	br	c00ba38 <__alt_data_end+0xfc00ba38>
 c00bc00:	00c03f84 	movi	r3,254
 c00bc04:	01401f84 	movi	r5,126
 c00bc08:	003f8b06 	br	c00ba38 <__alt_data_end+0xfc00ba38>
 c00bc0c:	10c00054 	ori	r3,r2,1
 c00bc10:	30c00115 	stw	r3,4(r6)
 c00bc14:	308d883a 	add	r6,r6,r2
 c00bc18:	30800015 	stw	r2,0(r6)
 c00bc1c:	003f7806 	br	c00ba00 <__alt_data_end+0xfc00ba00>

0c00bc20 <__sfvwrite_r>:
 c00bc20:	30800217 	ldw	r2,8(r6)
 c00bc24:	10006726 	beq	r2,zero,c00bdc4 <__sfvwrite_r+0x1a4>
 c00bc28:	28c0030b 	ldhu	r3,12(r5)
 c00bc2c:	defff404 	addi	sp,sp,-48
 c00bc30:	dd400715 	stw	r21,28(sp)
 c00bc34:	dd000615 	stw	r20,24(sp)
 c00bc38:	dc000215 	stw	r16,8(sp)
 c00bc3c:	dfc00b15 	stw	ra,44(sp)
 c00bc40:	df000a15 	stw	fp,40(sp)
 c00bc44:	ddc00915 	stw	r23,36(sp)
 c00bc48:	dd800815 	stw	r22,32(sp)
 c00bc4c:	dcc00515 	stw	r19,20(sp)
 c00bc50:	dc800415 	stw	r18,16(sp)
 c00bc54:	dc400315 	stw	r17,12(sp)
 c00bc58:	1880020c 	andi	r2,r3,8
 c00bc5c:	2821883a 	mov	r16,r5
 c00bc60:	202b883a 	mov	r21,r4
 c00bc64:	3029883a 	mov	r20,r6
 c00bc68:	10002726 	beq	r2,zero,c00bd08 <__sfvwrite_r+0xe8>
 c00bc6c:	28800417 	ldw	r2,16(r5)
 c00bc70:	10002526 	beq	r2,zero,c00bd08 <__sfvwrite_r+0xe8>
 c00bc74:	1880008c 	andi	r2,r3,2
 c00bc78:	a4400017 	ldw	r17,0(r20)
 c00bc7c:	10002a26 	beq	r2,zero,c00bd28 <__sfvwrite_r+0x108>
 c00bc80:	05a00034 	movhi	r22,32768
 c00bc84:	0027883a 	mov	r19,zero
 c00bc88:	0025883a 	mov	r18,zero
 c00bc8c:	b5bf0004 	addi	r22,r22,-1024
 c00bc90:	980d883a 	mov	r6,r19
 c00bc94:	a809883a 	mov	r4,r21
 c00bc98:	90004626 	beq	r18,zero,c00bdb4 <__sfvwrite_r+0x194>
 c00bc9c:	900f883a 	mov	r7,r18
 c00bca0:	b480022e 	bgeu	r22,r18,c00bcac <__sfvwrite_r+0x8c>
 c00bca4:	01e00034 	movhi	r7,32768
 c00bca8:	39ff0004 	addi	r7,r7,-1024
 c00bcac:	80800917 	ldw	r2,36(r16)
 c00bcb0:	81400717 	ldw	r5,28(r16)
 c00bcb4:	103ee83a 	callr	r2
 c00bcb8:	00805a0e 	bge	zero,r2,c00be24 <__sfvwrite_r+0x204>
 c00bcbc:	a0c00217 	ldw	r3,8(r20)
 c00bcc0:	98a7883a 	add	r19,r19,r2
 c00bcc4:	90a5c83a 	sub	r18,r18,r2
 c00bcc8:	1885c83a 	sub	r2,r3,r2
 c00bccc:	a0800215 	stw	r2,8(r20)
 c00bcd0:	103fef1e 	bne	r2,zero,c00bc90 <__alt_data_end+0xfc00bc90>
 c00bcd4:	0005883a 	mov	r2,zero
 c00bcd8:	dfc00b17 	ldw	ra,44(sp)
 c00bcdc:	df000a17 	ldw	fp,40(sp)
 c00bce0:	ddc00917 	ldw	r23,36(sp)
 c00bce4:	dd800817 	ldw	r22,32(sp)
 c00bce8:	dd400717 	ldw	r21,28(sp)
 c00bcec:	dd000617 	ldw	r20,24(sp)
 c00bcf0:	dcc00517 	ldw	r19,20(sp)
 c00bcf4:	dc800417 	ldw	r18,16(sp)
 c00bcf8:	dc400317 	ldw	r17,12(sp)
 c00bcfc:	dc000217 	ldw	r16,8(sp)
 c00bd00:	dec00c04 	addi	sp,sp,48
 c00bd04:	f800283a 	ret
 c00bd08:	800b883a 	mov	r5,r16
 c00bd0c:	a809883a 	mov	r4,r21
 c00bd10:	c0097900 	call	c009790 <__swsetup_r>
 c00bd14:	1000ee1e 	bne	r2,zero,c00c0d0 <__sfvwrite_r+0x4b0>
 c00bd18:	80c0030b 	ldhu	r3,12(r16)
 c00bd1c:	a4400017 	ldw	r17,0(r20)
 c00bd20:	1880008c 	andi	r2,r3,2
 c00bd24:	103fd61e 	bne	r2,zero,c00bc80 <__alt_data_end+0xfc00bc80>
 c00bd28:	1880004c 	andi	r2,r3,1
 c00bd2c:	1000421e 	bne	r2,zero,c00be38 <__sfvwrite_r+0x218>
 c00bd30:	0039883a 	mov	fp,zero
 c00bd34:	0025883a 	mov	r18,zero
 c00bd38:	90001a26 	beq	r18,zero,c00bda4 <__sfvwrite_r+0x184>
 c00bd3c:	1880800c 	andi	r2,r3,512
 c00bd40:	84c00217 	ldw	r19,8(r16)
 c00bd44:	10002126 	beq	r2,zero,c00bdcc <__sfvwrite_r+0x1ac>
 c00bd48:	982f883a 	mov	r23,r19
 c00bd4c:	94c09636 	bltu	r18,r19,c00bfa8 <__sfvwrite_r+0x388>
 c00bd50:	1881200c 	andi	r2,r3,1152
 c00bd54:	1000a11e 	bne	r2,zero,c00bfdc <__sfvwrite_r+0x3bc>
 c00bd58:	81000017 	ldw	r4,0(r16)
 c00bd5c:	b80d883a 	mov	r6,r23
 c00bd60:	e00b883a 	mov	r5,fp
 c00bd64:	c00cf400 	call	c00cf40 <memmove>
 c00bd68:	80c00217 	ldw	r3,8(r16)
 c00bd6c:	81000017 	ldw	r4,0(r16)
 c00bd70:	9005883a 	mov	r2,r18
 c00bd74:	1ce7c83a 	sub	r19,r3,r19
 c00bd78:	25cf883a 	add	r7,r4,r23
 c00bd7c:	84c00215 	stw	r19,8(r16)
 c00bd80:	81c00015 	stw	r7,0(r16)
 c00bd84:	a0c00217 	ldw	r3,8(r20)
 c00bd88:	e0b9883a 	add	fp,fp,r2
 c00bd8c:	90a5c83a 	sub	r18,r18,r2
 c00bd90:	18a7c83a 	sub	r19,r3,r2
 c00bd94:	a4c00215 	stw	r19,8(r20)
 c00bd98:	983fce26 	beq	r19,zero,c00bcd4 <__alt_data_end+0xfc00bcd4>
 c00bd9c:	80c0030b 	ldhu	r3,12(r16)
 c00bda0:	903fe61e 	bne	r18,zero,c00bd3c <__alt_data_end+0xfc00bd3c>
 c00bda4:	8f000017 	ldw	fp,0(r17)
 c00bda8:	8c800117 	ldw	r18,4(r17)
 c00bdac:	8c400204 	addi	r17,r17,8
 c00bdb0:	003fe106 	br	c00bd38 <__alt_data_end+0xfc00bd38>
 c00bdb4:	8cc00017 	ldw	r19,0(r17)
 c00bdb8:	8c800117 	ldw	r18,4(r17)
 c00bdbc:	8c400204 	addi	r17,r17,8
 c00bdc0:	003fb306 	br	c00bc90 <__alt_data_end+0xfc00bc90>
 c00bdc4:	0005883a 	mov	r2,zero
 c00bdc8:	f800283a 	ret
 c00bdcc:	81000017 	ldw	r4,0(r16)
 c00bdd0:	80800417 	ldw	r2,16(r16)
 c00bdd4:	11005a36 	bltu	r2,r4,c00bf40 <__sfvwrite_r+0x320>
 c00bdd8:	85c00517 	ldw	r23,20(r16)
 c00bddc:	95c05836 	bltu	r18,r23,c00bf40 <__sfvwrite_r+0x320>
 c00bde0:	00a00034 	movhi	r2,32768
 c00bde4:	10bfffc4 	addi	r2,r2,-1
 c00bde8:	9009883a 	mov	r4,r18
 c00bdec:	1480012e 	bgeu	r2,r18,c00bdf4 <__sfvwrite_r+0x1d4>
 c00bdf0:	1009883a 	mov	r4,r2
 c00bdf4:	b80b883a 	mov	r5,r23
 c00bdf8:	c004c2c0 	call	c004c2c <__divsi3>
 c00bdfc:	b80b883a 	mov	r5,r23
 c00be00:	1009883a 	mov	r4,r2
 c00be04:	c004de00 	call	c004de0 <__mulsi3>
 c00be08:	81400717 	ldw	r5,28(r16)
 c00be0c:	80c00917 	ldw	r3,36(r16)
 c00be10:	100f883a 	mov	r7,r2
 c00be14:	e00d883a 	mov	r6,fp
 c00be18:	a809883a 	mov	r4,r21
 c00be1c:	183ee83a 	callr	r3
 c00be20:	00bfd816 	blt	zero,r2,c00bd84 <__alt_data_end+0xfc00bd84>
 c00be24:	8080030b 	ldhu	r2,12(r16)
 c00be28:	10801014 	ori	r2,r2,64
 c00be2c:	8080030d 	sth	r2,12(r16)
 c00be30:	00bfffc4 	movi	r2,-1
 c00be34:	003fa806 	br	c00bcd8 <__alt_data_end+0xfc00bcd8>
 c00be38:	0027883a 	mov	r19,zero
 c00be3c:	0011883a 	mov	r8,zero
 c00be40:	0039883a 	mov	fp,zero
 c00be44:	0025883a 	mov	r18,zero
 c00be48:	90001f26 	beq	r18,zero,c00bec8 <__sfvwrite_r+0x2a8>
 c00be4c:	40005a26 	beq	r8,zero,c00bfb8 <__sfvwrite_r+0x398>
 c00be50:	982d883a 	mov	r22,r19
 c00be54:	94c0012e 	bgeu	r18,r19,c00be5c <__sfvwrite_r+0x23c>
 c00be58:	902d883a 	mov	r22,r18
 c00be5c:	81000017 	ldw	r4,0(r16)
 c00be60:	80800417 	ldw	r2,16(r16)
 c00be64:	b02f883a 	mov	r23,r22
 c00be68:	81c00517 	ldw	r7,20(r16)
 c00be6c:	1100032e 	bgeu	r2,r4,c00be7c <__sfvwrite_r+0x25c>
 c00be70:	80c00217 	ldw	r3,8(r16)
 c00be74:	38c7883a 	add	r3,r7,r3
 c00be78:	1d801816 	blt	r3,r22,c00bedc <__sfvwrite_r+0x2bc>
 c00be7c:	b1c03e16 	blt	r22,r7,c00bf78 <__sfvwrite_r+0x358>
 c00be80:	80800917 	ldw	r2,36(r16)
 c00be84:	81400717 	ldw	r5,28(r16)
 c00be88:	e00d883a 	mov	r6,fp
 c00be8c:	da000115 	stw	r8,4(sp)
 c00be90:	a809883a 	mov	r4,r21
 c00be94:	103ee83a 	callr	r2
 c00be98:	102f883a 	mov	r23,r2
 c00be9c:	da000117 	ldw	r8,4(sp)
 c00bea0:	00bfe00e 	bge	zero,r2,c00be24 <__alt_data_end+0xfc00be24>
 c00bea4:	9de7c83a 	sub	r19,r19,r23
 c00bea8:	98001f26 	beq	r19,zero,c00bf28 <__sfvwrite_r+0x308>
 c00beac:	a0800217 	ldw	r2,8(r20)
 c00beb0:	e5f9883a 	add	fp,fp,r23
 c00beb4:	95e5c83a 	sub	r18,r18,r23
 c00beb8:	15efc83a 	sub	r23,r2,r23
 c00bebc:	a5c00215 	stw	r23,8(r20)
 c00bec0:	b83f8426 	beq	r23,zero,c00bcd4 <__alt_data_end+0xfc00bcd4>
 c00bec4:	903fe11e 	bne	r18,zero,c00be4c <__alt_data_end+0xfc00be4c>
 c00bec8:	8f000017 	ldw	fp,0(r17)
 c00becc:	8c800117 	ldw	r18,4(r17)
 c00bed0:	0011883a 	mov	r8,zero
 c00bed4:	8c400204 	addi	r17,r17,8
 c00bed8:	003fdb06 	br	c00be48 <__alt_data_end+0xfc00be48>
 c00bedc:	180d883a 	mov	r6,r3
 c00bee0:	e00b883a 	mov	r5,fp
 c00bee4:	da000115 	stw	r8,4(sp)
 c00bee8:	d8c00015 	stw	r3,0(sp)
 c00beec:	c00cf400 	call	c00cf40 <memmove>
 c00bef0:	d8c00017 	ldw	r3,0(sp)
 c00bef4:	80800017 	ldw	r2,0(r16)
 c00bef8:	800b883a 	mov	r5,r16
 c00befc:	a809883a 	mov	r4,r21
 c00bf00:	10c5883a 	add	r2,r2,r3
 c00bf04:	80800015 	stw	r2,0(r16)
 c00bf08:	d8c00015 	stw	r3,0(sp)
 c00bf0c:	c00b3b00 	call	c00b3b0 <_fflush_r>
 c00bf10:	d8c00017 	ldw	r3,0(sp)
 c00bf14:	da000117 	ldw	r8,4(sp)
 c00bf18:	103fc21e 	bne	r2,zero,c00be24 <__alt_data_end+0xfc00be24>
 c00bf1c:	182f883a 	mov	r23,r3
 c00bf20:	9de7c83a 	sub	r19,r19,r23
 c00bf24:	983fe11e 	bne	r19,zero,c00beac <__alt_data_end+0xfc00beac>
 c00bf28:	800b883a 	mov	r5,r16
 c00bf2c:	a809883a 	mov	r4,r21
 c00bf30:	c00b3b00 	call	c00b3b0 <_fflush_r>
 c00bf34:	103fbb1e 	bne	r2,zero,c00be24 <__alt_data_end+0xfc00be24>
 c00bf38:	0011883a 	mov	r8,zero
 c00bf3c:	003fdb06 	br	c00beac <__alt_data_end+0xfc00beac>
 c00bf40:	94c0012e 	bgeu	r18,r19,c00bf48 <__sfvwrite_r+0x328>
 c00bf44:	9027883a 	mov	r19,r18
 c00bf48:	980d883a 	mov	r6,r19
 c00bf4c:	e00b883a 	mov	r5,fp
 c00bf50:	c00cf400 	call	c00cf40 <memmove>
 c00bf54:	80800217 	ldw	r2,8(r16)
 c00bf58:	80c00017 	ldw	r3,0(r16)
 c00bf5c:	14c5c83a 	sub	r2,r2,r19
 c00bf60:	1cc7883a 	add	r3,r3,r19
 c00bf64:	80800215 	stw	r2,8(r16)
 c00bf68:	80c00015 	stw	r3,0(r16)
 c00bf6c:	10004326 	beq	r2,zero,c00c07c <__sfvwrite_r+0x45c>
 c00bf70:	9805883a 	mov	r2,r19
 c00bf74:	003f8306 	br	c00bd84 <__alt_data_end+0xfc00bd84>
 c00bf78:	b00d883a 	mov	r6,r22
 c00bf7c:	e00b883a 	mov	r5,fp
 c00bf80:	da000115 	stw	r8,4(sp)
 c00bf84:	c00cf400 	call	c00cf40 <memmove>
 c00bf88:	80800217 	ldw	r2,8(r16)
 c00bf8c:	80c00017 	ldw	r3,0(r16)
 c00bf90:	da000117 	ldw	r8,4(sp)
 c00bf94:	1585c83a 	sub	r2,r2,r22
 c00bf98:	1dad883a 	add	r22,r3,r22
 c00bf9c:	80800215 	stw	r2,8(r16)
 c00bfa0:	85800015 	stw	r22,0(r16)
 c00bfa4:	003fbf06 	br	c00bea4 <__alt_data_end+0xfc00bea4>
 c00bfa8:	81000017 	ldw	r4,0(r16)
 c00bfac:	9027883a 	mov	r19,r18
 c00bfb0:	902f883a 	mov	r23,r18
 c00bfb4:	003f6906 	br	c00bd5c <__alt_data_end+0xfc00bd5c>
 c00bfb8:	900d883a 	mov	r6,r18
 c00bfbc:	01400284 	movi	r5,10
 c00bfc0:	e009883a 	mov	r4,fp
 c00bfc4:	c00cd140 	call	c00cd14 <memchr>
 c00bfc8:	10003e26 	beq	r2,zero,c00c0c4 <__sfvwrite_r+0x4a4>
 c00bfcc:	10800044 	addi	r2,r2,1
 c00bfd0:	1727c83a 	sub	r19,r2,fp
 c00bfd4:	02000044 	movi	r8,1
 c00bfd8:	003f9d06 	br	c00be50 <__alt_data_end+0xfc00be50>
 c00bfdc:	80800517 	ldw	r2,20(r16)
 c00bfe0:	81400417 	ldw	r5,16(r16)
 c00bfe4:	81c00017 	ldw	r7,0(r16)
 c00bfe8:	10a7883a 	add	r19,r2,r2
 c00bfec:	9885883a 	add	r2,r19,r2
 c00bff0:	1026d7fa 	srli	r19,r2,31
 c00bff4:	396dc83a 	sub	r22,r7,r5
 c00bff8:	b1000044 	addi	r4,r22,1
 c00bffc:	9885883a 	add	r2,r19,r2
 c00c000:	1027d07a 	srai	r19,r2,1
 c00c004:	2485883a 	add	r2,r4,r18
 c00c008:	980d883a 	mov	r6,r19
 c00c00c:	9880022e 	bgeu	r19,r2,c00c018 <__sfvwrite_r+0x3f8>
 c00c010:	1027883a 	mov	r19,r2
 c00c014:	100d883a 	mov	r6,r2
 c00c018:	18c1000c 	andi	r3,r3,1024
 c00c01c:	18001c26 	beq	r3,zero,c00c090 <__sfvwrite_r+0x470>
 c00c020:	300b883a 	mov	r5,r6
 c00c024:	a809883a 	mov	r4,r21
 c00c028:	c00c5080 	call	c00c508 <_malloc_r>
 c00c02c:	102f883a 	mov	r23,r2
 c00c030:	10002926 	beq	r2,zero,c00c0d8 <__sfvwrite_r+0x4b8>
 c00c034:	81400417 	ldw	r5,16(r16)
 c00c038:	b00d883a 	mov	r6,r22
 c00c03c:	1009883a 	mov	r4,r2
 c00c040:	c00cdf80 	call	c00cdf8 <memcpy>
 c00c044:	8080030b 	ldhu	r2,12(r16)
 c00c048:	00fedfc4 	movi	r3,-1153
 c00c04c:	10c4703a 	and	r2,r2,r3
 c00c050:	10802014 	ori	r2,r2,128
 c00c054:	8080030d 	sth	r2,12(r16)
 c00c058:	bd89883a 	add	r4,r23,r22
 c00c05c:	9d8fc83a 	sub	r7,r19,r22
 c00c060:	85c00415 	stw	r23,16(r16)
 c00c064:	84c00515 	stw	r19,20(r16)
 c00c068:	81000015 	stw	r4,0(r16)
 c00c06c:	9027883a 	mov	r19,r18
 c00c070:	81c00215 	stw	r7,8(r16)
 c00c074:	902f883a 	mov	r23,r18
 c00c078:	003f3806 	br	c00bd5c <__alt_data_end+0xfc00bd5c>
 c00c07c:	800b883a 	mov	r5,r16
 c00c080:	a809883a 	mov	r4,r21
 c00c084:	c00b3b00 	call	c00b3b0 <_fflush_r>
 c00c088:	103fb926 	beq	r2,zero,c00bf70 <__alt_data_end+0xfc00bf70>
 c00c08c:	003f6506 	br	c00be24 <__alt_data_end+0xfc00be24>
 c00c090:	a809883a 	mov	r4,r21
 c00c094:	c00e27c0 	call	c00e27c <_realloc_r>
 c00c098:	102f883a 	mov	r23,r2
 c00c09c:	103fee1e 	bne	r2,zero,c00c058 <__alt_data_end+0xfc00c058>
 c00c0a0:	81400417 	ldw	r5,16(r16)
 c00c0a4:	a809883a 	mov	r4,r21
 c00c0a8:	c00b9100 	call	c00b910 <_free_r>
 c00c0ac:	8080030b 	ldhu	r2,12(r16)
 c00c0b0:	00ffdfc4 	movi	r3,-129
 c00c0b4:	1884703a 	and	r2,r3,r2
 c00c0b8:	00c00304 	movi	r3,12
 c00c0bc:	a8c00015 	stw	r3,0(r21)
 c00c0c0:	003f5906 	br	c00be28 <__alt_data_end+0xfc00be28>
 c00c0c4:	94c00044 	addi	r19,r18,1
 c00c0c8:	02000044 	movi	r8,1
 c00c0cc:	003f6006 	br	c00be50 <__alt_data_end+0xfc00be50>
 c00c0d0:	00bfffc4 	movi	r2,-1
 c00c0d4:	003f0006 	br	c00bcd8 <__alt_data_end+0xfc00bcd8>
 c00c0d8:	00800304 	movi	r2,12
 c00c0dc:	a8800015 	stw	r2,0(r21)
 c00c0e0:	8080030b 	ldhu	r2,12(r16)
 c00c0e4:	003f5006 	br	c00be28 <__alt_data_end+0xfc00be28>

0c00c0e8 <_fwalk>:
 c00c0e8:	defff704 	addi	sp,sp,-36
 c00c0ec:	dd000415 	stw	r20,16(sp)
 c00c0f0:	dfc00815 	stw	ra,32(sp)
 c00c0f4:	ddc00715 	stw	r23,28(sp)
 c00c0f8:	dd800615 	stw	r22,24(sp)
 c00c0fc:	dd400515 	stw	r21,20(sp)
 c00c100:	dcc00315 	stw	r19,12(sp)
 c00c104:	dc800215 	stw	r18,8(sp)
 c00c108:	dc400115 	stw	r17,4(sp)
 c00c10c:	dc000015 	stw	r16,0(sp)
 c00c110:	2500b804 	addi	r20,r4,736
 c00c114:	a0002326 	beq	r20,zero,c00c1a4 <_fwalk+0xbc>
 c00c118:	282b883a 	mov	r21,r5
 c00c11c:	002f883a 	mov	r23,zero
 c00c120:	05800044 	movi	r22,1
 c00c124:	04ffffc4 	movi	r19,-1
 c00c128:	a4400117 	ldw	r17,4(r20)
 c00c12c:	a4800217 	ldw	r18,8(r20)
 c00c130:	8c7fffc4 	addi	r17,r17,-1
 c00c134:	88000d16 	blt	r17,zero,c00c16c <_fwalk+0x84>
 c00c138:	94000304 	addi	r16,r18,12
 c00c13c:	94800384 	addi	r18,r18,14
 c00c140:	8080000b 	ldhu	r2,0(r16)
 c00c144:	8c7fffc4 	addi	r17,r17,-1
 c00c148:	813ffd04 	addi	r4,r16,-12
 c00c14c:	b080042e 	bgeu	r22,r2,c00c160 <_fwalk+0x78>
 c00c150:	9080000f 	ldh	r2,0(r18)
 c00c154:	14c00226 	beq	r2,r19,c00c160 <_fwalk+0x78>
 c00c158:	a83ee83a 	callr	r21
 c00c15c:	b8aeb03a 	or	r23,r23,r2
 c00c160:	84001a04 	addi	r16,r16,104
 c00c164:	94801a04 	addi	r18,r18,104
 c00c168:	8cfff51e 	bne	r17,r19,c00c140 <__alt_data_end+0xfc00c140>
 c00c16c:	a5000017 	ldw	r20,0(r20)
 c00c170:	a03fed1e 	bne	r20,zero,c00c128 <__alt_data_end+0xfc00c128>
 c00c174:	b805883a 	mov	r2,r23
 c00c178:	dfc00817 	ldw	ra,32(sp)
 c00c17c:	ddc00717 	ldw	r23,28(sp)
 c00c180:	dd800617 	ldw	r22,24(sp)
 c00c184:	dd400517 	ldw	r21,20(sp)
 c00c188:	dd000417 	ldw	r20,16(sp)
 c00c18c:	dcc00317 	ldw	r19,12(sp)
 c00c190:	dc800217 	ldw	r18,8(sp)
 c00c194:	dc400117 	ldw	r17,4(sp)
 c00c198:	dc000017 	ldw	r16,0(sp)
 c00c19c:	dec00904 	addi	sp,sp,36
 c00c1a0:	f800283a 	ret
 c00c1a4:	002f883a 	mov	r23,zero
 c00c1a8:	003ff206 	br	c00c174 <__alt_data_end+0xfc00c174>

0c00c1ac <_fwalk_reent>:
 c00c1ac:	defff704 	addi	sp,sp,-36
 c00c1b0:	dd000415 	stw	r20,16(sp)
 c00c1b4:	dfc00815 	stw	ra,32(sp)
 c00c1b8:	ddc00715 	stw	r23,28(sp)
 c00c1bc:	dd800615 	stw	r22,24(sp)
 c00c1c0:	dd400515 	stw	r21,20(sp)
 c00c1c4:	dcc00315 	stw	r19,12(sp)
 c00c1c8:	dc800215 	stw	r18,8(sp)
 c00c1cc:	dc400115 	stw	r17,4(sp)
 c00c1d0:	dc000015 	stw	r16,0(sp)
 c00c1d4:	2500b804 	addi	r20,r4,736
 c00c1d8:	a0002326 	beq	r20,zero,c00c268 <_fwalk_reent+0xbc>
 c00c1dc:	282b883a 	mov	r21,r5
 c00c1e0:	2027883a 	mov	r19,r4
 c00c1e4:	002f883a 	mov	r23,zero
 c00c1e8:	05800044 	movi	r22,1
 c00c1ec:	04bfffc4 	movi	r18,-1
 c00c1f0:	a4400117 	ldw	r17,4(r20)
 c00c1f4:	a4000217 	ldw	r16,8(r20)
 c00c1f8:	8c7fffc4 	addi	r17,r17,-1
 c00c1fc:	88000c16 	blt	r17,zero,c00c230 <_fwalk_reent+0x84>
 c00c200:	84000304 	addi	r16,r16,12
 c00c204:	8080000b 	ldhu	r2,0(r16)
 c00c208:	8c7fffc4 	addi	r17,r17,-1
 c00c20c:	817ffd04 	addi	r5,r16,-12
 c00c210:	b080052e 	bgeu	r22,r2,c00c228 <_fwalk_reent+0x7c>
 c00c214:	8080008f 	ldh	r2,2(r16)
 c00c218:	9809883a 	mov	r4,r19
 c00c21c:	14800226 	beq	r2,r18,c00c228 <_fwalk_reent+0x7c>
 c00c220:	a83ee83a 	callr	r21
 c00c224:	b8aeb03a 	or	r23,r23,r2
 c00c228:	84001a04 	addi	r16,r16,104
 c00c22c:	8cbff51e 	bne	r17,r18,c00c204 <__alt_data_end+0xfc00c204>
 c00c230:	a5000017 	ldw	r20,0(r20)
 c00c234:	a03fee1e 	bne	r20,zero,c00c1f0 <__alt_data_end+0xfc00c1f0>
 c00c238:	b805883a 	mov	r2,r23
 c00c23c:	dfc00817 	ldw	ra,32(sp)
 c00c240:	ddc00717 	ldw	r23,28(sp)
 c00c244:	dd800617 	ldw	r22,24(sp)
 c00c248:	dd400517 	ldw	r21,20(sp)
 c00c24c:	dd000417 	ldw	r20,16(sp)
 c00c250:	dcc00317 	ldw	r19,12(sp)
 c00c254:	dc800217 	ldw	r18,8(sp)
 c00c258:	dc400117 	ldw	r17,4(sp)
 c00c25c:	dc000017 	ldw	r16,0(sp)
 c00c260:	dec00904 	addi	sp,sp,36
 c00c264:	f800283a 	ret
 c00c268:	002f883a 	mov	r23,zero
 c00c26c:	003ff206 	br	c00c238 <__alt_data_end+0xfc00c238>

0c00c270 <_setlocale_r>:
 c00c270:	30001b26 	beq	r6,zero,c00c2e0 <_setlocale_r+0x70>
 c00c274:	014300b4 	movhi	r5,3074
 c00c278:	defffe04 	addi	sp,sp,-8
 c00c27c:	29620504 	addi	r5,r5,-30700
 c00c280:	3009883a 	mov	r4,r6
 c00c284:	dc000015 	stw	r16,0(sp)
 c00c288:	dfc00115 	stw	ra,4(sp)
 c00c28c:	3021883a 	mov	r16,r6
 c00c290:	c00e9e40 	call	c00e9e4 <strcmp>
 c00c294:	1000061e 	bne	r2,zero,c00c2b0 <_setlocale_r+0x40>
 c00c298:	008300b4 	movhi	r2,3074
 c00c29c:	10a20404 	addi	r2,r2,-30704
 c00c2a0:	dfc00117 	ldw	ra,4(sp)
 c00c2a4:	dc000017 	ldw	r16,0(sp)
 c00c2a8:	dec00204 	addi	sp,sp,8
 c00c2ac:	f800283a 	ret
 c00c2b0:	014300b4 	movhi	r5,3074
 c00c2b4:	29620404 	addi	r5,r5,-30704
 c00c2b8:	8009883a 	mov	r4,r16
 c00c2bc:	c00e9e40 	call	c00e9e4 <strcmp>
 c00c2c0:	103ff526 	beq	r2,zero,c00c298 <__alt_data_end+0xfc00c298>
 c00c2c4:	014300b4 	movhi	r5,3074
 c00c2c8:	2961e704 	addi	r5,r5,-30820
 c00c2cc:	8009883a 	mov	r4,r16
 c00c2d0:	c00e9e40 	call	c00e9e4 <strcmp>
 c00c2d4:	103ff026 	beq	r2,zero,c00c298 <__alt_data_end+0xfc00c298>
 c00c2d8:	0005883a 	mov	r2,zero
 c00c2dc:	003ff006 	br	c00c2a0 <__alt_data_end+0xfc00c2a0>
 c00c2e0:	008300b4 	movhi	r2,3074
 c00c2e4:	10a20404 	addi	r2,r2,-30704
 c00c2e8:	f800283a 	ret

0c00c2ec <__locale_charset>:
 c00c2ec:	008300b4 	movhi	r2,3074
 c00c2f0:	10a48304 	addi	r2,r2,-28148
 c00c2f4:	f800283a 	ret

0c00c2f8 <__locale_mb_cur_max>:
 c00c2f8:	008300b4 	movhi	r2,3074
 c00c2fc:	10aa2704 	addi	r2,r2,-22372
 c00c300:	10800017 	ldw	r2,0(r2)
 c00c304:	f800283a 	ret

0c00c308 <__locale_msgcharset>:
 c00c308:	008300b4 	movhi	r2,3074
 c00c30c:	10a47b04 	addi	r2,r2,-28180
 c00c310:	f800283a 	ret

0c00c314 <__locale_cjk_lang>:
 c00c314:	0005883a 	mov	r2,zero
 c00c318:	f800283a 	ret

0c00c31c <_localeconv_r>:
 c00c31c:	008300b4 	movhi	r2,3074
 c00c320:	10a48b04 	addi	r2,r2,-28116
 c00c324:	f800283a 	ret

0c00c328 <setlocale>:
 c00c328:	008300b4 	movhi	r2,3074
 c00c32c:	10aa2604 	addi	r2,r2,-22376
 c00c330:	280d883a 	mov	r6,r5
 c00c334:	200b883a 	mov	r5,r4
 c00c338:	11000017 	ldw	r4,0(r2)
 c00c33c:	c00c2701 	jmpi	c00c270 <_setlocale_r>

0c00c340 <localeconv>:
 c00c340:	008300b4 	movhi	r2,3074
 c00c344:	10a48b04 	addi	r2,r2,-28116
 c00c348:	f800283a 	ret

0c00c34c <__smakebuf_r>:
 c00c34c:	2880030b 	ldhu	r2,12(r5)
 c00c350:	10c0008c 	andi	r3,r2,2
 c00c354:	1800411e 	bne	r3,zero,c00c45c <__smakebuf_r+0x110>
 c00c358:	deffec04 	addi	sp,sp,-80
 c00c35c:	dc000f15 	stw	r16,60(sp)
 c00c360:	2821883a 	mov	r16,r5
 c00c364:	2940038f 	ldh	r5,14(r5)
 c00c368:	dc401015 	stw	r17,64(sp)
 c00c36c:	dfc01315 	stw	ra,76(sp)
 c00c370:	dcc01215 	stw	r19,72(sp)
 c00c374:	dc801115 	stw	r18,68(sp)
 c00c378:	2023883a 	mov	r17,r4
 c00c37c:	28001c16 	blt	r5,zero,c00c3f0 <__smakebuf_r+0xa4>
 c00c380:	d80d883a 	mov	r6,sp
 c00c384:	c011bc40 	call	c011bc4 <_fstat_r>
 c00c388:	10001816 	blt	r2,zero,c00c3ec <__smakebuf_r+0xa0>
 c00c38c:	d8800117 	ldw	r2,4(sp)
 c00c390:	00e00014 	movui	r3,32768
 c00c394:	10bc000c 	andi	r2,r2,61440
 c00c398:	14c80020 	cmpeqi	r19,r2,8192
 c00c39c:	10c03726 	beq	r2,r3,c00c47c <__smakebuf_r+0x130>
 c00c3a0:	80c0030b 	ldhu	r3,12(r16)
 c00c3a4:	18c20014 	ori	r3,r3,2048
 c00c3a8:	80c0030d 	sth	r3,12(r16)
 c00c3ac:	00c80004 	movi	r3,8192
 c00c3b0:	10c0521e 	bne	r2,r3,c00c4fc <__smakebuf_r+0x1b0>
 c00c3b4:	8140038f 	ldh	r5,14(r16)
 c00c3b8:	8809883a 	mov	r4,r17
 c00c3bc:	c011c200 	call	c011c20 <_isatty_r>
 c00c3c0:	10004c26 	beq	r2,zero,c00c4f4 <__smakebuf_r+0x1a8>
 c00c3c4:	8080030b 	ldhu	r2,12(r16)
 c00c3c8:	80c010c4 	addi	r3,r16,67
 c00c3cc:	80c00015 	stw	r3,0(r16)
 c00c3d0:	10800054 	ori	r2,r2,1
 c00c3d4:	8080030d 	sth	r2,12(r16)
 c00c3d8:	00800044 	movi	r2,1
 c00c3dc:	80c00415 	stw	r3,16(r16)
 c00c3e0:	80800515 	stw	r2,20(r16)
 c00c3e4:	04810004 	movi	r18,1024
 c00c3e8:	00000706 	br	c00c408 <__smakebuf_r+0xbc>
 c00c3ec:	8080030b 	ldhu	r2,12(r16)
 c00c3f0:	10c0200c 	andi	r3,r2,128
 c00c3f4:	18001f1e 	bne	r3,zero,c00c474 <__smakebuf_r+0x128>
 c00c3f8:	04810004 	movi	r18,1024
 c00c3fc:	10820014 	ori	r2,r2,2048
 c00c400:	8080030d 	sth	r2,12(r16)
 c00c404:	0027883a 	mov	r19,zero
 c00c408:	900b883a 	mov	r5,r18
 c00c40c:	8809883a 	mov	r4,r17
 c00c410:	c00c5080 	call	c00c508 <_malloc_r>
 c00c414:	10002c26 	beq	r2,zero,c00c4c8 <__smakebuf_r+0x17c>
 c00c418:	80c0030b 	ldhu	r3,12(r16)
 c00c41c:	01030074 	movhi	r4,3073
 c00c420:	212d1104 	addi	r4,r4,-19388
 c00c424:	89000f15 	stw	r4,60(r17)
 c00c428:	18c02014 	ori	r3,r3,128
 c00c42c:	80c0030d 	sth	r3,12(r16)
 c00c430:	80800015 	stw	r2,0(r16)
 c00c434:	80800415 	stw	r2,16(r16)
 c00c438:	84800515 	stw	r18,20(r16)
 c00c43c:	98001a1e 	bne	r19,zero,c00c4a8 <__smakebuf_r+0x15c>
 c00c440:	dfc01317 	ldw	ra,76(sp)
 c00c444:	dcc01217 	ldw	r19,72(sp)
 c00c448:	dc801117 	ldw	r18,68(sp)
 c00c44c:	dc401017 	ldw	r17,64(sp)
 c00c450:	dc000f17 	ldw	r16,60(sp)
 c00c454:	dec01404 	addi	sp,sp,80
 c00c458:	f800283a 	ret
 c00c45c:	288010c4 	addi	r2,r5,67
 c00c460:	28800015 	stw	r2,0(r5)
 c00c464:	28800415 	stw	r2,16(r5)
 c00c468:	00800044 	movi	r2,1
 c00c46c:	28800515 	stw	r2,20(r5)
 c00c470:	f800283a 	ret
 c00c474:	04801004 	movi	r18,64
 c00c478:	003fe006 	br	c00c3fc <__alt_data_end+0xfc00c3fc>
 c00c47c:	81000a17 	ldw	r4,40(r16)
 c00c480:	00c30074 	movhi	r3,3073
 c00c484:	18fa6004 	addi	r3,r3,-5760
 c00c488:	20ffc51e 	bne	r4,r3,c00c3a0 <__alt_data_end+0xfc00c3a0>
 c00c48c:	8080030b 	ldhu	r2,12(r16)
 c00c490:	04810004 	movi	r18,1024
 c00c494:	84801315 	stw	r18,76(r16)
 c00c498:	1484b03a 	or	r2,r2,r18
 c00c49c:	8080030d 	sth	r2,12(r16)
 c00c4a0:	0027883a 	mov	r19,zero
 c00c4a4:	003fd806 	br	c00c408 <__alt_data_end+0xfc00c408>
 c00c4a8:	8140038f 	ldh	r5,14(r16)
 c00c4ac:	8809883a 	mov	r4,r17
 c00c4b0:	c011c200 	call	c011c20 <_isatty_r>
 c00c4b4:	103fe226 	beq	r2,zero,c00c440 <__alt_data_end+0xfc00c440>
 c00c4b8:	8080030b 	ldhu	r2,12(r16)
 c00c4bc:	10800054 	ori	r2,r2,1
 c00c4c0:	8080030d 	sth	r2,12(r16)
 c00c4c4:	003fde06 	br	c00c440 <__alt_data_end+0xfc00c440>
 c00c4c8:	8080030b 	ldhu	r2,12(r16)
 c00c4cc:	10c0800c 	andi	r3,r2,512
 c00c4d0:	183fdb1e 	bne	r3,zero,c00c440 <__alt_data_end+0xfc00c440>
 c00c4d4:	10800094 	ori	r2,r2,2
 c00c4d8:	80c010c4 	addi	r3,r16,67
 c00c4dc:	8080030d 	sth	r2,12(r16)
 c00c4e0:	00800044 	movi	r2,1
 c00c4e4:	80c00015 	stw	r3,0(r16)
 c00c4e8:	80c00415 	stw	r3,16(r16)
 c00c4ec:	80800515 	stw	r2,20(r16)
 c00c4f0:	003fd306 	br	c00c440 <__alt_data_end+0xfc00c440>
 c00c4f4:	04810004 	movi	r18,1024
 c00c4f8:	003fc306 	br	c00c408 <__alt_data_end+0xfc00c408>
 c00c4fc:	0027883a 	mov	r19,zero
 c00c500:	04810004 	movi	r18,1024
 c00c504:	003fc006 	br	c00c408 <__alt_data_end+0xfc00c408>

0c00c508 <_malloc_r>:
 c00c508:	defff504 	addi	sp,sp,-44
 c00c50c:	dc800315 	stw	r18,12(sp)
 c00c510:	dfc00a15 	stw	ra,40(sp)
 c00c514:	df000915 	stw	fp,36(sp)
 c00c518:	ddc00815 	stw	r23,32(sp)
 c00c51c:	dd800715 	stw	r22,28(sp)
 c00c520:	dd400615 	stw	r21,24(sp)
 c00c524:	dd000515 	stw	r20,20(sp)
 c00c528:	dcc00415 	stw	r19,16(sp)
 c00c52c:	dc400215 	stw	r17,8(sp)
 c00c530:	dc000115 	stw	r16,4(sp)
 c00c534:	288002c4 	addi	r2,r5,11
 c00c538:	00c00584 	movi	r3,22
 c00c53c:	2025883a 	mov	r18,r4
 c00c540:	18807f2e 	bgeu	r3,r2,c00c740 <_malloc_r+0x238>
 c00c544:	047ffe04 	movi	r17,-8
 c00c548:	1462703a 	and	r17,r2,r17
 c00c54c:	8800a316 	blt	r17,zero,c00c7dc <_malloc_r+0x2d4>
 c00c550:	8940a236 	bltu	r17,r5,c00c7dc <_malloc_r+0x2d4>
 c00c554:	c015b800 	call	c015b80 <__malloc_lock>
 c00c558:	00807dc4 	movi	r2,503
 c00c55c:	1441e92e 	bgeu	r2,r17,c00cd04 <_malloc_r+0x7fc>
 c00c560:	8804d27a 	srli	r2,r17,9
 c00c564:	1000a126 	beq	r2,zero,c00c7ec <_malloc_r+0x2e4>
 c00c568:	00c00104 	movi	r3,4
 c00c56c:	18811e36 	bltu	r3,r2,c00c9e8 <_malloc_r+0x4e0>
 c00c570:	8804d1ba 	srli	r2,r17,6
 c00c574:	12000e44 	addi	r8,r2,57
 c00c578:	11c00e04 	addi	r7,r2,56
 c00c57c:	4209883a 	add	r4,r8,r8
 c00c580:	04c300b4 	movhi	r19,3074
 c00c584:	2109883a 	add	r4,r4,r4
 c00c588:	9ce49904 	addi	r19,r19,-28060
 c00c58c:	2109883a 	add	r4,r4,r4
 c00c590:	9909883a 	add	r4,r19,r4
 c00c594:	24000117 	ldw	r16,4(r4)
 c00c598:	213ffe04 	addi	r4,r4,-8
 c00c59c:	24009726 	beq	r4,r16,c00c7fc <_malloc_r+0x2f4>
 c00c5a0:	80800117 	ldw	r2,4(r16)
 c00c5a4:	01bfff04 	movi	r6,-4
 c00c5a8:	014003c4 	movi	r5,15
 c00c5ac:	1184703a 	and	r2,r2,r6
 c00c5b0:	1447c83a 	sub	r3,r2,r17
 c00c5b4:	28c00716 	blt	r5,r3,c00c5d4 <_malloc_r+0xcc>
 c00c5b8:	1800920e 	bge	r3,zero,c00c804 <_malloc_r+0x2fc>
 c00c5bc:	84000317 	ldw	r16,12(r16)
 c00c5c0:	24008e26 	beq	r4,r16,c00c7fc <_malloc_r+0x2f4>
 c00c5c4:	80800117 	ldw	r2,4(r16)
 c00c5c8:	1184703a 	and	r2,r2,r6
 c00c5cc:	1447c83a 	sub	r3,r2,r17
 c00c5d0:	28fff90e 	bge	r5,r3,c00c5b8 <__alt_data_end+0xfc00c5b8>
 c00c5d4:	3809883a 	mov	r4,r7
 c00c5d8:	018300b4 	movhi	r6,3074
 c00c5dc:	9c000417 	ldw	r16,16(r19)
 c00c5e0:	31a49904 	addi	r6,r6,-28060
 c00c5e4:	32000204 	addi	r8,r6,8
 c00c5e8:	82013426 	beq	r16,r8,c00cabc <_malloc_r+0x5b4>
 c00c5ec:	80c00117 	ldw	r3,4(r16)
 c00c5f0:	00bfff04 	movi	r2,-4
 c00c5f4:	188e703a 	and	r7,r3,r2
 c00c5f8:	3c45c83a 	sub	r2,r7,r17
 c00c5fc:	00c003c4 	movi	r3,15
 c00c600:	18811f16 	blt	r3,r2,c00ca80 <_malloc_r+0x578>
 c00c604:	32000515 	stw	r8,20(r6)
 c00c608:	32000415 	stw	r8,16(r6)
 c00c60c:	10007f0e 	bge	r2,zero,c00c80c <_malloc_r+0x304>
 c00c610:	00807fc4 	movi	r2,511
 c00c614:	11c0fd36 	bltu	r2,r7,c00ca0c <_malloc_r+0x504>
 c00c618:	3806d0fa 	srli	r3,r7,3
 c00c61c:	01c00044 	movi	r7,1
 c00c620:	30800117 	ldw	r2,4(r6)
 c00c624:	19400044 	addi	r5,r3,1
 c00c628:	294b883a 	add	r5,r5,r5
 c00c62c:	1807d0ba 	srai	r3,r3,2
 c00c630:	294b883a 	add	r5,r5,r5
 c00c634:	294b883a 	add	r5,r5,r5
 c00c638:	298b883a 	add	r5,r5,r6
 c00c63c:	38c6983a 	sll	r3,r7,r3
 c00c640:	29c00017 	ldw	r7,0(r5)
 c00c644:	2a7ffe04 	addi	r9,r5,-8
 c00c648:	1886b03a 	or	r3,r3,r2
 c00c64c:	82400315 	stw	r9,12(r16)
 c00c650:	81c00215 	stw	r7,8(r16)
 c00c654:	30c00115 	stw	r3,4(r6)
 c00c658:	2c000015 	stw	r16,0(r5)
 c00c65c:	3c000315 	stw	r16,12(r7)
 c00c660:	2005d0ba 	srai	r2,r4,2
 c00c664:	01400044 	movi	r5,1
 c00c668:	288a983a 	sll	r5,r5,r2
 c00c66c:	19406f36 	bltu	r3,r5,c00c82c <_malloc_r+0x324>
 c00c670:	28c4703a 	and	r2,r5,r3
 c00c674:	10000a1e 	bne	r2,zero,c00c6a0 <_malloc_r+0x198>
 c00c678:	00bfff04 	movi	r2,-4
 c00c67c:	294b883a 	add	r5,r5,r5
 c00c680:	2088703a 	and	r4,r4,r2
 c00c684:	28c4703a 	and	r2,r5,r3
 c00c688:	21000104 	addi	r4,r4,4
 c00c68c:	1000041e 	bne	r2,zero,c00c6a0 <_malloc_r+0x198>
 c00c690:	294b883a 	add	r5,r5,r5
 c00c694:	28c4703a 	and	r2,r5,r3
 c00c698:	21000104 	addi	r4,r4,4
 c00c69c:	103ffc26 	beq	r2,zero,c00c690 <__alt_data_end+0xfc00c690>
 c00c6a0:	02bfff04 	movi	r10,-4
 c00c6a4:	024003c4 	movi	r9,15
 c00c6a8:	21800044 	addi	r6,r4,1
 c00c6ac:	318d883a 	add	r6,r6,r6
 c00c6b0:	318d883a 	add	r6,r6,r6
 c00c6b4:	318d883a 	add	r6,r6,r6
 c00c6b8:	998d883a 	add	r6,r19,r6
 c00c6bc:	333ffe04 	addi	r12,r6,-8
 c00c6c0:	2017883a 	mov	r11,r4
 c00c6c4:	31800104 	addi	r6,r6,4
 c00c6c8:	34000017 	ldw	r16,0(r6)
 c00c6cc:	31fffd04 	addi	r7,r6,-12
 c00c6d0:	81c0041e 	bne	r16,r7,c00c6e4 <_malloc_r+0x1dc>
 c00c6d4:	0000fb06 	br	c00cac4 <_malloc_r+0x5bc>
 c00c6d8:	1801030e 	bge	r3,zero,c00cae8 <_malloc_r+0x5e0>
 c00c6dc:	84000317 	ldw	r16,12(r16)
 c00c6e0:	81c0f826 	beq	r16,r7,c00cac4 <_malloc_r+0x5bc>
 c00c6e4:	80800117 	ldw	r2,4(r16)
 c00c6e8:	1284703a 	and	r2,r2,r10
 c00c6ec:	1447c83a 	sub	r3,r2,r17
 c00c6f0:	48fff90e 	bge	r9,r3,c00c6d8 <__alt_data_end+0xfc00c6d8>
 c00c6f4:	80800317 	ldw	r2,12(r16)
 c00c6f8:	81000217 	ldw	r4,8(r16)
 c00c6fc:	89400054 	ori	r5,r17,1
 c00c700:	81400115 	stw	r5,4(r16)
 c00c704:	20800315 	stw	r2,12(r4)
 c00c708:	11000215 	stw	r4,8(r2)
 c00c70c:	8463883a 	add	r17,r16,r17
 c00c710:	9c400515 	stw	r17,20(r19)
 c00c714:	9c400415 	stw	r17,16(r19)
 c00c718:	18800054 	ori	r2,r3,1
 c00c71c:	88800115 	stw	r2,4(r17)
 c00c720:	8a000315 	stw	r8,12(r17)
 c00c724:	8a000215 	stw	r8,8(r17)
 c00c728:	88e3883a 	add	r17,r17,r3
 c00c72c:	88c00015 	stw	r3,0(r17)
 c00c730:	9009883a 	mov	r4,r18
 c00c734:	c015ba40 	call	c015ba4 <__malloc_unlock>
 c00c738:	80800204 	addi	r2,r16,8
 c00c73c:	00001b06 	br	c00c7ac <_malloc_r+0x2a4>
 c00c740:	04400404 	movi	r17,16
 c00c744:	89402536 	bltu	r17,r5,c00c7dc <_malloc_r+0x2d4>
 c00c748:	c015b800 	call	c015b80 <__malloc_lock>
 c00c74c:	00800184 	movi	r2,6
 c00c750:	01000084 	movi	r4,2
 c00c754:	04c300b4 	movhi	r19,3074
 c00c758:	1085883a 	add	r2,r2,r2
 c00c75c:	9ce49904 	addi	r19,r19,-28060
 c00c760:	1085883a 	add	r2,r2,r2
 c00c764:	9885883a 	add	r2,r19,r2
 c00c768:	14000117 	ldw	r16,4(r2)
 c00c76c:	10fffe04 	addi	r3,r2,-8
 c00c770:	80c0d926 	beq	r16,r3,c00cad8 <_malloc_r+0x5d0>
 c00c774:	80c00117 	ldw	r3,4(r16)
 c00c778:	81000317 	ldw	r4,12(r16)
 c00c77c:	00bfff04 	movi	r2,-4
 c00c780:	1884703a 	and	r2,r3,r2
 c00c784:	81400217 	ldw	r5,8(r16)
 c00c788:	8085883a 	add	r2,r16,r2
 c00c78c:	10c00117 	ldw	r3,4(r2)
 c00c790:	29000315 	stw	r4,12(r5)
 c00c794:	21400215 	stw	r5,8(r4)
 c00c798:	18c00054 	ori	r3,r3,1
 c00c79c:	10c00115 	stw	r3,4(r2)
 c00c7a0:	9009883a 	mov	r4,r18
 c00c7a4:	c015ba40 	call	c015ba4 <__malloc_unlock>
 c00c7a8:	80800204 	addi	r2,r16,8
 c00c7ac:	dfc00a17 	ldw	ra,40(sp)
 c00c7b0:	df000917 	ldw	fp,36(sp)
 c00c7b4:	ddc00817 	ldw	r23,32(sp)
 c00c7b8:	dd800717 	ldw	r22,28(sp)
 c00c7bc:	dd400617 	ldw	r21,24(sp)
 c00c7c0:	dd000517 	ldw	r20,20(sp)
 c00c7c4:	dcc00417 	ldw	r19,16(sp)
 c00c7c8:	dc800317 	ldw	r18,12(sp)
 c00c7cc:	dc400217 	ldw	r17,8(sp)
 c00c7d0:	dc000117 	ldw	r16,4(sp)
 c00c7d4:	dec00b04 	addi	sp,sp,44
 c00c7d8:	f800283a 	ret
 c00c7dc:	00800304 	movi	r2,12
 c00c7e0:	90800015 	stw	r2,0(r18)
 c00c7e4:	0005883a 	mov	r2,zero
 c00c7e8:	003ff006 	br	c00c7ac <__alt_data_end+0xfc00c7ac>
 c00c7ec:	01002004 	movi	r4,128
 c00c7f0:	02001004 	movi	r8,64
 c00c7f4:	01c00fc4 	movi	r7,63
 c00c7f8:	003f6106 	br	c00c580 <__alt_data_end+0xfc00c580>
 c00c7fc:	4009883a 	mov	r4,r8
 c00c800:	003f7506 	br	c00c5d8 <__alt_data_end+0xfc00c5d8>
 c00c804:	81000317 	ldw	r4,12(r16)
 c00c808:	003fde06 	br	c00c784 <__alt_data_end+0xfc00c784>
 c00c80c:	81c5883a 	add	r2,r16,r7
 c00c810:	11400117 	ldw	r5,4(r2)
 c00c814:	9009883a 	mov	r4,r18
 c00c818:	29400054 	ori	r5,r5,1
 c00c81c:	11400115 	stw	r5,4(r2)
 c00c820:	c015ba40 	call	c015ba4 <__malloc_unlock>
 c00c824:	80800204 	addi	r2,r16,8
 c00c828:	003fe006 	br	c00c7ac <__alt_data_end+0xfc00c7ac>
 c00c82c:	9c000217 	ldw	r16,8(r19)
 c00c830:	00bfff04 	movi	r2,-4
 c00c834:	85800117 	ldw	r22,4(r16)
 c00c838:	b0ac703a 	and	r22,r22,r2
 c00c83c:	b4400336 	bltu	r22,r17,c00c84c <_malloc_r+0x344>
 c00c840:	b445c83a 	sub	r2,r22,r17
 c00c844:	00c003c4 	movi	r3,15
 c00c848:	18805d16 	blt	r3,r2,c00c9c0 <_malloc_r+0x4b8>
 c00c84c:	05c300b4 	movhi	r23,3074
 c00c850:	008300b4 	movhi	r2,3074
 c00c854:	10b1c704 	addi	r2,r2,-14564
 c00c858:	bdea2804 	addi	r23,r23,-22368
 c00c85c:	15400017 	ldw	r21,0(r2)
 c00c860:	b8c00017 	ldw	r3,0(r23)
 c00c864:	00bfffc4 	movi	r2,-1
 c00c868:	858d883a 	add	r6,r16,r22
 c00c86c:	8d6b883a 	add	r21,r17,r21
 c00c870:	1880ea26 	beq	r3,r2,c00cc1c <_malloc_r+0x714>
 c00c874:	ad4403c4 	addi	r21,r21,4111
 c00c878:	00bc0004 	movi	r2,-4096
 c00c87c:	a8aa703a 	and	r21,r21,r2
 c00c880:	a80b883a 	mov	r5,r21
 c00c884:	9009883a 	mov	r4,r18
 c00c888:	d9800015 	stw	r6,0(sp)
 c00c88c:	c00e8540 	call	c00e854 <_sbrk_r>
 c00c890:	1029883a 	mov	r20,r2
 c00c894:	00bfffc4 	movi	r2,-1
 c00c898:	d9800017 	ldw	r6,0(sp)
 c00c89c:	a080e826 	beq	r20,r2,c00cc40 <_malloc_r+0x738>
 c00c8a0:	a180a636 	bltu	r20,r6,c00cb3c <_malloc_r+0x634>
 c00c8a4:	070300b4 	movhi	fp,3074
 c00c8a8:	e731da04 	addi	fp,fp,-14488
 c00c8ac:	e0800017 	ldw	r2,0(fp)
 c00c8b0:	a887883a 	add	r3,r21,r2
 c00c8b4:	e0c00015 	stw	r3,0(fp)
 c00c8b8:	3500e626 	beq	r6,r20,c00cc54 <_malloc_r+0x74c>
 c00c8bc:	b9000017 	ldw	r4,0(r23)
 c00c8c0:	00bfffc4 	movi	r2,-1
 c00c8c4:	2080ee26 	beq	r4,r2,c00cc80 <_malloc_r+0x778>
 c00c8c8:	a185c83a 	sub	r2,r20,r6
 c00c8cc:	10c5883a 	add	r2,r2,r3
 c00c8d0:	e0800015 	stw	r2,0(fp)
 c00c8d4:	a0c001cc 	andi	r3,r20,7
 c00c8d8:	1800bc26 	beq	r3,zero,c00cbcc <_malloc_r+0x6c4>
 c00c8dc:	a0e9c83a 	sub	r20,r20,r3
 c00c8e0:	00840204 	movi	r2,4104
 c00c8e4:	a5000204 	addi	r20,r20,8
 c00c8e8:	10c7c83a 	sub	r3,r2,r3
 c00c8ec:	a545883a 	add	r2,r20,r21
 c00c8f0:	1083ffcc 	andi	r2,r2,4095
 c00c8f4:	18abc83a 	sub	r21,r3,r2
 c00c8f8:	a80b883a 	mov	r5,r21
 c00c8fc:	9009883a 	mov	r4,r18
 c00c900:	c00e8540 	call	c00e854 <_sbrk_r>
 c00c904:	00ffffc4 	movi	r3,-1
 c00c908:	10c0e126 	beq	r2,r3,c00cc90 <_malloc_r+0x788>
 c00c90c:	1505c83a 	sub	r2,r2,r20
 c00c910:	1545883a 	add	r2,r2,r21
 c00c914:	10800054 	ori	r2,r2,1
 c00c918:	e0c00017 	ldw	r3,0(fp)
 c00c91c:	9d000215 	stw	r20,8(r19)
 c00c920:	a0800115 	stw	r2,4(r20)
 c00c924:	a8c7883a 	add	r3,r21,r3
 c00c928:	e0c00015 	stw	r3,0(fp)
 c00c92c:	84c00e26 	beq	r16,r19,c00c968 <_malloc_r+0x460>
 c00c930:	018003c4 	movi	r6,15
 c00c934:	3580a72e 	bgeu	r6,r22,c00cbd4 <_malloc_r+0x6cc>
 c00c938:	81400117 	ldw	r5,4(r16)
 c00c93c:	013ffe04 	movi	r4,-8
 c00c940:	b0bffd04 	addi	r2,r22,-12
 c00c944:	1104703a 	and	r2,r2,r4
 c00c948:	2900004c 	andi	r4,r5,1
 c00c94c:	2088b03a 	or	r4,r4,r2
 c00c950:	81000115 	stw	r4,4(r16)
 c00c954:	01400144 	movi	r5,5
 c00c958:	8089883a 	add	r4,r16,r2
 c00c95c:	21400115 	stw	r5,4(r4)
 c00c960:	21400215 	stw	r5,8(r4)
 c00c964:	3080cd36 	bltu	r6,r2,c00cc9c <_malloc_r+0x794>
 c00c968:	008300b4 	movhi	r2,3074
 c00c96c:	10b1c604 	addi	r2,r2,-14568
 c00c970:	11000017 	ldw	r4,0(r2)
 c00c974:	20c0012e 	bgeu	r4,r3,c00c97c <_malloc_r+0x474>
 c00c978:	10c00015 	stw	r3,0(r2)
 c00c97c:	008300b4 	movhi	r2,3074
 c00c980:	10b1c504 	addi	r2,r2,-14572
 c00c984:	11000017 	ldw	r4,0(r2)
 c00c988:	9c000217 	ldw	r16,8(r19)
 c00c98c:	20c0012e 	bgeu	r4,r3,c00c994 <_malloc_r+0x48c>
 c00c990:	10c00015 	stw	r3,0(r2)
 c00c994:	80c00117 	ldw	r3,4(r16)
 c00c998:	00bfff04 	movi	r2,-4
 c00c99c:	1886703a 	and	r3,r3,r2
 c00c9a0:	1c45c83a 	sub	r2,r3,r17
 c00c9a4:	1c400236 	bltu	r3,r17,c00c9b0 <_malloc_r+0x4a8>
 c00c9a8:	00c003c4 	movi	r3,15
 c00c9ac:	18800416 	blt	r3,r2,c00c9c0 <_malloc_r+0x4b8>
 c00c9b0:	9009883a 	mov	r4,r18
 c00c9b4:	c015ba40 	call	c015ba4 <__malloc_unlock>
 c00c9b8:	0005883a 	mov	r2,zero
 c00c9bc:	003f7b06 	br	c00c7ac <__alt_data_end+0xfc00c7ac>
 c00c9c0:	88c00054 	ori	r3,r17,1
 c00c9c4:	80c00115 	stw	r3,4(r16)
 c00c9c8:	8463883a 	add	r17,r16,r17
 c00c9cc:	10800054 	ori	r2,r2,1
 c00c9d0:	9c400215 	stw	r17,8(r19)
 c00c9d4:	88800115 	stw	r2,4(r17)
 c00c9d8:	9009883a 	mov	r4,r18
 c00c9dc:	c015ba40 	call	c015ba4 <__malloc_unlock>
 c00c9e0:	80800204 	addi	r2,r16,8
 c00c9e4:	003f7106 	br	c00c7ac <__alt_data_end+0xfc00c7ac>
 c00c9e8:	00c00504 	movi	r3,20
 c00c9ec:	18804a2e 	bgeu	r3,r2,c00cb18 <_malloc_r+0x610>
 c00c9f0:	00c01504 	movi	r3,84
 c00c9f4:	18806e36 	bltu	r3,r2,c00cbb0 <_malloc_r+0x6a8>
 c00c9f8:	8804d33a 	srli	r2,r17,12
 c00c9fc:	12001bc4 	addi	r8,r2,111
 c00ca00:	11c01b84 	addi	r7,r2,110
 c00ca04:	4209883a 	add	r4,r8,r8
 c00ca08:	003edd06 	br	c00c580 <__alt_data_end+0xfc00c580>
 c00ca0c:	3804d27a 	srli	r2,r7,9
 c00ca10:	00c00104 	movi	r3,4
 c00ca14:	1880442e 	bgeu	r3,r2,c00cb28 <_malloc_r+0x620>
 c00ca18:	00c00504 	movi	r3,20
 c00ca1c:	18808136 	bltu	r3,r2,c00cc24 <_malloc_r+0x71c>
 c00ca20:	11401704 	addi	r5,r2,92
 c00ca24:	10c016c4 	addi	r3,r2,91
 c00ca28:	294b883a 	add	r5,r5,r5
 c00ca2c:	294b883a 	add	r5,r5,r5
 c00ca30:	294b883a 	add	r5,r5,r5
 c00ca34:	994b883a 	add	r5,r19,r5
 c00ca38:	28800017 	ldw	r2,0(r5)
 c00ca3c:	018300b4 	movhi	r6,3074
 c00ca40:	297ffe04 	addi	r5,r5,-8
 c00ca44:	31a49904 	addi	r6,r6,-28060
 c00ca48:	28806526 	beq	r5,r2,c00cbe0 <_malloc_r+0x6d8>
 c00ca4c:	01bfff04 	movi	r6,-4
 c00ca50:	10c00117 	ldw	r3,4(r2)
 c00ca54:	1986703a 	and	r3,r3,r6
 c00ca58:	38c0022e 	bgeu	r7,r3,c00ca64 <_malloc_r+0x55c>
 c00ca5c:	10800217 	ldw	r2,8(r2)
 c00ca60:	28bffb1e 	bne	r5,r2,c00ca50 <__alt_data_end+0xfc00ca50>
 c00ca64:	11400317 	ldw	r5,12(r2)
 c00ca68:	98c00117 	ldw	r3,4(r19)
 c00ca6c:	81400315 	stw	r5,12(r16)
 c00ca70:	80800215 	stw	r2,8(r16)
 c00ca74:	2c000215 	stw	r16,8(r5)
 c00ca78:	14000315 	stw	r16,12(r2)
 c00ca7c:	003ef806 	br	c00c660 <__alt_data_end+0xfc00c660>
 c00ca80:	88c00054 	ori	r3,r17,1
 c00ca84:	80c00115 	stw	r3,4(r16)
 c00ca88:	8463883a 	add	r17,r16,r17
 c00ca8c:	34400515 	stw	r17,20(r6)
 c00ca90:	34400415 	stw	r17,16(r6)
 c00ca94:	10c00054 	ori	r3,r2,1
 c00ca98:	8a000315 	stw	r8,12(r17)
 c00ca9c:	8a000215 	stw	r8,8(r17)
 c00caa0:	88c00115 	stw	r3,4(r17)
 c00caa4:	88a3883a 	add	r17,r17,r2
 c00caa8:	88800015 	stw	r2,0(r17)
 c00caac:	9009883a 	mov	r4,r18
 c00cab0:	c015ba40 	call	c015ba4 <__malloc_unlock>
 c00cab4:	80800204 	addi	r2,r16,8
 c00cab8:	003f3c06 	br	c00c7ac <__alt_data_end+0xfc00c7ac>
 c00cabc:	30c00117 	ldw	r3,4(r6)
 c00cac0:	003ee706 	br	c00c660 <__alt_data_end+0xfc00c660>
 c00cac4:	5ac00044 	addi	r11,r11,1
 c00cac8:	588000cc 	andi	r2,r11,3
 c00cacc:	31800204 	addi	r6,r6,8
 c00cad0:	103efd1e 	bne	r2,zero,c00c6c8 <__alt_data_end+0xfc00c6c8>
 c00cad4:	00002406 	br	c00cb68 <_malloc_r+0x660>
 c00cad8:	14000317 	ldw	r16,12(r2)
 c00cadc:	143f251e 	bne	r2,r16,c00c774 <__alt_data_end+0xfc00c774>
 c00cae0:	21000084 	addi	r4,r4,2
 c00cae4:	003ebc06 	br	c00c5d8 <__alt_data_end+0xfc00c5d8>
 c00cae8:	8085883a 	add	r2,r16,r2
 c00caec:	10c00117 	ldw	r3,4(r2)
 c00caf0:	81000317 	ldw	r4,12(r16)
 c00caf4:	81400217 	ldw	r5,8(r16)
 c00caf8:	18c00054 	ori	r3,r3,1
 c00cafc:	10c00115 	stw	r3,4(r2)
 c00cb00:	29000315 	stw	r4,12(r5)
 c00cb04:	21400215 	stw	r5,8(r4)
 c00cb08:	9009883a 	mov	r4,r18
 c00cb0c:	c015ba40 	call	c015ba4 <__malloc_unlock>
 c00cb10:	80800204 	addi	r2,r16,8
 c00cb14:	003f2506 	br	c00c7ac <__alt_data_end+0xfc00c7ac>
 c00cb18:	12001704 	addi	r8,r2,92
 c00cb1c:	11c016c4 	addi	r7,r2,91
 c00cb20:	4209883a 	add	r4,r8,r8
 c00cb24:	003e9606 	br	c00c580 <__alt_data_end+0xfc00c580>
 c00cb28:	3804d1ba 	srli	r2,r7,6
 c00cb2c:	11400e44 	addi	r5,r2,57
 c00cb30:	10c00e04 	addi	r3,r2,56
 c00cb34:	294b883a 	add	r5,r5,r5
 c00cb38:	003fbc06 	br	c00ca2c <__alt_data_end+0xfc00ca2c>
 c00cb3c:	84ff5926 	beq	r16,r19,c00c8a4 <__alt_data_end+0xfc00c8a4>
 c00cb40:	008300b4 	movhi	r2,3074
 c00cb44:	10a49904 	addi	r2,r2,-28060
 c00cb48:	14000217 	ldw	r16,8(r2)
 c00cb4c:	00bfff04 	movi	r2,-4
 c00cb50:	80c00117 	ldw	r3,4(r16)
 c00cb54:	1886703a 	and	r3,r3,r2
 c00cb58:	003f9106 	br	c00c9a0 <__alt_data_end+0xfc00c9a0>
 c00cb5c:	60800217 	ldw	r2,8(r12)
 c00cb60:	213fffc4 	addi	r4,r4,-1
 c00cb64:	1300651e 	bne	r2,r12,c00ccfc <_malloc_r+0x7f4>
 c00cb68:	208000cc 	andi	r2,r4,3
 c00cb6c:	633ffe04 	addi	r12,r12,-8
 c00cb70:	103ffa1e 	bne	r2,zero,c00cb5c <__alt_data_end+0xfc00cb5c>
 c00cb74:	98800117 	ldw	r2,4(r19)
 c00cb78:	0146303a 	nor	r3,zero,r5
 c00cb7c:	1884703a 	and	r2,r3,r2
 c00cb80:	98800115 	stw	r2,4(r19)
 c00cb84:	294b883a 	add	r5,r5,r5
 c00cb88:	117f2836 	bltu	r2,r5,c00c82c <__alt_data_end+0xfc00c82c>
 c00cb8c:	283f2726 	beq	r5,zero,c00c82c <__alt_data_end+0xfc00c82c>
 c00cb90:	2886703a 	and	r3,r5,r2
 c00cb94:	5809883a 	mov	r4,r11
 c00cb98:	183ec31e 	bne	r3,zero,c00c6a8 <__alt_data_end+0xfc00c6a8>
 c00cb9c:	294b883a 	add	r5,r5,r5
 c00cba0:	2886703a 	and	r3,r5,r2
 c00cba4:	21000104 	addi	r4,r4,4
 c00cba8:	183ffc26 	beq	r3,zero,c00cb9c <__alt_data_end+0xfc00cb9c>
 c00cbac:	003ebe06 	br	c00c6a8 <__alt_data_end+0xfc00c6a8>
 c00cbb0:	00c05504 	movi	r3,340
 c00cbb4:	18801236 	bltu	r3,r2,c00cc00 <_malloc_r+0x6f8>
 c00cbb8:	8804d3fa 	srli	r2,r17,15
 c00cbbc:	12001e04 	addi	r8,r2,120
 c00cbc0:	11c01dc4 	addi	r7,r2,119
 c00cbc4:	4209883a 	add	r4,r8,r8
 c00cbc8:	003e6d06 	br	c00c580 <__alt_data_end+0xfc00c580>
 c00cbcc:	00c40004 	movi	r3,4096
 c00cbd0:	003f4606 	br	c00c8ec <__alt_data_end+0xfc00c8ec>
 c00cbd4:	00800044 	movi	r2,1
 c00cbd8:	a0800115 	stw	r2,4(r20)
 c00cbdc:	003f7406 	br	c00c9b0 <__alt_data_end+0xfc00c9b0>
 c00cbe0:	1805d0ba 	srai	r2,r3,2
 c00cbe4:	01c00044 	movi	r7,1
 c00cbe8:	30c00117 	ldw	r3,4(r6)
 c00cbec:	388e983a 	sll	r7,r7,r2
 c00cbf0:	2805883a 	mov	r2,r5
 c00cbf4:	38c6b03a 	or	r3,r7,r3
 c00cbf8:	30c00115 	stw	r3,4(r6)
 c00cbfc:	003f9b06 	br	c00ca6c <__alt_data_end+0xfc00ca6c>
 c00cc00:	00c15504 	movi	r3,1364
 c00cc04:	18801a36 	bltu	r3,r2,c00cc70 <_malloc_r+0x768>
 c00cc08:	8804d4ba 	srli	r2,r17,18
 c00cc0c:	12001f44 	addi	r8,r2,125
 c00cc10:	11c01f04 	addi	r7,r2,124
 c00cc14:	4209883a 	add	r4,r8,r8
 c00cc18:	003e5906 	br	c00c580 <__alt_data_end+0xfc00c580>
 c00cc1c:	ad400404 	addi	r21,r21,16
 c00cc20:	003f1706 	br	c00c880 <__alt_data_end+0xfc00c880>
 c00cc24:	00c01504 	movi	r3,84
 c00cc28:	18802336 	bltu	r3,r2,c00ccb8 <_malloc_r+0x7b0>
 c00cc2c:	3804d33a 	srli	r2,r7,12
 c00cc30:	11401bc4 	addi	r5,r2,111
 c00cc34:	10c01b84 	addi	r3,r2,110
 c00cc38:	294b883a 	add	r5,r5,r5
 c00cc3c:	003f7b06 	br	c00ca2c <__alt_data_end+0xfc00ca2c>
 c00cc40:	9c000217 	ldw	r16,8(r19)
 c00cc44:	00bfff04 	movi	r2,-4
 c00cc48:	80c00117 	ldw	r3,4(r16)
 c00cc4c:	1886703a 	and	r3,r3,r2
 c00cc50:	003f5306 	br	c00c9a0 <__alt_data_end+0xfc00c9a0>
 c00cc54:	3083ffcc 	andi	r2,r6,4095
 c00cc58:	103f181e 	bne	r2,zero,c00c8bc <__alt_data_end+0xfc00c8bc>
 c00cc5c:	99000217 	ldw	r4,8(r19)
 c00cc60:	b545883a 	add	r2,r22,r21
 c00cc64:	10800054 	ori	r2,r2,1
 c00cc68:	20800115 	stw	r2,4(r4)
 c00cc6c:	003f3e06 	br	c00c968 <__alt_data_end+0xfc00c968>
 c00cc70:	01003f84 	movi	r4,254
 c00cc74:	02001fc4 	movi	r8,127
 c00cc78:	01c01f84 	movi	r7,126
 c00cc7c:	003e4006 	br	c00c580 <__alt_data_end+0xfc00c580>
 c00cc80:	008300b4 	movhi	r2,3074
 c00cc84:	10aa2804 	addi	r2,r2,-22368
 c00cc88:	15000015 	stw	r20,0(r2)
 c00cc8c:	003f1106 	br	c00c8d4 <__alt_data_end+0xfc00c8d4>
 c00cc90:	00800044 	movi	r2,1
 c00cc94:	002b883a 	mov	r21,zero
 c00cc98:	003f1f06 	br	c00c918 <__alt_data_end+0xfc00c918>
 c00cc9c:	81400204 	addi	r5,r16,8
 c00cca0:	9009883a 	mov	r4,r18
 c00cca4:	c00b9100 	call	c00b910 <_free_r>
 c00cca8:	008300b4 	movhi	r2,3074
 c00ccac:	10b1da04 	addi	r2,r2,-14488
 c00ccb0:	10c00017 	ldw	r3,0(r2)
 c00ccb4:	003f2c06 	br	c00c968 <__alt_data_end+0xfc00c968>
 c00ccb8:	00c05504 	movi	r3,340
 c00ccbc:	18800536 	bltu	r3,r2,c00ccd4 <_malloc_r+0x7cc>
 c00ccc0:	3804d3fa 	srli	r2,r7,15
 c00ccc4:	11401e04 	addi	r5,r2,120
 c00ccc8:	10c01dc4 	addi	r3,r2,119
 c00cccc:	294b883a 	add	r5,r5,r5
 c00ccd0:	003f5606 	br	c00ca2c <__alt_data_end+0xfc00ca2c>
 c00ccd4:	00c15504 	movi	r3,1364
 c00ccd8:	18800536 	bltu	r3,r2,c00ccf0 <_malloc_r+0x7e8>
 c00ccdc:	3804d4ba 	srli	r2,r7,18
 c00cce0:	11401f44 	addi	r5,r2,125
 c00cce4:	10c01f04 	addi	r3,r2,124
 c00cce8:	294b883a 	add	r5,r5,r5
 c00ccec:	003f4f06 	br	c00ca2c <__alt_data_end+0xfc00ca2c>
 c00ccf0:	01403f84 	movi	r5,254
 c00ccf4:	00c01f84 	movi	r3,126
 c00ccf8:	003f4c06 	br	c00ca2c <__alt_data_end+0xfc00ca2c>
 c00ccfc:	98800117 	ldw	r2,4(r19)
 c00cd00:	003fa006 	br	c00cb84 <__alt_data_end+0xfc00cb84>
 c00cd04:	8808d0fa 	srli	r4,r17,3
 c00cd08:	20800044 	addi	r2,r4,1
 c00cd0c:	1085883a 	add	r2,r2,r2
 c00cd10:	003e9006 	br	c00c754 <__alt_data_end+0xfc00c754>

0c00cd14 <memchr>:
 c00cd14:	208000cc 	andi	r2,r4,3
 c00cd18:	280f883a 	mov	r7,r5
 c00cd1c:	10003426 	beq	r2,zero,c00cdf0 <memchr+0xdc>
 c00cd20:	30bfffc4 	addi	r2,r6,-1
 c00cd24:	30001a26 	beq	r6,zero,c00cd90 <memchr+0x7c>
 c00cd28:	20c00003 	ldbu	r3,0(r4)
 c00cd2c:	29803fcc 	andi	r6,r5,255
 c00cd30:	30c0051e 	bne	r6,r3,c00cd48 <memchr+0x34>
 c00cd34:	00001806 	br	c00cd98 <memchr+0x84>
 c00cd38:	10001526 	beq	r2,zero,c00cd90 <memchr+0x7c>
 c00cd3c:	20c00003 	ldbu	r3,0(r4)
 c00cd40:	10bfffc4 	addi	r2,r2,-1
 c00cd44:	30c01426 	beq	r6,r3,c00cd98 <memchr+0x84>
 c00cd48:	21000044 	addi	r4,r4,1
 c00cd4c:	20c000cc 	andi	r3,r4,3
 c00cd50:	183ff91e 	bne	r3,zero,c00cd38 <__alt_data_end+0xfc00cd38>
 c00cd54:	020000c4 	movi	r8,3
 c00cd58:	40801136 	bltu	r8,r2,c00cda0 <memchr+0x8c>
 c00cd5c:	10000c26 	beq	r2,zero,c00cd90 <memchr+0x7c>
 c00cd60:	20c00003 	ldbu	r3,0(r4)
 c00cd64:	29403fcc 	andi	r5,r5,255
 c00cd68:	28c00b26 	beq	r5,r3,c00cd98 <memchr+0x84>
 c00cd6c:	20c00044 	addi	r3,r4,1
 c00cd70:	39803fcc 	andi	r6,r7,255
 c00cd74:	2089883a 	add	r4,r4,r2
 c00cd78:	00000306 	br	c00cd88 <memchr+0x74>
 c00cd7c:	18c00044 	addi	r3,r3,1
 c00cd80:	197fffc3 	ldbu	r5,-1(r3)
 c00cd84:	31400526 	beq	r6,r5,c00cd9c <memchr+0x88>
 c00cd88:	1805883a 	mov	r2,r3
 c00cd8c:	20fffb1e 	bne	r4,r3,c00cd7c <__alt_data_end+0xfc00cd7c>
 c00cd90:	0005883a 	mov	r2,zero
 c00cd94:	f800283a 	ret
 c00cd98:	2005883a 	mov	r2,r4
 c00cd9c:	f800283a 	ret
 c00cda0:	28c03fcc 	andi	r3,r5,255
 c00cda4:	1812923a 	slli	r9,r3,8
 c00cda8:	02ffbff4 	movhi	r11,65279
 c00cdac:	02a02074 	movhi	r10,32897
 c00cdb0:	48d2b03a 	or	r9,r9,r3
 c00cdb4:	4806943a 	slli	r3,r9,16
 c00cdb8:	5affbfc4 	addi	r11,r11,-257
 c00cdbc:	52a02004 	addi	r10,r10,-32640
 c00cdc0:	48d2b03a 	or	r9,r9,r3
 c00cdc4:	20c00017 	ldw	r3,0(r4)
 c00cdc8:	48c6f03a 	xor	r3,r9,r3
 c00cdcc:	1acd883a 	add	r6,r3,r11
 c00cdd0:	00c6303a 	nor	r3,zero,r3
 c00cdd4:	30c6703a 	and	r3,r6,r3
 c00cdd8:	1a86703a 	and	r3,r3,r10
 c00cddc:	183fe01e 	bne	r3,zero,c00cd60 <__alt_data_end+0xfc00cd60>
 c00cde0:	10bfff04 	addi	r2,r2,-4
 c00cde4:	21000104 	addi	r4,r4,4
 c00cde8:	40bff636 	bltu	r8,r2,c00cdc4 <__alt_data_end+0xfc00cdc4>
 c00cdec:	003fdb06 	br	c00cd5c <__alt_data_end+0xfc00cd5c>
 c00cdf0:	3005883a 	mov	r2,r6
 c00cdf4:	003fd706 	br	c00cd54 <__alt_data_end+0xfc00cd54>

0c00cdf8 <memcpy>:
 c00cdf8:	defffd04 	addi	sp,sp,-12
 c00cdfc:	dfc00215 	stw	ra,8(sp)
 c00ce00:	dc400115 	stw	r17,4(sp)
 c00ce04:	dc000015 	stw	r16,0(sp)
 c00ce08:	00c003c4 	movi	r3,15
 c00ce0c:	2005883a 	mov	r2,r4
 c00ce10:	1980452e 	bgeu	r3,r6,c00cf28 <memcpy+0x130>
 c00ce14:	2906b03a 	or	r3,r5,r4
 c00ce18:	18c000cc 	andi	r3,r3,3
 c00ce1c:	1800441e 	bne	r3,zero,c00cf30 <memcpy+0x138>
 c00ce20:	347ffc04 	addi	r17,r6,-16
 c00ce24:	8822d13a 	srli	r17,r17,4
 c00ce28:	28c00104 	addi	r3,r5,4
 c00ce2c:	23400104 	addi	r13,r4,4
 c00ce30:	8820913a 	slli	r16,r17,4
 c00ce34:	2b000204 	addi	r12,r5,8
 c00ce38:	22c00204 	addi	r11,r4,8
 c00ce3c:	84000504 	addi	r16,r16,20
 c00ce40:	2a800304 	addi	r10,r5,12
 c00ce44:	22400304 	addi	r9,r4,12
 c00ce48:	2c21883a 	add	r16,r5,r16
 c00ce4c:	2811883a 	mov	r8,r5
 c00ce50:	200f883a 	mov	r7,r4
 c00ce54:	41000017 	ldw	r4,0(r8)
 c00ce58:	1fc00017 	ldw	ra,0(r3)
 c00ce5c:	63c00017 	ldw	r15,0(r12)
 c00ce60:	39000015 	stw	r4,0(r7)
 c00ce64:	53800017 	ldw	r14,0(r10)
 c00ce68:	6fc00015 	stw	ra,0(r13)
 c00ce6c:	5bc00015 	stw	r15,0(r11)
 c00ce70:	4b800015 	stw	r14,0(r9)
 c00ce74:	18c00404 	addi	r3,r3,16
 c00ce78:	39c00404 	addi	r7,r7,16
 c00ce7c:	42000404 	addi	r8,r8,16
 c00ce80:	6b400404 	addi	r13,r13,16
 c00ce84:	63000404 	addi	r12,r12,16
 c00ce88:	5ac00404 	addi	r11,r11,16
 c00ce8c:	52800404 	addi	r10,r10,16
 c00ce90:	4a400404 	addi	r9,r9,16
 c00ce94:	1c3fef1e 	bne	r3,r16,c00ce54 <__alt_data_end+0xfc00ce54>
 c00ce98:	89c00044 	addi	r7,r17,1
 c00ce9c:	380e913a 	slli	r7,r7,4
 c00cea0:	310003cc 	andi	r4,r6,15
 c00cea4:	02c000c4 	movi	r11,3
 c00cea8:	11c7883a 	add	r3,r2,r7
 c00ceac:	29cb883a 	add	r5,r5,r7
 c00ceb0:	5900212e 	bgeu	r11,r4,c00cf38 <memcpy+0x140>
 c00ceb4:	1813883a 	mov	r9,r3
 c00ceb8:	2811883a 	mov	r8,r5
 c00cebc:	200f883a 	mov	r7,r4
 c00cec0:	42800017 	ldw	r10,0(r8)
 c00cec4:	4a400104 	addi	r9,r9,4
 c00cec8:	39ffff04 	addi	r7,r7,-4
 c00cecc:	4abfff15 	stw	r10,-4(r9)
 c00ced0:	42000104 	addi	r8,r8,4
 c00ced4:	59fffa36 	bltu	r11,r7,c00cec0 <__alt_data_end+0xfc00cec0>
 c00ced8:	213fff04 	addi	r4,r4,-4
 c00cedc:	2008d0ba 	srli	r4,r4,2
 c00cee0:	318000cc 	andi	r6,r6,3
 c00cee4:	21000044 	addi	r4,r4,1
 c00cee8:	2109883a 	add	r4,r4,r4
 c00ceec:	2109883a 	add	r4,r4,r4
 c00cef0:	1907883a 	add	r3,r3,r4
 c00cef4:	290b883a 	add	r5,r5,r4
 c00cef8:	30000626 	beq	r6,zero,c00cf14 <memcpy+0x11c>
 c00cefc:	198d883a 	add	r6,r3,r6
 c00cf00:	29c00003 	ldbu	r7,0(r5)
 c00cf04:	18c00044 	addi	r3,r3,1
 c00cf08:	29400044 	addi	r5,r5,1
 c00cf0c:	19ffffc5 	stb	r7,-1(r3)
 c00cf10:	19bffb1e 	bne	r3,r6,c00cf00 <__alt_data_end+0xfc00cf00>
 c00cf14:	dfc00217 	ldw	ra,8(sp)
 c00cf18:	dc400117 	ldw	r17,4(sp)
 c00cf1c:	dc000017 	ldw	r16,0(sp)
 c00cf20:	dec00304 	addi	sp,sp,12
 c00cf24:	f800283a 	ret
 c00cf28:	2007883a 	mov	r3,r4
 c00cf2c:	003ff206 	br	c00cef8 <__alt_data_end+0xfc00cef8>
 c00cf30:	2007883a 	mov	r3,r4
 c00cf34:	003ff106 	br	c00cefc <__alt_data_end+0xfc00cefc>
 c00cf38:	200d883a 	mov	r6,r4
 c00cf3c:	003fee06 	br	c00cef8 <__alt_data_end+0xfc00cef8>

0c00cf40 <memmove>:
 c00cf40:	2005883a 	mov	r2,r4
 c00cf44:	29000b2e 	bgeu	r5,r4,c00cf74 <memmove+0x34>
 c00cf48:	298f883a 	add	r7,r5,r6
 c00cf4c:	21c0092e 	bgeu	r4,r7,c00cf74 <memmove+0x34>
 c00cf50:	2187883a 	add	r3,r4,r6
 c00cf54:	198bc83a 	sub	r5,r3,r6
 c00cf58:	30004826 	beq	r6,zero,c00d07c <memmove+0x13c>
 c00cf5c:	39ffffc4 	addi	r7,r7,-1
 c00cf60:	39000003 	ldbu	r4,0(r7)
 c00cf64:	18ffffc4 	addi	r3,r3,-1
 c00cf68:	19000005 	stb	r4,0(r3)
 c00cf6c:	28fffb1e 	bne	r5,r3,c00cf5c <__alt_data_end+0xfc00cf5c>
 c00cf70:	f800283a 	ret
 c00cf74:	00c003c4 	movi	r3,15
 c00cf78:	1980412e 	bgeu	r3,r6,c00d080 <memmove+0x140>
 c00cf7c:	2886b03a 	or	r3,r5,r2
 c00cf80:	18c000cc 	andi	r3,r3,3
 c00cf84:	1800401e 	bne	r3,zero,c00d088 <memmove+0x148>
 c00cf88:	33fffc04 	addi	r15,r6,-16
 c00cf8c:	781ed13a 	srli	r15,r15,4
 c00cf90:	28c00104 	addi	r3,r5,4
 c00cf94:	13400104 	addi	r13,r2,4
 c00cf98:	781c913a 	slli	r14,r15,4
 c00cf9c:	2b000204 	addi	r12,r5,8
 c00cfa0:	12c00204 	addi	r11,r2,8
 c00cfa4:	73800504 	addi	r14,r14,20
 c00cfa8:	2a800304 	addi	r10,r5,12
 c00cfac:	12400304 	addi	r9,r2,12
 c00cfb0:	2b9d883a 	add	r14,r5,r14
 c00cfb4:	2811883a 	mov	r8,r5
 c00cfb8:	100f883a 	mov	r7,r2
 c00cfbc:	41000017 	ldw	r4,0(r8)
 c00cfc0:	39c00404 	addi	r7,r7,16
 c00cfc4:	18c00404 	addi	r3,r3,16
 c00cfc8:	393ffc15 	stw	r4,-16(r7)
 c00cfcc:	193ffc17 	ldw	r4,-16(r3)
 c00cfd0:	6b400404 	addi	r13,r13,16
 c00cfd4:	5ac00404 	addi	r11,r11,16
 c00cfd8:	693ffc15 	stw	r4,-16(r13)
 c00cfdc:	61000017 	ldw	r4,0(r12)
 c00cfe0:	4a400404 	addi	r9,r9,16
 c00cfe4:	42000404 	addi	r8,r8,16
 c00cfe8:	593ffc15 	stw	r4,-16(r11)
 c00cfec:	51000017 	ldw	r4,0(r10)
 c00cff0:	63000404 	addi	r12,r12,16
 c00cff4:	52800404 	addi	r10,r10,16
 c00cff8:	493ffc15 	stw	r4,-16(r9)
 c00cffc:	1bbfef1e 	bne	r3,r14,c00cfbc <__alt_data_end+0xfc00cfbc>
 c00d000:	79000044 	addi	r4,r15,1
 c00d004:	2008913a 	slli	r4,r4,4
 c00d008:	328003cc 	andi	r10,r6,15
 c00d00c:	02c000c4 	movi	r11,3
 c00d010:	1107883a 	add	r3,r2,r4
 c00d014:	290b883a 	add	r5,r5,r4
 c00d018:	5a801e2e 	bgeu	r11,r10,c00d094 <memmove+0x154>
 c00d01c:	1813883a 	mov	r9,r3
 c00d020:	2811883a 	mov	r8,r5
 c00d024:	500f883a 	mov	r7,r10
 c00d028:	41000017 	ldw	r4,0(r8)
 c00d02c:	4a400104 	addi	r9,r9,4
 c00d030:	39ffff04 	addi	r7,r7,-4
 c00d034:	493fff15 	stw	r4,-4(r9)
 c00d038:	42000104 	addi	r8,r8,4
 c00d03c:	59fffa36 	bltu	r11,r7,c00d028 <__alt_data_end+0xfc00d028>
 c00d040:	513fff04 	addi	r4,r10,-4
 c00d044:	2008d0ba 	srli	r4,r4,2
 c00d048:	318000cc 	andi	r6,r6,3
 c00d04c:	21000044 	addi	r4,r4,1
 c00d050:	2109883a 	add	r4,r4,r4
 c00d054:	2109883a 	add	r4,r4,r4
 c00d058:	1907883a 	add	r3,r3,r4
 c00d05c:	290b883a 	add	r5,r5,r4
 c00d060:	30000b26 	beq	r6,zero,c00d090 <memmove+0x150>
 c00d064:	198d883a 	add	r6,r3,r6
 c00d068:	29c00003 	ldbu	r7,0(r5)
 c00d06c:	18c00044 	addi	r3,r3,1
 c00d070:	29400044 	addi	r5,r5,1
 c00d074:	19ffffc5 	stb	r7,-1(r3)
 c00d078:	19bffb1e 	bne	r3,r6,c00d068 <__alt_data_end+0xfc00d068>
 c00d07c:	f800283a 	ret
 c00d080:	1007883a 	mov	r3,r2
 c00d084:	003ff606 	br	c00d060 <__alt_data_end+0xfc00d060>
 c00d088:	1007883a 	mov	r3,r2
 c00d08c:	003ff506 	br	c00d064 <__alt_data_end+0xfc00d064>
 c00d090:	f800283a 	ret
 c00d094:	500d883a 	mov	r6,r10
 c00d098:	003ff106 	br	c00d060 <__alt_data_end+0xfc00d060>

0c00d09c <memset>:
 c00d09c:	20c000cc 	andi	r3,r4,3
 c00d0a0:	2005883a 	mov	r2,r4
 c00d0a4:	18004426 	beq	r3,zero,c00d1b8 <memset+0x11c>
 c00d0a8:	31ffffc4 	addi	r7,r6,-1
 c00d0ac:	30004026 	beq	r6,zero,c00d1b0 <memset+0x114>
 c00d0b0:	2813883a 	mov	r9,r5
 c00d0b4:	200d883a 	mov	r6,r4
 c00d0b8:	2007883a 	mov	r3,r4
 c00d0bc:	00000406 	br	c00d0d0 <memset+0x34>
 c00d0c0:	3a3fffc4 	addi	r8,r7,-1
 c00d0c4:	31800044 	addi	r6,r6,1
 c00d0c8:	38003926 	beq	r7,zero,c00d1b0 <memset+0x114>
 c00d0cc:	400f883a 	mov	r7,r8
 c00d0d0:	18c00044 	addi	r3,r3,1
 c00d0d4:	32400005 	stb	r9,0(r6)
 c00d0d8:	1a0000cc 	andi	r8,r3,3
 c00d0dc:	403ff81e 	bne	r8,zero,c00d0c0 <__alt_data_end+0xfc00d0c0>
 c00d0e0:	010000c4 	movi	r4,3
 c00d0e4:	21c02d2e 	bgeu	r4,r7,c00d19c <memset+0x100>
 c00d0e8:	29003fcc 	andi	r4,r5,255
 c00d0ec:	200c923a 	slli	r6,r4,8
 c00d0f0:	3108b03a 	or	r4,r6,r4
 c00d0f4:	200c943a 	slli	r6,r4,16
 c00d0f8:	218cb03a 	or	r6,r4,r6
 c00d0fc:	010003c4 	movi	r4,15
 c00d100:	21c0182e 	bgeu	r4,r7,c00d164 <memset+0xc8>
 c00d104:	3b3ffc04 	addi	r12,r7,-16
 c00d108:	6018d13a 	srli	r12,r12,4
 c00d10c:	1a000104 	addi	r8,r3,4
 c00d110:	1ac00204 	addi	r11,r3,8
 c00d114:	6008913a 	slli	r4,r12,4
 c00d118:	1a800304 	addi	r10,r3,12
 c00d11c:	1813883a 	mov	r9,r3
 c00d120:	21000504 	addi	r4,r4,20
 c00d124:	1909883a 	add	r4,r3,r4
 c00d128:	49800015 	stw	r6,0(r9)
 c00d12c:	41800015 	stw	r6,0(r8)
 c00d130:	59800015 	stw	r6,0(r11)
 c00d134:	51800015 	stw	r6,0(r10)
 c00d138:	42000404 	addi	r8,r8,16
 c00d13c:	4a400404 	addi	r9,r9,16
 c00d140:	5ac00404 	addi	r11,r11,16
 c00d144:	52800404 	addi	r10,r10,16
 c00d148:	413ff71e 	bne	r8,r4,c00d128 <__alt_data_end+0xfc00d128>
 c00d14c:	63000044 	addi	r12,r12,1
 c00d150:	6018913a 	slli	r12,r12,4
 c00d154:	39c003cc 	andi	r7,r7,15
 c00d158:	010000c4 	movi	r4,3
 c00d15c:	1b07883a 	add	r3,r3,r12
 c00d160:	21c00e2e 	bgeu	r4,r7,c00d19c <memset+0x100>
 c00d164:	1813883a 	mov	r9,r3
 c00d168:	3811883a 	mov	r8,r7
 c00d16c:	010000c4 	movi	r4,3
 c00d170:	49800015 	stw	r6,0(r9)
 c00d174:	423fff04 	addi	r8,r8,-4
 c00d178:	4a400104 	addi	r9,r9,4
 c00d17c:	223ffc36 	bltu	r4,r8,c00d170 <__alt_data_end+0xfc00d170>
 c00d180:	393fff04 	addi	r4,r7,-4
 c00d184:	2008d0ba 	srli	r4,r4,2
 c00d188:	39c000cc 	andi	r7,r7,3
 c00d18c:	21000044 	addi	r4,r4,1
 c00d190:	2109883a 	add	r4,r4,r4
 c00d194:	2109883a 	add	r4,r4,r4
 c00d198:	1907883a 	add	r3,r3,r4
 c00d19c:	38000526 	beq	r7,zero,c00d1b4 <memset+0x118>
 c00d1a0:	19cf883a 	add	r7,r3,r7
 c00d1a4:	19400005 	stb	r5,0(r3)
 c00d1a8:	18c00044 	addi	r3,r3,1
 c00d1ac:	38fffd1e 	bne	r7,r3,c00d1a4 <__alt_data_end+0xfc00d1a4>
 c00d1b0:	f800283a 	ret
 c00d1b4:	f800283a 	ret
 c00d1b8:	2007883a 	mov	r3,r4
 c00d1bc:	300f883a 	mov	r7,r6
 c00d1c0:	003fc706 	br	c00d0e0 <__alt_data_end+0xfc00d0e0>

0c00d1c4 <_Balloc>:
 c00d1c4:	20801317 	ldw	r2,76(r4)
 c00d1c8:	defffc04 	addi	sp,sp,-16
 c00d1cc:	dc400115 	stw	r17,4(sp)
 c00d1d0:	dc000015 	stw	r16,0(sp)
 c00d1d4:	dfc00315 	stw	ra,12(sp)
 c00d1d8:	dc800215 	stw	r18,8(sp)
 c00d1dc:	2023883a 	mov	r17,r4
 c00d1e0:	2821883a 	mov	r16,r5
 c00d1e4:	10000f26 	beq	r2,zero,c00d224 <_Balloc+0x60>
 c00d1e8:	8407883a 	add	r3,r16,r16
 c00d1ec:	18c7883a 	add	r3,r3,r3
 c00d1f0:	10c7883a 	add	r3,r2,r3
 c00d1f4:	18800017 	ldw	r2,0(r3)
 c00d1f8:	10001126 	beq	r2,zero,c00d240 <_Balloc+0x7c>
 c00d1fc:	11000017 	ldw	r4,0(r2)
 c00d200:	19000015 	stw	r4,0(r3)
 c00d204:	10000415 	stw	zero,16(r2)
 c00d208:	10000315 	stw	zero,12(r2)
 c00d20c:	dfc00317 	ldw	ra,12(sp)
 c00d210:	dc800217 	ldw	r18,8(sp)
 c00d214:	dc400117 	ldw	r17,4(sp)
 c00d218:	dc000017 	ldw	r16,0(sp)
 c00d21c:	dec00404 	addi	sp,sp,16
 c00d220:	f800283a 	ret
 c00d224:	01800844 	movi	r6,33
 c00d228:	01400104 	movi	r5,4
 c00d22c:	c0117dc0 	call	c0117dc <_calloc_r>
 c00d230:	88801315 	stw	r2,76(r17)
 c00d234:	103fec1e 	bne	r2,zero,c00d1e8 <__alt_data_end+0xfc00d1e8>
 c00d238:	0005883a 	mov	r2,zero
 c00d23c:	003ff306 	br	c00d20c <__alt_data_end+0xfc00d20c>
 c00d240:	01400044 	movi	r5,1
 c00d244:	2c24983a 	sll	r18,r5,r16
 c00d248:	8809883a 	mov	r4,r17
 c00d24c:	91800144 	addi	r6,r18,5
 c00d250:	318d883a 	add	r6,r6,r6
 c00d254:	318d883a 	add	r6,r6,r6
 c00d258:	c0117dc0 	call	c0117dc <_calloc_r>
 c00d25c:	103ff626 	beq	r2,zero,c00d238 <__alt_data_end+0xfc00d238>
 c00d260:	14000115 	stw	r16,4(r2)
 c00d264:	14800215 	stw	r18,8(r2)
 c00d268:	003fe606 	br	c00d204 <__alt_data_end+0xfc00d204>

0c00d26c <_Bfree>:
 c00d26c:	28000826 	beq	r5,zero,c00d290 <_Bfree+0x24>
 c00d270:	28c00117 	ldw	r3,4(r5)
 c00d274:	20801317 	ldw	r2,76(r4)
 c00d278:	18c7883a 	add	r3,r3,r3
 c00d27c:	18c7883a 	add	r3,r3,r3
 c00d280:	10c5883a 	add	r2,r2,r3
 c00d284:	10c00017 	ldw	r3,0(r2)
 c00d288:	28c00015 	stw	r3,0(r5)
 c00d28c:	11400015 	stw	r5,0(r2)
 c00d290:	f800283a 	ret

0c00d294 <__multadd>:
 c00d294:	defff704 	addi	sp,sp,-36
 c00d298:	dc800215 	stw	r18,8(sp)
 c00d29c:	2c800417 	ldw	r18,16(r5)
 c00d2a0:	dd800615 	stw	r22,24(sp)
 c00d2a4:	dd400515 	stw	r21,20(sp)
 c00d2a8:	dd000415 	stw	r20,16(sp)
 c00d2ac:	dcc00315 	stw	r19,12(sp)
 c00d2b0:	dc400115 	stw	r17,4(sp)
 c00d2b4:	dc000015 	stw	r16,0(sp)
 c00d2b8:	dfc00815 	stw	ra,32(sp)
 c00d2bc:	ddc00715 	stw	r23,28(sp)
 c00d2c0:	2827883a 	mov	r19,r5
 c00d2c4:	2029883a 	mov	r20,r4
 c00d2c8:	3023883a 	mov	r17,r6
 c00d2cc:	3821883a 	mov	r16,r7
 c00d2d0:	2d400504 	addi	r21,r5,20
 c00d2d4:	002d883a 	mov	r22,zero
 c00d2d8:	adc00017 	ldw	r23,0(r21)
 c00d2dc:	880b883a 	mov	r5,r17
 c00d2e0:	ad400104 	addi	r21,r21,4
 c00d2e4:	b93fffcc 	andi	r4,r23,65535
 c00d2e8:	c004de00 	call	c004de0 <__mulsi3>
 c00d2ec:	b808d43a 	srli	r4,r23,16
 c00d2f0:	880b883a 	mov	r5,r17
 c00d2f4:	1421883a 	add	r16,r2,r16
 c00d2f8:	c004de00 	call	c004de0 <__mulsi3>
 c00d2fc:	800ed43a 	srli	r7,r16,16
 c00d300:	80ffffcc 	andi	r3,r16,65535
 c00d304:	b5800044 	addi	r22,r22,1
 c00d308:	11c5883a 	add	r2,r2,r7
 c00d30c:	100e943a 	slli	r7,r2,16
 c00d310:	1020d43a 	srli	r16,r2,16
 c00d314:	38c7883a 	add	r3,r7,r3
 c00d318:	a8ffff15 	stw	r3,-4(r21)
 c00d31c:	b4bfee16 	blt	r22,r18,c00d2d8 <__alt_data_end+0xfc00d2d8>
 c00d320:	80000926 	beq	r16,zero,c00d348 <__multadd+0xb4>
 c00d324:	98800217 	ldw	r2,8(r19)
 c00d328:	9080130e 	bge	r18,r2,c00d378 <__multadd+0xe4>
 c00d32c:	90800144 	addi	r2,r18,5
 c00d330:	1085883a 	add	r2,r2,r2
 c00d334:	1085883a 	add	r2,r2,r2
 c00d338:	9885883a 	add	r2,r19,r2
 c00d33c:	14000015 	stw	r16,0(r2)
 c00d340:	94800044 	addi	r18,r18,1
 c00d344:	9c800415 	stw	r18,16(r19)
 c00d348:	9805883a 	mov	r2,r19
 c00d34c:	dfc00817 	ldw	ra,32(sp)
 c00d350:	ddc00717 	ldw	r23,28(sp)
 c00d354:	dd800617 	ldw	r22,24(sp)
 c00d358:	dd400517 	ldw	r21,20(sp)
 c00d35c:	dd000417 	ldw	r20,16(sp)
 c00d360:	dcc00317 	ldw	r19,12(sp)
 c00d364:	dc800217 	ldw	r18,8(sp)
 c00d368:	dc400117 	ldw	r17,4(sp)
 c00d36c:	dc000017 	ldw	r16,0(sp)
 c00d370:	dec00904 	addi	sp,sp,36
 c00d374:	f800283a 	ret
 c00d378:	99400117 	ldw	r5,4(r19)
 c00d37c:	a009883a 	mov	r4,r20
 c00d380:	29400044 	addi	r5,r5,1
 c00d384:	c00d1c40 	call	c00d1c4 <_Balloc>
 c00d388:	99800417 	ldw	r6,16(r19)
 c00d38c:	99400304 	addi	r5,r19,12
 c00d390:	11000304 	addi	r4,r2,12
 c00d394:	31800084 	addi	r6,r6,2
 c00d398:	318d883a 	add	r6,r6,r6
 c00d39c:	318d883a 	add	r6,r6,r6
 c00d3a0:	1023883a 	mov	r17,r2
 c00d3a4:	c00cdf80 	call	c00cdf8 <memcpy>
 c00d3a8:	98000a26 	beq	r19,zero,c00d3d4 <__multadd+0x140>
 c00d3ac:	98c00117 	ldw	r3,4(r19)
 c00d3b0:	a0801317 	ldw	r2,76(r20)
 c00d3b4:	18c7883a 	add	r3,r3,r3
 c00d3b8:	18c7883a 	add	r3,r3,r3
 c00d3bc:	10c5883a 	add	r2,r2,r3
 c00d3c0:	10c00017 	ldw	r3,0(r2)
 c00d3c4:	98c00015 	stw	r3,0(r19)
 c00d3c8:	14c00015 	stw	r19,0(r2)
 c00d3cc:	8827883a 	mov	r19,r17
 c00d3d0:	003fd606 	br	c00d32c <__alt_data_end+0xfc00d32c>
 c00d3d4:	8827883a 	mov	r19,r17
 c00d3d8:	003fd406 	br	c00d32c <__alt_data_end+0xfc00d32c>

0c00d3dc <__s2b>:
 c00d3dc:	defff904 	addi	sp,sp,-28
 c00d3e0:	dc400115 	stw	r17,4(sp)
 c00d3e4:	dc000015 	stw	r16,0(sp)
 c00d3e8:	2023883a 	mov	r17,r4
 c00d3ec:	2821883a 	mov	r16,r5
 c00d3f0:	39000204 	addi	r4,r7,8
 c00d3f4:	01400244 	movi	r5,9
 c00d3f8:	dcc00315 	stw	r19,12(sp)
 c00d3fc:	dc800215 	stw	r18,8(sp)
 c00d400:	dfc00615 	stw	ra,24(sp)
 c00d404:	dd400515 	stw	r21,20(sp)
 c00d408:	dd000415 	stw	r20,16(sp)
 c00d40c:	3825883a 	mov	r18,r7
 c00d410:	3027883a 	mov	r19,r6
 c00d414:	c004c2c0 	call	c004c2c <__divsi3>
 c00d418:	00c00044 	movi	r3,1
 c00d41c:	000b883a 	mov	r5,zero
 c00d420:	1880030e 	bge	r3,r2,c00d430 <__s2b+0x54>
 c00d424:	18c7883a 	add	r3,r3,r3
 c00d428:	29400044 	addi	r5,r5,1
 c00d42c:	18bffd16 	blt	r3,r2,c00d424 <__alt_data_end+0xfc00d424>
 c00d430:	8809883a 	mov	r4,r17
 c00d434:	c00d1c40 	call	c00d1c4 <_Balloc>
 c00d438:	d8c00717 	ldw	r3,28(sp)
 c00d43c:	10c00515 	stw	r3,20(r2)
 c00d440:	00c00044 	movi	r3,1
 c00d444:	10c00415 	stw	r3,16(r2)
 c00d448:	00c00244 	movi	r3,9
 c00d44c:	1cc0210e 	bge	r3,r19,c00d4d4 <__s2b+0xf8>
 c00d450:	80eb883a 	add	r21,r16,r3
 c00d454:	a829883a 	mov	r20,r21
 c00d458:	84e1883a 	add	r16,r16,r19
 c00d45c:	a1c00007 	ldb	r7,0(r20)
 c00d460:	01800284 	movi	r6,10
 c00d464:	a5000044 	addi	r20,r20,1
 c00d468:	100b883a 	mov	r5,r2
 c00d46c:	39fff404 	addi	r7,r7,-48
 c00d470:	8809883a 	mov	r4,r17
 c00d474:	c00d2940 	call	c00d294 <__multadd>
 c00d478:	a43ff81e 	bne	r20,r16,c00d45c <__alt_data_end+0xfc00d45c>
 c00d47c:	ace1883a 	add	r16,r21,r19
 c00d480:	843ffe04 	addi	r16,r16,-8
 c00d484:	9c800a0e 	bge	r19,r18,c00d4b0 <__s2b+0xd4>
 c00d488:	94e5c83a 	sub	r18,r18,r19
 c00d48c:	84a5883a 	add	r18,r16,r18
 c00d490:	81c00007 	ldb	r7,0(r16)
 c00d494:	01800284 	movi	r6,10
 c00d498:	84000044 	addi	r16,r16,1
 c00d49c:	100b883a 	mov	r5,r2
 c00d4a0:	39fff404 	addi	r7,r7,-48
 c00d4a4:	8809883a 	mov	r4,r17
 c00d4a8:	c00d2940 	call	c00d294 <__multadd>
 c00d4ac:	84bff81e 	bne	r16,r18,c00d490 <__alt_data_end+0xfc00d490>
 c00d4b0:	dfc00617 	ldw	ra,24(sp)
 c00d4b4:	dd400517 	ldw	r21,20(sp)
 c00d4b8:	dd000417 	ldw	r20,16(sp)
 c00d4bc:	dcc00317 	ldw	r19,12(sp)
 c00d4c0:	dc800217 	ldw	r18,8(sp)
 c00d4c4:	dc400117 	ldw	r17,4(sp)
 c00d4c8:	dc000017 	ldw	r16,0(sp)
 c00d4cc:	dec00704 	addi	sp,sp,28
 c00d4d0:	f800283a 	ret
 c00d4d4:	84000284 	addi	r16,r16,10
 c00d4d8:	1827883a 	mov	r19,r3
 c00d4dc:	003fe906 	br	c00d484 <__alt_data_end+0xfc00d484>

0c00d4e0 <__hi0bits>:
 c00d4e0:	20bfffec 	andhi	r2,r4,65535
 c00d4e4:	1000141e 	bne	r2,zero,c00d538 <__hi0bits+0x58>
 c00d4e8:	2008943a 	slli	r4,r4,16
 c00d4ec:	00800404 	movi	r2,16
 c00d4f0:	20ffc02c 	andhi	r3,r4,65280
 c00d4f4:	1800021e 	bne	r3,zero,c00d500 <__hi0bits+0x20>
 c00d4f8:	2008923a 	slli	r4,r4,8
 c00d4fc:	10800204 	addi	r2,r2,8
 c00d500:	20fc002c 	andhi	r3,r4,61440
 c00d504:	1800021e 	bne	r3,zero,c00d510 <__hi0bits+0x30>
 c00d508:	2008913a 	slli	r4,r4,4
 c00d50c:	10800104 	addi	r2,r2,4
 c00d510:	20f0002c 	andhi	r3,r4,49152
 c00d514:	1800031e 	bne	r3,zero,c00d524 <__hi0bits+0x44>
 c00d518:	2109883a 	add	r4,r4,r4
 c00d51c:	10800084 	addi	r2,r2,2
 c00d520:	2109883a 	add	r4,r4,r4
 c00d524:	20000316 	blt	r4,zero,c00d534 <__hi0bits+0x54>
 c00d528:	2110002c 	andhi	r4,r4,16384
 c00d52c:	2000041e 	bne	r4,zero,c00d540 <__hi0bits+0x60>
 c00d530:	00800804 	movi	r2,32
 c00d534:	f800283a 	ret
 c00d538:	0005883a 	mov	r2,zero
 c00d53c:	003fec06 	br	c00d4f0 <__alt_data_end+0xfc00d4f0>
 c00d540:	10800044 	addi	r2,r2,1
 c00d544:	f800283a 	ret

0c00d548 <__lo0bits>:
 c00d548:	20c00017 	ldw	r3,0(r4)
 c00d54c:	188001cc 	andi	r2,r3,7
 c00d550:	10000826 	beq	r2,zero,c00d574 <__lo0bits+0x2c>
 c00d554:	1880004c 	andi	r2,r3,1
 c00d558:	1000211e 	bne	r2,zero,c00d5e0 <__lo0bits+0x98>
 c00d55c:	1880008c 	andi	r2,r3,2
 c00d560:	1000211e 	bne	r2,zero,c00d5e8 <__lo0bits+0xa0>
 c00d564:	1806d0ba 	srli	r3,r3,2
 c00d568:	00800084 	movi	r2,2
 c00d56c:	20c00015 	stw	r3,0(r4)
 c00d570:	f800283a 	ret
 c00d574:	18bfffcc 	andi	r2,r3,65535
 c00d578:	10001326 	beq	r2,zero,c00d5c8 <__lo0bits+0x80>
 c00d57c:	0005883a 	mov	r2,zero
 c00d580:	19403fcc 	andi	r5,r3,255
 c00d584:	2800021e 	bne	r5,zero,c00d590 <__lo0bits+0x48>
 c00d588:	1806d23a 	srli	r3,r3,8
 c00d58c:	10800204 	addi	r2,r2,8
 c00d590:	194003cc 	andi	r5,r3,15
 c00d594:	2800021e 	bne	r5,zero,c00d5a0 <__lo0bits+0x58>
 c00d598:	1806d13a 	srli	r3,r3,4
 c00d59c:	10800104 	addi	r2,r2,4
 c00d5a0:	194000cc 	andi	r5,r3,3
 c00d5a4:	2800021e 	bne	r5,zero,c00d5b0 <__lo0bits+0x68>
 c00d5a8:	1806d0ba 	srli	r3,r3,2
 c00d5ac:	10800084 	addi	r2,r2,2
 c00d5b0:	1940004c 	andi	r5,r3,1
 c00d5b4:	2800081e 	bne	r5,zero,c00d5d8 <__lo0bits+0x90>
 c00d5b8:	1806d07a 	srli	r3,r3,1
 c00d5bc:	1800051e 	bne	r3,zero,c00d5d4 <__lo0bits+0x8c>
 c00d5c0:	00800804 	movi	r2,32
 c00d5c4:	f800283a 	ret
 c00d5c8:	1806d43a 	srli	r3,r3,16
 c00d5cc:	00800404 	movi	r2,16
 c00d5d0:	003feb06 	br	c00d580 <__alt_data_end+0xfc00d580>
 c00d5d4:	10800044 	addi	r2,r2,1
 c00d5d8:	20c00015 	stw	r3,0(r4)
 c00d5dc:	f800283a 	ret
 c00d5e0:	0005883a 	mov	r2,zero
 c00d5e4:	f800283a 	ret
 c00d5e8:	1806d07a 	srli	r3,r3,1
 c00d5ec:	00800044 	movi	r2,1
 c00d5f0:	20c00015 	stw	r3,0(r4)
 c00d5f4:	f800283a 	ret

0c00d5f8 <__i2b>:
 c00d5f8:	defffd04 	addi	sp,sp,-12
 c00d5fc:	dc000015 	stw	r16,0(sp)
 c00d600:	04000044 	movi	r16,1
 c00d604:	dc400115 	stw	r17,4(sp)
 c00d608:	2823883a 	mov	r17,r5
 c00d60c:	800b883a 	mov	r5,r16
 c00d610:	dfc00215 	stw	ra,8(sp)
 c00d614:	c00d1c40 	call	c00d1c4 <_Balloc>
 c00d618:	14400515 	stw	r17,20(r2)
 c00d61c:	14000415 	stw	r16,16(r2)
 c00d620:	dfc00217 	ldw	ra,8(sp)
 c00d624:	dc400117 	ldw	r17,4(sp)
 c00d628:	dc000017 	ldw	r16,0(sp)
 c00d62c:	dec00304 	addi	sp,sp,12
 c00d630:	f800283a 	ret

0c00d634 <__multiply>:
 c00d634:	deffef04 	addi	sp,sp,-68
 c00d638:	dc400815 	stw	r17,32(sp)
 c00d63c:	dc000715 	stw	r16,28(sp)
 c00d640:	34400417 	ldw	r17,16(r6)
 c00d644:	2c000417 	ldw	r16,16(r5)
 c00d648:	dd800d15 	stw	r22,52(sp)
 c00d64c:	dc800915 	stw	r18,36(sp)
 c00d650:	dfc01015 	stw	ra,64(sp)
 c00d654:	df000f15 	stw	fp,60(sp)
 c00d658:	ddc00e15 	stw	r23,56(sp)
 c00d65c:	dd400c15 	stw	r21,48(sp)
 c00d660:	dd000b15 	stw	r20,44(sp)
 c00d664:	dcc00a15 	stw	r19,40(sp)
 c00d668:	2825883a 	mov	r18,r5
 c00d66c:	302d883a 	mov	r22,r6
 c00d670:	8440050e 	bge	r16,r17,c00d688 <__multiply+0x54>
 c00d674:	8007883a 	mov	r3,r16
 c00d678:	3025883a 	mov	r18,r6
 c00d67c:	8821883a 	mov	r16,r17
 c00d680:	282d883a 	mov	r22,r5
 c00d684:	1823883a 	mov	r17,r3
 c00d688:	90800217 	ldw	r2,8(r18)
 c00d68c:	8447883a 	add	r3,r16,r17
 c00d690:	d8c00215 	stw	r3,8(sp)
 c00d694:	91400117 	ldw	r5,4(r18)
 c00d698:	10c0010e 	bge	r2,r3,c00d6a0 <__multiply+0x6c>
 c00d69c:	29400044 	addi	r5,r5,1
 c00d6a0:	c00d1c40 	call	c00d1c4 <_Balloc>
 c00d6a4:	d8c00217 	ldw	r3,8(sp)
 c00d6a8:	d8800615 	stw	r2,24(sp)
 c00d6ac:	18eb883a 	add	r21,r3,r3
 c00d6b0:	ad6b883a 	add	r21,r21,r21
 c00d6b4:	10c00504 	addi	r3,r2,20
 c00d6b8:	1d6b883a 	add	r21,r3,r21
 c00d6bc:	d8c00115 	stw	r3,4(sp)
 c00d6c0:	dd400315 	stw	r21,12(sp)
 c00d6c4:	1805883a 	mov	r2,r3
 c00d6c8:	1d40042e 	bgeu	r3,r21,c00d6dc <__multiply+0xa8>
 c00d6cc:	d8c00317 	ldw	r3,12(sp)
 c00d6d0:	10000015 	stw	zero,0(r2)
 c00d6d4:	10800104 	addi	r2,r2,4
 c00d6d8:	10fffc36 	bltu	r2,r3,c00d6cc <__alt_data_end+0xfc00d6cc>
 c00d6dc:	8c63883a 	add	r17,r17,r17
 c00d6e0:	b5800504 	addi	r22,r22,20
 c00d6e4:	8c63883a 	add	r17,r17,r17
 c00d6e8:	94800504 	addi	r18,r18,20
 c00d6ec:	8421883a 	add	r16,r16,r16
 c00d6f0:	b463883a 	add	r17,r22,r17
 c00d6f4:	8421883a 	add	r16,r16,r16
 c00d6f8:	dd800015 	stw	r22,0(sp)
 c00d6fc:	dc800415 	stw	r18,16(sp)
 c00d700:	dc400515 	stw	r17,20(sp)
 c00d704:	9429883a 	add	r20,r18,r16
 c00d708:	b4404f2e 	bgeu	r22,r17,c00d848 <__multiply+0x214>
 c00d70c:	d8c00017 	ldw	r3,0(sp)
 c00d710:	1c800017 	ldw	r18,0(r3)
 c00d714:	947fffcc 	andi	r17,r18,65535
 c00d718:	88001e26 	beq	r17,zero,c00d794 <__multiply+0x160>
 c00d71c:	dd800117 	ldw	r22,4(sp)
 c00d720:	dd400417 	ldw	r21,16(sp)
 c00d724:	0027883a 	mov	r19,zero
 c00d728:	ac800017 	ldw	r18,0(r21)
 c00d72c:	b4000017 	ldw	r16,0(r22)
 c00d730:	880b883a 	mov	r5,r17
 c00d734:	913fffcc 	andi	r4,r18,65535
 c00d738:	c004de00 	call	c004de0 <__mulsi3>
 c00d73c:	9008d43a 	srli	r4,r18,16
 c00d740:	84bfffcc 	andi	r18,r16,65535
 c00d744:	1485883a 	add	r2,r2,r18
 c00d748:	14e5883a 	add	r18,r2,r19
 c00d74c:	8020d43a 	srli	r16,r16,16
 c00d750:	9026d43a 	srli	r19,r18,16
 c00d754:	880b883a 	mov	r5,r17
 c00d758:	c004de00 	call	c004de0 <__mulsi3>
 c00d75c:	1405883a 	add	r2,r2,r16
 c00d760:	14e1883a 	add	r16,r2,r19
 c00d764:	90ffffcc 	andi	r3,r18,65535
 c00d768:	8024943a 	slli	r18,r16,16
 c00d76c:	ad400104 	addi	r21,r21,4
 c00d770:	b005883a 	mov	r2,r22
 c00d774:	90c6b03a 	or	r3,r18,r3
 c00d778:	b0c00015 	stw	r3,0(r22)
 c00d77c:	8026d43a 	srli	r19,r16,16
 c00d780:	b5800104 	addi	r22,r22,4
 c00d784:	ad3fe836 	bltu	r21,r20,c00d728 <__alt_data_end+0xfc00d728>
 c00d788:	d8c00017 	ldw	r3,0(sp)
 c00d78c:	14c00115 	stw	r19,4(r2)
 c00d790:	1c800017 	ldw	r18,0(r3)
 c00d794:	9024d43a 	srli	r18,r18,16
 c00d798:	90002226 	beq	r18,zero,c00d824 <__multiply+0x1f0>
 c00d79c:	d8c00117 	ldw	r3,4(sp)
 c00d7a0:	dd800417 	ldw	r22,16(sp)
 c00d7a4:	002f883a 	mov	r23,zero
 c00d7a8:	1f000017 	ldw	fp,0(r3)
 c00d7ac:	1823883a 	mov	r17,r3
 c00d7b0:	182b883a 	mov	r21,r3
 c00d7b4:	e021883a 	mov	r16,fp
 c00d7b8:	00000106 	br	c00d7c0 <__multiply+0x18c>
 c00d7bc:	982b883a 	mov	r21,r19
 c00d7c0:	b100000b 	ldhu	r4,0(r22)
 c00d7c4:	8020d43a 	srli	r16,r16,16
 c00d7c8:	900b883a 	mov	r5,r18
 c00d7cc:	c004de00 	call	c004de0 <__mulsi3>
 c00d7d0:	1405883a 	add	r2,r2,r16
 c00d7d4:	15ef883a 	add	r23,r2,r23
 c00d7d8:	b804943a 	slli	r2,r23,16
 c00d7dc:	e0ffffcc 	andi	r3,fp,65535
 c00d7e0:	8c400104 	addi	r17,r17,4
 c00d7e4:	10c6b03a 	or	r3,r2,r3
 c00d7e8:	88ffff15 	stw	r3,-4(r17)
 c00d7ec:	b5800104 	addi	r22,r22,4
 c00d7f0:	b13fff17 	ldw	r4,-4(r22)
 c00d7f4:	acc00104 	addi	r19,r21,4
 c00d7f8:	900b883a 	mov	r5,r18
 c00d7fc:	2008d43a 	srli	r4,r4,16
 c00d800:	9c000017 	ldw	r16,0(r19)
 c00d804:	c004de00 	call	c004de0 <__mulsi3>
 c00d808:	b806d43a 	srli	r3,r23,16
 c00d80c:	813fffcc 	andi	r4,r16,65535
 c00d810:	1105883a 	add	r2,r2,r4
 c00d814:	10f9883a 	add	fp,r2,r3
 c00d818:	e02ed43a 	srli	r23,fp,16
 c00d81c:	b53fe736 	bltu	r22,r20,c00d7bc <__alt_data_end+0xfc00d7bc>
 c00d820:	af000115 	stw	fp,4(r21)
 c00d824:	d8c00017 	ldw	r3,0(sp)
 c00d828:	d9000517 	ldw	r4,20(sp)
 c00d82c:	18c00104 	addi	r3,r3,4
 c00d830:	d8c00015 	stw	r3,0(sp)
 c00d834:	d8c00117 	ldw	r3,4(sp)
 c00d838:	18c00104 	addi	r3,r3,4
 c00d83c:	d8c00115 	stw	r3,4(sp)
 c00d840:	d8c00017 	ldw	r3,0(sp)
 c00d844:	193fb136 	bltu	r3,r4,c00d70c <__alt_data_end+0xfc00d70c>
 c00d848:	d8c00217 	ldw	r3,8(sp)
 c00d84c:	00c00c0e 	bge	zero,r3,c00d880 <__multiply+0x24c>
 c00d850:	d8c00317 	ldw	r3,12(sp)
 c00d854:	18bfff17 	ldw	r2,-4(r3)
 c00d858:	1d7fff04 	addi	r21,r3,-4
 c00d85c:	10000326 	beq	r2,zero,c00d86c <__multiply+0x238>
 c00d860:	00000706 	br	c00d880 <__multiply+0x24c>
 c00d864:	a8800017 	ldw	r2,0(r21)
 c00d868:	1000051e 	bne	r2,zero,c00d880 <__multiply+0x24c>
 c00d86c:	d8c00217 	ldw	r3,8(sp)
 c00d870:	ad7fff04 	addi	r21,r21,-4
 c00d874:	18ffffc4 	addi	r3,r3,-1
 c00d878:	d8c00215 	stw	r3,8(sp)
 c00d87c:	183ff91e 	bne	r3,zero,c00d864 <__alt_data_end+0xfc00d864>
 c00d880:	d8c00617 	ldw	r3,24(sp)
 c00d884:	d9000217 	ldw	r4,8(sp)
 c00d888:	1805883a 	mov	r2,r3
 c00d88c:	19000415 	stw	r4,16(r3)
 c00d890:	dfc01017 	ldw	ra,64(sp)
 c00d894:	df000f17 	ldw	fp,60(sp)
 c00d898:	ddc00e17 	ldw	r23,56(sp)
 c00d89c:	dd800d17 	ldw	r22,52(sp)
 c00d8a0:	dd400c17 	ldw	r21,48(sp)
 c00d8a4:	dd000b17 	ldw	r20,44(sp)
 c00d8a8:	dcc00a17 	ldw	r19,40(sp)
 c00d8ac:	dc800917 	ldw	r18,36(sp)
 c00d8b0:	dc400817 	ldw	r17,32(sp)
 c00d8b4:	dc000717 	ldw	r16,28(sp)
 c00d8b8:	dec01104 	addi	sp,sp,68
 c00d8bc:	f800283a 	ret

0c00d8c0 <__pow5mult>:
 c00d8c0:	defffa04 	addi	sp,sp,-24
 c00d8c4:	dcc00315 	stw	r19,12(sp)
 c00d8c8:	dc000015 	stw	r16,0(sp)
 c00d8cc:	dfc00515 	stw	ra,20(sp)
 c00d8d0:	dd000415 	stw	r20,16(sp)
 c00d8d4:	dc800215 	stw	r18,8(sp)
 c00d8d8:	dc400115 	stw	r17,4(sp)
 c00d8dc:	308000cc 	andi	r2,r6,3
 c00d8e0:	3021883a 	mov	r16,r6
 c00d8e4:	2027883a 	mov	r19,r4
 c00d8e8:	10002f1e 	bne	r2,zero,c00d9a8 <__pow5mult+0xe8>
 c00d8ec:	2825883a 	mov	r18,r5
 c00d8f0:	8021d0ba 	srai	r16,r16,2
 c00d8f4:	80001a26 	beq	r16,zero,c00d960 <__pow5mult+0xa0>
 c00d8f8:	9c401217 	ldw	r17,72(r19)
 c00d8fc:	8800061e 	bne	r17,zero,c00d918 <__pow5mult+0x58>
 c00d900:	00003406 	br	c00d9d4 <__pow5mult+0x114>
 c00d904:	8021d07a 	srai	r16,r16,1
 c00d908:	80001526 	beq	r16,zero,c00d960 <__pow5mult+0xa0>
 c00d90c:	88800017 	ldw	r2,0(r17)
 c00d910:	10001c26 	beq	r2,zero,c00d984 <__pow5mult+0xc4>
 c00d914:	1023883a 	mov	r17,r2
 c00d918:	8080004c 	andi	r2,r16,1
 c00d91c:	103ff926 	beq	r2,zero,c00d904 <__alt_data_end+0xfc00d904>
 c00d920:	880d883a 	mov	r6,r17
 c00d924:	900b883a 	mov	r5,r18
 c00d928:	9809883a 	mov	r4,r19
 c00d92c:	c00d6340 	call	c00d634 <__multiply>
 c00d930:	90001b26 	beq	r18,zero,c00d9a0 <__pow5mult+0xe0>
 c00d934:	91000117 	ldw	r4,4(r18)
 c00d938:	98c01317 	ldw	r3,76(r19)
 c00d93c:	8021d07a 	srai	r16,r16,1
 c00d940:	2109883a 	add	r4,r4,r4
 c00d944:	2109883a 	add	r4,r4,r4
 c00d948:	1907883a 	add	r3,r3,r4
 c00d94c:	19000017 	ldw	r4,0(r3)
 c00d950:	91000015 	stw	r4,0(r18)
 c00d954:	1c800015 	stw	r18,0(r3)
 c00d958:	1025883a 	mov	r18,r2
 c00d95c:	803feb1e 	bne	r16,zero,c00d90c <__alt_data_end+0xfc00d90c>
 c00d960:	9005883a 	mov	r2,r18
 c00d964:	dfc00517 	ldw	ra,20(sp)
 c00d968:	dd000417 	ldw	r20,16(sp)
 c00d96c:	dcc00317 	ldw	r19,12(sp)
 c00d970:	dc800217 	ldw	r18,8(sp)
 c00d974:	dc400117 	ldw	r17,4(sp)
 c00d978:	dc000017 	ldw	r16,0(sp)
 c00d97c:	dec00604 	addi	sp,sp,24
 c00d980:	f800283a 	ret
 c00d984:	880d883a 	mov	r6,r17
 c00d988:	880b883a 	mov	r5,r17
 c00d98c:	9809883a 	mov	r4,r19
 c00d990:	c00d6340 	call	c00d634 <__multiply>
 c00d994:	88800015 	stw	r2,0(r17)
 c00d998:	10000015 	stw	zero,0(r2)
 c00d99c:	003fdd06 	br	c00d914 <__alt_data_end+0xfc00d914>
 c00d9a0:	1025883a 	mov	r18,r2
 c00d9a4:	003fd706 	br	c00d904 <__alt_data_end+0xfc00d904>
 c00d9a8:	10bfffc4 	addi	r2,r2,-1
 c00d9ac:	1085883a 	add	r2,r2,r2
 c00d9b0:	00c300b4 	movhi	r3,3074
 c00d9b4:	18e20804 	addi	r3,r3,-30688
 c00d9b8:	1085883a 	add	r2,r2,r2
 c00d9bc:	1885883a 	add	r2,r3,r2
 c00d9c0:	11800017 	ldw	r6,0(r2)
 c00d9c4:	000f883a 	mov	r7,zero
 c00d9c8:	c00d2940 	call	c00d294 <__multadd>
 c00d9cc:	1025883a 	mov	r18,r2
 c00d9d0:	003fc706 	br	c00d8f0 <__alt_data_end+0xfc00d8f0>
 c00d9d4:	05000044 	movi	r20,1
 c00d9d8:	a00b883a 	mov	r5,r20
 c00d9dc:	9809883a 	mov	r4,r19
 c00d9e0:	c00d1c40 	call	c00d1c4 <_Balloc>
 c00d9e4:	1023883a 	mov	r17,r2
 c00d9e8:	00809c44 	movi	r2,625
 c00d9ec:	88800515 	stw	r2,20(r17)
 c00d9f0:	8d000415 	stw	r20,16(r17)
 c00d9f4:	9c401215 	stw	r17,72(r19)
 c00d9f8:	88000015 	stw	zero,0(r17)
 c00d9fc:	003fc606 	br	c00d918 <__alt_data_end+0xfc00d918>

0c00da00 <__lshift>:
 c00da00:	defff904 	addi	sp,sp,-28
 c00da04:	dd400515 	stw	r21,20(sp)
 c00da08:	dcc00315 	stw	r19,12(sp)
 c00da0c:	302bd17a 	srai	r21,r6,5
 c00da10:	2cc00417 	ldw	r19,16(r5)
 c00da14:	28800217 	ldw	r2,8(r5)
 c00da18:	dd000415 	stw	r20,16(sp)
 c00da1c:	ace7883a 	add	r19,r21,r19
 c00da20:	dc800215 	stw	r18,8(sp)
 c00da24:	dc400115 	stw	r17,4(sp)
 c00da28:	dc000015 	stw	r16,0(sp)
 c00da2c:	dfc00615 	stw	ra,24(sp)
 c00da30:	9c000044 	addi	r16,r19,1
 c00da34:	2823883a 	mov	r17,r5
 c00da38:	3029883a 	mov	r20,r6
 c00da3c:	2025883a 	mov	r18,r4
 c00da40:	29400117 	ldw	r5,4(r5)
 c00da44:	1400030e 	bge	r2,r16,c00da54 <__lshift+0x54>
 c00da48:	1085883a 	add	r2,r2,r2
 c00da4c:	29400044 	addi	r5,r5,1
 c00da50:	143ffd16 	blt	r2,r16,c00da48 <__alt_data_end+0xfc00da48>
 c00da54:	9009883a 	mov	r4,r18
 c00da58:	c00d1c40 	call	c00d1c4 <_Balloc>
 c00da5c:	10c00504 	addi	r3,r2,20
 c00da60:	0540070e 	bge	zero,r21,c00da80 <__lshift+0x80>
 c00da64:	ad6b883a 	add	r21,r21,r21
 c00da68:	ad6b883a 	add	r21,r21,r21
 c00da6c:	1809883a 	mov	r4,r3
 c00da70:	1d47883a 	add	r3,r3,r21
 c00da74:	20000015 	stw	zero,0(r4)
 c00da78:	21000104 	addi	r4,r4,4
 c00da7c:	193ffd1e 	bne	r3,r4,c00da74 <__alt_data_end+0xfc00da74>
 c00da80:	8a000417 	ldw	r8,16(r17)
 c00da84:	89000504 	addi	r4,r17,20
 c00da88:	a18007cc 	andi	r6,r20,31
 c00da8c:	4211883a 	add	r8,r8,r8
 c00da90:	4211883a 	add	r8,r8,r8
 c00da94:	2211883a 	add	r8,r4,r8
 c00da98:	30002326 	beq	r6,zero,c00db28 <__lshift+0x128>
 c00da9c:	02400804 	movi	r9,32
 c00daa0:	4993c83a 	sub	r9,r9,r6
 c00daa4:	000b883a 	mov	r5,zero
 c00daa8:	21c00017 	ldw	r7,0(r4)
 c00daac:	1815883a 	mov	r10,r3
 c00dab0:	18c00104 	addi	r3,r3,4
 c00dab4:	398e983a 	sll	r7,r7,r6
 c00dab8:	21000104 	addi	r4,r4,4
 c00dabc:	394ab03a 	or	r5,r7,r5
 c00dac0:	197fff15 	stw	r5,-4(r3)
 c00dac4:	217fff17 	ldw	r5,-4(r4)
 c00dac8:	2a4ad83a 	srl	r5,r5,r9
 c00dacc:	223ff636 	bltu	r4,r8,c00daa8 <__alt_data_end+0xfc00daa8>
 c00dad0:	51400115 	stw	r5,4(r10)
 c00dad4:	28001a1e 	bne	r5,zero,c00db40 <__lshift+0x140>
 c00dad8:	843fffc4 	addi	r16,r16,-1
 c00dadc:	14000415 	stw	r16,16(r2)
 c00dae0:	88000826 	beq	r17,zero,c00db04 <__lshift+0x104>
 c00dae4:	89000117 	ldw	r4,4(r17)
 c00dae8:	90c01317 	ldw	r3,76(r18)
 c00daec:	2109883a 	add	r4,r4,r4
 c00daf0:	2109883a 	add	r4,r4,r4
 c00daf4:	1907883a 	add	r3,r3,r4
 c00daf8:	19000017 	ldw	r4,0(r3)
 c00dafc:	89000015 	stw	r4,0(r17)
 c00db00:	1c400015 	stw	r17,0(r3)
 c00db04:	dfc00617 	ldw	ra,24(sp)
 c00db08:	dd400517 	ldw	r21,20(sp)
 c00db0c:	dd000417 	ldw	r20,16(sp)
 c00db10:	dcc00317 	ldw	r19,12(sp)
 c00db14:	dc800217 	ldw	r18,8(sp)
 c00db18:	dc400117 	ldw	r17,4(sp)
 c00db1c:	dc000017 	ldw	r16,0(sp)
 c00db20:	dec00704 	addi	sp,sp,28
 c00db24:	f800283a 	ret
 c00db28:	21400017 	ldw	r5,0(r4)
 c00db2c:	18c00104 	addi	r3,r3,4
 c00db30:	21000104 	addi	r4,r4,4
 c00db34:	197fff15 	stw	r5,-4(r3)
 c00db38:	223ffb36 	bltu	r4,r8,c00db28 <__alt_data_end+0xfc00db28>
 c00db3c:	003fe606 	br	c00dad8 <__alt_data_end+0xfc00dad8>
 c00db40:	9c000084 	addi	r16,r19,2
 c00db44:	003fe406 	br	c00dad8 <__alt_data_end+0xfc00dad8>

0c00db48 <__mcmp>:
 c00db48:	20800417 	ldw	r2,16(r4)
 c00db4c:	28c00417 	ldw	r3,16(r5)
 c00db50:	10c5c83a 	sub	r2,r2,r3
 c00db54:	1000111e 	bne	r2,zero,c00db9c <__mcmp+0x54>
 c00db58:	18c7883a 	add	r3,r3,r3
 c00db5c:	18c7883a 	add	r3,r3,r3
 c00db60:	21000504 	addi	r4,r4,20
 c00db64:	29400504 	addi	r5,r5,20
 c00db68:	20c5883a 	add	r2,r4,r3
 c00db6c:	28cb883a 	add	r5,r5,r3
 c00db70:	00000106 	br	c00db78 <__mcmp+0x30>
 c00db74:	20800a2e 	bgeu	r4,r2,c00dba0 <__mcmp+0x58>
 c00db78:	10bfff04 	addi	r2,r2,-4
 c00db7c:	297fff04 	addi	r5,r5,-4
 c00db80:	11800017 	ldw	r6,0(r2)
 c00db84:	28c00017 	ldw	r3,0(r5)
 c00db88:	30fffa26 	beq	r6,r3,c00db74 <__alt_data_end+0xfc00db74>
 c00db8c:	30c00236 	bltu	r6,r3,c00db98 <__mcmp+0x50>
 c00db90:	00800044 	movi	r2,1
 c00db94:	f800283a 	ret
 c00db98:	00bfffc4 	movi	r2,-1
 c00db9c:	f800283a 	ret
 c00dba0:	0005883a 	mov	r2,zero
 c00dba4:	f800283a 	ret

0c00dba8 <__mdiff>:
 c00dba8:	28c00417 	ldw	r3,16(r5)
 c00dbac:	30800417 	ldw	r2,16(r6)
 c00dbb0:	defffa04 	addi	sp,sp,-24
 c00dbb4:	dcc00315 	stw	r19,12(sp)
 c00dbb8:	dc800215 	stw	r18,8(sp)
 c00dbbc:	dfc00515 	stw	ra,20(sp)
 c00dbc0:	dd000415 	stw	r20,16(sp)
 c00dbc4:	dc400115 	stw	r17,4(sp)
 c00dbc8:	dc000015 	stw	r16,0(sp)
 c00dbcc:	1887c83a 	sub	r3,r3,r2
 c00dbd0:	2825883a 	mov	r18,r5
 c00dbd4:	3027883a 	mov	r19,r6
 c00dbd8:	1800141e 	bne	r3,zero,c00dc2c <__mdiff+0x84>
 c00dbdc:	1085883a 	add	r2,r2,r2
 c00dbe0:	1085883a 	add	r2,r2,r2
 c00dbe4:	2a000504 	addi	r8,r5,20
 c00dbe8:	34000504 	addi	r16,r6,20
 c00dbec:	4087883a 	add	r3,r8,r2
 c00dbf0:	8085883a 	add	r2,r16,r2
 c00dbf4:	00000106 	br	c00dbfc <__mdiff+0x54>
 c00dbf8:	40c0592e 	bgeu	r8,r3,c00dd60 <__mdiff+0x1b8>
 c00dbfc:	18ffff04 	addi	r3,r3,-4
 c00dc00:	10bfff04 	addi	r2,r2,-4
 c00dc04:	19c00017 	ldw	r7,0(r3)
 c00dc08:	11400017 	ldw	r5,0(r2)
 c00dc0c:	397ffa26 	beq	r7,r5,c00dbf8 <__alt_data_end+0xfc00dbf8>
 c00dc10:	3940592e 	bgeu	r7,r5,c00dd78 <__mdiff+0x1d0>
 c00dc14:	9005883a 	mov	r2,r18
 c00dc18:	4023883a 	mov	r17,r8
 c00dc1c:	9825883a 	mov	r18,r19
 c00dc20:	05000044 	movi	r20,1
 c00dc24:	1027883a 	mov	r19,r2
 c00dc28:	00000406 	br	c00dc3c <__mdiff+0x94>
 c00dc2c:	18005616 	blt	r3,zero,c00dd88 <__mdiff+0x1e0>
 c00dc30:	34400504 	addi	r17,r6,20
 c00dc34:	2c000504 	addi	r16,r5,20
 c00dc38:	0029883a 	mov	r20,zero
 c00dc3c:	91400117 	ldw	r5,4(r18)
 c00dc40:	c00d1c40 	call	c00d1c4 <_Balloc>
 c00dc44:	92400417 	ldw	r9,16(r18)
 c00dc48:	9b000417 	ldw	r12,16(r19)
 c00dc4c:	12c00504 	addi	r11,r2,20
 c00dc50:	4a51883a 	add	r8,r9,r9
 c00dc54:	6319883a 	add	r12,r12,r12
 c00dc58:	4211883a 	add	r8,r8,r8
 c00dc5c:	6319883a 	add	r12,r12,r12
 c00dc60:	15000315 	stw	r20,12(r2)
 c00dc64:	8211883a 	add	r8,r16,r8
 c00dc68:	8b19883a 	add	r12,r17,r12
 c00dc6c:	0007883a 	mov	r3,zero
 c00dc70:	81400017 	ldw	r5,0(r16)
 c00dc74:	89c00017 	ldw	r7,0(r17)
 c00dc78:	59800104 	addi	r6,r11,4
 c00dc7c:	293fffcc 	andi	r4,r5,65535
 c00dc80:	20c7883a 	add	r3,r4,r3
 c00dc84:	393fffcc 	andi	r4,r7,65535
 c00dc88:	1909c83a 	sub	r4,r3,r4
 c00dc8c:	280ad43a 	srli	r5,r5,16
 c00dc90:	380ed43a 	srli	r7,r7,16
 c00dc94:	2007d43a 	srai	r3,r4,16
 c00dc98:	213fffcc 	andi	r4,r4,65535
 c00dc9c:	29cbc83a 	sub	r5,r5,r7
 c00dca0:	28c7883a 	add	r3,r5,r3
 c00dca4:	180a943a 	slli	r5,r3,16
 c00dca8:	8c400104 	addi	r17,r17,4
 c00dcac:	84000104 	addi	r16,r16,4
 c00dcb0:	2908b03a 	or	r4,r5,r4
 c00dcb4:	59000015 	stw	r4,0(r11)
 c00dcb8:	1807d43a 	srai	r3,r3,16
 c00dcbc:	3015883a 	mov	r10,r6
 c00dcc0:	3017883a 	mov	r11,r6
 c00dcc4:	8b3fea36 	bltu	r17,r12,c00dc70 <__alt_data_end+0xfc00dc70>
 c00dcc8:	8200162e 	bgeu	r16,r8,c00dd24 <__mdiff+0x17c>
 c00dccc:	8017883a 	mov	r11,r16
 c00dcd0:	59400017 	ldw	r5,0(r11)
 c00dcd4:	31800104 	addi	r6,r6,4
 c00dcd8:	5ac00104 	addi	r11,r11,4
 c00dcdc:	293fffcc 	andi	r4,r5,65535
 c00dce0:	20c7883a 	add	r3,r4,r3
 c00dce4:	280ed43a 	srli	r7,r5,16
 c00dce8:	180bd43a 	srai	r5,r3,16
 c00dcec:	193fffcc 	andi	r4,r3,65535
 c00dcf0:	3947883a 	add	r3,r7,r5
 c00dcf4:	180a943a 	slli	r5,r3,16
 c00dcf8:	1807d43a 	srai	r3,r3,16
 c00dcfc:	2908b03a 	or	r4,r5,r4
 c00dd00:	313fff15 	stw	r4,-4(r6)
 c00dd04:	5a3ff236 	bltu	r11,r8,c00dcd0 <__alt_data_end+0xfc00dcd0>
 c00dd08:	0406303a 	nor	r3,zero,r16
 c00dd0c:	1a07883a 	add	r3,r3,r8
 c00dd10:	1806d0ba 	srli	r3,r3,2
 c00dd14:	18c00044 	addi	r3,r3,1
 c00dd18:	18c7883a 	add	r3,r3,r3
 c00dd1c:	18c7883a 	add	r3,r3,r3
 c00dd20:	50d5883a 	add	r10,r10,r3
 c00dd24:	50ffff04 	addi	r3,r10,-4
 c00dd28:	2000041e 	bne	r4,zero,c00dd3c <__mdiff+0x194>
 c00dd2c:	18ffff04 	addi	r3,r3,-4
 c00dd30:	19000017 	ldw	r4,0(r3)
 c00dd34:	4a7fffc4 	addi	r9,r9,-1
 c00dd38:	203ffc26 	beq	r4,zero,c00dd2c <__alt_data_end+0xfc00dd2c>
 c00dd3c:	12400415 	stw	r9,16(r2)
 c00dd40:	dfc00517 	ldw	ra,20(sp)
 c00dd44:	dd000417 	ldw	r20,16(sp)
 c00dd48:	dcc00317 	ldw	r19,12(sp)
 c00dd4c:	dc800217 	ldw	r18,8(sp)
 c00dd50:	dc400117 	ldw	r17,4(sp)
 c00dd54:	dc000017 	ldw	r16,0(sp)
 c00dd58:	dec00604 	addi	sp,sp,24
 c00dd5c:	f800283a 	ret
 c00dd60:	000b883a 	mov	r5,zero
 c00dd64:	c00d1c40 	call	c00d1c4 <_Balloc>
 c00dd68:	00c00044 	movi	r3,1
 c00dd6c:	10c00415 	stw	r3,16(r2)
 c00dd70:	10000515 	stw	zero,20(r2)
 c00dd74:	003ff206 	br	c00dd40 <__alt_data_end+0xfc00dd40>
 c00dd78:	8023883a 	mov	r17,r16
 c00dd7c:	0029883a 	mov	r20,zero
 c00dd80:	4021883a 	mov	r16,r8
 c00dd84:	003fad06 	br	c00dc3c <__alt_data_end+0xfc00dc3c>
 c00dd88:	9005883a 	mov	r2,r18
 c00dd8c:	94400504 	addi	r17,r18,20
 c00dd90:	9c000504 	addi	r16,r19,20
 c00dd94:	9825883a 	mov	r18,r19
 c00dd98:	05000044 	movi	r20,1
 c00dd9c:	1027883a 	mov	r19,r2
 c00dda0:	003fa606 	br	c00dc3c <__alt_data_end+0xfc00dc3c>

0c00dda4 <__ulp>:
 c00dda4:	295ffc2c 	andhi	r5,r5,32752
 c00dda8:	00bf3034 	movhi	r2,64704
 c00ddac:	2887883a 	add	r3,r5,r2
 c00ddb0:	00c0020e 	bge	zero,r3,c00ddbc <__ulp+0x18>
 c00ddb4:	0005883a 	mov	r2,zero
 c00ddb8:	f800283a 	ret
 c00ddbc:	00c7c83a 	sub	r3,zero,r3
 c00ddc0:	1807d53a 	srai	r3,r3,20
 c00ddc4:	008004c4 	movi	r2,19
 c00ddc8:	10c00b0e 	bge	r2,r3,c00ddf8 <__ulp+0x54>
 c00ddcc:	18bffb04 	addi	r2,r3,-20
 c00ddd0:	01000784 	movi	r4,30
 c00ddd4:	0007883a 	mov	r3,zero
 c00ddd8:	20800516 	blt	r4,r2,c00ddf0 <__ulp+0x4c>
 c00dddc:	010007c4 	movi	r4,31
 c00dde0:	2089c83a 	sub	r4,r4,r2
 c00dde4:	00800044 	movi	r2,1
 c00dde8:	1104983a 	sll	r2,r2,r4
 c00ddec:	f800283a 	ret
 c00ddf0:	00800044 	movi	r2,1
 c00ddf4:	f800283a 	ret
 c00ddf8:	01400234 	movhi	r5,8
 c00ddfc:	28c7d83a 	sra	r3,r5,r3
 c00de00:	0005883a 	mov	r2,zero
 c00de04:	f800283a 	ret

0c00de08 <__b2d>:
 c00de08:	defffa04 	addi	sp,sp,-24
 c00de0c:	dc000015 	stw	r16,0(sp)
 c00de10:	24000417 	ldw	r16,16(r4)
 c00de14:	dc400115 	stw	r17,4(sp)
 c00de18:	24400504 	addi	r17,r4,20
 c00de1c:	8421883a 	add	r16,r16,r16
 c00de20:	8421883a 	add	r16,r16,r16
 c00de24:	8c21883a 	add	r16,r17,r16
 c00de28:	dc800215 	stw	r18,8(sp)
 c00de2c:	84bfff17 	ldw	r18,-4(r16)
 c00de30:	dd000415 	stw	r20,16(sp)
 c00de34:	dcc00315 	stw	r19,12(sp)
 c00de38:	9009883a 	mov	r4,r18
 c00de3c:	2829883a 	mov	r20,r5
 c00de40:	dfc00515 	stw	ra,20(sp)
 c00de44:	c00d4e00 	call	c00d4e0 <__hi0bits>
 c00de48:	00c00804 	movi	r3,32
 c00de4c:	1889c83a 	sub	r4,r3,r2
 c00de50:	a1000015 	stw	r4,0(r20)
 c00de54:	01000284 	movi	r4,10
 c00de58:	84ffff04 	addi	r19,r16,-4
 c00de5c:	20801216 	blt	r4,r2,c00dea8 <__b2d+0xa0>
 c00de60:	018002c4 	movi	r6,11
 c00de64:	308dc83a 	sub	r6,r6,r2
 c00de68:	9186d83a 	srl	r3,r18,r6
 c00de6c:	18cffc34 	orhi	r3,r3,16368
 c00de70:	8cc0212e 	bgeu	r17,r19,c00def8 <__b2d+0xf0>
 c00de74:	813ffe17 	ldw	r4,-8(r16)
 c00de78:	218cd83a 	srl	r6,r4,r6
 c00de7c:	10800544 	addi	r2,r2,21
 c00de80:	9084983a 	sll	r2,r18,r2
 c00de84:	1184b03a 	or	r2,r2,r6
 c00de88:	dfc00517 	ldw	ra,20(sp)
 c00de8c:	dd000417 	ldw	r20,16(sp)
 c00de90:	dcc00317 	ldw	r19,12(sp)
 c00de94:	dc800217 	ldw	r18,8(sp)
 c00de98:	dc400117 	ldw	r17,4(sp)
 c00de9c:	dc000017 	ldw	r16,0(sp)
 c00dea0:	dec00604 	addi	sp,sp,24
 c00dea4:	f800283a 	ret
 c00dea8:	8cc00f2e 	bgeu	r17,r19,c00dee8 <__b2d+0xe0>
 c00deac:	117ffd44 	addi	r5,r2,-11
 c00deb0:	80bffe17 	ldw	r2,-8(r16)
 c00deb4:	28000e26 	beq	r5,zero,c00def0 <__b2d+0xe8>
 c00deb8:	1949c83a 	sub	r4,r3,r5
 c00debc:	9164983a 	sll	r18,r18,r5
 c00dec0:	1106d83a 	srl	r3,r2,r4
 c00dec4:	81bffe04 	addi	r6,r16,-8
 c00dec8:	948ffc34 	orhi	r18,r18,16368
 c00decc:	90c6b03a 	or	r3,r18,r3
 c00ded0:	89800e2e 	bgeu	r17,r6,c00df0c <__b2d+0x104>
 c00ded4:	81bffd17 	ldw	r6,-12(r16)
 c00ded8:	1144983a 	sll	r2,r2,r5
 c00dedc:	310ad83a 	srl	r5,r6,r4
 c00dee0:	2884b03a 	or	r2,r5,r2
 c00dee4:	003fe806 	br	c00de88 <__alt_data_end+0xfc00de88>
 c00dee8:	10bffd44 	addi	r2,r2,-11
 c00deec:	1000041e 	bne	r2,zero,c00df00 <__b2d+0xf8>
 c00def0:	90cffc34 	orhi	r3,r18,16368
 c00def4:	003fe406 	br	c00de88 <__alt_data_end+0xfc00de88>
 c00def8:	000d883a 	mov	r6,zero
 c00defc:	003fdf06 	br	c00de7c <__alt_data_end+0xfc00de7c>
 c00df00:	90a4983a 	sll	r18,r18,r2
 c00df04:	0005883a 	mov	r2,zero
 c00df08:	003ff906 	br	c00def0 <__alt_data_end+0xfc00def0>
 c00df0c:	1144983a 	sll	r2,r2,r5
 c00df10:	003fdd06 	br	c00de88 <__alt_data_end+0xfc00de88>

0c00df14 <__d2b>:
 c00df14:	defff804 	addi	sp,sp,-32
 c00df18:	dc000215 	stw	r16,8(sp)
 c00df1c:	3021883a 	mov	r16,r6
 c00df20:	dc400315 	stw	r17,12(sp)
 c00df24:	8022907a 	slli	r17,r16,1
 c00df28:	dd000615 	stw	r20,24(sp)
 c00df2c:	2829883a 	mov	r20,r5
 c00df30:	01400044 	movi	r5,1
 c00df34:	dcc00515 	stw	r19,20(sp)
 c00df38:	dc800415 	stw	r18,16(sp)
 c00df3c:	dfc00715 	stw	ra,28(sp)
 c00df40:	3825883a 	mov	r18,r7
 c00df44:	8822d57a 	srli	r17,r17,21
 c00df48:	c00d1c40 	call	c00d1c4 <_Balloc>
 c00df4c:	1027883a 	mov	r19,r2
 c00df50:	00800434 	movhi	r2,16
 c00df54:	10bfffc4 	addi	r2,r2,-1
 c00df58:	808c703a 	and	r6,r16,r2
 c00df5c:	88000126 	beq	r17,zero,c00df64 <__d2b+0x50>
 c00df60:	31800434 	orhi	r6,r6,16
 c00df64:	d9800015 	stw	r6,0(sp)
 c00df68:	a0002426 	beq	r20,zero,c00dffc <__d2b+0xe8>
 c00df6c:	d9000104 	addi	r4,sp,4
 c00df70:	dd000115 	stw	r20,4(sp)
 c00df74:	c00d5480 	call	c00d548 <__lo0bits>
 c00df78:	d8c00017 	ldw	r3,0(sp)
 c00df7c:	10002f1e 	bne	r2,zero,c00e03c <__d2b+0x128>
 c00df80:	d9000117 	ldw	r4,4(sp)
 c00df84:	99000515 	stw	r4,20(r19)
 c00df88:	1821003a 	cmpeq	r16,r3,zero
 c00df8c:	01000084 	movi	r4,2
 c00df90:	2421c83a 	sub	r16,r4,r16
 c00df94:	98c00615 	stw	r3,24(r19)
 c00df98:	9c000415 	stw	r16,16(r19)
 c00df9c:	88001f1e 	bne	r17,zero,c00e01c <__d2b+0x108>
 c00dfa0:	10bef384 	addi	r2,r2,-1074
 c00dfa4:	90800015 	stw	r2,0(r18)
 c00dfa8:	00900034 	movhi	r2,16384
 c00dfac:	10bfffc4 	addi	r2,r2,-1
 c00dfb0:	8085883a 	add	r2,r16,r2
 c00dfb4:	1085883a 	add	r2,r2,r2
 c00dfb8:	1085883a 	add	r2,r2,r2
 c00dfbc:	9885883a 	add	r2,r19,r2
 c00dfc0:	11000517 	ldw	r4,20(r2)
 c00dfc4:	8020917a 	slli	r16,r16,5
 c00dfc8:	c00d4e00 	call	c00d4e0 <__hi0bits>
 c00dfcc:	d8c00817 	ldw	r3,32(sp)
 c00dfd0:	8085c83a 	sub	r2,r16,r2
 c00dfd4:	18800015 	stw	r2,0(r3)
 c00dfd8:	9805883a 	mov	r2,r19
 c00dfdc:	dfc00717 	ldw	ra,28(sp)
 c00dfe0:	dd000617 	ldw	r20,24(sp)
 c00dfe4:	dcc00517 	ldw	r19,20(sp)
 c00dfe8:	dc800417 	ldw	r18,16(sp)
 c00dfec:	dc400317 	ldw	r17,12(sp)
 c00dff0:	dc000217 	ldw	r16,8(sp)
 c00dff4:	dec00804 	addi	sp,sp,32
 c00dff8:	f800283a 	ret
 c00dffc:	d809883a 	mov	r4,sp
 c00e000:	c00d5480 	call	c00d548 <__lo0bits>
 c00e004:	d8c00017 	ldw	r3,0(sp)
 c00e008:	04000044 	movi	r16,1
 c00e00c:	9c000415 	stw	r16,16(r19)
 c00e010:	98c00515 	stw	r3,20(r19)
 c00e014:	10800804 	addi	r2,r2,32
 c00e018:	883fe126 	beq	r17,zero,c00dfa0 <__alt_data_end+0xfc00dfa0>
 c00e01c:	00c00d44 	movi	r3,53
 c00e020:	8c7ef344 	addi	r17,r17,-1075
 c00e024:	88a3883a 	add	r17,r17,r2
 c00e028:	1885c83a 	sub	r2,r3,r2
 c00e02c:	d8c00817 	ldw	r3,32(sp)
 c00e030:	94400015 	stw	r17,0(r18)
 c00e034:	18800015 	stw	r2,0(r3)
 c00e038:	003fe706 	br	c00dfd8 <__alt_data_end+0xfc00dfd8>
 c00e03c:	01000804 	movi	r4,32
 c00e040:	2089c83a 	sub	r4,r4,r2
 c00e044:	1908983a 	sll	r4,r3,r4
 c00e048:	d9400117 	ldw	r5,4(sp)
 c00e04c:	1886d83a 	srl	r3,r3,r2
 c00e050:	2148b03a 	or	r4,r4,r5
 c00e054:	99000515 	stw	r4,20(r19)
 c00e058:	d8c00015 	stw	r3,0(sp)
 c00e05c:	003fca06 	br	c00df88 <__alt_data_end+0xfc00df88>

0c00e060 <__ratio>:
 c00e060:	defff904 	addi	sp,sp,-28
 c00e064:	dc400315 	stw	r17,12(sp)
 c00e068:	2823883a 	mov	r17,r5
 c00e06c:	d9400104 	addi	r5,sp,4
 c00e070:	dfc00615 	stw	ra,24(sp)
 c00e074:	dcc00515 	stw	r19,20(sp)
 c00e078:	dc800415 	stw	r18,16(sp)
 c00e07c:	2027883a 	mov	r19,r4
 c00e080:	dc000215 	stw	r16,8(sp)
 c00e084:	c00de080 	call	c00de08 <__b2d>
 c00e088:	d80b883a 	mov	r5,sp
 c00e08c:	8809883a 	mov	r4,r17
 c00e090:	1025883a 	mov	r18,r2
 c00e094:	1821883a 	mov	r16,r3
 c00e098:	c00de080 	call	c00de08 <__b2d>
 c00e09c:	8a000417 	ldw	r8,16(r17)
 c00e0a0:	99000417 	ldw	r4,16(r19)
 c00e0a4:	d9400117 	ldw	r5,4(sp)
 c00e0a8:	2209c83a 	sub	r4,r4,r8
 c00e0ac:	2010917a 	slli	r8,r4,5
 c00e0b0:	d9000017 	ldw	r4,0(sp)
 c00e0b4:	2909c83a 	sub	r4,r5,r4
 c00e0b8:	4109883a 	add	r4,r8,r4
 c00e0bc:	01000e0e 	bge	zero,r4,c00e0f8 <__ratio+0x98>
 c00e0c0:	2008953a 	slli	r4,r4,20
 c00e0c4:	2421883a 	add	r16,r4,r16
 c00e0c8:	100d883a 	mov	r6,r2
 c00e0cc:	180f883a 	mov	r7,r3
 c00e0d0:	9009883a 	mov	r4,r18
 c00e0d4:	800b883a 	mov	r5,r16
 c00e0d8:	c0135ec0 	call	c0135ec <__divdf3>
 c00e0dc:	dfc00617 	ldw	ra,24(sp)
 c00e0e0:	dcc00517 	ldw	r19,20(sp)
 c00e0e4:	dc800417 	ldw	r18,16(sp)
 c00e0e8:	dc400317 	ldw	r17,12(sp)
 c00e0ec:	dc000217 	ldw	r16,8(sp)
 c00e0f0:	dec00704 	addi	sp,sp,28
 c00e0f4:	f800283a 	ret
 c00e0f8:	2008953a 	slli	r4,r4,20
 c00e0fc:	1907c83a 	sub	r3,r3,r4
 c00e100:	003ff106 	br	c00e0c8 <__alt_data_end+0xfc00e0c8>

0c00e104 <_mprec_log10>:
 c00e104:	defffe04 	addi	sp,sp,-8
 c00e108:	dc000015 	stw	r16,0(sp)
 c00e10c:	dfc00115 	stw	ra,4(sp)
 c00e110:	008005c4 	movi	r2,23
 c00e114:	2021883a 	mov	r16,r4
 c00e118:	11000d0e 	bge	r2,r4,c00e150 <_mprec_log10+0x4c>
 c00e11c:	0005883a 	mov	r2,zero
 c00e120:	00cffc34 	movhi	r3,16368
 c00e124:	843fffc4 	addi	r16,r16,-1
 c00e128:	000d883a 	mov	r6,zero
 c00e12c:	01d00934 	movhi	r7,16420
 c00e130:	1009883a 	mov	r4,r2
 c00e134:	180b883a 	mov	r5,r3
 c00e138:	c0142140 	call	c014214 <__muldf3>
 c00e13c:	803ff91e 	bne	r16,zero,c00e124 <__alt_data_end+0xfc00e124>
 c00e140:	dfc00117 	ldw	ra,4(sp)
 c00e144:	dc000017 	ldw	r16,0(sp)
 c00e148:	dec00204 	addi	sp,sp,8
 c00e14c:	f800283a 	ret
 c00e150:	202090fa 	slli	r16,r4,3
 c00e154:	008300b4 	movhi	r2,3074
 c00e158:	10a21f04 	addi	r2,r2,-30596
 c00e15c:	1421883a 	add	r16,r2,r16
 c00e160:	80800017 	ldw	r2,0(r16)
 c00e164:	80c00117 	ldw	r3,4(r16)
 c00e168:	dfc00117 	ldw	ra,4(sp)
 c00e16c:	dc000017 	ldw	r16,0(sp)
 c00e170:	dec00204 	addi	sp,sp,8
 c00e174:	f800283a 	ret

0c00e178 <__copybits>:
 c00e178:	297fffc4 	addi	r5,r5,-1
 c00e17c:	280fd17a 	srai	r7,r5,5
 c00e180:	30c00417 	ldw	r3,16(r6)
 c00e184:	30800504 	addi	r2,r6,20
 c00e188:	39c00044 	addi	r7,r7,1
 c00e18c:	18c7883a 	add	r3,r3,r3
 c00e190:	39cf883a 	add	r7,r7,r7
 c00e194:	18c7883a 	add	r3,r3,r3
 c00e198:	39cf883a 	add	r7,r7,r7
 c00e19c:	10c7883a 	add	r3,r2,r3
 c00e1a0:	21cf883a 	add	r7,r4,r7
 c00e1a4:	10c00d2e 	bgeu	r2,r3,c00e1dc <__copybits+0x64>
 c00e1a8:	200b883a 	mov	r5,r4
 c00e1ac:	12000017 	ldw	r8,0(r2)
 c00e1b0:	29400104 	addi	r5,r5,4
 c00e1b4:	10800104 	addi	r2,r2,4
 c00e1b8:	2a3fff15 	stw	r8,-4(r5)
 c00e1bc:	10fffb36 	bltu	r2,r3,c00e1ac <__alt_data_end+0xfc00e1ac>
 c00e1c0:	1985c83a 	sub	r2,r3,r6
 c00e1c4:	10bffac4 	addi	r2,r2,-21
 c00e1c8:	1004d0ba 	srli	r2,r2,2
 c00e1cc:	10800044 	addi	r2,r2,1
 c00e1d0:	1085883a 	add	r2,r2,r2
 c00e1d4:	1085883a 	add	r2,r2,r2
 c00e1d8:	2089883a 	add	r4,r4,r2
 c00e1dc:	21c0032e 	bgeu	r4,r7,c00e1ec <__copybits+0x74>
 c00e1e0:	20000015 	stw	zero,0(r4)
 c00e1e4:	21000104 	addi	r4,r4,4
 c00e1e8:	21fffd36 	bltu	r4,r7,c00e1e0 <__alt_data_end+0xfc00e1e0>
 c00e1ec:	f800283a 	ret

0c00e1f0 <__any_on>:
 c00e1f0:	20c00417 	ldw	r3,16(r4)
 c00e1f4:	2805d17a 	srai	r2,r5,5
 c00e1f8:	21000504 	addi	r4,r4,20
 c00e1fc:	18800d0e 	bge	r3,r2,c00e234 <__any_on+0x44>
 c00e200:	18c7883a 	add	r3,r3,r3
 c00e204:	18c7883a 	add	r3,r3,r3
 c00e208:	20c7883a 	add	r3,r4,r3
 c00e20c:	20c0192e 	bgeu	r4,r3,c00e274 <__any_on+0x84>
 c00e210:	18bfff17 	ldw	r2,-4(r3)
 c00e214:	18ffff04 	addi	r3,r3,-4
 c00e218:	1000041e 	bne	r2,zero,c00e22c <__any_on+0x3c>
 c00e21c:	20c0142e 	bgeu	r4,r3,c00e270 <__any_on+0x80>
 c00e220:	18ffff04 	addi	r3,r3,-4
 c00e224:	19400017 	ldw	r5,0(r3)
 c00e228:	283ffc26 	beq	r5,zero,c00e21c <__alt_data_end+0xfc00e21c>
 c00e22c:	00800044 	movi	r2,1
 c00e230:	f800283a 	ret
 c00e234:	10c00a0e 	bge	r2,r3,c00e260 <__any_on+0x70>
 c00e238:	1085883a 	add	r2,r2,r2
 c00e23c:	1085883a 	add	r2,r2,r2
 c00e240:	294007cc 	andi	r5,r5,31
 c00e244:	2087883a 	add	r3,r4,r2
 c00e248:	283ff026 	beq	r5,zero,c00e20c <__alt_data_end+0xfc00e20c>
 c00e24c:	19800017 	ldw	r6,0(r3)
 c00e250:	3144d83a 	srl	r2,r6,r5
 c00e254:	114a983a 	sll	r5,r2,r5
 c00e258:	317ff41e 	bne	r6,r5,c00e22c <__alt_data_end+0xfc00e22c>
 c00e25c:	003feb06 	br	c00e20c <__alt_data_end+0xfc00e20c>
 c00e260:	1085883a 	add	r2,r2,r2
 c00e264:	1085883a 	add	r2,r2,r2
 c00e268:	2087883a 	add	r3,r4,r2
 c00e26c:	003fe706 	br	c00e20c <__alt_data_end+0xfc00e20c>
 c00e270:	f800283a 	ret
 c00e274:	0005883a 	mov	r2,zero
 c00e278:	f800283a 	ret

0c00e27c <_realloc_r>:
 c00e27c:	defff604 	addi	sp,sp,-40
 c00e280:	dc800215 	stw	r18,8(sp)
 c00e284:	dfc00915 	stw	ra,36(sp)
 c00e288:	df000815 	stw	fp,32(sp)
 c00e28c:	ddc00715 	stw	r23,28(sp)
 c00e290:	dd800615 	stw	r22,24(sp)
 c00e294:	dd400515 	stw	r21,20(sp)
 c00e298:	dd000415 	stw	r20,16(sp)
 c00e29c:	dcc00315 	stw	r19,12(sp)
 c00e2a0:	dc400115 	stw	r17,4(sp)
 c00e2a4:	dc000015 	stw	r16,0(sp)
 c00e2a8:	3025883a 	mov	r18,r6
 c00e2ac:	2800b726 	beq	r5,zero,c00e58c <_realloc_r+0x310>
 c00e2b0:	282b883a 	mov	r21,r5
 c00e2b4:	2029883a 	mov	r20,r4
 c00e2b8:	c015b800 	call	c015b80 <__malloc_lock>
 c00e2bc:	a8bfff17 	ldw	r2,-4(r21)
 c00e2c0:	043fff04 	movi	r16,-4
 c00e2c4:	90c002c4 	addi	r3,r18,11
 c00e2c8:	01000584 	movi	r4,22
 c00e2cc:	acfffe04 	addi	r19,r21,-8
 c00e2d0:	1420703a 	and	r16,r2,r16
 c00e2d4:	20c0332e 	bgeu	r4,r3,c00e3a4 <_realloc_r+0x128>
 c00e2d8:	047ffe04 	movi	r17,-8
 c00e2dc:	1c62703a 	and	r17,r3,r17
 c00e2e0:	8807883a 	mov	r3,r17
 c00e2e4:	88005816 	blt	r17,zero,c00e448 <_realloc_r+0x1cc>
 c00e2e8:	8c805736 	bltu	r17,r18,c00e448 <_realloc_r+0x1cc>
 c00e2ec:	80c0300e 	bge	r16,r3,c00e3b0 <_realloc_r+0x134>
 c00e2f0:	070300b4 	movhi	fp,3074
 c00e2f4:	e7249904 	addi	fp,fp,-28060
 c00e2f8:	e1c00217 	ldw	r7,8(fp)
 c00e2fc:	9c09883a 	add	r4,r19,r16
 c00e300:	22000117 	ldw	r8,4(r4)
 c00e304:	21c06326 	beq	r4,r7,c00e494 <_realloc_r+0x218>
 c00e308:	017fff84 	movi	r5,-2
 c00e30c:	414a703a 	and	r5,r8,r5
 c00e310:	214b883a 	add	r5,r4,r5
 c00e314:	29800117 	ldw	r6,4(r5)
 c00e318:	3180004c 	andi	r6,r6,1
 c00e31c:	30003f26 	beq	r6,zero,c00e41c <_realloc_r+0x1a0>
 c00e320:	1080004c 	andi	r2,r2,1
 c00e324:	10008326 	beq	r2,zero,c00e534 <_realloc_r+0x2b8>
 c00e328:	900b883a 	mov	r5,r18
 c00e32c:	a009883a 	mov	r4,r20
 c00e330:	c00c5080 	call	c00c508 <_malloc_r>
 c00e334:	1025883a 	mov	r18,r2
 c00e338:	10011e26 	beq	r2,zero,c00e7b4 <_realloc_r+0x538>
 c00e33c:	a93fff17 	ldw	r4,-4(r21)
 c00e340:	10fffe04 	addi	r3,r2,-8
 c00e344:	00bfff84 	movi	r2,-2
 c00e348:	2084703a 	and	r2,r4,r2
 c00e34c:	9885883a 	add	r2,r19,r2
 c00e350:	1880ee26 	beq	r3,r2,c00e70c <_realloc_r+0x490>
 c00e354:	81bfff04 	addi	r6,r16,-4
 c00e358:	00800904 	movi	r2,36
 c00e35c:	1180b836 	bltu	r2,r6,c00e640 <_realloc_r+0x3c4>
 c00e360:	00c004c4 	movi	r3,19
 c00e364:	19809636 	bltu	r3,r6,c00e5c0 <_realloc_r+0x344>
 c00e368:	9005883a 	mov	r2,r18
 c00e36c:	a807883a 	mov	r3,r21
 c00e370:	19000017 	ldw	r4,0(r3)
 c00e374:	11000015 	stw	r4,0(r2)
 c00e378:	19000117 	ldw	r4,4(r3)
 c00e37c:	11000115 	stw	r4,4(r2)
 c00e380:	18c00217 	ldw	r3,8(r3)
 c00e384:	10c00215 	stw	r3,8(r2)
 c00e388:	a80b883a 	mov	r5,r21
 c00e38c:	a009883a 	mov	r4,r20
 c00e390:	c00b9100 	call	c00b910 <_free_r>
 c00e394:	a009883a 	mov	r4,r20
 c00e398:	c015ba40 	call	c015ba4 <__malloc_unlock>
 c00e39c:	9005883a 	mov	r2,r18
 c00e3a0:	00001206 	br	c00e3ec <_realloc_r+0x170>
 c00e3a4:	00c00404 	movi	r3,16
 c00e3a8:	1823883a 	mov	r17,r3
 c00e3ac:	003fce06 	br	c00e2e8 <__alt_data_end+0xfc00e2e8>
 c00e3b0:	a825883a 	mov	r18,r21
 c00e3b4:	8445c83a 	sub	r2,r16,r17
 c00e3b8:	00c003c4 	movi	r3,15
 c00e3bc:	18802636 	bltu	r3,r2,c00e458 <_realloc_r+0x1dc>
 c00e3c0:	99800117 	ldw	r6,4(r19)
 c00e3c4:	9c07883a 	add	r3,r19,r16
 c00e3c8:	3180004c 	andi	r6,r6,1
 c00e3cc:	3420b03a 	or	r16,r6,r16
 c00e3d0:	9c000115 	stw	r16,4(r19)
 c00e3d4:	18800117 	ldw	r2,4(r3)
 c00e3d8:	10800054 	ori	r2,r2,1
 c00e3dc:	18800115 	stw	r2,4(r3)
 c00e3e0:	a009883a 	mov	r4,r20
 c00e3e4:	c015ba40 	call	c015ba4 <__malloc_unlock>
 c00e3e8:	9005883a 	mov	r2,r18
 c00e3ec:	dfc00917 	ldw	ra,36(sp)
 c00e3f0:	df000817 	ldw	fp,32(sp)
 c00e3f4:	ddc00717 	ldw	r23,28(sp)
 c00e3f8:	dd800617 	ldw	r22,24(sp)
 c00e3fc:	dd400517 	ldw	r21,20(sp)
 c00e400:	dd000417 	ldw	r20,16(sp)
 c00e404:	dcc00317 	ldw	r19,12(sp)
 c00e408:	dc800217 	ldw	r18,8(sp)
 c00e40c:	dc400117 	ldw	r17,4(sp)
 c00e410:	dc000017 	ldw	r16,0(sp)
 c00e414:	dec00a04 	addi	sp,sp,40
 c00e418:	f800283a 	ret
 c00e41c:	017fff04 	movi	r5,-4
 c00e420:	414a703a 	and	r5,r8,r5
 c00e424:	814d883a 	add	r6,r16,r5
 c00e428:	30c01f16 	blt	r6,r3,c00e4a8 <_realloc_r+0x22c>
 c00e42c:	20800317 	ldw	r2,12(r4)
 c00e430:	20c00217 	ldw	r3,8(r4)
 c00e434:	a825883a 	mov	r18,r21
 c00e438:	3021883a 	mov	r16,r6
 c00e43c:	18800315 	stw	r2,12(r3)
 c00e440:	10c00215 	stw	r3,8(r2)
 c00e444:	003fdb06 	br	c00e3b4 <__alt_data_end+0xfc00e3b4>
 c00e448:	00800304 	movi	r2,12
 c00e44c:	a0800015 	stw	r2,0(r20)
 c00e450:	0005883a 	mov	r2,zero
 c00e454:	003fe506 	br	c00e3ec <__alt_data_end+0xfc00e3ec>
 c00e458:	98c00117 	ldw	r3,4(r19)
 c00e45c:	9c4b883a 	add	r5,r19,r17
 c00e460:	11000054 	ori	r4,r2,1
 c00e464:	18c0004c 	andi	r3,r3,1
 c00e468:	1c62b03a 	or	r17,r3,r17
 c00e46c:	9c400115 	stw	r17,4(r19)
 c00e470:	29000115 	stw	r4,4(r5)
 c00e474:	2885883a 	add	r2,r5,r2
 c00e478:	10c00117 	ldw	r3,4(r2)
 c00e47c:	29400204 	addi	r5,r5,8
 c00e480:	a009883a 	mov	r4,r20
 c00e484:	18c00054 	ori	r3,r3,1
 c00e488:	10c00115 	stw	r3,4(r2)
 c00e48c:	c00b9100 	call	c00b910 <_free_r>
 c00e490:	003fd306 	br	c00e3e0 <__alt_data_end+0xfc00e3e0>
 c00e494:	017fff04 	movi	r5,-4
 c00e498:	414a703a 	and	r5,r8,r5
 c00e49c:	89800404 	addi	r6,r17,16
 c00e4a0:	8151883a 	add	r8,r16,r5
 c00e4a4:	4180590e 	bge	r8,r6,c00e60c <_realloc_r+0x390>
 c00e4a8:	1080004c 	andi	r2,r2,1
 c00e4ac:	103f9e1e 	bne	r2,zero,c00e328 <__alt_data_end+0xfc00e328>
 c00e4b0:	adbffe17 	ldw	r22,-8(r21)
 c00e4b4:	00bfff04 	movi	r2,-4
 c00e4b8:	9dadc83a 	sub	r22,r19,r22
 c00e4bc:	b1800117 	ldw	r6,4(r22)
 c00e4c0:	3084703a 	and	r2,r6,r2
 c00e4c4:	20002026 	beq	r4,zero,c00e548 <_realloc_r+0x2cc>
 c00e4c8:	80af883a 	add	r23,r16,r2
 c00e4cc:	b96f883a 	add	r23,r23,r5
 c00e4d0:	21c05f26 	beq	r4,r7,c00e650 <_realloc_r+0x3d4>
 c00e4d4:	b8c01c16 	blt	r23,r3,c00e548 <_realloc_r+0x2cc>
 c00e4d8:	20800317 	ldw	r2,12(r4)
 c00e4dc:	20c00217 	ldw	r3,8(r4)
 c00e4e0:	81bfff04 	addi	r6,r16,-4
 c00e4e4:	01000904 	movi	r4,36
 c00e4e8:	18800315 	stw	r2,12(r3)
 c00e4ec:	10c00215 	stw	r3,8(r2)
 c00e4f0:	b0c00217 	ldw	r3,8(r22)
 c00e4f4:	b0800317 	ldw	r2,12(r22)
 c00e4f8:	b4800204 	addi	r18,r22,8
 c00e4fc:	18800315 	stw	r2,12(r3)
 c00e500:	10c00215 	stw	r3,8(r2)
 c00e504:	21801b36 	bltu	r4,r6,c00e574 <_realloc_r+0x2f8>
 c00e508:	008004c4 	movi	r2,19
 c00e50c:	1180352e 	bgeu	r2,r6,c00e5e4 <_realloc_r+0x368>
 c00e510:	a8800017 	ldw	r2,0(r21)
 c00e514:	b0800215 	stw	r2,8(r22)
 c00e518:	a8800117 	ldw	r2,4(r21)
 c00e51c:	b0800315 	stw	r2,12(r22)
 c00e520:	008006c4 	movi	r2,27
 c00e524:	11807f36 	bltu	r2,r6,c00e724 <_realloc_r+0x4a8>
 c00e528:	b0800404 	addi	r2,r22,16
 c00e52c:	ad400204 	addi	r21,r21,8
 c00e530:	00002d06 	br	c00e5e8 <_realloc_r+0x36c>
 c00e534:	adbffe17 	ldw	r22,-8(r21)
 c00e538:	00bfff04 	movi	r2,-4
 c00e53c:	9dadc83a 	sub	r22,r19,r22
 c00e540:	b1000117 	ldw	r4,4(r22)
 c00e544:	2084703a 	and	r2,r4,r2
 c00e548:	b03f7726 	beq	r22,zero,c00e328 <__alt_data_end+0xfc00e328>
 c00e54c:	80af883a 	add	r23,r16,r2
 c00e550:	b8ff7516 	blt	r23,r3,c00e328 <__alt_data_end+0xfc00e328>
 c00e554:	b0800317 	ldw	r2,12(r22)
 c00e558:	b0c00217 	ldw	r3,8(r22)
 c00e55c:	81bfff04 	addi	r6,r16,-4
 c00e560:	01000904 	movi	r4,36
 c00e564:	18800315 	stw	r2,12(r3)
 c00e568:	10c00215 	stw	r3,8(r2)
 c00e56c:	b4800204 	addi	r18,r22,8
 c00e570:	21bfe52e 	bgeu	r4,r6,c00e508 <__alt_data_end+0xfc00e508>
 c00e574:	a80b883a 	mov	r5,r21
 c00e578:	9009883a 	mov	r4,r18
 c00e57c:	c00cf400 	call	c00cf40 <memmove>
 c00e580:	b821883a 	mov	r16,r23
 c00e584:	b027883a 	mov	r19,r22
 c00e588:	003f8a06 	br	c00e3b4 <__alt_data_end+0xfc00e3b4>
 c00e58c:	300b883a 	mov	r5,r6
 c00e590:	dfc00917 	ldw	ra,36(sp)
 c00e594:	df000817 	ldw	fp,32(sp)
 c00e598:	ddc00717 	ldw	r23,28(sp)
 c00e59c:	dd800617 	ldw	r22,24(sp)
 c00e5a0:	dd400517 	ldw	r21,20(sp)
 c00e5a4:	dd000417 	ldw	r20,16(sp)
 c00e5a8:	dcc00317 	ldw	r19,12(sp)
 c00e5ac:	dc800217 	ldw	r18,8(sp)
 c00e5b0:	dc400117 	ldw	r17,4(sp)
 c00e5b4:	dc000017 	ldw	r16,0(sp)
 c00e5b8:	dec00a04 	addi	sp,sp,40
 c00e5bc:	c00c5081 	jmpi	c00c508 <_malloc_r>
 c00e5c0:	a8c00017 	ldw	r3,0(r21)
 c00e5c4:	90c00015 	stw	r3,0(r18)
 c00e5c8:	a8c00117 	ldw	r3,4(r21)
 c00e5cc:	90c00115 	stw	r3,4(r18)
 c00e5d0:	00c006c4 	movi	r3,27
 c00e5d4:	19804536 	bltu	r3,r6,c00e6ec <_realloc_r+0x470>
 c00e5d8:	90800204 	addi	r2,r18,8
 c00e5dc:	a8c00204 	addi	r3,r21,8
 c00e5e0:	003f6306 	br	c00e370 <__alt_data_end+0xfc00e370>
 c00e5e4:	9005883a 	mov	r2,r18
 c00e5e8:	a8c00017 	ldw	r3,0(r21)
 c00e5ec:	b821883a 	mov	r16,r23
 c00e5f0:	b027883a 	mov	r19,r22
 c00e5f4:	10c00015 	stw	r3,0(r2)
 c00e5f8:	a8c00117 	ldw	r3,4(r21)
 c00e5fc:	10c00115 	stw	r3,4(r2)
 c00e600:	a8c00217 	ldw	r3,8(r21)
 c00e604:	10c00215 	stw	r3,8(r2)
 c00e608:	003f6a06 	br	c00e3b4 <__alt_data_end+0xfc00e3b4>
 c00e60c:	9c67883a 	add	r19,r19,r17
 c00e610:	4445c83a 	sub	r2,r8,r17
 c00e614:	e4c00215 	stw	r19,8(fp)
 c00e618:	10800054 	ori	r2,r2,1
 c00e61c:	98800115 	stw	r2,4(r19)
 c00e620:	a8bfff17 	ldw	r2,-4(r21)
 c00e624:	a009883a 	mov	r4,r20
 c00e628:	1080004c 	andi	r2,r2,1
 c00e62c:	1462b03a 	or	r17,r2,r17
 c00e630:	ac7fff15 	stw	r17,-4(r21)
 c00e634:	c015ba40 	call	c015ba4 <__malloc_unlock>
 c00e638:	a805883a 	mov	r2,r21
 c00e63c:	003f6b06 	br	c00e3ec <__alt_data_end+0xfc00e3ec>
 c00e640:	a80b883a 	mov	r5,r21
 c00e644:	9009883a 	mov	r4,r18
 c00e648:	c00cf400 	call	c00cf40 <memmove>
 c00e64c:	003f4e06 	br	c00e388 <__alt_data_end+0xfc00e388>
 c00e650:	89000404 	addi	r4,r17,16
 c00e654:	b93fbc16 	blt	r23,r4,c00e548 <__alt_data_end+0xfc00e548>
 c00e658:	b0800317 	ldw	r2,12(r22)
 c00e65c:	b0c00217 	ldw	r3,8(r22)
 c00e660:	81bfff04 	addi	r6,r16,-4
 c00e664:	01000904 	movi	r4,36
 c00e668:	18800315 	stw	r2,12(r3)
 c00e66c:	10c00215 	stw	r3,8(r2)
 c00e670:	b4800204 	addi	r18,r22,8
 c00e674:	21804336 	bltu	r4,r6,c00e784 <_realloc_r+0x508>
 c00e678:	008004c4 	movi	r2,19
 c00e67c:	11803f2e 	bgeu	r2,r6,c00e77c <_realloc_r+0x500>
 c00e680:	a8800017 	ldw	r2,0(r21)
 c00e684:	b0800215 	stw	r2,8(r22)
 c00e688:	a8800117 	ldw	r2,4(r21)
 c00e68c:	b0800315 	stw	r2,12(r22)
 c00e690:	008006c4 	movi	r2,27
 c00e694:	11803f36 	bltu	r2,r6,c00e794 <_realloc_r+0x518>
 c00e698:	b0800404 	addi	r2,r22,16
 c00e69c:	ad400204 	addi	r21,r21,8
 c00e6a0:	a8c00017 	ldw	r3,0(r21)
 c00e6a4:	10c00015 	stw	r3,0(r2)
 c00e6a8:	a8c00117 	ldw	r3,4(r21)
 c00e6ac:	10c00115 	stw	r3,4(r2)
 c00e6b0:	a8c00217 	ldw	r3,8(r21)
 c00e6b4:	10c00215 	stw	r3,8(r2)
 c00e6b8:	b447883a 	add	r3,r22,r17
 c00e6bc:	bc45c83a 	sub	r2,r23,r17
 c00e6c0:	e0c00215 	stw	r3,8(fp)
 c00e6c4:	10800054 	ori	r2,r2,1
 c00e6c8:	18800115 	stw	r2,4(r3)
 c00e6cc:	b0800117 	ldw	r2,4(r22)
 c00e6d0:	a009883a 	mov	r4,r20
 c00e6d4:	1080004c 	andi	r2,r2,1
 c00e6d8:	1462b03a 	or	r17,r2,r17
 c00e6dc:	b4400115 	stw	r17,4(r22)
 c00e6e0:	c015ba40 	call	c015ba4 <__malloc_unlock>
 c00e6e4:	9005883a 	mov	r2,r18
 c00e6e8:	003f4006 	br	c00e3ec <__alt_data_end+0xfc00e3ec>
 c00e6ec:	a8c00217 	ldw	r3,8(r21)
 c00e6f0:	90c00215 	stw	r3,8(r18)
 c00e6f4:	a8c00317 	ldw	r3,12(r21)
 c00e6f8:	90c00315 	stw	r3,12(r18)
 c00e6fc:	30801126 	beq	r6,r2,c00e744 <_realloc_r+0x4c8>
 c00e700:	90800404 	addi	r2,r18,16
 c00e704:	a8c00404 	addi	r3,r21,16
 c00e708:	003f1906 	br	c00e370 <__alt_data_end+0xfc00e370>
 c00e70c:	90ffff17 	ldw	r3,-4(r18)
 c00e710:	00bfff04 	movi	r2,-4
 c00e714:	a825883a 	mov	r18,r21
 c00e718:	1884703a 	and	r2,r3,r2
 c00e71c:	80a1883a 	add	r16,r16,r2
 c00e720:	003f2406 	br	c00e3b4 <__alt_data_end+0xfc00e3b4>
 c00e724:	a8800217 	ldw	r2,8(r21)
 c00e728:	b0800415 	stw	r2,16(r22)
 c00e72c:	a8800317 	ldw	r2,12(r21)
 c00e730:	b0800515 	stw	r2,20(r22)
 c00e734:	31000a26 	beq	r6,r4,c00e760 <_realloc_r+0x4e4>
 c00e738:	b0800604 	addi	r2,r22,24
 c00e73c:	ad400404 	addi	r21,r21,16
 c00e740:	003fa906 	br	c00e5e8 <__alt_data_end+0xfc00e5e8>
 c00e744:	a9000417 	ldw	r4,16(r21)
 c00e748:	90800604 	addi	r2,r18,24
 c00e74c:	a8c00604 	addi	r3,r21,24
 c00e750:	91000415 	stw	r4,16(r18)
 c00e754:	a9000517 	ldw	r4,20(r21)
 c00e758:	91000515 	stw	r4,20(r18)
 c00e75c:	003f0406 	br	c00e370 <__alt_data_end+0xfc00e370>
 c00e760:	a8c00417 	ldw	r3,16(r21)
 c00e764:	ad400604 	addi	r21,r21,24
 c00e768:	b0800804 	addi	r2,r22,32
 c00e76c:	b0c00615 	stw	r3,24(r22)
 c00e770:	a8ffff17 	ldw	r3,-4(r21)
 c00e774:	b0c00715 	stw	r3,28(r22)
 c00e778:	003f9b06 	br	c00e5e8 <__alt_data_end+0xfc00e5e8>
 c00e77c:	9005883a 	mov	r2,r18
 c00e780:	003fc706 	br	c00e6a0 <__alt_data_end+0xfc00e6a0>
 c00e784:	a80b883a 	mov	r5,r21
 c00e788:	9009883a 	mov	r4,r18
 c00e78c:	c00cf400 	call	c00cf40 <memmove>
 c00e790:	003fc906 	br	c00e6b8 <__alt_data_end+0xfc00e6b8>
 c00e794:	a8800217 	ldw	r2,8(r21)
 c00e798:	b0800415 	stw	r2,16(r22)
 c00e79c:	a8800317 	ldw	r2,12(r21)
 c00e7a0:	b0800515 	stw	r2,20(r22)
 c00e7a4:	31000726 	beq	r6,r4,c00e7c4 <_realloc_r+0x548>
 c00e7a8:	b0800604 	addi	r2,r22,24
 c00e7ac:	ad400404 	addi	r21,r21,16
 c00e7b0:	003fbb06 	br	c00e6a0 <__alt_data_end+0xfc00e6a0>
 c00e7b4:	a009883a 	mov	r4,r20
 c00e7b8:	c015ba40 	call	c015ba4 <__malloc_unlock>
 c00e7bc:	0005883a 	mov	r2,zero
 c00e7c0:	003f0a06 	br	c00e3ec <__alt_data_end+0xfc00e3ec>
 c00e7c4:	a8c00417 	ldw	r3,16(r21)
 c00e7c8:	ad400604 	addi	r21,r21,24
 c00e7cc:	b0800804 	addi	r2,r22,32
 c00e7d0:	b0c00615 	stw	r3,24(r22)
 c00e7d4:	a8ffff17 	ldw	r3,-4(r21)
 c00e7d8:	b0c00715 	stw	r3,28(r22)
 c00e7dc:	003fb006 	br	c00e6a0 <__alt_data_end+0xfc00e6a0>

0c00e7e0 <__fpclassifyd>:
 c00e7e0:	00a00034 	movhi	r2,32768
 c00e7e4:	10bfffc4 	addi	r2,r2,-1
 c00e7e8:	2884703a 	and	r2,r5,r2
 c00e7ec:	10000726 	beq	r2,zero,c00e80c <__fpclassifyd+0x2c>
 c00e7f0:	00fffc34 	movhi	r3,65520
 c00e7f4:	019ff834 	movhi	r6,32736
 c00e7f8:	28c7883a 	add	r3,r5,r3
 c00e7fc:	31bfffc4 	addi	r6,r6,-1
 c00e800:	30c00536 	bltu	r6,r3,c00e818 <__fpclassifyd+0x38>
 c00e804:	00800104 	movi	r2,4
 c00e808:	f800283a 	ret
 c00e80c:	2000021e 	bne	r4,zero,c00e818 <__fpclassifyd+0x38>
 c00e810:	00800084 	movi	r2,2
 c00e814:	f800283a 	ret
 c00e818:	00dffc34 	movhi	r3,32752
 c00e81c:	019ff834 	movhi	r6,32736
 c00e820:	28cb883a 	add	r5,r5,r3
 c00e824:	31bfffc4 	addi	r6,r6,-1
 c00e828:	317ff62e 	bgeu	r6,r5,c00e804 <__alt_data_end+0xfc00e804>
 c00e82c:	01400434 	movhi	r5,16
 c00e830:	297fffc4 	addi	r5,r5,-1
 c00e834:	28800236 	bltu	r5,r2,c00e840 <__fpclassifyd+0x60>
 c00e838:	008000c4 	movi	r2,3
 c00e83c:	f800283a 	ret
 c00e840:	10c00226 	beq	r2,r3,c00e84c <__fpclassifyd+0x6c>
 c00e844:	0005883a 	mov	r2,zero
 c00e848:	f800283a 	ret
 c00e84c:	2005003a 	cmpeq	r2,r4,zero
 c00e850:	f800283a 	ret

0c00e854 <_sbrk_r>:
 c00e854:	defffd04 	addi	sp,sp,-12
 c00e858:	dc000015 	stw	r16,0(sp)
 c00e85c:	040300b4 	movhi	r16,3074
 c00e860:	dc400115 	stw	r17,4(sp)
 c00e864:	8431c804 	addi	r16,r16,-14560
 c00e868:	2023883a 	mov	r17,r4
 c00e86c:	2809883a 	mov	r4,r5
 c00e870:	dfc00215 	stw	ra,8(sp)
 c00e874:	80000015 	stw	zero,0(r16)
 c00e878:	c015ff40 	call	c015ff4 <sbrk>
 c00e87c:	00ffffc4 	movi	r3,-1
 c00e880:	10c00526 	beq	r2,r3,c00e898 <_sbrk_r+0x44>
 c00e884:	dfc00217 	ldw	ra,8(sp)
 c00e888:	dc400117 	ldw	r17,4(sp)
 c00e88c:	dc000017 	ldw	r16,0(sp)
 c00e890:	dec00304 	addi	sp,sp,12
 c00e894:	f800283a 	ret
 c00e898:	80c00017 	ldw	r3,0(r16)
 c00e89c:	183ff926 	beq	r3,zero,c00e884 <__alt_data_end+0xfc00e884>
 c00e8a0:	88c00015 	stw	r3,0(r17)
 c00e8a4:	003ff706 	br	c00e884 <__alt_data_end+0xfc00e884>

0c00e8a8 <__sread>:
 c00e8a8:	defffe04 	addi	sp,sp,-8
 c00e8ac:	dc000015 	stw	r16,0(sp)
 c00e8b0:	2821883a 	mov	r16,r5
 c00e8b4:	2940038f 	ldh	r5,14(r5)
 c00e8b8:	dfc00115 	stw	ra,4(sp)
 c00e8bc:	c011cd40 	call	c011cd4 <_read_r>
 c00e8c0:	10000716 	blt	r2,zero,c00e8e0 <__sread+0x38>
 c00e8c4:	80c01417 	ldw	r3,80(r16)
 c00e8c8:	1887883a 	add	r3,r3,r2
 c00e8cc:	80c01415 	stw	r3,80(r16)
 c00e8d0:	dfc00117 	ldw	ra,4(sp)
 c00e8d4:	dc000017 	ldw	r16,0(sp)
 c00e8d8:	dec00204 	addi	sp,sp,8
 c00e8dc:	f800283a 	ret
 c00e8e0:	80c0030b 	ldhu	r3,12(r16)
 c00e8e4:	18fbffcc 	andi	r3,r3,61439
 c00e8e8:	80c0030d 	sth	r3,12(r16)
 c00e8ec:	dfc00117 	ldw	ra,4(sp)
 c00e8f0:	dc000017 	ldw	r16,0(sp)
 c00e8f4:	dec00204 	addi	sp,sp,8
 c00e8f8:	f800283a 	ret

0c00e8fc <__seofread>:
 c00e8fc:	0005883a 	mov	r2,zero
 c00e900:	f800283a 	ret

0c00e904 <__swrite>:
 c00e904:	2880030b 	ldhu	r2,12(r5)
 c00e908:	defffb04 	addi	sp,sp,-20
 c00e90c:	dcc00315 	stw	r19,12(sp)
 c00e910:	dc800215 	stw	r18,8(sp)
 c00e914:	dc400115 	stw	r17,4(sp)
 c00e918:	dc000015 	stw	r16,0(sp)
 c00e91c:	dfc00415 	stw	ra,16(sp)
 c00e920:	10c0400c 	andi	r3,r2,256
 c00e924:	2821883a 	mov	r16,r5
 c00e928:	2023883a 	mov	r17,r4
 c00e92c:	3025883a 	mov	r18,r6
 c00e930:	3827883a 	mov	r19,r7
 c00e934:	18000526 	beq	r3,zero,c00e94c <__swrite+0x48>
 c00e938:	2940038f 	ldh	r5,14(r5)
 c00e93c:	01c00084 	movi	r7,2
 c00e940:	000d883a 	mov	r6,zero
 c00e944:	c011c740 	call	c011c74 <_lseek_r>
 c00e948:	8080030b 	ldhu	r2,12(r16)
 c00e94c:	8140038f 	ldh	r5,14(r16)
 c00e950:	10bbffcc 	andi	r2,r2,61439
 c00e954:	980f883a 	mov	r7,r19
 c00e958:	900d883a 	mov	r6,r18
 c00e95c:	8809883a 	mov	r4,r17
 c00e960:	8080030d 	sth	r2,12(r16)
 c00e964:	dfc00417 	ldw	ra,16(sp)
 c00e968:	dcc00317 	ldw	r19,12(sp)
 c00e96c:	dc800217 	ldw	r18,8(sp)
 c00e970:	dc400117 	ldw	r17,4(sp)
 c00e974:	dc000017 	ldw	r16,0(sp)
 c00e978:	dec00504 	addi	sp,sp,20
 c00e97c:	c0117281 	jmpi	c011728 <_write_r>

0c00e980 <__sseek>:
 c00e980:	defffe04 	addi	sp,sp,-8
 c00e984:	dc000015 	stw	r16,0(sp)
 c00e988:	2821883a 	mov	r16,r5
 c00e98c:	2940038f 	ldh	r5,14(r5)
 c00e990:	dfc00115 	stw	ra,4(sp)
 c00e994:	c011c740 	call	c011c74 <_lseek_r>
 c00e998:	00ffffc4 	movi	r3,-1
 c00e99c:	10c00826 	beq	r2,r3,c00e9c0 <__sseek+0x40>
 c00e9a0:	80c0030b 	ldhu	r3,12(r16)
 c00e9a4:	80801415 	stw	r2,80(r16)
 c00e9a8:	18c40014 	ori	r3,r3,4096
 c00e9ac:	80c0030d 	sth	r3,12(r16)
 c00e9b0:	dfc00117 	ldw	ra,4(sp)
 c00e9b4:	dc000017 	ldw	r16,0(sp)
 c00e9b8:	dec00204 	addi	sp,sp,8
 c00e9bc:	f800283a 	ret
 c00e9c0:	80c0030b 	ldhu	r3,12(r16)
 c00e9c4:	18fbffcc 	andi	r3,r3,61439
 c00e9c8:	80c0030d 	sth	r3,12(r16)
 c00e9cc:	dfc00117 	ldw	ra,4(sp)
 c00e9d0:	dc000017 	ldw	r16,0(sp)
 c00e9d4:	dec00204 	addi	sp,sp,8
 c00e9d8:	f800283a 	ret

0c00e9dc <__sclose>:
 c00e9dc:	2940038f 	ldh	r5,14(r5)
 c00e9e0:	c0117881 	jmpi	c011788 <_close_r>

0c00e9e4 <strcmp>:
 c00e9e4:	2144b03a 	or	r2,r4,r5
 c00e9e8:	108000cc 	andi	r2,r2,3
 c00e9ec:	1000171e 	bne	r2,zero,c00ea4c <strcmp+0x68>
 c00e9f0:	20800017 	ldw	r2,0(r4)
 c00e9f4:	28c00017 	ldw	r3,0(r5)
 c00e9f8:	10c0141e 	bne	r2,r3,c00ea4c <strcmp+0x68>
 c00e9fc:	027fbff4 	movhi	r9,65279
 c00ea00:	4a7fbfc4 	addi	r9,r9,-257
 c00ea04:	0086303a 	nor	r3,zero,r2
 c00ea08:	02202074 	movhi	r8,32897
 c00ea0c:	1245883a 	add	r2,r2,r9
 c00ea10:	42202004 	addi	r8,r8,-32640
 c00ea14:	10c4703a 	and	r2,r2,r3
 c00ea18:	1204703a 	and	r2,r2,r8
 c00ea1c:	10000226 	beq	r2,zero,c00ea28 <strcmp+0x44>
 c00ea20:	00002306 	br	c00eab0 <strcmp+0xcc>
 c00ea24:	1000221e 	bne	r2,zero,c00eab0 <strcmp+0xcc>
 c00ea28:	21000104 	addi	r4,r4,4
 c00ea2c:	20c00017 	ldw	r3,0(r4)
 c00ea30:	29400104 	addi	r5,r5,4
 c00ea34:	29800017 	ldw	r6,0(r5)
 c00ea38:	1a4f883a 	add	r7,r3,r9
 c00ea3c:	00c4303a 	nor	r2,zero,r3
 c00ea40:	3884703a 	and	r2,r7,r2
 c00ea44:	1204703a 	and	r2,r2,r8
 c00ea48:	19bff626 	beq	r3,r6,c00ea24 <__alt_data_end+0xfc00ea24>
 c00ea4c:	20800003 	ldbu	r2,0(r4)
 c00ea50:	10c03fcc 	andi	r3,r2,255
 c00ea54:	18c0201c 	xori	r3,r3,128
 c00ea58:	18ffe004 	addi	r3,r3,-128
 c00ea5c:	18000c26 	beq	r3,zero,c00ea90 <strcmp+0xac>
 c00ea60:	29800007 	ldb	r6,0(r5)
 c00ea64:	19800326 	beq	r3,r6,c00ea74 <strcmp+0x90>
 c00ea68:	00001306 	br	c00eab8 <strcmp+0xd4>
 c00ea6c:	29800007 	ldb	r6,0(r5)
 c00ea70:	11800b1e 	bne	r2,r6,c00eaa0 <strcmp+0xbc>
 c00ea74:	21000044 	addi	r4,r4,1
 c00ea78:	20c00003 	ldbu	r3,0(r4)
 c00ea7c:	29400044 	addi	r5,r5,1
 c00ea80:	18803fcc 	andi	r2,r3,255
 c00ea84:	1080201c 	xori	r2,r2,128
 c00ea88:	10bfe004 	addi	r2,r2,-128
 c00ea8c:	103ff71e 	bne	r2,zero,c00ea6c <__alt_data_end+0xfc00ea6c>
 c00ea90:	0007883a 	mov	r3,zero
 c00ea94:	28800003 	ldbu	r2,0(r5)
 c00ea98:	1885c83a 	sub	r2,r3,r2
 c00ea9c:	f800283a 	ret
 c00eaa0:	28800003 	ldbu	r2,0(r5)
 c00eaa4:	18c03fcc 	andi	r3,r3,255
 c00eaa8:	1885c83a 	sub	r2,r3,r2
 c00eaac:	f800283a 	ret
 c00eab0:	0005883a 	mov	r2,zero
 c00eab4:	f800283a 	ret
 c00eab8:	10c03fcc 	andi	r3,r2,255
 c00eabc:	003ff506 	br	c00ea94 <__alt_data_end+0xfc00ea94>

0c00eac0 <__ssprint_r>:
 c00eac0:	30800217 	ldw	r2,8(r6)
 c00eac4:	defff604 	addi	sp,sp,-40
 c00eac8:	dc800215 	stw	r18,8(sp)
 c00eacc:	dfc00915 	stw	ra,36(sp)
 c00ead0:	df000815 	stw	fp,32(sp)
 c00ead4:	ddc00715 	stw	r23,28(sp)
 c00ead8:	dd800615 	stw	r22,24(sp)
 c00eadc:	dd400515 	stw	r21,20(sp)
 c00eae0:	dd000415 	stw	r20,16(sp)
 c00eae4:	dcc00315 	stw	r19,12(sp)
 c00eae8:	dc400115 	stw	r17,4(sp)
 c00eaec:	dc000015 	stw	r16,0(sp)
 c00eaf0:	3025883a 	mov	r18,r6
 c00eaf4:	10005826 	beq	r2,zero,c00ec58 <__ssprint_r+0x198>
 c00eaf8:	2027883a 	mov	r19,r4
 c00eafc:	35c00017 	ldw	r23,0(r6)
 c00eb00:	29000017 	ldw	r4,0(r5)
 c00eb04:	28800217 	ldw	r2,8(r5)
 c00eb08:	2823883a 	mov	r17,r5
 c00eb0c:	0039883a 	mov	fp,zero
 c00eb10:	0021883a 	mov	r16,zero
 c00eb14:	80003926 	beq	r16,zero,c00ebfc <__ssprint_r+0x13c>
 c00eb18:	102b883a 	mov	r21,r2
 c00eb1c:	102d883a 	mov	r22,r2
 c00eb20:	80803a36 	bltu	r16,r2,c00ec0c <__ssprint_r+0x14c>
 c00eb24:	88c0030b 	ldhu	r3,12(r17)
 c00eb28:	1881200c 	andi	r2,r3,1152
 c00eb2c:	10002626 	beq	r2,zero,c00ebc8 <__ssprint_r+0x108>
 c00eb30:	88800517 	ldw	r2,20(r17)
 c00eb34:	89400417 	ldw	r5,16(r17)
 c00eb38:	81800044 	addi	r6,r16,1
 c00eb3c:	108f883a 	add	r7,r2,r2
 c00eb40:	3885883a 	add	r2,r7,r2
 c00eb44:	100ed7fa 	srli	r7,r2,31
 c00eb48:	216dc83a 	sub	r22,r4,r5
 c00eb4c:	3589883a 	add	r4,r6,r22
 c00eb50:	3885883a 	add	r2,r7,r2
 c00eb54:	102bd07a 	srai	r21,r2,1
 c00eb58:	a80d883a 	mov	r6,r21
 c00eb5c:	a900022e 	bgeu	r21,r4,c00eb68 <__ssprint_r+0xa8>
 c00eb60:	202b883a 	mov	r21,r4
 c00eb64:	200d883a 	mov	r6,r4
 c00eb68:	18c1000c 	andi	r3,r3,1024
 c00eb6c:	18002a26 	beq	r3,zero,c00ec18 <__ssprint_r+0x158>
 c00eb70:	300b883a 	mov	r5,r6
 c00eb74:	9809883a 	mov	r4,r19
 c00eb78:	c00c5080 	call	c00c508 <_malloc_r>
 c00eb7c:	1029883a 	mov	r20,r2
 c00eb80:	10002c26 	beq	r2,zero,c00ec34 <__ssprint_r+0x174>
 c00eb84:	89400417 	ldw	r5,16(r17)
 c00eb88:	b00d883a 	mov	r6,r22
 c00eb8c:	1009883a 	mov	r4,r2
 c00eb90:	c00cdf80 	call	c00cdf8 <memcpy>
 c00eb94:	8880030b 	ldhu	r2,12(r17)
 c00eb98:	00fedfc4 	movi	r3,-1153
 c00eb9c:	10c4703a 	and	r2,r2,r3
 c00eba0:	10802014 	ori	r2,r2,128
 c00eba4:	8880030d 	sth	r2,12(r17)
 c00eba8:	a589883a 	add	r4,r20,r22
 c00ebac:	adadc83a 	sub	r22,r21,r22
 c00ebb0:	8d400515 	stw	r21,20(r17)
 c00ebb4:	8d800215 	stw	r22,8(r17)
 c00ebb8:	8d000415 	stw	r20,16(r17)
 c00ebbc:	89000015 	stw	r4,0(r17)
 c00ebc0:	802b883a 	mov	r21,r16
 c00ebc4:	802d883a 	mov	r22,r16
 c00ebc8:	b00d883a 	mov	r6,r22
 c00ebcc:	e00b883a 	mov	r5,fp
 c00ebd0:	c00cf400 	call	c00cf40 <memmove>
 c00ebd4:	88800217 	ldw	r2,8(r17)
 c00ebd8:	89000017 	ldw	r4,0(r17)
 c00ebdc:	90c00217 	ldw	r3,8(r18)
 c00ebe0:	1545c83a 	sub	r2,r2,r21
 c00ebe4:	2589883a 	add	r4,r4,r22
 c00ebe8:	88800215 	stw	r2,8(r17)
 c00ebec:	89000015 	stw	r4,0(r17)
 c00ebf0:	1c21c83a 	sub	r16,r3,r16
 c00ebf4:	94000215 	stw	r16,8(r18)
 c00ebf8:	80001726 	beq	r16,zero,c00ec58 <__ssprint_r+0x198>
 c00ebfc:	bf000017 	ldw	fp,0(r23)
 c00ec00:	bc000117 	ldw	r16,4(r23)
 c00ec04:	bdc00204 	addi	r23,r23,8
 c00ec08:	003fc206 	br	c00eb14 <__alt_data_end+0xfc00eb14>
 c00ec0c:	802b883a 	mov	r21,r16
 c00ec10:	802d883a 	mov	r22,r16
 c00ec14:	003fec06 	br	c00ebc8 <__alt_data_end+0xfc00ebc8>
 c00ec18:	9809883a 	mov	r4,r19
 c00ec1c:	c00e27c0 	call	c00e27c <_realloc_r>
 c00ec20:	1029883a 	mov	r20,r2
 c00ec24:	103fe01e 	bne	r2,zero,c00eba8 <__alt_data_end+0xfc00eba8>
 c00ec28:	89400417 	ldw	r5,16(r17)
 c00ec2c:	9809883a 	mov	r4,r19
 c00ec30:	c00b9100 	call	c00b910 <_free_r>
 c00ec34:	88c0030b 	ldhu	r3,12(r17)
 c00ec38:	00800304 	movi	r2,12
 c00ec3c:	98800015 	stw	r2,0(r19)
 c00ec40:	18c01014 	ori	r3,r3,64
 c00ec44:	88c0030d 	sth	r3,12(r17)
 c00ec48:	00bfffc4 	movi	r2,-1
 c00ec4c:	90000215 	stw	zero,8(r18)
 c00ec50:	90000115 	stw	zero,4(r18)
 c00ec54:	00000206 	br	c00ec60 <__ssprint_r+0x1a0>
 c00ec58:	90000115 	stw	zero,4(r18)
 c00ec5c:	0005883a 	mov	r2,zero
 c00ec60:	dfc00917 	ldw	ra,36(sp)
 c00ec64:	df000817 	ldw	fp,32(sp)
 c00ec68:	ddc00717 	ldw	r23,28(sp)
 c00ec6c:	dd800617 	ldw	r22,24(sp)
 c00ec70:	dd400517 	ldw	r21,20(sp)
 c00ec74:	dd000417 	ldw	r20,16(sp)
 c00ec78:	dcc00317 	ldw	r19,12(sp)
 c00ec7c:	dc800217 	ldw	r18,8(sp)
 c00ec80:	dc400117 	ldw	r17,4(sp)
 c00ec84:	dc000017 	ldw	r16,0(sp)
 c00ec88:	dec00a04 	addi	sp,sp,40
 c00ec8c:	f800283a 	ret

0c00ec90 <___svfiprintf_internal_r>:
 c00ec90:	2880030b 	ldhu	r2,12(r5)
 c00ec94:	deffc804 	addi	sp,sp,-224
 c00ec98:	dcc03115 	stw	r19,196(sp)
 c00ec9c:	dfc03715 	stw	ra,220(sp)
 c00eca0:	df003615 	stw	fp,216(sp)
 c00eca4:	ddc03515 	stw	r23,212(sp)
 c00eca8:	dd803415 	stw	r22,208(sp)
 c00ecac:	dd403315 	stw	r21,204(sp)
 c00ecb0:	dd003215 	stw	r20,200(sp)
 c00ecb4:	dc803015 	stw	r18,192(sp)
 c00ecb8:	dc402f15 	stw	r17,188(sp)
 c00ecbc:	dc002e15 	stw	r16,184(sp)
 c00ecc0:	d9402315 	stw	r5,140(sp)
 c00ecc4:	d9002715 	stw	r4,156(sp)
 c00ecc8:	1080200c 	andi	r2,r2,128
 c00eccc:	d9c02415 	stw	r7,144(sp)
 c00ecd0:	3027883a 	mov	r19,r6
 c00ecd4:	10000226 	beq	r2,zero,c00ece0 <___svfiprintf_internal_r+0x50>
 c00ecd8:	28800417 	ldw	r2,16(r5)
 c00ecdc:	10046d26 	beq	r2,zero,c00fe94 <___svfiprintf_internal_r+0x1204>
 c00ece0:	d8801a04 	addi	r2,sp,104
 c00ece4:	d8c019c4 	addi	r3,sp,103
 c00ece8:	058300b4 	movhi	r22,3074
 c00ecec:	10c9c83a 	sub	r4,r2,r3
 c00ecf0:	b5a25104 	addi	r22,r22,-30396
 c00ecf4:	d8801e15 	stw	r2,120(sp)
 c00ecf8:	d8c01f15 	stw	r3,124(sp)
 c00ecfc:	dec01a15 	stw	sp,104(sp)
 c00ed00:	d8001c15 	stw	zero,112(sp)
 c00ed04:	d8001b15 	stw	zero,108(sp)
 c00ed08:	d811883a 	mov	r8,sp
 c00ed0c:	d8002915 	stw	zero,164(sp)
 c00ed10:	d8002615 	stw	zero,152(sp)
 c00ed14:	d9002c15 	stw	r4,176(sp)
 c00ed18:	98800007 	ldb	r2,0(r19)
 c00ed1c:	10031426 	beq	r2,zero,c00f970 <___svfiprintf_internal_r+0xce0>
 c00ed20:	00c00944 	movi	r3,37
 c00ed24:	9825883a 	mov	r18,r19
 c00ed28:	10c0021e 	bne	r2,r3,c00ed34 <___svfiprintf_internal_r+0xa4>
 c00ed2c:	00001406 	br	c00ed80 <___svfiprintf_internal_r+0xf0>
 c00ed30:	10c00326 	beq	r2,r3,c00ed40 <___svfiprintf_internal_r+0xb0>
 c00ed34:	94800044 	addi	r18,r18,1
 c00ed38:	90800007 	ldb	r2,0(r18)
 c00ed3c:	103ffc1e 	bne	r2,zero,c00ed30 <__alt_data_end+0xfc00ed30>
 c00ed40:	94e1c83a 	sub	r16,r18,r19
 c00ed44:	80000e26 	beq	r16,zero,c00ed80 <___svfiprintf_internal_r+0xf0>
 c00ed48:	d8c01c17 	ldw	r3,112(sp)
 c00ed4c:	d8801b17 	ldw	r2,108(sp)
 c00ed50:	44c00015 	stw	r19,0(r8)
 c00ed54:	1c07883a 	add	r3,r3,r16
 c00ed58:	10800044 	addi	r2,r2,1
 c00ed5c:	d8c01c15 	stw	r3,112(sp)
 c00ed60:	44000115 	stw	r16,4(r8)
 c00ed64:	d8801b15 	stw	r2,108(sp)
 c00ed68:	00c001c4 	movi	r3,7
 c00ed6c:	18835c16 	blt	r3,r2,c00fae0 <___svfiprintf_internal_r+0xe50>
 c00ed70:	42000204 	addi	r8,r8,8
 c00ed74:	d9402617 	ldw	r5,152(sp)
 c00ed78:	2c0b883a 	add	r5,r5,r16
 c00ed7c:	d9402615 	stw	r5,152(sp)
 c00ed80:	90800007 	ldb	r2,0(r18)
 c00ed84:	1002fc26 	beq	r2,zero,c00f978 <___svfiprintf_internal_r+0xce8>
 c00ed88:	0023883a 	mov	r17,zero
 c00ed8c:	00bfffc4 	movi	r2,-1
 c00ed90:	0021883a 	mov	r16,zero
 c00ed94:	94c00044 	addi	r19,r18,1
 c00ed98:	90c00047 	ldb	r3,1(r18)
 c00ed9c:	dc402105 	stb	r17,132(sp)
 c00eda0:	d8001d85 	stb	zero,118(sp)
 c00eda4:	002b883a 	mov	r21,zero
 c00eda8:	d8802015 	stw	r2,128(sp)
 c00edac:	d8002515 	stw	zero,148(sp)
 c00edb0:	04801604 	movi	r18,88
 c00edb4:	05000244 	movi	r20,9
 c00edb8:	402f883a 	mov	r23,r8
 c00edbc:	8023883a 	mov	r17,r16
 c00edc0:	9cc00044 	addi	r19,r19,1
 c00edc4:	18bff804 	addi	r2,r3,-32
 c00edc8:	9081fb36 	bltu	r18,r2,c00f5b8 <___svfiprintf_internal_r+0x928>
 c00edcc:	100490ba 	slli	r2,r2,2
 c00edd0:	01030074 	movhi	r4,3073
 c00edd4:	213b7904 	addi	r4,r4,-4636
 c00edd8:	1105883a 	add	r2,r2,r4
 c00eddc:	10800017 	ldw	r2,0(r2)
 c00ede0:	1000683a 	jmp	r2
 c00ede4:	0c00efe4 	muli	r16,at,959
 c00ede8:	0c00f5b8 	rdprs	r16,at,982
 c00edec:	0c00f5b8 	rdprs	r16,at,982
 c00edf0:	0c00efd8 	cmpnei	r16,at,959
 c00edf4:	0c00f5b8 	rdprs	r16,at,982
 c00edf8:	0c00f5b8 	rdprs	r16,at,982
 c00edfc:	0c00f5b8 	rdprs	r16,at,982
 c00ee00:	0c00f5b8 	rdprs	r16,at,982
 c00ee04:	0c00f5b8 	rdprs	r16,at,982
 c00ee08:	0c00f5b8 	rdprs	r16,at,982
 c00ee0c:	0c00ef48 	cmpgei	r16,at,957
 c00ee10:	0c00f144 	addi	r16,at,965
 c00ee14:	0c00f5b8 	rdprs	r16,at,982
 c00ee18:	0c00ef70 	cmpltui	r16,at,957
 c00ee1c:	0c00f5f4 	orhi	r16,at,983
 c00ee20:	0c00f5b8 	rdprs	r16,at,982
 c00ee24:	0c00f5e8 	cmpgeui	r16,at,983
 c00ee28:	0c00f57c 	xorhi	r16,at,981
 c00ee2c:	0c00f57c 	xorhi	r16,at,981
 c00ee30:	0c00f57c 	xorhi	r16,at,981
 c00ee34:	0c00f57c 	xorhi	r16,at,981
 c00ee38:	0c00f57c 	xorhi	r16,at,981
 c00ee3c:	0c00f57c 	xorhi	r16,at,981
 c00ee40:	0c00f57c 	xorhi	r16,at,981
 c00ee44:	0c00f57c 	xorhi	r16,at,981
 c00ee48:	0c00f57c 	xorhi	r16,at,981
 c00ee4c:	0c00f5b8 	rdprs	r16,at,982
 c00ee50:	0c00f5b8 	rdprs	r16,at,982
 c00ee54:	0c00f5b8 	rdprs	r16,at,982
 c00ee58:	0c00f5b8 	rdprs	r16,at,982
 c00ee5c:	0c00f5b8 	rdprs	r16,at,982
 c00ee60:	0c00f5b8 	rdprs	r16,at,982
 c00ee64:	0c00f5b8 	rdprs	r16,at,982
 c00ee68:	0c00f5b8 	rdprs	r16,at,982
 c00ee6c:	0c00f5b8 	rdprs	r16,at,982
 c00ee70:	0c00f5b8 	rdprs	r16,at,982
 c00ee74:	0c00f500 	call	c00f50 <__alt_mem_onchip_memory2_0+0xc00f50>
 c00ee78:	0c00f5b8 	rdprs	r16,at,982
 c00ee7c:	0c00f5b8 	rdprs	r16,at,982
 c00ee80:	0c00f5b8 	rdprs	r16,at,982
 c00ee84:	0c00f5b8 	rdprs	r16,at,982
 c00ee88:	0c00f5b8 	rdprs	r16,at,982
 c00ee8c:	0c00f5b8 	rdprs	r16,at,982
 c00ee90:	0c00f5b8 	rdprs	r16,at,982
 c00ee94:	0c00f5b8 	rdprs	r16,at,982
 c00ee98:	0c00f5b8 	rdprs	r16,at,982
 c00ee9c:	0c00f5b8 	rdprs	r16,at,982
 c00eea0:	0c00f6b0 	cmpltui	r16,at,986
 c00eea4:	0c00f5b8 	rdprs	r16,at,982
 c00eea8:	0c00f5b8 	rdprs	r16,at,982
 c00eeac:	0c00f5b8 	rdprs	r16,at,982
 c00eeb0:	0c00f5b8 	rdprs	r16,at,982
 c00eeb4:	0c00f5b8 	rdprs	r16,at,982
 c00eeb8:	0c00f63c 	xorhi	r16,at,984
 c00eebc:	0c00f5b8 	rdprs	r16,at,982
 c00eec0:	0c00f5b8 	rdprs	r16,at,982
 c00eec4:	0c00f33c 	xorhi	r16,at,972
 c00eec8:	0c00f5b8 	rdprs	r16,at,982
 c00eecc:	0c00f5b8 	rdprs	r16,at,982
 c00eed0:	0c00f5b8 	rdprs	r16,at,982
 c00eed4:	0c00f5b8 	rdprs	r16,at,982
 c00eed8:	0c00f5b8 	rdprs	r16,at,982
 c00eedc:	0c00f5b8 	rdprs	r16,at,982
 c00eee0:	0c00f5b8 	rdprs	r16,at,982
 c00eee4:	0c00f5b8 	rdprs	r16,at,982
 c00eee8:	0c00f5b8 	rdprs	r16,at,982
 c00eeec:	0c00f5b8 	rdprs	r16,at,982
 c00eef0:	0c00f208 	cmpgei	r16,at,968
 c00eef4:	0c00f3ec 	andhi	r16,at,975
 c00eef8:	0c00f5b8 	rdprs	r16,at,982
 c00eefc:	0c00f5b8 	rdprs	r16,at,982
 c00ef00:	0c00f5b8 	rdprs	r16,at,982
 c00ef04:	0c00f3e0 	cmpeqi	r16,at,975
 c00ef08:	0c00f3ec 	andhi	r16,at,975
 c00ef0c:	0c00f5b8 	rdprs	r16,at,982
 c00ef10:	0c00f5b8 	rdprs	r16,at,982
 c00ef14:	0c00f3cc 	andi	r16,at,975
 c00ef18:	0c00f5b8 	rdprs	r16,at,982
 c00ef1c:	0c00f38c 	andi	r16,at,974
 c00ef20:	0c00f158 	cmpnei	r16,at,965
 c00ef24:	0c00ef7c 	xorhi	r16,at,957
 c00ef28:	0c00f4f4 	orhi	r16,at,979
 c00ef2c:	0c00f5b8 	rdprs	r16,at,982
 c00ef30:	0c00f4a0 	cmpeqi	r16,at,978
 c00ef34:	0c00f5b8 	rdprs	r16,at,982
 c00ef38:	0c00f0bc 	xorhi	r16,at,962
 c00ef3c:	0c00f5b8 	rdprs	r16,at,982
 c00ef40:	0c00f5b8 	rdprs	r16,at,982
 c00ef44:	0c00f008 	cmpgei	r16,at,960
 c00ef48:	d9002417 	ldw	r4,144(sp)
 c00ef4c:	d9402417 	ldw	r5,144(sp)
 c00ef50:	21000017 	ldw	r4,0(r4)
 c00ef54:	28800104 	addi	r2,r5,4
 c00ef58:	d9002515 	stw	r4,148(sp)
 c00ef5c:	20032b0e 	bge	r4,zero,c00fc0c <___svfiprintf_internal_r+0xf7c>
 c00ef60:	d8c02517 	ldw	r3,148(sp)
 c00ef64:	d8802415 	stw	r2,144(sp)
 c00ef68:	00c7c83a 	sub	r3,zero,r3
 c00ef6c:	d8c02515 	stw	r3,148(sp)
 c00ef70:	8c400114 	ori	r17,r17,4
 c00ef74:	98c00007 	ldb	r3,0(r19)
 c00ef78:	003f9106 	br	c00edc0 <__alt_data_end+0xfc00edc0>
 c00ef7c:	00800c04 	movi	r2,48
 c00ef80:	d9402417 	ldw	r5,144(sp)
 c00ef84:	d9002017 	ldw	r4,128(sp)
 c00ef88:	d8801d05 	stb	r2,116(sp)
 c00ef8c:	00801e04 	movi	r2,120
 c00ef90:	d8801d45 	stb	r2,117(sp)
 c00ef94:	d8001d85 	stb	zero,118(sp)
 c00ef98:	b811883a 	mov	r8,r23
 c00ef9c:	28c00104 	addi	r3,r5,4
 c00efa0:	2c800017 	ldw	r18,0(r5)
 c00efa4:	0029883a 	mov	r20,zero
 c00efa8:	88800094 	ori	r2,r17,2
 c00efac:	20036316 	blt	r4,zero,c00fd3c <___svfiprintf_internal_r+0x10ac>
 c00efb0:	00bfdfc4 	movi	r2,-129
 c00efb4:	88a0703a 	and	r16,r17,r2
 c00efb8:	d8c02415 	stw	r3,144(sp)
 c00efbc:	84000094 	ori	r16,r16,2
 c00efc0:	90031c26 	beq	r18,zero,c00fc34 <___svfiprintf_internal_r+0xfa4>
 c00efc4:	014300b4 	movhi	r5,3074
 c00efc8:	2961e804 	addi	r5,r5,-30816
 c00efcc:	002b883a 	mov	r21,zero
 c00efd0:	d9402915 	stw	r5,164(sp)
 c00efd4:	00002906 	br	c00f07c <___svfiprintf_internal_r+0x3ec>
 c00efd8:	8c400054 	ori	r17,r17,1
 c00efdc:	98c00007 	ldb	r3,0(r19)
 c00efe0:	003f7706 	br	c00edc0 <__alt_data_end+0xfc00edc0>
 c00efe4:	a8803fcc 	andi	r2,r21,255
 c00efe8:	1080201c 	xori	r2,r2,128
 c00efec:	10bfe004 	addi	r2,r2,-128
 c00eff0:	10032a1e 	bne	r2,zero,c00fc9c <___svfiprintf_internal_r+0x100c>
 c00eff4:	00c00044 	movi	r3,1
 c00eff8:	d8c02105 	stb	r3,132(sp)
 c00effc:	05400804 	movi	r21,32
 c00f000:	98c00007 	ldb	r3,0(r19)
 c00f004:	003f6e06 	br	c00edc0 <__alt_data_end+0xfc00edc0>
 c00f008:	8821883a 	mov	r16,r17
 c00f00c:	dc402103 	ldbu	r17,132(sp)
 c00f010:	b811883a 	mov	r8,r23
 c00f014:	8c403fcc 	andi	r17,r17,255
 c00f018:	8803f01e 	bne	r17,zero,c00ffdc <___svfiprintf_internal_r+0x134c>
 c00f01c:	008300b4 	movhi	r2,3074
 c00f020:	10a1e804 	addi	r2,r2,-30816
 c00f024:	d8802915 	stw	r2,164(sp)
 c00f028:	8080080c 	andi	r2,r16,32
 c00f02c:	1000cd26 	beq	r2,zero,c00f364 <___svfiprintf_internal_r+0x6d4>
 c00f030:	d9002417 	ldw	r4,144(sp)
 c00f034:	24800017 	ldw	r18,0(r4)
 c00f038:	25000117 	ldw	r20,4(r4)
 c00f03c:	21000204 	addi	r4,r4,8
 c00f040:	d9002415 	stw	r4,144(sp)
 c00f044:	8080004c 	andi	r2,r16,1
 c00f048:	1002c726 	beq	r2,zero,c00fb68 <___svfiprintf_internal_r+0xed8>
 c00f04c:	9504b03a 	or	r2,r18,r20
 c00f050:	1003061e 	bne	r2,zero,c00fc6c <___svfiprintf_internal_r+0xfdc>
 c00f054:	d9002017 	ldw	r4,128(sp)
 c00f058:	d8001d85 	stb	zero,118(sp)
 c00f05c:	20033e16 	blt	r4,zero,c00fd58 <___svfiprintf_internal_r+0x10c8>
 c00f060:	00bfdfc4 	movi	r2,-129
 c00f064:	80a0703a 	and	r16,r16,r2
 c00f068:	d9402017 	ldw	r5,128(sp)
 c00f06c:	002b883a 	mov	r21,zero
 c00f070:	28002826 	beq	r5,zero,c00f114 <___svfiprintf_internal_r+0x484>
 c00f074:	0025883a 	mov	r18,zero
 c00f078:	0029883a 	mov	r20,zero
 c00f07c:	d9002917 	ldw	r4,164(sp)
 c00f080:	dc401a04 	addi	r17,sp,104
 c00f084:	908003cc 	andi	r2,r18,15
 c00f088:	a006973a 	slli	r3,r20,28
 c00f08c:	2085883a 	add	r2,r4,r2
 c00f090:	9024d13a 	srli	r18,r18,4
 c00f094:	10800003 	ldbu	r2,0(r2)
 c00f098:	a028d13a 	srli	r20,r20,4
 c00f09c:	8c7fffc4 	addi	r17,r17,-1
 c00f0a0:	1ca4b03a 	or	r18,r3,r18
 c00f0a4:	88800005 	stb	r2,0(r17)
 c00f0a8:	9504b03a 	or	r2,r18,r20
 c00f0ac:	103ff51e 	bne	r2,zero,c00f084 <__alt_data_end+0xfc00f084>
 c00f0b0:	d8801e17 	ldw	r2,120(sp)
 c00f0b4:	1469c83a 	sub	r20,r2,r17
 c00f0b8:	00001906 	br	c00f120 <___svfiprintf_internal_r+0x490>
 c00f0bc:	8821883a 	mov	r16,r17
 c00f0c0:	dc402103 	ldbu	r17,132(sp)
 c00f0c4:	b811883a 	mov	r8,r23
 c00f0c8:	8c403fcc 	andi	r17,r17,255
 c00f0cc:	8803d01e 	bne	r17,zero,c010010 <___svfiprintf_internal_r+0x1380>
 c00f0d0:	8080080c 	andi	r2,r16,32
 c00f0d4:	10016126 	beq	r2,zero,c00f65c <___svfiprintf_internal_r+0x9cc>
 c00f0d8:	d9002417 	ldw	r4,144(sp)
 c00f0dc:	d9402017 	ldw	r5,128(sp)
 c00f0e0:	d8001d85 	stb	zero,118(sp)
 c00f0e4:	20c00204 	addi	r3,r4,8
 c00f0e8:	24800017 	ldw	r18,0(r4)
 c00f0ec:	25000117 	ldw	r20,4(r4)
 c00f0f0:	28030f16 	blt	r5,zero,c00fd30 <___svfiprintf_internal_r+0x10a0>
 c00f0f4:	013fdfc4 	movi	r4,-129
 c00f0f8:	9504b03a 	or	r2,r18,r20
 c00f0fc:	d8c02415 	stw	r3,144(sp)
 c00f100:	8120703a 	and	r16,r16,r4
 c00f104:	002b883a 	mov	r21,zero
 c00f108:	1000cd1e 	bne	r2,zero,c00f440 <___svfiprintf_internal_r+0x7b0>
 c00f10c:	d8c02017 	ldw	r3,128(sp)
 c00f110:	1803141e 	bne	r3,zero,c00fd64 <___svfiprintf_internal_r+0x10d4>
 c00f114:	d8002015 	stw	zero,128(sp)
 c00f118:	0029883a 	mov	r20,zero
 c00f11c:	dc401a04 	addi	r17,sp,104
 c00f120:	dc802017 	ldw	r18,128(sp)
 c00f124:	9500010e 	bge	r18,r20,c00f12c <___svfiprintf_internal_r+0x49c>
 c00f128:	a025883a 	mov	r18,r20
 c00f12c:	ad403fcc 	andi	r21,r21,255
 c00f130:	ad40201c 	xori	r21,r21,128
 c00f134:	ad7fe004 	addi	r21,r21,-128
 c00f138:	a8003f26 	beq	r21,zero,c00f238 <___svfiprintf_internal_r+0x5a8>
 c00f13c:	94800044 	addi	r18,r18,1
 c00f140:	00003d06 	br	c00f238 <___svfiprintf_internal_r+0x5a8>
 c00f144:	00c00044 	movi	r3,1
 c00f148:	d8c02105 	stb	r3,132(sp)
 c00f14c:	05400ac4 	movi	r21,43
 c00f150:	98c00007 	ldb	r3,0(r19)
 c00f154:	003f1a06 	br	c00edc0 <__alt_data_end+0xfc00edc0>
 c00f158:	8821883a 	mov	r16,r17
 c00f15c:	dc402103 	ldbu	r17,132(sp)
 c00f160:	b811883a 	mov	r8,r23
 c00f164:	8c403fcc 	andi	r17,r17,255
 c00f168:	8803a71e 	bne	r17,zero,c010008 <___svfiprintf_internal_r+0x1378>
 c00f16c:	8080080c 	andi	r2,r16,32
 c00f170:	10015726 	beq	r2,zero,c00f6d0 <___svfiprintf_internal_r+0xa40>
 c00f174:	d8c02417 	ldw	r3,144(sp)
 c00f178:	d9002017 	ldw	r4,128(sp)
 c00f17c:	d8001d85 	stb	zero,118(sp)
 c00f180:	18800204 	addi	r2,r3,8
 c00f184:	1c800017 	ldw	r18,0(r3)
 c00f188:	1d000117 	ldw	r20,4(r3)
 c00f18c:	2002db16 	blt	r4,zero,c00fcfc <___svfiprintf_internal_r+0x106c>
 c00f190:	013fdfc4 	movi	r4,-129
 c00f194:	9506b03a 	or	r3,r18,r20
 c00f198:	d8802415 	stw	r2,144(sp)
 c00f19c:	8120703a 	and	r16,r16,r4
 c00f1a0:	18015826 	beq	r3,zero,c00f704 <___svfiprintf_internal_r+0xa74>
 c00f1a4:	002b883a 	mov	r21,zero
 c00f1a8:	dc401a04 	addi	r17,sp,104
 c00f1ac:	9006d0fa 	srli	r3,r18,3
 c00f1b0:	a008977a 	slli	r4,r20,29
 c00f1b4:	a028d0fa 	srli	r20,r20,3
 c00f1b8:	948001cc 	andi	r18,r18,7
 c00f1bc:	90800c04 	addi	r2,r18,48
 c00f1c0:	8c7fffc4 	addi	r17,r17,-1
 c00f1c4:	20e4b03a 	or	r18,r4,r3
 c00f1c8:	88800005 	stb	r2,0(r17)
 c00f1cc:	9506b03a 	or	r3,r18,r20
 c00f1d0:	183ff61e 	bne	r3,zero,c00f1ac <__alt_data_end+0xfc00f1ac>
 c00f1d4:	80c0004c 	andi	r3,r16,1
 c00f1d8:	18028926 	beq	r3,zero,c00fc00 <___svfiprintf_internal_r+0xf70>
 c00f1dc:	10803fcc 	andi	r2,r2,255
 c00f1e0:	1080201c 	xori	r2,r2,128
 c00f1e4:	10bfe004 	addi	r2,r2,-128
 c00f1e8:	00c00c04 	movi	r3,48
 c00f1ec:	10ffb026 	beq	r2,r3,c00f0b0 <__alt_data_end+0xfc00f0b0>
 c00f1f0:	88ffffc5 	stb	r3,-1(r17)
 c00f1f4:	d8c01e17 	ldw	r3,120(sp)
 c00f1f8:	88bfffc4 	addi	r2,r17,-1
 c00f1fc:	1023883a 	mov	r17,r2
 c00f200:	18a9c83a 	sub	r20,r3,r2
 c00f204:	003fc606 	br	c00f120 <__alt_data_end+0xfc00f120>
 c00f208:	d8c02417 	ldw	r3,144(sp)
 c00f20c:	04800044 	movi	r18,1
 c00f210:	8821883a 	mov	r16,r17
 c00f214:	18800017 	ldw	r2,0(r3)
 c00f218:	18c00104 	addi	r3,r3,4
 c00f21c:	b811883a 	mov	r8,r23
 c00f220:	d8001d85 	stb	zero,118(sp)
 c00f224:	d8801005 	stb	r2,64(sp)
 c00f228:	d8c02415 	stw	r3,144(sp)
 c00f22c:	9029883a 	mov	r20,r18
 c00f230:	dc401004 	addi	r17,sp,64
 c00f234:	d8002015 	stw	zero,128(sp)
 c00f238:	80c0008c 	andi	r3,r16,2
 c00f23c:	d8c02115 	stw	r3,132(sp)
 c00f240:	18000126 	beq	r3,zero,c00f248 <___svfiprintf_internal_r+0x5b8>
 c00f244:	94800084 	addi	r18,r18,2
 c00f248:	80c0210c 	andi	r3,r16,132
 c00f24c:	d8c02215 	stw	r3,136(sp)
 c00f250:	1801321e 	bne	r3,zero,c00f71c <___svfiprintf_internal_r+0xa8c>
 c00f254:	d9002517 	ldw	r4,148(sp)
 c00f258:	24b9c83a 	sub	fp,r4,r18
 c00f25c:	07012f0e 	bge	zero,fp,c00f71c <___svfiprintf_internal_r+0xa8c>
 c00f260:	02400404 	movi	r9,16
 c00f264:	d8c01c17 	ldw	r3,112(sp)
 c00f268:	d8801b17 	ldw	r2,108(sp)
 c00f26c:	4f03250e 	bge	r9,fp,c00ff04 <___svfiprintf_internal_r+0x1274>
 c00f270:	010300b4 	movhi	r4,3074
 c00f274:	21225504 	addi	r4,r4,-30380
 c00f278:	dc002a15 	stw	r16,168(sp)
 c00f27c:	dc402b15 	stw	r17,172(sp)
 c00f280:	d9002815 	stw	r4,160(sp)
 c00f284:	e023883a 	mov	r17,fp
 c00f288:	482f883a 	mov	r23,r9
 c00f28c:	9839883a 	mov	fp,r19
 c00f290:	054001c4 	movi	r21,7
 c00f294:	9027883a 	mov	r19,r18
 c00f298:	dc002717 	ldw	r16,156(sp)
 c00f29c:	dc802317 	ldw	r18,140(sp)
 c00f2a0:	00000306 	br	c00f2b0 <___svfiprintf_internal_r+0x620>
 c00f2a4:	8c7ffc04 	addi	r17,r17,-16
 c00f2a8:	42000204 	addi	r8,r8,8
 c00f2ac:	bc40130e 	bge	r23,r17,c00f2fc <___svfiprintf_internal_r+0x66c>
 c00f2b0:	014300b4 	movhi	r5,3074
 c00f2b4:	18c00404 	addi	r3,r3,16
 c00f2b8:	10800044 	addi	r2,r2,1
 c00f2bc:	29625504 	addi	r5,r5,-30380
 c00f2c0:	41400015 	stw	r5,0(r8)
 c00f2c4:	45c00115 	stw	r23,4(r8)
 c00f2c8:	d8c01c15 	stw	r3,112(sp)
 c00f2cc:	d8801b15 	stw	r2,108(sp)
 c00f2d0:	a8bff40e 	bge	r21,r2,c00f2a4 <__alt_data_end+0xfc00f2a4>
 c00f2d4:	d9801a04 	addi	r6,sp,104
 c00f2d8:	900b883a 	mov	r5,r18
 c00f2dc:	8009883a 	mov	r4,r16
 c00f2e0:	c00eac00 	call	c00eac0 <__ssprint_r>
 c00f2e4:	1001aa1e 	bne	r2,zero,c00f990 <___svfiprintf_internal_r+0xd00>
 c00f2e8:	8c7ffc04 	addi	r17,r17,-16
 c00f2ec:	d8c01c17 	ldw	r3,112(sp)
 c00f2f0:	d8801b17 	ldw	r2,108(sp)
 c00f2f4:	d811883a 	mov	r8,sp
 c00f2f8:	bc7fed16 	blt	r23,r17,c00f2b0 <__alt_data_end+0xfc00f2b0>
 c00f2fc:	9825883a 	mov	r18,r19
 c00f300:	dc002a17 	ldw	r16,168(sp)
 c00f304:	e027883a 	mov	r19,fp
 c00f308:	8839883a 	mov	fp,r17
 c00f30c:	dc402b17 	ldw	r17,172(sp)
 c00f310:	d9002817 	ldw	r4,160(sp)
 c00f314:	e0c7883a 	add	r3,fp,r3
 c00f318:	10800044 	addi	r2,r2,1
 c00f31c:	41000015 	stw	r4,0(r8)
 c00f320:	47000115 	stw	fp,4(r8)
 c00f324:	d8c01c15 	stw	r3,112(sp)
 c00f328:	d8801b15 	stw	r2,108(sp)
 c00f32c:	010001c4 	movi	r4,7
 c00f330:	20821616 	blt	r4,r2,c00fb8c <___svfiprintf_internal_r+0xefc>
 c00f334:	42000204 	addi	r8,r8,8
 c00f338:	0000fa06 	br	c00f724 <___svfiprintf_internal_r+0xa94>
 c00f33c:	8821883a 	mov	r16,r17
 c00f340:	dc402103 	ldbu	r17,132(sp)
 c00f344:	b811883a 	mov	r8,r23
 c00f348:	8c403fcc 	andi	r17,r17,255
 c00f34c:	8803361e 	bne	r17,zero,c010028 <___svfiprintf_internal_r+0x1398>
 c00f350:	014300b4 	movhi	r5,3074
 c00f354:	2961e304 	addi	r5,r5,-30836
 c00f358:	d9402915 	stw	r5,164(sp)
 c00f35c:	8080080c 	andi	r2,r16,32
 c00f360:	103f331e 	bne	r2,zero,c00f030 <__alt_data_end+0xfc00f030>
 c00f364:	8080040c 	andi	r2,r16,16
 c00f368:	1002551e 	bne	r2,zero,c00fcc0 <___svfiprintf_internal_r+0x1030>
 c00f36c:	8080100c 	andi	r2,r16,64
 c00f370:	1002a626 	beq	r2,zero,c00fe0c <___svfiprintf_internal_r+0x117c>
 c00f374:	d8802417 	ldw	r2,144(sp)
 c00f378:	0029883a 	mov	r20,zero
 c00f37c:	1480000b 	ldhu	r18,0(r2)
 c00f380:	10800104 	addi	r2,r2,4
 c00f384:	d8802415 	stw	r2,144(sp)
 c00f388:	003f2e06 	br	c00f044 <__alt_data_end+0xfc00f044>
 c00f38c:	8821883a 	mov	r16,r17
 c00f390:	dc402103 	ldbu	r17,132(sp)
 c00f394:	b811883a 	mov	r8,r23
 c00f398:	8c403fcc 	andi	r17,r17,255
 c00f39c:	88030b1e 	bne	r17,zero,c00ffcc <___svfiprintf_internal_r+0x133c>
 c00f3a0:	8080080c 	andi	r2,r16,32
 c00f3a4:	1002271e 	bne	r2,zero,c00fc44 <___svfiprintf_internal_r+0xfb4>
 c00f3a8:	8080040c 	andi	r2,r16,16
 c00f3ac:	10028e26 	beq	r2,zero,c00fde8 <___svfiprintf_internal_r+0x1158>
 c00f3b0:	d8c02417 	ldw	r3,144(sp)
 c00f3b4:	d9002617 	ldw	r4,152(sp)
 c00f3b8:	18800017 	ldw	r2,0(r3)
 c00f3bc:	18c00104 	addi	r3,r3,4
 c00f3c0:	d8c02415 	stw	r3,144(sp)
 c00f3c4:	11000015 	stw	r4,0(r2)
 c00f3c8:	003e5306 	br	c00ed18 <__alt_data_end+0xfc00ed18>
 c00f3cc:	98c00007 	ldb	r3,0(r19)
 c00f3d0:	01401b04 	movi	r5,108
 c00f3d4:	19424f26 	beq	r3,r5,c00fd14 <___svfiprintf_internal_r+0x1084>
 c00f3d8:	8c400414 	ori	r17,r17,16
 c00f3dc:	003e7806 	br	c00edc0 <__alt_data_end+0xfc00edc0>
 c00f3e0:	8c401014 	ori	r17,r17,64
 c00f3e4:	98c00007 	ldb	r3,0(r19)
 c00f3e8:	003e7506 	br	c00edc0 <__alt_data_end+0xfc00edc0>
 c00f3ec:	8821883a 	mov	r16,r17
 c00f3f0:	dc402103 	ldbu	r17,132(sp)
 c00f3f4:	b811883a 	mov	r8,r23
 c00f3f8:	8c403fcc 	andi	r17,r17,255
 c00f3fc:	8802fe1e 	bne	r17,zero,c00fff8 <___svfiprintf_internal_r+0x1368>
 c00f400:	8080080c 	andi	r2,r16,32
 c00f404:	10004626 	beq	r2,zero,c00f520 <___svfiprintf_internal_r+0x890>
 c00f408:	d9002417 	ldw	r4,144(sp)
 c00f40c:	20800117 	ldw	r2,4(r4)
 c00f410:	24800017 	ldw	r18,0(r4)
 c00f414:	21000204 	addi	r4,r4,8
 c00f418:	d9002415 	stw	r4,144(sp)
 c00f41c:	1029883a 	mov	r20,r2
 c00f420:	10004a16 	blt	r2,zero,c00f54c <___svfiprintf_internal_r+0x8bc>
 c00f424:	d9002017 	ldw	r4,128(sp)
 c00f428:	dd401d83 	ldbu	r21,118(sp)
 c00f42c:	2001eb16 	blt	r4,zero,c00fbdc <___svfiprintf_internal_r+0xf4c>
 c00f430:	00ffdfc4 	movi	r3,-129
 c00f434:	9504b03a 	or	r2,r18,r20
 c00f438:	80e0703a 	and	r16,r16,r3
 c00f43c:	103f3326 	beq	r2,zero,c00f10c <__alt_data_end+0xfc00f10c>
 c00f440:	a0009426 	beq	r20,zero,c00f694 <___svfiprintf_internal_r+0xa04>
 c00f444:	dc401a04 	addi	r17,sp,104
 c00f448:	402f883a 	mov	r23,r8
 c00f44c:	9009883a 	mov	r4,r18
 c00f450:	a00b883a 	mov	r5,r20
 c00f454:	01800284 	movi	r6,10
 c00f458:	000f883a 	mov	r7,zero
 c00f45c:	c01277c0 	call	c01277c <__umoddi3>
 c00f460:	10800c04 	addi	r2,r2,48
 c00f464:	8c7fffc4 	addi	r17,r17,-1
 c00f468:	9009883a 	mov	r4,r18
 c00f46c:	a00b883a 	mov	r5,r20
 c00f470:	88800005 	stb	r2,0(r17)
 c00f474:	01800284 	movi	r6,10
 c00f478:	000f883a 	mov	r7,zero
 c00f47c:	c0121800 	call	c012180 <__udivdi3>
 c00f480:	1025883a 	mov	r18,r2
 c00f484:	10c4b03a 	or	r2,r2,r3
 c00f488:	1829883a 	mov	r20,r3
 c00f48c:	103fef1e 	bne	r2,zero,c00f44c <__alt_data_end+0xfc00f44c>
 c00f490:	d9001e17 	ldw	r4,120(sp)
 c00f494:	b811883a 	mov	r8,r23
 c00f498:	2469c83a 	sub	r20,r4,r17
 c00f49c:	003f2006 	br	c00f120 <__alt_data_end+0xfc00f120>
 c00f4a0:	d8802417 	ldw	r2,144(sp)
 c00f4a4:	8821883a 	mov	r16,r17
 c00f4a8:	d8001d85 	stb	zero,118(sp)
 c00f4ac:	14400017 	ldw	r17,0(r2)
 c00f4b0:	b811883a 	mov	r8,r23
 c00f4b4:	15c00104 	addi	r23,r2,4
 c00f4b8:	88026c26 	beq	r17,zero,c00fe6c <___svfiprintf_internal_r+0x11dc>
 c00f4bc:	d8c02017 	ldw	r3,128(sp)
 c00f4c0:	18025f16 	blt	r3,zero,c00fe40 <___svfiprintf_internal_r+0x11b0>
 c00f4c4:	180d883a 	mov	r6,r3
 c00f4c8:	000b883a 	mov	r5,zero
 c00f4cc:	8809883a 	mov	r4,r17
 c00f4d0:	da002d15 	stw	r8,180(sp)
 c00f4d4:	c00cd140 	call	c00cd14 <memchr>
 c00f4d8:	da002d17 	ldw	r8,180(sp)
 c00f4dc:	1002a526 	beq	r2,zero,c00ff74 <___svfiprintf_internal_r+0x12e4>
 c00f4e0:	1469c83a 	sub	r20,r2,r17
 c00f4e4:	dd401d83 	ldbu	r21,118(sp)
 c00f4e8:	ddc02415 	stw	r23,144(sp)
 c00f4ec:	d8002015 	stw	zero,128(sp)
 c00f4f0:	003f0b06 	br	c00f120 <__alt_data_end+0xfc00f120>
 c00f4f4:	8c400814 	ori	r17,r17,32
 c00f4f8:	98c00007 	ldb	r3,0(r19)
 c00f4fc:	003e3006 	br	c00edc0 <__alt_data_end+0xfc00edc0>
 c00f500:	8821883a 	mov	r16,r17
 c00f504:	dc402103 	ldbu	r17,132(sp)
 c00f508:	b811883a 	mov	r8,r23
 c00f50c:	8c403fcc 	andi	r17,r17,255
 c00f510:	8802b01e 	bne	r17,zero,c00ffd4 <___svfiprintf_internal_r+0x1344>
 c00f514:	84000414 	ori	r16,r16,16
 c00f518:	8080080c 	andi	r2,r16,32
 c00f51c:	103fba1e 	bne	r2,zero,c00f408 <__alt_data_end+0xfc00f408>
 c00f520:	8080040c 	andi	r2,r16,16
 c00f524:	1001df1e 	bne	r2,zero,c00fca4 <___svfiprintf_internal_r+0x1014>
 c00f528:	8080100c 	andi	r2,r16,64
 c00f52c:	10023d26 	beq	r2,zero,c00fe24 <___svfiprintf_internal_r+0x1194>
 c00f530:	d8802417 	ldw	r2,144(sp)
 c00f534:	1480000f 	ldh	r18,0(r2)
 c00f538:	10800104 	addi	r2,r2,4
 c00f53c:	d8802415 	stw	r2,144(sp)
 c00f540:	9029d7fa 	srai	r20,r18,31
 c00f544:	a005883a 	mov	r2,r20
 c00f548:	103fb60e 	bge	r2,zero,c00f424 <__alt_data_end+0xfc00f424>
 c00f54c:	d9402017 	ldw	r5,128(sp)
 c00f550:	04a5c83a 	sub	r18,zero,r18
 c00f554:	05400b44 	movi	r21,45
 c00f558:	9004c03a 	cmpne	r2,r18,zero
 c00f55c:	0529c83a 	sub	r20,zero,r20
 c00f560:	dd401d85 	stb	r21,118(sp)
 c00f564:	a0a9c83a 	sub	r20,r20,r2
 c00f568:	28026c16 	blt	r5,zero,c00ff1c <___svfiprintf_internal_r+0x128c>
 c00f56c:	00bfdfc4 	movi	r2,-129
 c00f570:	80a0703a 	and	r16,r16,r2
 c00f574:	a03fb31e 	bne	r20,zero,c00f444 <__alt_data_end+0xfc00f444>
 c00f578:	00004606 	br	c00f694 <___svfiprintf_internal_r+0xa04>
 c00f57c:	9839883a 	mov	fp,r19
 c00f580:	d8002515 	stw	zero,148(sp)
 c00f584:	1c3ff404 	addi	r16,r3,-48
 c00f588:	0009883a 	mov	r4,zero
 c00f58c:	01400284 	movi	r5,10
 c00f590:	c004de00 	call	c004de0 <__mulsi3>
 c00f594:	e0c00007 	ldb	r3,0(fp)
 c00f598:	8089883a 	add	r4,r16,r2
 c00f59c:	9cc00044 	addi	r19,r19,1
 c00f5a0:	1c3ff404 	addi	r16,r3,-48
 c00f5a4:	9839883a 	mov	fp,r19
 c00f5a8:	a43ff82e 	bgeu	r20,r16,c00f58c <__alt_data_end+0xfc00f58c>
 c00f5ac:	d9002515 	stw	r4,148(sp)
 c00f5b0:	18bff804 	addi	r2,r3,-32
 c00f5b4:	90be052e 	bgeu	r18,r2,c00edcc <__alt_data_end+0xfc00edcc>
 c00f5b8:	8821883a 	mov	r16,r17
 c00f5bc:	dc402103 	ldbu	r17,132(sp)
 c00f5c0:	b811883a 	mov	r8,r23
 c00f5c4:	8c403fcc 	andi	r17,r17,255
 c00f5c8:	88028d1e 	bne	r17,zero,c010000 <___svfiprintf_internal_r+0x1370>
 c00f5cc:	1800ea26 	beq	r3,zero,c00f978 <___svfiprintf_internal_r+0xce8>
 c00f5d0:	04800044 	movi	r18,1
 c00f5d4:	d8c01005 	stb	r3,64(sp)
 c00f5d8:	d8001d85 	stb	zero,118(sp)
 c00f5dc:	9029883a 	mov	r20,r18
 c00f5e0:	dc401004 	addi	r17,sp,64
 c00f5e4:	003f1306 	br	c00f234 <__alt_data_end+0xfc00f234>
 c00f5e8:	8c402014 	ori	r17,r17,128
 c00f5ec:	98c00007 	ldb	r3,0(r19)
 c00f5f0:	003df306 	br	c00edc0 <__alt_data_end+0xfc00edc0>
 c00f5f4:	98c00007 	ldb	r3,0(r19)
 c00f5f8:	01000a84 	movi	r4,42
 c00f5fc:	9f000044 	addi	fp,r19,1
 c00f600:	19026326 	beq	r3,r4,c00ff90 <___svfiprintf_internal_r+0x1300>
 c00f604:	1c3ff404 	addi	r16,r3,-48
 c00f608:	0009883a 	mov	r4,zero
 c00f60c:	a4025636 	bltu	r20,r16,c00ff68 <___svfiprintf_internal_r+0x12d8>
 c00f610:	01400284 	movi	r5,10
 c00f614:	c004de00 	call	c004de0 <__mulsi3>
 c00f618:	e0c00007 	ldb	r3,0(fp)
 c00f61c:	1409883a 	add	r4,r2,r16
 c00f620:	e4c00044 	addi	r19,fp,1
 c00f624:	1c3ff404 	addi	r16,r3,-48
 c00f628:	9839883a 	mov	fp,r19
 c00f62c:	a43ff82e 	bgeu	r20,r16,c00f610 <__alt_data_end+0xfc00f610>
 c00f630:	20020c16 	blt	r4,zero,c00fe64 <___svfiprintf_internal_r+0x11d4>
 c00f634:	d9002015 	stw	r4,128(sp)
 c00f638:	003de206 	br	c00edc4 <__alt_data_end+0xfc00edc4>
 c00f63c:	8821883a 	mov	r16,r17
 c00f640:	dc402103 	ldbu	r17,132(sp)
 c00f644:	b811883a 	mov	r8,r23
 c00f648:	8c403fcc 	andi	r17,r17,255
 c00f64c:	8802721e 	bne	r17,zero,c010018 <___svfiprintf_internal_r+0x1388>
 c00f650:	84000414 	ori	r16,r16,16
 c00f654:	8080080c 	andi	r2,r16,32
 c00f658:	103e9f1e 	bne	r2,zero,c00f0d8 <__alt_data_end+0xfc00f0d8>
 c00f65c:	8080040c 	andi	r2,r16,16
 c00f660:	10015326 	beq	r2,zero,c00fbb0 <___svfiprintf_internal_r+0xf20>
 c00f664:	d8c02417 	ldw	r3,144(sp)
 c00f668:	d9002017 	ldw	r4,128(sp)
 c00f66c:	d8001d85 	stb	zero,118(sp)
 c00f670:	18800104 	addi	r2,r3,4
 c00f674:	1c800017 	ldw	r18,0(r3)
 c00f678:	0029883a 	mov	r20,zero
 c00f67c:	20015516 	blt	r4,zero,c00fbd4 <___svfiprintf_internal_r+0xf44>
 c00f680:	00ffdfc4 	movi	r3,-129
 c00f684:	d8802415 	stw	r2,144(sp)
 c00f688:	80e0703a 	and	r16,r16,r3
 c00f68c:	002b883a 	mov	r21,zero
 c00f690:	903e9e26 	beq	r18,zero,c00f10c <__alt_data_end+0xfc00f10c>
 c00f694:	00800244 	movi	r2,9
 c00f698:	14bf6a36 	bltu	r2,r18,c00f444 <__alt_data_end+0xfc00f444>
 c00f69c:	94800c04 	addi	r18,r18,48
 c00f6a0:	dc8019c5 	stb	r18,103(sp)
 c00f6a4:	dd002c17 	ldw	r20,176(sp)
 c00f6a8:	dc4019c4 	addi	r17,sp,103
 c00f6ac:	003e9c06 	br	c00f120 <__alt_data_end+0xfc00f120>
 c00f6b0:	8821883a 	mov	r16,r17
 c00f6b4:	dc402103 	ldbu	r17,132(sp)
 c00f6b8:	b811883a 	mov	r8,r23
 c00f6bc:	8c403fcc 	andi	r17,r17,255
 c00f6c0:	8802571e 	bne	r17,zero,c010020 <___svfiprintf_internal_r+0x1390>
 c00f6c4:	84000414 	ori	r16,r16,16
 c00f6c8:	8080080c 	andi	r2,r16,32
 c00f6cc:	103ea91e 	bne	r2,zero,c00f174 <__alt_data_end+0xfc00f174>
 c00f6d0:	8080040c 	andi	r2,r16,16
 c00f6d4:	10018026 	beq	r2,zero,c00fcd8 <___svfiprintf_internal_r+0x1048>
 c00f6d8:	d9402417 	ldw	r5,144(sp)
 c00f6dc:	d8c02017 	ldw	r3,128(sp)
 c00f6e0:	d8001d85 	stb	zero,118(sp)
 c00f6e4:	28800104 	addi	r2,r5,4
 c00f6e8:	2c800017 	ldw	r18,0(r5)
 c00f6ec:	0029883a 	mov	r20,zero
 c00f6f0:	18018216 	blt	r3,zero,c00fcfc <___svfiprintf_internal_r+0x106c>
 c00f6f4:	00ffdfc4 	movi	r3,-129
 c00f6f8:	d8802415 	stw	r2,144(sp)
 c00f6fc:	80e0703a 	and	r16,r16,r3
 c00f700:	903ea81e 	bne	r18,zero,c00f1a4 <__alt_data_end+0xfc00f1a4>
 c00f704:	d8802017 	ldw	r2,128(sp)
 c00f708:	002b883a 	mov	r21,zero
 c00f70c:	1001f226 	beq	r2,zero,c00fed8 <___svfiprintf_internal_r+0x1248>
 c00f710:	0025883a 	mov	r18,zero
 c00f714:	0029883a 	mov	r20,zero
 c00f718:	003ea306 	br	c00f1a8 <__alt_data_end+0xfc00f1a8>
 c00f71c:	d8c01c17 	ldw	r3,112(sp)
 c00f720:	d8801b17 	ldw	r2,108(sp)
 c00f724:	d9001d87 	ldb	r4,118(sp)
 c00f728:	20000b26 	beq	r4,zero,c00f758 <___svfiprintf_internal_r+0xac8>
 c00f72c:	d9001d84 	addi	r4,sp,118
 c00f730:	18c00044 	addi	r3,r3,1
 c00f734:	10800044 	addi	r2,r2,1
 c00f738:	41000015 	stw	r4,0(r8)
 c00f73c:	01000044 	movi	r4,1
 c00f740:	41000115 	stw	r4,4(r8)
 c00f744:	d8c01c15 	stw	r3,112(sp)
 c00f748:	d8801b15 	stw	r2,108(sp)
 c00f74c:	010001c4 	movi	r4,7
 c00f750:	2080f316 	blt	r4,r2,c00fb20 <___svfiprintf_internal_r+0xe90>
 c00f754:	42000204 	addi	r8,r8,8
 c00f758:	d9402117 	ldw	r5,132(sp)
 c00f75c:	28000b26 	beq	r5,zero,c00f78c <___svfiprintf_internal_r+0xafc>
 c00f760:	d9001d04 	addi	r4,sp,116
 c00f764:	18c00084 	addi	r3,r3,2
 c00f768:	10800044 	addi	r2,r2,1
 c00f76c:	41000015 	stw	r4,0(r8)
 c00f770:	01000084 	movi	r4,2
 c00f774:	41000115 	stw	r4,4(r8)
 c00f778:	d8c01c15 	stw	r3,112(sp)
 c00f77c:	d8801b15 	stw	r2,108(sp)
 c00f780:	010001c4 	movi	r4,7
 c00f784:	2080ef16 	blt	r4,r2,c00fb44 <___svfiprintf_internal_r+0xeb4>
 c00f788:	42000204 	addi	r8,r8,8
 c00f78c:	d9402217 	ldw	r5,136(sp)
 c00f790:	01002004 	movi	r4,128
 c00f794:	29008f26 	beq	r5,r4,c00f9d4 <___svfiprintf_internal_r+0xd44>
 c00f798:	d9002017 	ldw	r4,128(sp)
 c00f79c:	252fc83a 	sub	r23,r4,r20
 c00f7a0:	05c0310e 	bge	zero,r23,c00f868 <___svfiprintf_internal_r+0xbd8>
 c00f7a4:	07000404 	movi	fp,16
 c00f7a8:	e5c17d0e 	bge	fp,r23,c00fda0 <___svfiprintf_internal_r+0x1110>
 c00f7ac:	010300b4 	movhi	r4,3074
 c00f7b0:	21225104 	addi	r4,r4,-30396
 c00f7b4:	dc002015 	stw	r16,128(sp)
 c00f7b8:	dc402215 	stw	r17,136(sp)
 c00f7bc:	d9002115 	stw	r4,132(sp)
 c00f7c0:	b823883a 	mov	r17,r23
 c00f7c4:	054001c4 	movi	r21,7
 c00f7c8:	982f883a 	mov	r23,r19
 c00f7cc:	dc002717 	ldw	r16,156(sp)
 c00f7d0:	9027883a 	mov	r19,r18
 c00f7d4:	dc802317 	ldw	r18,140(sp)
 c00f7d8:	00000306 	br	c00f7e8 <___svfiprintf_internal_r+0xb58>
 c00f7dc:	8c7ffc04 	addi	r17,r17,-16
 c00f7e0:	42000204 	addi	r8,r8,8
 c00f7e4:	e440110e 	bge	fp,r17,c00f82c <___svfiprintf_internal_r+0xb9c>
 c00f7e8:	18c00404 	addi	r3,r3,16
 c00f7ec:	10800044 	addi	r2,r2,1
 c00f7f0:	45800015 	stw	r22,0(r8)
 c00f7f4:	47000115 	stw	fp,4(r8)
 c00f7f8:	d8c01c15 	stw	r3,112(sp)
 c00f7fc:	d8801b15 	stw	r2,108(sp)
 c00f800:	a8bff60e 	bge	r21,r2,c00f7dc <__alt_data_end+0xfc00f7dc>
 c00f804:	d9801a04 	addi	r6,sp,104
 c00f808:	900b883a 	mov	r5,r18
 c00f80c:	8009883a 	mov	r4,r16
 c00f810:	c00eac00 	call	c00eac0 <__ssprint_r>
 c00f814:	10005e1e 	bne	r2,zero,c00f990 <___svfiprintf_internal_r+0xd00>
 c00f818:	8c7ffc04 	addi	r17,r17,-16
 c00f81c:	d8c01c17 	ldw	r3,112(sp)
 c00f820:	d8801b17 	ldw	r2,108(sp)
 c00f824:	d811883a 	mov	r8,sp
 c00f828:	e47fef16 	blt	fp,r17,c00f7e8 <__alt_data_end+0xfc00f7e8>
 c00f82c:	9825883a 	mov	r18,r19
 c00f830:	dc002017 	ldw	r16,128(sp)
 c00f834:	b827883a 	mov	r19,r23
 c00f838:	882f883a 	mov	r23,r17
 c00f83c:	dc402217 	ldw	r17,136(sp)
 c00f840:	d9402117 	ldw	r5,132(sp)
 c00f844:	1dc7883a 	add	r3,r3,r23
 c00f848:	10800044 	addi	r2,r2,1
 c00f84c:	41400015 	stw	r5,0(r8)
 c00f850:	45c00115 	stw	r23,4(r8)
 c00f854:	d8c01c15 	stw	r3,112(sp)
 c00f858:	d8801b15 	stw	r2,108(sp)
 c00f85c:	010001c4 	movi	r4,7
 c00f860:	2080a616 	blt	r4,r2,c00fafc <___svfiprintf_internal_r+0xe6c>
 c00f864:	42000204 	addi	r8,r8,8
 c00f868:	a0c7883a 	add	r3,r20,r3
 c00f86c:	10800044 	addi	r2,r2,1
 c00f870:	44400015 	stw	r17,0(r8)
 c00f874:	45000115 	stw	r20,4(r8)
 c00f878:	d8c01c15 	stw	r3,112(sp)
 c00f87c:	d8801b15 	stw	r2,108(sp)
 c00f880:	010001c4 	movi	r4,7
 c00f884:	20808816 	blt	r4,r2,c00faa8 <___svfiprintf_internal_r+0xe18>
 c00f888:	42000204 	addi	r8,r8,8
 c00f88c:	8400010c 	andi	r16,r16,4
 c00f890:	80002c26 	beq	r16,zero,c00f944 <___svfiprintf_internal_r+0xcb4>
 c00f894:	d8802517 	ldw	r2,148(sp)
 c00f898:	14a1c83a 	sub	r16,r2,r18
 c00f89c:	0400290e 	bge	zero,r16,c00f944 <___svfiprintf_internal_r+0xcb4>
 c00f8a0:	04400404 	movi	r17,16
 c00f8a4:	d8801b17 	ldw	r2,108(sp)
 c00f8a8:	8c01a70e 	bge	r17,r16,c00ff48 <___svfiprintf_internal_r+0x12b8>
 c00f8ac:	014300b4 	movhi	r5,3074
 c00f8b0:	29625504 	addi	r5,r5,-30380
 c00f8b4:	d9402815 	stw	r5,160(sp)
 c00f8b8:	050001c4 	movi	r20,7
 c00f8bc:	dd402717 	ldw	r21,156(sp)
 c00f8c0:	ddc02317 	ldw	r23,140(sp)
 c00f8c4:	00000306 	br	c00f8d4 <___svfiprintf_internal_r+0xc44>
 c00f8c8:	843ffc04 	addi	r16,r16,-16
 c00f8cc:	42000204 	addi	r8,r8,8
 c00f8d0:	8c00130e 	bge	r17,r16,c00f920 <___svfiprintf_internal_r+0xc90>
 c00f8d4:	010300b4 	movhi	r4,3074
 c00f8d8:	18c00404 	addi	r3,r3,16
 c00f8dc:	10800044 	addi	r2,r2,1
 c00f8e0:	21225504 	addi	r4,r4,-30380
 c00f8e4:	41000015 	stw	r4,0(r8)
 c00f8e8:	44400115 	stw	r17,4(r8)
 c00f8ec:	d8c01c15 	stw	r3,112(sp)
 c00f8f0:	d8801b15 	stw	r2,108(sp)
 c00f8f4:	a0bff40e 	bge	r20,r2,c00f8c8 <__alt_data_end+0xfc00f8c8>
 c00f8f8:	d9801a04 	addi	r6,sp,104
 c00f8fc:	b80b883a 	mov	r5,r23
 c00f900:	a809883a 	mov	r4,r21
 c00f904:	c00eac00 	call	c00eac0 <__ssprint_r>
 c00f908:	1000211e 	bne	r2,zero,c00f990 <___svfiprintf_internal_r+0xd00>
 c00f90c:	843ffc04 	addi	r16,r16,-16
 c00f910:	d8c01c17 	ldw	r3,112(sp)
 c00f914:	d8801b17 	ldw	r2,108(sp)
 c00f918:	d811883a 	mov	r8,sp
 c00f91c:	8c3fed16 	blt	r17,r16,c00f8d4 <__alt_data_end+0xfc00f8d4>
 c00f920:	d9402817 	ldw	r5,160(sp)
 c00f924:	1c07883a 	add	r3,r3,r16
 c00f928:	10800044 	addi	r2,r2,1
 c00f92c:	41400015 	stw	r5,0(r8)
 c00f930:	44000115 	stw	r16,4(r8)
 c00f934:	d8c01c15 	stw	r3,112(sp)
 c00f938:	d8801b15 	stw	r2,108(sp)
 c00f93c:	010001c4 	movi	r4,7
 c00f940:	2080b516 	blt	r4,r2,c00fc18 <___svfiprintf_internal_r+0xf88>
 c00f944:	d8802517 	ldw	r2,148(sp)
 c00f948:	1480010e 	bge	r2,r18,c00f950 <___svfiprintf_internal_r+0xcc0>
 c00f94c:	9005883a 	mov	r2,r18
 c00f950:	d9002617 	ldw	r4,152(sp)
 c00f954:	2089883a 	add	r4,r4,r2
 c00f958:	d9002615 	stw	r4,152(sp)
 c00f95c:	18005a1e 	bne	r3,zero,c00fac8 <___svfiprintf_internal_r+0xe38>
 c00f960:	98800007 	ldb	r2,0(r19)
 c00f964:	d8001b15 	stw	zero,108(sp)
 c00f968:	d811883a 	mov	r8,sp
 c00f96c:	103cec1e 	bne	r2,zero,c00ed20 <__alt_data_end+0xfc00ed20>
 c00f970:	9825883a 	mov	r18,r19
 c00f974:	003d0206 	br	c00ed80 <__alt_data_end+0xfc00ed80>
 c00f978:	d8801c17 	ldw	r2,112(sp)
 c00f97c:	10000426 	beq	r2,zero,c00f990 <___svfiprintf_internal_r+0xd00>
 c00f980:	d9402317 	ldw	r5,140(sp)
 c00f984:	d9002717 	ldw	r4,156(sp)
 c00f988:	d9801a04 	addi	r6,sp,104
 c00f98c:	c00eac00 	call	c00eac0 <__ssprint_r>
 c00f990:	d9402317 	ldw	r5,140(sp)
 c00f994:	d8802617 	ldw	r2,152(sp)
 c00f998:	28c0030b 	ldhu	r3,12(r5)
 c00f99c:	18c0100c 	andi	r3,r3,64
 c00f9a0:	18015c1e 	bne	r3,zero,c00ff14 <___svfiprintf_internal_r+0x1284>
 c00f9a4:	dfc03717 	ldw	ra,220(sp)
 c00f9a8:	df003617 	ldw	fp,216(sp)
 c00f9ac:	ddc03517 	ldw	r23,212(sp)
 c00f9b0:	dd803417 	ldw	r22,208(sp)
 c00f9b4:	dd403317 	ldw	r21,204(sp)
 c00f9b8:	dd003217 	ldw	r20,200(sp)
 c00f9bc:	dcc03117 	ldw	r19,196(sp)
 c00f9c0:	dc803017 	ldw	r18,192(sp)
 c00f9c4:	dc402f17 	ldw	r17,188(sp)
 c00f9c8:	dc002e17 	ldw	r16,184(sp)
 c00f9cc:	dec03804 	addi	sp,sp,224
 c00f9d0:	f800283a 	ret
 c00f9d4:	d9002517 	ldw	r4,148(sp)
 c00f9d8:	24afc83a 	sub	r23,r4,r18
 c00f9dc:	05ff6e0e 	bge	zero,r23,c00f798 <__alt_data_end+0xfc00f798>
 c00f9e0:	07000404 	movi	fp,16
 c00f9e4:	e5c15c0e 	bge	fp,r23,c00ff58 <___svfiprintf_internal_r+0x12c8>
 c00f9e8:	010300b4 	movhi	r4,3074
 c00f9ec:	21225104 	addi	r4,r4,-30396
 c00f9f0:	dc002215 	stw	r16,136(sp)
 c00f9f4:	dc402815 	stw	r17,160(sp)
 c00f9f8:	d9002115 	stw	r4,132(sp)
 c00f9fc:	b823883a 	mov	r17,r23
 c00fa00:	054001c4 	movi	r21,7
 c00fa04:	982f883a 	mov	r23,r19
 c00fa08:	dc002717 	ldw	r16,156(sp)
 c00fa0c:	9027883a 	mov	r19,r18
 c00fa10:	dc802317 	ldw	r18,140(sp)
 c00fa14:	00000306 	br	c00fa24 <___svfiprintf_internal_r+0xd94>
 c00fa18:	8c7ffc04 	addi	r17,r17,-16
 c00fa1c:	42000204 	addi	r8,r8,8
 c00fa20:	e440110e 	bge	fp,r17,c00fa68 <___svfiprintf_internal_r+0xdd8>
 c00fa24:	18c00404 	addi	r3,r3,16
 c00fa28:	10800044 	addi	r2,r2,1
 c00fa2c:	45800015 	stw	r22,0(r8)
 c00fa30:	47000115 	stw	fp,4(r8)
 c00fa34:	d8c01c15 	stw	r3,112(sp)
 c00fa38:	d8801b15 	stw	r2,108(sp)
 c00fa3c:	a8bff60e 	bge	r21,r2,c00fa18 <__alt_data_end+0xfc00fa18>
 c00fa40:	d9801a04 	addi	r6,sp,104
 c00fa44:	900b883a 	mov	r5,r18
 c00fa48:	8009883a 	mov	r4,r16
 c00fa4c:	c00eac00 	call	c00eac0 <__ssprint_r>
 c00fa50:	103fcf1e 	bne	r2,zero,c00f990 <__alt_data_end+0xfc00f990>
 c00fa54:	8c7ffc04 	addi	r17,r17,-16
 c00fa58:	d8c01c17 	ldw	r3,112(sp)
 c00fa5c:	d8801b17 	ldw	r2,108(sp)
 c00fa60:	d811883a 	mov	r8,sp
 c00fa64:	e47fef16 	blt	fp,r17,c00fa24 <__alt_data_end+0xfc00fa24>
 c00fa68:	9825883a 	mov	r18,r19
 c00fa6c:	dc002217 	ldw	r16,136(sp)
 c00fa70:	b827883a 	mov	r19,r23
 c00fa74:	882f883a 	mov	r23,r17
 c00fa78:	dc402817 	ldw	r17,160(sp)
 c00fa7c:	d9402117 	ldw	r5,132(sp)
 c00fa80:	1dc7883a 	add	r3,r3,r23
 c00fa84:	10800044 	addi	r2,r2,1
 c00fa88:	41400015 	stw	r5,0(r8)
 c00fa8c:	45c00115 	stw	r23,4(r8)
 c00fa90:	d8c01c15 	stw	r3,112(sp)
 c00fa94:	d8801b15 	stw	r2,108(sp)
 c00fa98:	010001c4 	movi	r4,7
 c00fa9c:	2080b716 	blt	r4,r2,c00fd7c <___svfiprintf_internal_r+0x10ec>
 c00faa0:	42000204 	addi	r8,r8,8
 c00faa4:	003f3c06 	br	c00f798 <__alt_data_end+0xfc00f798>
 c00faa8:	d9402317 	ldw	r5,140(sp)
 c00faac:	d9002717 	ldw	r4,156(sp)
 c00fab0:	d9801a04 	addi	r6,sp,104
 c00fab4:	c00eac00 	call	c00eac0 <__ssprint_r>
 c00fab8:	103fb51e 	bne	r2,zero,c00f990 <__alt_data_end+0xfc00f990>
 c00fabc:	d8c01c17 	ldw	r3,112(sp)
 c00fac0:	d811883a 	mov	r8,sp
 c00fac4:	003f7106 	br	c00f88c <__alt_data_end+0xfc00f88c>
 c00fac8:	d9402317 	ldw	r5,140(sp)
 c00facc:	d9002717 	ldw	r4,156(sp)
 c00fad0:	d9801a04 	addi	r6,sp,104
 c00fad4:	c00eac00 	call	c00eac0 <__ssprint_r>
 c00fad8:	103fa126 	beq	r2,zero,c00f960 <__alt_data_end+0xfc00f960>
 c00fadc:	003fac06 	br	c00f990 <__alt_data_end+0xfc00f990>
 c00fae0:	d9402317 	ldw	r5,140(sp)
 c00fae4:	d9002717 	ldw	r4,156(sp)
 c00fae8:	d9801a04 	addi	r6,sp,104
 c00faec:	c00eac00 	call	c00eac0 <__ssprint_r>
 c00faf0:	103fa71e 	bne	r2,zero,c00f990 <__alt_data_end+0xfc00f990>
 c00faf4:	d811883a 	mov	r8,sp
 c00faf8:	003c9e06 	br	c00ed74 <__alt_data_end+0xfc00ed74>
 c00fafc:	d9402317 	ldw	r5,140(sp)
 c00fb00:	d9002717 	ldw	r4,156(sp)
 c00fb04:	d9801a04 	addi	r6,sp,104
 c00fb08:	c00eac00 	call	c00eac0 <__ssprint_r>
 c00fb0c:	103fa01e 	bne	r2,zero,c00f990 <__alt_data_end+0xfc00f990>
 c00fb10:	d8c01c17 	ldw	r3,112(sp)
 c00fb14:	d8801b17 	ldw	r2,108(sp)
 c00fb18:	d811883a 	mov	r8,sp
 c00fb1c:	003f5206 	br	c00f868 <__alt_data_end+0xfc00f868>
 c00fb20:	d9402317 	ldw	r5,140(sp)
 c00fb24:	d9002717 	ldw	r4,156(sp)
 c00fb28:	d9801a04 	addi	r6,sp,104
 c00fb2c:	c00eac00 	call	c00eac0 <__ssprint_r>
 c00fb30:	103f971e 	bne	r2,zero,c00f990 <__alt_data_end+0xfc00f990>
 c00fb34:	d8c01c17 	ldw	r3,112(sp)
 c00fb38:	d8801b17 	ldw	r2,108(sp)
 c00fb3c:	d811883a 	mov	r8,sp
 c00fb40:	003f0506 	br	c00f758 <__alt_data_end+0xfc00f758>
 c00fb44:	d9402317 	ldw	r5,140(sp)
 c00fb48:	d9002717 	ldw	r4,156(sp)
 c00fb4c:	d9801a04 	addi	r6,sp,104
 c00fb50:	c00eac00 	call	c00eac0 <__ssprint_r>
 c00fb54:	103f8e1e 	bne	r2,zero,c00f990 <__alt_data_end+0xfc00f990>
 c00fb58:	d8c01c17 	ldw	r3,112(sp)
 c00fb5c:	d8801b17 	ldw	r2,108(sp)
 c00fb60:	d811883a 	mov	r8,sp
 c00fb64:	003f0906 	br	c00f78c <__alt_data_end+0xfc00f78c>
 c00fb68:	d9402017 	ldw	r5,128(sp)
 c00fb6c:	d8001d85 	stb	zero,118(sp)
 c00fb70:	28007716 	blt	r5,zero,c00fd50 <___svfiprintf_internal_r+0x10c0>
 c00fb74:	00ffdfc4 	movi	r3,-129
 c00fb78:	9504b03a 	or	r2,r18,r20
 c00fb7c:	80e0703a 	and	r16,r16,r3
 c00fb80:	103d3926 	beq	r2,zero,c00f068 <__alt_data_end+0xfc00f068>
 c00fb84:	002b883a 	mov	r21,zero
 c00fb88:	003d3c06 	br	c00f07c <__alt_data_end+0xfc00f07c>
 c00fb8c:	d9402317 	ldw	r5,140(sp)
 c00fb90:	d9002717 	ldw	r4,156(sp)
 c00fb94:	d9801a04 	addi	r6,sp,104
 c00fb98:	c00eac00 	call	c00eac0 <__ssprint_r>
 c00fb9c:	103f7c1e 	bne	r2,zero,c00f990 <__alt_data_end+0xfc00f990>
 c00fba0:	d8c01c17 	ldw	r3,112(sp)
 c00fba4:	d8801b17 	ldw	r2,108(sp)
 c00fba8:	d811883a 	mov	r8,sp
 c00fbac:	003edd06 	br	c00f724 <__alt_data_end+0xfc00f724>
 c00fbb0:	8080100c 	andi	r2,r16,64
 c00fbb4:	d8001d85 	stb	zero,118(sp)
 c00fbb8:	10008426 	beq	r2,zero,c00fdcc <___svfiprintf_internal_r+0x113c>
 c00fbbc:	d9402417 	ldw	r5,144(sp)
 c00fbc0:	d8c02017 	ldw	r3,128(sp)
 c00fbc4:	0029883a 	mov	r20,zero
 c00fbc8:	28800104 	addi	r2,r5,4
 c00fbcc:	2c80000b 	ldhu	r18,0(r5)
 c00fbd0:	183eab0e 	bge	r3,zero,c00f680 <__alt_data_end+0xfc00f680>
 c00fbd4:	d8802415 	stw	r2,144(sp)
 c00fbd8:	002b883a 	mov	r21,zero
 c00fbdc:	9504b03a 	or	r2,r18,r20
 c00fbe0:	103e171e 	bne	r2,zero,c00f440 <__alt_data_end+0xfc00f440>
 c00fbe4:	00800044 	movi	r2,1
 c00fbe8:	10803fcc 	andi	r2,r2,255
 c00fbec:	00c00044 	movi	r3,1
 c00fbf0:	10c05c26 	beq	r2,r3,c00fd64 <___svfiprintf_internal_r+0x10d4>
 c00fbf4:	00c00084 	movi	r3,2
 c00fbf8:	10fd1e26 	beq	r2,r3,c00f074 <__alt_data_end+0xfc00f074>
 c00fbfc:	003ec406 	br	c00f710 <__alt_data_end+0xfc00f710>
 c00fc00:	d9401e17 	ldw	r5,120(sp)
 c00fc04:	2c69c83a 	sub	r20,r5,r17
 c00fc08:	003d4506 	br	c00f120 <__alt_data_end+0xfc00f120>
 c00fc0c:	d8802415 	stw	r2,144(sp)
 c00fc10:	98c00007 	ldb	r3,0(r19)
 c00fc14:	003c6a06 	br	c00edc0 <__alt_data_end+0xfc00edc0>
 c00fc18:	d9402317 	ldw	r5,140(sp)
 c00fc1c:	d9002717 	ldw	r4,156(sp)
 c00fc20:	d9801a04 	addi	r6,sp,104
 c00fc24:	c00eac00 	call	c00eac0 <__ssprint_r>
 c00fc28:	103f591e 	bne	r2,zero,c00f990 <__alt_data_end+0xfc00f990>
 c00fc2c:	d8c01c17 	ldw	r3,112(sp)
 c00fc30:	003f4406 	br	c00f944 <__alt_data_end+0xfc00f944>
 c00fc34:	014300b4 	movhi	r5,3074
 c00fc38:	2961e804 	addi	r5,r5,-30816
 c00fc3c:	d9402915 	stw	r5,164(sp)
 c00fc40:	003d0906 	br	c00f068 <__alt_data_end+0xfc00f068>
 c00fc44:	d8c02417 	ldw	r3,144(sp)
 c00fc48:	d9002617 	ldw	r4,152(sp)
 c00fc4c:	d9402417 	ldw	r5,144(sp)
 c00fc50:	18800017 	ldw	r2,0(r3)
 c00fc54:	2007d7fa 	srai	r3,r4,31
 c00fc58:	29400104 	addi	r5,r5,4
 c00fc5c:	d9402415 	stw	r5,144(sp)
 c00fc60:	11000015 	stw	r4,0(r2)
 c00fc64:	10c00115 	stw	r3,4(r2)
 c00fc68:	003c2b06 	br	c00ed18 <__alt_data_end+0xfc00ed18>
 c00fc6c:	d8c01d45 	stb	r3,117(sp)
 c00fc70:	d8c02017 	ldw	r3,128(sp)
 c00fc74:	00800c04 	movi	r2,48
 c00fc78:	d8801d05 	stb	r2,116(sp)
 c00fc7c:	d8001d85 	stb	zero,118(sp)
 c00fc80:	80800094 	ori	r2,r16,2
 c00fc84:	1800ac16 	blt	r3,zero,c00ff38 <___svfiprintf_internal_r+0x12a8>
 c00fc88:	00bfdfc4 	movi	r2,-129
 c00fc8c:	80a0703a 	and	r16,r16,r2
 c00fc90:	84000094 	ori	r16,r16,2
 c00fc94:	002b883a 	mov	r21,zero
 c00fc98:	003cf806 	br	c00f07c <__alt_data_end+0xfc00f07c>
 c00fc9c:	98c00007 	ldb	r3,0(r19)
 c00fca0:	003c4706 	br	c00edc0 <__alt_data_end+0xfc00edc0>
 c00fca4:	d9402417 	ldw	r5,144(sp)
 c00fca8:	2c800017 	ldw	r18,0(r5)
 c00fcac:	29400104 	addi	r5,r5,4
 c00fcb0:	d9402415 	stw	r5,144(sp)
 c00fcb4:	9029d7fa 	srai	r20,r18,31
 c00fcb8:	a005883a 	mov	r2,r20
 c00fcbc:	003dd806 	br	c00f420 <__alt_data_end+0xfc00f420>
 c00fcc0:	d9402417 	ldw	r5,144(sp)
 c00fcc4:	0029883a 	mov	r20,zero
 c00fcc8:	2c800017 	ldw	r18,0(r5)
 c00fccc:	29400104 	addi	r5,r5,4
 c00fcd0:	d9402415 	stw	r5,144(sp)
 c00fcd4:	003cdb06 	br	c00f044 <__alt_data_end+0xfc00f044>
 c00fcd8:	8080100c 	andi	r2,r16,64
 c00fcdc:	d8001d85 	stb	zero,118(sp)
 c00fce0:	10003326 	beq	r2,zero,c00fdb0 <___svfiprintf_internal_r+0x1120>
 c00fce4:	d9002417 	ldw	r4,144(sp)
 c00fce8:	d9402017 	ldw	r5,128(sp)
 c00fcec:	0029883a 	mov	r20,zero
 c00fcf0:	20800104 	addi	r2,r4,4
 c00fcf4:	2480000b 	ldhu	r18,0(r4)
 c00fcf8:	283e7e0e 	bge	r5,zero,c00f6f4 <__alt_data_end+0xfc00f6f4>
 c00fcfc:	9506b03a 	or	r3,r18,r20
 c00fd00:	d8802415 	stw	r2,144(sp)
 c00fd04:	183d271e 	bne	r3,zero,c00f1a4 <__alt_data_end+0xfc00f1a4>
 c00fd08:	002b883a 	mov	r21,zero
 c00fd0c:	0005883a 	mov	r2,zero
 c00fd10:	003fb506 	br	c00fbe8 <__alt_data_end+0xfc00fbe8>
 c00fd14:	98c00043 	ldbu	r3,1(r19)
 c00fd18:	8c400814 	ori	r17,r17,32
 c00fd1c:	9cc00044 	addi	r19,r19,1
 c00fd20:	18c03fcc 	andi	r3,r3,255
 c00fd24:	18c0201c 	xori	r3,r3,128
 c00fd28:	18ffe004 	addi	r3,r3,-128
 c00fd2c:	003c2406 	br	c00edc0 <__alt_data_end+0xfc00edc0>
 c00fd30:	d8c02415 	stw	r3,144(sp)
 c00fd34:	002b883a 	mov	r21,zero
 c00fd38:	003fa806 	br	c00fbdc <__alt_data_end+0xfc00fbdc>
 c00fd3c:	010300b4 	movhi	r4,3074
 c00fd40:	2121e804 	addi	r4,r4,-30816
 c00fd44:	d9002915 	stw	r4,164(sp)
 c00fd48:	d8c02415 	stw	r3,144(sp)
 c00fd4c:	1021883a 	mov	r16,r2
 c00fd50:	9504b03a 	or	r2,r18,r20
 c00fd54:	103f8b1e 	bne	r2,zero,c00fb84 <__alt_data_end+0xfc00fb84>
 c00fd58:	002b883a 	mov	r21,zero
 c00fd5c:	00800084 	movi	r2,2
 c00fd60:	003fa106 	br	c00fbe8 <__alt_data_end+0xfc00fbe8>
 c00fd64:	0025883a 	mov	r18,zero
 c00fd68:	94800c04 	addi	r18,r18,48
 c00fd6c:	dc8019c5 	stb	r18,103(sp)
 c00fd70:	dd002c17 	ldw	r20,176(sp)
 c00fd74:	dc4019c4 	addi	r17,sp,103
 c00fd78:	003ce906 	br	c00f120 <__alt_data_end+0xfc00f120>
 c00fd7c:	d9402317 	ldw	r5,140(sp)
 c00fd80:	d9002717 	ldw	r4,156(sp)
 c00fd84:	d9801a04 	addi	r6,sp,104
 c00fd88:	c00eac00 	call	c00eac0 <__ssprint_r>
 c00fd8c:	103f001e 	bne	r2,zero,c00f990 <__alt_data_end+0xfc00f990>
 c00fd90:	d8c01c17 	ldw	r3,112(sp)
 c00fd94:	d8801b17 	ldw	r2,108(sp)
 c00fd98:	d811883a 	mov	r8,sp
 c00fd9c:	003e7e06 	br	c00f798 <__alt_data_end+0xfc00f798>
 c00fda0:	014300b4 	movhi	r5,3074
 c00fda4:	29625104 	addi	r5,r5,-30396
 c00fda8:	d9402115 	stw	r5,132(sp)
 c00fdac:	003ea406 	br	c00f840 <__alt_data_end+0xfc00f840>
 c00fdb0:	d8c02417 	ldw	r3,144(sp)
 c00fdb4:	d9002017 	ldw	r4,128(sp)
 c00fdb8:	0029883a 	mov	r20,zero
 c00fdbc:	18800104 	addi	r2,r3,4
 c00fdc0:	1c800017 	ldw	r18,0(r3)
 c00fdc4:	203e4b0e 	bge	r4,zero,c00f6f4 <__alt_data_end+0xfc00f6f4>
 c00fdc8:	003fcc06 	br	c00fcfc <__alt_data_end+0xfc00fcfc>
 c00fdcc:	d9002417 	ldw	r4,144(sp)
 c00fdd0:	d9402017 	ldw	r5,128(sp)
 c00fdd4:	0029883a 	mov	r20,zero
 c00fdd8:	20800104 	addi	r2,r4,4
 c00fddc:	24800017 	ldw	r18,0(r4)
 c00fde0:	283e270e 	bge	r5,zero,c00f680 <__alt_data_end+0xfc00f680>
 c00fde4:	003f7b06 	br	c00fbd4 <__alt_data_end+0xfc00fbd4>
 c00fde8:	8400100c 	andi	r16,r16,64
 c00fdec:	80003326 	beq	r16,zero,c00febc <___svfiprintf_internal_r+0x122c>
 c00fdf0:	d9402417 	ldw	r5,144(sp)
 c00fdf4:	d8c02617 	ldw	r3,152(sp)
 c00fdf8:	28800017 	ldw	r2,0(r5)
 c00fdfc:	29400104 	addi	r5,r5,4
 c00fe00:	d9402415 	stw	r5,144(sp)
 c00fe04:	10c0000d 	sth	r3,0(r2)
 c00fe08:	003bc306 	br	c00ed18 <__alt_data_end+0xfc00ed18>
 c00fe0c:	d9002417 	ldw	r4,144(sp)
 c00fe10:	0029883a 	mov	r20,zero
 c00fe14:	24800017 	ldw	r18,0(r4)
 c00fe18:	21000104 	addi	r4,r4,4
 c00fe1c:	d9002415 	stw	r4,144(sp)
 c00fe20:	003c8806 	br	c00f044 <__alt_data_end+0xfc00f044>
 c00fe24:	d8c02417 	ldw	r3,144(sp)
 c00fe28:	1c800017 	ldw	r18,0(r3)
 c00fe2c:	18c00104 	addi	r3,r3,4
 c00fe30:	d8c02415 	stw	r3,144(sp)
 c00fe34:	9029d7fa 	srai	r20,r18,31
 c00fe38:	a005883a 	mov	r2,r20
 c00fe3c:	003d7806 	br	c00f420 <__alt_data_end+0xfc00f420>
 c00fe40:	8809883a 	mov	r4,r17
 c00fe44:	da002d15 	stw	r8,180(sp)
 c00fe48:	c0050880 	call	c005088 <strlen>
 c00fe4c:	1029883a 	mov	r20,r2
 c00fe50:	dd401d83 	ldbu	r21,118(sp)
 c00fe54:	ddc02415 	stw	r23,144(sp)
 c00fe58:	d8002015 	stw	zero,128(sp)
 c00fe5c:	da002d17 	ldw	r8,180(sp)
 c00fe60:	003caf06 	br	c00f120 <__alt_data_end+0xfc00f120>
 c00fe64:	013fffc4 	movi	r4,-1
 c00fe68:	003df206 	br	c00f634 <__alt_data_end+0xfc00f634>
 c00fe6c:	dd002017 	ldw	r20,128(sp)
 c00fe70:	00800184 	movi	r2,6
 c00fe74:	1500012e 	bgeu	r2,r20,c00fe7c <___svfiprintf_internal_r+0x11ec>
 c00fe78:	1029883a 	mov	r20,r2
 c00fe7c:	a025883a 	mov	r18,r20
 c00fe80:	a0004116 	blt	r20,zero,c00ff88 <___svfiprintf_internal_r+0x12f8>
 c00fe84:	044300b4 	movhi	r17,3074
 c00fe88:	ddc02415 	stw	r23,144(sp)
 c00fe8c:	8c61ed04 	addi	r17,r17,-30796
 c00fe90:	003ce806 	br	c00f234 <__alt_data_end+0xfc00f234>
 c00fe94:	04001004 	movi	r16,64
 c00fe98:	800b883a 	mov	r5,r16
 c00fe9c:	c00c5080 	call	c00c508 <_malloc_r>
 c00fea0:	d8c02317 	ldw	r3,140(sp)
 c00fea4:	18800015 	stw	r2,0(r3)
 c00fea8:	18800415 	stw	r2,16(r3)
 c00feac:	10004d26 	beq	r2,zero,c00ffe4 <___svfiprintf_internal_r+0x1354>
 c00feb0:	d9402317 	ldw	r5,140(sp)
 c00feb4:	2c000515 	stw	r16,20(r5)
 c00feb8:	003b8906 	br	c00ece0 <__alt_data_end+0xfc00ece0>
 c00febc:	d9002417 	ldw	r4,144(sp)
 c00fec0:	d9402617 	ldw	r5,152(sp)
 c00fec4:	20800017 	ldw	r2,0(r4)
 c00fec8:	21000104 	addi	r4,r4,4
 c00fecc:	d9002415 	stw	r4,144(sp)
 c00fed0:	11400015 	stw	r5,0(r2)
 c00fed4:	003b9006 	br	c00ed18 <__alt_data_end+0xfc00ed18>
 c00fed8:	8080004c 	andi	r2,r16,1
 c00fedc:	002b883a 	mov	r21,zero
 c00fee0:	10000526 	beq	r2,zero,c00fef8 <___svfiprintf_internal_r+0x1268>
 c00fee4:	00800c04 	movi	r2,48
 c00fee8:	d88019c5 	stb	r2,103(sp)
 c00feec:	dd002c17 	ldw	r20,176(sp)
 c00fef0:	dc4019c4 	addi	r17,sp,103
 c00fef4:	003c8a06 	br	c00f120 <__alt_data_end+0xfc00f120>
 c00fef8:	0029883a 	mov	r20,zero
 c00fefc:	dc401a04 	addi	r17,sp,104
 c00ff00:	003c8706 	br	c00f120 <__alt_data_end+0xfc00f120>
 c00ff04:	014300b4 	movhi	r5,3074
 c00ff08:	29625504 	addi	r5,r5,-30380
 c00ff0c:	d9402815 	stw	r5,160(sp)
 c00ff10:	003cff06 	br	c00f310 <__alt_data_end+0xfc00f310>
 c00ff14:	00bfffc4 	movi	r2,-1
 c00ff18:	003ea206 	br	c00f9a4 <__alt_data_end+0xfc00f9a4>
 c00ff1c:	00800044 	movi	r2,1
 c00ff20:	10803fcc 	andi	r2,r2,255
 c00ff24:	00c00044 	movi	r3,1
 c00ff28:	10fd4526 	beq	r2,r3,c00f440 <__alt_data_end+0xfc00f440>
 c00ff2c:	00c00084 	movi	r3,2
 c00ff30:	10fc5226 	beq	r2,r3,c00f07c <__alt_data_end+0xfc00f07c>
 c00ff34:	003c9c06 	br	c00f1a8 <__alt_data_end+0xfc00f1a8>
 c00ff38:	1021883a 	mov	r16,r2
 c00ff3c:	002b883a 	mov	r21,zero
 c00ff40:	00800084 	movi	r2,2
 c00ff44:	003ff606 	br	c00ff20 <__alt_data_end+0xfc00ff20>
 c00ff48:	010300b4 	movhi	r4,3074
 c00ff4c:	21225504 	addi	r4,r4,-30380
 c00ff50:	d9002815 	stw	r4,160(sp)
 c00ff54:	003e7206 	br	c00f920 <__alt_data_end+0xfc00f920>
 c00ff58:	014300b4 	movhi	r5,3074
 c00ff5c:	29625104 	addi	r5,r5,-30396
 c00ff60:	d9402115 	stw	r5,132(sp)
 c00ff64:	003ec506 	br	c00fa7c <__alt_data_end+0xfc00fa7c>
 c00ff68:	e027883a 	mov	r19,fp
 c00ff6c:	d8002015 	stw	zero,128(sp)
 c00ff70:	003b9406 	br	c00edc4 <__alt_data_end+0xfc00edc4>
 c00ff74:	dd002017 	ldw	r20,128(sp)
 c00ff78:	dd401d83 	ldbu	r21,118(sp)
 c00ff7c:	ddc02415 	stw	r23,144(sp)
 c00ff80:	d8002015 	stw	zero,128(sp)
 c00ff84:	003c6606 	br	c00f120 <__alt_data_end+0xfc00f120>
 c00ff88:	0025883a 	mov	r18,zero
 c00ff8c:	003fbd06 	br	c00fe84 <__alt_data_end+0xfc00fe84>
 c00ff90:	d9402417 	ldw	r5,144(sp)
 c00ff94:	d8c02417 	ldw	r3,144(sp)
 c00ff98:	29400017 	ldw	r5,0(r5)
 c00ff9c:	19000104 	addi	r4,r3,4
 c00ffa0:	d9002415 	stw	r4,144(sp)
 c00ffa4:	d9402015 	stw	r5,128(sp)
 c00ffa8:	98c00043 	ldbu	r3,1(r19)
 c00ffac:	e027883a 	mov	r19,fp
 c00ffb0:	283f5b0e 	bge	r5,zero,c00fd20 <__alt_data_end+0xfc00fd20>
 c00ffb4:	18c03fcc 	andi	r3,r3,255
 c00ffb8:	013fffc4 	movi	r4,-1
 c00ffbc:	18c0201c 	xori	r3,r3,128
 c00ffc0:	d9002015 	stw	r4,128(sp)
 c00ffc4:	18ffe004 	addi	r3,r3,-128
 c00ffc8:	003b7d06 	br	c00edc0 <__alt_data_end+0xfc00edc0>
 c00ffcc:	dd401d85 	stb	r21,118(sp)
 c00ffd0:	003cf306 	br	c00f3a0 <__alt_data_end+0xfc00f3a0>
 c00ffd4:	dd401d85 	stb	r21,118(sp)
 c00ffd8:	003d4e06 	br	c00f514 <__alt_data_end+0xfc00f514>
 c00ffdc:	dd401d85 	stb	r21,118(sp)
 c00ffe0:	003c0e06 	br	c00f01c <__alt_data_end+0xfc00f01c>
 c00ffe4:	d9002717 	ldw	r4,156(sp)
 c00ffe8:	00800304 	movi	r2,12
 c00ffec:	20800015 	stw	r2,0(r4)
 c00fff0:	00bfffc4 	movi	r2,-1
 c00fff4:	003e6b06 	br	c00f9a4 <__alt_data_end+0xfc00f9a4>
 c00fff8:	dd401d85 	stb	r21,118(sp)
 c00fffc:	003d0006 	br	c00f400 <__alt_data_end+0xfc00f400>
 c010000:	dd401d85 	stb	r21,118(sp)
 c010004:	003d7106 	br	c00f5cc <__alt_data_end+0xfc00f5cc>
 c010008:	dd401d85 	stb	r21,118(sp)
 c01000c:	003c5706 	br	c00f16c <__alt_data_end+0xfc00f16c>
 c010010:	dd401d85 	stb	r21,118(sp)
 c010014:	003c2e06 	br	c00f0d0 <__alt_data_end+0xfc00f0d0>
 c010018:	dd401d85 	stb	r21,118(sp)
 c01001c:	003d8c06 	br	c00f650 <__alt_data_end+0xfc00f650>
 c010020:	dd401d85 	stb	r21,118(sp)
 c010024:	003da706 	br	c00f6c4 <__alt_data_end+0xfc00f6c4>
 c010028:	dd401d85 	stb	r21,118(sp)
 c01002c:	003cc806 	br	c00f350 <__alt_data_end+0xfc00f350>

0c010030 <__sprint_r.part.0>:
 c010030:	28801917 	ldw	r2,100(r5)
 c010034:	defff604 	addi	sp,sp,-40
 c010038:	dd400515 	stw	r21,20(sp)
 c01003c:	dfc00915 	stw	ra,36(sp)
 c010040:	df000815 	stw	fp,32(sp)
 c010044:	ddc00715 	stw	r23,28(sp)
 c010048:	dd800615 	stw	r22,24(sp)
 c01004c:	dd000415 	stw	r20,16(sp)
 c010050:	dcc00315 	stw	r19,12(sp)
 c010054:	dc800215 	stw	r18,8(sp)
 c010058:	dc400115 	stw	r17,4(sp)
 c01005c:	dc000015 	stw	r16,0(sp)
 c010060:	1088000c 	andi	r2,r2,8192
 c010064:	302b883a 	mov	r21,r6
 c010068:	10002e26 	beq	r2,zero,c010124 <__sprint_r.part.0+0xf4>
 c01006c:	30800217 	ldw	r2,8(r6)
 c010070:	35800017 	ldw	r22,0(r6)
 c010074:	10002926 	beq	r2,zero,c01011c <__sprint_r.part.0+0xec>
 c010078:	2827883a 	mov	r19,r5
 c01007c:	2029883a 	mov	r20,r4
 c010080:	b5c00104 	addi	r23,r22,4
 c010084:	04bfffc4 	movi	r18,-1
 c010088:	bc400017 	ldw	r17,0(r23)
 c01008c:	b4000017 	ldw	r16,0(r22)
 c010090:	0039883a 	mov	fp,zero
 c010094:	8822d0ba 	srli	r17,r17,2
 c010098:	8800031e 	bne	r17,zero,c0100a8 <__sprint_r.part.0+0x78>
 c01009c:	00001806 	br	c010100 <__sprint_r.part.0+0xd0>
 c0100a0:	84000104 	addi	r16,r16,4
 c0100a4:	8f001526 	beq	r17,fp,c0100fc <__sprint_r.part.0+0xcc>
 c0100a8:	81400017 	ldw	r5,0(r16)
 c0100ac:	980d883a 	mov	r6,r19
 c0100b0:	a009883a 	mov	r4,r20
 c0100b4:	c011b200 	call	c011b20 <_fputwc_r>
 c0100b8:	e7000044 	addi	fp,fp,1
 c0100bc:	14bff81e 	bne	r2,r18,c0100a0 <__alt_data_end+0xfc0100a0>
 c0100c0:	9005883a 	mov	r2,r18
 c0100c4:	a8000215 	stw	zero,8(r21)
 c0100c8:	a8000115 	stw	zero,4(r21)
 c0100cc:	dfc00917 	ldw	ra,36(sp)
 c0100d0:	df000817 	ldw	fp,32(sp)
 c0100d4:	ddc00717 	ldw	r23,28(sp)
 c0100d8:	dd800617 	ldw	r22,24(sp)
 c0100dc:	dd400517 	ldw	r21,20(sp)
 c0100e0:	dd000417 	ldw	r20,16(sp)
 c0100e4:	dcc00317 	ldw	r19,12(sp)
 c0100e8:	dc800217 	ldw	r18,8(sp)
 c0100ec:	dc400117 	ldw	r17,4(sp)
 c0100f0:	dc000017 	ldw	r16,0(sp)
 c0100f4:	dec00a04 	addi	sp,sp,40
 c0100f8:	f800283a 	ret
 c0100fc:	a8800217 	ldw	r2,8(r21)
 c010100:	8c63883a 	add	r17,r17,r17
 c010104:	8c63883a 	add	r17,r17,r17
 c010108:	1445c83a 	sub	r2,r2,r17
 c01010c:	a8800215 	stw	r2,8(r21)
 c010110:	b5800204 	addi	r22,r22,8
 c010114:	bdc00204 	addi	r23,r23,8
 c010118:	103fdb1e 	bne	r2,zero,c010088 <__alt_data_end+0xfc010088>
 c01011c:	0005883a 	mov	r2,zero
 c010120:	003fe806 	br	c0100c4 <__alt_data_end+0xfc0100c4>
 c010124:	c00bc200 	call	c00bc20 <__sfvwrite_r>
 c010128:	003fe606 	br	c0100c4 <__alt_data_end+0xfc0100c4>

0c01012c <__sprint_r>:
 c01012c:	30c00217 	ldw	r3,8(r6)
 c010130:	18000126 	beq	r3,zero,c010138 <__sprint_r+0xc>
 c010134:	c0100301 	jmpi	c010030 <__sprint_r.part.0>
 c010138:	30000115 	stw	zero,4(r6)
 c01013c:	0005883a 	mov	r2,zero
 c010140:	f800283a 	ret

0c010144 <___vfiprintf_internal_r>:
 c010144:	deffca04 	addi	sp,sp,-216
 c010148:	dd403115 	stw	r21,196(sp)
 c01014c:	dfc03515 	stw	ra,212(sp)
 c010150:	df003415 	stw	fp,208(sp)
 c010154:	ddc03315 	stw	r23,204(sp)
 c010158:	dd803215 	stw	r22,200(sp)
 c01015c:	dd003015 	stw	r20,192(sp)
 c010160:	dcc02f15 	stw	r19,188(sp)
 c010164:	dc802e15 	stw	r18,184(sp)
 c010168:	dc402d15 	stw	r17,180(sp)
 c01016c:	dc002c15 	stw	r16,176(sp)
 c010170:	d9002115 	stw	r4,132(sp)
 c010174:	d9402015 	stw	r5,128(sp)
 c010178:	d9c02215 	stw	r7,136(sp)
 c01017c:	302b883a 	mov	r21,r6
 c010180:	20000226 	beq	r4,zero,c01018c <___vfiprintf_internal_r+0x48>
 c010184:	20800e17 	ldw	r2,56(r4)
 c010188:	1000cf26 	beq	r2,zero,c0104c8 <___vfiprintf_internal_r+0x384>
 c01018c:	d8c02017 	ldw	r3,128(sp)
 c010190:	1880030b 	ldhu	r2,12(r3)
 c010194:	10c8000c 	andi	r3,r2,8192
 c010198:	1800071e 	bne	r3,zero,c0101b8 <___vfiprintf_internal_r+0x74>
 c01019c:	d9402017 	ldw	r5,128(sp)
 c0101a0:	00f7ffc4 	movi	r3,-8193
 c0101a4:	10880014 	ori	r2,r2,8192
 c0101a8:	29001917 	ldw	r4,100(r5)
 c0101ac:	2880030d 	sth	r2,12(r5)
 c0101b0:	20c6703a 	and	r3,r4,r3
 c0101b4:	28c01915 	stw	r3,100(r5)
 c0101b8:	10c0020c 	andi	r3,r2,8
 c0101bc:	1800a526 	beq	r3,zero,c010454 <___vfiprintf_internal_r+0x310>
 c0101c0:	d9002017 	ldw	r4,128(sp)
 c0101c4:	20c00417 	ldw	r3,16(r4)
 c0101c8:	1800a226 	beq	r3,zero,c010454 <___vfiprintf_internal_r+0x310>
 c0101cc:	1080068c 	andi	r2,r2,26
 c0101d0:	00c00284 	movi	r3,10
 c0101d4:	10c0a826 	beq	r2,r3,c010478 <___vfiprintf_internal_r+0x334>
 c0101d8:	d9001a04 	addi	r4,sp,104
 c0101dc:	d94019c4 	addi	r5,sp,103
 c0101e0:	048300b4 	movhi	r18,3074
 c0101e4:	2145c83a 	sub	r2,r4,r5
 c0101e8:	94a25904 	addi	r18,r18,-30364
 c0101ec:	d9001e15 	stw	r4,120(sp)
 c0101f0:	d9401f15 	stw	r5,124(sp)
 c0101f4:	dec01a15 	stw	sp,104(sp)
 c0101f8:	d8001c15 	stw	zero,112(sp)
 c0101fc:	d8001b15 	stw	zero,108(sp)
 c010200:	d811883a 	mov	r8,sp
 c010204:	d8002615 	stw	zero,152(sp)
 c010208:	d8002415 	stw	zero,144(sp)
 c01020c:	d8802815 	stw	r2,160(sp)
 c010210:	a82d883a 	mov	r22,r21
 c010214:	b0800007 	ldb	r2,0(r22)
 c010218:	10040d26 	beq	r2,zero,c011250 <___vfiprintf_internal_r+0x110c>
 c01021c:	00c00944 	movi	r3,37
 c010220:	b029883a 	mov	r20,r22
 c010224:	10c0021e 	bne	r2,r3,c010230 <___vfiprintf_internal_r+0xec>
 c010228:	00001606 	br	c010284 <___vfiprintf_internal_r+0x140>
 c01022c:	10c00326 	beq	r2,r3,c01023c <___vfiprintf_internal_r+0xf8>
 c010230:	a5000044 	addi	r20,r20,1
 c010234:	a0800007 	ldb	r2,0(r20)
 c010238:	103ffc1e 	bne	r2,zero,c01022c <__alt_data_end+0xfc01022c>
 c01023c:	a5a1c83a 	sub	r16,r20,r22
 c010240:	80001026 	beq	r16,zero,c010284 <___vfiprintf_internal_r+0x140>
 c010244:	d8c01c17 	ldw	r3,112(sp)
 c010248:	d8801b17 	ldw	r2,108(sp)
 c01024c:	45800015 	stw	r22,0(r8)
 c010250:	80c7883a 	add	r3,r16,r3
 c010254:	10800044 	addi	r2,r2,1
 c010258:	44000115 	stw	r16,4(r8)
 c01025c:	d8c01c15 	stw	r3,112(sp)
 c010260:	d8801b15 	stw	r2,108(sp)
 c010264:	010001c4 	movi	r4,7
 c010268:	2080750e 	bge	r4,r2,c010440 <___vfiprintf_internal_r+0x2fc>
 c01026c:	1803951e 	bne	r3,zero,c0110c4 <___vfiprintf_internal_r+0xf80>
 c010270:	d8c02417 	ldw	r3,144(sp)
 c010274:	d8001b15 	stw	zero,108(sp)
 c010278:	d811883a 	mov	r8,sp
 c01027c:	1c07883a 	add	r3,r3,r16
 c010280:	d8c02415 	stw	r3,144(sp)
 c010284:	a0800007 	ldb	r2,0(r20)
 c010288:	1002e026 	beq	r2,zero,c010e0c <___vfiprintf_internal_r+0xcc8>
 c01028c:	a5800044 	addi	r22,r20,1
 c010290:	a0c00047 	ldb	r3,1(r20)
 c010294:	d8001d85 	stb	zero,118(sp)
 c010298:	0027883a 	mov	r19,zero
 c01029c:	d8002305 	stb	zero,140(sp)
 c0102a0:	043fffc4 	movi	r16,-1
 c0102a4:	d8002515 	stw	zero,148(sp)
 c0102a8:	0023883a 	mov	r17,zero
 c0102ac:	05001604 	movi	r20,88
 c0102b0:	05400244 	movi	r21,9
 c0102b4:	402f883a 	mov	r23,r8
 c0102b8:	b5800044 	addi	r22,r22,1
 c0102bc:	18bff804 	addi	r2,r3,-32
 c0102c0:	a0827736 	bltu	r20,r2,c010ca0 <___vfiprintf_internal_r+0xb5c>
 c0102c4:	100490ba 	slli	r2,r2,2
 c0102c8:	01030074 	movhi	r4,3073
 c0102cc:	2100b704 	addi	r4,r4,732
 c0102d0:	1105883a 	add	r2,r2,r4
 c0102d4:	10800017 	ldw	r2,0(r2)
 c0102d8:	1000683a 	jmp	r2
 c0102dc:	0c0109a0 	cmpeqi	r16,at,1062
 c0102e0:	0c010ca0 	cmpeqi	r16,at,1074
 c0102e4:	0c010ca0 	cmpeqi	r16,at,1074
 c0102e8:	0c0109bc 	xorhi	r16,at,1062
 c0102ec:	0c010ca0 	cmpeqi	r16,at,1074
 c0102f0:	0c010ca0 	cmpeqi	r16,at,1074
 c0102f4:	0c010ca0 	cmpeqi	r16,at,1074
 c0102f8:	0c010ca0 	cmpeqi	r16,at,1074
 c0102fc:	0c010ca0 	cmpeqi	r16,at,1074
 c010300:	0c010ca0 	cmpeqi	r16,at,1074
 c010304:	0c010bc4 	addi	r16,at,1071
 c010308:	0c010be8 	cmpgeui	r16,at,1071
 c01030c:	0c010ca0 	cmpeqi	r16,at,1074
 c010310:	0c0104e0 	cmpeqi	r16,at,1043
 c010314:	0c010bfc 	xorhi	r16,at,1071
 c010318:	0c010ca0 	cmpeqi	r16,at,1074
 c01031c:	0c0109c8 	cmpgei	r16,at,1063
 c010320:	0c0109d4 	ori	r16,at,1063
 c010324:	0c0109d4 	ori	r16,at,1063
 c010328:	0c0109d4 	ori	r16,at,1063
 c01032c:	0c0109d4 	ori	r16,at,1063
 c010330:	0c0109d4 	ori	r16,at,1063
 c010334:	0c0109d4 	ori	r16,at,1063
 c010338:	0c0109d4 	ori	r16,at,1063
 c01033c:	0c0109d4 	ori	r16,at,1063
 c010340:	0c0109d4 	ori	r16,at,1063
 c010344:	0c010ca0 	cmpeqi	r16,at,1074
 c010348:	0c010ca0 	cmpeqi	r16,at,1074
 c01034c:	0c010ca0 	cmpeqi	r16,at,1074
 c010350:	0c010ca0 	cmpeqi	r16,at,1074
 c010354:	0c010ca0 	cmpeqi	r16,at,1074
 c010358:	0c010ca0 	cmpeqi	r16,at,1074
 c01035c:	0c010ca0 	cmpeqi	r16,at,1074
 c010360:	0c010ca0 	cmpeqi	r16,at,1074
 c010364:	0c010ca0 	cmpeqi	r16,at,1074
 c010368:	0c010ca0 	cmpeqi	r16,at,1074
 c01036c:	0c010a14 	ori	r16,at,1064
 c010370:	0c010ca0 	cmpeqi	r16,at,1074
 c010374:	0c010ca0 	cmpeqi	r16,at,1074
 c010378:	0c010ca0 	cmpeqi	r16,at,1074
 c01037c:	0c010ca0 	cmpeqi	r16,at,1074
 c010380:	0c010ca0 	cmpeqi	r16,at,1074
 c010384:	0c010ca0 	cmpeqi	r16,at,1074
 c010388:	0c010ca0 	cmpeqi	r16,at,1074
 c01038c:	0c010ca0 	cmpeqi	r16,at,1074
 c010390:	0c010ca0 	cmpeqi	r16,at,1074
 c010394:	0c010ca0 	cmpeqi	r16,at,1074
 c010398:	0c010a50 	cmplti	r16,at,1065
 c01039c:	0c010ca0 	cmpeqi	r16,at,1074
 c0103a0:	0c010ca0 	cmpeqi	r16,at,1074
 c0103a4:	0c010ca0 	cmpeqi	r16,at,1074
 c0103a8:	0c010ca0 	cmpeqi	r16,at,1074
 c0103ac:	0c010ca0 	cmpeqi	r16,at,1074
 c0103b0:	0c010aac 	andhi	r16,at,1066
 c0103b4:	0c010ca0 	cmpeqi	r16,at,1074
 c0103b8:	0c010ca0 	cmpeqi	r16,at,1074
 c0103bc:	0c010b20 	cmpeqi	r16,at,1068
 c0103c0:	0c010ca0 	cmpeqi	r16,at,1074
 c0103c4:	0c010ca0 	cmpeqi	r16,at,1074
 c0103c8:	0c010ca0 	cmpeqi	r16,at,1074
 c0103cc:	0c010ca0 	cmpeqi	r16,at,1074
 c0103d0:	0c010ca0 	cmpeqi	r16,at,1074
 c0103d4:	0c010ca0 	cmpeqi	r16,at,1074
 c0103d8:	0c010ca0 	cmpeqi	r16,at,1074
 c0103dc:	0c010ca0 	cmpeqi	r16,at,1074
 c0103e0:	0c010ca0 	cmpeqi	r16,at,1074
 c0103e4:	0c010ca0 	cmpeqi	r16,at,1074
 c0103e8:	0c0108c8 	cmpgei	r16,at,1059
 c0103ec:	0c0108f8 	rdprs	r16,at,1059
 c0103f0:	0c010ca0 	cmpeqi	r16,at,1074
 c0103f4:	0c010ca0 	cmpeqi	r16,at,1074
 c0103f8:	0c010ca0 	cmpeqi	r16,at,1074
 c0103fc:	0c010c48 	cmpgei	r16,at,1073
 c010400:	0c0108f8 	rdprs	r16,at,1059
 c010404:	0c010ca0 	cmpeqi	r16,at,1074
 c010408:	0c010ca0 	cmpeqi	r16,at,1074
 c01040c:	0c0107a0 	cmpeqi	r16,at,1054
 c010410:	0c010ca0 	cmpeqi	r16,at,1074
 c010414:	0c0107b4 	orhi	r16,at,1054
 c010418:	0c0107ec 	andhi	r16,at,1055
 c01041c:	0c0104ec 	andhi	r16,at,1043
 c010420:	0c010794 	ori	r16,at,1054
 c010424:	0c010ca0 	cmpeqi	r16,at,1074
 c010428:	0c010b60 	cmpeqi	r16,at,1069
 c01042c:	0c010ca0 	cmpeqi	r16,at,1074
 c010430:	0c010bac 	andhi	r16,at,1070
 c010434:	0c010ca0 	cmpeqi	r16,at,1074
 c010438:	0c010ca0 	cmpeqi	r16,at,1074
 c01043c:	0c010870 	cmpltui	r16,at,1057
 c010440:	42000204 	addi	r8,r8,8
 c010444:	d8c02417 	ldw	r3,144(sp)
 c010448:	1c07883a 	add	r3,r3,r16
 c01044c:	d8c02415 	stw	r3,144(sp)
 c010450:	003f8c06 	br	c010284 <__alt_data_end+0xfc010284>
 c010454:	d9402017 	ldw	r5,128(sp)
 c010458:	d9002117 	ldw	r4,132(sp)
 c01045c:	c0097900 	call	c009790 <__swsetup_r>
 c010460:	1003c11e 	bne	r2,zero,c011368 <___vfiprintf_internal_r+0x1224>
 c010464:	d9402017 	ldw	r5,128(sp)
 c010468:	00c00284 	movi	r3,10
 c01046c:	2880030b 	ldhu	r2,12(r5)
 c010470:	1080068c 	andi	r2,r2,26
 c010474:	10ff581e 	bne	r2,r3,c0101d8 <__alt_data_end+0xfc0101d8>
 c010478:	d8c02017 	ldw	r3,128(sp)
 c01047c:	1880038f 	ldh	r2,14(r3)
 c010480:	103f5516 	blt	r2,zero,c0101d8 <__alt_data_end+0xfc0101d8>
 c010484:	d9c02217 	ldw	r7,136(sp)
 c010488:	d9002117 	ldw	r4,132(sp)
 c01048c:	a80d883a 	mov	r6,r21
 c010490:	180b883a 	mov	r5,r3
 c010494:	c01166c0 	call	c01166c <__sbprintf>
 c010498:	dfc03517 	ldw	ra,212(sp)
 c01049c:	df003417 	ldw	fp,208(sp)
 c0104a0:	ddc03317 	ldw	r23,204(sp)
 c0104a4:	dd803217 	ldw	r22,200(sp)
 c0104a8:	dd403117 	ldw	r21,196(sp)
 c0104ac:	dd003017 	ldw	r20,192(sp)
 c0104b0:	dcc02f17 	ldw	r19,188(sp)
 c0104b4:	dc802e17 	ldw	r18,184(sp)
 c0104b8:	dc402d17 	ldw	r17,180(sp)
 c0104bc:	dc002c17 	ldw	r16,176(sp)
 c0104c0:	dec03604 	addi	sp,sp,216
 c0104c4:	f800283a 	ret
 c0104c8:	c00b79c0 	call	c00b79c <__sinit>
 c0104cc:	003f2f06 	br	c01018c <__alt_data_end+0xfc01018c>
 c0104d0:	d8c02517 	ldw	r3,148(sp)
 c0104d4:	d8802215 	stw	r2,136(sp)
 c0104d8:	00c7c83a 	sub	r3,zero,r3
 c0104dc:	d8c02515 	stw	r3,148(sp)
 c0104e0:	8c400114 	ori	r17,r17,4
 c0104e4:	b0c00007 	ldb	r3,0(r22)
 c0104e8:	003f7306 	br	c0102b8 <__alt_data_end+0xfc0102b8>
 c0104ec:	00800c04 	movi	r2,48
 c0104f0:	d9402217 	ldw	r5,136(sp)
 c0104f4:	d8801d05 	stb	r2,116(sp)
 c0104f8:	00801e04 	movi	r2,120
 c0104fc:	d8801d45 	stb	r2,117(sp)
 c010500:	d8001d85 	stb	zero,118(sp)
 c010504:	b811883a 	mov	r8,r23
 c010508:	28c00104 	addi	r3,r5,4
 c01050c:	2cc00017 	ldw	r19,0(r5)
 c010510:	0029883a 	mov	r20,zero
 c010514:	88800094 	ori	r2,r17,2
 c010518:	80032516 	blt	r16,zero,c0111b0 <___vfiprintf_internal_r+0x106c>
 c01051c:	00bfdfc4 	movi	r2,-129
 c010520:	88a2703a 	and	r17,r17,r2
 c010524:	d8c02215 	stw	r3,136(sp)
 c010528:	8c400094 	ori	r17,r17,2
 c01052c:	98032a1e 	bne	r19,zero,c0111d8 <___vfiprintf_internal_r+0x1094>
 c010530:	008300b4 	movhi	r2,3074
 c010534:	10a1e804 	addi	r2,r2,-30816
 c010538:	d8802615 	stw	r2,152(sp)
 c01053c:	002b883a 	mov	r21,zero
 c010540:	8001741e 	bne	r16,zero,c010b14 <___vfiprintf_internal_r+0x9d0>
 c010544:	0021883a 	mov	r16,zero
 c010548:	0029883a 	mov	r20,zero
 c01054c:	ddc01a04 	addi	r23,sp,104
 c010550:	8027883a 	mov	r19,r16
 c010554:	8500010e 	bge	r16,r20,c01055c <___vfiprintf_internal_r+0x418>
 c010558:	a027883a 	mov	r19,r20
 c01055c:	ad403fcc 	andi	r21,r21,255
 c010560:	ad40201c 	xori	r21,r21,128
 c010564:	ad7fe004 	addi	r21,r21,-128
 c010568:	a8000126 	beq	r21,zero,c010570 <___vfiprintf_internal_r+0x42c>
 c01056c:	9cc00044 	addi	r19,r19,1
 c010570:	89c0008c 	andi	r7,r17,2
 c010574:	38000126 	beq	r7,zero,c01057c <___vfiprintf_internal_r+0x438>
 c010578:	9cc00084 	addi	r19,r19,2
 c01057c:	88c0210c 	andi	r3,r17,132
 c010580:	1801dd1e 	bne	r3,zero,c010cf8 <___vfiprintf_internal_r+0xbb4>
 c010584:	d9402517 	ldw	r5,148(sp)
 c010588:	2cebc83a 	sub	r21,r5,r19
 c01058c:	0541da0e 	bge	zero,r21,c010cf8 <___vfiprintf_internal_r+0xbb4>
 c010590:	07000404 	movi	fp,16
 c010594:	d8801c17 	ldw	r2,112(sp)
 c010598:	e543be0e 	bge	fp,r21,c011494 <___vfiprintf_internal_r+0x1350>
 c01059c:	014300b4 	movhi	r5,3074
 c0105a0:	29625d04 	addi	r5,r5,-30348
 c0105a4:	dc002715 	stw	r16,156(sp)
 c0105a8:	d9801b17 	ldw	r6,108(sp)
 c0105ac:	a821883a 	mov	r16,r21
 c0105b0:	d9402315 	stw	r5,140(sp)
 c0105b4:	028001c4 	movi	r10,7
 c0105b8:	d9c02915 	stw	r7,164(sp)
 c0105bc:	182b883a 	mov	r21,r3
 c0105c0:	00000506 	br	c0105d8 <___vfiprintf_internal_r+0x494>
 c0105c4:	31000084 	addi	r4,r6,2
 c0105c8:	42000204 	addi	r8,r8,8
 c0105cc:	180d883a 	mov	r6,r3
 c0105d0:	843ffc04 	addi	r16,r16,-16
 c0105d4:	e4000f0e 	bge	fp,r16,c010614 <___vfiprintf_internal_r+0x4d0>
 c0105d8:	010300b4 	movhi	r4,3074
 c0105dc:	10800404 	addi	r2,r2,16
 c0105e0:	30c00044 	addi	r3,r6,1
 c0105e4:	21225d04 	addi	r4,r4,-30348
 c0105e8:	41000015 	stw	r4,0(r8)
 c0105ec:	47000115 	stw	fp,4(r8)
 c0105f0:	d8801c15 	stw	r2,112(sp)
 c0105f4:	d8c01b15 	stw	r3,108(sp)
 c0105f8:	50fff20e 	bge	r10,r3,c0105c4 <__alt_data_end+0xfc0105c4>
 c0105fc:	1001b21e 	bne	r2,zero,c010cc8 <___vfiprintf_internal_r+0xb84>
 c010600:	843ffc04 	addi	r16,r16,-16
 c010604:	000d883a 	mov	r6,zero
 c010608:	01000044 	movi	r4,1
 c01060c:	d811883a 	mov	r8,sp
 c010610:	e43ff116 	blt	fp,r16,c0105d8 <__alt_data_end+0xfc0105d8>
 c010614:	a807883a 	mov	r3,r21
 c010618:	d9c02917 	ldw	r7,164(sp)
 c01061c:	802b883a 	mov	r21,r16
 c010620:	dc002717 	ldw	r16,156(sp)
 c010624:	d9402317 	ldw	r5,140(sp)
 c010628:	a885883a 	add	r2,r21,r2
 c01062c:	45400115 	stw	r21,4(r8)
 c010630:	41400015 	stw	r5,0(r8)
 c010634:	d8801c15 	stw	r2,112(sp)
 c010638:	d9001b15 	stw	r4,108(sp)
 c01063c:	014001c4 	movi	r5,7
 c010640:	29026216 	blt	r5,r4,c010fcc <___vfiprintf_internal_r+0xe88>
 c010644:	d9801d87 	ldb	r6,118(sp)
 c010648:	42000204 	addi	r8,r8,8
 c01064c:	21400044 	addi	r5,r4,1
 c010650:	3001ae1e 	bne	r6,zero,c010d0c <___vfiprintf_internal_r+0xbc8>
 c010654:	3801bb26 	beq	r7,zero,c010d44 <___vfiprintf_internal_r+0xc00>
 c010658:	d9001d04 	addi	r4,sp,116
 c01065c:	10800084 	addi	r2,r2,2
 c010660:	41000015 	stw	r4,0(r8)
 c010664:	01000084 	movi	r4,2
 c010668:	41000115 	stw	r4,4(r8)
 c01066c:	d8801c15 	stw	r2,112(sp)
 c010670:	d9401b15 	stw	r5,108(sp)
 c010674:	010001c4 	movi	r4,7
 c010678:	2142680e 	bge	r4,r5,c01101c <___vfiprintf_internal_r+0xed8>
 c01067c:	1002b11e 	bne	r2,zero,c011144 <___vfiprintf_internal_r+0x1000>
 c010680:	01802004 	movi	r6,128
 c010684:	01400044 	movi	r5,1
 c010688:	0009883a 	mov	r4,zero
 c01068c:	d811883a 	mov	r8,sp
 c010690:	1981ae1e 	bne	r3,r6,c010d4c <___vfiprintf_internal_r+0xc08>
 c010694:	d8c02517 	ldw	r3,148(sp)
 c010698:	1cf9c83a 	sub	fp,r3,r19
 c01069c:	0701ab0e 	bge	zero,fp,c010d4c <___vfiprintf_internal_r+0xc08>
 c0106a0:	05400404 	movi	r21,16
 c0106a4:	af03a90e 	bge	r21,fp,c01154c <___vfiprintf_internal_r+0x1408>
 c0106a8:	014300b4 	movhi	r5,3074
 c0106ac:	29625904 	addi	r5,r5,-30364
 c0106b0:	d9402315 	stw	r5,140(sp)
 c0106b4:	01c001c4 	movi	r7,7
 c0106b8:	00000506 	br	c0106d0 <___vfiprintf_internal_r+0x58c>
 c0106bc:	21800084 	addi	r6,r4,2
 c0106c0:	42000204 	addi	r8,r8,8
 c0106c4:	1809883a 	mov	r4,r3
 c0106c8:	e73ffc04 	addi	fp,fp,-16
 c0106cc:	af000d0e 	bge	r21,fp,c010704 <___vfiprintf_internal_r+0x5c0>
 c0106d0:	10800404 	addi	r2,r2,16
 c0106d4:	20c00044 	addi	r3,r4,1
 c0106d8:	44800015 	stw	r18,0(r8)
 c0106dc:	45400115 	stw	r21,4(r8)
 c0106e0:	d8801c15 	stw	r2,112(sp)
 c0106e4:	d8c01b15 	stw	r3,108(sp)
 c0106e8:	38fff40e 	bge	r7,r3,c0106bc <__alt_data_end+0xfc0106bc>
 c0106ec:	10022b1e 	bne	r2,zero,c010f9c <___vfiprintf_internal_r+0xe58>
 c0106f0:	e73ffc04 	addi	fp,fp,-16
 c0106f4:	01800044 	movi	r6,1
 c0106f8:	0009883a 	mov	r4,zero
 c0106fc:	d811883a 	mov	r8,sp
 c010700:	af3ff316 	blt	r21,fp,c0106d0 <__alt_data_end+0xfc0106d0>
 c010704:	d8c02317 	ldw	r3,140(sp)
 c010708:	1705883a 	add	r2,r2,fp
 c01070c:	47000115 	stw	fp,4(r8)
 c010710:	40c00015 	stw	r3,0(r8)
 c010714:	d8801c15 	stw	r2,112(sp)
 c010718:	d9801b15 	stw	r6,108(sp)
 c01071c:	00c001c4 	movi	r3,7
 c010720:	19829416 	blt	r3,r6,c011174 <___vfiprintf_internal_r+0x1030>
 c010724:	8521c83a 	sub	r16,r16,r20
 c010728:	42000204 	addi	r8,r8,8
 c01072c:	31400044 	addi	r5,r6,1
 c010730:	3009883a 	mov	r4,r6
 c010734:	04018716 	blt	zero,r16,c010d54 <___vfiprintf_internal_r+0xc10>
 c010738:	a085883a 	add	r2,r20,r2
 c01073c:	45c00015 	stw	r23,0(r8)
 c010740:	45000115 	stw	r20,4(r8)
 c010744:	d8801c15 	stw	r2,112(sp)
 c010748:	d9401b15 	stw	r5,108(sp)
 c01074c:	00c001c4 	movi	r3,7
 c010750:	1941c20e 	bge	r3,r5,c010e5c <___vfiprintf_internal_r+0xd18>
 c010754:	1002531e 	bne	r2,zero,c0110a4 <___vfiprintf_internal_r+0xf60>
 c010758:	d8001b15 	stw	zero,108(sp)
 c01075c:	8c40010c 	andi	r17,r17,4
 c010760:	88023226 	beq	r17,zero,c01102c <___vfiprintf_internal_r+0xee8>
 c010764:	d9002517 	ldw	r4,148(sp)
 c010768:	24e3c83a 	sub	r17,r4,r19
 c01076c:	04432916 	blt	zero,r17,c011414 <___vfiprintf_internal_r+0x12d0>
 c010770:	d8802517 	ldw	r2,148(sp)
 c010774:	14c0010e 	bge	r2,r19,c01077c <___vfiprintf_internal_r+0x638>
 c010778:	9805883a 	mov	r2,r19
 c01077c:	d8c02417 	ldw	r3,144(sp)
 c010780:	1887883a 	add	r3,r3,r2
 c010784:	d8c02415 	stw	r3,144(sp)
 c010788:	d8001b15 	stw	zero,108(sp)
 c01078c:	d811883a 	mov	r8,sp
 c010790:	003ea006 	br	c010214 <__alt_data_end+0xfc010214>
 c010794:	8c400814 	ori	r17,r17,32
 c010798:	b0c00007 	ldb	r3,0(r22)
 c01079c:	003ec606 	br	c0102b8 <__alt_data_end+0xfc0102b8>
 c0107a0:	b0c00007 	ldb	r3,0(r22)
 c0107a4:	00801b04 	movi	r2,108
 c0107a8:	18832026 	beq	r3,r2,c01142c <___vfiprintf_internal_r+0x12e8>
 c0107ac:	8c400414 	ori	r17,r17,16
 c0107b0:	003ec106 	br	c0102b8 <__alt_data_end+0xfc0102b8>
 c0107b4:	9cc03fcc 	andi	r19,r19,255
 c0107b8:	b811883a 	mov	r8,r23
 c0107bc:	9803981e 	bne	r19,zero,c011620 <___vfiprintf_internal_r+0x14dc>
 c0107c0:	8880080c 	andi	r2,r17,32
 c0107c4:	1002be26 	beq	r2,zero,c0112c0 <___vfiprintf_internal_r+0x117c>
 c0107c8:	d9002217 	ldw	r4,136(sp)
 c0107cc:	d9402417 	ldw	r5,144(sp)
 c0107d0:	20800017 	ldw	r2,0(r4)
 c0107d4:	2807d7fa 	srai	r3,r5,31
 c0107d8:	21000104 	addi	r4,r4,4
 c0107dc:	d9002215 	stw	r4,136(sp)
 c0107e0:	11400015 	stw	r5,0(r2)
 c0107e4:	10c00115 	stw	r3,4(r2)
 c0107e8:	003e8a06 	br	c010214 <__alt_data_end+0xfc010214>
 c0107ec:	9cc03fcc 	andi	r19,r19,255
 c0107f0:	b811883a 	mov	r8,r23
 c0107f4:	9803871e 	bne	r19,zero,c011614 <___vfiprintf_internal_r+0x14d0>
 c0107f8:	8880080c 	andi	r2,r17,32
 c0107fc:	10009a26 	beq	r2,zero,c010a68 <___vfiprintf_internal_r+0x924>
 c010800:	d9002217 	ldw	r4,136(sp)
 c010804:	d8001d85 	stb	zero,118(sp)
 c010808:	20800204 	addi	r2,r4,8
 c01080c:	24c00017 	ldw	r19,0(r4)
 c010810:	25000117 	ldw	r20,4(r4)
 c010814:	8002a416 	blt	r16,zero,c0112a8 <___vfiprintf_internal_r+0x1164>
 c010818:	013fdfc4 	movi	r4,-129
 c01081c:	9d06b03a 	or	r3,r19,r20
 c010820:	d8802215 	stw	r2,136(sp)
 c010824:	8922703a 	and	r17,r17,r4
 c010828:	18009b26 	beq	r3,zero,c010a98 <___vfiprintf_internal_r+0x954>
 c01082c:	002b883a 	mov	r21,zero
 c010830:	ddc01a04 	addi	r23,sp,104
 c010834:	9806d0fa 	srli	r3,r19,3
 c010838:	a008977a 	slli	r4,r20,29
 c01083c:	a028d0fa 	srli	r20,r20,3
 c010840:	9cc001cc 	andi	r19,r19,7
 c010844:	98800c04 	addi	r2,r19,48
 c010848:	bdffffc4 	addi	r23,r23,-1
 c01084c:	20e6b03a 	or	r19,r4,r3
 c010850:	b8800005 	stb	r2,0(r23)
 c010854:	9d06b03a 	or	r3,r19,r20
 c010858:	183ff61e 	bne	r3,zero,c010834 <__alt_data_end+0xfc010834>
 c01085c:	88c0004c 	andi	r3,r17,1
 c010860:	18021f1e 	bne	r3,zero,c0110e0 <___vfiprintf_internal_r+0xf9c>
 c010864:	d9401e17 	ldw	r5,120(sp)
 c010868:	2de9c83a 	sub	r20,r5,r23
 c01086c:	003f3806 	br	c010550 <__alt_data_end+0xfc010550>
 c010870:	9cc03fcc 	andi	r19,r19,255
 c010874:	b811883a 	mov	r8,r23
 c010878:	98034f1e 	bne	r19,zero,c0115b8 <___vfiprintf_internal_r+0x1474>
 c01087c:	008300b4 	movhi	r2,3074
 c010880:	10a1e804 	addi	r2,r2,-30816
 c010884:	d8802615 	stw	r2,152(sp)
 c010888:	8880080c 	andi	r2,r17,32
 c01088c:	1000ac26 	beq	r2,zero,c010b40 <___vfiprintf_internal_r+0x9fc>
 c010890:	d9002217 	ldw	r4,136(sp)
 c010894:	24c00017 	ldw	r19,0(r4)
 c010898:	25000117 	ldw	r20,4(r4)
 c01089c:	21000204 	addi	r4,r4,8
 c0108a0:	d9002215 	stw	r4,136(sp)
 c0108a4:	8880004c 	andi	r2,r17,1
 c0108a8:	1001e726 	beq	r2,zero,c011048 <___vfiprintf_internal_r+0xf04>
 c0108ac:	9d04b03a 	or	r2,r19,r20
 c0108b0:	10025c1e 	bne	r2,zero,c011224 <___vfiprintf_internal_r+0x10e0>
 c0108b4:	d8001d85 	stb	zero,118(sp)
 c0108b8:	80024416 	blt	r16,zero,c0111cc <___vfiprintf_internal_r+0x1088>
 c0108bc:	00bfdfc4 	movi	r2,-129
 c0108c0:	88a2703a 	and	r17,r17,r2
 c0108c4:	003f1d06 	br	c01053c <__alt_data_end+0xfc01053c>
 c0108c8:	d8c02217 	ldw	r3,136(sp)
 c0108cc:	04c00044 	movi	r19,1
 c0108d0:	b811883a 	mov	r8,r23
 c0108d4:	18800017 	ldw	r2,0(r3)
 c0108d8:	18c00104 	addi	r3,r3,4
 c0108dc:	d8001d85 	stb	zero,118(sp)
 c0108e0:	d8801005 	stb	r2,64(sp)
 c0108e4:	d8c02215 	stw	r3,136(sp)
 c0108e8:	9829883a 	mov	r20,r19
 c0108ec:	ddc01004 	addi	r23,sp,64
 c0108f0:	0021883a 	mov	r16,zero
 c0108f4:	003f1e06 	br	c010570 <__alt_data_end+0xfc010570>
 c0108f8:	9cc03fcc 	andi	r19,r19,255
 c0108fc:	b811883a 	mov	r8,r23
 c010900:	9803331e 	bne	r19,zero,c0115d0 <___vfiprintf_internal_r+0x148c>
 c010904:	8880080c 	andi	r2,r17,32
 c010908:	10004826 	beq	r2,zero,c010a2c <___vfiprintf_internal_r+0x8e8>
 c01090c:	d9002217 	ldw	r4,136(sp)
 c010910:	20800117 	ldw	r2,4(r4)
 c010914:	24c00017 	ldw	r19,0(r4)
 c010918:	21000204 	addi	r4,r4,8
 c01091c:	d9002215 	stw	r4,136(sp)
 c010920:	1029883a 	mov	r20,r2
 c010924:	10024c16 	blt	r2,zero,c011258 <___vfiprintf_internal_r+0x1114>
 c010928:	dd401d83 	ldbu	r21,118(sp)
 c01092c:	80007116 	blt	r16,zero,c010af4 <___vfiprintf_internal_r+0x9b0>
 c010930:	00ffdfc4 	movi	r3,-129
 c010934:	9d04b03a 	or	r2,r19,r20
 c010938:	88e2703a 	and	r17,r17,r3
 c01093c:	1000d126 	beq	r2,zero,c010c84 <___vfiprintf_internal_r+0xb40>
 c010940:	a0023526 	beq	r20,zero,c011218 <___vfiprintf_internal_r+0x10d4>
 c010944:	ddc01a04 	addi	r23,sp,104
 c010948:	4039883a 	mov	fp,r8
 c01094c:	9809883a 	mov	r4,r19
 c010950:	a00b883a 	mov	r5,r20
 c010954:	01800284 	movi	r6,10
 c010958:	000f883a 	mov	r7,zero
 c01095c:	c01277c0 	call	c01277c <__umoddi3>
 c010960:	10800c04 	addi	r2,r2,48
 c010964:	bdffffc4 	addi	r23,r23,-1
 c010968:	9809883a 	mov	r4,r19
 c01096c:	a00b883a 	mov	r5,r20
 c010970:	b8800005 	stb	r2,0(r23)
 c010974:	01800284 	movi	r6,10
 c010978:	000f883a 	mov	r7,zero
 c01097c:	c0121800 	call	c012180 <__udivdi3>
 c010980:	1027883a 	mov	r19,r2
 c010984:	10c4b03a 	or	r2,r2,r3
 c010988:	1829883a 	mov	r20,r3
 c01098c:	103fef1e 	bne	r2,zero,c01094c <__alt_data_end+0xfc01094c>
 c010990:	d9001e17 	ldw	r4,120(sp)
 c010994:	e011883a 	mov	r8,fp
 c010998:	25e9c83a 	sub	r20,r4,r23
 c01099c:	003eec06 	br	c010550 <__alt_data_end+0xfc010550>
 c0109a0:	d8802307 	ldb	r2,140(sp)
 c0109a4:	1002361e 	bne	r2,zero,c011280 <___vfiprintf_internal_r+0x113c>
 c0109a8:	00c00804 	movi	r3,32
 c0109ac:	d8c02305 	stb	r3,140(sp)
 c0109b0:	04c00044 	movi	r19,1
 c0109b4:	b0c00007 	ldb	r3,0(r22)
 c0109b8:	003e3f06 	br	c0102b8 <__alt_data_end+0xfc0102b8>
 c0109bc:	8c400054 	ori	r17,r17,1
 c0109c0:	b0c00007 	ldb	r3,0(r22)
 c0109c4:	003e3c06 	br	c0102b8 <__alt_data_end+0xfc0102b8>
 c0109c8:	8c402014 	ori	r17,r17,128
 c0109cc:	b0c00007 	ldb	r3,0(r22)
 c0109d0:	003e3906 	br	c0102b8 <__alt_data_end+0xfc0102b8>
 c0109d4:	dc002715 	stw	r16,156(sp)
 c0109d8:	d8002515 	stw	zero,148(sp)
 c0109dc:	1f3ff404 	addi	fp,r3,-48
 c0109e0:	0009883a 	mov	r4,zero
 c0109e4:	b021883a 	mov	r16,r22
 c0109e8:	01400284 	movi	r5,10
 c0109ec:	c004de00 	call	c004de0 <__mulsi3>
 c0109f0:	80c00007 	ldb	r3,0(r16)
 c0109f4:	e089883a 	add	r4,fp,r2
 c0109f8:	b5800044 	addi	r22,r22,1
 c0109fc:	1f3ff404 	addi	fp,r3,-48
 c010a00:	b021883a 	mov	r16,r22
 c010a04:	af3ff82e 	bgeu	r21,fp,c0109e8 <__alt_data_end+0xfc0109e8>
 c010a08:	d9002515 	stw	r4,148(sp)
 c010a0c:	dc002717 	ldw	r16,156(sp)
 c010a10:	003e2a06 	br	c0102bc <__alt_data_end+0xfc0102bc>
 c010a14:	9cc03fcc 	andi	r19,r19,255
 c010a18:	b811883a 	mov	r8,r23
 c010a1c:	9802e91e 	bne	r19,zero,c0115c4 <___vfiprintf_internal_r+0x1480>
 c010a20:	8c400414 	ori	r17,r17,16
 c010a24:	8880080c 	andi	r2,r17,32
 c010a28:	103fb81e 	bne	r2,zero,c01090c <__alt_data_end+0xfc01090c>
 c010a2c:	8880040c 	andi	r2,r17,16
 c010a30:	10022e26 	beq	r2,zero,c0112ec <___vfiprintf_internal_r+0x11a8>
 c010a34:	d9402217 	ldw	r5,136(sp)
 c010a38:	2cc00017 	ldw	r19,0(r5)
 c010a3c:	29400104 	addi	r5,r5,4
 c010a40:	d9402215 	stw	r5,136(sp)
 c010a44:	9829d7fa 	srai	r20,r19,31
 c010a48:	a005883a 	mov	r2,r20
 c010a4c:	003fb506 	br	c010924 <__alt_data_end+0xfc010924>
 c010a50:	9cc03fcc 	andi	r19,r19,255
 c010a54:	b811883a 	mov	r8,r23
 c010a58:	9802fa1e 	bne	r19,zero,c011644 <___vfiprintf_internal_r+0x1500>
 c010a5c:	8c400414 	ori	r17,r17,16
 c010a60:	8880080c 	andi	r2,r17,32
 c010a64:	103f661e 	bne	r2,zero,c010800 <__alt_data_end+0xfc010800>
 c010a68:	8880040c 	andi	r2,r17,16
 c010a6c:	10020626 	beq	r2,zero,c011288 <___vfiprintf_internal_r+0x1144>
 c010a70:	d9402217 	ldw	r5,136(sp)
 c010a74:	d8001d85 	stb	zero,118(sp)
 c010a78:	0029883a 	mov	r20,zero
 c010a7c:	28800104 	addi	r2,r5,4
 c010a80:	2cc00017 	ldw	r19,0(r5)
 c010a84:	80020816 	blt	r16,zero,c0112a8 <___vfiprintf_internal_r+0x1164>
 c010a88:	00ffdfc4 	movi	r3,-129
 c010a8c:	d8802215 	stw	r2,136(sp)
 c010a90:	88e2703a 	and	r17,r17,r3
 c010a94:	983f651e 	bne	r19,zero,c01082c <__alt_data_end+0xfc01082c>
 c010a98:	002b883a 	mov	r21,zero
 c010a9c:	8002cf26 	beq	r16,zero,c0115dc <___vfiprintf_internal_r+0x1498>
 c010aa0:	0027883a 	mov	r19,zero
 c010aa4:	0029883a 	mov	r20,zero
 c010aa8:	003f6106 	br	c010830 <__alt_data_end+0xfc010830>
 c010aac:	9cc03fcc 	andi	r19,r19,255
 c010ab0:	b811883a 	mov	r8,r23
 c010ab4:	9802e01e 	bne	r19,zero,c011638 <___vfiprintf_internal_r+0x14f4>
 c010ab8:	8c400414 	ori	r17,r17,16
 c010abc:	8880080c 	andi	r2,r17,32
 c010ac0:	1000641e 	bne	r2,zero,c010c54 <___vfiprintf_internal_r+0xb10>
 c010ac4:	8880040c 	andi	r2,r17,16
 c010ac8:	1001c81e 	bne	r2,zero,c0111ec <___vfiprintf_internal_r+0x10a8>
 c010acc:	8880100c 	andi	r2,r17,64
 c010ad0:	d8001d85 	stb	zero,118(sp)
 c010ad4:	1002281e 	bne	r2,zero,c011378 <___vfiprintf_internal_r+0x1234>
 c010ad8:	d9002217 	ldw	r4,136(sp)
 c010adc:	0029883a 	mov	r20,zero
 c010ae0:	20800104 	addi	r2,r4,4
 c010ae4:	24c00017 	ldw	r19,0(r4)
 c010ae8:	8001c60e 	bge	r16,zero,c011204 <___vfiprintf_internal_r+0x10c0>
 c010aec:	d8802215 	stw	r2,136(sp)
 c010af0:	002b883a 	mov	r21,zero
 c010af4:	9d04b03a 	or	r2,r19,r20
 c010af8:	103f911e 	bne	r2,zero,c010940 <__alt_data_end+0xfc010940>
 c010afc:	00800044 	movi	r2,1
 c010b00:	10803fcc 	andi	r2,r2,255
 c010b04:	00c00044 	movi	r3,1
 c010b08:	10c05f26 	beq	r2,r3,c010c88 <___vfiprintf_internal_r+0xb44>
 c010b0c:	00c00084 	movi	r3,2
 c010b10:	10ffe31e 	bne	r2,r3,c010aa0 <__alt_data_end+0xfc010aa0>
 c010b14:	0027883a 	mov	r19,zero
 c010b18:	0029883a 	mov	r20,zero
 c010b1c:	00015106 	br	c011064 <___vfiprintf_internal_r+0xf20>
 c010b20:	9cc03fcc 	andi	r19,r19,255
 c010b24:	b811883a 	mov	r8,r23
 c010b28:	9802c01e 	bne	r19,zero,c01162c <___vfiprintf_internal_r+0x14e8>
 c010b2c:	014300b4 	movhi	r5,3074
 c010b30:	2961e304 	addi	r5,r5,-30836
 c010b34:	d9402615 	stw	r5,152(sp)
 c010b38:	8880080c 	andi	r2,r17,32
 c010b3c:	103f541e 	bne	r2,zero,c010890 <__alt_data_end+0xfc010890>
 c010b40:	8880040c 	andi	r2,r17,16
 c010b44:	1001f226 	beq	r2,zero,c011310 <___vfiprintf_internal_r+0x11cc>
 c010b48:	d9402217 	ldw	r5,136(sp)
 c010b4c:	0029883a 	mov	r20,zero
 c010b50:	2cc00017 	ldw	r19,0(r5)
 c010b54:	29400104 	addi	r5,r5,4
 c010b58:	d9402215 	stw	r5,136(sp)
 c010b5c:	003f5106 	br	c0108a4 <__alt_data_end+0xfc0108a4>
 c010b60:	d8c02217 	ldw	r3,136(sp)
 c010b64:	b811883a 	mov	r8,r23
 c010b68:	d8001d85 	stb	zero,118(sp)
 c010b6c:	1dc00017 	ldw	r23,0(r3)
 c010b70:	1f000104 	addi	fp,r3,4
 c010b74:	b8025926 	beq	r23,zero,c0114dc <___vfiprintf_internal_r+0x1398>
 c010b78:	80023316 	blt	r16,zero,c011448 <___vfiprintf_internal_r+0x1304>
 c010b7c:	800d883a 	mov	r6,r16
 c010b80:	000b883a 	mov	r5,zero
 c010b84:	b809883a 	mov	r4,r23
 c010b88:	da002a15 	stw	r8,168(sp)
 c010b8c:	c00cd140 	call	c00cd14 <memchr>
 c010b90:	da002a17 	ldw	r8,168(sp)
 c010b94:	10026826 	beq	r2,zero,c011538 <___vfiprintf_internal_r+0x13f4>
 c010b98:	15e9c83a 	sub	r20,r2,r23
 c010b9c:	dd401d83 	ldbu	r21,118(sp)
 c010ba0:	df002215 	stw	fp,136(sp)
 c010ba4:	0021883a 	mov	r16,zero
 c010ba8:	003e6906 	br	c010550 <__alt_data_end+0xfc010550>
 c010bac:	9cc03fcc 	andi	r19,r19,255
 c010bb0:	b811883a 	mov	r8,r23
 c010bb4:	983fc126 	beq	r19,zero,c010abc <__alt_data_end+0xfc010abc>
 c010bb8:	d8c02303 	ldbu	r3,140(sp)
 c010bbc:	d8c01d85 	stb	r3,118(sp)
 c010bc0:	003fbe06 	br	c010abc <__alt_data_end+0xfc010abc>
 c010bc4:	d9002217 	ldw	r4,136(sp)
 c010bc8:	d9402217 	ldw	r5,136(sp)
 c010bcc:	21000017 	ldw	r4,0(r4)
 c010bd0:	28800104 	addi	r2,r5,4
 c010bd4:	d9002515 	stw	r4,148(sp)
 c010bd8:	203e3d16 	blt	r4,zero,c0104d0 <__alt_data_end+0xfc0104d0>
 c010bdc:	d8802215 	stw	r2,136(sp)
 c010be0:	b0c00007 	ldb	r3,0(r22)
 c010be4:	003db406 	br	c0102b8 <__alt_data_end+0xfc0102b8>
 c010be8:	00c00ac4 	movi	r3,43
 c010bec:	d8c02305 	stb	r3,140(sp)
 c010bf0:	04c00044 	movi	r19,1
 c010bf4:	b0c00007 	ldb	r3,0(r22)
 c010bf8:	003daf06 	br	c0102b8 <__alt_data_end+0xfc0102b8>
 c010bfc:	b0c00007 	ldb	r3,0(r22)
 c010c00:	01000a84 	movi	r4,42
 c010c04:	b4000044 	addi	r16,r22,1
 c010c08:	19025e26 	beq	r3,r4,c011584 <___vfiprintf_internal_r+0x1440>
 c010c0c:	1f3ff404 	addi	fp,r3,-48
 c010c10:	0009883a 	mov	r4,zero
 c010c14:	af025236 	bltu	r21,fp,c011560 <___vfiprintf_internal_r+0x141c>
 c010c18:	01400284 	movi	r5,10
 c010c1c:	c004de00 	call	c004de0 <__mulsi3>
 c010c20:	80c00007 	ldb	r3,0(r16)
 c010c24:	1709883a 	add	r4,r2,fp
 c010c28:	85800044 	addi	r22,r16,1
 c010c2c:	1f3ff404 	addi	fp,r3,-48
 c010c30:	b021883a 	mov	r16,r22
 c010c34:	af3ff82e 	bgeu	r21,fp,c010c18 <__alt_data_end+0xfc010c18>
 c010c38:	2021883a 	mov	r16,r4
 c010c3c:	203d9f0e 	bge	r4,zero,c0102bc <__alt_data_end+0xfc0102bc>
 c010c40:	043fffc4 	movi	r16,-1
 c010c44:	003d9d06 	br	c0102bc <__alt_data_end+0xfc0102bc>
 c010c48:	8c401014 	ori	r17,r17,64
 c010c4c:	b0c00007 	ldb	r3,0(r22)
 c010c50:	003d9906 	br	c0102b8 <__alt_data_end+0xfc0102b8>
 c010c54:	d9002217 	ldw	r4,136(sp)
 c010c58:	d8001d85 	stb	zero,118(sp)
 c010c5c:	20c00204 	addi	r3,r4,8
 c010c60:	24c00017 	ldw	r19,0(r4)
 c010c64:	25000117 	ldw	r20,4(r4)
 c010c68:	8001e716 	blt	r16,zero,c011408 <___vfiprintf_internal_r+0x12c4>
 c010c6c:	013fdfc4 	movi	r4,-129
 c010c70:	9d04b03a 	or	r2,r19,r20
 c010c74:	d8c02215 	stw	r3,136(sp)
 c010c78:	8922703a 	and	r17,r17,r4
 c010c7c:	002b883a 	mov	r21,zero
 c010c80:	103f2f1e 	bne	r2,zero,c010940 <__alt_data_end+0xfc010940>
 c010c84:	803e2f26 	beq	r16,zero,c010544 <__alt_data_end+0xfc010544>
 c010c88:	0027883a 	mov	r19,zero
 c010c8c:	9cc00c04 	addi	r19,r19,48
 c010c90:	dcc019c5 	stb	r19,103(sp)
 c010c94:	dd002817 	ldw	r20,160(sp)
 c010c98:	ddc019c4 	addi	r23,sp,103
 c010c9c:	003e2c06 	br	c010550 <__alt_data_end+0xfc010550>
 c010ca0:	9cc03fcc 	andi	r19,r19,255
 c010ca4:	b811883a 	mov	r8,r23
 c010ca8:	9802571e 	bne	r19,zero,c011608 <___vfiprintf_internal_r+0x14c4>
 c010cac:	18005726 	beq	r3,zero,c010e0c <___vfiprintf_internal_r+0xcc8>
 c010cb0:	04c00044 	movi	r19,1
 c010cb4:	d8c01005 	stb	r3,64(sp)
 c010cb8:	d8001d85 	stb	zero,118(sp)
 c010cbc:	9829883a 	mov	r20,r19
 c010cc0:	ddc01004 	addi	r23,sp,64
 c010cc4:	003f0a06 	br	c0108f0 <__alt_data_end+0xfc0108f0>
 c010cc8:	d9402017 	ldw	r5,128(sp)
 c010ccc:	d9002117 	ldw	r4,132(sp)
 c010cd0:	d9801a04 	addi	r6,sp,104
 c010cd4:	da802a15 	stw	r10,168(sp)
 c010cd8:	c0100300 	call	c010030 <__sprint_r.part.0>
 c010cdc:	da802a17 	ldw	r10,168(sp)
 c010ce0:	1000501e 	bne	r2,zero,c010e24 <___vfiprintf_internal_r+0xce0>
 c010ce4:	d9801b17 	ldw	r6,108(sp)
 c010ce8:	d8801c17 	ldw	r2,112(sp)
 c010cec:	d811883a 	mov	r8,sp
 c010cf0:	31000044 	addi	r4,r6,1
 c010cf4:	003e3606 	br	c0105d0 <__alt_data_end+0xfc0105d0>
 c010cf8:	d9001b17 	ldw	r4,108(sp)
 c010cfc:	d8801c17 	ldw	r2,112(sp)
 c010d00:	21400044 	addi	r5,r4,1
 c010d04:	d9801d87 	ldb	r6,118(sp)
 c010d08:	303e5226 	beq	r6,zero,c010654 <__alt_data_end+0xfc010654>
 c010d0c:	01800044 	movi	r6,1
 c010d10:	d9001d84 	addi	r4,sp,118
 c010d14:	1185883a 	add	r2,r2,r6
 c010d18:	41000015 	stw	r4,0(r8)
 c010d1c:	41800115 	stw	r6,4(r8)
 c010d20:	d8801c15 	stw	r2,112(sp)
 c010d24:	d9401b15 	stw	r5,108(sp)
 c010d28:	010001c4 	movi	r4,7
 c010d2c:	2140b00e 	bge	r4,r5,c010ff0 <___vfiprintf_internal_r+0xeac>
 c010d30:	1000f61e 	bne	r2,zero,c01110c <___vfiprintf_internal_r+0xfc8>
 c010d34:	3800b31e 	bne	r7,zero,c011004 <___vfiprintf_internal_r+0xec0>
 c010d38:	0009883a 	mov	r4,zero
 c010d3c:	300b883a 	mov	r5,r6
 c010d40:	d811883a 	mov	r8,sp
 c010d44:	01802004 	movi	r6,128
 c010d48:	19be5226 	beq	r3,r6,c010694 <__alt_data_end+0xfc010694>
 c010d4c:	8521c83a 	sub	r16,r16,r20
 c010d50:	043e790e 	bge	zero,r16,c010738 <__alt_data_end+0xfc010738>
 c010d54:	05400404 	movi	r21,16
 c010d58:	ac01b00e 	bge	r21,r16,c01141c <___vfiprintf_internal_r+0x12d8>
 c010d5c:	014300b4 	movhi	r5,3074
 c010d60:	29625904 	addi	r5,r5,-30364
 c010d64:	d9402315 	stw	r5,140(sp)
 c010d68:	070001c4 	movi	fp,7
 c010d6c:	00000506 	br	c010d84 <___vfiprintf_internal_r+0xc40>
 c010d70:	21400084 	addi	r5,r4,2
 c010d74:	42000204 	addi	r8,r8,8
 c010d78:	1809883a 	mov	r4,r3
 c010d7c:	843ffc04 	addi	r16,r16,-16
 c010d80:	ac000d0e 	bge	r21,r16,c010db8 <___vfiprintf_internal_r+0xc74>
 c010d84:	10800404 	addi	r2,r2,16
 c010d88:	20c00044 	addi	r3,r4,1
 c010d8c:	44800015 	stw	r18,0(r8)
 c010d90:	45400115 	stw	r21,4(r8)
 c010d94:	d8801c15 	stw	r2,112(sp)
 c010d98:	d8c01b15 	stw	r3,108(sp)
 c010d9c:	e0fff40e 	bge	fp,r3,c010d70 <__alt_data_end+0xfc010d70>
 c010da0:	1000101e 	bne	r2,zero,c010de4 <___vfiprintf_internal_r+0xca0>
 c010da4:	843ffc04 	addi	r16,r16,-16
 c010da8:	01400044 	movi	r5,1
 c010dac:	0009883a 	mov	r4,zero
 c010db0:	d811883a 	mov	r8,sp
 c010db4:	ac3ff316 	blt	r21,r16,c010d84 <__alt_data_end+0xfc010d84>
 c010db8:	d8c02317 	ldw	r3,140(sp)
 c010dbc:	1405883a 	add	r2,r2,r16
 c010dc0:	44000115 	stw	r16,4(r8)
 c010dc4:	40c00015 	stw	r3,0(r8)
 c010dc8:	d8801c15 	stw	r2,112(sp)
 c010dcc:	d9401b15 	stw	r5,108(sp)
 c010dd0:	00c001c4 	movi	r3,7
 c010dd4:	19401916 	blt	r3,r5,c010e3c <___vfiprintf_internal_r+0xcf8>
 c010dd8:	42000204 	addi	r8,r8,8
 c010ddc:	29400044 	addi	r5,r5,1
 c010de0:	003e5506 	br	c010738 <__alt_data_end+0xfc010738>
 c010de4:	d9402017 	ldw	r5,128(sp)
 c010de8:	d9002117 	ldw	r4,132(sp)
 c010dec:	d9801a04 	addi	r6,sp,104
 c010df0:	c0100300 	call	c010030 <__sprint_r.part.0>
 c010df4:	10000b1e 	bne	r2,zero,c010e24 <___vfiprintf_internal_r+0xce0>
 c010df8:	d9001b17 	ldw	r4,108(sp)
 c010dfc:	d8801c17 	ldw	r2,112(sp)
 c010e00:	d811883a 	mov	r8,sp
 c010e04:	21400044 	addi	r5,r4,1
 c010e08:	003fdc06 	br	c010d7c <__alt_data_end+0xfc010d7c>
 c010e0c:	d8801c17 	ldw	r2,112(sp)
 c010e10:	10000426 	beq	r2,zero,c010e24 <___vfiprintf_internal_r+0xce0>
 c010e14:	d9402017 	ldw	r5,128(sp)
 c010e18:	d9002117 	ldw	r4,132(sp)
 c010e1c:	d9801a04 	addi	r6,sp,104
 c010e20:	c0100300 	call	c010030 <__sprint_r.part.0>
 c010e24:	d9402017 	ldw	r5,128(sp)
 c010e28:	2880030b 	ldhu	r2,12(r5)
 c010e2c:	1080100c 	andi	r2,r2,64
 c010e30:	10014d1e 	bne	r2,zero,c011368 <___vfiprintf_internal_r+0x1224>
 c010e34:	d8802417 	ldw	r2,144(sp)
 c010e38:	003d9706 	br	c010498 <__alt_data_end+0xfc010498>
 c010e3c:	1000d21e 	bne	r2,zero,c011188 <___vfiprintf_internal_r+0x1044>
 c010e40:	00c00044 	movi	r3,1
 c010e44:	a005883a 	mov	r2,r20
 c010e48:	ddc00015 	stw	r23,0(sp)
 c010e4c:	dd000115 	stw	r20,4(sp)
 c010e50:	dd001c15 	stw	r20,112(sp)
 c010e54:	d8c01b15 	stw	r3,108(sp)
 c010e58:	d811883a 	mov	r8,sp
 c010e5c:	42000204 	addi	r8,r8,8
 c010e60:	8c40010c 	andi	r17,r17,4
 c010e64:	88004026 	beq	r17,zero,c010f68 <___vfiprintf_internal_r+0xe24>
 c010e68:	d9002517 	ldw	r4,148(sp)
 c010e6c:	24e3c83a 	sub	r17,r4,r19
 c010e70:	04403d0e 	bge	zero,r17,c010f68 <___vfiprintf_internal_r+0xe24>
 c010e74:	04000404 	movi	r16,16
 c010e78:	8441a90e 	bge	r16,r17,c011520 <___vfiprintf_internal_r+0x13dc>
 c010e7c:	00c300b4 	movhi	r3,3074
 c010e80:	18e25d04 	addi	r3,r3,-30348
 c010e84:	d9001b17 	ldw	r4,108(sp)
 c010e88:	d8c02315 	stw	r3,140(sp)
 c010e8c:	050001c4 	movi	r20,7
 c010e90:	dd402117 	ldw	r21,132(sp)
 c010e94:	ddc02017 	ldw	r23,128(sp)
 c010e98:	00000506 	br	c010eb0 <___vfiprintf_internal_r+0xd6c>
 c010e9c:	21400084 	addi	r5,r4,2
 c010ea0:	42000204 	addi	r8,r8,8
 c010ea4:	1809883a 	mov	r4,r3
 c010ea8:	8c7ffc04 	addi	r17,r17,-16
 c010eac:	84400f0e 	bge	r16,r17,c010eec <___vfiprintf_internal_r+0xda8>
 c010eb0:	014300b4 	movhi	r5,3074
 c010eb4:	10800404 	addi	r2,r2,16
 c010eb8:	20c00044 	addi	r3,r4,1
 c010ebc:	29625d04 	addi	r5,r5,-30348
 c010ec0:	41400015 	stw	r5,0(r8)
 c010ec4:	44000115 	stw	r16,4(r8)
 c010ec8:	d8801c15 	stw	r2,112(sp)
 c010ecc:	d8c01b15 	stw	r3,108(sp)
 c010ed0:	a0fff20e 	bge	r20,r3,c010e9c <__alt_data_end+0xfc010e9c>
 c010ed4:	1000141e 	bne	r2,zero,c010f28 <___vfiprintf_internal_r+0xde4>
 c010ed8:	8c7ffc04 	addi	r17,r17,-16
 c010edc:	01400044 	movi	r5,1
 c010ee0:	0009883a 	mov	r4,zero
 c010ee4:	d811883a 	mov	r8,sp
 c010ee8:	847ff116 	blt	r16,r17,c010eb0 <__alt_data_end+0xfc010eb0>
 c010eec:	d8c02317 	ldw	r3,140(sp)
 c010ef0:	1445883a 	add	r2,r2,r17
 c010ef4:	44400115 	stw	r17,4(r8)
 c010ef8:	40c00015 	stw	r3,0(r8)
 c010efc:	d8801c15 	stw	r2,112(sp)
 c010f00:	d9401b15 	stw	r5,108(sp)
 c010f04:	00c001c4 	movi	r3,7
 c010f08:	1940170e 	bge	r3,r5,c010f68 <___vfiprintf_internal_r+0xe24>
 c010f0c:	1000101e 	bne	r2,zero,c010f50 <___vfiprintf_internal_r+0xe0c>
 c010f10:	d8802517 	ldw	r2,148(sp)
 c010f14:	14c11616 	blt	r2,r19,c011370 <___vfiprintf_internal_r+0x122c>
 c010f18:	d9002417 	ldw	r4,144(sp)
 c010f1c:	2089883a 	add	r4,r4,r2
 c010f20:	d9002415 	stw	r4,144(sp)
 c010f24:	003e1806 	br	c010788 <__alt_data_end+0xfc010788>
 c010f28:	d9801a04 	addi	r6,sp,104
 c010f2c:	b80b883a 	mov	r5,r23
 c010f30:	a809883a 	mov	r4,r21
 c010f34:	c0100300 	call	c010030 <__sprint_r.part.0>
 c010f38:	103fba1e 	bne	r2,zero,c010e24 <__alt_data_end+0xfc010e24>
 c010f3c:	d9001b17 	ldw	r4,108(sp)
 c010f40:	d8801c17 	ldw	r2,112(sp)
 c010f44:	d811883a 	mov	r8,sp
 c010f48:	21400044 	addi	r5,r4,1
 c010f4c:	003fd606 	br	c010ea8 <__alt_data_end+0xfc010ea8>
 c010f50:	d9402017 	ldw	r5,128(sp)
 c010f54:	d9002117 	ldw	r4,132(sp)
 c010f58:	d9801a04 	addi	r6,sp,104
 c010f5c:	c0100300 	call	c010030 <__sprint_r.part.0>
 c010f60:	103fb01e 	bne	r2,zero,c010e24 <__alt_data_end+0xfc010e24>
 c010f64:	d8801c17 	ldw	r2,112(sp)
 c010f68:	d8c02517 	ldw	r3,148(sp)
 c010f6c:	1cc0010e 	bge	r3,r19,c010f74 <___vfiprintf_internal_r+0xe30>
 c010f70:	9807883a 	mov	r3,r19
 c010f74:	d9002417 	ldw	r4,144(sp)
 c010f78:	20c9883a 	add	r4,r4,r3
 c010f7c:	d9002415 	stw	r4,144(sp)
 c010f80:	103e0126 	beq	r2,zero,c010788 <__alt_data_end+0xfc010788>
 c010f84:	d9402017 	ldw	r5,128(sp)
 c010f88:	d9002117 	ldw	r4,132(sp)
 c010f8c:	d9801a04 	addi	r6,sp,104
 c010f90:	c0100300 	call	c010030 <__sprint_r.part.0>
 c010f94:	103dfc26 	beq	r2,zero,c010788 <__alt_data_end+0xfc010788>
 c010f98:	003fa206 	br	c010e24 <__alt_data_end+0xfc010e24>
 c010f9c:	d9402017 	ldw	r5,128(sp)
 c010fa0:	d9002117 	ldw	r4,132(sp)
 c010fa4:	d9801a04 	addi	r6,sp,104
 c010fa8:	d9c02b15 	stw	r7,172(sp)
 c010fac:	c0100300 	call	c010030 <__sprint_r.part.0>
 c010fb0:	d9c02b17 	ldw	r7,172(sp)
 c010fb4:	103f9b1e 	bne	r2,zero,c010e24 <__alt_data_end+0xfc010e24>
 c010fb8:	d9001b17 	ldw	r4,108(sp)
 c010fbc:	d8801c17 	ldw	r2,112(sp)
 c010fc0:	d811883a 	mov	r8,sp
 c010fc4:	21800044 	addi	r6,r4,1
 c010fc8:	003dbf06 	br	c0106c8 <__alt_data_end+0xfc0106c8>
 c010fcc:	1000d81e 	bne	r2,zero,c011330 <___vfiprintf_internal_r+0x11ec>
 c010fd0:	d9001d87 	ldb	r4,118(sp)
 c010fd4:	20000a26 	beq	r4,zero,c011000 <___vfiprintf_internal_r+0xebc>
 c010fd8:	00800044 	movi	r2,1
 c010fdc:	d9001d84 	addi	r4,sp,118
 c010fe0:	100b883a 	mov	r5,r2
 c010fe4:	d9000015 	stw	r4,0(sp)
 c010fe8:	d8800115 	stw	r2,4(sp)
 c010fec:	d811883a 	mov	r8,sp
 c010ff0:	2809883a 	mov	r4,r5
 c010ff4:	42000204 	addi	r8,r8,8
 c010ff8:	29400044 	addi	r5,r5,1
 c010ffc:	003d9506 	br	c010654 <__alt_data_end+0xfc010654>
 c011000:	3800fd26 	beq	r7,zero,c0113f8 <___vfiprintf_internal_r+0x12b4>
 c011004:	00800084 	movi	r2,2
 c011008:	d9001d04 	addi	r4,sp,116
 c01100c:	d9000015 	stw	r4,0(sp)
 c011010:	d8800115 	stw	r2,4(sp)
 c011014:	01400044 	movi	r5,1
 c011018:	d811883a 	mov	r8,sp
 c01101c:	2809883a 	mov	r4,r5
 c011020:	42000204 	addi	r8,r8,8
 c011024:	29400044 	addi	r5,r5,1
 c011028:	003f4606 	br	c010d44 <__alt_data_end+0xfc010d44>
 c01102c:	d8802517 	ldw	r2,148(sp)
 c011030:	14c0010e 	bge	r2,r19,c011038 <___vfiprintf_internal_r+0xef4>
 c011034:	9805883a 	mov	r2,r19
 c011038:	d9402417 	ldw	r5,144(sp)
 c01103c:	288b883a 	add	r5,r5,r2
 c011040:	d9402415 	stw	r5,144(sp)
 c011044:	003dd006 	br	c010788 <__alt_data_end+0xfc010788>
 c011048:	d8001d85 	stb	zero,118(sp)
 c01104c:	80005d16 	blt	r16,zero,c0111c4 <___vfiprintf_internal_r+0x1080>
 c011050:	00ffdfc4 	movi	r3,-129
 c011054:	9d04b03a 	or	r2,r19,r20
 c011058:	88e2703a 	and	r17,r17,r3
 c01105c:	103d3726 	beq	r2,zero,c01053c <__alt_data_end+0xfc01053c>
 c011060:	002b883a 	mov	r21,zero
 c011064:	d9002617 	ldw	r4,152(sp)
 c011068:	ddc01a04 	addi	r23,sp,104
 c01106c:	988003cc 	andi	r2,r19,15
 c011070:	a006973a 	slli	r3,r20,28
 c011074:	2085883a 	add	r2,r4,r2
 c011078:	9826d13a 	srli	r19,r19,4
 c01107c:	10800003 	ldbu	r2,0(r2)
 c011080:	a028d13a 	srli	r20,r20,4
 c011084:	bdffffc4 	addi	r23,r23,-1
 c011088:	1ce6b03a 	or	r19,r3,r19
 c01108c:	b8800005 	stb	r2,0(r23)
 c011090:	9d04b03a 	or	r2,r19,r20
 c011094:	103ff51e 	bne	r2,zero,c01106c <__alt_data_end+0xfc01106c>
 c011098:	d8801e17 	ldw	r2,120(sp)
 c01109c:	15e9c83a 	sub	r20,r2,r23
 c0110a0:	003d2b06 	br	c010550 <__alt_data_end+0xfc010550>
 c0110a4:	d9402017 	ldw	r5,128(sp)
 c0110a8:	d9002117 	ldw	r4,132(sp)
 c0110ac:	d9801a04 	addi	r6,sp,104
 c0110b0:	c0100300 	call	c010030 <__sprint_r.part.0>
 c0110b4:	103f5b1e 	bne	r2,zero,c010e24 <__alt_data_end+0xfc010e24>
 c0110b8:	d8801c17 	ldw	r2,112(sp)
 c0110bc:	d811883a 	mov	r8,sp
 c0110c0:	003f6706 	br	c010e60 <__alt_data_end+0xfc010e60>
 c0110c4:	d9402017 	ldw	r5,128(sp)
 c0110c8:	d9002117 	ldw	r4,132(sp)
 c0110cc:	d9801a04 	addi	r6,sp,104
 c0110d0:	c0100300 	call	c010030 <__sprint_r.part.0>
 c0110d4:	103f531e 	bne	r2,zero,c010e24 <__alt_data_end+0xfc010e24>
 c0110d8:	d811883a 	mov	r8,sp
 c0110dc:	003cd906 	br	c010444 <__alt_data_end+0xfc010444>
 c0110e0:	10803fcc 	andi	r2,r2,255
 c0110e4:	1080201c 	xori	r2,r2,128
 c0110e8:	10bfe004 	addi	r2,r2,-128
 c0110ec:	00c00c04 	movi	r3,48
 c0110f0:	10ffe926 	beq	r2,r3,c011098 <__alt_data_end+0xfc011098>
 c0110f4:	b8ffffc5 	stb	r3,-1(r23)
 c0110f8:	d8c01e17 	ldw	r3,120(sp)
 c0110fc:	b8bfffc4 	addi	r2,r23,-1
 c011100:	102f883a 	mov	r23,r2
 c011104:	18a9c83a 	sub	r20,r3,r2
 c011108:	003d1106 	br	c010550 <__alt_data_end+0xfc010550>
 c01110c:	d9402017 	ldw	r5,128(sp)
 c011110:	d9002117 	ldw	r4,132(sp)
 c011114:	d9801a04 	addi	r6,sp,104
 c011118:	d8c02a15 	stw	r3,168(sp)
 c01111c:	d9c02b15 	stw	r7,172(sp)
 c011120:	c0100300 	call	c010030 <__sprint_r.part.0>
 c011124:	d8c02a17 	ldw	r3,168(sp)
 c011128:	d9c02b17 	ldw	r7,172(sp)
 c01112c:	103f3d1e 	bne	r2,zero,c010e24 <__alt_data_end+0xfc010e24>
 c011130:	d9001b17 	ldw	r4,108(sp)
 c011134:	d8801c17 	ldw	r2,112(sp)
 c011138:	d811883a 	mov	r8,sp
 c01113c:	21400044 	addi	r5,r4,1
 c011140:	003d4406 	br	c010654 <__alt_data_end+0xfc010654>
 c011144:	d9402017 	ldw	r5,128(sp)
 c011148:	d9002117 	ldw	r4,132(sp)
 c01114c:	d9801a04 	addi	r6,sp,104
 c011150:	d8c02a15 	stw	r3,168(sp)
 c011154:	c0100300 	call	c010030 <__sprint_r.part.0>
 c011158:	d8c02a17 	ldw	r3,168(sp)
 c01115c:	103f311e 	bne	r2,zero,c010e24 <__alt_data_end+0xfc010e24>
 c011160:	d9001b17 	ldw	r4,108(sp)
 c011164:	d8801c17 	ldw	r2,112(sp)
 c011168:	d811883a 	mov	r8,sp
 c01116c:	21400044 	addi	r5,r4,1
 c011170:	003ef406 	br	c010d44 <__alt_data_end+0xfc010d44>
 c011174:	1000bd1e 	bne	r2,zero,c01146c <___vfiprintf_internal_r+0x1328>
 c011178:	01400044 	movi	r5,1
 c01117c:	0009883a 	mov	r4,zero
 c011180:	d811883a 	mov	r8,sp
 c011184:	003ef106 	br	c010d4c <__alt_data_end+0xfc010d4c>
 c011188:	d9402017 	ldw	r5,128(sp)
 c01118c:	d9002117 	ldw	r4,132(sp)
 c011190:	d9801a04 	addi	r6,sp,104
 c011194:	c0100300 	call	c010030 <__sprint_r.part.0>
 c011198:	103f221e 	bne	r2,zero,c010e24 <__alt_data_end+0xfc010e24>
 c01119c:	d9401b17 	ldw	r5,108(sp)
 c0111a0:	d8801c17 	ldw	r2,112(sp)
 c0111a4:	d811883a 	mov	r8,sp
 c0111a8:	29400044 	addi	r5,r5,1
 c0111ac:	003d6206 	br	c010738 <__alt_data_end+0xfc010738>
 c0111b0:	014300b4 	movhi	r5,3074
 c0111b4:	2961e804 	addi	r5,r5,-30816
 c0111b8:	d9402615 	stw	r5,152(sp)
 c0111bc:	d8c02215 	stw	r3,136(sp)
 c0111c0:	1023883a 	mov	r17,r2
 c0111c4:	9d04b03a 	or	r2,r19,r20
 c0111c8:	103fa51e 	bne	r2,zero,c011060 <__alt_data_end+0xfc011060>
 c0111cc:	002b883a 	mov	r21,zero
 c0111d0:	00800084 	movi	r2,2
 c0111d4:	003e4a06 	br	c010b00 <__alt_data_end+0xfc010b00>
 c0111d8:	014300b4 	movhi	r5,3074
 c0111dc:	2961e804 	addi	r5,r5,-30816
 c0111e0:	002b883a 	mov	r21,zero
 c0111e4:	d9402615 	stw	r5,152(sp)
 c0111e8:	003f9e06 	br	c011064 <__alt_data_end+0xfc011064>
 c0111ec:	d9402217 	ldw	r5,136(sp)
 c0111f0:	d8001d85 	stb	zero,118(sp)
 c0111f4:	0029883a 	mov	r20,zero
 c0111f8:	28800104 	addi	r2,r5,4
 c0111fc:	2cc00017 	ldw	r19,0(r5)
 c011200:	803e3a16 	blt	r16,zero,c010aec <__alt_data_end+0xfc010aec>
 c011204:	00ffdfc4 	movi	r3,-129
 c011208:	d8802215 	stw	r2,136(sp)
 c01120c:	88e2703a 	and	r17,r17,r3
 c011210:	002b883a 	mov	r21,zero
 c011214:	983e9b26 	beq	r19,zero,c010c84 <__alt_data_end+0xfc010c84>
 c011218:	00800244 	movi	r2,9
 c01121c:	14fdc936 	bltu	r2,r19,c010944 <__alt_data_end+0xfc010944>
 c011220:	003e9a06 	br	c010c8c <__alt_data_end+0xfc010c8c>
 c011224:	00800c04 	movi	r2,48
 c011228:	d8c01d45 	stb	r3,117(sp)
 c01122c:	d8801d05 	stb	r2,116(sp)
 c011230:	d8001d85 	stb	zero,118(sp)
 c011234:	88c00094 	ori	r3,r17,2
 c011238:	80009c16 	blt	r16,zero,c0114ac <___vfiprintf_internal_r+0x1368>
 c01123c:	00bfdfc4 	movi	r2,-129
 c011240:	88a2703a 	and	r17,r17,r2
 c011244:	8c400094 	ori	r17,r17,2
 c011248:	002b883a 	mov	r21,zero
 c01124c:	003f8506 	br	c011064 <__alt_data_end+0xfc011064>
 c011250:	b029883a 	mov	r20,r22
 c011254:	003c0b06 	br	c010284 <__alt_data_end+0xfc010284>
 c011258:	04e7c83a 	sub	r19,zero,r19
 c01125c:	05400b44 	movi	r21,45
 c011260:	9804c03a 	cmpne	r2,r19,zero
 c011264:	0529c83a 	sub	r20,zero,r20
 c011268:	dd401d85 	stb	r21,118(sp)
 c01126c:	a0a9c83a 	sub	r20,r20,r2
 c011270:	80009716 	blt	r16,zero,c0114d0 <___vfiprintf_internal_r+0x138c>
 c011274:	00bfdfc4 	movi	r2,-129
 c011278:	88a2703a 	and	r17,r17,r2
 c01127c:	003db006 	br	c010940 <__alt_data_end+0xfc010940>
 c011280:	b0c00007 	ldb	r3,0(r22)
 c011284:	003c0c06 	br	c0102b8 <__alt_data_end+0xfc0102b8>
 c011288:	8880100c 	andi	r2,r17,64
 c01128c:	d8001d85 	stb	zero,118(sp)
 c011290:	1000461e 	bne	r2,zero,c0113ac <___vfiprintf_internal_r+0x1268>
 c011294:	d9002217 	ldw	r4,136(sp)
 c011298:	0029883a 	mov	r20,zero
 c01129c:	20800104 	addi	r2,r4,4
 c0112a0:	24c00017 	ldw	r19,0(r4)
 c0112a4:	803df80e 	bge	r16,zero,c010a88 <__alt_data_end+0xfc010a88>
 c0112a8:	9d06b03a 	or	r3,r19,r20
 c0112ac:	d8802215 	stw	r2,136(sp)
 c0112b0:	183d5e1e 	bne	r3,zero,c01082c <__alt_data_end+0xfc01082c>
 c0112b4:	002b883a 	mov	r21,zero
 c0112b8:	0005883a 	mov	r2,zero
 c0112bc:	003e1006 	br	c010b00 <__alt_data_end+0xfc010b00>
 c0112c0:	8880040c 	andi	r2,r17,16
 c0112c4:	1000321e 	bne	r2,zero,c011390 <___vfiprintf_internal_r+0x124c>
 c0112c8:	8c40100c 	andi	r17,r17,64
 c0112cc:	88008d26 	beq	r17,zero,c011504 <___vfiprintf_internal_r+0x13c0>
 c0112d0:	d9402217 	ldw	r5,136(sp)
 c0112d4:	d8c02417 	ldw	r3,144(sp)
 c0112d8:	28800017 	ldw	r2,0(r5)
 c0112dc:	29400104 	addi	r5,r5,4
 c0112e0:	d9402215 	stw	r5,136(sp)
 c0112e4:	10c0000d 	sth	r3,0(r2)
 c0112e8:	003bca06 	br	c010214 <__alt_data_end+0xfc010214>
 c0112ec:	8880100c 	andi	r2,r17,64
 c0112f0:	10003a26 	beq	r2,zero,c0113dc <___vfiprintf_internal_r+0x1298>
 c0112f4:	d8802217 	ldw	r2,136(sp)
 c0112f8:	14c0000f 	ldh	r19,0(r2)
 c0112fc:	10800104 	addi	r2,r2,4
 c011300:	d8802215 	stw	r2,136(sp)
 c011304:	9829d7fa 	srai	r20,r19,31
 c011308:	a005883a 	mov	r2,r20
 c01130c:	003d8506 	br	c010924 <__alt_data_end+0xfc010924>
 c011310:	8880100c 	andi	r2,r17,64
 c011314:	10002b26 	beq	r2,zero,c0113c4 <___vfiprintf_internal_r+0x1280>
 c011318:	d8802217 	ldw	r2,136(sp)
 c01131c:	0029883a 	mov	r20,zero
 c011320:	14c0000b 	ldhu	r19,0(r2)
 c011324:	10800104 	addi	r2,r2,4
 c011328:	d8802215 	stw	r2,136(sp)
 c01132c:	003d5d06 	br	c0108a4 <__alt_data_end+0xfc0108a4>
 c011330:	d9402017 	ldw	r5,128(sp)
 c011334:	d9002117 	ldw	r4,132(sp)
 c011338:	d9801a04 	addi	r6,sp,104
 c01133c:	d8c02a15 	stw	r3,168(sp)
 c011340:	d9c02b15 	stw	r7,172(sp)
 c011344:	c0100300 	call	c010030 <__sprint_r.part.0>
 c011348:	d8c02a17 	ldw	r3,168(sp)
 c01134c:	d9c02b17 	ldw	r7,172(sp)
 c011350:	103eb41e 	bne	r2,zero,c010e24 <__alt_data_end+0xfc010e24>
 c011354:	d9001b17 	ldw	r4,108(sp)
 c011358:	d8801c17 	ldw	r2,112(sp)
 c01135c:	d811883a 	mov	r8,sp
 c011360:	21400044 	addi	r5,r4,1
 c011364:	003e6706 	br	c010d04 <__alt_data_end+0xfc010d04>
 c011368:	00bfffc4 	movi	r2,-1
 c01136c:	003c4a06 	br	c010498 <__alt_data_end+0xfc010498>
 c011370:	9805883a 	mov	r2,r19
 c011374:	003ee806 	br	c010f18 <__alt_data_end+0xfc010f18>
 c011378:	d8c02217 	ldw	r3,136(sp)
 c01137c:	0029883a 	mov	r20,zero
 c011380:	18800104 	addi	r2,r3,4
 c011384:	1cc0000b 	ldhu	r19,0(r3)
 c011388:	803f9e0e 	bge	r16,zero,c011204 <__alt_data_end+0xfc011204>
 c01138c:	003dd706 	br	c010aec <__alt_data_end+0xfc010aec>
 c011390:	d8c02217 	ldw	r3,136(sp)
 c011394:	d9002417 	ldw	r4,144(sp)
 c011398:	18800017 	ldw	r2,0(r3)
 c01139c:	18c00104 	addi	r3,r3,4
 c0113a0:	d8c02215 	stw	r3,136(sp)
 c0113a4:	11000015 	stw	r4,0(r2)
 c0113a8:	003b9a06 	br	c010214 <__alt_data_end+0xfc010214>
 c0113ac:	d8c02217 	ldw	r3,136(sp)
 c0113b0:	0029883a 	mov	r20,zero
 c0113b4:	18800104 	addi	r2,r3,4
 c0113b8:	1cc0000b 	ldhu	r19,0(r3)
 c0113bc:	803db20e 	bge	r16,zero,c010a88 <__alt_data_end+0xfc010a88>
 c0113c0:	003fb906 	br	c0112a8 <__alt_data_end+0xfc0112a8>
 c0113c4:	d9002217 	ldw	r4,136(sp)
 c0113c8:	0029883a 	mov	r20,zero
 c0113cc:	24c00017 	ldw	r19,0(r4)
 c0113d0:	21000104 	addi	r4,r4,4
 c0113d4:	d9002215 	stw	r4,136(sp)
 c0113d8:	003d3206 	br	c0108a4 <__alt_data_end+0xfc0108a4>
 c0113dc:	d8c02217 	ldw	r3,136(sp)
 c0113e0:	1cc00017 	ldw	r19,0(r3)
 c0113e4:	18c00104 	addi	r3,r3,4
 c0113e8:	d8c02215 	stw	r3,136(sp)
 c0113ec:	9829d7fa 	srai	r20,r19,31
 c0113f0:	a005883a 	mov	r2,r20
 c0113f4:	003d4b06 	br	c010924 <__alt_data_end+0xfc010924>
 c0113f8:	0009883a 	mov	r4,zero
 c0113fc:	01400044 	movi	r5,1
 c011400:	d811883a 	mov	r8,sp
 c011404:	003e4f06 	br	c010d44 <__alt_data_end+0xfc010d44>
 c011408:	d8c02215 	stw	r3,136(sp)
 c01140c:	002b883a 	mov	r21,zero
 c011410:	003db806 	br	c010af4 <__alt_data_end+0xfc010af4>
 c011414:	d811883a 	mov	r8,sp
 c011418:	003e9606 	br	c010e74 <__alt_data_end+0xfc010e74>
 c01141c:	010300b4 	movhi	r4,3074
 c011420:	21225904 	addi	r4,r4,-30364
 c011424:	d9002315 	stw	r4,140(sp)
 c011428:	003e6306 	br	c010db8 <__alt_data_end+0xfc010db8>
 c01142c:	b0c00043 	ldbu	r3,1(r22)
 c011430:	8c400814 	ori	r17,r17,32
 c011434:	b5800044 	addi	r22,r22,1
 c011438:	18c03fcc 	andi	r3,r3,255
 c01143c:	18c0201c 	xori	r3,r3,128
 c011440:	18ffe004 	addi	r3,r3,-128
 c011444:	003b9c06 	br	c0102b8 <__alt_data_end+0xfc0102b8>
 c011448:	b809883a 	mov	r4,r23
 c01144c:	da002a15 	stw	r8,168(sp)
 c011450:	c0050880 	call	c005088 <strlen>
 c011454:	1029883a 	mov	r20,r2
 c011458:	dd401d83 	ldbu	r21,118(sp)
 c01145c:	df002215 	stw	fp,136(sp)
 c011460:	0021883a 	mov	r16,zero
 c011464:	da002a17 	ldw	r8,168(sp)
 c011468:	003c3906 	br	c010550 <__alt_data_end+0xfc010550>
 c01146c:	d9402017 	ldw	r5,128(sp)
 c011470:	d9002117 	ldw	r4,132(sp)
 c011474:	d9801a04 	addi	r6,sp,104
 c011478:	c0100300 	call	c010030 <__sprint_r.part.0>
 c01147c:	103e691e 	bne	r2,zero,c010e24 <__alt_data_end+0xfc010e24>
 c011480:	d9001b17 	ldw	r4,108(sp)
 c011484:	d8801c17 	ldw	r2,112(sp)
 c011488:	d811883a 	mov	r8,sp
 c01148c:	21400044 	addi	r5,r4,1
 c011490:	003e2e06 	br	c010d4c <__alt_data_end+0xfc010d4c>
 c011494:	010300b4 	movhi	r4,3074
 c011498:	21225d04 	addi	r4,r4,-30348
 c01149c:	d9002315 	stw	r4,140(sp)
 c0114a0:	d9001b17 	ldw	r4,108(sp)
 c0114a4:	21000044 	addi	r4,r4,1
 c0114a8:	003c5e06 	br	c010624 <__alt_data_end+0xfc010624>
 c0114ac:	002b883a 	mov	r21,zero
 c0114b0:	00800084 	movi	r2,2
 c0114b4:	10803fcc 	andi	r2,r2,255
 c0114b8:	01000044 	movi	r4,1
 c0114bc:	11002b26 	beq	r2,r4,c01156c <___vfiprintf_internal_r+0x1428>
 c0114c0:	01000084 	movi	r4,2
 c0114c4:	11002b1e 	bne	r2,r4,c011574 <___vfiprintf_internal_r+0x1430>
 c0114c8:	1823883a 	mov	r17,r3
 c0114cc:	003ee506 	br	c011064 <__alt_data_end+0xfc011064>
 c0114d0:	8807883a 	mov	r3,r17
 c0114d4:	00800044 	movi	r2,1
 c0114d8:	003ff606 	br	c0114b4 <__alt_data_end+0xfc0114b4>
 c0114dc:	00800184 	movi	r2,6
 c0114e0:	1400012e 	bgeu	r2,r16,c0114e8 <___vfiprintf_internal_r+0x13a4>
 c0114e4:	1021883a 	mov	r16,r2
 c0114e8:	8029883a 	mov	r20,r16
 c0114ec:	8027883a 	mov	r19,r16
 c0114f0:	80002216 	blt	r16,zero,c01157c <___vfiprintf_internal_r+0x1438>
 c0114f4:	05c300b4 	movhi	r23,3074
 c0114f8:	df002215 	stw	fp,136(sp)
 c0114fc:	bde1ed04 	addi	r23,r23,-30796
 c011500:	003cfb06 	br	c0108f0 <__alt_data_end+0xfc0108f0>
 c011504:	d9002217 	ldw	r4,136(sp)
 c011508:	d9402417 	ldw	r5,144(sp)
 c01150c:	20800017 	ldw	r2,0(r4)
 c011510:	21000104 	addi	r4,r4,4
 c011514:	d9002215 	stw	r4,136(sp)
 c011518:	11400015 	stw	r5,0(r2)
 c01151c:	003b3d06 	br	c010214 <__alt_data_end+0xfc010214>
 c011520:	014300b4 	movhi	r5,3074
 c011524:	29625d04 	addi	r5,r5,-30348
 c011528:	d9402315 	stw	r5,140(sp)
 c01152c:	d9401b17 	ldw	r5,108(sp)
 c011530:	29400044 	addi	r5,r5,1
 c011534:	003e6d06 	br	c010eec <__alt_data_end+0xfc010eec>
 c011538:	8029883a 	mov	r20,r16
 c01153c:	dd401d83 	ldbu	r21,118(sp)
 c011540:	df002215 	stw	fp,136(sp)
 c011544:	0021883a 	mov	r16,zero
 c011548:	003c0106 	br	c010550 <__alt_data_end+0xfc010550>
 c01154c:	00c300b4 	movhi	r3,3074
 c011550:	18e25904 	addi	r3,r3,-30364
 c011554:	d8c02315 	stw	r3,140(sp)
 c011558:	280d883a 	mov	r6,r5
 c01155c:	003c6906 	br	c010704 <__alt_data_end+0xfc010704>
 c011560:	802d883a 	mov	r22,r16
 c011564:	0021883a 	mov	r16,zero
 c011568:	003b5406 	br	c0102bc <__alt_data_end+0xfc0102bc>
 c01156c:	1823883a 	mov	r17,r3
 c011570:	003cf306 	br	c010940 <__alt_data_end+0xfc010940>
 c011574:	1823883a 	mov	r17,r3
 c011578:	003cad06 	br	c010830 <__alt_data_end+0xfc010830>
 c01157c:	0027883a 	mov	r19,zero
 c011580:	003fdc06 	br	c0114f4 <__alt_data_end+0xfc0114f4>
 c011584:	d9402217 	ldw	r5,136(sp)
 c011588:	8005883a 	mov	r2,r16
 c01158c:	b0c00043 	ldbu	r3,1(r22)
 c011590:	2c000017 	ldw	r16,0(r5)
 c011594:	29000104 	addi	r4,r5,4
 c011598:	d9002215 	stw	r4,136(sp)
 c01159c:	102d883a 	mov	r22,r2
 c0115a0:	803fa50e 	bge	r16,zero,c011438 <__alt_data_end+0xfc011438>
 c0115a4:	18c03fcc 	andi	r3,r3,255
 c0115a8:	18c0201c 	xori	r3,r3,128
 c0115ac:	043fffc4 	movi	r16,-1
 c0115b0:	18ffe004 	addi	r3,r3,-128
 c0115b4:	003b4006 	br	c0102b8 <__alt_data_end+0xfc0102b8>
 c0115b8:	d9402303 	ldbu	r5,140(sp)
 c0115bc:	d9401d85 	stb	r5,118(sp)
 c0115c0:	003cae06 	br	c01087c <__alt_data_end+0xfc01087c>
 c0115c4:	d8c02303 	ldbu	r3,140(sp)
 c0115c8:	d8c01d85 	stb	r3,118(sp)
 c0115cc:	003d1406 	br	c010a20 <__alt_data_end+0xfc010a20>
 c0115d0:	d8c02303 	ldbu	r3,140(sp)
 c0115d4:	d8c01d85 	stb	r3,118(sp)
 c0115d8:	003cca06 	br	c010904 <__alt_data_end+0xfc010904>
 c0115dc:	8880004c 	andi	r2,r17,1
 c0115e0:	002b883a 	mov	r21,zero
 c0115e4:	10000526 	beq	r2,zero,c0115fc <___vfiprintf_internal_r+0x14b8>
 c0115e8:	00800c04 	movi	r2,48
 c0115ec:	d88019c5 	stb	r2,103(sp)
 c0115f0:	dd002817 	ldw	r20,160(sp)
 c0115f4:	ddc019c4 	addi	r23,sp,103
 c0115f8:	003bd506 	br	c010550 <__alt_data_end+0xfc010550>
 c0115fc:	0029883a 	mov	r20,zero
 c011600:	ddc01a04 	addi	r23,sp,104
 c011604:	003bd206 	br	c010550 <__alt_data_end+0xfc010550>
 c011608:	d9002303 	ldbu	r4,140(sp)
 c01160c:	d9001d85 	stb	r4,118(sp)
 c011610:	003da606 	br	c010cac <__alt_data_end+0xfc010cac>
 c011614:	d8c02303 	ldbu	r3,140(sp)
 c011618:	d8c01d85 	stb	r3,118(sp)
 c01161c:	003c7606 	br	c0107f8 <__alt_data_end+0xfc0107f8>
 c011620:	d8c02303 	ldbu	r3,140(sp)
 c011624:	d8c01d85 	stb	r3,118(sp)
 c011628:	003c6506 	br	c0107c0 <__alt_data_end+0xfc0107c0>
 c01162c:	d9002303 	ldbu	r4,140(sp)
 c011630:	d9001d85 	stb	r4,118(sp)
 c011634:	003d3d06 	br	c010b2c <__alt_data_end+0xfc010b2c>
 c011638:	d8c02303 	ldbu	r3,140(sp)
 c01163c:	d8c01d85 	stb	r3,118(sp)
 c011640:	003d1d06 	br	c010ab8 <__alt_data_end+0xfc010ab8>
 c011644:	d8c02303 	ldbu	r3,140(sp)
 c011648:	d8c01d85 	stb	r3,118(sp)
 c01164c:	003d0306 	br	c010a5c <__alt_data_end+0xfc010a5c>

0c011650 <__vfiprintf_internal>:
 c011650:	008300b4 	movhi	r2,3074
 c011654:	10aa2604 	addi	r2,r2,-22376
 c011658:	300f883a 	mov	r7,r6
 c01165c:	280d883a 	mov	r6,r5
 c011660:	200b883a 	mov	r5,r4
 c011664:	11000017 	ldw	r4,0(r2)
 c011668:	c0101441 	jmpi	c010144 <___vfiprintf_internal_r>

0c01166c <__sbprintf>:
 c01166c:	2880030b 	ldhu	r2,12(r5)
 c011670:	2ac01917 	ldw	r11,100(r5)
 c011674:	2a80038b 	ldhu	r10,14(r5)
 c011678:	2a400717 	ldw	r9,28(r5)
 c01167c:	2a000917 	ldw	r8,36(r5)
 c011680:	defee204 	addi	sp,sp,-1144
 c011684:	00c10004 	movi	r3,1024
 c011688:	dc011a15 	stw	r16,1128(sp)
 c01168c:	10bfff4c 	andi	r2,r2,65533
 c011690:	2821883a 	mov	r16,r5
 c011694:	d8cb883a 	add	r5,sp,r3
 c011698:	dc811c15 	stw	r18,1136(sp)
 c01169c:	dc411b15 	stw	r17,1132(sp)
 c0116a0:	dfc11d15 	stw	ra,1140(sp)
 c0116a4:	2025883a 	mov	r18,r4
 c0116a8:	d881030d 	sth	r2,1036(sp)
 c0116ac:	dac11915 	stw	r11,1124(sp)
 c0116b0:	da81038d 	sth	r10,1038(sp)
 c0116b4:	da410715 	stw	r9,1052(sp)
 c0116b8:	da010915 	stw	r8,1060(sp)
 c0116bc:	dec10015 	stw	sp,1024(sp)
 c0116c0:	dec10415 	stw	sp,1040(sp)
 c0116c4:	d8c10215 	stw	r3,1032(sp)
 c0116c8:	d8c10515 	stw	r3,1044(sp)
 c0116cc:	d8010615 	stw	zero,1048(sp)
 c0116d0:	c0101440 	call	c010144 <___vfiprintf_internal_r>
 c0116d4:	1023883a 	mov	r17,r2
 c0116d8:	10000416 	blt	r2,zero,c0116ec <__sbprintf+0x80>
 c0116dc:	d9410004 	addi	r5,sp,1024
 c0116e0:	9009883a 	mov	r4,r18
 c0116e4:	c00b3b00 	call	c00b3b0 <_fflush_r>
 c0116e8:	10000d1e 	bne	r2,zero,c011720 <__sbprintf+0xb4>
 c0116ec:	d881030b 	ldhu	r2,1036(sp)
 c0116f0:	1080100c 	andi	r2,r2,64
 c0116f4:	10000326 	beq	r2,zero,c011704 <__sbprintf+0x98>
 c0116f8:	8080030b 	ldhu	r2,12(r16)
 c0116fc:	10801014 	ori	r2,r2,64
 c011700:	8080030d 	sth	r2,12(r16)
 c011704:	8805883a 	mov	r2,r17
 c011708:	dfc11d17 	ldw	ra,1140(sp)
 c01170c:	dc811c17 	ldw	r18,1136(sp)
 c011710:	dc411b17 	ldw	r17,1132(sp)
 c011714:	dc011a17 	ldw	r16,1128(sp)
 c011718:	dec11e04 	addi	sp,sp,1144
 c01171c:	f800283a 	ret
 c011720:	047fffc4 	movi	r17,-1
 c011724:	003ff106 	br	c0116ec <__alt_data_end+0xfc0116ec>

0c011728 <_write_r>:
 c011728:	defffd04 	addi	sp,sp,-12
 c01172c:	2805883a 	mov	r2,r5
 c011730:	dc000015 	stw	r16,0(sp)
 c011734:	040300b4 	movhi	r16,3074
 c011738:	dc400115 	stw	r17,4(sp)
 c01173c:	300b883a 	mov	r5,r6
 c011740:	8431c804 	addi	r16,r16,-14560
 c011744:	2023883a 	mov	r17,r4
 c011748:	380d883a 	mov	r6,r7
 c01174c:	1009883a 	mov	r4,r2
 c011750:	dfc00215 	stw	ra,8(sp)
 c011754:	80000015 	stw	zero,0(r16)
 c011758:	c0162b40 	call	c0162b4 <write>
 c01175c:	00ffffc4 	movi	r3,-1
 c011760:	10c00526 	beq	r2,r3,c011778 <_write_r+0x50>
 c011764:	dfc00217 	ldw	ra,8(sp)
 c011768:	dc400117 	ldw	r17,4(sp)
 c01176c:	dc000017 	ldw	r16,0(sp)
 c011770:	dec00304 	addi	sp,sp,12
 c011774:	f800283a 	ret
 c011778:	80c00017 	ldw	r3,0(r16)
 c01177c:	183ff926 	beq	r3,zero,c011764 <__alt_data_end+0xfc011764>
 c011780:	88c00015 	stw	r3,0(r17)
 c011784:	003ff706 	br	c011764 <__alt_data_end+0xfc011764>

0c011788 <_close_r>:
 c011788:	defffd04 	addi	sp,sp,-12
 c01178c:	dc000015 	stw	r16,0(sp)
 c011790:	040300b4 	movhi	r16,3074
 c011794:	dc400115 	stw	r17,4(sp)
 c011798:	8431c804 	addi	r16,r16,-14560
 c01179c:	2023883a 	mov	r17,r4
 c0117a0:	2809883a 	mov	r4,r5
 c0117a4:	dfc00215 	stw	ra,8(sp)
 c0117a8:	80000015 	stw	zero,0(r16)
 c0117ac:	c0156200 	call	c015620 <close>
 c0117b0:	00ffffc4 	movi	r3,-1
 c0117b4:	10c00526 	beq	r2,r3,c0117cc <_close_r+0x44>
 c0117b8:	dfc00217 	ldw	ra,8(sp)
 c0117bc:	dc400117 	ldw	r17,4(sp)
 c0117c0:	dc000017 	ldw	r16,0(sp)
 c0117c4:	dec00304 	addi	sp,sp,12
 c0117c8:	f800283a 	ret
 c0117cc:	80c00017 	ldw	r3,0(r16)
 c0117d0:	183ff926 	beq	r3,zero,c0117b8 <__alt_data_end+0xfc0117b8>
 c0117d4:	88c00015 	stw	r3,0(r17)
 c0117d8:	003ff706 	br	c0117b8 <__alt_data_end+0xfc0117b8>

0c0117dc <_calloc_r>:
 c0117dc:	defffe04 	addi	sp,sp,-8
 c0117e0:	2805883a 	mov	r2,r5
 c0117e4:	dc000015 	stw	r16,0(sp)
 c0117e8:	300b883a 	mov	r5,r6
 c0117ec:	2021883a 	mov	r16,r4
 c0117f0:	1009883a 	mov	r4,r2
 c0117f4:	dfc00115 	stw	ra,4(sp)
 c0117f8:	c004de00 	call	c004de0 <__mulsi3>
 c0117fc:	100b883a 	mov	r5,r2
 c011800:	8009883a 	mov	r4,r16
 c011804:	c00c5080 	call	c00c508 <_malloc_r>
 c011808:	10002926 	beq	r2,zero,c0118b0 <_calloc_r+0xd4>
 c01180c:	11bfff17 	ldw	r6,-4(r2)
 c011810:	1021883a 	mov	r16,r2
 c011814:	00bfff04 	movi	r2,-4
 c011818:	308c703a 	and	r6,r6,r2
 c01181c:	00c00904 	movi	r3,36
 c011820:	308d883a 	add	r6,r6,r2
 c011824:	19801636 	bltu	r3,r6,c011880 <_calloc_r+0xa4>
 c011828:	008004c4 	movi	r2,19
 c01182c:	11800b2e 	bgeu	r2,r6,c01185c <_calloc_r+0x80>
 c011830:	80000015 	stw	zero,0(r16)
 c011834:	80000115 	stw	zero,4(r16)
 c011838:	008006c4 	movi	r2,27
 c01183c:	11801a2e 	bgeu	r2,r6,c0118a8 <_calloc_r+0xcc>
 c011840:	80000215 	stw	zero,8(r16)
 c011844:	80000315 	stw	zero,12(r16)
 c011848:	30c0151e 	bne	r6,r3,c0118a0 <_calloc_r+0xc4>
 c01184c:	80000415 	stw	zero,16(r16)
 c011850:	80800604 	addi	r2,r16,24
 c011854:	80000515 	stw	zero,20(r16)
 c011858:	00000106 	br	c011860 <_calloc_r+0x84>
 c01185c:	8005883a 	mov	r2,r16
 c011860:	10000015 	stw	zero,0(r2)
 c011864:	10000115 	stw	zero,4(r2)
 c011868:	10000215 	stw	zero,8(r2)
 c01186c:	8005883a 	mov	r2,r16
 c011870:	dfc00117 	ldw	ra,4(sp)
 c011874:	dc000017 	ldw	r16,0(sp)
 c011878:	dec00204 	addi	sp,sp,8
 c01187c:	f800283a 	ret
 c011880:	000b883a 	mov	r5,zero
 c011884:	8009883a 	mov	r4,r16
 c011888:	c00d09c0 	call	c00d09c <memset>
 c01188c:	8005883a 	mov	r2,r16
 c011890:	dfc00117 	ldw	ra,4(sp)
 c011894:	dc000017 	ldw	r16,0(sp)
 c011898:	dec00204 	addi	sp,sp,8
 c01189c:	f800283a 	ret
 c0118a0:	80800404 	addi	r2,r16,16
 c0118a4:	003fee06 	br	c011860 <__alt_data_end+0xfc011860>
 c0118a8:	80800204 	addi	r2,r16,8
 c0118ac:	003fec06 	br	c011860 <__alt_data_end+0xfc011860>
 c0118b0:	0005883a 	mov	r2,zero
 c0118b4:	003fee06 	br	c011870 <__alt_data_end+0xfc011870>

0c0118b8 <_fclose_r>:
 c0118b8:	28003926 	beq	r5,zero,c0119a0 <_fclose_r+0xe8>
 c0118bc:	defffc04 	addi	sp,sp,-16
 c0118c0:	dc400115 	stw	r17,4(sp)
 c0118c4:	dc000015 	stw	r16,0(sp)
 c0118c8:	dfc00315 	stw	ra,12(sp)
 c0118cc:	dc800215 	stw	r18,8(sp)
 c0118d0:	2023883a 	mov	r17,r4
 c0118d4:	2821883a 	mov	r16,r5
 c0118d8:	20000226 	beq	r4,zero,c0118e4 <_fclose_r+0x2c>
 c0118dc:	20800e17 	ldw	r2,56(r4)
 c0118e0:	10002726 	beq	r2,zero,c011980 <_fclose_r+0xc8>
 c0118e4:	8080030f 	ldh	r2,12(r16)
 c0118e8:	1000071e 	bne	r2,zero,c011908 <_fclose_r+0x50>
 c0118ec:	0005883a 	mov	r2,zero
 c0118f0:	dfc00317 	ldw	ra,12(sp)
 c0118f4:	dc800217 	ldw	r18,8(sp)
 c0118f8:	dc400117 	ldw	r17,4(sp)
 c0118fc:	dc000017 	ldw	r16,0(sp)
 c011900:	dec00404 	addi	sp,sp,16
 c011904:	f800283a 	ret
 c011908:	800b883a 	mov	r5,r16
 c01190c:	8809883a 	mov	r4,r17
 c011910:	c00b1940 	call	c00b194 <__sflush_r>
 c011914:	1025883a 	mov	r18,r2
 c011918:	80800b17 	ldw	r2,44(r16)
 c01191c:	10000426 	beq	r2,zero,c011930 <_fclose_r+0x78>
 c011920:	81400717 	ldw	r5,28(r16)
 c011924:	8809883a 	mov	r4,r17
 c011928:	103ee83a 	callr	r2
 c01192c:	10001616 	blt	r2,zero,c011988 <_fclose_r+0xd0>
 c011930:	8080030b 	ldhu	r2,12(r16)
 c011934:	1080200c 	andi	r2,r2,128
 c011938:	1000151e 	bne	r2,zero,c011990 <_fclose_r+0xd8>
 c01193c:	81400c17 	ldw	r5,48(r16)
 c011940:	28000526 	beq	r5,zero,c011958 <_fclose_r+0xa0>
 c011944:	80801004 	addi	r2,r16,64
 c011948:	28800226 	beq	r5,r2,c011954 <_fclose_r+0x9c>
 c01194c:	8809883a 	mov	r4,r17
 c011950:	c00b9100 	call	c00b910 <_free_r>
 c011954:	80000c15 	stw	zero,48(r16)
 c011958:	81401117 	ldw	r5,68(r16)
 c01195c:	28000326 	beq	r5,zero,c01196c <_fclose_r+0xb4>
 c011960:	8809883a 	mov	r4,r17
 c011964:	c00b9100 	call	c00b910 <_free_r>
 c011968:	80001115 	stw	zero,68(r16)
 c01196c:	c00b7ac0 	call	c00b7ac <__sfp_lock_acquire>
 c011970:	8000030d 	sth	zero,12(r16)
 c011974:	c00b7b00 	call	c00b7b0 <__sfp_lock_release>
 c011978:	9005883a 	mov	r2,r18
 c01197c:	003fdc06 	br	c0118f0 <__alt_data_end+0xfc0118f0>
 c011980:	c00b79c0 	call	c00b79c <__sinit>
 c011984:	003fd706 	br	c0118e4 <__alt_data_end+0xfc0118e4>
 c011988:	04bfffc4 	movi	r18,-1
 c01198c:	003fe806 	br	c011930 <__alt_data_end+0xfc011930>
 c011990:	81400417 	ldw	r5,16(r16)
 c011994:	8809883a 	mov	r4,r17
 c011998:	c00b9100 	call	c00b910 <_free_r>
 c01199c:	003fe706 	br	c01193c <__alt_data_end+0xfc01193c>
 c0119a0:	0005883a 	mov	r2,zero
 c0119a4:	f800283a 	ret

0c0119a8 <fclose>:
 c0119a8:	008300b4 	movhi	r2,3074
 c0119ac:	10aa2604 	addi	r2,r2,-22376
 c0119b0:	200b883a 	mov	r5,r4
 c0119b4:	11000017 	ldw	r4,0(r2)
 c0119b8:	c0118b81 	jmpi	c0118b8 <_fclose_r>

0c0119bc <__fputwc>:
 c0119bc:	defff804 	addi	sp,sp,-32
 c0119c0:	dcc00415 	stw	r19,16(sp)
 c0119c4:	dc800315 	stw	r18,12(sp)
 c0119c8:	dc000115 	stw	r16,4(sp)
 c0119cc:	dfc00715 	stw	ra,28(sp)
 c0119d0:	dd400615 	stw	r21,24(sp)
 c0119d4:	dd000515 	stw	r20,20(sp)
 c0119d8:	dc400215 	stw	r17,8(sp)
 c0119dc:	2027883a 	mov	r19,r4
 c0119e0:	2825883a 	mov	r18,r5
 c0119e4:	3021883a 	mov	r16,r6
 c0119e8:	c00c2f80 	call	c00c2f8 <__locale_mb_cur_max>
 c0119ec:	00c00044 	movi	r3,1
 c0119f0:	10c03e26 	beq	r2,r3,c011aec <__fputwc+0x130>
 c0119f4:	81c01704 	addi	r7,r16,92
 c0119f8:	900d883a 	mov	r6,r18
 c0119fc:	d80b883a 	mov	r5,sp
 c011a00:	9809883a 	mov	r4,r19
 c011a04:	c011e8c0 	call	c011e8c <_wcrtomb_r>
 c011a08:	1029883a 	mov	r20,r2
 c011a0c:	00bfffc4 	movi	r2,-1
 c011a10:	a0802026 	beq	r20,r2,c011a94 <__fputwc+0xd8>
 c011a14:	d9400003 	ldbu	r5,0(sp)
 c011a18:	a0001c26 	beq	r20,zero,c011a8c <__fputwc+0xd0>
 c011a1c:	0023883a 	mov	r17,zero
 c011a20:	05400284 	movi	r21,10
 c011a24:	00000906 	br	c011a4c <__fputwc+0x90>
 c011a28:	80800017 	ldw	r2,0(r16)
 c011a2c:	11400005 	stb	r5,0(r2)
 c011a30:	80c00017 	ldw	r3,0(r16)
 c011a34:	18c00044 	addi	r3,r3,1
 c011a38:	80c00015 	stw	r3,0(r16)
 c011a3c:	8c400044 	addi	r17,r17,1
 c011a40:	dc45883a 	add	r2,sp,r17
 c011a44:	8d00112e 	bgeu	r17,r20,c011a8c <__fputwc+0xd0>
 c011a48:	11400003 	ldbu	r5,0(r2)
 c011a4c:	80c00217 	ldw	r3,8(r16)
 c011a50:	18ffffc4 	addi	r3,r3,-1
 c011a54:	80c00215 	stw	r3,8(r16)
 c011a58:	183ff30e 	bge	r3,zero,c011a28 <__alt_data_end+0xfc011a28>
 c011a5c:	80800617 	ldw	r2,24(r16)
 c011a60:	18801916 	blt	r3,r2,c011ac8 <__fputwc+0x10c>
 c011a64:	80800017 	ldw	r2,0(r16)
 c011a68:	11400005 	stb	r5,0(r2)
 c011a6c:	80800017 	ldw	r2,0(r16)
 c011a70:	10c00003 	ldbu	r3,0(r2)
 c011a74:	10800044 	addi	r2,r2,1
 c011a78:	1d402326 	beq	r3,r21,c011b08 <__fputwc+0x14c>
 c011a7c:	80800015 	stw	r2,0(r16)
 c011a80:	8c400044 	addi	r17,r17,1
 c011a84:	dc45883a 	add	r2,sp,r17
 c011a88:	8d3fef36 	bltu	r17,r20,c011a48 <__alt_data_end+0xfc011a48>
 c011a8c:	9005883a 	mov	r2,r18
 c011a90:	00000406 	br	c011aa4 <__fputwc+0xe8>
 c011a94:	80c0030b 	ldhu	r3,12(r16)
 c011a98:	a005883a 	mov	r2,r20
 c011a9c:	18c01014 	ori	r3,r3,64
 c011aa0:	80c0030d 	sth	r3,12(r16)
 c011aa4:	dfc00717 	ldw	ra,28(sp)
 c011aa8:	dd400617 	ldw	r21,24(sp)
 c011aac:	dd000517 	ldw	r20,20(sp)
 c011ab0:	dcc00417 	ldw	r19,16(sp)
 c011ab4:	dc800317 	ldw	r18,12(sp)
 c011ab8:	dc400217 	ldw	r17,8(sp)
 c011abc:	dc000117 	ldw	r16,4(sp)
 c011ac0:	dec00804 	addi	sp,sp,32
 c011ac4:	f800283a 	ret
 c011ac8:	800d883a 	mov	r6,r16
 c011acc:	29403fcc 	andi	r5,r5,255
 c011ad0:	9809883a 	mov	r4,r19
 c011ad4:	c011d340 	call	c011d34 <__swbuf_r>
 c011ad8:	10bfffe0 	cmpeqi	r2,r2,-1
 c011adc:	10803fcc 	andi	r2,r2,255
 c011ae0:	103fd626 	beq	r2,zero,c011a3c <__alt_data_end+0xfc011a3c>
 c011ae4:	00bfffc4 	movi	r2,-1
 c011ae8:	003fee06 	br	c011aa4 <__alt_data_end+0xfc011aa4>
 c011aec:	90ffffc4 	addi	r3,r18,-1
 c011af0:	01003f84 	movi	r4,254
 c011af4:	20ffbf36 	bltu	r4,r3,c0119f4 <__alt_data_end+0xfc0119f4>
 c011af8:	900b883a 	mov	r5,r18
 c011afc:	dc800005 	stb	r18,0(sp)
 c011b00:	1029883a 	mov	r20,r2
 c011b04:	003fc506 	br	c011a1c <__alt_data_end+0xfc011a1c>
 c011b08:	800d883a 	mov	r6,r16
 c011b0c:	a80b883a 	mov	r5,r21
 c011b10:	9809883a 	mov	r4,r19
 c011b14:	c011d340 	call	c011d34 <__swbuf_r>
 c011b18:	10bfffe0 	cmpeqi	r2,r2,-1
 c011b1c:	003fef06 	br	c011adc <__alt_data_end+0xfc011adc>

0c011b20 <_fputwc_r>:
 c011b20:	3080030b 	ldhu	r2,12(r6)
 c011b24:	10c8000c 	andi	r3,r2,8192
 c011b28:	1800051e 	bne	r3,zero,c011b40 <_fputwc_r+0x20>
 c011b2c:	30c01917 	ldw	r3,100(r6)
 c011b30:	10880014 	ori	r2,r2,8192
 c011b34:	3080030d 	sth	r2,12(r6)
 c011b38:	18880014 	ori	r2,r3,8192
 c011b3c:	30801915 	stw	r2,100(r6)
 c011b40:	c0119bc1 	jmpi	c0119bc <__fputwc>

0c011b44 <fputwc>:
 c011b44:	008300b4 	movhi	r2,3074
 c011b48:	defffc04 	addi	sp,sp,-16
 c011b4c:	10aa2604 	addi	r2,r2,-22376
 c011b50:	dc000115 	stw	r16,4(sp)
 c011b54:	14000017 	ldw	r16,0(r2)
 c011b58:	dc400215 	stw	r17,8(sp)
 c011b5c:	dfc00315 	stw	ra,12(sp)
 c011b60:	2023883a 	mov	r17,r4
 c011b64:	80000226 	beq	r16,zero,c011b70 <fputwc+0x2c>
 c011b68:	80800e17 	ldw	r2,56(r16)
 c011b6c:	10001026 	beq	r2,zero,c011bb0 <fputwc+0x6c>
 c011b70:	2880030b 	ldhu	r2,12(r5)
 c011b74:	10c8000c 	andi	r3,r2,8192
 c011b78:	1800051e 	bne	r3,zero,c011b90 <fputwc+0x4c>
 c011b7c:	28c01917 	ldw	r3,100(r5)
 c011b80:	10880014 	ori	r2,r2,8192
 c011b84:	2880030d 	sth	r2,12(r5)
 c011b88:	18880014 	ori	r2,r3,8192
 c011b8c:	28801915 	stw	r2,100(r5)
 c011b90:	280d883a 	mov	r6,r5
 c011b94:	8009883a 	mov	r4,r16
 c011b98:	880b883a 	mov	r5,r17
 c011b9c:	dfc00317 	ldw	ra,12(sp)
 c011ba0:	dc400217 	ldw	r17,8(sp)
 c011ba4:	dc000117 	ldw	r16,4(sp)
 c011ba8:	dec00404 	addi	sp,sp,16
 c011bac:	c0119bc1 	jmpi	c0119bc <__fputwc>
 c011bb0:	8009883a 	mov	r4,r16
 c011bb4:	d9400015 	stw	r5,0(sp)
 c011bb8:	c00b79c0 	call	c00b79c <__sinit>
 c011bbc:	d9400017 	ldw	r5,0(sp)
 c011bc0:	003feb06 	br	c011b70 <__alt_data_end+0xfc011b70>

0c011bc4 <_fstat_r>:
 c011bc4:	defffd04 	addi	sp,sp,-12
 c011bc8:	2805883a 	mov	r2,r5
 c011bcc:	dc000015 	stw	r16,0(sp)
 c011bd0:	040300b4 	movhi	r16,3074
 c011bd4:	dc400115 	stw	r17,4(sp)
 c011bd8:	8431c804 	addi	r16,r16,-14560
 c011bdc:	2023883a 	mov	r17,r4
 c011be0:	300b883a 	mov	r5,r6
 c011be4:	1009883a 	mov	r4,r2
 c011be8:	dfc00215 	stw	ra,8(sp)
 c011bec:	80000015 	stw	zero,0(r16)
 c011bf0:	c0157600 	call	c015760 <fstat>
 c011bf4:	00ffffc4 	movi	r3,-1
 c011bf8:	10c00526 	beq	r2,r3,c011c10 <_fstat_r+0x4c>
 c011bfc:	dfc00217 	ldw	ra,8(sp)
 c011c00:	dc400117 	ldw	r17,4(sp)
 c011c04:	dc000017 	ldw	r16,0(sp)
 c011c08:	dec00304 	addi	sp,sp,12
 c011c0c:	f800283a 	ret
 c011c10:	80c00017 	ldw	r3,0(r16)
 c011c14:	183ff926 	beq	r3,zero,c011bfc <__alt_data_end+0xfc011bfc>
 c011c18:	88c00015 	stw	r3,0(r17)
 c011c1c:	003ff706 	br	c011bfc <__alt_data_end+0xfc011bfc>

0c011c20 <_isatty_r>:
 c011c20:	defffd04 	addi	sp,sp,-12
 c011c24:	dc000015 	stw	r16,0(sp)
 c011c28:	040300b4 	movhi	r16,3074
 c011c2c:	dc400115 	stw	r17,4(sp)
 c011c30:	8431c804 	addi	r16,r16,-14560
 c011c34:	2023883a 	mov	r17,r4
 c011c38:	2809883a 	mov	r4,r5
 c011c3c:	dfc00215 	stw	ra,8(sp)
 c011c40:	80000015 	stw	zero,0(r16)
 c011c44:	c0158540 	call	c015854 <isatty>
 c011c48:	00ffffc4 	movi	r3,-1
 c011c4c:	10c00526 	beq	r2,r3,c011c64 <_isatty_r+0x44>
 c011c50:	dfc00217 	ldw	ra,8(sp)
 c011c54:	dc400117 	ldw	r17,4(sp)
 c011c58:	dc000017 	ldw	r16,0(sp)
 c011c5c:	dec00304 	addi	sp,sp,12
 c011c60:	f800283a 	ret
 c011c64:	80c00017 	ldw	r3,0(r16)
 c011c68:	183ff926 	beq	r3,zero,c011c50 <__alt_data_end+0xfc011c50>
 c011c6c:	88c00015 	stw	r3,0(r17)
 c011c70:	003ff706 	br	c011c50 <__alt_data_end+0xfc011c50>

0c011c74 <_lseek_r>:
 c011c74:	defffd04 	addi	sp,sp,-12
 c011c78:	2805883a 	mov	r2,r5
 c011c7c:	dc000015 	stw	r16,0(sp)
 c011c80:	040300b4 	movhi	r16,3074
 c011c84:	dc400115 	stw	r17,4(sp)
 c011c88:	300b883a 	mov	r5,r6
 c011c8c:	8431c804 	addi	r16,r16,-14560
 c011c90:	2023883a 	mov	r17,r4
 c011c94:	380d883a 	mov	r6,r7
 c011c98:	1009883a 	mov	r4,r2
 c011c9c:	dfc00215 	stw	ra,8(sp)
 c011ca0:	80000015 	stw	zero,0(r16)
 c011ca4:	c015a280 	call	c015a28 <lseek>
 c011ca8:	00ffffc4 	movi	r3,-1
 c011cac:	10c00526 	beq	r2,r3,c011cc4 <_lseek_r+0x50>
 c011cb0:	dfc00217 	ldw	ra,8(sp)
 c011cb4:	dc400117 	ldw	r17,4(sp)
 c011cb8:	dc000017 	ldw	r16,0(sp)
 c011cbc:	dec00304 	addi	sp,sp,12
 c011cc0:	f800283a 	ret
 c011cc4:	80c00017 	ldw	r3,0(r16)
 c011cc8:	183ff926 	beq	r3,zero,c011cb0 <__alt_data_end+0xfc011cb0>
 c011ccc:	88c00015 	stw	r3,0(r17)
 c011cd0:	003ff706 	br	c011cb0 <__alt_data_end+0xfc011cb0>

0c011cd4 <_read_r>:
 c011cd4:	defffd04 	addi	sp,sp,-12
 c011cd8:	2805883a 	mov	r2,r5
 c011cdc:	dc000015 	stw	r16,0(sp)
 c011ce0:	040300b4 	movhi	r16,3074
 c011ce4:	dc400115 	stw	r17,4(sp)
 c011ce8:	300b883a 	mov	r5,r6
 c011cec:	8431c804 	addi	r16,r16,-14560
 c011cf0:	2023883a 	mov	r17,r4
 c011cf4:	380d883a 	mov	r6,r7
 c011cf8:	1009883a 	mov	r4,r2
 c011cfc:	dfc00215 	stw	ra,8(sp)
 c011d00:	80000015 	stw	zero,0(r16)
 c011d04:	c015e6c0 	call	c015e6c <read>
 c011d08:	00ffffc4 	movi	r3,-1
 c011d0c:	10c00526 	beq	r2,r3,c011d24 <_read_r+0x50>
 c011d10:	dfc00217 	ldw	ra,8(sp)
 c011d14:	dc400117 	ldw	r17,4(sp)
 c011d18:	dc000017 	ldw	r16,0(sp)
 c011d1c:	dec00304 	addi	sp,sp,12
 c011d20:	f800283a 	ret
 c011d24:	80c00017 	ldw	r3,0(r16)
 c011d28:	183ff926 	beq	r3,zero,c011d10 <__alt_data_end+0xfc011d10>
 c011d2c:	88c00015 	stw	r3,0(r17)
 c011d30:	003ff706 	br	c011d10 <__alt_data_end+0xfc011d10>

0c011d34 <__swbuf_r>:
 c011d34:	defffb04 	addi	sp,sp,-20
 c011d38:	dcc00315 	stw	r19,12(sp)
 c011d3c:	dc800215 	stw	r18,8(sp)
 c011d40:	dc000015 	stw	r16,0(sp)
 c011d44:	dfc00415 	stw	ra,16(sp)
 c011d48:	dc400115 	stw	r17,4(sp)
 c011d4c:	2025883a 	mov	r18,r4
 c011d50:	2827883a 	mov	r19,r5
 c011d54:	3021883a 	mov	r16,r6
 c011d58:	20000226 	beq	r4,zero,c011d64 <__swbuf_r+0x30>
 c011d5c:	20800e17 	ldw	r2,56(r4)
 c011d60:	10004226 	beq	r2,zero,c011e6c <__swbuf_r+0x138>
 c011d64:	80800617 	ldw	r2,24(r16)
 c011d68:	8100030b 	ldhu	r4,12(r16)
 c011d6c:	80800215 	stw	r2,8(r16)
 c011d70:	2080020c 	andi	r2,r4,8
 c011d74:	10003626 	beq	r2,zero,c011e50 <__swbuf_r+0x11c>
 c011d78:	80c00417 	ldw	r3,16(r16)
 c011d7c:	18003426 	beq	r3,zero,c011e50 <__swbuf_r+0x11c>
 c011d80:	2088000c 	andi	r2,r4,8192
 c011d84:	9c403fcc 	andi	r17,r19,255
 c011d88:	10001a26 	beq	r2,zero,c011df4 <__swbuf_r+0xc0>
 c011d8c:	80800017 	ldw	r2,0(r16)
 c011d90:	81000517 	ldw	r4,20(r16)
 c011d94:	10c7c83a 	sub	r3,r2,r3
 c011d98:	1900200e 	bge	r3,r4,c011e1c <__swbuf_r+0xe8>
 c011d9c:	18c00044 	addi	r3,r3,1
 c011da0:	81000217 	ldw	r4,8(r16)
 c011da4:	11400044 	addi	r5,r2,1
 c011da8:	81400015 	stw	r5,0(r16)
 c011dac:	213fffc4 	addi	r4,r4,-1
 c011db0:	81000215 	stw	r4,8(r16)
 c011db4:	14c00005 	stb	r19,0(r2)
 c011db8:	80800517 	ldw	r2,20(r16)
 c011dbc:	10c01e26 	beq	r2,r3,c011e38 <__swbuf_r+0x104>
 c011dc0:	8080030b 	ldhu	r2,12(r16)
 c011dc4:	1080004c 	andi	r2,r2,1
 c011dc8:	10000226 	beq	r2,zero,c011dd4 <__swbuf_r+0xa0>
 c011dcc:	00800284 	movi	r2,10
 c011dd0:	88801926 	beq	r17,r2,c011e38 <__swbuf_r+0x104>
 c011dd4:	8805883a 	mov	r2,r17
 c011dd8:	dfc00417 	ldw	ra,16(sp)
 c011ddc:	dcc00317 	ldw	r19,12(sp)
 c011de0:	dc800217 	ldw	r18,8(sp)
 c011de4:	dc400117 	ldw	r17,4(sp)
 c011de8:	dc000017 	ldw	r16,0(sp)
 c011dec:	dec00504 	addi	sp,sp,20
 c011df0:	f800283a 	ret
 c011df4:	81401917 	ldw	r5,100(r16)
 c011df8:	00b7ffc4 	movi	r2,-8193
 c011dfc:	21080014 	ori	r4,r4,8192
 c011e00:	2884703a 	and	r2,r5,r2
 c011e04:	80801915 	stw	r2,100(r16)
 c011e08:	80800017 	ldw	r2,0(r16)
 c011e0c:	8100030d 	sth	r4,12(r16)
 c011e10:	81000517 	ldw	r4,20(r16)
 c011e14:	10c7c83a 	sub	r3,r2,r3
 c011e18:	193fe016 	blt	r3,r4,c011d9c <__alt_data_end+0xfc011d9c>
 c011e1c:	800b883a 	mov	r5,r16
 c011e20:	9009883a 	mov	r4,r18
 c011e24:	c00b3b00 	call	c00b3b0 <_fflush_r>
 c011e28:	1000071e 	bne	r2,zero,c011e48 <__swbuf_r+0x114>
 c011e2c:	80800017 	ldw	r2,0(r16)
 c011e30:	00c00044 	movi	r3,1
 c011e34:	003fda06 	br	c011da0 <__alt_data_end+0xfc011da0>
 c011e38:	800b883a 	mov	r5,r16
 c011e3c:	9009883a 	mov	r4,r18
 c011e40:	c00b3b00 	call	c00b3b0 <_fflush_r>
 c011e44:	103fe326 	beq	r2,zero,c011dd4 <__alt_data_end+0xfc011dd4>
 c011e48:	00bfffc4 	movi	r2,-1
 c011e4c:	003fe206 	br	c011dd8 <__alt_data_end+0xfc011dd8>
 c011e50:	800b883a 	mov	r5,r16
 c011e54:	9009883a 	mov	r4,r18
 c011e58:	c0097900 	call	c009790 <__swsetup_r>
 c011e5c:	103ffa1e 	bne	r2,zero,c011e48 <__alt_data_end+0xfc011e48>
 c011e60:	8100030b 	ldhu	r4,12(r16)
 c011e64:	80c00417 	ldw	r3,16(r16)
 c011e68:	003fc506 	br	c011d80 <__alt_data_end+0xfc011d80>
 c011e6c:	c00b79c0 	call	c00b79c <__sinit>
 c011e70:	003fbc06 	br	c011d64 <__alt_data_end+0xfc011d64>

0c011e74 <__swbuf>:
 c011e74:	008300b4 	movhi	r2,3074
 c011e78:	10aa2604 	addi	r2,r2,-22376
 c011e7c:	280d883a 	mov	r6,r5
 c011e80:	200b883a 	mov	r5,r4
 c011e84:	11000017 	ldw	r4,0(r2)
 c011e88:	c011d341 	jmpi	c011d34 <__swbuf_r>

0c011e8c <_wcrtomb_r>:
 c011e8c:	defff604 	addi	sp,sp,-40
 c011e90:	008300b4 	movhi	r2,3074
 c011e94:	dc800815 	stw	r18,32(sp)
 c011e98:	dc400715 	stw	r17,28(sp)
 c011e9c:	dc000615 	stw	r16,24(sp)
 c011ea0:	10aa2a04 	addi	r2,r2,-22360
 c011ea4:	dfc00915 	stw	ra,36(sp)
 c011ea8:	2021883a 	mov	r16,r4
 c011eac:	3823883a 	mov	r17,r7
 c011eb0:	14800017 	ldw	r18,0(r2)
 c011eb4:	28001426 	beq	r5,zero,c011f08 <_wcrtomb_r+0x7c>
 c011eb8:	d9400415 	stw	r5,16(sp)
 c011ebc:	d9800515 	stw	r6,20(sp)
 c011ec0:	c00c2ec0 	call	c00c2ec <__locale_charset>
 c011ec4:	d9800517 	ldw	r6,20(sp)
 c011ec8:	d9400417 	ldw	r5,16(sp)
 c011ecc:	100f883a 	mov	r7,r2
 c011ed0:	dc400015 	stw	r17,0(sp)
 c011ed4:	8009883a 	mov	r4,r16
 c011ed8:	903ee83a 	callr	r18
 c011edc:	00ffffc4 	movi	r3,-1
 c011ee0:	10c0031e 	bne	r2,r3,c011ef0 <_wcrtomb_r+0x64>
 c011ee4:	88000015 	stw	zero,0(r17)
 c011ee8:	00c02284 	movi	r3,138
 c011eec:	80c00015 	stw	r3,0(r16)
 c011ef0:	dfc00917 	ldw	ra,36(sp)
 c011ef4:	dc800817 	ldw	r18,32(sp)
 c011ef8:	dc400717 	ldw	r17,28(sp)
 c011efc:	dc000617 	ldw	r16,24(sp)
 c011f00:	dec00a04 	addi	sp,sp,40
 c011f04:	f800283a 	ret
 c011f08:	c00c2ec0 	call	c00c2ec <__locale_charset>
 c011f0c:	100f883a 	mov	r7,r2
 c011f10:	dc400015 	stw	r17,0(sp)
 c011f14:	000d883a 	mov	r6,zero
 c011f18:	d9400104 	addi	r5,sp,4
 c011f1c:	8009883a 	mov	r4,r16
 c011f20:	903ee83a 	callr	r18
 c011f24:	003fed06 	br	c011edc <__alt_data_end+0xfc011edc>

0c011f28 <wcrtomb>:
 c011f28:	defff604 	addi	sp,sp,-40
 c011f2c:	008300b4 	movhi	r2,3074
 c011f30:	dc800615 	stw	r18,24(sp)
 c011f34:	dc400515 	stw	r17,20(sp)
 c011f38:	10aa2604 	addi	r2,r2,-22376
 c011f3c:	dfc00915 	stw	ra,36(sp)
 c011f40:	dd000815 	stw	r20,32(sp)
 c011f44:	dcc00715 	stw	r19,28(sp)
 c011f48:	dc000415 	stw	r16,16(sp)
 c011f4c:	3025883a 	mov	r18,r6
 c011f50:	14400017 	ldw	r17,0(r2)
 c011f54:	20001926 	beq	r4,zero,c011fbc <wcrtomb+0x94>
 c011f58:	008300b4 	movhi	r2,3074
 c011f5c:	10aa2a04 	addi	r2,r2,-22360
 c011f60:	15000017 	ldw	r20,0(r2)
 c011f64:	2021883a 	mov	r16,r4
 c011f68:	2827883a 	mov	r19,r5
 c011f6c:	c00c2ec0 	call	c00c2ec <__locale_charset>
 c011f70:	100f883a 	mov	r7,r2
 c011f74:	dc800015 	stw	r18,0(sp)
 c011f78:	980d883a 	mov	r6,r19
 c011f7c:	800b883a 	mov	r5,r16
 c011f80:	8809883a 	mov	r4,r17
 c011f84:	a03ee83a 	callr	r20
 c011f88:	00ffffc4 	movi	r3,-1
 c011f8c:	10c0031e 	bne	r2,r3,c011f9c <wcrtomb+0x74>
 c011f90:	90000015 	stw	zero,0(r18)
 c011f94:	00c02284 	movi	r3,138
 c011f98:	88c00015 	stw	r3,0(r17)
 c011f9c:	dfc00917 	ldw	ra,36(sp)
 c011fa0:	dd000817 	ldw	r20,32(sp)
 c011fa4:	dcc00717 	ldw	r19,28(sp)
 c011fa8:	dc800617 	ldw	r18,24(sp)
 c011fac:	dc400517 	ldw	r17,20(sp)
 c011fb0:	dc000417 	ldw	r16,16(sp)
 c011fb4:	dec00a04 	addi	sp,sp,40
 c011fb8:	f800283a 	ret
 c011fbc:	008300b4 	movhi	r2,3074
 c011fc0:	10aa2a04 	addi	r2,r2,-22360
 c011fc4:	14000017 	ldw	r16,0(r2)
 c011fc8:	c00c2ec0 	call	c00c2ec <__locale_charset>
 c011fcc:	100f883a 	mov	r7,r2
 c011fd0:	dc800015 	stw	r18,0(sp)
 c011fd4:	000d883a 	mov	r6,zero
 c011fd8:	d9400104 	addi	r5,sp,4
 c011fdc:	8809883a 	mov	r4,r17
 c011fe0:	803ee83a 	callr	r16
 c011fe4:	003fe806 	br	c011f88 <__alt_data_end+0xfc011f88>

0c011fe8 <__ascii_wctomb>:
 c011fe8:	28000526 	beq	r5,zero,c012000 <__ascii_wctomb+0x18>
 c011fec:	00803fc4 	movi	r2,255
 c011ff0:	11800536 	bltu	r2,r6,c012008 <__ascii_wctomb+0x20>
 c011ff4:	29800005 	stb	r6,0(r5)
 c011ff8:	00800044 	movi	r2,1
 c011ffc:	f800283a 	ret
 c012000:	0005883a 	mov	r2,zero
 c012004:	f800283a 	ret
 c012008:	00802284 	movi	r2,138
 c01200c:	20800015 	stw	r2,0(r4)
 c012010:	00bfffc4 	movi	r2,-1
 c012014:	f800283a 	ret

0c012018 <_wctomb_r>:
 c012018:	008300b4 	movhi	r2,3074
 c01201c:	defff904 	addi	sp,sp,-28
 c012020:	10aa2a04 	addi	r2,r2,-22360
 c012024:	dfc00615 	stw	ra,24(sp)
 c012028:	dc400515 	stw	r17,20(sp)
 c01202c:	dc000415 	stw	r16,16(sp)
 c012030:	3823883a 	mov	r17,r7
 c012034:	14000017 	ldw	r16,0(r2)
 c012038:	d9000115 	stw	r4,4(sp)
 c01203c:	d9400215 	stw	r5,8(sp)
 c012040:	d9800315 	stw	r6,12(sp)
 c012044:	c00c2ec0 	call	c00c2ec <__locale_charset>
 c012048:	d9800317 	ldw	r6,12(sp)
 c01204c:	d9400217 	ldw	r5,8(sp)
 c012050:	d9000117 	ldw	r4,4(sp)
 c012054:	100f883a 	mov	r7,r2
 c012058:	dc400015 	stw	r17,0(sp)
 c01205c:	803ee83a 	callr	r16
 c012060:	dfc00617 	ldw	ra,24(sp)
 c012064:	dc400517 	ldw	r17,20(sp)
 c012068:	dc000417 	ldw	r16,16(sp)
 c01206c:	dec00704 	addi	sp,sp,28
 c012070:	f800283a 	ret

0c012074 <__muldi3>:
 c012074:	defff604 	addi	sp,sp,-40
 c012078:	dd800615 	stw	r22,24(sp)
 c01207c:	dd400515 	stw	r21,20(sp)
 c012080:	dc400115 	stw	r17,4(sp)
 c012084:	357fffcc 	andi	r21,r6,65535
 c012088:	2022d43a 	srli	r17,r4,16
 c01208c:	25bfffcc 	andi	r22,r4,65535
 c012090:	dcc00315 	stw	r19,12(sp)
 c012094:	dc800215 	stw	r18,8(sp)
 c012098:	2027883a 	mov	r19,r4
 c01209c:	2825883a 	mov	r18,r5
 c0120a0:	b009883a 	mov	r4,r22
 c0120a4:	a80b883a 	mov	r5,r21
 c0120a8:	dfc00915 	stw	ra,36(sp)
 c0120ac:	df000815 	stw	fp,32(sp)
 c0120b0:	ddc00715 	stw	r23,28(sp)
 c0120b4:	3839883a 	mov	fp,r7
 c0120b8:	302ed43a 	srli	r23,r6,16
 c0120bc:	dd000415 	stw	r20,16(sp)
 c0120c0:	dc000015 	stw	r16,0(sp)
 c0120c4:	3029883a 	mov	r20,r6
 c0120c8:	c004de00 	call	c004de0 <__mulsi3>
 c0120cc:	a80b883a 	mov	r5,r21
 c0120d0:	8809883a 	mov	r4,r17
 c0120d4:	1021883a 	mov	r16,r2
 c0120d8:	c004de00 	call	c004de0 <__mulsi3>
 c0120dc:	8809883a 	mov	r4,r17
 c0120e0:	b80b883a 	mov	r5,r23
 c0120e4:	102b883a 	mov	r21,r2
 c0120e8:	c004de00 	call	c004de0 <__mulsi3>
 c0120ec:	b80b883a 	mov	r5,r23
 c0120f0:	b009883a 	mov	r4,r22
 c0120f4:	1023883a 	mov	r17,r2
 c0120f8:	c004de00 	call	c004de0 <__mulsi3>
 c0120fc:	8006d43a 	srli	r3,r16,16
 c012100:	1545883a 	add	r2,r2,r21
 c012104:	1885883a 	add	r2,r3,r2
 c012108:	1540022e 	bgeu	r2,r21,c012114 <__muldi3+0xa0>
 c01210c:	00c00074 	movhi	r3,1
 c012110:	88e3883a 	add	r17,r17,r3
 c012114:	1006d43a 	srli	r3,r2,16
 c012118:	1004943a 	slli	r2,r2,16
 c01211c:	e00b883a 	mov	r5,fp
 c012120:	9809883a 	mov	r4,r19
 c012124:	843fffcc 	andi	r16,r16,65535
 c012128:	1c63883a 	add	r17,r3,r17
 c01212c:	1421883a 	add	r16,r2,r16
 c012130:	c004de00 	call	c004de0 <__mulsi3>
 c012134:	900b883a 	mov	r5,r18
 c012138:	a009883a 	mov	r4,r20
 c01213c:	1027883a 	mov	r19,r2
 c012140:	c004de00 	call	c004de0 <__mulsi3>
 c012144:	9885883a 	add	r2,r19,r2
 c012148:	1447883a 	add	r3,r2,r17
 c01214c:	8005883a 	mov	r2,r16
 c012150:	dfc00917 	ldw	ra,36(sp)
 c012154:	df000817 	ldw	fp,32(sp)
 c012158:	ddc00717 	ldw	r23,28(sp)
 c01215c:	dd800617 	ldw	r22,24(sp)
 c012160:	dd400517 	ldw	r21,20(sp)
 c012164:	dd000417 	ldw	r20,16(sp)
 c012168:	dcc00317 	ldw	r19,12(sp)
 c01216c:	dc800217 	ldw	r18,8(sp)
 c012170:	dc400117 	ldw	r17,4(sp)
 c012174:	dc000017 	ldw	r16,0(sp)
 c012178:	dec00a04 	addi	sp,sp,40
 c01217c:	f800283a 	ret

0c012180 <__udivdi3>:
 c012180:	defff404 	addi	sp,sp,-48
 c012184:	dcc00515 	stw	r19,20(sp)
 c012188:	dc000215 	stw	r16,8(sp)
 c01218c:	dfc00b15 	stw	ra,44(sp)
 c012190:	df000a15 	stw	fp,40(sp)
 c012194:	ddc00915 	stw	r23,36(sp)
 c012198:	dd800815 	stw	r22,32(sp)
 c01219c:	dd400715 	stw	r21,28(sp)
 c0121a0:	dd000615 	stw	r20,24(sp)
 c0121a4:	dc800415 	stw	r18,16(sp)
 c0121a8:	dc400315 	stw	r17,12(sp)
 c0121ac:	2027883a 	mov	r19,r4
 c0121b0:	2821883a 	mov	r16,r5
 c0121b4:	3800461e 	bne	r7,zero,c0122d0 <__udivdi3+0x150>
 c0121b8:	3023883a 	mov	r17,r6
 c0121bc:	2025883a 	mov	r18,r4
 c0121c0:	2980572e 	bgeu	r5,r6,c012320 <__udivdi3+0x1a0>
 c0121c4:	00bfffd4 	movui	r2,65535
 c0121c8:	282d883a 	mov	r22,r5
 c0121cc:	1180b236 	bltu	r2,r6,c012498 <__udivdi3+0x318>
 c0121d0:	00803fc4 	movi	r2,255
 c0121d4:	1185803a 	cmpltu	r2,r2,r6
 c0121d8:	100490fa 	slli	r2,r2,3
 c0121dc:	3086d83a 	srl	r3,r6,r2
 c0121e0:	010300b4 	movhi	r4,3074
 c0121e4:	21226104 	addi	r4,r4,-30332
 c0121e8:	20c7883a 	add	r3,r4,r3
 c0121ec:	18c00003 	ldbu	r3,0(r3)
 c0121f0:	1885883a 	add	r2,r3,r2
 c0121f4:	00c00804 	movi	r3,32
 c0121f8:	1887c83a 	sub	r3,r3,r2
 c0121fc:	18000526 	beq	r3,zero,c012214 <__udivdi3+0x94>
 c012200:	80e0983a 	sll	r16,r16,r3
 c012204:	9884d83a 	srl	r2,r19,r2
 c012208:	30e2983a 	sll	r17,r6,r3
 c01220c:	98e4983a 	sll	r18,r19,r3
 c012210:	142cb03a 	or	r22,r2,r16
 c012214:	882ad43a 	srli	r21,r17,16
 c012218:	b009883a 	mov	r4,r22
 c01221c:	8d3fffcc 	andi	r20,r17,65535
 c012220:	a80b883a 	mov	r5,r21
 c012224:	c004d880 	call	c004d88 <__umodsi3>
 c012228:	b009883a 	mov	r4,r22
 c01222c:	a80b883a 	mov	r5,r21
 c012230:	1027883a 	mov	r19,r2
 c012234:	c004d240 	call	c004d24 <__udivsi3>
 c012238:	100b883a 	mov	r5,r2
 c01223c:	a009883a 	mov	r4,r20
 c012240:	102d883a 	mov	r22,r2
 c012244:	c004de00 	call	c004de0 <__mulsi3>
 c012248:	9826943a 	slli	r19,r19,16
 c01224c:	9006d43a 	srli	r3,r18,16
 c012250:	1cc6b03a 	or	r3,r3,r19
 c012254:	1880052e 	bgeu	r3,r2,c01226c <__udivdi3+0xec>
 c012258:	1c47883a 	add	r3,r3,r17
 c01225c:	b13fffc4 	addi	r4,r22,-1
 c012260:	1c400136 	bltu	r3,r17,c012268 <__udivdi3+0xe8>
 c012264:	18814236 	bltu	r3,r2,c012770 <__udivdi3+0x5f0>
 c012268:	202d883a 	mov	r22,r4
 c01226c:	18a1c83a 	sub	r16,r3,r2
 c012270:	8009883a 	mov	r4,r16
 c012274:	a80b883a 	mov	r5,r21
 c012278:	c004d880 	call	c004d88 <__umodsi3>
 c01227c:	1027883a 	mov	r19,r2
 c012280:	8009883a 	mov	r4,r16
 c012284:	a80b883a 	mov	r5,r21
 c012288:	9826943a 	slli	r19,r19,16
 c01228c:	c004d240 	call	c004d24 <__udivsi3>
 c012290:	100b883a 	mov	r5,r2
 c012294:	a009883a 	mov	r4,r20
 c012298:	94bfffcc 	andi	r18,r18,65535
 c01229c:	1021883a 	mov	r16,r2
 c0122a0:	94e4b03a 	or	r18,r18,r19
 c0122a4:	c004de00 	call	c004de0 <__mulsi3>
 c0122a8:	9080052e 	bgeu	r18,r2,c0122c0 <__udivdi3+0x140>
 c0122ac:	8ca5883a 	add	r18,r17,r18
 c0122b0:	80ffffc4 	addi	r3,r16,-1
 c0122b4:	94410c36 	bltu	r18,r17,c0126e8 <__udivdi3+0x568>
 c0122b8:	90810b2e 	bgeu	r18,r2,c0126e8 <__udivdi3+0x568>
 c0122bc:	843fff84 	addi	r16,r16,-2
 c0122c0:	b004943a 	slli	r2,r22,16
 c0122c4:	0007883a 	mov	r3,zero
 c0122c8:	1404b03a 	or	r2,r2,r16
 c0122cc:	00005e06 	br	c012448 <__udivdi3+0x2c8>
 c0122d0:	29c05b36 	bltu	r5,r7,c012440 <__udivdi3+0x2c0>
 c0122d4:	00bfffd4 	movui	r2,65535
 c0122d8:	11c0672e 	bgeu	r2,r7,c012478 <__udivdi3+0x2f8>
 c0122dc:	00804034 	movhi	r2,256
 c0122e0:	10bfffc4 	addi	r2,r2,-1
 c0122e4:	11c10a36 	bltu	r2,r7,c012710 <__udivdi3+0x590>
 c0122e8:	00800404 	movi	r2,16
 c0122ec:	3886d83a 	srl	r3,r7,r2
 c0122f0:	010300b4 	movhi	r4,3074
 c0122f4:	21226104 	addi	r4,r4,-30332
 c0122f8:	20c7883a 	add	r3,r4,r3
 c0122fc:	18c00003 	ldbu	r3,0(r3)
 c012300:	05c00804 	movi	r23,32
 c012304:	1885883a 	add	r2,r3,r2
 c012308:	b8afc83a 	sub	r23,r23,r2
 c01230c:	b800671e 	bne	r23,zero,c0124ac <__udivdi3+0x32c>
 c012310:	3c010536 	bltu	r7,r16,c012728 <__udivdi3+0x5a8>
 c012314:	9985403a 	cmpgeu	r2,r19,r6
 c012318:	0007883a 	mov	r3,zero
 c01231c:	00004a06 	br	c012448 <__udivdi3+0x2c8>
 c012320:	3000041e 	bne	r6,zero,c012334 <__udivdi3+0x1b4>
 c012324:	000b883a 	mov	r5,zero
 c012328:	01000044 	movi	r4,1
 c01232c:	c004d240 	call	c004d24 <__udivsi3>
 c012330:	1023883a 	mov	r17,r2
 c012334:	00bfffd4 	movui	r2,65535
 c012338:	1440532e 	bgeu	r2,r17,c012488 <__udivdi3+0x308>
 c01233c:	00804034 	movhi	r2,256
 c012340:	10bfffc4 	addi	r2,r2,-1
 c012344:	1440f436 	bltu	r2,r17,c012718 <__udivdi3+0x598>
 c012348:	00800404 	movi	r2,16
 c01234c:	8886d83a 	srl	r3,r17,r2
 c012350:	010300b4 	movhi	r4,3074
 c012354:	21226104 	addi	r4,r4,-30332
 c012358:	20c7883a 	add	r3,r4,r3
 c01235c:	18c00003 	ldbu	r3,0(r3)
 c012360:	1885883a 	add	r2,r3,r2
 c012364:	00c00804 	movi	r3,32
 c012368:	1887c83a 	sub	r3,r3,r2
 c01236c:	1800a51e 	bne	r3,zero,c012604 <__udivdi3+0x484>
 c012370:	882ad43a 	srli	r21,r17,16
 c012374:	8461c83a 	sub	r16,r16,r17
 c012378:	8d3fffcc 	andi	r20,r17,65535
 c01237c:	00c00044 	movi	r3,1
 c012380:	a80b883a 	mov	r5,r21
 c012384:	8009883a 	mov	r4,r16
 c012388:	d8c00115 	stw	r3,4(sp)
 c01238c:	c004d880 	call	c004d88 <__umodsi3>
 c012390:	a80b883a 	mov	r5,r21
 c012394:	8009883a 	mov	r4,r16
 c012398:	1027883a 	mov	r19,r2
 c01239c:	c004d240 	call	c004d24 <__udivsi3>
 c0123a0:	a00b883a 	mov	r5,r20
 c0123a4:	1009883a 	mov	r4,r2
 c0123a8:	102d883a 	mov	r22,r2
 c0123ac:	c004de00 	call	c004de0 <__mulsi3>
 c0123b0:	9826943a 	slli	r19,r19,16
 c0123b4:	900ed43a 	srli	r7,r18,16
 c0123b8:	d8c00117 	ldw	r3,4(sp)
 c0123bc:	3cceb03a 	or	r7,r7,r19
 c0123c0:	3880052e 	bgeu	r7,r2,c0123d8 <__udivdi3+0x258>
 c0123c4:	3c4f883a 	add	r7,r7,r17
 c0123c8:	b13fffc4 	addi	r4,r22,-1
 c0123cc:	3c400136 	bltu	r7,r17,c0123d4 <__udivdi3+0x254>
 c0123d0:	3880e436 	bltu	r7,r2,c012764 <__udivdi3+0x5e4>
 c0123d4:	202d883a 	mov	r22,r4
 c0123d8:	38a1c83a 	sub	r16,r7,r2
 c0123dc:	8009883a 	mov	r4,r16
 c0123e0:	a80b883a 	mov	r5,r21
 c0123e4:	d8c00115 	stw	r3,4(sp)
 c0123e8:	c004d880 	call	c004d88 <__umodsi3>
 c0123ec:	1027883a 	mov	r19,r2
 c0123f0:	8009883a 	mov	r4,r16
 c0123f4:	a80b883a 	mov	r5,r21
 c0123f8:	9826943a 	slli	r19,r19,16
 c0123fc:	c004d240 	call	c004d24 <__udivsi3>
 c012400:	a00b883a 	mov	r5,r20
 c012404:	1009883a 	mov	r4,r2
 c012408:	94bfffcc 	andi	r18,r18,65535
 c01240c:	1021883a 	mov	r16,r2
 c012410:	94e4b03a 	or	r18,r18,r19
 c012414:	c004de00 	call	c004de0 <__mulsi3>
 c012418:	d8c00117 	ldw	r3,4(sp)
 c01241c:	9080052e 	bgeu	r18,r2,c012434 <__udivdi3+0x2b4>
 c012420:	8ca5883a 	add	r18,r17,r18
 c012424:	813fffc4 	addi	r4,r16,-1
 c012428:	9440ad36 	bltu	r18,r17,c0126e0 <__udivdi3+0x560>
 c01242c:	9080ac2e 	bgeu	r18,r2,c0126e0 <__udivdi3+0x560>
 c012430:	843fff84 	addi	r16,r16,-2
 c012434:	b004943a 	slli	r2,r22,16
 c012438:	1404b03a 	or	r2,r2,r16
 c01243c:	00000206 	br	c012448 <__udivdi3+0x2c8>
 c012440:	0007883a 	mov	r3,zero
 c012444:	0005883a 	mov	r2,zero
 c012448:	dfc00b17 	ldw	ra,44(sp)
 c01244c:	df000a17 	ldw	fp,40(sp)
 c012450:	ddc00917 	ldw	r23,36(sp)
 c012454:	dd800817 	ldw	r22,32(sp)
 c012458:	dd400717 	ldw	r21,28(sp)
 c01245c:	dd000617 	ldw	r20,24(sp)
 c012460:	dcc00517 	ldw	r19,20(sp)
 c012464:	dc800417 	ldw	r18,16(sp)
 c012468:	dc400317 	ldw	r17,12(sp)
 c01246c:	dc000217 	ldw	r16,8(sp)
 c012470:	dec00c04 	addi	sp,sp,48
 c012474:	f800283a 	ret
 c012478:	00803fc4 	movi	r2,255
 c01247c:	11c5803a 	cmpltu	r2,r2,r7
 c012480:	100490fa 	slli	r2,r2,3
 c012484:	003f9906 	br	c0122ec <__alt_data_end+0xfc0122ec>
 c012488:	00803fc4 	movi	r2,255
 c01248c:	1445803a 	cmpltu	r2,r2,r17
 c012490:	100490fa 	slli	r2,r2,3
 c012494:	003fad06 	br	c01234c <__alt_data_end+0xfc01234c>
 c012498:	00804034 	movhi	r2,256
 c01249c:	10bfffc4 	addi	r2,r2,-1
 c0124a0:	11809f36 	bltu	r2,r6,c012720 <__udivdi3+0x5a0>
 c0124a4:	00800404 	movi	r2,16
 c0124a8:	003f4c06 	br	c0121dc <__alt_data_end+0xfc0121dc>
 c0124ac:	3dce983a 	sll	r7,r7,r23
 c0124b0:	30b8d83a 	srl	fp,r6,r2
 c0124b4:	80a2d83a 	srl	r17,r16,r2
 c0124b8:	35cc983a 	sll	r6,r6,r23
 c0124bc:	3f38b03a 	or	fp,r7,fp
 c0124c0:	e024d43a 	srli	r18,fp,16
 c0124c4:	9884d83a 	srl	r2,r19,r2
 c0124c8:	85e0983a 	sll	r16,r16,r23
 c0124cc:	8809883a 	mov	r4,r17
 c0124d0:	900b883a 	mov	r5,r18
 c0124d4:	d9800015 	stw	r6,0(sp)
 c0124d8:	1420b03a 	or	r16,r2,r16
 c0124dc:	c004d880 	call	c004d88 <__umodsi3>
 c0124e0:	900b883a 	mov	r5,r18
 c0124e4:	8809883a 	mov	r4,r17
 c0124e8:	1029883a 	mov	r20,r2
 c0124ec:	e5bfffcc 	andi	r22,fp,65535
 c0124f0:	c004d240 	call	c004d24 <__udivsi3>
 c0124f4:	100b883a 	mov	r5,r2
 c0124f8:	b009883a 	mov	r4,r22
 c0124fc:	102b883a 	mov	r21,r2
 c012500:	c004de00 	call	c004de0 <__mulsi3>
 c012504:	a028943a 	slli	r20,r20,16
 c012508:	8006d43a 	srli	r3,r16,16
 c01250c:	1d06b03a 	or	r3,r3,r20
 c012510:	1880042e 	bgeu	r3,r2,c012524 <__udivdi3+0x3a4>
 c012514:	1f07883a 	add	r3,r3,fp
 c012518:	a93fffc4 	addi	r4,r21,-1
 c01251c:	1f00892e 	bgeu	r3,fp,c012744 <__udivdi3+0x5c4>
 c012520:	202b883a 	mov	r21,r4
 c012524:	18a3c83a 	sub	r17,r3,r2
 c012528:	8809883a 	mov	r4,r17
 c01252c:	900b883a 	mov	r5,r18
 c012530:	c004d880 	call	c004d88 <__umodsi3>
 c012534:	1029883a 	mov	r20,r2
 c012538:	8809883a 	mov	r4,r17
 c01253c:	900b883a 	mov	r5,r18
 c012540:	a028943a 	slli	r20,r20,16
 c012544:	c004d240 	call	c004d24 <__udivsi3>
 c012548:	100b883a 	mov	r5,r2
 c01254c:	b009883a 	mov	r4,r22
 c012550:	843fffcc 	andi	r16,r16,65535
 c012554:	1023883a 	mov	r17,r2
 c012558:	8520b03a 	or	r16,r16,r20
 c01255c:	c004de00 	call	c004de0 <__mulsi3>
 c012560:	8080042e 	bgeu	r16,r2,c012574 <__udivdi3+0x3f4>
 c012564:	8721883a 	add	r16,r16,fp
 c012568:	88ffffc4 	addi	r3,r17,-1
 c01256c:	8700712e 	bgeu	r16,fp,c012734 <__udivdi3+0x5b4>
 c012570:	1823883a 	mov	r17,r3
 c012574:	a80e943a 	slli	r7,r21,16
 c012578:	d8c00017 	ldw	r3,0(sp)
 c01257c:	80a1c83a 	sub	r16,r16,r2
 c012580:	3c64b03a 	or	r18,r7,r17
 c012584:	1d3fffcc 	andi	r20,r3,65535
 c012588:	9022d43a 	srli	r17,r18,16
 c01258c:	95bfffcc 	andi	r22,r18,65535
 c012590:	a00b883a 	mov	r5,r20
 c012594:	b009883a 	mov	r4,r22
 c012598:	182ad43a 	srli	r21,r3,16
 c01259c:	c004de00 	call	c004de0 <__mulsi3>
 c0125a0:	a00b883a 	mov	r5,r20
 c0125a4:	8809883a 	mov	r4,r17
 c0125a8:	1039883a 	mov	fp,r2
 c0125ac:	c004de00 	call	c004de0 <__mulsi3>
 c0125b0:	8809883a 	mov	r4,r17
 c0125b4:	a80b883a 	mov	r5,r21
 c0125b8:	1029883a 	mov	r20,r2
 c0125bc:	c004de00 	call	c004de0 <__mulsi3>
 c0125c0:	a80b883a 	mov	r5,r21
 c0125c4:	b009883a 	mov	r4,r22
 c0125c8:	1023883a 	mov	r17,r2
 c0125cc:	c004de00 	call	c004de0 <__mulsi3>
 c0125d0:	e006d43a 	srli	r3,fp,16
 c0125d4:	1505883a 	add	r2,r2,r20
 c0125d8:	1887883a 	add	r3,r3,r2
 c0125dc:	1d00022e 	bgeu	r3,r20,c0125e8 <__udivdi3+0x468>
 c0125e0:	00800074 	movhi	r2,1
 c0125e4:	88a3883a 	add	r17,r17,r2
 c0125e8:	1804d43a 	srli	r2,r3,16
 c0125ec:	1463883a 	add	r17,r2,r17
 c0125f0:	84404436 	bltu	r16,r17,c012704 <__udivdi3+0x584>
 c0125f4:	84403e26 	beq	r16,r17,c0126f0 <__udivdi3+0x570>
 c0125f8:	9005883a 	mov	r2,r18
 c0125fc:	0007883a 	mov	r3,zero
 c012600:	003f9106 	br	c012448 <__alt_data_end+0xfc012448>
 c012604:	88e2983a 	sll	r17,r17,r3
 c012608:	80aed83a 	srl	r23,r16,r2
 c01260c:	80e0983a 	sll	r16,r16,r3
 c012610:	882ad43a 	srli	r21,r17,16
 c012614:	9884d83a 	srl	r2,r19,r2
 c012618:	b809883a 	mov	r4,r23
 c01261c:	a80b883a 	mov	r5,r21
 c012620:	98e4983a 	sll	r18,r19,r3
 c012624:	142cb03a 	or	r22,r2,r16
 c012628:	c004d880 	call	c004d88 <__umodsi3>
 c01262c:	b809883a 	mov	r4,r23
 c012630:	a80b883a 	mov	r5,r21
 c012634:	1027883a 	mov	r19,r2
 c012638:	8d3fffcc 	andi	r20,r17,65535
 c01263c:	c004d240 	call	c004d24 <__udivsi3>
 c012640:	a009883a 	mov	r4,r20
 c012644:	100b883a 	mov	r5,r2
 c012648:	102f883a 	mov	r23,r2
 c01264c:	c004de00 	call	c004de0 <__mulsi3>
 c012650:	9826943a 	slli	r19,r19,16
 c012654:	b008d43a 	srli	r4,r22,16
 c012658:	24c8b03a 	or	r4,r4,r19
 c01265c:	2080062e 	bgeu	r4,r2,c012678 <__udivdi3+0x4f8>
 c012660:	2449883a 	add	r4,r4,r17
 c012664:	b8ffffc4 	addi	r3,r23,-1
 c012668:	24403c36 	bltu	r4,r17,c01275c <__udivdi3+0x5dc>
 c01266c:	20803b2e 	bgeu	r4,r2,c01275c <__udivdi3+0x5dc>
 c012670:	bdffff84 	addi	r23,r23,-2
 c012674:	2449883a 	add	r4,r4,r17
 c012678:	20a1c83a 	sub	r16,r4,r2
 c01267c:	a80b883a 	mov	r5,r21
 c012680:	8009883a 	mov	r4,r16
 c012684:	c004d880 	call	c004d88 <__umodsi3>
 c012688:	a80b883a 	mov	r5,r21
 c01268c:	8009883a 	mov	r4,r16
 c012690:	1027883a 	mov	r19,r2
 c012694:	c004d240 	call	c004d24 <__udivsi3>
 c012698:	a009883a 	mov	r4,r20
 c01269c:	100b883a 	mov	r5,r2
 c0126a0:	9826943a 	slli	r19,r19,16
 c0126a4:	1039883a 	mov	fp,r2
 c0126a8:	c004de00 	call	c004de0 <__mulsi3>
 c0126ac:	b13fffcc 	andi	r4,r22,65535
 c0126b0:	24c8b03a 	or	r4,r4,r19
 c0126b4:	2080062e 	bgeu	r4,r2,c0126d0 <__udivdi3+0x550>
 c0126b8:	2449883a 	add	r4,r4,r17
 c0126bc:	e0ffffc4 	addi	r3,fp,-1
 c0126c0:	24402436 	bltu	r4,r17,c012754 <__udivdi3+0x5d4>
 c0126c4:	2080232e 	bgeu	r4,r2,c012754 <__udivdi3+0x5d4>
 c0126c8:	e73fff84 	addi	fp,fp,-2
 c0126cc:	2449883a 	add	r4,r4,r17
 c0126d0:	b82e943a 	slli	r23,r23,16
 c0126d4:	20a1c83a 	sub	r16,r4,r2
 c0126d8:	bf06b03a 	or	r3,r23,fp
 c0126dc:	003f2806 	br	c012380 <__alt_data_end+0xfc012380>
 c0126e0:	2021883a 	mov	r16,r4
 c0126e4:	003f5306 	br	c012434 <__alt_data_end+0xfc012434>
 c0126e8:	1821883a 	mov	r16,r3
 c0126ec:	003ef406 	br	c0122c0 <__alt_data_end+0xfc0122c0>
 c0126f0:	1806943a 	slli	r3,r3,16
 c0126f4:	9de6983a 	sll	r19,r19,r23
 c0126f8:	e73fffcc 	andi	fp,fp,65535
 c0126fc:	1f07883a 	add	r3,r3,fp
 c012700:	98ffbd2e 	bgeu	r19,r3,c0125f8 <__alt_data_end+0xfc0125f8>
 c012704:	90bfffc4 	addi	r2,r18,-1
 c012708:	0007883a 	mov	r3,zero
 c01270c:	003f4e06 	br	c012448 <__alt_data_end+0xfc012448>
 c012710:	00800604 	movi	r2,24
 c012714:	003ef506 	br	c0122ec <__alt_data_end+0xfc0122ec>
 c012718:	00800604 	movi	r2,24
 c01271c:	003f0b06 	br	c01234c <__alt_data_end+0xfc01234c>
 c012720:	00800604 	movi	r2,24
 c012724:	003ead06 	br	c0121dc <__alt_data_end+0xfc0121dc>
 c012728:	0007883a 	mov	r3,zero
 c01272c:	00800044 	movi	r2,1
 c012730:	003f4506 	br	c012448 <__alt_data_end+0xfc012448>
 c012734:	80bf8e2e 	bgeu	r16,r2,c012570 <__alt_data_end+0xfc012570>
 c012738:	8c7fff84 	addi	r17,r17,-2
 c01273c:	8721883a 	add	r16,r16,fp
 c012740:	003f8c06 	br	c012574 <__alt_data_end+0xfc012574>
 c012744:	18bf762e 	bgeu	r3,r2,c012520 <__alt_data_end+0xfc012520>
 c012748:	ad7fff84 	addi	r21,r21,-2
 c01274c:	1f07883a 	add	r3,r3,fp
 c012750:	003f7406 	br	c012524 <__alt_data_end+0xfc012524>
 c012754:	1839883a 	mov	fp,r3
 c012758:	003fdd06 	br	c0126d0 <__alt_data_end+0xfc0126d0>
 c01275c:	182f883a 	mov	r23,r3
 c012760:	003fc506 	br	c012678 <__alt_data_end+0xfc012678>
 c012764:	b5bfff84 	addi	r22,r22,-2
 c012768:	3c4f883a 	add	r7,r7,r17
 c01276c:	003f1a06 	br	c0123d8 <__alt_data_end+0xfc0123d8>
 c012770:	b5bfff84 	addi	r22,r22,-2
 c012774:	1c47883a 	add	r3,r3,r17
 c012778:	003ebc06 	br	c01226c <__alt_data_end+0xfc01226c>

0c01277c <__umoddi3>:
 c01277c:	defff304 	addi	sp,sp,-52
 c012780:	df000b15 	stw	fp,44(sp)
 c012784:	dc400415 	stw	r17,16(sp)
 c012788:	dc000315 	stw	r16,12(sp)
 c01278c:	dfc00c15 	stw	ra,48(sp)
 c012790:	ddc00a15 	stw	r23,40(sp)
 c012794:	dd800915 	stw	r22,36(sp)
 c012798:	dd400815 	stw	r21,32(sp)
 c01279c:	dd000715 	stw	r20,28(sp)
 c0127a0:	dcc00615 	stw	r19,24(sp)
 c0127a4:	dc800515 	stw	r18,20(sp)
 c0127a8:	2021883a 	mov	r16,r4
 c0127ac:	2823883a 	mov	r17,r5
 c0127b0:	2839883a 	mov	fp,r5
 c0127b4:	3800401e 	bne	r7,zero,c0128b8 <__umoddi3+0x13c>
 c0127b8:	3027883a 	mov	r19,r6
 c0127bc:	2029883a 	mov	r20,r4
 c0127c0:	2980552e 	bgeu	r5,r6,c012918 <__umoddi3+0x19c>
 c0127c4:	00bfffd4 	movui	r2,65535
 c0127c8:	1180a236 	bltu	r2,r6,c012a54 <__umoddi3+0x2d8>
 c0127cc:	01003fc4 	movi	r4,255
 c0127d0:	2189803a 	cmpltu	r4,r4,r6
 c0127d4:	200890fa 	slli	r4,r4,3
 c0127d8:	3104d83a 	srl	r2,r6,r4
 c0127dc:	00c300b4 	movhi	r3,3074
 c0127e0:	18e26104 	addi	r3,r3,-30332
 c0127e4:	1885883a 	add	r2,r3,r2
 c0127e8:	10c00003 	ldbu	r3,0(r2)
 c0127ec:	00800804 	movi	r2,32
 c0127f0:	1909883a 	add	r4,r3,r4
 c0127f4:	1125c83a 	sub	r18,r2,r4
 c0127f8:	90000526 	beq	r18,zero,c012810 <__umoddi3+0x94>
 c0127fc:	8ca2983a 	sll	r17,r17,r18
 c012800:	8108d83a 	srl	r4,r16,r4
 c012804:	34a6983a 	sll	r19,r6,r18
 c012808:	84a8983a 	sll	r20,r16,r18
 c01280c:	2478b03a 	or	fp,r4,r17
 c012810:	982cd43a 	srli	r22,r19,16
 c012814:	e009883a 	mov	r4,fp
 c012818:	9dffffcc 	andi	r23,r19,65535
 c01281c:	b00b883a 	mov	r5,r22
 c012820:	c004d880 	call	c004d88 <__umodsi3>
 c012824:	b00b883a 	mov	r5,r22
 c012828:	e009883a 	mov	r4,fp
 c01282c:	102b883a 	mov	r21,r2
 c012830:	c004d240 	call	c004d24 <__udivsi3>
 c012834:	100b883a 	mov	r5,r2
 c012838:	b809883a 	mov	r4,r23
 c01283c:	c004de00 	call	c004de0 <__mulsi3>
 c012840:	a82a943a 	slli	r21,r21,16
 c012844:	a006d43a 	srli	r3,r20,16
 c012848:	1d46b03a 	or	r3,r3,r21
 c01284c:	1880032e 	bgeu	r3,r2,c01285c <__umoddi3+0xe0>
 c012850:	1cc7883a 	add	r3,r3,r19
 c012854:	1cc00136 	bltu	r3,r19,c01285c <__umoddi3+0xe0>
 c012858:	18813136 	bltu	r3,r2,c012d20 <__umoddi3+0x5a4>
 c01285c:	18a1c83a 	sub	r16,r3,r2
 c012860:	b00b883a 	mov	r5,r22
 c012864:	8009883a 	mov	r4,r16
 c012868:	c004d880 	call	c004d88 <__umodsi3>
 c01286c:	b00b883a 	mov	r5,r22
 c012870:	8009883a 	mov	r4,r16
 c012874:	1023883a 	mov	r17,r2
 c012878:	c004d240 	call	c004d24 <__udivsi3>
 c01287c:	100b883a 	mov	r5,r2
 c012880:	b809883a 	mov	r4,r23
 c012884:	8822943a 	slli	r17,r17,16
 c012888:	c004de00 	call	c004de0 <__mulsi3>
 c01288c:	a0ffffcc 	andi	r3,r20,65535
 c012890:	1c46b03a 	or	r3,r3,r17
 c012894:	1880042e 	bgeu	r3,r2,c0128a8 <__umoddi3+0x12c>
 c012898:	1cc7883a 	add	r3,r3,r19
 c01289c:	1cc00236 	bltu	r3,r19,c0128a8 <__umoddi3+0x12c>
 c0128a0:	1880012e 	bgeu	r3,r2,c0128a8 <__umoddi3+0x12c>
 c0128a4:	1cc7883a 	add	r3,r3,r19
 c0128a8:	1885c83a 	sub	r2,r3,r2
 c0128ac:	1484d83a 	srl	r2,r2,r18
 c0128b0:	0007883a 	mov	r3,zero
 c0128b4:	00005306 	br	c012a04 <__umoddi3+0x288>
 c0128b8:	29c05036 	bltu	r5,r7,c0129fc <__umoddi3+0x280>
 c0128bc:	00bfffd4 	movui	r2,65535
 c0128c0:	11c05c2e 	bgeu	r2,r7,c012a34 <__umoddi3+0x2b8>
 c0128c4:	00804034 	movhi	r2,256
 c0128c8:	10bfffc4 	addi	r2,r2,-1
 c0128cc:	11c10636 	bltu	r2,r7,c012ce8 <__umoddi3+0x56c>
 c0128d0:	01000404 	movi	r4,16
 c0128d4:	3904d83a 	srl	r2,r7,r4
 c0128d8:	00c300b4 	movhi	r3,3074
 c0128dc:	18e26104 	addi	r3,r3,-30332
 c0128e0:	1885883a 	add	r2,r3,r2
 c0128e4:	14c00003 	ldbu	r19,0(r2)
 c0128e8:	00c00804 	movi	r3,32
 c0128ec:	9927883a 	add	r19,r19,r4
 c0128f0:	1ce9c83a 	sub	r20,r3,r19
 c0128f4:	a0005c1e 	bne	r20,zero,c012a68 <__umoddi3+0x2ec>
 c0128f8:	3c400136 	bltu	r7,r17,c012900 <__umoddi3+0x184>
 c0128fc:	81810a36 	bltu	r16,r6,c012d28 <__umoddi3+0x5ac>
 c012900:	8185c83a 	sub	r2,r16,r6
 c012904:	89e3c83a 	sub	r17,r17,r7
 c012908:	8089803a 	cmpltu	r4,r16,r2
 c01290c:	8939c83a 	sub	fp,r17,r4
 c012910:	e007883a 	mov	r3,fp
 c012914:	00003b06 	br	c012a04 <__umoddi3+0x288>
 c012918:	3000041e 	bne	r6,zero,c01292c <__umoddi3+0x1b0>
 c01291c:	000b883a 	mov	r5,zero
 c012920:	01000044 	movi	r4,1
 c012924:	c004d240 	call	c004d24 <__udivsi3>
 c012928:	1027883a 	mov	r19,r2
 c01292c:	00bfffd4 	movui	r2,65535
 c012930:	14c0442e 	bgeu	r2,r19,c012a44 <__umoddi3+0x2c8>
 c012934:	00804034 	movhi	r2,256
 c012938:	10bfffc4 	addi	r2,r2,-1
 c01293c:	14c0ec36 	bltu	r2,r19,c012cf0 <__umoddi3+0x574>
 c012940:	00800404 	movi	r2,16
 c012944:	9886d83a 	srl	r3,r19,r2
 c012948:	010300b4 	movhi	r4,3074
 c01294c:	21226104 	addi	r4,r4,-30332
 c012950:	20c7883a 	add	r3,r4,r3
 c012954:	18c00003 	ldbu	r3,0(r3)
 c012958:	1887883a 	add	r3,r3,r2
 c01295c:	00800804 	movi	r2,32
 c012960:	10e5c83a 	sub	r18,r2,r3
 c012964:	9000ab1e 	bne	r18,zero,c012c14 <__umoddi3+0x498>
 c012968:	982cd43a 	srli	r22,r19,16
 c01296c:	8ce3c83a 	sub	r17,r17,r19
 c012970:	9dffffcc 	andi	r23,r19,65535
 c012974:	b00b883a 	mov	r5,r22
 c012978:	8809883a 	mov	r4,r17
 c01297c:	c004d880 	call	c004d88 <__umodsi3>
 c012980:	b00b883a 	mov	r5,r22
 c012984:	8809883a 	mov	r4,r17
 c012988:	102b883a 	mov	r21,r2
 c01298c:	c004d240 	call	c004d24 <__udivsi3>
 c012990:	b80b883a 	mov	r5,r23
 c012994:	1009883a 	mov	r4,r2
 c012998:	c004de00 	call	c004de0 <__mulsi3>
 c01299c:	a82a943a 	slli	r21,r21,16
 c0129a0:	a006d43a 	srli	r3,r20,16
 c0129a4:	1d46b03a 	or	r3,r3,r21
 c0129a8:	1880042e 	bgeu	r3,r2,c0129bc <__umoddi3+0x240>
 c0129ac:	1cc7883a 	add	r3,r3,r19
 c0129b0:	1cc00236 	bltu	r3,r19,c0129bc <__umoddi3+0x240>
 c0129b4:	1880012e 	bgeu	r3,r2,c0129bc <__umoddi3+0x240>
 c0129b8:	1cc7883a 	add	r3,r3,r19
 c0129bc:	18a1c83a 	sub	r16,r3,r2
 c0129c0:	b00b883a 	mov	r5,r22
 c0129c4:	8009883a 	mov	r4,r16
 c0129c8:	c004d880 	call	c004d88 <__umodsi3>
 c0129cc:	1023883a 	mov	r17,r2
 c0129d0:	b00b883a 	mov	r5,r22
 c0129d4:	8009883a 	mov	r4,r16
 c0129d8:	c004d240 	call	c004d24 <__udivsi3>
 c0129dc:	8822943a 	slli	r17,r17,16
 c0129e0:	b80b883a 	mov	r5,r23
 c0129e4:	1009883a 	mov	r4,r2
 c0129e8:	c004de00 	call	c004de0 <__mulsi3>
 c0129ec:	a53fffcc 	andi	r20,r20,65535
 c0129f0:	a446b03a 	or	r3,r20,r17
 c0129f4:	18bfac2e 	bgeu	r3,r2,c0128a8 <__alt_data_end+0xfc0128a8>
 c0129f8:	003fa706 	br	c012898 <__alt_data_end+0xfc012898>
 c0129fc:	2005883a 	mov	r2,r4
 c012a00:	2807883a 	mov	r3,r5
 c012a04:	dfc00c17 	ldw	ra,48(sp)
 c012a08:	df000b17 	ldw	fp,44(sp)
 c012a0c:	ddc00a17 	ldw	r23,40(sp)
 c012a10:	dd800917 	ldw	r22,36(sp)
 c012a14:	dd400817 	ldw	r21,32(sp)
 c012a18:	dd000717 	ldw	r20,28(sp)
 c012a1c:	dcc00617 	ldw	r19,24(sp)
 c012a20:	dc800517 	ldw	r18,20(sp)
 c012a24:	dc400417 	ldw	r17,16(sp)
 c012a28:	dc000317 	ldw	r16,12(sp)
 c012a2c:	dec00d04 	addi	sp,sp,52
 c012a30:	f800283a 	ret
 c012a34:	04c03fc4 	movi	r19,255
 c012a38:	99c9803a 	cmpltu	r4,r19,r7
 c012a3c:	200890fa 	slli	r4,r4,3
 c012a40:	003fa406 	br	c0128d4 <__alt_data_end+0xfc0128d4>
 c012a44:	00803fc4 	movi	r2,255
 c012a48:	14c5803a 	cmpltu	r2,r2,r19
 c012a4c:	100490fa 	slli	r2,r2,3
 c012a50:	003fbc06 	br	c012944 <__alt_data_end+0xfc012944>
 c012a54:	00804034 	movhi	r2,256
 c012a58:	10bfffc4 	addi	r2,r2,-1
 c012a5c:	1180a636 	bltu	r2,r6,c012cf8 <__umoddi3+0x57c>
 c012a60:	01000404 	movi	r4,16
 c012a64:	003f5c06 	br	c0127d8 <__alt_data_end+0xfc0127d8>
 c012a68:	3d0e983a 	sll	r7,r7,r20
 c012a6c:	34ead83a 	srl	r21,r6,r19
 c012a70:	8cc6d83a 	srl	r3,r17,r19
 c012a74:	8d10983a 	sll	r8,r17,r20
 c012a78:	3d6ab03a 	or	r21,r7,r21
 c012a7c:	a82cd43a 	srli	r22,r21,16
 c012a80:	84e2d83a 	srl	r17,r16,r19
 c012a84:	1809883a 	mov	r4,r3
 c012a88:	b00b883a 	mov	r5,r22
 c012a8c:	8a22b03a 	or	r17,r17,r8
 c012a90:	3524983a 	sll	r18,r6,r20
 c012a94:	dc400015 	stw	r17,0(sp)
 c012a98:	d8c00115 	stw	r3,4(sp)
 c012a9c:	c004d880 	call	c004d88 <__umodsi3>
 c012aa0:	d8c00117 	ldw	r3,4(sp)
 c012aa4:	b00b883a 	mov	r5,r22
 c012aa8:	1039883a 	mov	fp,r2
 c012aac:	1809883a 	mov	r4,r3
 c012ab0:	c004d240 	call	c004d24 <__udivsi3>
 c012ab4:	adffffcc 	andi	r23,r21,65535
 c012ab8:	100b883a 	mov	r5,r2
 c012abc:	b809883a 	mov	r4,r23
 c012ac0:	1023883a 	mov	r17,r2
 c012ac4:	c004de00 	call	c004de0 <__mulsi3>
 c012ac8:	d9400017 	ldw	r5,0(sp)
 c012acc:	e008943a 	slli	r4,fp,16
 c012ad0:	8520983a 	sll	r16,r16,r20
 c012ad4:	2806d43a 	srli	r3,r5,16
 c012ad8:	1906b03a 	or	r3,r3,r4
 c012adc:	1880042e 	bgeu	r3,r2,c012af0 <__umoddi3+0x374>
 c012ae0:	1d47883a 	add	r3,r3,r21
 c012ae4:	893fffc4 	addi	r4,r17,-1
 c012ae8:	1d40892e 	bgeu	r3,r21,c012d10 <__umoddi3+0x594>
 c012aec:	2023883a 	mov	r17,r4
 c012af0:	18b9c83a 	sub	fp,r3,r2
 c012af4:	b00b883a 	mov	r5,r22
 c012af8:	e009883a 	mov	r4,fp
 c012afc:	c004d880 	call	c004d88 <__umodsi3>
 c012b00:	b00b883a 	mov	r5,r22
 c012b04:	e009883a 	mov	r4,fp
 c012b08:	d8800215 	stw	r2,8(sp)
 c012b0c:	c004d240 	call	c004d24 <__udivsi3>
 c012b10:	100b883a 	mov	r5,r2
 c012b14:	b809883a 	mov	r4,r23
 c012b18:	102d883a 	mov	r22,r2
 c012b1c:	c004de00 	call	c004de0 <__mulsi3>
 c012b20:	d9800217 	ldw	r6,8(sp)
 c012b24:	d8c00017 	ldw	r3,0(sp)
 c012b28:	300c943a 	slli	r6,r6,16
 c012b2c:	1a3fffcc 	andi	r8,r3,65535
 c012b30:	4190b03a 	or	r8,r8,r6
 c012b34:	4080042e 	bgeu	r8,r2,c012b48 <__umoddi3+0x3cc>
 c012b38:	4551883a 	add	r8,r8,r21
 c012b3c:	b0ffffc4 	addi	r3,r22,-1
 c012b40:	45406f2e 	bgeu	r8,r21,c012d00 <__umoddi3+0x584>
 c012b44:	182d883a 	mov	r22,r3
 c012b48:	880e943a 	slli	r7,r17,16
 c012b4c:	9006d43a 	srli	r3,r18,16
 c012b50:	91bfffcc 	andi	r6,r18,65535
 c012b54:	3dacb03a 	or	r22,r7,r22
 c012b58:	b02ed43a 	srli	r23,r22,16
 c012b5c:	b5bfffcc 	andi	r22,r22,65535
 c012b60:	300b883a 	mov	r5,r6
 c012b64:	b009883a 	mov	r4,r22
 c012b68:	40a3c83a 	sub	r17,r8,r2
 c012b6c:	d8c00115 	stw	r3,4(sp)
 c012b70:	d9800215 	stw	r6,8(sp)
 c012b74:	c004de00 	call	c004de0 <__mulsi3>
 c012b78:	d9800217 	ldw	r6,8(sp)
 c012b7c:	b809883a 	mov	r4,r23
 c012b80:	1039883a 	mov	fp,r2
 c012b84:	300b883a 	mov	r5,r6
 c012b88:	c004de00 	call	c004de0 <__mulsi3>
 c012b8c:	d8c00117 	ldw	r3,4(sp)
 c012b90:	b809883a 	mov	r4,r23
 c012b94:	d8800215 	stw	r2,8(sp)
 c012b98:	180b883a 	mov	r5,r3
 c012b9c:	c004de00 	call	c004de0 <__mulsi3>
 c012ba0:	d8c00117 	ldw	r3,4(sp)
 c012ba4:	b009883a 	mov	r4,r22
 c012ba8:	102f883a 	mov	r23,r2
 c012bac:	180b883a 	mov	r5,r3
 c012bb0:	c004de00 	call	c004de0 <__mulsi3>
 c012bb4:	d9800217 	ldw	r6,8(sp)
 c012bb8:	e006d43a 	srli	r3,fp,16
 c012bbc:	1185883a 	add	r2,r2,r6
 c012bc0:	1885883a 	add	r2,r3,r2
 c012bc4:	1180022e 	bgeu	r2,r6,c012bd0 <__umoddi3+0x454>
 c012bc8:	00c00074 	movhi	r3,1
 c012bcc:	b8ef883a 	add	r23,r23,r3
 c012bd0:	1006d43a 	srli	r3,r2,16
 c012bd4:	1004943a 	slli	r2,r2,16
 c012bd8:	e73fffcc 	andi	fp,fp,65535
 c012bdc:	1dc7883a 	add	r3,r3,r23
 c012be0:	1739883a 	add	fp,r2,fp
 c012be4:	88c03a36 	bltu	r17,r3,c012cd0 <__umoddi3+0x554>
 c012be8:	88c05126 	beq	r17,r3,c012d30 <__umoddi3+0x5b4>
 c012bec:	88c9c83a 	sub	r4,r17,r3
 c012bf0:	e00f883a 	mov	r7,fp
 c012bf4:	81cfc83a 	sub	r7,r16,r7
 c012bf8:	81c7803a 	cmpltu	r3,r16,r7
 c012bfc:	20c7c83a 	sub	r3,r4,r3
 c012c00:	1cc4983a 	sll	r2,r3,r19
 c012c04:	3d0ed83a 	srl	r7,r7,r20
 c012c08:	1d06d83a 	srl	r3,r3,r20
 c012c0c:	11c4b03a 	or	r2,r2,r7
 c012c10:	003f7c06 	br	c012a04 <__alt_data_end+0xfc012a04>
 c012c14:	9ca6983a 	sll	r19,r19,r18
 c012c18:	88f8d83a 	srl	fp,r17,r3
 c012c1c:	80c4d83a 	srl	r2,r16,r3
 c012c20:	982cd43a 	srli	r22,r19,16
 c012c24:	8ca2983a 	sll	r17,r17,r18
 c012c28:	e009883a 	mov	r4,fp
 c012c2c:	b00b883a 	mov	r5,r22
 c012c30:	146ab03a 	or	r21,r2,r17
 c012c34:	c004d880 	call	c004d88 <__umodsi3>
 c012c38:	b00b883a 	mov	r5,r22
 c012c3c:	e009883a 	mov	r4,fp
 c012c40:	1029883a 	mov	r20,r2
 c012c44:	9dffffcc 	andi	r23,r19,65535
 c012c48:	c004d240 	call	c004d24 <__udivsi3>
 c012c4c:	b809883a 	mov	r4,r23
 c012c50:	100b883a 	mov	r5,r2
 c012c54:	c004de00 	call	c004de0 <__mulsi3>
 c012c58:	a008943a 	slli	r4,r20,16
 c012c5c:	a806d43a 	srli	r3,r21,16
 c012c60:	84a8983a 	sll	r20,r16,r18
 c012c64:	1906b03a 	or	r3,r3,r4
 c012c68:	1880042e 	bgeu	r3,r2,c012c7c <__umoddi3+0x500>
 c012c6c:	1cc7883a 	add	r3,r3,r19
 c012c70:	1cc00236 	bltu	r3,r19,c012c7c <__umoddi3+0x500>
 c012c74:	1880012e 	bgeu	r3,r2,c012c7c <__umoddi3+0x500>
 c012c78:	1cc7883a 	add	r3,r3,r19
 c012c7c:	18a3c83a 	sub	r17,r3,r2
 c012c80:	b00b883a 	mov	r5,r22
 c012c84:	8809883a 	mov	r4,r17
 c012c88:	c004d880 	call	c004d88 <__umodsi3>
 c012c8c:	b00b883a 	mov	r5,r22
 c012c90:	8809883a 	mov	r4,r17
 c012c94:	1021883a 	mov	r16,r2
 c012c98:	c004d240 	call	c004d24 <__udivsi3>
 c012c9c:	100b883a 	mov	r5,r2
 c012ca0:	b809883a 	mov	r4,r23
 c012ca4:	8020943a 	slli	r16,r16,16
 c012ca8:	c004de00 	call	c004de0 <__mulsi3>
 c012cac:	a8ffffcc 	andi	r3,r21,65535
 c012cb0:	1c06b03a 	or	r3,r3,r16
 c012cb4:	1880042e 	bgeu	r3,r2,c012cc8 <__umoddi3+0x54c>
 c012cb8:	1cc7883a 	add	r3,r3,r19
 c012cbc:	1cc00236 	bltu	r3,r19,c012cc8 <__umoddi3+0x54c>
 c012cc0:	1880012e 	bgeu	r3,r2,c012cc8 <__umoddi3+0x54c>
 c012cc4:	1cc7883a 	add	r3,r3,r19
 c012cc8:	18a3c83a 	sub	r17,r3,r2
 c012ccc:	003f2906 	br	c012974 <__alt_data_end+0xfc012974>
 c012cd0:	e48fc83a 	sub	r7,fp,r18
 c012cd4:	1d49c83a 	sub	r4,r3,r21
 c012cd8:	e1f9803a 	cmpltu	fp,fp,r7
 c012cdc:	2739c83a 	sub	fp,r4,fp
 c012ce0:	8f09c83a 	sub	r4,r17,fp
 c012ce4:	003fc306 	br	c012bf4 <__alt_data_end+0xfc012bf4>
 c012ce8:	01000604 	movi	r4,24
 c012cec:	003ef906 	br	c0128d4 <__alt_data_end+0xfc0128d4>
 c012cf0:	00800604 	movi	r2,24
 c012cf4:	003f1306 	br	c012944 <__alt_data_end+0xfc012944>
 c012cf8:	01000604 	movi	r4,24
 c012cfc:	003eb606 	br	c0127d8 <__alt_data_end+0xfc0127d8>
 c012d00:	40bf902e 	bgeu	r8,r2,c012b44 <__alt_data_end+0xfc012b44>
 c012d04:	b5bfff84 	addi	r22,r22,-2
 c012d08:	4551883a 	add	r8,r8,r21
 c012d0c:	003f8e06 	br	c012b48 <__alt_data_end+0xfc012b48>
 c012d10:	18bf762e 	bgeu	r3,r2,c012aec <__alt_data_end+0xfc012aec>
 c012d14:	8c7fff84 	addi	r17,r17,-2
 c012d18:	1d47883a 	add	r3,r3,r21
 c012d1c:	003f7406 	br	c012af0 <__alt_data_end+0xfc012af0>
 c012d20:	1cc7883a 	add	r3,r3,r19
 c012d24:	003ecd06 	br	c01285c <__alt_data_end+0xfc01285c>
 c012d28:	8005883a 	mov	r2,r16
 c012d2c:	003ef806 	br	c012910 <__alt_data_end+0xfc012910>
 c012d30:	873fe736 	bltu	r16,fp,c012cd0 <__alt_data_end+0xfc012cd0>
 c012d34:	e00f883a 	mov	r7,fp
 c012d38:	0009883a 	mov	r4,zero
 c012d3c:	003fad06 	br	c012bf4 <__alt_data_end+0xfc012bf4>

0c012d40 <__adddf3>:
 c012d40:	02c00434 	movhi	r11,16
 c012d44:	5affffc4 	addi	r11,r11,-1
 c012d48:	2806d7fa 	srli	r3,r5,31
 c012d4c:	2ad4703a 	and	r10,r5,r11
 c012d50:	3ad2703a 	and	r9,r7,r11
 c012d54:	3804d53a 	srli	r2,r7,20
 c012d58:	3018d77a 	srli	r12,r6,29
 c012d5c:	280ad53a 	srli	r5,r5,20
 c012d60:	501490fa 	slli	r10,r10,3
 c012d64:	2010d77a 	srli	r8,r4,29
 c012d68:	481290fa 	slli	r9,r9,3
 c012d6c:	380ed7fa 	srli	r7,r7,31
 c012d70:	defffb04 	addi	sp,sp,-20
 c012d74:	dc800215 	stw	r18,8(sp)
 c012d78:	dc400115 	stw	r17,4(sp)
 c012d7c:	dc000015 	stw	r16,0(sp)
 c012d80:	dfc00415 	stw	ra,16(sp)
 c012d84:	dcc00315 	stw	r19,12(sp)
 c012d88:	1c803fcc 	andi	r18,r3,255
 c012d8c:	2c01ffcc 	andi	r16,r5,2047
 c012d90:	5210b03a 	or	r8,r10,r8
 c012d94:	202290fa 	slli	r17,r4,3
 c012d98:	1081ffcc 	andi	r2,r2,2047
 c012d9c:	4b12b03a 	or	r9,r9,r12
 c012da0:	300c90fa 	slli	r6,r6,3
 c012da4:	91c07526 	beq	r18,r7,c012f7c <__adddf3+0x23c>
 c012da8:	8087c83a 	sub	r3,r16,r2
 c012dac:	00c0ab0e 	bge	zero,r3,c01305c <__adddf3+0x31c>
 c012db0:	10002a1e 	bne	r2,zero,c012e5c <__adddf3+0x11c>
 c012db4:	4984b03a 	or	r2,r9,r6
 c012db8:	1000961e 	bne	r2,zero,c013014 <__adddf3+0x2d4>
 c012dbc:	888001cc 	andi	r2,r17,7
 c012dc0:	10000726 	beq	r2,zero,c012de0 <__adddf3+0xa0>
 c012dc4:	888003cc 	andi	r2,r17,15
 c012dc8:	00c00104 	movi	r3,4
 c012dcc:	10c00426 	beq	r2,r3,c012de0 <__adddf3+0xa0>
 c012dd0:	88c7883a 	add	r3,r17,r3
 c012dd4:	1c63803a 	cmpltu	r17,r3,r17
 c012dd8:	4451883a 	add	r8,r8,r17
 c012ddc:	1823883a 	mov	r17,r3
 c012de0:	4080202c 	andhi	r2,r8,128
 c012de4:	10005926 	beq	r2,zero,c012f4c <__adddf3+0x20c>
 c012de8:	84000044 	addi	r16,r16,1
 c012dec:	0081ffc4 	movi	r2,2047
 c012df0:	8080ba26 	beq	r16,r2,c0130dc <__adddf3+0x39c>
 c012df4:	00bfe034 	movhi	r2,65408
 c012df8:	10bfffc4 	addi	r2,r2,-1
 c012dfc:	4090703a 	and	r8,r8,r2
 c012e00:	4004977a 	slli	r2,r8,29
 c012e04:	4010927a 	slli	r8,r8,9
 c012e08:	8822d0fa 	srli	r17,r17,3
 c012e0c:	8401ffcc 	andi	r16,r16,2047
 c012e10:	4010d33a 	srli	r8,r8,12
 c012e14:	9007883a 	mov	r3,r18
 c012e18:	1444b03a 	or	r2,r2,r17
 c012e1c:	8401ffcc 	andi	r16,r16,2047
 c012e20:	8020953a 	slli	r16,r16,20
 c012e24:	18c03fcc 	andi	r3,r3,255
 c012e28:	01000434 	movhi	r4,16
 c012e2c:	213fffc4 	addi	r4,r4,-1
 c012e30:	180697fa 	slli	r3,r3,31
 c012e34:	4110703a 	and	r8,r8,r4
 c012e38:	4410b03a 	or	r8,r8,r16
 c012e3c:	40c6b03a 	or	r3,r8,r3
 c012e40:	dfc00417 	ldw	ra,16(sp)
 c012e44:	dcc00317 	ldw	r19,12(sp)
 c012e48:	dc800217 	ldw	r18,8(sp)
 c012e4c:	dc400117 	ldw	r17,4(sp)
 c012e50:	dc000017 	ldw	r16,0(sp)
 c012e54:	dec00504 	addi	sp,sp,20
 c012e58:	f800283a 	ret
 c012e5c:	0081ffc4 	movi	r2,2047
 c012e60:	80bfd626 	beq	r16,r2,c012dbc <__alt_data_end+0xfc012dbc>
 c012e64:	4a402034 	orhi	r9,r9,128
 c012e68:	00800e04 	movi	r2,56
 c012e6c:	10c09f16 	blt	r2,r3,c0130ec <__adddf3+0x3ac>
 c012e70:	008007c4 	movi	r2,31
 c012e74:	10c0c216 	blt	r2,r3,c013180 <__adddf3+0x440>
 c012e78:	00800804 	movi	r2,32
 c012e7c:	10c5c83a 	sub	r2,r2,r3
 c012e80:	488a983a 	sll	r5,r9,r2
 c012e84:	30c8d83a 	srl	r4,r6,r3
 c012e88:	3084983a 	sll	r2,r6,r2
 c012e8c:	48c6d83a 	srl	r3,r9,r3
 c012e90:	290cb03a 	or	r6,r5,r4
 c012e94:	1004c03a 	cmpne	r2,r2,zero
 c012e98:	308cb03a 	or	r6,r6,r2
 c012e9c:	898dc83a 	sub	r6,r17,r6
 c012ea0:	89a3803a 	cmpltu	r17,r17,r6
 c012ea4:	40d1c83a 	sub	r8,r8,r3
 c012ea8:	4451c83a 	sub	r8,r8,r17
 c012eac:	3023883a 	mov	r17,r6
 c012eb0:	4080202c 	andhi	r2,r8,128
 c012eb4:	10002326 	beq	r2,zero,c012f44 <__adddf3+0x204>
 c012eb8:	04c02034 	movhi	r19,128
 c012ebc:	9cffffc4 	addi	r19,r19,-1
 c012ec0:	44e6703a 	and	r19,r8,r19
 c012ec4:	98007626 	beq	r19,zero,c0130a0 <__adddf3+0x360>
 c012ec8:	9809883a 	mov	r4,r19
 c012ecc:	c0155800 	call	c015580 <__clzsi2>
 c012ed0:	10fffe04 	addi	r3,r2,-8
 c012ed4:	010007c4 	movi	r4,31
 c012ed8:	20c07716 	blt	r4,r3,c0130b8 <__adddf3+0x378>
 c012edc:	00800804 	movi	r2,32
 c012ee0:	10c5c83a 	sub	r2,r2,r3
 c012ee4:	8884d83a 	srl	r2,r17,r2
 c012ee8:	98d0983a 	sll	r8,r19,r3
 c012eec:	88e2983a 	sll	r17,r17,r3
 c012ef0:	1204b03a 	or	r2,r2,r8
 c012ef4:	1c007416 	blt	r3,r16,c0130c8 <__adddf3+0x388>
 c012ef8:	1c21c83a 	sub	r16,r3,r16
 c012efc:	82000044 	addi	r8,r16,1
 c012f00:	00c007c4 	movi	r3,31
 c012f04:	1a009116 	blt	r3,r8,c01314c <__adddf3+0x40c>
 c012f08:	00c00804 	movi	r3,32
 c012f0c:	1a07c83a 	sub	r3,r3,r8
 c012f10:	8a08d83a 	srl	r4,r17,r8
 c012f14:	88e2983a 	sll	r17,r17,r3
 c012f18:	10c6983a 	sll	r3,r2,r3
 c012f1c:	1210d83a 	srl	r8,r2,r8
 c012f20:	8804c03a 	cmpne	r2,r17,zero
 c012f24:	1906b03a 	or	r3,r3,r4
 c012f28:	18a2b03a 	or	r17,r3,r2
 c012f2c:	0021883a 	mov	r16,zero
 c012f30:	003fa206 	br	c012dbc <__alt_data_end+0xfc012dbc>
 c012f34:	1890b03a 	or	r8,r3,r2
 c012f38:	40017d26 	beq	r8,zero,c013530 <__adddf3+0x7f0>
 c012f3c:	1011883a 	mov	r8,r2
 c012f40:	1823883a 	mov	r17,r3
 c012f44:	888001cc 	andi	r2,r17,7
 c012f48:	103f9e1e 	bne	r2,zero,c012dc4 <__alt_data_end+0xfc012dc4>
 c012f4c:	4004977a 	slli	r2,r8,29
 c012f50:	8822d0fa 	srli	r17,r17,3
 c012f54:	4010d0fa 	srli	r8,r8,3
 c012f58:	9007883a 	mov	r3,r18
 c012f5c:	1444b03a 	or	r2,r2,r17
 c012f60:	0101ffc4 	movi	r4,2047
 c012f64:	81002426 	beq	r16,r4,c012ff8 <__adddf3+0x2b8>
 c012f68:	8120703a 	and	r16,r16,r4
 c012f6c:	01000434 	movhi	r4,16
 c012f70:	213fffc4 	addi	r4,r4,-1
 c012f74:	4110703a 	and	r8,r8,r4
 c012f78:	003fa806 	br	c012e1c <__alt_data_end+0xfc012e1c>
 c012f7c:	8089c83a 	sub	r4,r16,r2
 c012f80:	01005e0e 	bge	zero,r4,c0130fc <__adddf3+0x3bc>
 c012f84:	10002b26 	beq	r2,zero,c013034 <__adddf3+0x2f4>
 c012f88:	0081ffc4 	movi	r2,2047
 c012f8c:	80bf8b26 	beq	r16,r2,c012dbc <__alt_data_end+0xfc012dbc>
 c012f90:	4a402034 	orhi	r9,r9,128
 c012f94:	00800e04 	movi	r2,56
 c012f98:	1100a40e 	bge	r2,r4,c01322c <__adddf3+0x4ec>
 c012f9c:	498cb03a 	or	r6,r9,r6
 c012fa0:	300ac03a 	cmpne	r5,r6,zero
 c012fa4:	0013883a 	mov	r9,zero
 c012fa8:	2c4b883a 	add	r5,r5,r17
 c012fac:	2c63803a 	cmpltu	r17,r5,r17
 c012fb0:	4a11883a 	add	r8,r9,r8
 c012fb4:	8a11883a 	add	r8,r17,r8
 c012fb8:	2823883a 	mov	r17,r5
 c012fbc:	4080202c 	andhi	r2,r8,128
 c012fc0:	103fe026 	beq	r2,zero,c012f44 <__alt_data_end+0xfc012f44>
 c012fc4:	84000044 	addi	r16,r16,1
 c012fc8:	0081ffc4 	movi	r2,2047
 c012fcc:	8080d226 	beq	r16,r2,c013318 <__adddf3+0x5d8>
 c012fd0:	00bfe034 	movhi	r2,65408
 c012fd4:	10bfffc4 	addi	r2,r2,-1
 c012fd8:	4090703a 	and	r8,r8,r2
 c012fdc:	880ad07a 	srli	r5,r17,1
 c012fe0:	400897fa 	slli	r4,r8,31
 c012fe4:	88c0004c 	andi	r3,r17,1
 c012fe8:	28e2b03a 	or	r17,r5,r3
 c012fec:	4010d07a 	srli	r8,r8,1
 c012ff0:	2462b03a 	or	r17,r4,r17
 c012ff4:	003f7106 	br	c012dbc <__alt_data_end+0xfc012dbc>
 c012ff8:	4088b03a 	or	r4,r8,r2
 c012ffc:	20014526 	beq	r4,zero,c013514 <__adddf3+0x7d4>
 c013000:	01000434 	movhi	r4,16
 c013004:	42000234 	orhi	r8,r8,8
 c013008:	213fffc4 	addi	r4,r4,-1
 c01300c:	4110703a 	and	r8,r8,r4
 c013010:	003f8206 	br	c012e1c <__alt_data_end+0xfc012e1c>
 c013014:	18ffffc4 	addi	r3,r3,-1
 c013018:	1800491e 	bne	r3,zero,c013140 <__adddf3+0x400>
 c01301c:	898bc83a 	sub	r5,r17,r6
 c013020:	8963803a 	cmpltu	r17,r17,r5
 c013024:	4251c83a 	sub	r8,r8,r9
 c013028:	4451c83a 	sub	r8,r8,r17
 c01302c:	2823883a 	mov	r17,r5
 c013030:	003f9f06 	br	c012eb0 <__alt_data_end+0xfc012eb0>
 c013034:	4984b03a 	or	r2,r9,r6
 c013038:	103f6026 	beq	r2,zero,c012dbc <__alt_data_end+0xfc012dbc>
 c01303c:	213fffc4 	addi	r4,r4,-1
 c013040:	2000931e 	bne	r4,zero,c013290 <__adddf3+0x550>
 c013044:	898d883a 	add	r6,r17,r6
 c013048:	3463803a 	cmpltu	r17,r6,r17
 c01304c:	4251883a 	add	r8,r8,r9
 c013050:	8a11883a 	add	r8,r17,r8
 c013054:	3023883a 	mov	r17,r6
 c013058:	003fd806 	br	c012fbc <__alt_data_end+0xfc012fbc>
 c01305c:	1800541e 	bne	r3,zero,c0131b0 <__adddf3+0x470>
 c013060:	80800044 	addi	r2,r16,1
 c013064:	1081ffcc 	andi	r2,r2,2047
 c013068:	00c00044 	movi	r3,1
 c01306c:	1880a00e 	bge	r3,r2,c0132f0 <__adddf3+0x5b0>
 c013070:	8989c83a 	sub	r4,r17,r6
 c013074:	8905803a 	cmpltu	r2,r17,r4
 c013078:	4267c83a 	sub	r19,r8,r9
 c01307c:	98a7c83a 	sub	r19,r19,r2
 c013080:	9880202c 	andhi	r2,r19,128
 c013084:	10006326 	beq	r2,zero,c013214 <__adddf3+0x4d4>
 c013088:	3463c83a 	sub	r17,r6,r17
 c01308c:	4a07c83a 	sub	r3,r9,r8
 c013090:	344d803a 	cmpltu	r6,r6,r17
 c013094:	19a7c83a 	sub	r19,r3,r6
 c013098:	3825883a 	mov	r18,r7
 c01309c:	983f8a1e 	bne	r19,zero,c012ec8 <__alt_data_end+0xfc012ec8>
 c0130a0:	8809883a 	mov	r4,r17
 c0130a4:	c0155800 	call	c015580 <__clzsi2>
 c0130a8:	10800804 	addi	r2,r2,32
 c0130ac:	10fffe04 	addi	r3,r2,-8
 c0130b0:	010007c4 	movi	r4,31
 c0130b4:	20ff890e 	bge	r4,r3,c012edc <__alt_data_end+0xfc012edc>
 c0130b8:	10bff604 	addi	r2,r2,-40
 c0130bc:	8884983a 	sll	r2,r17,r2
 c0130c0:	0023883a 	mov	r17,zero
 c0130c4:	1c3f8c0e 	bge	r3,r16,c012ef8 <__alt_data_end+0xfc012ef8>
 c0130c8:	023fe034 	movhi	r8,65408
 c0130cc:	423fffc4 	addi	r8,r8,-1
 c0130d0:	80e1c83a 	sub	r16,r16,r3
 c0130d4:	1210703a 	and	r8,r2,r8
 c0130d8:	003f3806 	br	c012dbc <__alt_data_end+0xfc012dbc>
 c0130dc:	9007883a 	mov	r3,r18
 c0130e0:	0011883a 	mov	r8,zero
 c0130e4:	0005883a 	mov	r2,zero
 c0130e8:	003f4c06 	br	c012e1c <__alt_data_end+0xfc012e1c>
 c0130ec:	498cb03a 	or	r6,r9,r6
 c0130f0:	300cc03a 	cmpne	r6,r6,zero
 c0130f4:	0007883a 	mov	r3,zero
 c0130f8:	003f6806 	br	c012e9c <__alt_data_end+0xfc012e9c>
 c0130fc:	20009c1e 	bne	r4,zero,c013370 <__adddf3+0x630>
 c013100:	80800044 	addi	r2,r16,1
 c013104:	1141ffcc 	andi	r5,r2,2047
 c013108:	01000044 	movi	r4,1
 c01310c:	2140670e 	bge	r4,r5,c0132ac <__adddf3+0x56c>
 c013110:	0101ffc4 	movi	r4,2047
 c013114:	11007f26 	beq	r2,r4,c013314 <__adddf3+0x5d4>
 c013118:	898d883a 	add	r6,r17,r6
 c01311c:	4247883a 	add	r3,r8,r9
 c013120:	3451803a 	cmpltu	r8,r6,r17
 c013124:	40d1883a 	add	r8,r8,r3
 c013128:	402297fa 	slli	r17,r8,31
 c01312c:	300cd07a 	srli	r6,r6,1
 c013130:	4010d07a 	srli	r8,r8,1
 c013134:	1021883a 	mov	r16,r2
 c013138:	89a2b03a 	or	r17,r17,r6
 c01313c:	003f1f06 	br	c012dbc <__alt_data_end+0xfc012dbc>
 c013140:	0081ffc4 	movi	r2,2047
 c013144:	80bf481e 	bne	r16,r2,c012e68 <__alt_data_end+0xfc012e68>
 c013148:	003f1c06 	br	c012dbc <__alt_data_end+0xfc012dbc>
 c01314c:	843ff844 	addi	r16,r16,-31
 c013150:	01000804 	movi	r4,32
 c013154:	1406d83a 	srl	r3,r2,r16
 c013158:	41005026 	beq	r8,r4,c01329c <__adddf3+0x55c>
 c01315c:	01001004 	movi	r4,64
 c013160:	2211c83a 	sub	r8,r4,r8
 c013164:	1204983a 	sll	r2,r2,r8
 c013168:	88a2b03a 	or	r17,r17,r2
 c01316c:	8822c03a 	cmpne	r17,r17,zero
 c013170:	1c62b03a 	or	r17,r3,r17
 c013174:	0011883a 	mov	r8,zero
 c013178:	0021883a 	mov	r16,zero
 c01317c:	003f7106 	br	c012f44 <__alt_data_end+0xfc012f44>
 c013180:	193ff804 	addi	r4,r3,-32
 c013184:	00800804 	movi	r2,32
 c013188:	4908d83a 	srl	r4,r9,r4
 c01318c:	18804526 	beq	r3,r2,c0132a4 <__adddf3+0x564>
 c013190:	00801004 	movi	r2,64
 c013194:	10c5c83a 	sub	r2,r2,r3
 c013198:	4886983a 	sll	r3,r9,r2
 c01319c:	198cb03a 	or	r6,r3,r6
 c0131a0:	300cc03a 	cmpne	r6,r6,zero
 c0131a4:	218cb03a 	or	r6,r4,r6
 c0131a8:	0007883a 	mov	r3,zero
 c0131ac:	003f3b06 	br	c012e9c <__alt_data_end+0xfc012e9c>
 c0131b0:	80002a26 	beq	r16,zero,c01325c <__adddf3+0x51c>
 c0131b4:	0101ffc4 	movi	r4,2047
 c0131b8:	11006826 	beq	r2,r4,c01335c <__adddf3+0x61c>
 c0131bc:	00c7c83a 	sub	r3,zero,r3
 c0131c0:	42002034 	orhi	r8,r8,128
 c0131c4:	01000e04 	movi	r4,56
 c0131c8:	20c07c16 	blt	r4,r3,c0133bc <__adddf3+0x67c>
 c0131cc:	010007c4 	movi	r4,31
 c0131d0:	20c0da16 	blt	r4,r3,c01353c <__adddf3+0x7fc>
 c0131d4:	01000804 	movi	r4,32
 c0131d8:	20c9c83a 	sub	r4,r4,r3
 c0131dc:	4114983a 	sll	r10,r8,r4
 c0131e0:	88cad83a 	srl	r5,r17,r3
 c0131e4:	8908983a 	sll	r4,r17,r4
 c0131e8:	40c6d83a 	srl	r3,r8,r3
 c0131ec:	5162b03a 	or	r17,r10,r5
 c0131f0:	2008c03a 	cmpne	r4,r4,zero
 c0131f4:	8922b03a 	or	r17,r17,r4
 c0131f8:	3463c83a 	sub	r17,r6,r17
 c0131fc:	48c7c83a 	sub	r3,r9,r3
 c013200:	344d803a 	cmpltu	r6,r6,r17
 c013204:	1991c83a 	sub	r8,r3,r6
 c013208:	1021883a 	mov	r16,r2
 c01320c:	3825883a 	mov	r18,r7
 c013210:	003f2706 	br	c012eb0 <__alt_data_end+0xfc012eb0>
 c013214:	24d0b03a 	or	r8,r4,r19
 c013218:	40001b1e 	bne	r8,zero,c013288 <__adddf3+0x548>
 c01321c:	0005883a 	mov	r2,zero
 c013220:	0007883a 	mov	r3,zero
 c013224:	0021883a 	mov	r16,zero
 c013228:	003f4d06 	br	c012f60 <__alt_data_end+0xfc012f60>
 c01322c:	008007c4 	movi	r2,31
 c013230:	11003c16 	blt	r2,r4,c013324 <__adddf3+0x5e4>
 c013234:	00800804 	movi	r2,32
 c013238:	1105c83a 	sub	r2,r2,r4
 c01323c:	488e983a 	sll	r7,r9,r2
 c013240:	310ad83a 	srl	r5,r6,r4
 c013244:	3084983a 	sll	r2,r6,r2
 c013248:	4912d83a 	srl	r9,r9,r4
 c01324c:	394ab03a 	or	r5,r7,r5
 c013250:	1004c03a 	cmpne	r2,r2,zero
 c013254:	288ab03a 	or	r5,r5,r2
 c013258:	003f5306 	br	c012fa8 <__alt_data_end+0xfc012fa8>
 c01325c:	4448b03a 	or	r4,r8,r17
 c013260:	20003e26 	beq	r4,zero,c01335c <__adddf3+0x61c>
 c013264:	00c6303a 	nor	r3,zero,r3
 c013268:	18003a1e 	bne	r3,zero,c013354 <__adddf3+0x614>
 c01326c:	3463c83a 	sub	r17,r6,r17
 c013270:	4a07c83a 	sub	r3,r9,r8
 c013274:	344d803a 	cmpltu	r6,r6,r17
 c013278:	1991c83a 	sub	r8,r3,r6
 c01327c:	1021883a 	mov	r16,r2
 c013280:	3825883a 	mov	r18,r7
 c013284:	003f0a06 	br	c012eb0 <__alt_data_end+0xfc012eb0>
 c013288:	2023883a 	mov	r17,r4
 c01328c:	003f0d06 	br	c012ec4 <__alt_data_end+0xfc012ec4>
 c013290:	0081ffc4 	movi	r2,2047
 c013294:	80bf3f1e 	bne	r16,r2,c012f94 <__alt_data_end+0xfc012f94>
 c013298:	003ec806 	br	c012dbc <__alt_data_end+0xfc012dbc>
 c01329c:	0005883a 	mov	r2,zero
 c0132a0:	003fb106 	br	c013168 <__alt_data_end+0xfc013168>
 c0132a4:	0007883a 	mov	r3,zero
 c0132a8:	003fbc06 	br	c01319c <__alt_data_end+0xfc01319c>
 c0132ac:	4444b03a 	or	r2,r8,r17
 c0132b0:	8000871e 	bne	r16,zero,c0134d0 <__adddf3+0x790>
 c0132b4:	1000ba26 	beq	r2,zero,c0135a0 <__adddf3+0x860>
 c0132b8:	4984b03a 	or	r2,r9,r6
 c0132bc:	103ebf26 	beq	r2,zero,c012dbc <__alt_data_end+0xfc012dbc>
 c0132c0:	8985883a 	add	r2,r17,r6
 c0132c4:	4247883a 	add	r3,r8,r9
 c0132c8:	1451803a 	cmpltu	r8,r2,r17
 c0132cc:	40d1883a 	add	r8,r8,r3
 c0132d0:	40c0202c 	andhi	r3,r8,128
 c0132d4:	1023883a 	mov	r17,r2
 c0132d8:	183f1a26 	beq	r3,zero,c012f44 <__alt_data_end+0xfc012f44>
 c0132dc:	00bfe034 	movhi	r2,65408
 c0132e0:	10bfffc4 	addi	r2,r2,-1
 c0132e4:	2021883a 	mov	r16,r4
 c0132e8:	4090703a 	and	r8,r8,r2
 c0132ec:	003eb306 	br	c012dbc <__alt_data_end+0xfc012dbc>
 c0132f0:	4444b03a 	or	r2,r8,r17
 c0132f4:	8000291e 	bne	r16,zero,c01339c <__adddf3+0x65c>
 c0132f8:	10004b1e 	bne	r2,zero,c013428 <__adddf3+0x6e8>
 c0132fc:	4990b03a 	or	r8,r9,r6
 c013300:	40008b26 	beq	r8,zero,c013530 <__adddf3+0x7f0>
 c013304:	4811883a 	mov	r8,r9
 c013308:	3023883a 	mov	r17,r6
 c01330c:	3825883a 	mov	r18,r7
 c013310:	003eaa06 	br	c012dbc <__alt_data_end+0xfc012dbc>
 c013314:	1021883a 	mov	r16,r2
 c013318:	0011883a 	mov	r8,zero
 c01331c:	0005883a 	mov	r2,zero
 c013320:	003f0f06 	br	c012f60 <__alt_data_end+0xfc012f60>
 c013324:	217ff804 	addi	r5,r4,-32
 c013328:	00800804 	movi	r2,32
 c01332c:	494ad83a 	srl	r5,r9,r5
 c013330:	20807d26 	beq	r4,r2,c013528 <__adddf3+0x7e8>
 c013334:	00801004 	movi	r2,64
 c013338:	1109c83a 	sub	r4,r2,r4
 c01333c:	4912983a 	sll	r9,r9,r4
 c013340:	498cb03a 	or	r6,r9,r6
 c013344:	300cc03a 	cmpne	r6,r6,zero
 c013348:	298ab03a 	or	r5,r5,r6
 c01334c:	0013883a 	mov	r9,zero
 c013350:	003f1506 	br	c012fa8 <__alt_data_end+0xfc012fa8>
 c013354:	0101ffc4 	movi	r4,2047
 c013358:	113f9a1e 	bne	r2,r4,c0131c4 <__alt_data_end+0xfc0131c4>
 c01335c:	4811883a 	mov	r8,r9
 c013360:	3023883a 	mov	r17,r6
 c013364:	1021883a 	mov	r16,r2
 c013368:	3825883a 	mov	r18,r7
 c01336c:	003e9306 	br	c012dbc <__alt_data_end+0xfc012dbc>
 c013370:	8000161e 	bne	r16,zero,c0133cc <__adddf3+0x68c>
 c013374:	444ab03a 	or	r5,r8,r17
 c013378:	28005126 	beq	r5,zero,c0134c0 <__adddf3+0x780>
 c01337c:	0108303a 	nor	r4,zero,r4
 c013380:	20004d1e 	bne	r4,zero,c0134b8 <__adddf3+0x778>
 c013384:	89a3883a 	add	r17,r17,r6
 c013388:	4253883a 	add	r9,r8,r9
 c01338c:	898d803a 	cmpltu	r6,r17,r6
 c013390:	3251883a 	add	r8,r6,r9
 c013394:	1021883a 	mov	r16,r2
 c013398:	003f0806 	br	c012fbc <__alt_data_end+0xfc012fbc>
 c01339c:	1000301e 	bne	r2,zero,c013460 <__adddf3+0x720>
 c0133a0:	4984b03a 	or	r2,r9,r6
 c0133a4:	10007126 	beq	r2,zero,c01356c <__adddf3+0x82c>
 c0133a8:	4811883a 	mov	r8,r9
 c0133ac:	3023883a 	mov	r17,r6
 c0133b0:	3825883a 	mov	r18,r7
 c0133b4:	0401ffc4 	movi	r16,2047
 c0133b8:	003e8006 	br	c012dbc <__alt_data_end+0xfc012dbc>
 c0133bc:	4462b03a 	or	r17,r8,r17
 c0133c0:	8822c03a 	cmpne	r17,r17,zero
 c0133c4:	0007883a 	mov	r3,zero
 c0133c8:	003f8b06 	br	c0131f8 <__alt_data_end+0xfc0131f8>
 c0133cc:	0141ffc4 	movi	r5,2047
 c0133d0:	11403b26 	beq	r2,r5,c0134c0 <__adddf3+0x780>
 c0133d4:	0109c83a 	sub	r4,zero,r4
 c0133d8:	42002034 	orhi	r8,r8,128
 c0133dc:	01400e04 	movi	r5,56
 c0133e0:	29006716 	blt	r5,r4,c013580 <__adddf3+0x840>
 c0133e4:	014007c4 	movi	r5,31
 c0133e8:	29007016 	blt	r5,r4,c0135ac <__adddf3+0x86c>
 c0133ec:	01400804 	movi	r5,32
 c0133f0:	290bc83a 	sub	r5,r5,r4
 c0133f4:	4154983a 	sll	r10,r8,r5
 c0133f8:	890ed83a 	srl	r7,r17,r4
 c0133fc:	894a983a 	sll	r5,r17,r5
 c013400:	4108d83a 	srl	r4,r8,r4
 c013404:	51e2b03a 	or	r17,r10,r7
 c013408:	280ac03a 	cmpne	r5,r5,zero
 c01340c:	8962b03a 	or	r17,r17,r5
 c013410:	89a3883a 	add	r17,r17,r6
 c013414:	2253883a 	add	r9,r4,r9
 c013418:	898d803a 	cmpltu	r6,r17,r6
 c01341c:	3251883a 	add	r8,r6,r9
 c013420:	1021883a 	mov	r16,r2
 c013424:	003ee506 	br	c012fbc <__alt_data_end+0xfc012fbc>
 c013428:	4984b03a 	or	r2,r9,r6
 c01342c:	103e6326 	beq	r2,zero,c012dbc <__alt_data_end+0xfc012dbc>
 c013430:	8987c83a 	sub	r3,r17,r6
 c013434:	88c9803a 	cmpltu	r4,r17,r3
 c013438:	4245c83a 	sub	r2,r8,r9
 c01343c:	1105c83a 	sub	r2,r2,r4
 c013440:	1100202c 	andhi	r4,r2,128
 c013444:	203ebb26 	beq	r4,zero,c012f34 <__alt_data_end+0xfc012f34>
 c013448:	3463c83a 	sub	r17,r6,r17
 c01344c:	4a07c83a 	sub	r3,r9,r8
 c013450:	344d803a 	cmpltu	r6,r6,r17
 c013454:	1991c83a 	sub	r8,r3,r6
 c013458:	3825883a 	mov	r18,r7
 c01345c:	003e5706 	br	c012dbc <__alt_data_end+0xfc012dbc>
 c013460:	4984b03a 	or	r2,r9,r6
 c013464:	10002e26 	beq	r2,zero,c013520 <__adddf3+0x7e0>
 c013468:	4004d0fa 	srli	r2,r8,3
 c01346c:	8822d0fa 	srli	r17,r17,3
 c013470:	4010977a 	slli	r8,r8,29
 c013474:	10c0022c 	andhi	r3,r2,8
 c013478:	4462b03a 	or	r17,r8,r17
 c01347c:	18000826 	beq	r3,zero,c0134a0 <__adddf3+0x760>
 c013480:	4808d0fa 	srli	r4,r9,3
 c013484:	20c0022c 	andhi	r3,r4,8
 c013488:	1800051e 	bne	r3,zero,c0134a0 <__adddf3+0x760>
 c01348c:	300cd0fa 	srli	r6,r6,3
 c013490:	4806977a 	slli	r3,r9,29
 c013494:	2005883a 	mov	r2,r4
 c013498:	3825883a 	mov	r18,r7
 c01349c:	19a2b03a 	or	r17,r3,r6
 c0134a0:	8810d77a 	srli	r8,r17,29
 c0134a4:	100490fa 	slli	r2,r2,3
 c0134a8:	882290fa 	slli	r17,r17,3
 c0134ac:	0401ffc4 	movi	r16,2047
 c0134b0:	4090b03a 	or	r8,r8,r2
 c0134b4:	003e4106 	br	c012dbc <__alt_data_end+0xfc012dbc>
 c0134b8:	0141ffc4 	movi	r5,2047
 c0134bc:	117fc71e 	bne	r2,r5,c0133dc <__alt_data_end+0xfc0133dc>
 c0134c0:	4811883a 	mov	r8,r9
 c0134c4:	3023883a 	mov	r17,r6
 c0134c8:	1021883a 	mov	r16,r2
 c0134cc:	003e3b06 	br	c012dbc <__alt_data_end+0xfc012dbc>
 c0134d0:	10002f26 	beq	r2,zero,c013590 <__adddf3+0x850>
 c0134d4:	4984b03a 	or	r2,r9,r6
 c0134d8:	10001126 	beq	r2,zero,c013520 <__adddf3+0x7e0>
 c0134dc:	4004d0fa 	srli	r2,r8,3
 c0134e0:	8822d0fa 	srli	r17,r17,3
 c0134e4:	4010977a 	slli	r8,r8,29
 c0134e8:	10c0022c 	andhi	r3,r2,8
 c0134ec:	4462b03a 	or	r17,r8,r17
 c0134f0:	183feb26 	beq	r3,zero,c0134a0 <__alt_data_end+0xfc0134a0>
 c0134f4:	4808d0fa 	srli	r4,r9,3
 c0134f8:	20c0022c 	andhi	r3,r4,8
 c0134fc:	183fe81e 	bne	r3,zero,c0134a0 <__alt_data_end+0xfc0134a0>
 c013500:	300cd0fa 	srli	r6,r6,3
 c013504:	4806977a 	slli	r3,r9,29
 c013508:	2005883a 	mov	r2,r4
 c01350c:	19a2b03a 	or	r17,r3,r6
 c013510:	003fe306 	br	c0134a0 <__alt_data_end+0xfc0134a0>
 c013514:	0011883a 	mov	r8,zero
 c013518:	0005883a 	mov	r2,zero
 c01351c:	003e3f06 	br	c012e1c <__alt_data_end+0xfc012e1c>
 c013520:	0401ffc4 	movi	r16,2047
 c013524:	003e2506 	br	c012dbc <__alt_data_end+0xfc012dbc>
 c013528:	0013883a 	mov	r9,zero
 c01352c:	003f8406 	br	c013340 <__alt_data_end+0xfc013340>
 c013530:	0005883a 	mov	r2,zero
 c013534:	0007883a 	mov	r3,zero
 c013538:	003e8906 	br	c012f60 <__alt_data_end+0xfc012f60>
 c01353c:	197ff804 	addi	r5,r3,-32
 c013540:	01000804 	movi	r4,32
 c013544:	414ad83a 	srl	r5,r8,r5
 c013548:	19002426 	beq	r3,r4,c0135dc <__adddf3+0x89c>
 c01354c:	01001004 	movi	r4,64
 c013550:	20c7c83a 	sub	r3,r4,r3
 c013554:	40c6983a 	sll	r3,r8,r3
 c013558:	1c46b03a 	or	r3,r3,r17
 c01355c:	1806c03a 	cmpne	r3,r3,zero
 c013560:	28e2b03a 	or	r17,r5,r3
 c013564:	0007883a 	mov	r3,zero
 c013568:	003f2306 	br	c0131f8 <__alt_data_end+0xfc0131f8>
 c01356c:	0007883a 	mov	r3,zero
 c013570:	5811883a 	mov	r8,r11
 c013574:	00bfffc4 	movi	r2,-1
 c013578:	0401ffc4 	movi	r16,2047
 c01357c:	003e7806 	br	c012f60 <__alt_data_end+0xfc012f60>
 c013580:	4462b03a 	or	r17,r8,r17
 c013584:	8822c03a 	cmpne	r17,r17,zero
 c013588:	0009883a 	mov	r4,zero
 c01358c:	003fa006 	br	c013410 <__alt_data_end+0xfc013410>
 c013590:	4811883a 	mov	r8,r9
 c013594:	3023883a 	mov	r17,r6
 c013598:	0401ffc4 	movi	r16,2047
 c01359c:	003e0706 	br	c012dbc <__alt_data_end+0xfc012dbc>
 c0135a0:	4811883a 	mov	r8,r9
 c0135a4:	3023883a 	mov	r17,r6
 c0135a8:	003e0406 	br	c012dbc <__alt_data_end+0xfc012dbc>
 c0135ac:	21fff804 	addi	r7,r4,-32
 c0135b0:	01400804 	movi	r5,32
 c0135b4:	41ced83a 	srl	r7,r8,r7
 c0135b8:	21400a26 	beq	r4,r5,c0135e4 <__adddf3+0x8a4>
 c0135bc:	01401004 	movi	r5,64
 c0135c0:	2909c83a 	sub	r4,r5,r4
 c0135c4:	4108983a 	sll	r4,r8,r4
 c0135c8:	2448b03a 	or	r4,r4,r17
 c0135cc:	2008c03a 	cmpne	r4,r4,zero
 c0135d0:	3922b03a 	or	r17,r7,r4
 c0135d4:	0009883a 	mov	r4,zero
 c0135d8:	003f8d06 	br	c013410 <__alt_data_end+0xfc013410>
 c0135dc:	0007883a 	mov	r3,zero
 c0135e0:	003fdd06 	br	c013558 <__alt_data_end+0xfc013558>
 c0135e4:	0009883a 	mov	r4,zero
 c0135e8:	003ff706 	br	c0135c8 <__alt_data_end+0xfc0135c8>

0c0135ec <__divdf3>:
 c0135ec:	defff004 	addi	sp,sp,-64
 c0135f0:	dc800815 	stw	r18,32(sp)
 c0135f4:	2824d53a 	srli	r18,r5,20
 c0135f8:	dd800c15 	stw	r22,48(sp)
 c0135fc:	282cd7fa 	srli	r22,r5,31
 c013600:	dc000615 	stw	r16,24(sp)
 c013604:	04000434 	movhi	r16,16
 c013608:	843fffc4 	addi	r16,r16,-1
 c01360c:	dfc00f15 	stw	ra,60(sp)
 c013610:	df000e15 	stw	fp,56(sp)
 c013614:	ddc00d15 	stw	r23,52(sp)
 c013618:	dd400b15 	stw	r21,44(sp)
 c01361c:	dd000a15 	stw	r20,40(sp)
 c013620:	dcc00915 	stw	r19,36(sp)
 c013624:	dc400715 	stw	r17,28(sp)
 c013628:	9481ffcc 	andi	r18,r18,2047
 c01362c:	2c20703a 	and	r16,r5,r16
 c013630:	b2003fcc 	andi	r8,r22,255
 c013634:	90006126 	beq	r18,zero,c0137bc <__divdf3+0x1d0>
 c013638:	0081ffc4 	movi	r2,2047
 c01363c:	202b883a 	mov	r21,r4
 c013640:	90803726 	beq	r18,r2,c013720 <__divdf3+0x134>
 c013644:	80800434 	orhi	r2,r16,16
 c013648:	100490fa 	slli	r2,r2,3
 c01364c:	2020d77a 	srli	r16,r4,29
 c013650:	202a90fa 	slli	r21,r4,3
 c013654:	94bf0044 	addi	r18,r18,-1023
 c013658:	80a0b03a 	or	r16,r16,r2
 c01365c:	0013883a 	mov	r9,zero
 c013660:	000b883a 	mov	r5,zero
 c013664:	3806d53a 	srli	r3,r7,20
 c013668:	382ed7fa 	srli	r23,r7,31
 c01366c:	04400434 	movhi	r17,16
 c013670:	8c7fffc4 	addi	r17,r17,-1
 c013674:	18c1ffcc 	andi	r3,r3,2047
 c013678:	3029883a 	mov	r20,r6
 c01367c:	3c62703a 	and	r17,r7,r17
 c013680:	bf003fcc 	andi	fp,r23,255
 c013684:	18006e26 	beq	r3,zero,c013840 <__divdf3+0x254>
 c013688:	0081ffc4 	movi	r2,2047
 c01368c:	18806626 	beq	r3,r2,c013828 <__divdf3+0x23c>
 c013690:	88800434 	orhi	r2,r17,16
 c013694:	100490fa 	slli	r2,r2,3
 c013698:	3022d77a 	srli	r17,r6,29
 c01369c:	302890fa 	slli	r20,r6,3
 c0136a0:	18ff0044 	addi	r3,r3,-1023
 c0136a4:	88a2b03a 	or	r17,r17,r2
 c0136a8:	000f883a 	mov	r7,zero
 c0136ac:	b5e6f03a 	xor	r19,r22,r23
 c0136b0:	3a4cb03a 	or	r6,r7,r9
 c0136b4:	008003c4 	movi	r2,15
 c0136b8:	9809883a 	mov	r4,r19
 c0136bc:	90c7c83a 	sub	r3,r18,r3
 c0136c0:	9cc03fcc 	andi	r19,r19,255
 c0136c4:	11809636 	bltu	r2,r6,c013920 <__divdf3+0x334>
 c0136c8:	300c90ba 	slli	r6,r6,2
 c0136cc:	00830074 	movhi	r2,3073
 c0136d0:	108db804 	addi	r2,r2,14048
 c0136d4:	308d883a 	add	r6,r6,r2
 c0136d8:	30800017 	ldw	r2,0(r6)
 c0136dc:	1000683a 	jmp	r2
 c0136e0:	0c013920 	cmpeqi	r16,at,1252
 c0136e4:	0c013758 	cmpnei	r16,at,1245
 c0136e8:	0c013910 	cmplti	r16,at,1252
 c0136ec:	0c01374c 	andi	r16,at,1245
 c0136f0:	0c013910 	cmplti	r16,at,1252
 c0136f4:	0c0138e4 	muli	r16,at,1251
 c0136f8:	0c013910 	cmplti	r16,at,1252
 c0136fc:	0c01374c 	andi	r16,at,1245
 c013700:	0c013758 	cmpnei	r16,at,1245
 c013704:	0c013758 	cmpnei	r16,at,1245
 c013708:	0c0138e4 	muli	r16,at,1251
 c01370c:	0c01374c 	andi	r16,at,1245
 c013710:	0c01373c 	xorhi	r16,at,1244
 c013714:	0c01373c 	xorhi	r16,at,1244
 c013718:	0c01373c 	xorhi	r16,at,1244
 c01371c:	0c013ca8 	cmpgeui	r16,at,1266
 c013720:	2404b03a 	or	r2,r4,r16
 c013724:	10006c1e 	bne	r2,zero,c0138d8 <__divdf3+0x2ec>
 c013728:	02400204 	movi	r9,8
 c01372c:	0021883a 	mov	r16,zero
 c013730:	002b883a 	mov	r21,zero
 c013734:	01400084 	movi	r5,2
 c013738:	003fca06 	br	c013664 <__alt_data_end+0xfc013664>
 c01373c:	8023883a 	mov	r17,r16
 c013740:	a829883a 	mov	r20,r21
 c013744:	4039883a 	mov	fp,r8
 c013748:	280f883a 	mov	r7,r5
 c01374c:	00800084 	movi	r2,2
 c013750:	3881601e 	bne	r7,r2,c013cd4 <__divdf3+0x6e8>
 c013754:	e027883a 	mov	r19,fp
 c013758:	9900004c 	andi	r4,r19,1
 c01375c:	0081ffc4 	movi	r2,2047
 c013760:	0021883a 	mov	r16,zero
 c013764:	002b883a 	mov	r21,zero
 c013768:	1004953a 	slli	r2,r2,20
 c01376c:	20c03fcc 	andi	r3,r4,255
 c013770:	01400434 	movhi	r5,16
 c013774:	297fffc4 	addi	r5,r5,-1
 c013778:	180697fa 	slli	r3,r3,31
 c01377c:	8160703a 	and	r16,r16,r5
 c013780:	80a0b03a 	or	r16,r16,r2
 c013784:	80c6b03a 	or	r3,r16,r3
 c013788:	a805883a 	mov	r2,r21
 c01378c:	dfc00f17 	ldw	ra,60(sp)
 c013790:	df000e17 	ldw	fp,56(sp)
 c013794:	ddc00d17 	ldw	r23,52(sp)
 c013798:	dd800c17 	ldw	r22,48(sp)
 c01379c:	dd400b17 	ldw	r21,44(sp)
 c0137a0:	dd000a17 	ldw	r20,40(sp)
 c0137a4:	dcc00917 	ldw	r19,36(sp)
 c0137a8:	dc800817 	ldw	r18,32(sp)
 c0137ac:	dc400717 	ldw	r17,28(sp)
 c0137b0:	dc000617 	ldw	r16,24(sp)
 c0137b4:	dec01004 	addi	sp,sp,64
 c0137b8:	f800283a 	ret
 c0137bc:	2404b03a 	or	r2,r4,r16
 c0137c0:	2023883a 	mov	r17,r4
 c0137c4:	10003f26 	beq	r2,zero,c0138c4 <__divdf3+0x2d8>
 c0137c8:	80015e26 	beq	r16,zero,c013d44 <__divdf3+0x758>
 c0137cc:	8009883a 	mov	r4,r16
 c0137d0:	d9800215 	stw	r6,8(sp)
 c0137d4:	d9c00515 	stw	r7,20(sp)
 c0137d8:	da000415 	stw	r8,16(sp)
 c0137dc:	c0155800 	call	c015580 <__clzsi2>
 c0137e0:	d9800217 	ldw	r6,8(sp)
 c0137e4:	d9c00517 	ldw	r7,20(sp)
 c0137e8:	da000417 	ldw	r8,16(sp)
 c0137ec:	113ffd44 	addi	r4,r2,-11
 c0137f0:	00c00704 	movi	r3,28
 c0137f4:	19014f16 	blt	r3,r4,c013d34 <__divdf3+0x748>
 c0137f8:	00c00744 	movi	r3,29
 c0137fc:	157ffe04 	addi	r21,r2,-8
 c013800:	1907c83a 	sub	r3,r3,r4
 c013804:	8560983a 	sll	r16,r16,r21
 c013808:	88c6d83a 	srl	r3,r17,r3
 c01380c:	8d6a983a 	sll	r21,r17,r21
 c013810:	1c20b03a 	or	r16,r3,r16
 c013814:	1080fcc4 	addi	r2,r2,1011
 c013818:	00a5c83a 	sub	r18,zero,r2
 c01381c:	0013883a 	mov	r9,zero
 c013820:	000b883a 	mov	r5,zero
 c013824:	003f8f06 	br	c013664 <__alt_data_end+0xfc013664>
 c013828:	3444b03a 	or	r2,r6,r17
 c01382c:	1000231e 	bne	r2,zero,c0138bc <__divdf3+0x2d0>
 c013830:	0023883a 	mov	r17,zero
 c013834:	0029883a 	mov	r20,zero
 c013838:	01c00084 	movi	r7,2
 c01383c:	003f9b06 	br	c0136ac <__alt_data_end+0xfc0136ac>
 c013840:	3444b03a 	or	r2,r6,r17
 c013844:	10001926 	beq	r2,zero,c0138ac <__divdf3+0x2c0>
 c013848:	88014b26 	beq	r17,zero,c013d78 <__divdf3+0x78c>
 c01384c:	8809883a 	mov	r4,r17
 c013850:	d9400115 	stw	r5,4(sp)
 c013854:	d9800215 	stw	r6,8(sp)
 c013858:	da000415 	stw	r8,16(sp)
 c01385c:	da400315 	stw	r9,12(sp)
 c013860:	c0155800 	call	c015580 <__clzsi2>
 c013864:	d9400117 	ldw	r5,4(sp)
 c013868:	d9800217 	ldw	r6,8(sp)
 c01386c:	da000417 	ldw	r8,16(sp)
 c013870:	da400317 	ldw	r9,12(sp)
 c013874:	113ffd44 	addi	r4,r2,-11
 c013878:	00c00704 	movi	r3,28
 c01387c:	19013a16 	blt	r3,r4,c013d68 <__divdf3+0x77c>
 c013880:	00c00744 	movi	r3,29
 c013884:	153ffe04 	addi	r20,r2,-8
 c013888:	1907c83a 	sub	r3,r3,r4
 c01388c:	8d22983a 	sll	r17,r17,r20
 c013890:	30c6d83a 	srl	r3,r6,r3
 c013894:	3528983a 	sll	r20,r6,r20
 c013898:	1c62b03a 	or	r17,r3,r17
 c01389c:	1080fcc4 	addi	r2,r2,1011
 c0138a0:	0087c83a 	sub	r3,zero,r2
 c0138a4:	000f883a 	mov	r7,zero
 c0138a8:	003f8006 	br	c0136ac <__alt_data_end+0xfc0136ac>
 c0138ac:	0023883a 	mov	r17,zero
 c0138b0:	0029883a 	mov	r20,zero
 c0138b4:	01c00044 	movi	r7,1
 c0138b8:	003f7c06 	br	c0136ac <__alt_data_end+0xfc0136ac>
 c0138bc:	01c000c4 	movi	r7,3
 c0138c0:	003f7a06 	br	c0136ac <__alt_data_end+0xfc0136ac>
 c0138c4:	02400104 	movi	r9,4
 c0138c8:	0021883a 	mov	r16,zero
 c0138cc:	002b883a 	mov	r21,zero
 c0138d0:	01400044 	movi	r5,1
 c0138d4:	003f6306 	br	c013664 <__alt_data_end+0xfc013664>
 c0138d8:	02400304 	movi	r9,12
 c0138dc:	014000c4 	movi	r5,3
 c0138e0:	003f6006 	br	c013664 <__alt_data_end+0xfc013664>
 c0138e4:	04000434 	movhi	r16,16
 c0138e8:	0009883a 	mov	r4,zero
 c0138ec:	843fffc4 	addi	r16,r16,-1
 c0138f0:	057fffc4 	movi	r21,-1
 c0138f4:	0081ffc4 	movi	r2,2047
 c0138f8:	003f9b06 	br	c013768 <__alt_data_end+0xfc013768>
 c0138fc:	00c00044 	movi	r3,1
 c013900:	1887c83a 	sub	r3,r3,r2
 c013904:	01000e04 	movi	r4,56
 c013908:	20c1530e 	bge	r4,r3,c013e58 <__divdf3+0x86c>
 c01390c:	9900004c 	andi	r4,r19,1
 c013910:	0005883a 	mov	r2,zero
 c013914:	0021883a 	mov	r16,zero
 c013918:	002b883a 	mov	r21,zero
 c01391c:	003f9206 	br	c013768 <__alt_data_end+0xfc013768>
 c013920:	8c012e36 	bltu	r17,r16,c013ddc <__divdf3+0x7f0>
 c013924:	84412c26 	beq	r16,r17,c013dd8 <__divdf3+0x7ec>
 c013928:	a82f883a 	mov	r23,r21
 c01392c:	18ffffc4 	addi	r3,r3,-1
 c013930:	002b883a 	mov	r21,zero
 c013934:	a004d63a 	srli	r2,r20,24
 c013938:	8822923a 	slli	r17,r17,8
 c01393c:	a028923a 	slli	r20,r20,8
 c013940:	8009883a 	mov	r4,r16
 c013944:	88acb03a 	or	r22,r17,r2
 c013948:	dd000015 	stw	r20,0(sp)
 c01394c:	b028d43a 	srli	r20,r22,16
 c013950:	d8c00215 	stw	r3,8(sp)
 c013954:	b4bfffcc 	andi	r18,r22,65535
 c013958:	a00b883a 	mov	r5,r20
 c01395c:	c004d240 	call	c004d24 <__udivsi3>
 c013960:	100b883a 	mov	r5,r2
 c013964:	9009883a 	mov	r4,r18
 c013968:	1023883a 	mov	r17,r2
 c01396c:	c004de00 	call	c004de0 <__mulsi3>
 c013970:	8009883a 	mov	r4,r16
 c013974:	a00b883a 	mov	r5,r20
 c013978:	1039883a 	mov	fp,r2
 c01397c:	c004d880 	call	c004d88 <__umodsi3>
 c013980:	1004943a 	slli	r2,r2,16
 c013984:	b808d43a 	srli	r4,r23,16
 c013988:	d8c00217 	ldw	r3,8(sp)
 c01398c:	2084b03a 	or	r2,r4,r2
 c013990:	1700062e 	bgeu	r2,fp,c0139ac <__divdf3+0x3c0>
 c013994:	1585883a 	add	r2,r2,r22
 c013998:	893fffc4 	addi	r4,r17,-1
 c01399c:	15811d36 	bltu	r2,r22,c013e14 <__divdf3+0x828>
 c0139a0:	17011c2e 	bgeu	r2,fp,c013e14 <__divdf3+0x828>
 c0139a4:	8c7fff84 	addi	r17,r17,-2
 c0139a8:	1585883a 	add	r2,r2,r22
 c0139ac:	1739c83a 	sub	fp,r2,fp
 c0139b0:	a00b883a 	mov	r5,r20
 c0139b4:	e009883a 	mov	r4,fp
 c0139b8:	d8c00215 	stw	r3,8(sp)
 c0139bc:	c004d240 	call	c004d24 <__udivsi3>
 c0139c0:	100b883a 	mov	r5,r2
 c0139c4:	9009883a 	mov	r4,r18
 c0139c8:	1021883a 	mov	r16,r2
 c0139cc:	c004de00 	call	c004de0 <__mulsi3>
 c0139d0:	a00b883a 	mov	r5,r20
 c0139d4:	e009883a 	mov	r4,fp
 c0139d8:	d8800415 	stw	r2,16(sp)
 c0139dc:	c004d880 	call	c004d88 <__umodsi3>
 c0139e0:	1004943a 	slli	r2,r2,16
 c0139e4:	da000417 	ldw	r8,16(sp)
 c0139e8:	bdffffcc 	andi	r23,r23,65535
 c0139ec:	b884b03a 	or	r2,r23,r2
 c0139f0:	d8c00217 	ldw	r3,8(sp)
 c0139f4:	1200062e 	bgeu	r2,r8,c013a10 <__divdf3+0x424>
 c0139f8:	1585883a 	add	r2,r2,r22
 c0139fc:	813fffc4 	addi	r4,r16,-1
 c013a00:	15810236 	bltu	r2,r22,c013e0c <__divdf3+0x820>
 c013a04:	1201012e 	bgeu	r2,r8,c013e0c <__divdf3+0x820>
 c013a08:	843fff84 	addi	r16,r16,-2
 c013a0c:	1585883a 	add	r2,r2,r22
 c013a10:	8822943a 	slli	r17,r17,16
 c013a14:	d9800017 	ldw	r6,0(sp)
 c013a18:	1211c83a 	sub	r8,r2,r8
 c013a1c:	8c22b03a 	or	r17,r17,r16
 c013a20:	373fffcc 	andi	fp,r6,65535
 c013a24:	8abfffcc 	andi	r10,r17,65535
 c013a28:	8820d43a 	srli	r16,r17,16
 c013a2c:	5009883a 	mov	r4,r10
 c013a30:	e00b883a 	mov	r5,fp
 c013a34:	302ed43a 	srli	r23,r6,16
 c013a38:	d8c00215 	stw	r3,8(sp)
 c013a3c:	da000415 	stw	r8,16(sp)
 c013a40:	da800115 	stw	r10,4(sp)
 c013a44:	c004de00 	call	c004de0 <__mulsi3>
 c013a48:	800b883a 	mov	r5,r16
 c013a4c:	e009883a 	mov	r4,fp
 c013a50:	d8800515 	stw	r2,20(sp)
 c013a54:	c004de00 	call	c004de0 <__mulsi3>
 c013a58:	8009883a 	mov	r4,r16
 c013a5c:	b80b883a 	mov	r5,r23
 c013a60:	d8800315 	stw	r2,12(sp)
 c013a64:	c004de00 	call	c004de0 <__mulsi3>
 c013a68:	da800117 	ldw	r10,4(sp)
 c013a6c:	b80b883a 	mov	r5,r23
 c013a70:	1021883a 	mov	r16,r2
 c013a74:	5009883a 	mov	r4,r10
 c013a78:	c004de00 	call	c004de0 <__mulsi3>
 c013a7c:	d9c00517 	ldw	r7,20(sp)
 c013a80:	da400317 	ldw	r9,12(sp)
 c013a84:	d8c00217 	ldw	r3,8(sp)
 c013a88:	3808d43a 	srli	r4,r7,16
 c013a8c:	1245883a 	add	r2,r2,r9
 c013a90:	da000417 	ldw	r8,16(sp)
 c013a94:	2085883a 	add	r2,r4,r2
 c013a98:	1240022e 	bgeu	r2,r9,c013aa4 <__divdf3+0x4b8>
 c013a9c:	01000074 	movhi	r4,1
 c013aa0:	8121883a 	add	r16,r16,r4
 c013aa4:	1008d43a 	srli	r4,r2,16
 c013aa8:	1004943a 	slli	r2,r2,16
 c013aac:	39ffffcc 	andi	r7,r7,65535
 c013ab0:	2409883a 	add	r4,r4,r16
 c013ab4:	11c5883a 	add	r2,r2,r7
 c013ab8:	4100bb36 	bltu	r8,r4,c013da8 <__divdf3+0x7bc>
 c013abc:	4100d726 	beq	r8,r4,c013e1c <__divdf3+0x830>
 c013ac0:	4109c83a 	sub	r4,r8,r4
 c013ac4:	a8a1c83a 	sub	r16,r21,r2
 c013ac8:	ac2b803a 	cmpltu	r21,r21,r16
 c013acc:	256bc83a 	sub	r21,r4,r21
 c013ad0:	b540d926 	beq	r22,r21,c013e38 <__divdf3+0x84c>
 c013ad4:	a00b883a 	mov	r5,r20
 c013ad8:	a809883a 	mov	r4,r21
 c013adc:	d8c00215 	stw	r3,8(sp)
 c013ae0:	c004d240 	call	c004d24 <__udivsi3>
 c013ae4:	100b883a 	mov	r5,r2
 c013ae8:	9009883a 	mov	r4,r18
 c013aec:	d8800515 	stw	r2,20(sp)
 c013af0:	c004de00 	call	c004de0 <__mulsi3>
 c013af4:	a809883a 	mov	r4,r21
 c013af8:	a00b883a 	mov	r5,r20
 c013afc:	d8800415 	stw	r2,16(sp)
 c013b00:	c004d880 	call	c004d88 <__umodsi3>
 c013b04:	1004943a 	slli	r2,r2,16
 c013b08:	8008d43a 	srli	r4,r16,16
 c013b0c:	da000417 	ldw	r8,16(sp)
 c013b10:	d8c00217 	ldw	r3,8(sp)
 c013b14:	2084b03a 	or	r2,r4,r2
 c013b18:	d9c00517 	ldw	r7,20(sp)
 c013b1c:	1200062e 	bgeu	r2,r8,c013b38 <__divdf3+0x54c>
 c013b20:	1585883a 	add	r2,r2,r22
 c013b24:	393fffc4 	addi	r4,r7,-1
 c013b28:	1580c536 	bltu	r2,r22,c013e40 <__divdf3+0x854>
 c013b2c:	1200c42e 	bgeu	r2,r8,c013e40 <__divdf3+0x854>
 c013b30:	39ffff84 	addi	r7,r7,-2
 c013b34:	1585883a 	add	r2,r2,r22
 c013b38:	122bc83a 	sub	r21,r2,r8
 c013b3c:	a00b883a 	mov	r5,r20
 c013b40:	a809883a 	mov	r4,r21
 c013b44:	d8c00215 	stw	r3,8(sp)
 c013b48:	d9c00515 	stw	r7,20(sp)
 c013b4c:	c004d240 	call	c004d24 <__udivsi3>
 c013b50:	9009883a 	mov	r4,r18
 c013b54:	100b883a 	mov	r5,r2
 c013b58:	d8800415 	stw	r2,16(sp)
 c013b5c:	c004de00 	call	c004de0 <__mulsi3>
 c013b60:	a809883a 	mov	r4,r21
 c013b64:	a00b883a 	mov	r5,r20
 c013b68:	1025883a 	mov	r18,r2
 c013b6c:	c004d880 	call	c004d88 <__umodsi3>
 c013b70:	1004943a 	slli	r2,r2,16
 c013b74:	813fffcc 	andi	r4,r16,65535
 c013b78:	d8c00217 	ldw	r3,8(sp)
 c013b7c:	20a0b03a 	or	r16,r4,r2
 c013b80:	d9c00517 	ldw	r7,20(sp)
 c013b84:	da000417 	ldw	r8,16(sp)
 c013b88:	8480062e 	bgeu	r16,r18,c013ba4 <__divdf3+0x5b8>
 c013b8c:	85a1883a 	add	r16,r16,r22
 c013b90:	40bfffc4 	addi	r2,r8,-1
 c013b94:	8580ac36 	bltu	r16,r22,c013e48 <__divdf3+0x85c>
 c013b98:	8480ab2e 	bgeu	r16,r18,c013e48 <__divdf3+0x85c>
 c013b9c:	423fff84 	addi	r8,r8,-2
 c013ba0:	85a1883a 	add	r16,r16,r22
 c013ba4:	3804943a 	slli	r2,r7,16
 c013ba8:	84a1c83a 	sub	r16,r16,r18
 c013bac:	e009883a 	mov	r4,fp
 c013bb0:	1228b03a 	or	r20,r2,r8
 c013bb4:	a1ffffcc 	andi	r7,r20,65535
 c013bb8:	a024d43a 	srli	r18,r20,16
 c013bbc:	380b883a 	mov	r5,r7
 c013bc0:	d8c00215 	stw	r3,8(sp)
 c013bc4:	d9c00515 	stw	r7,20(sp)
 c013bc8:	c004de00 	call	c004de0 <__mulsi3>
 c013bcc:	900b883a 	mov	r5,r18
 c013bd0:	e009883a 	mov	r4,fp
 c013bd4:	102b883a 	mov	r21,r2
 c013bd8:	c004de00 	call	c004de0 <__mulsi3>
 c013bdc:	900b883a 	mov	r5,r18
 c013be0:	b809883a 	mov	r4,r23
 c013be4:	1039883a 	mov	fp,r2
 c013be8:	c004de00 	call	c004de0 <__mulsi3>
 c013bec:	d9c00517 	ldw	r7,20(sp)
 c013bf0:	b80b883a 	mov	r5,r23
 c013bf4:	1025883a 	mov	r18,r2
 c013bf8:	3809883a 	mov	r4,r7
 c013bfc:	c004de00 	call	c004de0 <__mulsi3>
 c013c00:	a808d43a 	srli	r4,r21,16
 c013c04:	1705883a 	add	r2,r2,fp
 c013c08:	d8c00217 	ldw	r3,8(sp)
 c013c0c:	2085883a 	add	r2,r4,r2
 c013c10:	1700022e 	bgeu	r2,fp,c013c1c <__divdf3+0x630>
 c013c14:	01000074 	movhi	r4,1
 c013c18:	9125883a 	add	r18,r18,r4
 c013c1c:	1008d43a 	srli	r4,r2,16
 c013c20:	1004943a 	slli	r2,r2,16
 c013c24:	ad7fffcc 	andi	r21,r21,65535
 c013c28:	2489883a 	add	r4,r4,r18
 c013c2c:	1545883a 	add	r2,r2,r21
 c013c30:	81003836 	bltu	r16,r4,c013d14 <__divdf3+0x728>
 c013c34:	81003626 	beq	r16,r4,c013d10 <__divdf3+0x724>
 c013c38:	a5000054 	ori	r20,r20,1
 c013c3c:	1880ffc4 	addi	r2,r3,1023
 c013c40:	00bf2e0e 	bge	zero,r2,c0138fc <__alt_data_end+0xfc0138fc>
 c013c44:	a10001cc 	andi	r4,r20,7
 c013c48:	20000726 	beq	r4,zero,c013c68 <__divdf3+0x67c>
 c013c4c:	a10003cc 	andi	r4,r20,15
 c013c50:	01400104 	movi	r5,4
 c013c54:	21400426 	beq	r4,r5,c013c68 <__divdf3+0x67c>
 c013c58:	a149883a 	add	r4,r20,r5
 c013c5c:	2529803a 	cmpltu	r20,r4,r20
 c013c60:	8d23883a 	add	r17,r17,r20
 c013c64:	2029883a 	mov	r20,r4
 c013c68:	8900402c 	andhi	r4,r17,256
 c013c6c:	20000426 	beq	r4,zero,c013c80 <__divdf3+0x694>
 c013c70:	18810004 	addi	r2,r3,1024
 c013c74:	00ffc034 	movhi	r3,65280
 c013c78:	18ffffc4 	addi	r3,r3,-1
 c013c7c:	88e2703a 	and	r17,r17,r3
 c013c80:	00c1ff84 	movi	r3,2046
 c013c84:	18beb416 	blt	r3,r2,c013758 <__alt_data_end+0xfc013758>
 c013c88:	a028d0fa 	srli	r20,r20,3
 c013c8c:	882a977a 	slli	r21,r17,29
 c013c90:	8820927a 	slli	r16,r17,9
 c013c94:	1081ffcc 	andi	r2,r2,2047
 c013c98:	ad2ab03a 	or	r21,r21,r20
 c013c9c:	8020d33a 	srli	r16,r16,12
 c013ca0:	9900004c 	andi	r4,r19,1
 c013ca4:	003eb006 	br	c013768 <__alt_data_end+0xfc013768>
 c013ca8:	8080022c 	andhi	r2,r16,8
 c013cac:	10001226 	beq	r2,zero,c013cf8 <__divdf3+0x70c>
 c013cb0:	8880022c 	andhi	r2,r17,8
 c013cb4:	1000101e 	bne	r2,zero,c013cf8 <__divdf3+0x70c>
 c013cb8:	00800434 	movhi	r2,16
 c013cbc:	8c000234 	orhi	r16,r17,8
 c013cc0:	10bfffc4 	addi	r2,r2,-1
 c013cc4:	b809883a 	mov	r4,r23
 c013cc8:	80a0703a 	and	r16,r16,r2
 c013ccc:	a02b883a 	mov	r21,r20
 c013cd0:	003f0806 	br	c0138f4 <__alt_data_end+0xfc0138f4>
 c013cd4:	008000c4 	movi	r2,3
 c013cd8:	3880b126 	beq	r7,r2,c013fa0 <__divdf3+0x9b4>
 c013cdc:	00800044 	movi	r2,1
 c013ce0:	38805b1e 	bne	r7,r2,c013e50 <__divdf3+0x864>
 c013ce4:	e009883a 	mov	r4,fp
 c013ce8:	0005883a 	mov	r2,zero
 c013cec:	0021883a 	mov	r16,zero
 c013cf0:	002b883a 	mov	r21,zero
 c013cf4:	003e9c06 	br	c013768 <__alt_data_end+0xfc013768>
 c013cf8:	00800434 	movhi	r2,16
 c013cfc:	84000234 	orhi	r16,r16,8
 c013d00:	10bfffc4 	addi	r2,r2,-1
 c013d04:	b009883a 	mov	r4,r22
 c013d08:	80a0703a 	and	r16,r16,r2
 c013d0c:	003ef906 	br	c0138f4 <__alt_data_end+0xfc0138f4>
 c013d10:	103fca26 	beq	r2,zero,c013c3c <__alt_data_end+0xfc013c3c>
 c013d14:	b421883a 	add	r16,r22,r16
 c013d18:	a17fffc4 	addi	r5,r20,-1
 c013d1c:	8580422e 	bgeu	r16,r22,c013e28 <__divdf3+0x83c>
 c013d20:	2829883a 	mov	r20,r5
 c013d24:	813fc41e 	bne	r16,r4,c013c38 <__alt_data_end+0xfc013c38>
 c013d28:	d9800017 	ldw	r6,0(sp)
 c013d2c:	30bfc21e 	bne	r6,r2,c013c38 <__alt_data_end+0xfc013c38>
 c013d30:	003fc206 	br	c013c3c <__alt_data_end+0xfc013c3c>
 c013d34:	143ff604 	addi	r16,r2,-40
 c013d38:	8c20983a 	sll	r16,r17,r16
 c013d3c:	002b883a 	mov	r21,zero
 c013d40:	003eb406 	br	c013814 <__alt_data_end+0xfc013814>
 c013d44:	d9800215 	stw	r6,8(sp)
 c013d48:	d9c00515 	stw	r7,20(sp)
 c013d4c:	da000415 	stw	r8,16(sp)
 c013d50:	c0155800 	call	c015580 <__clzsi2>
 c013d54:	10800804 	addi	r2,r2,32
 c013d58:	da000417 	ldw	r8,16(sp)
 c013d5c:	d9c00517 	ldw	r7,20(sp)
 c013d60:	d9800217 	ldw	r6,8(sp)
 c013d64:	003ea106 	br	c0137ec <__alt_data_end+0xfc0137ec>
 c013d68:	147ff604 	addi	r17,r2,-40
 c013d6c:	3462983a 	sll	r17,r6,r17
 c013d70:	0029883a 	mov	r20,zero
 c013d74:	003ec906 	br	c01389c <__alt_data_end+0xfc01389c>
 c013d78:	3009883a 	mov	r4,r6
 c013d7c:	d9400115 	stw	r5,4(sp)
 c013d80:	d9800215 	stw	r6,8(sp)
 c013d84:	da000415 	stw	r8,16(sp)
 c013d88:	da400315 	stw	r9,12(sp)
 c013d8c:	c0155800 	call	c015580 <__clzsi2>
 c013d90:	10800804 	addi	r2,r2,32
 c013d94:	da400317 	ldw	r9,12(sp)
 c013d98:	da000417 	ldw	r8,16(sp)
 c013d9c:	d9800217 	ldw	r6,8(sp)
 c013da0:	d9400117 	ldw	r5,4(sp)
 c013da4:	003eb306 	br	c013874 <__alt_data_end+0xfc013874>
 c013da8:	d9800017 	ldw	r6,0(sp)
 c013dac:	a9ab883a 	add	r21,r21,r6
 c013db0:	a98b803a 	cmpltu	r5,r21,r6
 c013db4:	2d8b883a 	add	r5,r5,r22
 c013db8:	2a11883a 	add	r8,r5,r8
 c013dbc:	897fffc4 	addi	r5,r17,-1
 c013dc0:	b2000c2e 	bgeu	r22,r8,c013df4 <__divdf3+0x808>
 c013dc4:	41003f36 	bltu	r8,r4,c013ec4 <__divdf3+0x8d8>
 c013dc8:	22006c26 	beq	r4,r8,c013f7c <__divdf3+0x990>
 c013dcc:	4109c83a 	sub	r4,r8,r4
 c013dd0:	2823883a 	mov	r17,r5
 c013dd4:	003f3b06 	br	c013ac4 <__alt_data_end+0xfc013ac4>
 c013dd8:	ad3ed336 	bltu	r21,r20,c013928 <__alt_data_end+0xfc013928>
 c013ddc:	a804d07a 	srli	r2,r21,1
 c013de0:	802e97fa 	slli	r23,r16,31
 c013de4:	a82a97fa 	slli	r21,r21,31
 c013de8:	8020d07a 	srli	r16,r16,1
 c013dec:	b8aeb03a 	or	r23,r23,r2
 c013df0:	003ed006 	br	c013934 <__alt_data_end+0xfc013934>
 c013df4:	b23ff51e 	bne	r22,r8,c013dcc <__alt_data_end+0xfc013dcc>
 c013df8:	d9800017 	ldw	r6,0(sp)
 c013dfc:	a9bff12e 	bgeu	r21,r6,c013dc4 <__alt_data_end+0xfc013dc4>
 c013e00:	b109c83a 	sub	r4,r22,r4
 c013e04:	2823883a 	mov	r17,r5
 c013e08:	003f2e06 	br	c013ac4 <__alt_data_end+0xfc013ac4>
 c013e0c:	2021883a 	mov	r16,r4
 c013e10:	003eff06 	br	c013a10 <__alt_data_end+0xfc013a10>
 c013e14:	2023883a 	mov	r17,r4
 c013e18:	003ee406 	br	c0139ac <__alt_data_end+0xfc0139ac>
 c013e1c:	a8bfe236 	bltu	r21,r2,c013da8 <__alt_data_end+0xfc013da8>
 c013e20:	0009883a 	mov	r4,zero
 c013e24:	003f2706 	br	c013ac4 <__alt_data_end+0xfc013ac4>
 c013e28:	81002d36 	bltu	r16,r4,c013ee0 <__divdf3+0x8f4>
 c013e2c:	24005626 	beq	r4,r16,c013f88 <__divdf3+0x99c>
 c013e30:	2829883a 	mov	r20,r5
 c013e34:	003f8006 	br	c013c38 <__alt_data_end+0xfc013c38>
 c013e38:	053fffc4 	movi	r20,-1
 c013e3c:	003f7f06 	br	c013c3c <__alt_data_end+0xfc013c3c>
 c013e40:	200f883a 	mov	r7,r4
 c013e44:	003f3c06 	br	c013b38 <__alt_data_end+0xfc013b38>
 c013e48:	1011883a 	mov	r8,r2
 c013e4c:	003f5506 	br	c013ba4 <__alt_data_end+0xfc013ba4>
 c013e50:	e027883a 	mov	r19,fp
 c013e54:	003f7906 	br	c013c3c <__alt_data_end+0xfc013c3c>
 c013e58:	010007c4 	movi	r4,31
 c013e5c:	20c02816 	blt	r4,r3,c013f00 <__divdf3+0x914>
 c013e60:	00800804 	movi	r2,32
 c013e64:	10c5c83a 	sub	r2,r2,r3
 c013e68:	888a983a 	sll	r5,r17,r2
 c013e6c:	a0c8d83a 	srl	r4,r20,r3
 c013e70:	a084983a 	sll	r2,r20,r2
 c013e74:	88e2d83a 	srl	r17,r17,r3
 c013e78:	2906b03a 	or	r3,r5,r4
 c013e7c:	1004c03a 	cmpne	r2,r2,zero
 c013e80:	1886b03a 	or	r3,r3,r2
 c013e84:	188001cc 	andi	r2,r3,7
 c013e88:	10000726 	beq	r2,zero,c013ea8 <__divdf3+0x8bc>
 c013e8c:	188003cc 	andi	r2,r3,15
 c013e90:	01000104 	movi	r4,4
 c013e94:	11000426 	beq	r2,r4,c013ea8 <__divdf3+0x8bc>
 c013e98:	1805883a 	mov	r2,r3
 c013e9c:	10c00104 	addi	r3,r2,4
 c013ea0:	1885803a 	cmpltu	r2,r3,r2
 c013ea4:	88a3883a 	add	r17,r17,r2
 c013ea8:	8880202c 	andhi	r2,r17,128
 c013eac:	10002926 	beq	r2,zero,c013f54 <__divdf3+0x968>
 c013eb0:	9900004c 	andi	r4,r19,1
 c013eb4:	00800044 	movi	r2,1
 c013eb8:	0021883a 	mov	r16,zero
 c013ebc:	002b883a 	mov	r21,zero
 c013ec0:	003e2906 	br	c013768 <__alt_data_end+0xfc013768>
 c013ec4:	d9800017 	ldw	r6,0(sp)
 c013ec8:	8c7fff84 	addi	r17,r17,-2
 c013ecc:	a9ab883a 	add	r21,r21,r6
 c013ed0:	a98b803a 	cmpltu	r5,r21,r6
 c013ed4:	2d8b883a 	add	r5,r5,r22
 c013ed8:	2a11883a 	add	r8,r5,r8
 c013edc:	003ef806 	br	c013ac0 <__alt_data_end+0xfc013ac0>
 c013ee0:	d9800017 	ldw	r6,0(sp)
 c013ee4:	318f883a 	add	r7,r6,r6
 c013ee8:	398b803a 	cmpltu	r5,r7,r6
 c013eec:	2d8d883a 	add	r6,r5,r22
 c013ef0:	81a1883a 	add	r16,r16,r6
 c013ef4:	a17fff84 	addi	r5,r20,-2
 c013ef8:	d9c00015 	stw	r7,0(sp)
 c013efc:	003f8806 	br	c013d20 <__alt_data_end+0xfc013d20>
 c013f00:	013ff844 	movi	r4,-31
 c013f04:	2085c83a 	sub	r2,r4,r2
 c013f08:	8888d83a 	srl	r4,r17,r2
 c013f0c:	00800804 	movi	r2,32
 c013f10:	18802126 	beq	r3,r2,c013f98 <__divdf3+0x9ac>
 c013f14:	04001004 	movi	r16,64
 c013f18:	80c7c83a 	sub	r3,r16,r3
 c013f1c:	88e0983a 	sll	r16,r17,r3
 c013f20:	8504b03a 	or	r2,r16,r20
 c013f24:	1004c03a 	cmpne	r2,r2,zero
 c013f28:	2084b03a 	or	r2,r4,r2
 c013f2c:	144001cc 	andi	r17,r2,7
 c013f30:	88000d1e 	bne	r17,zero,c013f68 <__divdf3+0x97c>
 c013f34:	0021883a 	mov	r16,zero
 c013f38:	102ad0fa 	srli	r21,r2,3
 c013f3c:	9900004c 	andi	r4,r19,1
 c013f40:	0005883a 	mov	r2,zero
 c013f44:	ac6ab03a 	or	r21,r21,r17
 c013f48:	003e0706 	br	c013768 <__alt_data_end+0xfc013768>
 c013f4c:	1007883a 	mov	r3,r2
 c013f50:	0023883a 	mov	r17,zero
 c013f54:	8820927a 	slli	r16,r17,9
 c013f58:	1805883a 	mov	r2,r3
 c013f5c:	8822977a 	slli	r17,r17,29
 c013f60:	8020d33a 	srli	r16,r16,12
 c013f64:	003ff406 	br	c013f38 <__alt_data_end+0xfc013f38>
 c013f68:	10c003cc 	andi	r3,r2,15
 c013f6c:	01000104 	movi	r4,4
 c013f70:	193ff626 	beq	r3,r4,c013f4c <__alt_data_end+0xfc013f4c>
 c013f74:	0023883a 	mov	r17,zero
 c013f78:	003fc806 	br	c013e9c <__alt_data_end+0xfc013e9c>
 c013f7c:	a8bfd136 	bltu	r21,r2,c013ec4 <__alt_data_end+0xfc013ec4>
 c013f80:	2823883a 	mov	r17,r5
 c013f84:	003fa606 	br	c013e20 <__alt_data_end+0xfc013e20>
 c013f88:	d9800017 	ldw	r6,0(sp)
 c013f8c:	30bfd436 	bltu	r6,r2,c013ee0 <__alt_data_end+0xfc013ee0>
 c013f90:	2829883a 	mov	r20,r5
 c013f94:	003f6406 	br	c013d28 <__alt_data_end+0xfc013d28>
 c013f98:	0021883a 	mov	r16,zero
 c013f9c:	003fe006 	br	c013f20 <__alt_data_end+0xfc013f20>
 c013fa0:	00800434 	movhi	r2,16
 c013fa4:	8c000234 	orhi	r16,r17,8
 c013fa8:	10bfffc4 	addi	r2,r2,-1
 c013fac:	e009883a 	mov	r4,fp
 c013fb0:	80a0703a 	and	r16,r16,r2
 c013fb4:	a02b883a 	mov	r21,r20
 c013fb8:	003e4e06 	br	c0138f4 <__alt_data_end+0xfc0138f4>

0c013fbc <__eqdf2>:
 c013fbc:	2804d53a 	srli	r2,r5,20
 c013fc0:	3806d53a 	srli	r3,r7,20
 c013fc4:	02000434 	movhi	r8,16
 c013fc8:	423fffc4 	addi	r8,r8,-1
 c013fcc:	1081ffcc 	andi	r2,r2,2047
 c013fd0:	0281ffc4 	movi	r10,2047
 c013fd4:	2a12703a 	and	r9,r5,r8
 c013fd8:	18c1ffcc 	andi	r3,r3,2047
 c013fdc:	3a10703a 	and	r8,r7,r8
 c013fe0:	280ad7fa 	srli	r5,r5,31
 c013fe4:	380ed7fa 	srli	r7,r7,31
 c013fe8:	12801026 	beq	r2,r10,c01402c <__eqdf2+0x70>
 c013fec:	0281ffc4 	movi	r10,2047
 c013ff0:	1a800a26 	beq	r3,r10,c01401c <__eqdf2+0x60>
 c013ff4:	10c00226 	beq	r2,r3,c014000 <__eqdf2+0x44>
 c013ff8:	00800044 	movi	r2,1
 c013ffc:	f800283a 	ret
 c014000:	4a3ffd1e 	bne	r9,r8,c013ff8 <__alt_data_end+0xfc013ff8>
 c014004:	21bffc1e 	bne	r4,r6,c013ff8 <__alt_data_end+0xfc013ff8>
 c014008:	29c00c26 	beq	r5,r7,c01403c <__eqdf2+0x80>
 c01400c:	103ffa1e 	bne	r2,zero,c013ff8 <__alt_data_end+0xfc013ff8>
 c014010:	2244b03a 	or	r2,r4,r9
 c014014:	1004c03a 	cmpne	r2,r2,zero
 c014018:	f800283a 	ret
 c01401c:	3214b03a 	or	r10,r6,r8
 c014020:	503ff426 	beq	r10,zero,c013ff4 <__alt_data_end+0xfc013ff4>
 c014024:	00800044 	movi	r2,1
 c014028:	f800283a 	ret
 c01402c:	2254b03a 	or	r10,r4,r9
 c014030:	503fee26 	beq	r10,zero,c013fec <__alt_data_end+0xfc013fec>
 c014034:	00800044 	movi	r2,1
 c014038:	f800283a 	ret
 c01403c:	0005883a 	mov	r2,zero
 c014040:	f800283a 	ret

0c014044 <__gedf2>:
 c014044:	2804d53a 	srli	r2,r5,20
 c014048:	3806d53a 	srli	r3,r7,20
 c01404c:	02000434 	movhi	r8,16
 c014050:	423fffc4 	addi	r8,r8,-1
 c014054:	1081ffcc 	andi	r2,r2,2047
 c014058:	0241ffc4 	movi	r9,2047
 c01405c:	2a14703a 	and	r10,r5,r8
 c014060:	18c1ffcc 	andi	r3,r3,2047
 c014064:	3a10703a 	and	r8,r7,r8
 c014068:	280ad7fa 	srli	r5,r5,31
 c01406c:	380ed7fa 	srli	r7,r7,31
 c014070:	12401d26 	beq	r2,r9,c0140e8 <__gedf2+0xa4>
 c014074:	0241ffc4 	movi	r9,2047
 c014078:	1a401226 	beq	r3,r9,c0140c4 <__gedf2+0x80>
 c01407c:	1000081e 	bne	r2,zero,c0140a0 <__gedf2+0x5c>
 c014080:	2296b03a 	or	r11,r4,r10
 c014084:	5813003a 	cmpeq	r9,r11,zero
 c014088:	1800091e 	bne	r3,zero,c0140b0 <__gedf2+0x6c>
 c01408c:	3218b03a 	or	r12,r6,r8
 c014090:	6000071e 	bne	r12,zero,c0140b0 <__gedf2+0x6c>
 c014094:	0005883a 	mov	r2,zero
 c014098:	5800101e 	bne	r11,zero,c0140dc <__gedf2+0x98>
 c01409c:	f800283a 	ret
 c0140a0:	18000c1e 	bne	r3,zero,c0140d4 <__gedf2+0x90>
 c0140a4:	3212b03a 	or	r9,r6,r8
 c0140a8:	48000c26 	beq	r9,zero,c0140dc <__gedf2+0x98>
 c0140ac:	0013883a 	mov	r9,zero
 c0140b0:	39c03fcc 	andi	r7,r7,255
 c0140b4:	48000826 	beq	r9,zero,c0140d8 <__gedf2+0x94>
 c0140b8:	38000926 	beq	r7,zero,c0140e0 <__gedf2+0x9c>
 c0140bc:	00800044 	movi	r2,1
 c0140c0:	f800283a 	ret
 c0140c4:	3212b03a 	or	r9,r6,r8
 c0140c8:	483fec26 	beq	r9,zero,c01407c <__alt_data_end+0xfc01407c>
 c0140cc:	00bfff84 	movi	r2,-2
 c0140d0:	f800283a 	ret
 c0140d4:	39c03fcc 	andi	r7,r7,255
 c0140d8:	29c00626 	beq	r5,r7,c0140f4 <__gedf2+0xb0>
 c0140dc:	283ff726 	beq	r5,zero,c0140bc <__alt_data_end+0xfc0140bc>
 c0140e0:	00bfffc4 	movi	r2,-1
 c0140e4:	f800283a 	ret
 c0140e8:	2292b03a 	or	r9,r4,r10
 c0140ec:	483fe126 	beq	r9,zero,c014074 <__alt_data_end+0xfc014074>
 c0140f0:	003ff606 	br	c0140cc <__alt_data_end+0xfc0140cc>
 c0140f4:	18bff916 	blt	r3,r2,c0140dc <__alt_data_end+0xfc0140dc>
 c0140f8:	10c00316 	blt	r2,r3,c014108 <__gedf2+0xc4>
 c0140fc:	42bff736 	bltu	r8,r10,c0140dc <__alt_data_end+0xfc0140dc>
 c014100:	52000326 	beq	r10,r8,c014110 <__gedf2+0xcc>
 c014104:	5200042e 	bgeu	r10,r8,c014118 <__gedf2+0xd4>
 c014108:	283fec1e 	bne	r5,zero,c0140bc <__alt_data_end+0xfc0140bc>
 c01410c:	003ff406 	br	c0140e0 <__alt_data_end+0xfc0140e0>
 c014110:	313ff236 	bltu	r6,r4,c0140dc <__alt_data_end+0xfc0140dc>
 c014114:	21bffc36 	bltu	r4,r6,c014108 <__alt_data_end+0xfc014108>
 c014118:	0005883a 	mov	r2,zero
 c01411c:	f800283a 	ret

0c014120 <__ledf2>:
 c014120:	2804d53a 	srli	r2,r5,20
 c014124:	3810d53a 	srli	r8,r7,20
 c014128:	00c00434 	movhi	r3,16
 c01412c:	18ffffc4 	addi	r3,r3,-1
 c014130:	1081ffcc 	andi	r2,r2,2047
 c014134:	0241ffc4 	movi	r9,2047
 c014138:	28d4703a 	and	r10,r5,r3
 c01413c:	4201ffcc 	andi	r8,r8,2047
 c014140:	38c6703a 	and	r3,r7,r3
 c014144:	280ad7fa 	srli	r5,r5,31
 c014148:	380ed7fa 	srli	r7,r7,31
 c01414c:	12401f26 	beq	r2,r9,c0141cc <__ledf2+0xac>
 c014150:	0241ffc4 	movi	r9,2047
 c014154:	42401426 	beq	r8,r9,c0141a8 <__ledf2+0x88>
 c014158:	1000091e 	bne	r2,zero,c014180 <__ledf2+0x60>
 c01415c:	2296b03a 	or	r11,r4,r10
 c014160:	5813003a 	cmpeq	r9,r11,zero
 c014164:	29403fcc 	andi	r5,r5,255
 c014168:	40000a1e 	bne	r8,zero,c014194 <__ledf2+0x74>
 c01416c:	30d8b03a 	or	r12,r6,r3
 c014170:	6000081e 	bne	r12,zero,c014194 <__ledf2+0x74>
 c014174:	0005883a 	mov	r2,zero
 c014178:	5800111e 	bne	r11,zero,c0141c0 <__ledf2+0xa0>
 c01417c:	f800283a 	ret
 c014180:	29403fcc 	andi	r5,r5,255
 c014184:	40000c1e 	bne	r8,zero,c0141b8 <__ledf2+0x98>
 c014188:	30d2b03a 	or	r9,r6,r3
 c01418c:	48000c26 	beq	r9,zero,c0141c0 <__ledf2+0xa0>
 c014190:	0013883a 	mov	r9,zero
 c014194:	39c03fcc 	andi	r7,r7,255
 c014198:	48000826 	beq	r9,zero,c0141bc <__ledf2+0x9c>
 c01419c:	38001126 	beq	r7,zero,c0141e4 <__ledf2+0xc4>
 c0141a0:	00800044 	movi	r2,1
 c0141a4:	f800283a 	ret
 c0141a8:	30d2b03a 	or	r9,r6,r3
 c0141ac:	483fea26 	beq	r9,zero,c014158 <__alt_data_end+0xfc014158>
 c0141b0:	00800084 	movi	r2,2
 c0141b4:	f800283a 	ret
 c0141b8:	39c03fcc 	andi	r7,r7,255
 c0141bc:	39400726 	beq	r7,r5,c0141dc <__ledf2+0xbc>
 c0141c0:	2800081e 	bne	r5,zero,c0141e4 <__ledf2+0xc4>
 c0141c4:	00800044 	movi	r2,1
 c0141c8:	f800283a 	ret
 c0141cc:	2292b03a 	or	r9,r4,r10
 c0141d0:	483fdf26 	beq	r9,zero,c014150 <__alt_data_end+0xfc014150>
 c0141d4:	00800084 	movi	r2,2
 c0141d8:	f800283a 	ret
 c0141dc:	4080030e 	bge	r8,r2,c0141ec <__ledf2+0xcc>
 c0141e0:	383fef26 	beq	r7,zero,c0141a0 <__alt_data_end+0xfc0141a0>
 c0141e4:	00bfffc4 	movi	r2,-1
 c0141e8:	f800283a 	ret
 c0141ec:	123feb16 	blt	r2,r8,c01419c <__alt_data_end+0xfc01419c>
 c0141f0:	1abff336 	bltu	r3,r10,c0141c0 <__alt_data_end+0xfc0141c0>
 c0141f4:	50c00326 	beq	r10,r3,c014204 <__ledf2+0xe4>
 c0141f8:	50c0042e 	bgeu	r10,r3,c01420c <__ledf2+0xec>
 c0141fc:	283fe81e 	bne	r5,zero,c0141a0 <__alt_data_end+0xfc0141a0>
 c014200:	003ff806 	br	c0141e4 <__alt_data_end+0xfc0141e4>
 c014204:	313fee36 	bltu	r6,r4,c0141c0 <__alt_data_end+0xfc0141c0>
 c014208:	21bffc36 	bltu	r4,r6,c0141fc <__alt_data_end+0xfc0141fc>
 c01420c:	0005883a 	mov	r2,zero
 c014210:	f800283a 	ret

0c014214 <__muldf3>:
 c014214:	deffee04 	addi	sp,sp,-72
 c014218:	dd000c15 	stw	r20,48(sp)
 c01421c:	2828d53a 	srli	r20,r5,20
 c014220:	ddc00f15 	stw	r23,60(sp)
 c014224:	282ed7fa 	srli	r23,r5,31
 c014228:	dc000815 	stw	r16,32(sp)
 c01422c:	04000434 	movhi	r16,16
 c014230:	dcc00b15 	stw	r19,44(sp)
 c014234:	843fffc4 	addi	r16,r16,-1
 c014238:	dfc01115 	stw	ra,68(sp)
 c01423c:	df001015 	stw	fp,64(sp)
 c014240:	dd800e15 	stw	r22,56(sp)
 c014244:	dd400d15 	stw	r21,52(sp)
 c014248:	dc800a15 	stw	r18,40(sp)
 c01424c:	dc400915 	stw	r17,36(sp)
 c014250:	a501ffcc 	andi	r20,r20,2047
 c014254:	2c20703a 	and	r16,r5,r16
 c014258:	b827883a 	mov	r19,r23
 c01425c:	ba403fcc 	andi	r9,r23,255
 c014260:	a0006026 	beq	r20,zero,c0143e4 <__muldf3+0x1d0>
 c014264:	0081ffc4 	movi	r2,2047
 c014268:	202d883a 	mov	r22,r4
 c01426c:	a0803626 	beq	r20,r2,c014348 <__muldf3+0x134>
 c014270:	84000434 	orhi	r16,r16,16
 c014274:	200ad77a 	srli	r5,r4,29
 c014278:	800490fa 	slli	r2,r16,3
 c01427c:	202c90fa 	slli	r22,r4,3
 c014280:	a53f0044 	addi	r20,r20,-1023
 c014284:	28a0b03a 	or	r16,r5,r2
 c014288:	002b883a 	mov	r21,zero
 c01428c:	000b883a 	mov	r5,zero
 c014290:	3804d53a 	srli	r2,r7,20
 c014294:	3838d7fa 	srli	fp,r7,31
 c014298:	04400434 	movhi	r17,16
 c01429c:	8c7fffc4 	addi	r17,r17,-1
 c0142a0:	1081ffcc 	andi	r2,r2,2047
 c0142a4:	3025883a 	mov	r18,r6
 c0142a8:	3c62703a 	and	r17,r7,r17
 c0142ac:	e2803fcc 	andi	r10,fp,255
 c0142b0:	10006d26 	beq	r2,zero,c014468 <__muldf3+0x254>
 c0142b4:	00c1ffc4 	movi	r3,2047
 c0142b8:	10c06526 	beq	r2,r3,c014450 <__muldf3+0x23c>
 c0142bc:	8c400434 	orhi	r17,r17,16
 c0142c0:	300ed77a 	srli	r7,r6,29
 c0142c4:	880690fa 	slli	r3,r17,3
 c0142c8:	302490fa 	slli	r18,r6,3
 c0142cc:	10bf0044 	addi	r2,r2,-1023
 c0142d0:	38e2b03a 	or	r17,r7,r3
 c0142d4:	000f883a 	mov	r7,zero
 c0142d8:	a087883a 	add	r3,r20,r2
 c0142dc:	010003c4 	movi	r4,15
 c0142e0:	3d44b03a 	or	r2,r7,r21
 c0142e4:	e5ccf03a 	xor	r6,fp,r23
 c0142e8:	1a000044 	addi	r8,r3,1
 c0142ec:	20809b36 	bltu	r4,r2,c01455c <__muldf3+0x348>
 c0142f0:	100490ba 	slli	r2,r2,2
 c0142f4:	01030074 	movhi	r4,3073
 c0142f8:	2110c204 	addi	r4,r4,17160
 c0142fc:	1105883a 	add	r2,r2,r4
 c014300:	10800017 	ldw	r2,0(r2)
 c014304:	1000683a 	jmp	r2
 c014308:	0c01455c 	xori	r16,at,1301
 c01430c:	0c014368 	cmpgeui	r16,at,1293
 c014310:	0c014368 	cmpgeui	r16,at,1293
 c014314:	0c014364 	muli	r16,at,1293
 c014318:	0c014538 	rdprs	r16,at,1300
 c01431c:	0c014538 	rdprs	r16,at,1300
 c014320:	0c014520 	cmpeqi	r16,at,1300
 c014324:	0c014364 	muli	r16,at,1293
 c014328:	0c014538 	rdprs	r16,at,1300
 c01432c:	0c014520 	cmpeqi	r16,at,1300
 c014330:	0c014538 	rdprs	r16,at,1300
 c014334:	0c014364 	muli	r16,at,1293
 c014338:	0c014548 	cmpgei	r16,at,1301
 c01433c:	0c014548 	cmpgei	r16,at,1301
 c014340:	0c014548 	cmpgei	r16,at,1301
 c014344:	0c0148a8 	cmpgeui	r16,at,1314
 c014348:	2404b03a 	or	r2,r4,r16
 c01434c:	1000711e 	bne	r2,zero,c014514 <__muldf3+0x300>
 c014350:	05400204 	movi	r21,8
 c014354:	0021883a 	mov	r16,zero
 c014358:	002d883a 	mov	r22,zero
 c01435c:	01400084 	movi	r5,2
 c014360:	003fcb06 	br	c014290 <__alt_data_end+0xfc014290>
 c014364:	500d883a 	mov	r6,r10
 c014368:	00800084 	movi	r2,2
 c01436c:	38805926 	beq	r7,r2,c0144d4 <__muldf3+0x2c0>
 c014370:	008000c4 	movi	r2,3
 c014374:	3881bb26 	beq	r7,r2,c014a64 <__muldf3+0x850>
 c014378:	00800044 	movi	r2,1
 c01437c:	3881961e 	bne	r7,r2,c0149d8 <__muldf3+0x7c4>
 c014380:	3027883a 	mov	r19,r6
 c014384:	0005883a 	mov	r2,zero
 c014388:	0021883a 	mov	r16,zero
 c01438c:	002d883a 	mov	r22,zero
 c014390:	1004953a 	slli	r2,r2,20
 c014394:	98c03fcc 	andi	r3,r19,255
 c014398:	04400434 	movhi	r17,16
 c01439c:	8c7fffc4 	addi	r17,r17,-1
 c0143a0:	180697fa 	slli	r3,r3,31
 c0143a4:	8460703a 	and	r16,r16,r17
 c0143a8:	80a0b03a 	or	r16,r16,r2
 c0143ac:	80c6b03a 	or	r3,r16,r3
 c0143b0:	b005883a 	mov	r2,r22
 c0143b4:	dfc01117 	ldw	ra,68(sp)
 c0143b8:	df001017 	ldw	fp,64(sp)
 c0143bc:	ddc00f17 	ldw	r23,60(sp)
 c0143c0:	dd800e17 	ldw	r22,56(sp)
 c0143c4:	dd400d17 	ldw	r21,52(sp)
 c0143c8:	dd000c17 	ldw	r20,48(sp)
 c0143cc:	dcc00b17 	ldw	r19,44(sp)
 c0143d0:	dc800a17 	ldw	r18,40(sp)
 c0143d4:	dc400917 	ldw	r17,36(sp)
 c0143d8:	dc000817 	ldw	r16,32(sp)
 c0143dc:	dec01204 	addi	sp,sp,72
 c0143e0:	f800283a 	ret
 c0143e4:	2404b03a 	or	r2,r4,r16
 c0143e8:	202b883a 	mov	r21,r4
 c0143ec:	10004426 	beq	r2,zero,c014500 <__muldf3+0x2ec>
 c0143f0:	80015126 	beq	r16,zero,c014938 <__muldf3+0x724>
 c0143f4:	8009883a 	mov	r4,r16
 c0143f8:	d9800715 	stw	r6,28(sp)
 c0143fc:	d9c00215 	stw	r7,8(sp)
 c014400:	da400415 	stw	r9,16(sp)
 c014404:	c0155800 	call	c015580 <__clzsi2>
 c014408:	d9800717 	ldw	r6,28(sp)
 c01440c:	d9c00217 	ldw	r7,8(sp)
 c014410:	da400417 	ldw	r9,16(sp)
 c014414:	113ffd44 	addi	r4,r2,-11
 c014418:	00c00704 	movi	r3,28
 c01441c:	19014216 	blt	r3,r4,c014928 <__muldf3+0x714>
 c014420:	00c00744 	movi	r3,29
 c014424:	15bffe04 	addi	r22,r2,-8
 c014428:	1907c83a 	sub	r3,r3,r4
 c01442c:	85a0983a 	sll	r16,r16,r22
 c014430:	a8c6d83a 	srl	r3,r21,r3
 c014434:	adac983a 	sll	r22,r21,r22
 c014438:	1c20b03a 	or	r16,r3,r16
 c01443c:	1080fcc4 	addi	r2,r2,1011
 c014440:	00a9c83a 	sub	r20,zero,r2
 c014444:	002b883a 	mov	r21,zero
 c014448:	000b883a 	mov	r5,zero
 c01444c:	003f9006 	br	c014290 <__alt_data_end+0xfc014290>
 c014450:	3446b03a 	or	r3,r6,r17
 c014454:	1800281e 	bne	r3,zero,c0144f8 <__muldf3+0x2e4>
 c014458:	0023883a 	mov	r17,zero
 c01445c:	0025883a 	mov	r18,zero
 c014460:	01c00084 	movi	r7,2
 c014464:	003f9c06 	br	c0142d8 <__alt_data_end+0xfc0142d8>
 c014468:	3446b03a 	or	r3,r6,r17
 c01446c:	18001e26 	beq	r3,zero,c0144e8 <__muldf3+0x2d4>
 c014470:	88012126 	beq	r17,zero,c0148f8 <__muldf3+0x6e4>
 c014474:	8809883a 	mov	r4,r17
 c014478:	d9400215 	stw	r5,8(sp)
 c01447c:	d9800715 	stw	r6,28(sp)
 c014480:	da400415 	stw	r9,16(sp)
 c014484:	da800315 	stw	r10,12(sp)
 c014488:	c0155800 	call	c015580 <__clzsi2>
 c01448c:	d9400217 	ldw	r5,8(sp)
 c014490:	d9800717 	ldw	r6,28(sp)
 c014494:	da400417 	ldw	r9,16(sp)
 c014498:	da800317 	ldw	r10,12(sp)
 c01449c:	113ffd44 	addi	r4,r2,-11
 c0144a0:	00c00704 	movi	r3,28
 c0144a4:	19011016 	blt	r3,r4,c0148e8 <__muldf3+0x6d4>
 c0144a8:	00c00744 	movi	r3,29
 c0144ac:	14bffe04 	addi	r18,r2,-8
 c0144b0:	1907c83a 	sub	r3,r3,r4
 c0144b4:	8ca2983a 	sll	r17,r17,r18
 c0144b8:	30c6d83a 	srl	r3,r6,r3
 c0144bc:	34a4983a 	sll	r18,r6,r18
 c0144c0:	1c62b03a 	or	r17,r3,r17
 c0144c4:	1080fcc4 	addi	r2,r2,1011
 c0144c8:	0085c83a 	sub	r2,zero,r2
 c0144cc:	000f883a 	mov	r7,zero
 c0144d0:	003f8106 	br	c0142d8 <__alt_data_end+0xfc0142d8>
 c0144d4:	3027883a 	mov	r19,r6
 c0144d8:	0081ffc4 	movi	r2,2047
 c0144dc:	0021883a 	mov	r16,zero
 c0144e0:	002d883a 	mov	r22,zero
 c0144e4:	003faa06 	br	c014390 <__alt_data_end+0xfc014390>
 c0144e8:	0023883a 	mov	r17,zero
 c0144ec:	0025883a 	mov	r18,zero
 c0144f0:	01c00044 	movi	r7,1
 c0144f4:	003f7806 	br	c0142d8 <__alt_data_end+0xfc0142d8>
 c0144f8:	01c000c4 	movi	r7,3
 c0144fc:	003f7606 	br	c0142d8 <__alt_data_end+0xfc0142d8>
 c014500:	05400104 	movi	r21,4
 c014504:	0021883a 	mov	r16,zero
 c014508:	002d883a 	mov	r22,zero
 c01450c:	01400044 	movi	r5,1
 c014510:	003f5f06 	br	c014290 <__alt_data_end+0xfc014290>
 c014514:	05400304 	movi	r21,12
 c014518:	014000c4 	movi	r5,3
 c01451c:	003f5c06 	br	c014290 <__alt_data_end+0xfc014290>
 c014520:	04000434 	movhi	r16,16
 c014524:	0027883a 	mov	r19,zero
 c014528:	843fffc4 	addi	r16,r16,-1
 c01452c:	05bfffc4 	movi	r22,-1
 c014530:	0081ffc4 	movi	r2,2047
 c014534:	003f9606 	br	c014390 <__alt_data_end+0xfc014390>
 c014538:	8023883a 	mov	r17,r16
 c01453c:	b025883a 	mov	r18,r22
 c014540:	280f883a 	mov	r7,r5
 c014544:	003f8806 	br	c014368 <__alt_data_end+0xfc014368>
 c014548:	8023883a 	mov	r17,r16
 c01454c:	b025883a 	mov	r18,r22
 c014550:	480d883a 	mov	r6,r9
 c014554:	280f883a 	mov	r7,r5
 c014558:	003f8306 	br	c014368 <__alt_data_end+0xfc014368>
 c01455c:	b026d43a 	srli	r19,r22,16
 c014560:	902ed43a 	srli	r23,r18,16
 c014564:	b5bfffcc 	andi	r22,r22,65535
 c014568:	94bfffcc 	andi	r18,r18,65535
 c01456c:	b00b883a 	mov	r5,r22
 c014570:	9009883a 	mov	r4,r18
 c014574:	d8c00515 	stw	r3,20(sp)
 c014578:	d9800715 	stw	r6,28(sp)
 c01457c:	da000615 	stw	r8,24(sp)
 c014580:	c004de00 	call	c004de0 <__mulsi3>
 c014584:	980b883a 	mov	r5,r19
 c014588:	9009883a 	mov	r4,r18
 c01458c:	1029883a 	mov	r20,r2
 c014590:	c004de00 	call	c004de0 <__mulsi3>
 c014594:	b80b883a 	mov	r5,r23
 c014598:	9809883a 	mov	r4,r19
 c01459c:	102b883a 	mov	r21,r2
 c0145a0:	c004de00 	call	c004de0 <__mulsi3>
 c0145a4:	b809883a 	mov	r4,r23
 c0145a8:	b00b883a 	mov	r5,r22
 c0145ac:	1039883a 	mov	fp,r2
 c0145b0:	c004de00 	call	c004de0 <__mulsi3>
 c0145b4:	a008d43a 	srli	r4,r20,16
 c0145b8:	1545883a 	add	r2,r2,r21
 c0145bc:	d8c00517 	ldw	r3,20(sp)
 c0145c0:	2085883a 	add	r2,r4,r2
 c0145c4:	d9800717 	ldw	r6,28(sp)
 c0145c8:	da000617 	ldw	r8,24(sp)
 c0145cc:	1540022e 	bgeu	r2,r21,c0145d8 <__muldf3+0x3c4>
 c0145d0:	01000074 	movhi	r4,1
 c0145d4:	e139883a 	add	fp,fp,r4
 c0145d8:	100e943a 	slli	r7,r2,16
 c0145dc:	1004d43a 	srli	r2,r2,16
 c0145e0:	882ad43a 	srli	r21,r17,16
 c0145e4:	a53fffcc 	andi	r20,r20,65535
 c0145e8:	8c7fffcc 	andi	r17,r17,65535
 c0145ec:	3d29883a 	add	r20,r7,r20
 c0145f0:	b00b883a 	mov	r5,r22
 c0145f4:	8809883a 	mov	r4,r17
 c0145f8:	d8c00515 	stw	r3,20(sp)
 c0145fc:	d9800715 	stw	r6,28(sp)
 c014600:	da000615 	stw	r8,24(sp)
 c014604:	dd000115 	stw	r20,4(sp)
 c014608:	d8800015 	stw	r2,0(sp)
 c01460c:	c004de00 	call	c004de0 <__mulsi3>
 c014610:	980b883a 	mov	r5,r19
 c014614:	8809883a 	mov	r4,r17
 c014618:	d8800215 	stw	r2,8(sp)
 c01461c:	c004de00 	call	c004de0 <__mulsi3>
 c014620:	9809883a 	mov	r4,r19
 c014624:	a80b883a 	mov	r5,r21
 c014628:	1029883a 	mov	r20,r2
 c01462c:	c004de00 	call	c004de0 <__mulsi3>
 c014630:	b00b883a 	mov	r5,r22
 c014634:	a809883a 	mov	r4,r21
 c014638:	d8800415 	stw	r2,16(sp)
 c01463c:	c004de00 	call	c004de0 <__mulsi3>
 c014640:	d9c00217 	ldw	r7,8(sp)
 c014644:	1505883a 	add	r2,r2,r20
 c014648:	d8c00517 	ldw	r3,20(sp)
 c01464c:	3826d43a 	srli	r19,r7,16
 c014650:	d9800717 	ldw	r6,28(sp)
 c014654:	da000617 	ldw	r8,24(sp)
 c014658:	9885883a 	add	r2,r19,r2
 c01465c:	da400417 	ldw	r9,16(sp)
 c014660:	1500022e 	bgeu	r2,r20,c01466c <__muldf3+0x458>
 c014664:	01000074 	movhi	r4,1
 c014668:	4913883a 	add	r9,r9,r4
 c01466c:	1028d43a 	srli	r20,r2,16
 c014670:	1004943a 	slli	r2,r2,16
 c014674:	802cd43a 	srli	r22,r16,16
 c014678:	843fffcc 	andi	r16,r16,65535
 c01467c:	3cffffcc 	andi	r19,r7,65535
 c014680:	9009883a 	mov	r4,r18
 c014684:	800b883a 	mov	r5,r16
 c014688:	a269883a 	add	r20,r20,r9
 c01468c:	d8c00515 	stw	r3,20(sp)
 c014690:	d9800715 	stw	r6,28(sp)
 c014694:	da000615 	stw	r8,24(sp)
 c014698:	14e7883a 	add	r19,r2,r19
 c01469c:	c004de00 	call	c004de0 <__mulsi3>
 c0146a0:	9009883a 	mov	r4,r18
 c0146a4:	b00b883a 	mov	r5,r22
 c0146a8:	d8800315 	stw	r2,12(sp)
 c0146ac:	c004de00 	call	c004de0 <__mulsi3>
 c0146b0:	b809883a 	mov	r4,r23
 c0146b4:	b00b883a 	mov	r5,r22
 c0146b8:	d8800215 	stw	r2,8(sp)
 c0146bc:	c004de00 	call	c004de0 <__mulsi3>
 c0146c0:	b80b883a 	mov	r5,r23
 c0146c4:	8009883a 	mov	r4,r16
 c0146c8:	d8800415 	stw	r2,16(sp)
 c0146cc:	c004de00 	call	c004de0 <__mulsi3>
 c0146d0:	da800317 	ldw	r10,12(sp)
 c0146d4:	d9c00217 	ldw	r7,8(sp)
 c0146d8:	d9000017 	ldw	r4,0(sp)
 c0146dc:	502ed43a 	srli	r23,r10,16
 c0146e0:	11c5883a 	add	r2,r2,r7
 c0146e4:	24e5883a 	add	r18,r4,r19
 c0146e8:	b885883a 	add	r2,r23,r2
 c0146ec:	d8c00517 	ldw	r3,20(sp)
 c0146f0:	d9800717 	ldw	r6,28(sp)
 c0146f4:	da000617 	ldw	r8,24(sp)
 c0146f8:	da400417 	ldw	r9,16(sp)
 c0146fc:	11c0022e 	bgeu	r2,r7,c014708 <__muldf3+0x4f4>
 c014700:	01000074 	movhi	r4,1
 c014704:	4913883a 	add	r9,r9,r4
 c014708:	100ed43a 	srli	r7,r2,16
 c01470c:	1004943a 	slli	r2,r2,16
 c014710:	55ffffcc 	andi	r23,r10,65535
 c014714:	3a53883a 	add	r9,r7,r9
 c014718:	8809883a 	mov	r4,r17
 c01471c:	800b883a 	mov	r5,r16
 c014720:	d8c00515 	stw	r3,20(sp)
 c014724:	d9800715 	stw	r6,28(sp)
 c014728:	da000615 	stw	r8,24(sp)
 c01472c:	da400415 	stw	r9,16(sp)
 c014730:	15ef883a 	add	r23,r2,r23
 c014734:	c004de00 	call	c004de0 <__mulsi3>
 c014738:	8809883a 	mov	r4,r17
 c01473c:	b00b883a 	mov	r5,r22
 c014740:	d8800215 	stw	r2,8(sp)
 c014744:	c004de00 	call	c004de0 <__mulsi3>
 c014748:	b00b883a 	mov	r5,r22
 c01474c:	a809883a 	mov	r4,r21
 c014750:	d8800315 	stw	r2,12(sp)
 c014754:	c004de00 	call	c004de0 <__mulsi3>
 c014758:	8009883a 	mov	r4,r16
 c01475c:	a80b883a 	mov	r5,r21
 c014760:	1023883a 	mov	r17,r2
 c014764:	c004de00 	call	c004de0 <__mulsi3>
 c014768:	d9c00217 	ldw	r7,8(sp)
 c01476c:	da800317 	ldw	r10,12(sp)
 c014770:	d8c00517 	ldw	r3,20(sp)
 c014774:	3808d43a 	srli	r4,r7,16
 c014778:	1285883a 	add	r2,r2,r10
 c01477c:	d9800717 	ldw	r6,28(sp)
 c014780:	2085883a 	add	r2,r4,r2
 c014784:	da000617 	ldw	r8,24(sp)
 c014788:	da400417 	ldw	r9,16(sp)
 c01478c:	1280022e 	bgeu	r2,r10,c014798 <__muldf3+0x584>
 c014790:	01000074 	movhi	r4,1
 c014794:	8923883a 	add	r17,r17,r4
 c014798:	1008943a 	slli	r4,r2,16
 c01479c:	39ffffcc 	andi	r7,r7,65535
 c0147a0:	e4b9883a 	add	fp,fp,r18
 c0147a4:	21cf883a 	add	r7,r4,r7
 c0147a8:	e4e7803a 	cmpltu	r19,fp,r19
 c0147ac:	3d0f883a 	add	r7,r7,r20
 c0147b0:	bf39883a 	add	fp,r23,fp
 c0147b4:	99c9883a 	add	r4,r19,r7
 c0147b8:	e5ef803a 	cmpltu	r23,fp,r23
 c0147bc:	490b883a 	add	r5,r9,r4
 c0147c0:	1004d43a 	srli	r2,r2,16
 c0147c4:	b965883a 	add	r18,r23,r5
 c0147c8:	24c9803a 	cmpltu	r4,r4,r19
 c0147cc:	3d29803a 	cmpltu	r20,r7,r20
 c0147d0:	a128b03a 	or	r20,r20,r4
 c0147d4:	95ef803a 	cmpltu	r23,r18,r23
 c0147d8:	2a53803a 	cmpltu	r9,r5,r9
 c0147dc:	a0a9883a 	add	r20,r20,r2
 c0147e0:	4deeb03a 	or	r23,r9,r23
 c0147e4:	a5ef883a 	add	r23,r20,r23
 c0147e8:	bc63883a 	add	r17,r23,r17
 c0147ec:	e004927a 	slli	r2,fp,9
 c0147f0:	d9000117 	ldw	r4,4(sp)
 c0147f4:	882e927a 	slli	r23,r17,9
 c0147f8:	9022d5fa 	srli	r17,r18,23
 c0147fc:	e038d5fa 	srli	fp,fp,23
 c014800:	1104b03a 	or	r2,r2,r4
 c014804:	9024927a 	slli	r18,r18,9
 c014808:	1004c03a 	cmpne	r2,r2,zero
 c01480c:	bc62b03a 	or	r17,r23,r17
 c014810:	1738b03a 	or	fp,r2,fp
 c014814:	8880402c 	andhi	r2,r17,256
 c014818:	e4a4b03a 	or	r18,fp,r18
 c01481c:	10000726 	beq	r2,zero,c01483c <__muldf3+0x628>
 c014820:	9006d07a 	srli	r3,r18,1
 c014824:	880497fa 	slli	r2,r17,31
 c014828:	9480004c 	andi	r18,r18,1
 c01482c:	8822d07a 	srli	r17,r17,1
 c014830:	1ca4b03a 	or	r18,r3,r18
 c014834:	14a4b03a 	or	r18,r2,r18
 c014838:	4007883a 	mov	r3,r8
 c01483c:	1880ffc4 	addi	r2,r3,1023
 c014840:	0080460e 	bge	zero,r2,c01495c <__muldf3+0x748>
 c014844:	910001cc 	andi	r4,r18,7
 c014848:	20000726 	beq	r4,zero,c014868 <__muldf3+0x654>
 c01484c:	910003cc 	andi	r4,r18,15
 c014850:	01400104 	movi	r5,4
 c014854:	21400426 	beq	r4,r5,c014868 <__muldf3+0x654>
 c014858:	9149883a 	add	r4,r18,r5
 c01485c:	24a5803a 	cmpltu	r18,r4,r18
 c014860:	8ca3883a 	add	r17,r17,r18
 c014864:	2025883a 	mov	r18,r4
 c014868:	8900402c 	andhi	r4,r17,256
 c01486c:	20000426 	beq	r4,zero,c014880 <__muldf3+0x66c>
 c014870:	18810004 	addi	r2,r3,1024
 c014874:	00ffc034 	movhi	r3,65280
 c014878:	18ffffc4 	addi	r3,r3,-1
 c01487c:	88e2703a 	and	r17,r17,r3
 c014880:	00c1ff84 	movi	r3,2046
 c014884:	18bf1316 	blt	r3,r2,c0144d4 <__alt_data_end+0xfc0144d4>
 c014888:	882c977a 	slli	r22,r17,29
 c01488c:	9024d0fa 	srli	r18,r18,3
 c014890:	8822927a 	slli	r17,r17,9
 c014894:	1081ffcc 	andi	r2,r2,2047
 c014898:	b4acb03a 	or	r22,r22,r18
 c01489c:	8820d33a 	srli	r16,r17,12
 c0148a0:	3027883a 	mov	r19,r6
 c0148a4:	003eba06 	br	c014390 <__alt_data_end+0xfc014390>
 c0148a8:	8080022c 	andhi	r2,r16,8
 c0148ac:	10000926 	beq	r2,zero,c0148d4 <__muldf3+0x6c0>
 c0148b0:	8880022c 	andhi	r2,r17,8
 c0148b4:	1000071e 	bne	r2,zero,c0148d4 <__muldf3+0x6c0>
 c0148b8:	00800434 	movhi	r2,16
 c0148bc:	8c000234 	orhi	r16,r17,8
 c0148c0:	10bfffc4 	addi	r2,r2,-1
 c0148c4:	e027883a 	mov	r19,fp
 c0148c8:	80a0703a 	and	r16,r16,r2
 c0148cc:	902d883a 	mov	r22,r18
 c0148d0:	003f1706 	br	c014530 <__alt_data_end+0xfc014530>
 c0148d4:	00800434 	movhi	r2,16
 c0148d8:	84000234 	orhi	r16,r16,8
 c0148dc:	10bfffc4 	addi	r2,r2,-1
 c0148e0:	80a0703a 	and	r16,r16,r2
 c0148e4:	003f1206 	br	c014530 <__alt_data_end+0xfc014530>
 c0148e8:	147ff604 	addi	r17,r2,-40
 c0148ec:	3462983a 	sll	r17,r6,r17
 c0148f0:	0025883a 	mov	r18,zero
 c0148f4:	003ef306 	br	c0144c4 <__alt_data_end+0xfc0144c4>
 c0148f8:	3009883a 	mov	r4,r6
 c0148fc:	d9400215 	stw	r5,8(sp)
 c014900:	d9800715 	stw	r6,28(sp)
 c014904:	da400415 	stw	r9,16(sp)
 c014908:	da800315 	stw	r10,12(sp)
 c01490c:	c0155800 	call	c015580 <__clzsi2>
 c014910:	10800804 	addi	r2,r2,32
 c014914:	da800317 	ldw	r10,12(sp)
 c014918:	da400417 	ldw	r9,16(sp)
 c01491c:	d9800717 	ldw	r6,28(sp)
 c014920:	d9400217 	ldw	r5,8(sp)
 c014924:	003edd06 	br	c01449c <__alt_data_end+0xfc01449c>
 c014928:	143ff604 	addi	r16,r2,-40
 c01492c:	ac20983a 	sll	r16,r21,r16
 c014930:	002d883a 	mov	r22,zero
 c014934:	003ec106 	br	c01443c <__alt_data_end+0xfc01443c>
 c014938:	d9800715 	stw	r6,28(sp)
 c01493c:	d9c00215 	stw	r7,8(sp)
 c014940:	da400415 	stw	r9,16(sp)
 c014944:	c0155800 	call	c015580 <__clzsi2>
 c014948:	10800804 	addi	r2,r2,32
 c01494c:	da400417 	ldw	r9,16(sp)
 c014950:	d9c00217 	ldw	r7,8(sp)
 c014954:	d9800717 	ldw	r6,28(sp)
 c014958:	003eae06 	br	c014414 <__alt_data_end+0xfc014414>
 c01495c:	00c00044 	movi	r3,1
 c014960:	1887c83a 	sub	r3,r3,r2
 c014964:	01000e04 	movi	r4,56
 c014968:	20fe8516 	blt	r4,r3,c014380 <__alt_data_end+0xfc014380>
 c01496c:	010007c4 	movi	r4,31
 c014970:	20c01b16 	blt	r4,r3,c0149e0 <__muldf3+0x7cc>
 c014974:	00800804 	movi	r2,32
 c014978:	10c5c83a 	sub	r2,r2,r3
 c01497c:	888a983a 	sll	r5,r17,r2
 c014980:	90c8d83a 	srl	r4,r18,r3
 c014984:	9084983a 	sll	r2,r18,r2
 c014988:	88e2d83a 	srl	r17,r17,r3
 c01498c:	2906b03a 	or	r3,r5,r4
 c014990:	1004c03a 	cmpne	r2,r2,zero
 c014994:	1886b03a 	or	r3,r3,r2
 c014998:	188001cc 	andi	r2,r3,7
 c01499c:	10000726 	beq	r2,zero,c0149bc <__muldf3+0x7a8>
 c0149a0:	188003cc 	andi	r2,r3,15
 c0149a4:	01000104 	movi	r4,4
 c0149a8:	11000426 	beq	r2,r4,c0149bc <__muldf3+0x7a8>
 c0149ac:	1805883a 	mov	r2,r3
 c0149b0:	10c00104 	addi	r3,r2,4
 c0149b4:	1885803a 	cmpltu	r2,r3,r2
 c0149b8:	88a3883a 	add	r17,r17,r2
 c0149bc:	8880202c 	andhi	r2,r17,128
 c0149c0:	10001c26 	beq	r2,zero,c014a34 <__muldf3+0x820>
 c0149c4:	3027883a 	mov	r19,r6
 c0149c8:	00800044 	movi	r2,1
 c0149cc:	0021883a 	mov	r16,zero
 c0149d0:	002d883a 	mov	r22,zero
 c0149d4:	003e6e06 	br	c014390 <__alt_data_end+0xfc014390>
 c0149d8:	4007883a 	mov	r3,r8
 c0149dc:	003f9706 	br	c01483c <__alt_data_end+0xfc01483c>
 c0149e0:	017ff844 	movi	r5,-31
 c0149e4:	2885c83a 	sub	r2,r5,r2
 c0149e8:	888ad83a 	srl	r5,r17,r2
 c0149ec:	00800804 	movi	r2,32
 c0149f0:	18801a26 	beq	r3,r2,c014a5c <__muldf3+0x848>
 c0149f4:	01001004 	movi	r4,64
 c0149f8:	20c7c83a 	sub	r3,r4,r3
 c0149fc:	88e2983a 	sll	r17,r17,r3
 c014a00:	8ca4b03a 	or	r18,r17,r18
 c014a04:	9004c03a 	cmpne	r2,r18,zero
 c014a08:	2884b03a 	or	r2,r5,r2
 c014a0c:	144001cc 	andi	r17,r2,7
 c014a10:	88000d1e 	bne	r17,zero,c014a48 <__muldf3+0x834>
 c014a14:	0021883a 	mov	r16,zero
 c014a18:	102cd0fa 	srli	r22,r2,3
 c014a1c:	3027883a 	mov	r19,r6
 c014a20:	0005883a 	mov	r2,zero
 c014a24:	b46cb03a 	or	r22,r22,r17
 c014a28:	003e5906 	br	c014390 <__alt_data_end+0xfc014390>
 c014a2c:	1007883a 	mov	r3,r2
 c014a30:	0023883a 	mov	r17,zero
 c014a34:	8820927a 	slli	r16,r17,9
 c014a38:	1805883a 	mov	r2,r3
 c014a3c:	8822977a 	slli	r17,r17,29
 c014a40:	8020d33a 	srli	r16,r16,12
 c014a44:	003ff406 	br	c014a18 <__alt_data_end+0xfc014a18>
 c014a48:	10c003cc 	andi	r3,r2,15
 c014a4c:	01000104 	movi	r4,4
 c014a50:	193ff626 	beq	r3,r4,c014a2c <__alt_data_end+0xfc014a2c>
 c014a54:	0023883a 	mov	r17,zero
 c014a58:	003fd506 	br	c0149b0 <__alt_data_end+0xfc0149b0>
 c014a5c:	0023883a 	mov	r17,zero
 c014a60:	003fe706 	br	c014a00 <__alt_data_end+0xfc014a00>
 c014a64:	00800434 	movhi	r2,16
 c014a68:	8c000234 	orhi	r16,r17,8
 c014a6c:	10bfffc4 	addi	r2,r2,-1
 c014a70:	3027883a 	mov	r19,r6
 c014a74:	80a0703a 	and	r16,r16,r2
 c014a78:	902d883a 	mov	r22,r18
 c014a7c:	003eac06 	br	c014530 <__alt_data_end+0xfc014530>

0c014a80 <__subdf3>:
 c014a80:	02000434 	movhi	r8,16
 c014a84:	423fffc4 	addi	r8,r8,-1
 c014a88:	defffb04 	addi	sp,sp,-20
 c014a8c:	2a14703a 	and	r10,r5,r8
 c014a90:	3812d53a 	srli	r9,r7,20
 c014a94:	3a10703a 	and	r8,r7,r8
 c014a98:	2006d77a 	srli	r3,r4,29
 c014a9c:	3004d77a 	srli	r2,r6,29
 c014aa0:	dc000015 	stw	r16,0(sp)
 c014aa4:	501490fa 	slli	r10,r10,3
 c014aa8:	2820d53a 	srli	r16,r5,20
 c014aac:	401090fa 	slli	r8,r8,3
 c014ab0:	dc800215 	stw	r18,8(sp)
 c014ab4:	dc400115 	stw	r17,4(sp)
 c014ab8:	dfc00415 	stw	ra,16(sp)
 c014abc:	202290fa 	slli	r17,r4,3
 c014ac0:	dcc00315 	stw	r19,12(sp)
 c014ac4:	4a41ffcc 	andi	r9,r9,2047
 c014ac8:	0101ffc4 	movi	r4,2047
 c014acc:	2824d7fa 	srli	r18,r5,31
 c014ad0:	8401ffcc 	andi	r16,r16,2047
 c014ad4:	50c6b03a 	or	r3,r10,r3
 c014ad8:	380ed7fa 	srli	r7,r7,31
 c014adc:	408ab03a 	or	r5,r8,r2
 c014ae0:	300c90fa 	slli	r6,r6,3
 c014ae4:	49009626 	beq	r9,r4,c014d40 <__subdf3+0x2c0>
 c014ae8:	39c0005c 	xori	r7,r7,1
 c014aec:	8245c83a 	sub	r2,r16,r9
 c014af0:	3c807426 	beq	r7,r18,c014cc4 <__subdf3+0x244>
 c014af4:	0080af0e 	bge	zero,r2,c014db4 <__subdf3+0x334>
 c014af8:	48002a1e 	bne	r9,zero,c014ba4 <__subdf3+0x124>
 c014afc:	2988b03a 	or	r4,r5,r6
 c014b00:	20009a1e 	bne	r4,zero,c014d6c <__subdf3+0x2ec>
 c014b04:	888001cc 	andi	r2,r17,7
 c014b08:	10000726 	beq	r2,zero,c014b28 <__subdf3+0xa8>
 c014b0c:	888003cc 	andi	r2,r17,15
 c014b10:	01000104 	movi	r4,4
 c014b14:	11000426 	beq	r2,r4,c014b28 <__subdf3+0xa8>
 c014b18:	890b883a 	add	r5,r17,r4
 c014b1c:	2c63803a 	cmpltu	r17,r5,r17
 c014b20:	1c47883a 	add	r3,r3,r17
 c014b24:	2823883a 	mov	r17,r5
 c014b28:	1880202c 	andhi	r2,r3,128
 c014b2c:	10005926 	beq	r2,zero,c014c94 <__subdf3+0x214>
 c014b30:	84000044 	addi	r16,r16,1
 c014b34:	0081ffc4 	movi	r2,2047
 c014b38:	8080be26 	beq	r16,r2,c014e34 <__subdf3+0x3b4>
 c014b3c:	017fe034 	movhi	r5,65408
 c014b40:	297fffc4 	addi	r5,r5,-1
 c014b44:	1946703a 	and	r3,r3,r5
 c014b48:	1804977a 	slli	r2,r3,29
 c014b4c:	1806927a 	slli	r3,r3,9
 c014b50:	8822d0fa 	srli	r17,r17,3
 c014b54:	8401ffcc 	andi	r16,r16,2047
 c014b58:	180ad33a 	srli	r5,r3,12
 c014b5c:	9100004c 	andi	r4,r18,1
 c014b60:	1444b03a 	or	r2,r2,r17
 c014b64:	80c1ffcc 	andi	r3,r16,2047
 c014b68:	1820953a 	slli	r16,r3,20
 c014b6c:	20c03fcc 	andi	r3,r4,255
 c014b70:	180897fa 	slli	r4,r3,31
 c014b74:	00c00434 	movhi	r3,16
 c014b78:	18ffffc4 	addi	r3,r3,-1
 c014b7c:	28c6703a 	and	r3,r5,r3
 c014b80:	1c06b03a 	or	r3,r3,r16
 c014b84:	1906b03a 	or	r3,r3,r4
 c014b88:	dfc00417 	ldw	ra,16(sp)
 c014b8c:	dcc00317 	ldw	r19,12(sp)
 c014b90:	dc800217 	ldw	r18,8(sp)
 c014b94:	dc400117 	ldw	r17,4(sp)
 c014b98:	dc000017 	ldw	r16,0(sp)
 c014b9c:	dec00504 	addi	sp,sp,20
 c014ba0:	f800283a 	ret
 c014ba4:	0101ffc4 	movi	r4,2047
 c014ba8:	813fd626 	beq	r16,r4,c014b04 <__alt_data_end+0xfc014b04>
 c014bac:	29402034 	orhi	r5,r5,128
 c014bb0:	01000e04 	movi	r4,56
 c014bb4:	2080a316 	blt	r4,r2,c014e44 <__subdf3+0x3c4>
 c014bb8:	010007c4 	movi	r4,31
 c014bbc:	2080c616 	blt	r4,r2,c014ed8 <__subdf3+0x458>
 c014bc0:	01000804 	movi	r4,32
 c014bc4:	2089c83a 	sub	r4,r4,r2
 c014bc8:	2910983a 	sll	r8,r5,r4
 c014bcc:	308ed83a 	srl	r7,r6,r2
 c014bd0:	3108983a 	sll	r4,r6,r4
 c014bd4:	2884d83a 	srl	r2,r5,r2
 c014bd8:	41ccb03a 	or	r6,r8,r7
 c014bdc:	2008c03a 	cmpne	r4,r4,zero
 c014be0:	310cb03a 	or	r6,r6,r4
 c014be4:	898dc83a 	sub	r6,r17,r6
 c014be8:	89a3803a 	cmpltu	r17,r17,r6
 c014bec:	1887c83a 	sub	r3,r3,r2
 c014bf0:	1c47c83a 	sub	r3,r3,r17
 c014bf4:	3023883a 	mov	r17,r6
 c014bf8:	1880202c 	andhi	r2,r3,128
 c014bfc:	10002326 	beq	r2,zero,c014c8c <__subdf3+0x20c>
 c014c00:	04c02034 	movhi	r19,128
 c014c04:	9cffffc4 	addi	r19,r19,-1
 c014c08:	1ce6703a 	and	r19,r3,r19
 c014c0c:	98007a26 	beq	r19,zero,c014df8 <__subdf3+0x378>
 c014c10:	9809883a 	mov	r4,r19
 c014c14:	c0155800 	call	c015580 <__clzsi2>
 c014c18:	113ffe04 	addi	r4,r2,-8
 c014c1c:	00c007c4 	movi	r3,31
 c014c20:	19007b16 	blt	r3,r4,c014e10 <__subdf3+0x390>
 c014c24:	00800804 	movi	r2,32
 c014c28:	1105c83a 	sub	r2,r2,r4
 c014c2c:	8884d83a 	srl	r2,r17,r2
 c014c30:	9906983a 	sll	r3,r19,r4
 c014c34:	8922983a 	sll	r17,r17,r4
 c014c38:	10c4b03a 	or	r2,r2,r3
 c014c3c:	24007816 	blt	r4,r16,c014e20 <__subdf3+0x3a0>
 c014c40:	2421c83a 	sub	r16,r4,r16
 c014c44:	80c00044 	addi	r3,r16,1
 c014c48:	010007c4 	movi	r4,31
 c014c4c:	20c09516 	blt	r4,r3,c014ea4 <__subdf3+0x424>
 c014c50:	01400804 	movi	r5,32
 c014c54:	28cbc83a 	sub	r5,r5,r3
 c014c58:	88c8d83a 	srl	r4,r17,r3
 c014c5c:	8962983a 	sll	r17,r17,r5
 c014c60:	114a983a 	sll	r5,r2,r5
 c014c64:	10c6d83a 	srl	r3,r2,r3
 c014c68:	8804c03a 	cmpne	r2,r17,zero
 c014c6c:	290ab03a 	or	r5,r5,r4
 c014c70:	28a2b03a 	or	r17,r5,r2
 c014c74:	0021883a 	mov	r16,zero
 c014c78:	003fa206 	br	c014b04 <__alt_data_end+0xfc014b04>
 c014c7c:	2090b03a 	or	r8,r4,r2
 c014c80:	40018e26 	beq	r8,zero,c0152bc <__subdf3+0x83c>
 c014c84:	1007883a 	mov	r3,r2
 c014c88:	2023883a 	mov	r17,r4
 c014c8c:	888001cc 	andi	r2,r17,7
 c014c90:	103f9e1e 	bne	r2,zero,c014b0c <__alt_data_end+0xfc014b0c>
 c014c94:	1804977a 	slli	r2,r3,29
 c014c98:	8822d0fa 	srli	r17,r17,3
 c014c9c:	1810d0fa 	srli	r8,r3,3
 c014ca0:	9100004c 	andi	r4,r18,1
 c014ca4:	1444b03a 	or	r2,r2,r17
 c014ca8:	00c1ffc4 	movi	r3,2047
 c014cac:	80c02826 	beq	r16,r3,c014d50 <__subdf3+0x2d0>
 c014cb0:	01400434 	movhi	r5,16
 c014cb4:	297fffc4 	addi	r5,r5,-1
 c014cb8:	80e0703a 	and	r16,r16,r3
 c014cbc:	414a703a 	and	r5,r8,r5
 c014cc0:	003fa806 	br	c014b64 <__alt_data_end+0xfc014b64>
 c014cc4:	0080630e 	bge	zero,r2,c014e54 <__subdf3+0x3d4>
 c014cc8:	48003026 	beq	r9,zero,c014d8c <__subdf3+0x30c>
 c014ccc:	0101ffc4 	movi	r4,2047
 c014cd0:	813f8c26 	beq	r16,r4,c014b04 <__alt_data_end+0xfc014b04>
 c014cd4:	29402034 	orhi	r5,r5,128
 c014cd8:	01000e04 	movi	r4,56
 c014cdc:	2080a90e 	bge	r4,r2,c014f84 <__subdf3+0x504>
 c014ce0:	298cb03a 	or	r6,r5,r6
 c014ce4:	3012c03a 	cmpne	r9,r6,zero
 c014ce8:	0005883a 	mov	r2,zero
 c014cec:	4c53883a 	add	r9,r9,r17
 c014cf0:	4c63803a 	cmpltu	r17,r9,r17
 c014cf4:	10c7883a 	add	r3,r2,r3
 c014cf8:	88c7883a 	add	r3,r17,r3
 c014cfc:	4823883a 	mov	r17,r9
 c014d00:	1880202c 	andhi	r2,r3,128
 c014d04:	1000d026 	beq	r2,zero,c015048 <__subdf3+0x5c8>
 c014d08:	84000044 	addi	r16,r16,1
 c014d0c:	0081ffc4 	movi	r2,2047
 c014d10:	8080fe26 	beq	r16,r2,c01510c <__subdf3+0x68c>
 c014d14:	00bfe034 	movhi	r2,65408
 c014d18:	10bfffc4 	addi	r2,r2,-1
 c014d1c:	1886703a 	and	r3,r3,r2
 c014d20:	880ad07a 	srli	r5,r17,1
 c014d24:	180497fa 	slli	r2,r3,31
 c014d28:	8900004c 	andi	r4,r17,1
 c014d2c:	2922b03a 	or	r17,r5,r4
 c014d30:	1806d07a 	srli	r3,r3,1
 c014d34:	1462b03a 	or	r17,r2,r17
 c014d38:	3825883a 	mov	r18,r7
 c014d3c:	003f7106 	br	c014b04 <__alt_data_end+0xfc014b04>
 c014d40:	2984b03a 	or	r2,r5,r6
 c014d44:	103f6826 	beq	r2,zero,c014ae8 <__alt_data_end+0xfc014ae8>
 c014d48:	39c03fcc 	andi	r7,r7,255
 c014d4c:	003f6706 	br	c014aec <__alt_data_end+0xfc014aec>
 c014d50:	4086b03a 	or	r3,r8,r2
 c014d54:	18015226 	beq	r3,zero,c0152a0 <__subdf3+0x820>
 c014d58:	00c00434 	movhi	r3,16
 c014d5c:	41400234 	orhi	r5,r8,8
 c014d60:	18ffffc4 	addi	r3,r3,-1
 c014d64:	28ca703a 	and	r5,r5,r3
 c014d68:	003f7e06 	br	c014b64 <__alt_data_end+0xfc014b64>
 c014d6c:	10bfffc4 	addi	r2,r2,-1
 c014d70:	1000491e 	bne	r2,zero,c014e98 <__subdf3+0x418>
 c014d74:	898fc83a 	sub	r7,r17,r6
 c014d78:	89e3803a 	cmpltu	r17,r17,r7
 c014d7c:	1947c83a 	sub	r3,r3,r5
 c014d80:	1c47c83a 	sub	r3,r3,r17
 c014d84:	3823883a 	mov	r17,r7
 c014d88:	003f9b06 	br	c014bf8 <__alt_data_end+0xfc014bf8>
 c014d8c:	2988b03a 	or	r4,r5,r6
 c014d90:	203f5c26 	beq	r4,zero,c014b04 <__alt_data_end+0xfc014b04>
 c014d94:	10bfffc4 	addi	r2,r2,-1
 c014d98:	1000931e 	bne	r2,zero,c014fe8 <__subdf3+0x568>
 c014d9c:	898d883a 	add	r6,r17,r6
 c014da0:	3463803a 	cmpltu	r17,r6,r17
 c014da4:	1947883a 	add	r3,r3,r5
 c014da8:	88c7883a 	add	r3,r17,r3
 c014dac:	3023883a 	mov	r17,r6
 c014db0:	003fd306 	br	c014d00 <__alt_data_end+0xfc014d00>
 c014db4:	1000541e 	bne	r2,zero,c014f08 <__subdf3+0x488>
 c014db8:	80800044 	addi	r2,r16,1
 c014dbc:	1081ffcc 	andi	r2,r2,2047
 c014dc0:	01000044 	movi	r4,1
 c014dc4:	2080a20e 	bge	r4,r2,c015050 <__subdf3+0x5d0>
 c014dc8:	8989c83a 	sub	r4,r17,r6
 c014dcc:	8905803a 	cmpltu	r2,r17,r4
 c014dd0:	1967c83a 	sub	r19,r3,r5
 c014dd4:	98a7c83a 	sub	r19,r19,r2
 c014dd8:	9880202c 	andhi	r2,r19,128
 c014ddc:	10006326 	beq	r2,zero,c014f6c <__subdf3+0x4ec>
 c014de0:	3463c83a 	sub	r17,r6,r17
 c014de4:	28c7c83a 	sub	r3,r5,r3
 c014de8:	344d803a 	cmpltu	r6,r6,r17
 c014dec:	19a7c83a 	sub	r19,r3,r6
 c014df0:	3825883a 	mov	r18,r7
 c014df4:	983f861e 	bne	r19,zero,c014c10 <__alt_data_end+0xfc014c10>
 c014df8:	8809883a 	mov	r4,r17
 c014dfc:	c0155800 	call	c015580 <__clzsi2>
 c014e00:	10800804 	addi	r2,r2,32
 c014e04:	113ffe04 	addi	r4,r2,-8
 c014e08:	00c007c4 	movi	r3,31
 c014e0c:	193f850e 	bge	r3,r4,c014c24 <__alt_data_end+0xfc014c24>
 c014e10:	10bff604 	addi	r2,r2,-40
 c014e14:	8884983a 	sll	r2,r17,r2
 c014e18:	0023883a 	mov	r17,zero
 c014e1c:	243f880e 	bge	r4,r16,c014c40 <__alt_data_end+0xfc014c40>
 c014e20:	00ffe034 	movhi	r3,65408
 c014e24:	18ffffc4 	addi	r3,r3,-1
 c014e28:	8121c83a 	sub	r16,r16,r4
 c014e2c:	10c6703a 	and	r3,r2,r3
 c014e30:	003f3406 	br	c014b04 <__alt_data_end+0xfc014b04>
 c014e34:	9100004c 	andi	r4,r18,1
 c014e38:	000b883a 	mov	r5,zero
 c014e3c:	0005883a 	mov	r2,zero
 c014e40:	003f4806 	br	c014b64 <__alt_data_end+0xfc014b64>
 c014e44:	298cb03a 	or	r6,r5,r6
 c014e48:	300cc03a 	cmpne	r6,r6,zero
 c014e4c:	0005883a 	mov	r2,zero
 c014e50:	003f6406 	br	c014be4 <__alt_data_end+0xfc014be4>
 c014e54:	10009a1e 	bne	r2,zero,c0150c0 <__subdf3+0x640>
 c014e58:	82400044 	addi	r9,r16,1
 c014e5c:	4881ffcc 	andi	r2,r9,2047
 c014e60:	02800044 	movi	r10,1
 c014e64:	5080670e 	bge	r10,r2,c015004 <__subdf3+0x584>
 c014e68:	0081ffc4 	movi	r2,2047
 c014e6c:	4880af26 	beq	r9,r2,c01512c <__subdf3+0x6ac>
 c014e70:	898d883a 	add	r6,r17,r6
 c014e74:	1945883a 	add	r2,r3,r5
 c014e78:	3447803a 	cmpltu	r3,r6,r17
 c014e7c:	1887883a 	add	r3,r3,r2
 c014e80:	182297fa 	slli	r17,r3,31
 c014e84:	300cd07a 	srli	r6,r6,1
 c014e88:	1806d07a 	srli	r3,r3,1
 c014e8c:	4821883a 	mov	r16,r9
 c014e90:	89a2b03a 	or	r17,r17,r6
 c014e94:	003f1b06 	br	c014b04 <__alt_data_end+0xfc014b04>
 c014e98:	0101ffc4 	movi	r4,2047
 c014e9c:	813f441e 	bne	r16,r4,c014bb0 <__alt_data_end+0xfc014bb0>
 c014ea0:	003f1806 	br	c014b04 <__alt_data_end+0xfc014b04>
 c014ea4:	843ff844 	addi	r16,r16,-31
 c014ea8:	01400804 	movi	r5,32
 c014eac:	1408d83a 	srl	r4,r2,r16
 c014eb0:	19405026 	beq	r3,r5,c014ff4 <__subdf3+0x574>
 c014eb4:	01401004 	movi	r5,64
 c014eb8:	28c7c83a 	sub	r3,r5,r3
 c014ebc:	10c4983a 	sll	r2,r2,r3
 c014ec0:	88a2b03a 	or	r17,r17,r2
 c014ec4:	8822c03a 	cmpne	r17,r17,zero
 c014ec8:	2462b03a 	or	r17,r4,r17
 c014ecc:	0007883a 	mov	r3,zero
 c014ed0:	0021883a 	mov	r16,zero
 c014ed4:	003f6d06 	br	c014c8c <__alt_data_end+0xfc014c8c>
 c014ed8:	11fff804 	addi	r7,r2,-32
 c014edc:	01000804 	movi	r4,32
 c014ee0:	29ced83a 	srl	r7,r5,r7
 c014ee4:	11004526 	beq	r2,r4,c014ffc <__subdf3+0x57c>
 c014ee8:	01001004 	movi	r4,64
 c014eec:	2089c83a 	sub	r4,r4,r2
 c014ef0:	2904983a 	sll	r2,r5,r4
 c014ef4:	118cb03a 	or	r6,r2,r6
 c014ef8:	300cc03a 	cmpne	r6,r6,zero
 c014efc:	398cb03a 	or	r6,r7,r6
 c014f00:	0005883a 	mov	r2,zero
 c014f04:	003f3706 	br	c014be4 <__alt_data_end+0xfc014be4>
 c014f08:	80002a26 	beq	r16,zero,c014fb4 <__subdf3+0x534>
 c014f0c:	0101ffc4 	movi	r4,2047
 c014f10:	49006626 	beq	r9,r4,c0150ac <__subdf3+0x62c>
 c014f14:	0085c83a 	sub	r2,zero,r2
 c014f18:	18c02034 	orhi	r3,r3,128
 c014f1c:	01000e04 	movi	r4,56
 c014f20:	20807e16 	blt	r4,r2,c01511c <__subdf3+0x69c>
 c014f24:	010007c4 	movi	r4,31
 c014f28:	2080e716 	blt	r4,r2,c0152c8 <__subdf3+0x848>
 c014f2c:	01000804 	movi	r4,32
 c014f30:	2089c83a 	sub	r4,r4,r2
 c014f34:	1914983a 	sll	r10,r3,r4
 c014f38:	8890d83a 	srl	r8,r17,r2
 c014f3c:	8908983a 	sll	r4,r17,r4
 c014f40:	1884d83a 	srl	r2,r3,r2
 c014f44:	5222b03a 	or	r17,r10,r8
 c014f48:	2006c03a 	cmpne	r3,r4,zero
 c014f4c:	88e2b03a 	or	r17,r17,r3
 c014f50:	3463c83a 	sub	r17,r6,r17
 c014f54:	2885c83a 	sub	r2,r5,r2
 c014f58:	344d803a 	cmpltu	r6,r6,r17
 c014f5c:	1187c83a 	sub	r3,r2,r6
 c014f60:	4821883a 	mov	r16,r9
 c014f64:	3825883a 	mov	r18,r7
 c014f68:	003f2306 	br	c014bf8 <__alt_data_end+0xfc014bf8>
 c014f6c:	24d0b03a 	or	r8,r4,r19
 c014f70:	40001b1e 	bne	r8,zero,c014fe0 <__subdf3+0x560>
 c014f74:	0005883a 	mov	r2,zero
 c014f78:	0009883a 	mov	r4,zero
 c014f7c:	0021883a 	mov	r16,zero
 c014f80:	003f4906 	br	c014ca8 <__alt_data_end+0xfc014ca8>
 c014f84:	010007c4 	movi	r4,31
 c014f88:	20803a16 	blt	r4,r2,c015074 <__subdf3+0x5f4>
 c014f8c:	01000804 	movi	r4,32
 c014f90:	2089c83a 	sub	r4,r4,r2
 c014f94:	2912983a 	sll	r9,r5,r4
 c014f98:	3090d83a 	srl	r8,r6,r2
 c014f9c:	3108983a 	sll	r4,r6,r4
 c014fa0:	2884d83a 	srl	r2,r5,r2
 c014fa4:	4a12b03a 	or	r9,r9,r8
 c014fa8:	2008c03a 	cmpne	r4,r4,zero
 c014fac:	4912b03a 	or	r9,r9,r4
 c014fb0:	003f4e06 	br	c014cec <__alt_data_end+0xfc014cec>
 c014fb4:	1c48b03a 	or	r4,r3,r17
 c014fb8:	20003c26 	beq	r4,zero,c0150ac <__subdf3+0x62c>
 c014fbc:	0084303a 	nor	r2,zero,r2
 c014fc0:	1000381e 	bne	r2,zero,c0150a4 <__subdf3+0x624>
 c014fc4:	3463c83a 	sub	r17,r6,r17
 c014fc8:	28c5c83a 	sub	r2,r5,r3
 c014fcc:	344d803a 	cmpltu	r6,r6,r17
 c014fd0:	1187c83a 	sub	r3,r2,r6
 c014fd4:	4821883a 	mov	r16,r9
 c014fd8:	3825883a 	mov	r18,r7
 c014fdc:	003f0606 	br	c014bf8 <__alt_data_end+0xfc014bf8>
 c014fe0:	2023883a 	mov	r17,r4
 c014fe4:	003f0906 	br	c014c0c <__alt_data_end+0xfc014c0c>
 c014fe8:	0101ffc4 	movi	r4,2047
 c014fec:	813f3a1e 	bne	r16,r4,c014cd8 <__alt_data_end+0xfc014cd8>
 c014ff0:	003ec406 	br	c014b04 <__alt_data_end+0xfc014b04>
 c014ff4:	0005883a 	mov	r2,zero
 c014ff8:	003fb106 	br	c014ec0 <__alt_data_end+0xfc014ec0>
 c014ffc:	0005883a 	mov	r2,zero
 c015000:	003fbc06 	br	c014ef4 <__alt_data_end+0xfc014ef4>
 c015004:	1c44b03a 	or	r2,r3,r17
 c015008:	80008e1e 	bne	r16,zero,c015244 <__subdf3+0x7c4>
 c01500c:	1000c826 	beq	r2,zero,c015330 <__subdf3+0x8b0>
 c015010:	2984b03a 	or	r2,r5,r6
 c015014:	103ebb26 	beq	r2,zero,c014b04 <__alt_data_end+0xfc014b04>
 c015018:	8989883a 	add	r4,r17,r6
 c01501c:	1945883a 	add	r2,r3,r5
 c015020:	2447803a 	cmpltu	r3,r4,r17
 c015024:	1887883a 	add	r3,r3,r2
 c015028:	1880202c 	andhi	r2,r3,128
 c01502c:	2023883a 	mov	r17,r4
 c015030:	103f1626 	beq	r2,zero,c014c8c <__alt_data_end+0xfc014c8c>
 c015034:	00bfe034 	movhi	r2,65408
 c015038:	10bfffc4 	addi	r2,r2,-1
 c01503c:	5021883a 	mov	r16,r10
 c015040:	1886703a 	and	r3,r3,r2
 c015044:	003eaf06 	br	c014b04 <__alt_data_end+0xfc014b04>
 c015048:	3825883a 	mov	r18,r7
 c01504c:	003f0f06 	br	c014c8c <__alt_data_end+0xfc014c8c>
 c015050:	1c44b03a 	or	r2,r3,r17
 c015054:	8000251e 	bne	r16,zero,c0150ec <__subdf3+0x66c>
 c015058:	1000661e 	bne	r2,zero,c0151f4 <__subdf3+0x774>
 c01505c:	2990b03a 	or	r8,r5,r6
 c015060:	40009626 	beq	r8,zero,c0152bc <__subdf3+0x83c>
 c015064:	2807883a 	mov	r3,r5
 c015068:	3023883a 	mov	r17,r6
 c01506c:	3825883a 	mov	r18,r7
 c015070:	003ea406 	br	c014b04 <__alt_data_end+0xfc014b04>
 c015074:	127ff804 	addi	r9,r2,-32
 c015078:	01000804 	movi	r4,32
 c01507c:	2a52d83a 	srl	r9,r5,r9
 c015080:	11008c26 	beq	r2,r4,c0152b4 <__subdf3+0x834>
 c015084:	01001004 	movi	r4,64
 c015088:	2085c83a 	sub	r2,r4,r2
 c01508c:	2884983a 	sll	r2,r5,r2
 c015090:	118cb03a 	or	r6,r2,r6
 c015094:	300cc03a 	cmpne	r6,r6,zero
 c015098:	4992b03a 	or	r9,r9,r6
 c01509c:	0005883a 	mov	r2,zero
 c0150a0:	003f1206 	br	c014cec <__alt_data_end+0xfc014cec>
 c0150a4:	0101ffc4 	movi	r4,2047
 c0150a8:	493f9c1e 	bne	r9,r4,c014f1c <__alt_data_end+0xfc014f1c>
 c0150ac:	2807883a 	mov	r3,r5
 c0150b0:	3023883a 	mov	r17,r6
 c0150b4:	4821883a 	mov	r16,r9
 c0150b8:	3825883a 	mov	r18,r7
 c0150bc:	003e9106 	br	c014b04 <__alt_data_end+0xfc014b04>
 c0150c0:	80001f1e 	bne	r16,zero,c015140 <__subdf3+0x6c0>
 c0150c4:	1c48b03a 	or	r4,r3,r17
 c0150c8:	20005a26 	beq	r4,zero,c015234 <__subdf3+0x7b4>
 c0150cc:	0084303a 	nor	r2,zero,r2
 c0150d0:	1000561e 	bne	r2,zero,c01522c <__subdf3+0x7ac>
 c0150d4:	89a3883a 	add	r17,r17,r6
 c0150d8:	1945883a 	add	r2,r3,r5
 c0150dc:	898d803a 	cmpltu	r6,r17,r6
 c0150e0:	3087883a 	add	r3,r6,r2
 c0150e4:	4821883a 	mov	r16,r9
 c0150e8:	003f0506 	br	c014d00 <__alt_data_end+0xfc014d00>
 c0150ec:	10002b1e 	bne	r2,zero,c01519c <__subdf3+0x71c>
 c0150f0:	2984b03a 	or	r2,r5,r6
 c0150f4:	10008026 	beq	r2,zero,c0152f8 <__subdf3+0x878>
 c0150f8:	2807883a 	mov	r3,r5
 c0150fc:	3023883a 	mov	r17,r6
 c015100:	3825883a 	mov	r18,r7
 c015104:	0401ffc4 	movi	r16,2047
 c015108:	003e7e06 	br	c014b04 <__alt_data_end+0xfc014b04>
 c01510c:	3809883a 	mov	r4,r7
 c015110:	0011883a 	mov	r8,zero
 c015114:	0005883a 	mov	r2,zero
 c015118:	003ee306 	br	c014ca8 <__alt_data_end+0xfc014ca8>
 c01511c:	1c62b03a 	or	r17,r3,r17
 c015120:	8822c03a 	cmpne	r17,r17,zero
 c015124:	0005883a 	mov	r2,zero
 c015128:	003f8906 	br	c014f50 <__alt_data_end+0xfc014f50>
 c01512c:	3809883a 	mov	r4,r7
 c015130:	4821883a 	mov	r16,r9
 c015134:	0011883a 	mov	r8,zero
 c015138:	0005883a 	mov	r2,zero
 c01513c:	003eda06 	br	c014ca8 <__alt_data_end+0xfc014ca8>
 c015140:	0101ffc4 	movi	r4,2047
 c015144:	49003b26 	beq	r9,r4,c015234 <__subdf3+0x7b4>
 c015148:	0085c83a 	sub	r2,zero,r2
 c01514c:	18c02034 	orhi	r3,r3,128
 c015150:	01000e04 	movi	r4,56
 c015154:	20806e16 	blt	r4,r2,c015310 <__subdf3+0x890>
 c015158:	010007c4 	movi	r4,31
 c01515c:	20807716 	blt	r4,r2,c01533c <__subdf3+0x8bc>
 c015160:	01000804 	movi	r4,32
 c015164:	2089c83a 	sub	r4,r4,r2
 c015168:	1914983a 	sll	r10,r3,r4
 c01516c:	8890d83a 	srl	r8,r17,r2
 c015170:	8908983a 	sll	r4,r17,r4
 c015174:	1884d83a 	srl	r2,r3,r2
 c015178:	5222b03a 	or	r17,r10,r8
 c01517c:	2006c03a 	cmpne	r3,r4,zero
 c015180:	88e2b03a 	or	r17,r17,r3
 c015184:	89a3883a 	add	r17,r17,r6
 c015188:	1145883a 	add	r2,r2,r5
 c01518c:	898d803a 	cmpltu	r6,r17,r6
 c015190:	3087883a 	add	r3,r6,r2
 c015194:	4821883a 	mov	r16,r9
 c015198:	003ed906 	br	c014d00 <__alt_data_end+0xfc014d00>
 c01519c:	2984b03a 	or	r2,r5,r6
 c0151a0:	10004226 	beq	r2,zero,c0152ac <__subdf3+0x82c>
 c0151a4:	1808d0fa 	srli	r4,r3,3
 c0151a8:	8822d0fa 	srli	r17,r17,3
 c0151ac:	1806977a 	slli	r3,r3,29
 c0151b0:	2080022c 	andhi	r2,r4,8
 c0151b4:	1c62b03a 	or	r17,r3,r17
 c0151b8:	10000826 	beq	r2,zero,c0151dc <__subdf3+0x75c>
 c0151bc:	2812d0fa 	srli	r9,r5,3
 c0151c0:	4880022c 	andhi	r2,r9,8
 c0151c4:	1000051e 	bne	r2,zero,c0151dc <__subdf3+0x75c>
 c0151c8:	300cd0fa 	srli	r6,r6,3
 c0151cc:	2804977a 	slli	r2,r5,29
 c0151d0:	4809883a 	mov	r4,r9
 c0151d4:	3825883a 	mov	r18,r7
 c0151d8:	11a2b03a 	or	r17,r2,r6
 c0151dc:	8806d77a 	srli	r3,r17,29
 c0151e0:	200890fa 	slli	r4,r4,3
 c0151e4:	882290fa 	slli	r17,r17,3
 c0151e8:	0401ffc4 	movi	r16,2047
 c0151ec:	1906b03a 	or	r3,r3,r4
 c0151f0:	003e4406 	br	c014b04 <__alt_data_end+0xfc014b04>
 c0151f4:	2984b03a 	or	r2,r5,r6
 c0151f8:	103e4226 	beq	r2,zero,c014b04 <__alt_data_end+0xfc014b04>
 c0151fc:	8989c83a 	sub	r4,r17,r6
 c015200:	8911803a 	cmpltu	r8,r17,r4
 c015204:	1945c83a 	sub	r2,r3,r5
 c015208:	1205c83a 	sub	r2,r2,r8
 c01520c:	1200202c 	andhi	r8,r2,128
 c015210:	403e9a26 	beq	r8,zero,c014c7c <__alt_data_end+0xfc014c7c>
 c015214:	3463c83a 	sub	r17,r6,r17
 c015218:	28c5c83a 	sub	r2,r5,r3
 c01521c:	344d803a 	cmpltu	r6,r6,r17
 c015220:	1187c83a 	sub	r3,r2,r6
 c015224:	3825883a 	mov	r18,r7
 c015228:	003e3606 	br	c014b04 <__alt_data_end+0xfc014b04>
 c01522c:	0101ffc4 	movi	r4,2047
 c015230:	493fc71e 	bne	r9,r4,c015150 <__alt_data_end+0xfc015150>
 c015234:	2807883a 	mov	r3,r5
 c015238:	3023883a 	mov	r17,r6
 c01523c:	4821883a 	mov	r16,r9
 c015240:	003e3006 	br	c014b04 <__alt_data_end+0xfc014b04>
 c015244:	10003626 	beq	r2,zero,c015320 <__subdf3+0x8a0>
 c015248:	2984b03a 	or	r2,r5,r6
 c01524c:	10001726 	beq	r2,zero,c0152ac <__subdf3+0x82c>
 c015250:	1808d0fa 	srli	r4,r3,3
 c015254:	8822d0fa 	srli	r17,r17,3
 c015258:	1806977a 	slli	r3,r3,29
 c01525c:	2080022c 	andhi	r2,r4,8
 c015260:	1c62b03a 	or	r17,r3,r17
 c015264:	10000726 	beq	r2,zero,c015284 <__subdf3+0x804>
 c015268:	2812d0fa 	srli	r9,r5,3
 c01526c:	4880022c 	andhi	r2,r9,8
 c015270:	1000041e 	bne	r2,zero,c015284 <__subdf3+0x804>
 c015274:	300cd0fa 	srli	r6,r6,3
 c015278:	2804977a 	slli	r2,r5,29
 c01527c:	4809883a 	mov	r4,r9
 c015280:	11a2b03a 	or	r17,r2,r6
 c015284:	8806d77a 	srli	r3,r17,29
 c015288:	200890fa 	slli	r4,r4,3
 c01528c:	882290fa 	slli	r17,r17,3
 c015290:	3825883a 	mov	r18,r7
 c015294:	1906b03a 	or	r3,r3,r4
 c015298:	0401ffc4 	movi	r16,2047
 c01529c:	003e1906 	br	c014b04 <__alt_data_end+0xfc014b04>
 c0152a0:	000b883a 	mov	r5,zero
 c0152a4:	0005883a 	mov	r2,zero
 c0152a8:	003e2e06 	br	c014b64 <__alt_data_end+0xfc014b64>
 c0152ac:	0401ffc4 	movi	r16,2047
 c0152b0:	003e1406 	br	c014b04 <__alt_data_end+0xfc014b04>
 c0152b4:	0005883a 	mov	r2,zero
 c0152b8:	003f7506 	br	c015090 <__alt_data_end+0xfc015090>
 c0152bc:	0005883a 	mov	r2,zero
 c0152c0:	0009883a 	mov	r4,zero
 c0152c4:	003e7806 	br	c014ca8 <__alt_data_end+0xfc014ca8>
 c0152c8:	123ff804 	addi	r8,r2,-32
 c0152cc:	01000804 	movi	r4,32
 c0152d0:	1a10d83a 	srl	r8,r3,r8
 c0152d4:	11002526 	beq	r2,r4,c01536c <__subdf3+0x8ec>
 c0152d8:	01001004 	movi	r4,64
 c0152dc:	2085c83a 	sub	r2,r4,r2
 c0152e0:	1884983a 	sll	r2,r3,r2
 c0152e4:	1444b03a 	or	r2,r2,r17
 c0152e8:	1004c03a 	cmpne	r2,r2,zero
 c0152ec:	40a2b03a 	or	r17,r8,r2
 c0152f0:	0005883a 	mov	r2,zero
 c0152f4:	003f1606 	br	c014f50 <__alt_data_end+0xfc014f50>
 c0152f8:	02000434 	movhi	r8,16
 c0152fc:	0009883a 	mov	r4,zero
 c015300:	423fffc4 	addi	r8,r8,-1
 c015304:	00bfffc4 	movi	r2,-1
 c015308:	0401ffc4 	movi	r16,2047
 c01530c:	003e6606 	br	c014ca8 <__alt_data_end+0xfc014ca8>
 c015310:	1c62b03a 	or	r17,r3,r17
 c015314:	8822c03a 	cmpne	r17,r17,zero
 c015318:	0005883a 	mov	r2,zero
 c01531c:	003f9906 	br	c015184 <__alt_data_end+0xfc015184>
 c015320:	2807883a 	mov	r3,r5
 c015324:	3023883a 	mov	r17,r6
 c015328:	0401ffc4 	movi	r16,2047
 c01532c:	003df506 	br	c014b04 <__alt_data_end+0xfc014b04>
 c015330:	2807883a 	mov	r3,r5
 c015334:	3023883a 	mov	r17,r6
 c015338:	003df206 	br	c014b04 <__alt_data_end+0xfc014b04>
 c01533c:	123ff804 	addi	r8,r2,-32
 c015340:	01000804 	movi	r4,32
 c015344:	1a10d83a 	srl	r8,r3,r8
 c015348:	11000a26 	beq	r2,r4,c015374 <__subdf3+0x8f4>
 c01534c:	01001004 	movi	r4,64
 c015350:	2085c83a 	sub	r2,r4,r2
 c015354:	1884983a 	sll	r2,r3,r2
 c015358:	1444b03a 	or	r2,r2,r17
 c01535c:	1004c03a 	cmpne	r2,r2,zero
 c015360:	40a2b03a 	or	r17,r8,r2
 c015364:	0005883a 	mov	r2,zero
 c015368:	003f8606 	br	c015184 <__alt_data_end+0xfc015184>
 c01536c:	0005883a 	mov	r2,zero
 c015370:	003fdc06 	br	c0152e4 <__alt_data_end+0xfc0152e4>
 c015374:	0005883a 	mov	r2,zero
 c015378:	003ff706 	br	c015358 <__alt_data_end+0xfc015358>

0c01537c <__fixdfsi>:
 c01537c:	280cd53a 	srli	r6,r5,20
 c015380:	00c00434 	movhi	r3,16
 c015384:	18ffffc4 	addi	r3,r3,-1
 c015388:	3181ffcc 	andi	r6,r6,2047
 c01538c:	01c0ff84 	movi	r7,1022
 c015390:	28c6703a 	and	r3,r5,r3
 c015394:	280ad7fa 	srli	r5,r5,31
 c015398:	3980120e 	bge	r7,r6,c0153e4 <__fixdfsi+0x68>
 c01539c:	00810744 	movi	r2,1053
 c0153a0:	11800c16 	blt	r2,r6,c0153d4 <__fixdfsi+0x58>
 c0153a4:	00810cc4 	movi	r2,1075
 c0153a8:	1185c83a 	sub	r2,r2,r6
 c0153ac:	01c007c4 	movi	r7,31
 c0153b0:	18c00434 	orhi	r3,r3,16
 c0153b4:	38800d16 	blt	r7,r2,c0153ec <__fixdfsi+0x70>
 c0153b8:	31befb44 	addi	r6,r6,-1043
 c0153bc:	2084d83a 	srl	r2,r4,r2
 c0153c0:	1986983a 	sll	r3,r3,r6
 c0153c4:	1884b03a 	or	r2,r3,r2
 c0153c8:	28000726 	beq	r5,zero,c0153e8 <__fixdfsi+0x6c>
 c0153cc:	0085c83a 	sub	r2,zero,r2
 c0153d0:	f800283a 	ret
 c0153d4:	00a00034 	movhi	r2,32768
 c0153d8:	10bfffc4 	addi	r2,r2,-1
 c0153dc:	2885883a 	add	r2,r5,r2
 c0153e0:	f800283a 	ret
 c0153e4:	0005883a 	mov	r2,zero
 c0153e8:	f800283a 	ret
 c0153ec:	008104c4 	movi	r2,1043
 c0153f0:	1185c83a 	sub	r2,r2,r6
 c0153f4:	1884d83a 	srl	r2,r3,r2
 c0153f8:	003ff306 	br	c0153c8 <__alt_data_end+0xfc0153c8>

0c0153fc <__floatsidf>:
 c0153fc:	defffd04 	addi	sp,sp,-12
 c015400:	dfc00215 	stw	ra,8(sp)
 c015404:	dc400115 	stw	r17,4(sp)
 c015408:	dc000015 	stw	r16,0(sp)
 c01540c:	20002b26 	beq	r4,zero,c0154bc <__floatsidf+0xc0>
 c015410:	2023883a 	mov	r17,r4
 c015414:	2020d7fa 	srli	r16,r4,31
 c015418:	20002d16 	blt	r4,zero,c0154d0 <__floatsidf+0xd4>
 c01541c:	8809883a 	mov	r4,r17
 c015420:	c0155800 	call	c015580 <__clzsi2>
 c015424:	01410784 	movi	r5,1054
 c015428:	288bc83a 	sub	r5,r5,r2
 c01542c:	01010cc4 	movi	r4,1075
 c015430:	2149c83a 	sub	r4,r4,r5
 c015434:	00c007c4 	movi	r3,31
 c015438:	1900160e 	bge	r3,r4,c015494 <__floatsidf+0x98>
 c01543c:	00c104c4 	movi	r3,1043
 c015440:	1947c83a 	sub	r3,r3,r5
 c015444:	88c6983a 	sll	r3,r17,r3
 c015448:	00800434 	movhi	r2,16
 c01544c:	10bfffc4 	addi	r2,r2,-1
 c015450:	1886703a 	and	r3,r3,r2
 c015454:	2941ffcc 	andi	r5,r5,2047
 c015458:	800d883a 	mov	r6,r16
 c01545c:	0005883a 	mov	r2,zero
 c015460:	280a953a 	slli	r5,r5,20
 c015464:	31803fcc 	andi	r6,r6,255
 c015468:	01000434 	movhi	r4,16
 c01546c:	300c97fa 	slli	r6,r6,31
 c015470:	213fffc4 	addi	r4,r4,-1
 c015474:	1906703a 	and	r3,r3,r4
 c015478:	1946b03a 	or	r3,r3,r5
 c01547c:	1986b03a 	or	r3,r3,r6
 c015480:	dfc00217 	ldw	ra,8(sp)
 c015484:	dc400117 	ldw	r17,4(sp)
 c015488:	dc000017 	ldw	r16,0(sp)
 c01548c:	dec00304 	addi	sp,sp,12
 c015490:	f800283a 	ret
 c015494:	00c002c4 	movi	r3,11
 c015498:	1887c83a 	sub	r3,r3,r2
 c01549c:	88c6d83a 	srl	r3,r17,r3
 c0154a0:	8904983a 	sll	r2,r17,r4
 c0154a4:	01000434 	movhi	r4,16
 c0154a8:	213fffc4 	addi	r4,r4,-1
 c0154ac:	2941ffcc 	andi	r5,r5,2047
 c0154b0:	1906703a 	and	r3,r3,r4
 c0154b4:	800d883a 	mov	r6,r16
 c0154b8:	003fe906 	br	c015460 <__alt_data_end+0xfc015460>
 c0154bc:	000d883a 	mov	r6,zero
 c0154c0:	000b883a 	mov	r5,zero
 c0154c4:	0007883a 	mov	r3,zero
 c0154c8:	0005883a 	mov	r2,zero
 c0154cc:	003fe406 	br	c015460 <__alt_data_end+0xfc015460>
 c0154d0:	0123c83a 	sub	r17,zero,r4
 c0154d4:	003fd106 	br	c01541c <__alt_data_end+0xfc01541c>

0c0154d8 <__floatunsidf>:
 c0154d8:	defffe04 	addi	sp,sp,-8
 c0154dc:	dc000015 	stw	r16,0(sp)
 c0154e0:	dfc00115 	stw	ra,4(sp)
 c0154e4:	2021883a 	mov	r16,r4
 c0154e8:	20002226 	beq	r4,zero,c015574 <__floatunsidf+0x9c>
 c0154ec:	c0155800 	call	c015580 <__clzsi2>
 c0154f0:	01010784 	movi	r4,1054
 c0154f4:	2089c83a 	sub	r4,r4,r2
 c0154f8:	01810cc4 	movi	r6,1075
 c0154fc:	310dc83a 	sub	r6,r6,r4
 c015500:	00c007c4 	movi	r3,31
 c015504:	1980120e 	bge	r3,r6,c015550 <__floatunsidf+0x78>
 c015508:	00c104c4 	movi	r3,1043
 c01550c:	1907c83a 	sub	r3,r3,r4
 c015510:	80ca983a 	sll	r5,r16,r3
 c015514:	00800434 	movhi	r2,16
 c015518:	10bfffc4 	addi	r2,r2,-1
 c01551c:	2101ffcc 	andi	r4,r4,2047
 c015520:	0021883a 	mov	r16,zero
 c015524:	288a703a 	and	r5,r5,r2
 c015528:	2008953a 	slli	r4,r4,20
 c01552c:	00c00434 	movhi	r3,16
 c015530:	18ffffc4 	addi	r3,r3,-1
 c015534:	28c6703a 	and	r3,r5,r3
 c015538:	8005883a 	mov	r2,r16
 c01553c:	1906b03a 	or	r3,r3,r4
 c015540:	dfc00117 	ldw	ra,4(sp)
 c015544:	dc000017 	ldw	r16,0(sp)
 c015548:	dec00204 	addi	sp,sp,8
 c01554c:	f800283a 	ret
 c015550:	00c002c4 	movi	r3,11
 c015554:	188bc83a 	sub	r5,r3,r2
 c015558:	814ad83a 	srl	r5,r16,r5
 c01555c:	00c00434 	movhi	r3,16
 c015560:	18ffffc4 	addi	r3,r3,-1
 c015564:	81a0983a 	sll	r16,r16,r6
 c015568:	2101ffcc 	andi	r4,r4,2047
 c01556c:	28ca703a 	and	r5,r5,r3
 c015570:	003fed06 	br	c015528 <__alt_data_end+0xfc015528>
 c015574:	0009883a 	mov	r4,zero
 c015578:	000b883a 	mov	r5,zero
 c01557c:	003fea06 	br	c015528 <__alt_data_end+0xfc015528>

0c015580 <__clzsi2>:
 c015580:	00bfffd4 	movui	r2,65535
 c015584:	11000536 	bltu	r2,r4,c01559c <__clzsi2+0x1c>
 c015588:	00803fc4 	movi	r2,255
 c01558c:	11000f36 	bltu	r2,r4,c0155cc <__clzsi2+0x4c>
 c015590:	00800804 	movi	r2,32
 c015594:	0007883a 	mov	r3,zero
 c015598:	00000506 	br	c0155b0 <__clzsi2+0x30>
 c01559c:	00804034 	movhi	r2,256
 c0155a0:	10bfffc4 	addi	r2,r2,-1
 c0155a4:	11000c2e 	bgeu	r2,r4,c0155d8 <__clzsi2+0x58>
 c0155a8:	00800204 	movi	r2,8
 c0155ac:	00c00604 	movi	r3,24
 c0155b0:	20c8d83a 	srl	r4,r4,r3
 c0155b4:	00c300b4 	movhi	r3,3074
 c0155b8:	18e26104 	addi	r3,r3,-30332
 c0155bc:	1909883a 	add	r4,r3,r4
 c0155c0:	20c00003 	ldbu	r3,0(r4)
 c0155c4:	10c5c83a 	sub	r2,r2,r3
 c0155c8:	f800283a 	ret
 c0155cc:	00800604 	movi	r2,24
 c0155d0:	00c00204 	movi	r3,8
 c0155d4:	003ff606 	br	c0155b0 <__alt_data_end+0xfc0155b0>
 c0155d8:	00800404 	movi	r2,16
 c0155dc:	1007883a 	mov	r3,r2
 c0155e0:	003ff306 	br	c0155b0 <__alt_data_end+0xfc0155b0>

0c0155e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c0155e4:	defffe04 	addi	sp,sp,-8
 c0155e8:	dfc00115 	stw	ra,4(sp)
 c0155ec:	df000015 	stw	fp,0(sp)
 c0155f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c0155f4:	d0a01317 	ldw	r2,-32692(gp)
 c0155f8:	10000326 	beq	r2,zero,c015608 <alt_get_errno+0x24>
 c0155fc:	d0a01317 	ldw	r2,-32692(gp)
 c015600:	103ee83a 	callr	r2
 c015604:	00000106 	br	c01560c <alt_get_errno+0x28>
 c015608:	d0a7ab04 	addi	r2,gp,-24916
}
 c01560c:	e037883a 	mov	sp,fp
 c015610:	dfc00117 	ldw	ra,4(sp)
 c015614:	df000017 	ldw	fp,0(sp)
 c015618:	dec00204 	addi	sp,sp,8
 c01561c:	f800283a 	ret

0c015620 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 c015620:	defffb04 	addi	sp,sp,-20
 c015624:	dfc00415 	stw	ra,16(sp)
 c015628:	df000315 	stw	fp,12(sp)
 c01562c:	df000304 	addi	fp,sp,12
 c015630:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 c015634:	e0bfff17 	ldw	r2,-4(fp)
 c015638:	10000816 	blt	r2,zero,c01565c <close+0x3c>
 c01563c:	01400304 	movi	r5,12
 c015640:	e13fff17 	ldw	r4,-4(fp)
 c015644:	c004de00 	call	c004de0 <__mulsi3>
 c015648:	1007883a 	mov	r3,r2
 c01564c:	008300b4 	movhi	r2,3074
 c015650:	10a5a504 	addi	r2,r2,-26988
 c015654:	1885883a 	add	r2,r3,r2
 c015658:	00000106 	br	c015660 <close+0x40>
 c01565c:	0005883a 	mov	r2,zero
 c015660:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 c015664:	e0bffd17 	ldw	r2,-12(fp)
 c015668:	10001926 	beq	r2,zero,c0156d0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 c01566c:	e0bffd17 	ldw	r2,-12(fp)
 c015670:	10800017 	ldw	r2,0(r2)
 c015674:	10800417 	ldw	r2,16(r2)
 c015678:	10000626 	beq	r2,zero,c015694 <close+0x74>
 c01567c:	e0bffd17 	ldw	r2,-12(fp)
 c015680:	10800017 	ldw	r2,0(r2)
 c015684:	10800417 	ldw	r2,16(r2)
 c015688:	e13ffd17 	ldw	r4,-12(fp)
 c01568c:	103ee83a 	callr	r2
 c015690:	00000106 	br	c015698 <close+0x78>
 c015694:	0005883a 	mov	r2,zero
 c015698:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 c01569c:	e13fff17 	ldw	r4,-4(fp)
 c0156a0:	c015f700 	call	c015f70 <alt_release_fd>
    if (rval < 0)
 c0156a4:	e0bffe17 	ldw	r2,-8(fp)
 c0156a8:	1000070e 	bge	r2,zero,c0156c8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 c0156ac:	c0155e40 	call	c0155e4 <alt_get_errno>
 c0156b0:	1007883a 	mov	r3,r2
 c0156b4:	e0bffe17 	ldw	r2,-8(fp)
 c0156b8:	0085c83a 	sub	r2,zero,r2
 c0156bc:	18800015 	stw	r2,0(r3)
      return -1;
 c0156c0:	00bfffc4 	movi	r2,-1
 c0156c4:	00000706 	br	c0156e4 <close+0xc4>
    }
    return 0;
 c0156c8:	0005883a 	mov	r2,zero
 c0156cc:	00000506 	br	c0156e4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 c0156d0:	c0155e40 	call	c0155e4 <alt_get_errno>
 c0156d4:	1007883a 	mov	r3,r2
 c0156d8:	00801444 	movi	r2,81
 c0156dc:	18800015 	stw	r2,0(r3)
    return -1;
 c0156e0:	00bfffc4 	movi	r2,-1
  }
}
 c0156e4:	e037883a 	mov	sp,fp
 c0156e8:	dfc00117 	ldw	ra,4(sp)
 c0156ec:	df000017 	ldw	fp,0(sp)
 c0156f0:	dec00204 	addi	sp,sp,8
 c0156f4:	f800283a 	ret

0c0156f8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 c0156f8:	defffc04 	addi	sp,sp,-16
 c0156fc:	df000315 	stw	fp,12(sp)
 c015700:	df000304 	addi	fp,sp,12
 c015704:	e13ffd15 	stw	r4,-12(fp)
 c015708:	e17ffe15 	stw	r5,-8(fp)
 c01570c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 c015710:	e0bfff17 	ldw	r2,-4(fp)
}
 c015714:	e037883a 	mov	sp,fp
 c015718:	df000017 	ldw	fp,0(sp)
 c01571c:	dec00104 	addi	sp,sp,4
 c015720:	f800283a 	ret

0c015724 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c015724:	defffe04 	addi	sp,sp,-8
 c015728:	dfc00115 	stw	ra,4(sp)
 c01572c:	df000015 	stw	fp,0(sp)
 c015730:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c015734:	d0a01317 	ldw	r2,-32692(gp)
 c015738:	10000326 	beq	r2,zero,c015748 <alt_get_errno+0x24>
 c01573c:	d0a01317 	ldw	r2,-32692(gp)
 c015740:	103ee83a 	callr	r2
 c015744:	00000106 	br	c01574c <alt_get_errno+0x28>
 c015748:	d0a7ab04 	addi	r2,gp,-24916
}
 c01574c:	e037883a 	mov	sp,fp
 c015750:	dfc00117 	ldw	ra,4(sp)
 c015754:	df000017 	ldw	fp,0(sp)
 c015758:	dec00204 	addi	sp,sp,8
 c01575c:	f800283a 	ret

0c015760 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 c015760:	defffb04 	addi	sp,sp,-20
 c015764:	dfc00415 	stw	ra,16(sp)
 c015768:	df000315 	stw	fp,12(sp)
 c01576c:	df000304 	addi	fp,sp,12
 c015770:	e13ffe15 	stw	r4,-8(fp)
 c015774:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 c015778:	e0bffe17 	ldw	r2,-8(fp)
 c01577c:	10000816 	blt	r2,zero,c0157a0 <fstat+0x40>
 c015780:	01400304 	movi	r5,12
 c015784:	e13ffe17 	ldw	r4,-8(fp)
 c015788:	c004de00 	call	c004de0 <__mulsi3>
 c01578c:	1007883a 	mov	r3,r2
 c015790:	008300b4 	movhi	r2,3074
 c015794:	10a5a504 	addi	r2,r2,-26988
 c015798:	1885883a 	add	r2,r3,r2
 c01579c:	00000106 	br	c0157a4 <fstat+0x44>
 c0157a0:	0005883a 	mov	r2,zero
 c0157a4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 c0157a8:	e0bffd17 	ldw	r2,-12(fp)
 c0157ac:	10001026 	beq	r2,zero,c0157f0 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 c0157b0:	e0bffd17 	ldw	r2,-12(fp)
 c0157b4:	10800017 	ldw	r2,0(r2)
 c0157b8:	10800817 	ldw	r2,32(r2)
 c0157bc:	10000726 	beq	r2,zero,c0157dc <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 c0157c0:	e0bffd17 	ldw	r2,-12(fp)
 c0157c4:	10800017 	ldw	r2,0(r2)
 c0157c8:	10800817 	ldw	r2,32(r2)
 c0157cc:	e17fff17 	ldw	r5,-4(fp)
 c0157d0:	e13ffd17 	ldw	r4,-12(fp)
 c0157d4:	103ee83a 	callr	r2
 c0157d8:	00000a06 	br	c015804 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 c0157dc:	e0bfff17 	ldw	r2,-4(fp)
 c0157e0:	00c80004 	movi	r3,8192
 c0157e4:	10c00115 	stw	r3,4(r2)
      return 0;
 c0157e8:	0005883a 	mov	r2,zero
 c0157ec:	00000506 	br	c015804 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 c0157f0:	c0157240 	call	c015724 <alt_get_errno>
 c0157f4:	1007883a 	mov	r3,r2
 c0157f8:	00801444 	movi	r2,81
 c0157fc:	18800015 	stw	r2,0(r3)
    return -1;
 c015800:	00bfffc4 	movi	r2,-1
  }
}
 c015804:	e037883a 	mov	sp,fp
 c015808:	dfc00117 	ldw	ra,4(sp)
 c01580c:	df000017 	ldw	fp,0(sp)
 c015810:	dec00204 	addi	sp,sp,8
 c015814:	f800283a 	ret

0c015818 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c015818:	defffe04 	addi	sp,sp,-8
 c01581c:	dfc00115 	stw	ra,4(sp)
 c015820:	df000015 	stw	fp,0(sp)
 c015824:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c015828:	d0a01317 	ldw	r2,-32692(gp)
 c01582c:	10000326 	beq	r2,zero,c01583c <alt_get_errno+0x24>
 c015830:	d0a01317 	ldw	r2,-32692(gp)
 c015834:	103ee83a 	callr	r2
 c015838:	00000106 	br	c015840 <alt_get_errno+0x28>
 c01583c:	d0a7ab04 	addi	r2,gp,-24916
}
 c015840:	e037883a 	mov	sp,fp
 c015844:	dfc00117 	ldw	ra,4(sp)
 c015848:	df000017 	ldw	fp,0(sp)
 c01584c:	dec00204 	addi	sp,sp,8
 c015850:	f800283a 	ret

0c015854 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 c015854:	deffed04 	addi	sp,sp,-76
 c015858:	dfc01215 	stw	ra,72(sp)
 c01585c:	df001115 	stw	fp,68(sp)
 c015860:	df001104 	addi	fp,sp,68
 c015864:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 c015868:	e0bfff17 	ldw	r2,-4(fp)
 c01586c:	10000816 	blt	r2,zero,c015890 <isatty+0x3c>
 c015870:	01400304 	movi	r5,12
 c015874:	e13fff17 	ldw	r4,-4(fp)
 c015878:	c004de00 	call	c004de0 <__mulsi3>
 c01587c:	1007883a 	mov	r3,r2
 c015880:	008300b4 	movhi	r2,3074
 c015884:	10a5a504 	addi	r2,r2,-26988
 c015888:	1885883a 	add	r2,r3,r2
 c01588c:	00000106 	br	c015894 <isatty+0x40>
 c015890:	0005883a 	mov	r2,zero
 c015894:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 c015898:	e0bfef17 	ldw	r2,-68(fp)
 c01589c:	10000e26 	beq	r2,zero,c0158d8 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 c0158a0:	e0bfef17 	ldw	r2,-68(fp)
 c0158a4:	10800017 	ldw	r2,0(r2)
 c0158a8:	10800817 	ldw	r2,32(r2)
 c0158ac:	1000021e 	bne	r2,zero,c0158b8 <isatty+0x64>
    {
      return 1;
 c0158b0:	00800044 	movi	r2,1
 c0158b4:	00000d06 	br	c0158ec <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 c0158b8:	e0bff004 	addi	r2,fp,-64
 c0158bc:	100b883a 	mov	r5,r2
 c0158c0:	e13fff17 	ldw	r4,-4(fp)
 c0158c4:	c0157600 	call	c015760 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 c0158c8:	e0bff117 	ldw	r2,-60(fp)
 c0158cc:	10880020 	cmpeqi	r2,r2,8192
 c0158d0:	10803fcc 	andi	r2,r2,255
 c0158d4:	00000506 	br	c0158ec <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 c0158d8:	c0158180 	call	c015818 <alt_get_errno>
 c0158dc:	1007883a 	mov	r3,r2
 c0158e0:	00801444 	movi	r2,81
 c0158e4:	18800015 	stw	r2,0(r3)
    return 0;
 c0158e8:	0005883a 	mov	r2,zero
  }
}
 c0158ec:	e037883a 	mov	sp,fp
 c0158f0:	dfc00117 	ldw	ra,4(sp)
 c0158f4:	df000017 	ldw	fp,0(sp)
 c0158f8:	dec00204 	addi	sp,sp,8
 c0158fc:	f800283a 	ret

0c015900 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 c015900:	defffc04 	addi	sp,sp,-16
 c015904:	df000315 	stw	fp,12(sp)
 c015908:	df000304 	addi	fp,sp,12
 c01590c:	e13ffd15 	stw	r4,-12(fp)
 c015910:	e17ffe15 	stw	r5,-8(fp)
 c015914:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 c015918:	e0fffe17 	ldw	r3,-8(fp)
 c01591c:	e0bffd17 	ldw	r2,-12(fp)
 c015920:	18800c26 	beq	r3,r2,c015954 <alt_load_section+0x54>
  {
    while( to != end )
 c015924:	00000806 	br	c015948 <alt_load_section+0x48>
    {
      *to++ = *from++;
 c015928:	e0bffe17 	ldw	r2,-8(fp)
 c01592c:	10c00104 	addi	r3,r2,4
 c015930:	e0fffe15 	stw	r3,-8(fp)
 c015934:	e0fffd17 	ldw	r3,-12(fp)
 c015938:	19000104 	addi	r4,r3,4
 c01593c:	e13ffd15 	stw	r4,-12(fp)
 c015940:	18c00017 	ldw	r3,0(r3)
 c015944:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 c015948:	e0fffe17 	ldw	r3,-8(fp)
 c01594c:	e0bfff17 	ldw	r2,-4(fp)
 c015950:	18bff51e 	bne	r3,r2,c015928 <__alt_data_end+0xfc015928>
    {
      *to++ = *from++;
    }
  }
}
 c015954:	0001883a 	nop
 c015958:	e037883a 	mov	sp,fp
 c01595c:	df000017 	ldw	fp,0(sp)
 c015960:	dec00104 	addi	sp,sp,4
 c015964:	f800283a 	ret

0c015968 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 c015968:	defffe04 	addi	sp,sp,-8
 c01596c:	dfc00115 	stw	ra,4(sp)
 c015970:	df000015 	stw	fp,0(sp)
 c015974:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 c015978:	018300b4 	movhi	r6,3074
 c01597c:	31aa3504 	addi	r6,r6,-22316
 c015980:	014300b4 	movhi	r5,3074
 c015984:	2962ae04 	addi	r5,r5,-30024
 c015988:	010300b4 	movhi	r4,3074
 c01598c:	212a3504 	addi	r4,r4,-22316
 c015990:	c0159000 	call	c015900 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 c015994:	01830034 	movhi	r6,3072
 c015998:	31808c04 	addi	r6,r6,560
 c01599c:	01430034 	movhi	r5,3072
 c0159a0:	29400804 	addi	r5,r5,32
 c0159a4:	01030034 	movhi	r4,3072
 c0159a8:	21000804 	addi	r4,r4,32
 c0159ac:	c0159000 	call	c015900 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 c0159b0:	018300b4 	movhi	r6,3074
 c0159b4:	31a2ae04 	addi	r6,r6,-30024
 c0159b8:	014300b4 	movhi	r5,3074
 c0159bc:	29613704 	addi	r5,r5,-31524
 c0159c0:	010300b4 	movhi	r4,3074
 c0159c4:	21213704 	addi	r4,r4,-31524
 c0159c8:	c0159000 	call	c015900 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 c0159cc:	c0174600 	call	c017460 <alt_dcache_flush_all>
  alt_icache_flush_all();
 c0159d0:	c0176200 	call	c017620 <alt_icache_flush_all>
}
 c0159d4:	0001883a 	nop
 c0159d8:	e037883a 	mov	sp,fp
 c0159dc:	dfc00117 	ldw	ra,4(sp)
 c0159e0:	df000017 	ldw	fp,0(sp)
 c0159e4:	dec00204 	addi	sp,sp,8
 c0159e8:	f800283a 	ret

0c0159ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c0159ec:	defffe04 	addi	sp,sp,-8
 c0159f0:	dfc00115 	stw	ra,4(sp)
 c0159f4:	df000015 	stw	fp,0(sp)
 c0159f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c0159fc:	d0a01317 	ldw	r2,-32692(gp)
 c015a00:	10000326 	beq	r2,zero,c015a10 <alt_get_errno+0x24>
 c015a04:	d0a01317 	ldw	r2,-32692(gp)
 c015a08:	103ee83a 	callr	r2
 c015a0c:	00000106 	br	c015a14 <alt_get_errno+0x28>
 c015a10:	d0a7ab04 	addi	r2,gp,-24916
}
 c015a14:	e037883a 	mov	sp,fp
 c015a18:	dfc00117 	ldw	ra,4(sp)
 c015a1c:	df000017 	ldw	fp,0(sp)
 c015a20:	dec00204 	addi	sp,sp,8
 c015a24:	f800283a 	ret

0c015a28 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 c015a28:	defff904 	addi	sp,sp,-28
 c015a2c:	dfc00615 	stw	ra,24(sp)
 c015a30:	df000515 	stw	fp,20(sp)
 c015a34:	df000504 	addi	fp,sp,20
 c015a38:	e13ffd15 	stw	r4,-12(fp)
 c015a3c:	e17ffe15 	stw	r5,-8(fp)
 c015a40:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 c015a44:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 c015a48:	e0bffd17 	ldw	r2,-12(fp)
 c015a4c:	10000816 	blt	r2,zero,c015a70 <lseek+0x48>
 c015a50:	01400304 	movi	r5,12
 c015a54:	e13ffd17 	ldw	r4,-12(fp)
 c015a58:	c004de00 	call	c004de0 <__mulsi3>
 c015a5c:	1007883a 	mov	r3,r2
 c015a60:	008300b4 	movhi	r2,3074
 c015a64:	10a5a504 	addi	r2,r2,-26988
 c015a68:	1885883a 	add	r2,r3,r2
 c015a6c:	00000106 	br	c015a74 <lseek+0x4c>
 c015a70:	0005883a 	mov	r2,zero
 c015a74:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 c015a78:	e0bffc17 	ldw	r2,-16(fp)
 c015a7c:	10001026 	beq	r2,zero,c015ac0 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 c015a80:	e0bffc17 	ldw	r2,-16(fp)
 c015a84:	10800017 	ldw	r2,0(r2)
 c015a88:	10800717 	ldw	r2,28(r2)
 c015a8c:	10000926 	beq	r2,zero,c015ab4 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 c015a90:	e0bffc17 	ldw	r2,-16(fp)
 c015a94:	10800017 	ldw	r2,0(r2)
 c015a98:	10800717 	ldw	r2,28(r2)
 c015a9c:	e1bfff17 	ldw	r6,-4(fp)
 c015aa0:	e17ffe17 	ldw	r5,-8(fp)
 c015aa4:	e13ffc17 	ldw	r4,-16(fp)
 c015aa8:	103ee83a 	callr	r2
 c015aac:	e0bffb15 	stw	r2,-20(fp)
 c015ab0:	00000506 	br	c015ac8 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 c015ab4:	00bfde84 	movi	r2,-134
 c015ab8:	e0bffb15 	stw	r2,-20(fp)
 c015abc:	00000206 	br	c015ac8 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 c015ac0:	00bfebc4 	movi	r2,-81
 c015ac4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 c015ac8:	e0bffb17 	ldw	r2,-20(fp)
 c015acc:	1000070e 	bge	r2,zero,c015aec <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 c015ad0:	c0159ec0 	call	c0159ec <alt_get_errno>
 c015ad4:	1007883a 	mov	r3,r2
 c015ad8:	e0bffb17 	ldw	r2,-20(fp)
 c015adc:	0085c83a 	sub	r2,zero,r2
 c015ae0:	18800015 	stw	r2,0(r3)
    rc = -1;
 c015ae4:	00bfffc4 	movi	r2,-1
 c015ae8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 c015aec:	e0bffb17 	ldw	r2,-20(fp)
}
 c015af0:	e037883a 	mov	sp,fp
 c015af4:	dfc00117 	ldw	ra,4(sp)
 c015af8:	df000017 	ldw	fp,0(sp)
 c015afc:	dec00204 	addi	sp,sp,8
 c015b00:	f800283a 	ret

0c015b04 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 c015b04:	defffd04 	addi	sp,sp,-12
 c015b08:	dfc00215 	stw	ra,8(sp)
 c015b0c:	df000115 	stw	fp,4(sp)
 c015b10:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 c015b14:	0009883a 	mov	r4,zero
 c015b18:	c0163e80 	call	c0163e8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 c015b1c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 c015b20:	c0164200 	call	c016420 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 c015b24:	018300b4 	movhi	r6,3074
 c015b28:	31a2a404 	addi	r6,r6,-30064
 c015b2c:	014300b4 	movhi	r5,3074
 c015b30:	2962a404 	addi	r5,r5,-30064
 c015b34:	010300b4 	movhi	r4,3074
 c015b38:	2122a404 	addi	r4,r4,-30064
 c015b3c:	c0179c40 	call	c0179c4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 c015b40:	c0175600 	call	c017560 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 c015b44:	01030074 	movhi	r4,3073
 c015b48:	211d7004 	addi	r4,r4,30144
 c015b4c:	c017fe00 	call	c017fe0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 c015b50:	d0a7ac17 	ldw	r2,-24912(gp)
 c015b54:	d0e7ad17 	ldw	r3,-24908(gp)
 c015b58:	d127ae17 	ldw	r4,-24904(gp)
 c015b5c:	200d883a 	mov	r6,r4
 c015b60:	180b883a 	mov	r5,r3
 c015b64:	1009883a 	mov	r4,r2
 c015b68:	c001fd00 	call	c001fd0 <main>
 c015b6c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 c015b70:	01000044 	movi	r4,1
 c015b74:	c0156200 	call	c015620 <close>
  exit (result);
 c015b78:	e13fff17 	ldw	r4,-4(fp)
 c015b7c:	c017ff40 	call	c017ff4 <exit>

0c015b80 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 c015b80:	defffe04 	addi	sp,sp,-8
 c015b84:	df000115 	stw	fp,4(sp)
 c015b88:	df000104 	addi	fp,sp,4
 c015b8c:	e13fff15 	stw	r4,-4(fp)
}
 c015b90:	0001883a 	nop
 c015b94:	e037883a 	mov	sp,fp
 c015b98:	df000017 	ldw	fp,0(sp)
 c015b9c:	dec00104 	addi	sp,sp,4
 c015ba0:	f800283a 	ret

0c015ba4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 c015ba4:	defffe04 	addi	sp,sp,-8
 c015ba8:	df000115 	stw	fp,4(sp)
 c015bac:	df000104 	addi	fp,sp,4
 c015bb0:	e13fff15 	stw	r4,-4(fp)
}
 c015bb4:	0001883a 	nop
 c015bb8:	e037883a 	mov	sp,fp
 c015bbc:	df000017 	ldw	fp,0(sp)
 c015bc0:	dec00104 	addi	sp,sp,4
 c015bc4:	f800283a 	ret

0c015bc8 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 c015bc8:	defff204 	addi	sp,sp,-56
 c015bcc:	dfc00a15 	stw	ra,40(sp)
 c015bd0:	df000915 	stw	fp,36(sp)
 c015bd4:	df000904 	addi	fp,sp,36
 c015bd8:	e13fff15 	stw	r4,-4(fp)
 c015bdc:	e1400215 	stw	r5,8(fp)
 c015be0:	e1800315 	stw	r6,12(fp)
 c015be4:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
 c015be8:	e0800204 	addi	r2,fp,8
 c015bec:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 c015bf0:	e0bfff17 	ldw	r2,-4(fp)
 c015bf4:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
 c015bf8:	00006f06 	br	c015db8 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 c015bfc:	e0bff807 	ldb	r2,-32(fp)
 c015c00:	10800960 	cmpeqi	r2,r2,37
 c015c04:	1000041e 	bne	r2,zero,c015c18 <alt_printf+0x50>
        {
            alt_putchar(c);
 c015c08:	e0bff807 	ldb	r2,-32(fp)
 c015c0c:	1009883a 	mov	r4,r2
 c015c10:	c015df40 	call	c015df4 <alt_putchar>
 c015c14:	00006806 	br	c015db8 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 c015c18:	e0bff717 	ldw	r2,-36(fp)
 c015c1c:	10c00044 	addi	r3,r2,1
 c015c20:	e0fff715 	stw	r3,-36(fp)
 c015c24:	10800003 	ldbu	r2,0(r2)
 c015c28:	e0bff805 	stb	r2,-32(fp)
 c015c2c:	e0bff807 	ldb	r2,-32(fp)
 c015c30:	10006926 	beq	r2,zero,c015dd8 <alt_printf+0x210>
            {
                if (c == '%')
 c015c34:	e0bff807 	ldb	r2,-32(fp)
 c015c38:	10800958 	cmpnei	r2,r2,37
 c015c3c:	1000041e 	bne	r2,zero,c015c50 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 c015c40:	e0bff807 	ldb	r2,-32(fp)
 c015c44:	1009883a 	mov	r4,r2
 c015c48:	c015df40 	call	c015df4 <alt_putchar>
 c015c4c:	00005a06 	br	c015db8 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
 c015c50:	e0bff807 	ldb	r2,-32(fp)
 c015c54:	108018d8 	cmpnei	r2,r2,99
 c015c58:	1000081e 	bne	r2,zero,c015c7c <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
 c015c5c:	e0bffe17 	ldw	r2,-8(fp)
 c015c60:	10c00104 	addi	r3,r2,4
 c015c64:	e0fffe15 	stw	r3,-8(fp)
 c015c68:	10800017 	ldw	r2,0(r2)
 c015c6c:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
 c015c70:	e13ffd17 	ldw	r4,-12(fp)
 c015c74:	c015df40 	call	c015df4 <alt_putchar>
 c015c78:	00004f06 	br	c015db8 <alt_printf+0x1f0>
                }
                else if (c == 'x')
 c015c7c:	e0bff807 	ldb	r2,-32(fp)
 c015c80:	10801e18 	cmpnei	r2,r2,120
 c015c84:	1000341e 	bne	r2,zero,c015d58 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 c015c88:	e0bffe17 	ldw	r2,-8(fp)
 c015c8c:	10c00104 	addi	r3,r2,4
 c015c90:	e0fffe15 	stw	r3,-8(fp)
 c015c94:	10800017 	ldw	r2,0(r2)
 c015c98:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 c015c9c:	e0bffb17 	ldw	r2,-20(fp)
 c015ca0:	1000031e 	bne	r2,zero,c015cb0 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
 c015ca4:	01000c04 	movi	r4,48
 c015ca8:	c015df40 	call	c015df4 <alt_putchar>
                        continue;
 c015cac:	00004206 	br	c015db8 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 c015cb0:	00800704 	movi	r2,28
 c015cb4:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
 c015cb8:	00000306 	br	c015cc8 <alt_printf+0x100>
                        digit_shift -= 4;
 c015cbc:	e0bff917 	ldw	r2,-28(fp)
 c015cc0:	10bfff04 	addi	r2,r2,-4
 c015cc4:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 c015cc8:	00c003c4 	movi	r3,15
 c015ccc:	e0bff917 	ldw	r2,-28(fp)
 c015cd0:	1884983a 	sll	r2,r3,r2
 c015cd4:	1007883a 	mov	r3,r2
 c015cd8:	e0bffb17 	ldw	r2,-20(fp)
 c015cdc:	1884703a 	and	r2,r3,r2
 c015ce0:	103ff626 	beq	r2,zero,c015cbc <__alt_data_end+0xfc015cbc>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 c015ce4:	00001906 	br	c015d4c <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 c015ce8:	00c003c4 	movi	r3,15
 c015cec:	e0bff917 	ldw	r2,-28(fp)
 c015cf0:	1884983a 	sll	r2,r3,r2
 c015cf4:	1007883a 	mov	r3,r2
 c015cf8:	e0bffb17 	ldw	r2,-20(fp)
 c015cfc:	1886703a 	and	r3,r3,r2
 c015d00:	e0bff917 	ldw	r2,-28(fp)
 c015d04:	1884d83a 	srl	r2,r3,r2
 c015d08:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
 c015d0c:	e0bffc17 	ldw	r2,-16(fp)
 c015d10:	108002a8 	cmpgeui	r2,r2,10
 c015d14:	1000041e 	bne	r2,zero,c015d28 <alt_printf+0x160>
                            c = '0' + digit;
 c015d18:	e0bffc17 	ldw	r2,-16(fp)
 c015d1c:	10800c04 	addi	r2,r2,48
 c015d20:	e0bff805 	stb	r2,-32(fp)
 c015d24:	00000306 	br	c015d34 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
 c015d28:	e0bffc17 	ldw	r2,-16(fp)
 c015d2c:	108015c4 	addi	r2,r2,87
 c015d30:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
 c015d34:	e0bff807 	ldb	r2,-32(fp)
 c015d38:	1009883a 	mov	r4,r2
 c015d3c:	c015df40 	call	c015df4 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 c015d40:	e0bff917 	ldw	r2,-28(fp)
 c015d44:	10bfff04 	addi	r2,r2,-4
 c015d48:	e0bff915 	stw	r2,-28(fp)
 c015d4c:	e0bff917 	ldw	r2,-28(fp)
 c015d50:	103fe50e 	bge	r2,zero,c015ce8 <__alt_data_end+0xfc015ce8>
 c015d54:	00001806 	br	c015db8 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 c015d58:	e0bff807 	ldb	r2,-32(fp)
 c015d5c:	10801cd8 	cmpnei	r2,r2,115
 c015d60:	1000151e 	bne	r2,zero,c015db8 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 c015d64:	e0bffe17 	ldw	r2,-8(fp)
 c015d68:	10c00104 	addi	r3,r2,4
 c015d6c:	e0fffe15 	stw	r3,-8(fp)
 c015d70:	10800017 	ldw	r2,0(r2)
 c015d74:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
 c015d78:	00000906 	br	c015da0 <alt_printf+0x1d8>
                      alt_putchar(*s++);
 c015d7c:	e0bffa17 	ldw	r2,-24(fp)
 c015d80:	10c00044 	addi	r3,r2,1
 c015d84:	e0fffa15 	stw	r3,-24(fp)
 c015d88:	10800003 	ldbu	r2,0(r2)
 c015d8c:	10803fcc 	andi	r2,r2,255
 c015d90:	1080201c 	xori	r2,r2,128
 c015d94:	10bfe004 	addi	r2,r2,-128
 c015d98:	1009883a 	mov	r4,r2
 c015d9c:	c015df40 	call	c015df4 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 c015da0:	e0bffa17 	ldw	r2,-24(fp)
 c015da4:	10800003 	ldbu	r2,0(r2)
 c015da8:	10803fcc 	andi	r2,r2,255
 c015dac:	1080201c 	xori	r2,r2,128
 c015db0:	10bfe004 	addi	r2,r2,-128
 c015db4:	103ff11e 	bne	r2,zero,c015d7c <__alt_data_end+0xfc015d7c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 c015db8:	e0bff717 	ldw	r2,-36(fp)
 c015dbc:	10c00044 	addi	r3,r2,1
 c015dc0:	e0fff715 	stw	r3,-36(fp)
 c015dc4:	10800003 	ldbu	r2,0(r2)
 c015dc8:	e0bff805 	stb	r2,-32(fp)
 c015dcc:	e0bff807 	ldb	r2,-32(fp)
 c015dd0:	103f8a1e 	bne	r2,zero,c015bfc <__alt_data_end+0xfc015bfc>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 c015dd4:	00000106 	br	c015ddc <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
 c015dd8:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 c015ddc:	0001883a 	nop
 c015de0:	e037883a 	mov	sp,fp
 c015de4:	dfc00117 	ldw	ra,4(sp)
 c015de8:	df000017 	ldw	fp,0(sp)
 c015dec:	dec00504 	addi	sp,sp,20
 c015df0:	f800283a 	ret

0c015df4 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 c015df4:	defffd04 	addi	sp,sp,-12
 c015df8:	dfc00215 	stw	ra,8(sp)
 c015dfc:	df000115 	stw	fp,4(sp)
 c015e00:	df000104 	addi	fp,sp,4
 c015e04:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 c015e08:	d0a00917 	ldw	r2,-32732(gp)
 c015e0c:	10800217 	ldw	r2,8(r2)
 c015e10:	100b883a 	mov	r5,r2
 c015e14:	e13fff17 	ldw	r4,-4(fp)
 c015e18:	c0181480 	call	c018148 <putc>
#endif
#endif
}
 c015e1c:	e037883a 	mov	sp,fp
 c015e20:	dfc00117 	ldw	ra,4(sp)
 c015e24:	df000017 	ldw	fp,0(sp)
 c015e28:	dec00204 	addi	sp,sp,8
 c015e2c:	f800283a 	ret

0c015e30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c015e30:	defffe04 	addi	sp,sp,-8
 c015e34:	dfc00115 	stw	ra,4(sp)
 c015e38:	df000015 	stw	fp,0(sp)
 c015e3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c015e40:	d0a01317 	ldw	r2,-32692(gp)
 c015e44:	10000326 	beq	r2,zero,c015e54 <alt_get_errno+0x24>
 c015e48:	d0a01317 	ldw	r2,-32692(gp)
 c015e4c:	103ee83a 	callr	r2
 c015e50:	00000106 	br	c015e58 <alt_get_errno+0x28>
 c015e54:	d0a7ab04 	addi	r2,gp,-24916
}
 c015e58:	e037883a 	mov	sp,fp
 c015e5c:	dfc00117 	ldw	ra,4(sp)
 c015e60:	df000017 	ldw	fp,0(sp)
 c015e64:	dec00204 	addi	sp,sp,8
 c015e68:	f800283a 	ret

0c015e6c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 c015e6c:	defff904 	addi	sp,sp,-28
 c015e70:	dfc00615 	stw	ra,24(sp)
 c015e74:	df000515 	stw	fp,20(sp)
 c015e78:	df000504 	addi	fp,sp,20
 c015e7c:	e13ffd15 	stw	r4,-12(fp)
 c015e80:	e17ffe15 	stw	r5,-8(fp)
 c015e84:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 c015e88:	e0bffd17 	ldw	r2,-12(fp)
 c015e8c:	10000816 	blt	r2,zero,c015eb0 <read+0x44>
 c015e90:	01400304 	movi	r5,12
 c015e94:	e13ffd17 	ldw	r4,-12(fp)
 c015e98:	c004de00 	call	c004de0 <__mulsi3>
 c015e9c:	1007883a 	mov	r3,r2
 c015ea0:	008300b4 	movhi	r2,3074
 c015ea4:	10a5a504 	addi	r2,r2,-26988
 c015ea8:	1885883a 	add	r2,r3,r2
 c015eac:	00000106 	br	c015eb4 <read+0x48>
 c015eb0:	0005883a 	mov	r2,zero
 c015eb4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 c015eb8:	e0bffb17 	ldw	r2,-20(fp)
 c015ebc:	10002226 	beq	r2,zero,c015f48 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 c015ec0:	e0bffb17 	ldw	r2,-20(fp)
 c015ec4:	10800217 	ldw	r2,8(r2)
 c015ec8:	108000cc 	andi	r2,r2,3
 c015ecc:	10800060 	cmpeqi	r2,r2,1
 c015ed0:	1000181e 	bne	r2,zero,c015f34 <read+0xc8>
        (fd->dev->read))
 c015ed4:	e0bffb17 	ldw	r2,-20(fp)
 c015ed8:	10800017 	ldw	r2,0(r2)
 c015edc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 c015ee0:	10001426 	beq	r2,zero,c015f34 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 c015ee4:	e0bffb17 	ldw	r2,-20(fp)
 c015ee8:	10800017 	ldw	r2,0(r2)
 c015eec:	10800517 	ldw	r2,20(r2)
 c015ef0:	e0ffff17 	ldw	r3,-4(fp)
 c015ef4:	180d883a 	mov	r6,r3
 c015ef8:	e17ffe17 	ldw	r5,-8(fp)
 c015efc:	e13ffb17 	ldw	r4,-20(fp)
 c015f00:	103ee83a 	callr	r2
 c015f04:	e0bffc15 	stw	r2,-16(fp)
 c015f08:	e0bffc17 	ldw	r2,-16(fp)
 c015f0c:	1000070e 	bge	r2,zero,c015f2c <read+0xc0>
        {
          ALT_ERRNO = -rval;
 c015f10:	c015e300 	call	c015e30 <alt_get_errno>
 c015f14:	1007883a 	mov	r3,r2
 c015f18:	e0bffc17 	ldw	r2,-16(fp)
 c015f1c:	0085c83a 	sub	r2,zero,r2
 c015f20:	18800015 	stw	r2,0(r3)
          return -1;
 c015f24:	00bfffc4 	movi	r2,-1
 c015f28:	00000c06 	br	c015f5c <read+0xf0>
        }
        return rval;
 c015f2c:	e0bffc17 	ldw	r2,-16(fp)
 c015f30:	00000a06 	br	c015f5c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 c015f34:	c015e300 	call	c015e30 <alt_get_errno>
 c015f38:	1007883a 	mov	r3,r2
 c015f3c:	00800344 	movi	r2,13
 c015f40:	18800015 	stw	r2,0(r3)
 c015f44:	00000406 	br	c015f58 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 c015f48:	c015e300 	call	c015e30 <alt_get_errno>
 c015f4c:	1007883a 	mov	r3,r2
 c015f50:	00801444 	movi	r2,81
 c015f54:	18800015 	stw	r2,0(r3)
  }
  return -1;
 c015f58:	00bfffc4 	movi	r2,-1
}
 c015f5c:	e037883a 	mov	sp,fp
 c015f60:	dfc00117 	ldw	ra,4(sp)
 c015f64:	df000017 	ldw	fp,0(sp)
 c015f68:	dec00204 	addi	sp,sp,8
 c015f6c:	f800283a 	ret

0c015f70 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 c015f70:	defffc04 	addi	sp,sp,-16
 c015f74:	dfc00315 	stw	ra,12(sp)
 c015f78:	df000215 	stw	fp,8(sp)
 c015f7c:	dc000115 	stw	r16,4(sp)
 c015f80:	df000204 	addi	fp,sp,8
 c015f84:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 c015f88:	e0bffe17 	ldw	r2,-8(fp)
 c015f8c:	108000d0 	cmplti	r2,r2,3
 c015f90:	1000111e 	bne	r2,zero,c015fd8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 c015f94:	040300b4 	movhi	r16,3074
 c015f98:	8425a504 	addi	r16,r16,-26988
 c015f9c:	e0bffe17 	ldw	r2,-8(fp)
 c015fa0:	01400304 	movi	r5,12
 c015fa4:	1009883a 	mov	r4,r2
 c015fa8:	c004de00 	call	c004de0 <__mulsi3>
 c015fac:	8085883a 	add	r2,r16,r2
 c015fb0:	10800204 	addi	r2,r2,8
 c015fb4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 c015fb8:	040300b4 	movhi	r16,3074
 c015fbc:	8425a504 	addi	r16,r16,-26988
 c015fc0:	e0bffe17 	ldw	r2,-8(fp)
 c015fc4:	01400304 	movi	r5,12
 c015fc8:	1009883a 	mov	r4,r2
 c015fcc:	c004de00 	call	c004de0 <__mulsi3>
 c015fd0:	8085883a 	add	r2,r16,r2
 c015fd4:	10000015 	stw	zero,0(r2)
  }
}
 c015fd8:	0001883a 	nop
 c015fdc:	e6ffff04 	addi	sp,fp,-4
 c015fe0:	dfc00217 	ldw	ra,8(sp)
 c015fe4:	df000117 	ldw	fp,4(sp)
 c015fe8:	dc000017 	ldw	r16,0(sp)
 c015fec:	dec00304 	addi	sp,sp,12
 c015ff0:	f800283a 	ret

0c015ff4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 c015ff4:	defff904 	addi	sp,sp,-28
 c015ff8:	df000615 	stw	fp,24(sp)
 c015ffc:	df000604 	addi	fp,sp,24
 c016000:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c016004:	0005303a 	rdctl	r2,status
 c016008:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c01600c:	e0fffe17 	ldw	r3,-8(fp)
 c016010:	00bfff84 	movi	r2,-2
 c016014:	1884703a 	and	r2,r3,r2
 c016018:	1001703a 	wrctl	status,r2
  
  return context;
 c01601c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 c016020:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 c016024:	d0a01417 	ldw	r2,-32688(gp)
 c016028:	10c000c4 	addi	r3,r2,3
 c01602c:	00bfff04 	movi	r2,-4
 c016030:	1884703a 	and	r2,r3,r2
 c016034:	d0a01415 	stw	r2,-32688(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 c016038:	d0e01417 	ldw	r3,-32688(gp)
 c01603c:	e0bfff17 	ldw	r2,-4(fp)
 c016040:	1887883a 	add	r3,r3,r2
 c016044:	00840034 	movhi	r2,4096
 c016048:	10800004 	addi	r2,r2,0
 c01604c:	10c0062e 	bgeu	r2,r3,c016068 <sbrk+0x74>
 c016050:	e0bffb17 	ldw	r2,-20(fp)
 c016054:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c016058:	e0bffa17 	ldw	r2,-24(fp)
 c01605c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 c016060:	00bfffc4 	movi	r2,-1
 c016064:	00000b06 	br	c016094 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 c016068:	d0a01417 	ldw	r2,-32688(gp)
 c01606c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 c016070:	d0e01417 	ldw	r3,-32688(gp)
 c016074:	e0bfff17 	ldw	r2,-4(fp)
 c016078:	1885883a 	add	r2,r3,r2
 c01607c:	d0a01415 	stw	r2,-32688(gp)
 c016080:	e0bffb17 	ldw	r2,-20(fp)
 c016084:	e0bffc15 	stw	r2,-16(fp)
 c016088:	e0bffc17 	ldw	r2,-16(fp)
 c01608c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 c016090:	e0bffd17 	ldw	r2,-12(fp)
} 
 c016094:	e037883a 	mov	sp,fp
 c016098:	df000017 	ldw	fp,0(sp)
 c01609c:	dec00104 	addi	sp,sp,4
 c0160a0:	f800283a 	ret

0c0160a4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 c0160a4:	defffa04 	addi	sp,sp,-24
 c0160a8:	df000515 	stw	fp,20(sp)
 c0160ac:	df000504 	addi	fp,sp,20
 c0160b0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c0160b4:	0005303a 	rdctl	r2,status
 c0160b8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c0160bc:	e0fffc17 	ldw	r3,-16(fp)
 c0160c0:	00bfff84 	movi	r2,-2
 c0160c4:	1884703a 	and	r2,r3,r2
 c0160c8:	1001703a 	wrctl	status,r2
  
  return context;
 c0160cc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 c0160d0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 c0160d4:	e0bfff17 	ldw	r2,-4(fp)
 c0160d8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 c0160dc:	e0bffd17 	ldw	r2,-12(fp)
 c0160e0:	10800017 	ldw	r2,0(r2)
 c0160e4:	e0fffd17 	ldw	r3,-12(fp)
 c0160e8:	18c00117 	ldw	r3,4(r3)
 c0160ec:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 c0160f0:	e0bffd17 	ldw	r2,-12(fp)
 c0160f4:	10800117 	ldw	r2,4(r2)
 c0160f8:	e0fffd17 	ldw	r3,-12(fp)
 c0160fc:	18c00017 	ldw	r3,0(r3)
 c016100:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 c016104:	e0bffd17 	ldw	r2,-12(fp)
 c016108:	e0fffd17 	ldw	r3,-12(fp)
 c01610c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 c016110:	e0bffd17 	ldw	r2,-12(fp)
 c016114:	e0fffd17 	ldw	r3,-12(fp)
 c016118:	10c00015 	stw	r3,0(r2)
 c01611c:	e0bffb17 	ldw	r2,-20(fp)
 c016120:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c016124:	e0bffe17 	ldw	r2,-8(fp)
 c016128:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 c01612c:	0001883a 	nop
 c016130:	e037883a 	mov	sp,fp
 c016134:	df000017 	ldw	fp,0(sp)
 c016138:	dec00104 	addi	sp,sp,4
 c01613c:	f800283a 	ret

0c016140 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 c016140:	defffb04 	addi	sp,sp,-20
 c016144:	dfc00415 	stw	ra,16(sp)
 c016148:	df000315 	stw	fp,12(sp)
 c01614c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 c016150:	d0a01517 	ldw	r2,-32684(gp)
 c016154:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 c016158:	d0a7b017 	ldw	r2,-24896(gp)
 c01615c:	10800044 	addi	r2,r2,1
 c016160:	d0a7b015 	stw	r2,-24896(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 c016164:	00002e06 	br	c016220 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 c016168:	e0bffd17 	ldw	r2,-12(fp)
 c01616c:	10800017 	ldw	r2,0(r2)
 c016170:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 c016174:	e0bffd17 	ldw	r2,-12(fp)
 c016178:	10800403 	ldbu	r2,16(r2)
 c01617c:	10803fcc 	andi	r2,r2,255
 c016180:	10000426 	beq	r2,zero,c016194 <alt_tick+0x54>
 c016184:	d0a7b017 	ldw	r2,-24896(gp)
 c016188:	1000021e 	bne	r2,zero,c016194 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 c01618c:	e0bffd17 	ldw	r2,-12(fp)
 c016190:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 c016194:	e0bffd17 	ldw	r2,-12(fp)
 c016198:	10800217 	ldw	r2,8(r2)
 c01619c:	d0e7b017 	ldw	r3,-24896(gp)
 c0161a0:	18801d36 	bltu	r3,r2,c016218 <alt_tick+0xd8>
 c0161a4:	e0bffd17 	ldw	r2,-12(fp)
 c0161a8:	10800403 	ldbu	r2,16(r2)
 c0161ac:	10803fcc 	andi	r2,r2,255
 c0161b0:	1000191e 	bne	r2,zero,c016218 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 c0161b4:	e0bffd17 	ldw	r2,-12(fp)
 c0161b8:	10800317 	ldw	r2,12(r2)
 c0161bc:	e0fffd17 	ldw	r3,-12(fp)
 c0161c0:	18c00517 	ldw	r3,20(r3)
 c0161c4:	1809883a 	mov	r4,r3
 c0161c8:	103ee83a 	callr	r2
 c0161cc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 c0161d0:	e0bfff17 	ldw	r2,-4(fp)
 c0161d4:	1000031e 	bne	r2,zero,c0161e4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 c0161d8:	e13ffd17 	ldw	r4,-12(fp)
 c0161dc:	c0160a40 	call	c0160a4 <alt_alarm_stop>
 c0161e0:	00000d06 	br	c016218 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 c0161e4:	e0bffd17 	ldw	r2,-12(fp)
 c0161e8:	10c00217 	ldw	r3,8(r2)
 c0161ec:	e0bfff17 	ldw	r2,-4(fp)
 c0161f0:	1887883a 	add	r3,r3,r2
 c0161f4:	e0bffd17 	ldw	r2,-12(fp)
 c0161f8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 c0161fc:	e0bffd17 	ldw	r2,-12(fp)
 c016200:	10c00217 	ldw	r3,8(r2)
 c016204:	d0a7b017 	ldw	r2,-24896(gp)
 c016208:	1880032e 	bgeu	r3,r2,c016218 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 c01620c:	e0bffd17 	ldw	r2,-12(fp)
 c016210:	00c00044 	movi	r3,1
 c016214:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 c016218:	e0bffe17 	ldw	r2,-8(fp)
 c01621c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 c016220:	e0fffd17 	ldw	r3,-12(fp)
 c016224:	d0a01504 	addi	r2,gp,-32684
 c016228:	18bfcf1e 	bne	r3,r2,c016168 <__alt_data_end+0xfc016168>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 c01622c:	0001883a 	nop
}
 c016230:	0001883a 	nop
 c016234:	e037883a 	mov	sp,fp
 c016238:	dfc00117 	ldw	ra,4(sp)
 c01623c:	df000017 	ldw	fp,0(sp)
 c016240:	dec00204 	addi	sp,sp,8
 c016244:	f800283a 	ret

0c016248 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 c016248:	defffd04 	addi	sp,sp,-12
 c01624c:	dfc00215 	stw	ra,8(sp)
 c016250:	df000115 	stw	fp,4(sp)
 c016254:	df000104 	addi	fp,sp,4
 c016258:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 c01625c:	e13fff17 	ldw	r4,-4(fp)
 c016260:	c0173080 	call	c017308 <alt_busy_sleep>
}
 c016264:	e037883a 	mov	sp,fp
 c016268:	dfc00117 	ldw	ra,4(sp)
 c01626c:	df000017 	ldw	fp,0(sp)
 c016270:	dec00204 	addi	sp,sp,8
 c016274:	f800283a 	ret

0c016278 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c016278:	defffe04 	addi	sp,sp,-8
 c01627c:	dfc00115 	stw	ra,4(sp)
 c016280:	df000015 	stw	fp,0(sp)
 c016284:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c016288:	d0a01317 	ldw	r2,-32692(gp)
 c01628c:	10000326 	beq	r2,zero,c01629c <alt_get_errno+0x24>
 c016290:	d0a01317 	ldw	r2,-32692(gp)
 c016294:	103ee83a 	callr	r2
 c016298:	00000106 	br	c0162a0 <alt_get_errno+0x28>
 c01629c:	d0a7ab04 	addi	r2,gp,-24916
}
 c0162a0:	e037883a 	mov	sp,fp
 c0162a4:	dfc00117 	ldw	ra,4(sp)
 c0162a8:	df000017 	ldw	fp,0(sp)
 c0162ac:	dec00204 	addi	sp,sp,8
 c0162b0:	f800283a 	ret

0c0162b4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 c0162b4:	defff904 	addi	sp,sp,-28
 c0162b8:	dfc00615 	stw	ra,24(sp)
 c0162bc:	df000515 	stw	fp,20(sp)
 c0162c0:	df000504 	addi	fp,sp,20
 c0162c4:	e13ffd15 	stw	r4,-12(fp)
 c0162c8:	e17ffe15 	stw	r5,-8(fp)
 c0162cc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 c0162d0:	e0bffd17 	ldw	r2,-12(fp)
 c0162d4:	10000816 	blt	r2,zero,c0162f8 <write+0x44>
 c0162d8:	01400304 	movi	r5,12
 c0162dc:	e13ffd17 	ldw	r4,-12(fp)
 c0162e0:	c004de00 	call	c004de0 <__mulsi3>
 c0162e4:	1007883a 	mov	r3,r2
 c0162e8:	008300b4 	movhi	r2,3074
 c0162ec:	10a5a504 	addi	r2,r2,-26988
 c0162f0:	1885883a 	add	r2,r3,r2
 c0162f4:	00000106 	br	c0162fc <write+0x48>
 c0162f8:	0005883a 	mov	r2,zero
 c0162fc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 c016300:	e0bffb17 	ldw	r2,-20(fp)
 c016304:	10002126 	beq	r2,zero,c01638c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 c016308:	e0bffb17 	ldw	r2,-20(fp)
 c01630c:	10800217 	ldw	r2,8(r2)
 c016310:	108000cc 	andi	r2,r2,3
 c016314:	10001826 	beq	r2,zero,c016378 <write+0xc4>
 c016318:	e0bffb17 	ldw	r2,-20(fp)
 c01631c:	10800017 	ldw	r2,0(r2)
 c016320:	10800617 	ldw	r2,24(r2)
 c016324:	10001426 	beq	r2,zero,c016378 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 c016328:	e0bffb17 	ldw	r2,-20(fp)
 c01632c:	10800017 	ldw	r2,0(r2)
 c016330:	10800617 	ldw	r2,24(r2)
 c016334:	e0ffff17 	ldw	r3,-4(fp)
 c016338:	180d883a 	mov	r6,r3
 c01633c:	e17ffe17 	ldw	r5,-8(fp)
 c016340:	e13ffb17 	ldw	r4,-20(fp)
 c016344:	103ee83a 	callr	r2
 c016348:	e0bffc15 	stw	r2,-16(fp)
 c01634c:	e0bffc17 	ldw	r2,-16(fp)
 c016350:	1000070e 	bge	r2,zero,c016370 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 c016354:	c0162780 	call	c016278 <alt_get_errno>
 c016358:	1007883a 	mov	r3,r2
 c01635c:	e0bffc17 	ldw	r2,-16(fp)
 c016360:	0085c83a 	sub	r2,zero,r2
 c016364:	18800015 	stw	r2,0(r3)
        return -1;
 c016368:	00bfffc4 	movi	r2,-1
 c01636c:	00000c06 	br	c0163a0 <write+0xec>
      }
      return rval;
 c016370:	e0bffc17 	ldw	r2,-16(fp)
 c016374:	00000a06 	br	c0163a0 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 c016378:	c0162780 	call	c016278 <alt_get_errno>
 c01637c:	1007883a 	mov	r3,r2
 c016380:	00800344 	movi	r2,13
 c016384:	18800015 	stw	r2,0(r3)
 c016388:	00000406 	br	c01639c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 c01638c:	c0162780 	call	c016278 <alt_get_errno>
 c016390:	1007883a 	mov	r3,r2
 c016394:	00801444 	movi	r2,81
 c016398:	18800015 	stw	r2,0(r3)
  }
  return -1;
 c01639c:	00bfffc4 	movi	r2,-1
}
 c0163a0:	e037883a 	mov	sp,fp
 c0163a4:	dfc00117 	ldw	ra,4(sp)
 c0163a8:	df000017 	ldw	fp,0(sp)
 c0163ac:	dec00204 	addi	sp,sp,8
 c0163b0:	f800283a 	ret

0c0163b4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 c0163b4:	defffd04 	addi	sp,sp,-12
 c0163b8:	dfc00215 	stw	ra,8(sp)
 c0163bc:	df000115 	stw	fp,4(sp)
 c0163c0:	df000104 	addi	fp,sp,4
 c0163c4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 c0163c8:	d1601004 	addi	r5,gp,-32704
 c0163cc:	e13fff17 	ldw	r4,-4(fp)
 c0163d0:	c0174bc0 	call	c0174bc <alt_dev_llist_insert>
}
 c0163d4:	e037883a 	mov	sp,fp
 c0163d8:	dfc00117 	ldw	ra,4(sp)
 c0163dc:	df000017 	ldw	fp,0(sp)
 c0163e0:	dec00204 	addi	sp,sp,8
 c0163e4:	f800283a 	ret

0c0163e8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 c0163e8:	defffd04 	addi	sp,sp,-12
 c0163ec:	dfc00215 	stw	ra,8(sp)
 c0163f0:	df000115 	stw	fp,4(sp)
 c0163f4:	df000104 	addi	fp,sp,4
 c0163f8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 c0163fc:	c017cc40 	call	c017cc4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 c016400:	00800044 	movi	r2,1
 c016404:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 c016408:	0001883a 	nop
 c01640c:	e037883a 	mov	sp,fp
 c016410:	dfc00117 	ldw	ra,4(sp)
 c016414:	df000017 	ldw	fp,0(sp)
 c016418:	dec00204 	addi	sp,sp,8
 c01641c:	f800283a 	ret

0c016420 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 c016420:	defffe04 	addi	sp,sp,-8
 c016424:	dfc00115 	stw	ra,4(sp)
 c016428:	df000015 	stw	fp,0(sp)
 c01642c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 c016430:	01c0fa04 	movi	r7,1000
 c016434:	01800084 	movi	r6,2
 c016438:	000b883a 	mov	r5,zero
 c01643c:	01002004 	movi	r4,128
 c016440:	c0171600 	call	c017160 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 c016444:	01800044 	movi	r6,1
 c016448:	000b883a 	mov	r5,zero
 c01644c:	010300b4 	movhi	r4,3074
 c016450:	21260f04 	addi	r4,r4,-26564
 c016454:	c0165e80 	call	c0165e8 <altera_avalon_jtag_uart_init>
 c016458:	010300b4 	movhi	r4,3074
 c01645c:	21260504 	addi	r4,r4,-26604
 c016460:	c0163b40 	call	c0163b4 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 c016464:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 c016468:	0001883a 	nop
}
 c01646c:	0001883a 	nop
 c016470:	e037883a 	mov	sp,fp
 c016474:	dfc00117 	ldw	ra,4(sp)
 c016478:	df000017 	ldw	fp,0(sp)
 c01647c:	dec00204 	addi	sp,sp,8
 c016480:	f800283a 	ret

0c016484 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 c016484:	defffa04 	addi	sp,sp,-24
 c016488:	dfc00515 	stw	ra,20(sp)
 c01648c:	df000415 	stw	fp,16(sp)
 c016490:	df000404 	addi	fp,sp,16
 c016494:	e13ffd15 	stw	r4,-12(fp)
 c016498:	e17ffe15 	stw	r5,-8(fp)
 c01649c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 c0164a0:	e0bffd17 	ldw	r2,-12(fp)
 c0164a4:	10800017 	ldw	r2,0(r2)
 c0164a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 c0164ac:	e0bffc17 	ldw	r2,-16(fp)
 c0164b0:	10c00a04 	addi	r3,r2,40
 c0164b4:	e0bffd17 	ldw	r2,-12(fp)
 c0164b8:	10800217 	ldw	r2,8(r2)
 c0164bc:	100f883a 	mov	r7,r2
 c0164c0:	e1bfff17 	ldw	r6,-4(fp)
 c0164c4:	e17ffe17 	ldw	r5,-8(fp)
 c0164c8:	1809883a 	mov	r4,r3
 c0164cc:	c016aac0 	call	c016aac <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 c0164d0:	e037883a 	mov	sp,fp
 c0164d4:	dfc00117 	ldw	ra,4(sp)
 c0164d8:	df000017 	ldw	fp,0(sp)
 c0164dc:	dec00204 	addi	sp,sp,8
 c0164e0:	f800283a 	ret

0c0164e4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 c0164e4:	defffa04 	addi	sp,sp,-24
 c0164e8:	dfc00515 	stw	ra,20(sp)
 c0164ec:	df000415 	stw	fp,16(sp)
 c0164f0:	df000404 	addi	fp,sp,16
 c0164f4:	e13ffd15 	stw	r4,-12(fp)
 c0164f8:	e17ffe15 	stw	r5,-8(fp)
 c0164fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 c016500:	e0bffd17 	ldw	r2,-12(fp)
 c016504:	10800017 	ldw	r2,0(r2)
 c016508:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 c01650c:	e0bffc17 	ldw	r2,-16(fp)
 c016510:	10c00a04 	addi	r3,r2,40
 c016514:	e0bffd17 	ldw	r2,-12(fp)
 c016518:	10800217 	ldw	r2,8(r2)
 c01651c:	100f883a 	mov	r7,r2
 c016520:	e1bfff17 	ldw	r6,-4(fp)
 c016524:	e17ffe17 	ldw	r5,-8(fp)
 c016528:	1809883a 	mov	r4,r3
 c01652c:	c016cc80 	call	c016cc8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 c016530:	e037883a 	mov	sp,fp
 c016534:	dfc00117 	ldw	ra,4(sp)
 c016538:	df000017 	ldw	fp,0(sp)
 c01653c:	dec00204 	addi	sp,sp,8
 c016540:	f800283a 	ret

0c016544 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 c016544:	defffc04 	addi	sp,sp,-16
 c016548:	dfc00315 	stw	ra,12(sp)
 c01654c:	df000215 	stw	fp,8(sp)
 c016550:	df000204 	addi	fp,sp,8
 c016554:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 c016558:	e0bfff17 	ldw	r2,-4(fp)
 c01655c:	10800017 	ldw	r2,0(r2)
 c016560:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 c016564:	e0bffe17 	ldw	r2,-8(fp)
 c016568:	10c00a04 	addi	r3,r2,40
 c01656c:	e0bfff17 	ldw	r2,-4(fp)
 c016570:	10800217 	ldw	r2,8(r2)
 c016574:	100b883a 	mov	r5,r2
 c016578:	1809883a 	mov	r4,r3
 c01657c:	c0169540 	call	c016954 <altera_avalon_jtag_uart_close>
}
 c016580:	e037883a 	mov	sp,fp
 c016584:	dfc00117 	ldw	ra,4(sp)
 c016588:	df000017 	ldw	fp,0(sp)
 c01658c:	dec00204 	addi	sp,sp,8
 c016590:	f800283a 	ret

0c016594 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 c016594:	defffa04 	addi	sp,sp,-24
 c016598:	dfc00515 	stw	ra,20(sp)
 c01659c:	df000415 	stw	fp,16(sp)
 c0165a0:	df000404 	addi	fp,sp,16
 c0165a4:	e13ffd15 	stw	r4,-12(fp)
 c0165a8:	e17ffe15 	stw	r5,-8(fp)
 c0165ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 c0165b0:	e0bffd17 	ldw	r2,-12(fp)
 c0165b4:	10800017 	ldw	r2,0(r2)
 c0165b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 c0165bc:	e0bffc17 	ldw	r2,-16(fp)
 c0165c0:	10800a04 	addi	r2,r2,40
 c0165c4:	e1bfff17 	ldw	r6,-4(fp)
 c0165c8:	e17ffe17 	ldw	r5,-8(fp)
 c0165cc:	1009883a 	mov	r4,r2
 c0165d0:	c0169bc0 	call	c0169bc <altera_avalon_jtag_uart_ioctl>
}
 c0165d4:	e037883a 	mov	sp,fp
 c0165d8:	dfc00117 	ldw	ra,4(sp)
 c0165dc:	df000017 	ldw	fp,0(sp)
 c0165e0:	dec00204 	addi	sp,sp,8
 c0165e4:	f800283a 	ret

0c0165e8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 c0165e8:	defffa04 	addi	sp,sp,-24
 c0165ec:	dfc00515 	stw	ra,20(sp)
 c0165f0:	df000415 	stw	fp,16(sp)
 c0165f4:	df000404 	addi	fp,sp,16
 c0165f8:	e13ffd15 	stw	r4,-12(fp)
 c0165fc:	e17ffe15 	stw	r5,-8(fp)
 c016600:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 c016604:	e0bffd17 	ldw	r2,-12(fp)
 c016608:	00c00044 	movi	r3,1
 c01660c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 c016610:	e0bffd17 	ldw	r2,-12(fp)
 c016614:	10800017 	ldw	r2,0(r2)
 c016618:	10800104 	addi	r2,r2,4
 c01661c:	1007883a 	mov	r3,r2
 c016620:	e0bffd17 	ldw	r2,-12(fp)
 c016624:	10800817 	ldw	r2,32(r2)
 c016628:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 c01662c:	e0bffe17 	ldw	r2,-8(fp)
 c016630:	e0ffff17 	ldw	r3,-4(fp)
 c016634:	d8000015 	stw	zero,0(sp)
 c016638:	e1fffd17 	ldw	r7,-12(fp)
 c01663c:	01830074 	movhi	r6,3073
 c016640:	3199aa04 	addi	r6,r6,26280
 c016644:	180b883a 	mov	r5,r3
 c016648:	1009883a 	mov	r4,r2
 c01664c:	c0176400 	call	c017640 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 c016650:	e0bffd17 	ldw	r2,-12(fp)
 c016654:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 c016658:	e0bffd17 	ldw	r2,-12(fp)
 c01665c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 c016660:	d0e7af17 	ldw	r3,-24900(gp)
 c016664:	e1fffd17 	ldw	r7,-12(fp)
 c016668:	01830074 	movhi	r6,3073
 c01666c:	319a2d04 	addi	r6,r6,26804
 c016670:	180b883a 	mov	r5,r3
 c016674:	1009883a 	mov	r4,r2
 c016678:	c0171dc0 	call	c0171dc <alt_alarm_start>
 c01667c:	1000040e 	bge	r2,zero,c016690 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 c016680:	e0fffd17 	ldw	r3,-12(fp)
 c016684:	00a00034 	movhi	r2,32768
 c016688:	10bfffc4 	addi	r2,r2,-1
 c01668c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 c016690:	0001883a 	nop
 c016694:	e037883a 	mov	sp,fp
 c016698:	dfc00117 	ldw	ra,4(sp)
 c01669c:	df000017 	ldw	fp,0(sp)
 c0166a0:	dec00204 	addi	sp,sp,8
 c0166a4:	f800283a 	ret

0c0166a8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 c0166a8:	defff804 	addi	sp,sp,-32
 c0166ac:	df000715 	stw	fp,28(sp)
 c0166b0:	df000704 	addi	fp,sp,28
 c0166b4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 c0166b8:	e0bfff17 	ldw	r2,-4(fp)
 c0166bc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 c0166c0:	e0bffb17 	ldw	r2,-20(fp)
 c0166c4:	10800017 	ldw	r2,0(r2)
 c0166c8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 c0166cc:	e0bffc17 	ldw	r2,-16(fp)
 c0166d0:	10800104 	addi	r2,r2,4
 c0166d4:	10800037 	ldwio	r2,0(r2)
 c0166d8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 c0166dc:	e0bffd17 	ldw	r2,-12(fp)
 c0166e0:	1080c00c 	andi	r2,r2,768
 c0166e4:	10006d26 	beq	r2,zero,c01689c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 c0166e8:	e0bffd17 	ldw	r2,-12(fp)
 c0166ec:	1080400c 	andi	r2,r2,256
 c0166f0:	10003526 	beq	r2,zero,c0167c8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 c0166f4:	00800074 	movhi	r2,1
 c0166f8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c0166fc:	e0bffb17 	ldw	r2,-20(fp)
 c016700:	10800a17 	ldw	r2,40(r2)
 c016704:	10800044 	addi	r2,r2,1
 c016708:	1081ffcc 	andi	r2,r2,2047
 c01670c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 c016710:	e0bffb17 	ldw	r2,-20(fp)
 c016714:	10c00b17 	ldw	r3,44(r2)
 c016718:	e0bffe17 	ldw	r2,-8(fp)
 c01671c:	18801526 	beq	r3,r2,c016774 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 c016720:	e0bffc17 	ldw	r2,-16(fp)
 c016724:	10800037 	ldwio	r2,0(r2)
 c016728:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 c01672c:	e0bff917 	ldw	r2,-28(fp)
 c016730:	10a0000c 	andi	r2,r2,32768
 c016734:	10001126 	beq	r2,zero,c01677c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 c016738:	e0bffb17 	ldw	r2,-20(fp)
 c01673c:	10800a17 	ldw	r2,40(r2)
 c016740:	e0fff917 	ldw	r3,-28(fp)
 c016744:	1809883a 	mov	r4,r3
 c016748:	e0fffb17 	ldw	r3,-20(fp)
 c01674c:	1885883a 	add	r2,r3,r2
 c016750:	10800e04 	addi	r2,r2,56
 c016754:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c016758:	e0bffb17 	ldw	r2,-20(fp)
 c01675c:	10800a17 	ldw	r2,40(r2)
 c016760:	10800044 	addi	r2,r2,1
 c016764:	10c1ffcc 	andi	r3,r2,2047
 c016768:	e0bffb17 	ldw	r2,-20(fp)
 c01676c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 c016770:	003fe206 	br	c0166fc <__alt_data_end+0xfc0166fc>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 c016774:	0001883a 	nop
 c016778:	00000106 	br	c016780 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 c01677c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 c016780:	e0bff917 	ldw	r2,-28(fp)
 c016784:	10bfffec 	andhi	r2,r2,65535
 c016788:	10000f26 	beq	r2,zero,c0167c8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 c01678c:	e0bffb17 	ldw	r2,-20(fp)
 c016790:	10c00817 	ldw	r3,32(r2)
 c016794:	00bfff84 	movi	r2,-2
 c016798:	1886703a 	and	r3,r3,r2
 c01679c:	e0bffb17 	ldw	r2,-20(fp)
 c0167a0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 c0167a4:	e0bffc17 	ldw	r2,-16(fp)
 c0167a8:	10800104 	addi	r2,r2,4
 c0167ac:	1007883a 	mov	r3,r2
 c0167b0:	e0bffb17 	ldw	r2,-20(fp)
 c0167b4:	10800817 	ldw	r2,32(r2)
 c0167b8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 c0167bc:	e0bffc17 	ldw	r2,-16(fp)
 c0167c0:	10800104 	addi	r2,r2,4
 c0167c4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 c0167c8:	e0bffd17 	ldw	r2,-12(fp)
 c0167cc:	1080800c 	andi	r2,r2,512
 c0167d0:	103fbe26 	beq	r2,zero,c0166cc <__alt_data_end+0xfc0166cc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 c0167d4:	e0bffd17 	ldw	r2,-12(fp)
 c0167d8:	1004d43a 	srli	r2,r2,16
 c0167dc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 c0167e0:	00001406 	br	c016834 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 c0167e4:	e0bffc17 	ldw	r2,-16(fp)
 c0167e8:	e0fffb17 	ldw	r3,-20(fp)
 c0167ec:	18c00d17 	ldw	r3,52(r3)
 c0167f0:	e13ffb17 	ldw	r4,-20(fp)
 c0167f4:	20c7883a 	add	r3,r4,r3
 c0167f8:	18c20e04 	addi	r3,r3,2104
 c0167fc:	18c00003 	ldbu	r3,0(r3)
 c016800:	18c03fcc 	andi	r3,r3,255
 c016804:	18c0201c 	xori	r3,r3,128
 c016808:	18ffe004 	addi	r3,r3,-128
 c01680c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c016810:	e0bffb17 	ldw	r2,-20(fp)
 c016814:	10800d17 	ldw	r2,52(r2)
 c016818:	10800044 	addi	r2,r2,1
 c01681c:	10c1ffcc 	andi	r3,r2,2047
 c016820:	e0bffb17 	ldw	r2,-20(fp)
 c016824:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 c016828:	e0bffa17 	ldw	r2,-24(fp)
 c01682c:	10bfffc4 	addi	r2,r2,-1
 c016830:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 c016834:	e0bffa17 	ldw	r2,-24(fp)
 c016838:	10000526 	beq	r2,zero,c016850 <altera_avalon_jtag_uart_irq+0x1a8>
 c01683c:	e0bffb17 	ldw	r2,-20(fp)
 c016840:	10c00d17 	ldw	r3,52(r2)
 c016844:	e0bffb17 	ldw	r2,-20(fp)
 c016848:	10800c17 	ldw	r2,48(r2)
 c01684c:	18bfe51e 	bne	r3,r2,c0167e4 <__alt_data_end+0xfc0167e4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 c016850:	e0bffa17 	ldw	r2,-24(fp)
 c016854:	103f9d26 	beq	r2,zero,c0166cc <__alt_data_end+0xfc0166cc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 c016858:	e0bffb17 	ldw	r2,-20(fp)
 c01685c:	10c00817 	ldw	r3,32(r2)
 c016860:	00bfff44 	movi	r2,-3
 c016864:	1886703a 	and	r3,r3,r2
 c016868:	e0bffb17 	ldw	r2,-20(fp)
 c01686c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 c016870:	e0bffb17 	ldw	r2,-20(fp)
 c016874:	10800017 	ldw	r2,0(r2)
 c016878:	10800104 	addi	r2,r2,4
 c01687c:	1007883a 	mov	r3,r2
 c016880:	e0bffb17 	ldw	r2,-20(fp)
 c016884:	10800817 	ldw	r2,32(r2)
 c016888:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 c01688c:	e0bffc17 	ldw	r2,-16(fp)
 c016890:	10800104 	addi	r2,r2,4
 c016894:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 c016898:	003f8c06 	br	c0166cc <__alt_data_end+0xfc0166cc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 c01689c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 c0168a0:	0001883a 	nop
 c0168a4:	e037883a 	mov	sp,fp
 c0168a8:	df000017 	ldw	fp,0(sp)
 c0168ac:	dec00104 	addi	sp,sp,4
 c0168b0:	f800283a 	ret

0c0168b4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 c0168b4:	defff804 	addi	sp,sp,-32
 c0168b8:	df000715 	stw	fp,28(sp)
 c0168bc:	df000704 	addi	fp,sp,28
 c0168c0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 c0168c4:	e0bffb17 	ldw	r2,-20(fp)
 c0168c8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 c0168cc:	e0bff917 	ldw	r2,-28(fp)
 c0168d0:	10800017 	ldw	r2,0(r2)
 c0168d4:	10800104 	addi	r2,r2,4
 c0168d8:	10800037 	ldwio	r2,0(r2)
 c0168dc:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 c0168e0:	e0bffa17 	ldw	r2,-24(fp)
 c0168e4:	1081000c 	andi	r2,r2,1024
 c0168e8:	10000b26 	beq	r2,zero,c016918 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 c0168ec:	e0bff917 	ldw	r2,-28(fp)
 c0168f0:	10800017 	ldw	r2,0(r2)
 c0168f4:	10800104 	addi	r2,r2,4
 c0168f8:	1007883a 	mov	r3,r2
 c0168fc:	e0bff917 	ldw	r2,-28(fp)
 c016900:	10800817 	ldw	r2,32(r2)
 c016904:	10810014 	ori	r2,r2,1024
 c016908:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 c01690c:	e0bff917 	ldw	r2,-28(fp)
 c016910:	10000915 	stw	zero,36(r2)
 c016914:	00000a06 	br	c016940 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 c016918:	e0bff917 	ldw	r2,-28(fp)
 c01691c:	10c00917 	ldw	r3,36(r2)
 c016920:	00a00034 	movhi	r2,32768
 c016924:	10bfff04 	addi	r2,r2,-4
 c016928:	10c00536 	bltu	r2,r3,c016940 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 c01692c:	e0bff917 	ldw	r2,-28(fp)
 c016930:	10800917 	ldw	r2,36(r2)
 c016934:	10c00044 	addi	r3,r2,1
 c016938:	e0bff917 	ldw	r2,-28(fp)
 c01693c:	10c00915 	stw	r3,36(r2)
 c016940:	d0a7af17 	ldw	r2,-24900(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 c016944:	e037883a 	mov	sp,fp
 c016948:	df000017 	ldw	fp,0(sp)
 c01694c:	dec00104 	addi	sp,sp,4
 c016950:	f800283a 	ret

0c016954 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 c016954:	defffd04 	addi	sp,sp,-12
 c016958:	df000215 	stw	fp,8(sp)
 c01695c:	df000204 	addi	fp,sp,8
 c016960:	e13ffe15 	stw	r4,-8(fp)
 c016964:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 c016968:	00000506 	br	c016980 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 c01696c:	e0bfff17 	ldw	r2,-4(fp)
 c016970:	1090000c 	andi	r2,r2,16384
 c016974:	10000226 	beq	r2,zero,c016980 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 c016978:	00bffd44 	movi	r2,-11
 c01697c:	00000b06 	br	c0169ac <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 c016980:	e0bffe17 	ldw	r2,-8(fp)
 c016984:	10c00d17 	ldw	r3,52(r2)
 c016988:	e0bffe17 	ldw	r2,-8(fp)
 c01698c:	10800c17 	ldw	r2,48(r2)
 c016990:	18800526 	beq	r3,r2,c0169a8 <altera_avalon_jtag_uart_close+0x54>
 c016994:	e0bffe17 	ldw	r2,-8(fp)
 c016998:	10c00917 	ldw	r3,36(r2)
 c01699c:	e0bffe17 	ldw	r2,-8(fp)
 c0169a0:	10800117 	ldw	r2,4(r2)
 c0169a4:	18bff136 	bltu	r3,r2,c01696c <__alt_data_end+0xfc01696c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 c0169a8:	0005883a 	mov	r2,zero
}
 c0169ac:	e037883a 	mov	sp,fp
 c0169b0:	df000017 	ldw	fp,0(sp)
 c0169b4:	dec00104 	addi	sp,sp,4
 c0169b8:	f800283a 	ret

0c0169bc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 c0169bc:	defffa04 	addi	sp,sp,-24
 c0169c0:	df000515 	stw	fp,20(sp)
 c0169c4:	df000504 	addi	fp,sp,20
 c0169c8:	e13ffd15 	stw	r4,-12(fp)
 c0169cc:	e17ffe15 	stw	r5,-8(fp)
 c0169d0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 c0169d4:	00bff9c4 	movi	r2,-25
 c0169d8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 c0169dc:	e0bffe17 	ldw	r2,-8(fp)
 c0169e0:	10da8060 	cmpeqi	r3,r2,27137
 c0169e4:	1800031e 	bne	r3,zero,c0169f4 <altera_avalon_jtag_uart_ioctl+0x38>
 c0169e8:	109a80a0 	cmpeqi	r2,r2,27138
 c0169ec:	1000181e 	bne	r2,zero,c016a50 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 c0169f0:	00002906 	br	c016a98 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 c0169f4:	e0bffd17 	ldw	r2,-12(fp)
 c0169f8:	10c00117 	ldw	r3,4(r2)
 c0169fc:	00a00034 	movhi	r2,32768
 c016a00:	10bfffc4 	addi	r2,r2,-1
 c016a04:	18802126 	beq	r3,r2,c016a8c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 c016a08:	e0bfff17 	ldw	r2,-4(fp)
 c016a0c:	10800017 	ldw	r2,0(r2)
 c016a10:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 c016a14:	e0bffc17 	ldw	r2,-16(fp)
 c016a18:	10800090 	cmplti	r2,r2,2
 c016a1c:	1000061e 	bne	r2,zero,c016a38 <altera_avalon_jtag_uart_ioctl+0x7c>
 c016a20:	e0fffc17 	ldw	r3,-16(fp)
 c016a24:	00a00034 	movhi	r2,32768
 c016a28:	10bfffc4 	addi	r2,r2,-1
 c016a2c:	18800226 	beq	r3,r2,c016a38 <altera_avalon_jtag_uart_ioctl+0x7c>
 c016a30:	e0bffc17 	ldw	r2,-16(fp)
 c016a34:	00000206 	br	c016a40 <altera_avalon_jtag_uart_ioctl+0x84>
 c016a38:	00a00034 	movhi	r2,32768
 c016a3c:	10bfff84 	addi	r2,r2,-2
 c016a40:	e0fffd17 	ldw	r3,-12(fp)
 c016a44:	18800115 	stw	r2,4(r3)
      rc = 0;
 c016a48:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 c016a4c:	00000f06 	br	c016a8c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 c016a50:	e0bffd17 	ldw	r2,-12(fp)
 c016a54:	10c00117 	ldw	r3,4(r2)
 c016a58:	00a00034 	movhi	r2,32768
 c016a5c:	10bfffc4 	addi	r2,r2,-1
 c016a60:	18800c26 	beq	r3,r2,c016a94 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 c016a64:	e0bffd17 	ldw	r2,-12(fp)
 c016a68:	10c00917 	ldw	r3,36(r2)
 c016a6c:	e0bffd17 	ldw	r2,-12(fp)
 c016a70:	10800117 	ldw	r2,4(r2)
 c016a74:	1885803a 	cmpltu	r2,r3,r2
 c016a78:	10c03fcc 	andi	r3,r2,255
 c016a7c:	e0bfff17 	ldw	r2,-4(fp)
 c016a80:	10c00015 	stw	r3,0(r2)
      rc = 0;
 c016a84:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 c016a88:	00000206 	br	c016a94 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 c016a8c:	0001883a 	nop
 c016a90:	00000106 	br	c016a98 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 c016a94:	0001883a 	nop

  default:
    break;
  }

  return rc;
 c016a98:	e0bffb17 	ldw	r2,-20(fp)
}
 c016a9c:	e037883a 	mov	sp,fp
 c016aa0:	df000017 	ldw	fp,0(sp)
 c016aa4:	dec00104 	addi	sp,sp,4
 c016aa8:	f800283a 	ret

0c016aac <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 c016aac:	defff304 	addi	sp,sp,-52
 c016ab0:	dfc00c15 	stw	ra,48(sp)
 c016ab4:	df000b15 	stw	fp,44(sp)
 c016ab8:	df000b04 	addi	fp,sp,44
 c016abc:	e13ffc15 	stw	r4,-16(fp)
 c016ac0:	e17ffd15 	stw	r5,-12(fp)
 c016ac4:	e1bffe15 	stw	r6,-8(fp)
 c016ac8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 c016acc:	e0bffd17 	ldw	r2,-12(fp)
 c016ad0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 c016ad4:	00004706 	br	c016bf4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 c016ad8:	e0bffc17 	ldw	r2,-16(fp)
 c016adc:	10800a17 	ldw	r2,40(r2)
 c016ae0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 c016ae4:	e0bffc17 	ldw	r2,-16(fp)
 c016ae8:	10800b17 	ldw	r2,44(r2)
 c016aec:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 c016af0:	e0fff717 	ldw	r3,-36(fp)
 c016af4:	e0bff817 	ldw	r2,-32(fp)
 c016af8:	18800536 	bltu	r3,r2,c016b10 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 c016afc:	e0fff717 	ldw	r3,-36(fp)
 c016b00:	e0bff817 	ldw	r2,-32(fp)
 c016b04:	1885c83a 	sub	r2,r3,r2
 c016b08:	e0bff615 	stw	r2,-40(fp)
 c016b0c:	00000406 	br	c016b20 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 c016b10:	00c20004 	movi	r3,2048
 c016b14:	e0bff817 	ldw	r2,-32(fp)
 c016b18:	1885c83a 	sub	r2,r3,r2
 c016b1c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 c016b20:	e0bff617 	ldw	r2,-40(fp)
 c016b24:	10001e26 	beq	r2,zero,c016ba0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 c016b28:	e0fffe17 	ldw	r3,-8(fp)
 c016b2c:	e0bff617 	ldw	r2,-40(fp)
 c016b30:	1880022e 	bgeu	r3,r2,c016b3c <altera_avalon_jtag_uart_read+0x90>
        n = space;
 c016b34:	e0bffe17 	ldw	r2,-8(fp)
 c016b38:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 c016b3c:	e0bffc17 	ldw	r2,-16(fp)
 c016b40:	10c00e04 	addi	r3,r2,56
 c016b44:	e0bff817 	ldw	r2,-32(fp)
 c016b48:	1885883a 	add	r2,r3,r2
 c016b4c:	e1bff617 	ldw	r6,-40(fp)
 c016b50:	100b883a 	mov	r5,r2
 c016b54:	e13ff517 	ldw	r4,-44(fp)
 c016b58:	c00cdf80 	call	c00cdf8 <memcpy>
      ptr   += n;
 c016b5c:	e0fff517 	ldw	r3,-44(fp)
 c016b60:	e0bff617 	ldw	r2,-40(fp)
 c016b64:	1885883a 	add	r2,r3,r2
 c016b68:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 c016b6c:	e0fffe17 	ldw	r3,-8(fp)
 c016b70:	e0bff617 	ldw	r2,-40(fp)
 c016b74:	1885c83a 	sub	r2,r3,r2
 c016b78:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c016b7c:	e0fff817 	ldw	r3,-32(fp)
 c016b80:	e0bff617 	ldw	r2,-40(fp)
 c016b84:	1885883a 	add	r2,r3,r2
 c016b88:	10c1ffcc 	andi	r3,r2,2047
 c016b8c:	e0bffc17 	ldw	r2,-16(fp)
 c016b90:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 c016b94:	e0bffe17 	ldw	r2,-8(fp)
 c016b98:	00bfcf16 	blt	zero,r2,c016ad8 <__alt_data_end+0xfc016ad8>
 c016b9c:	00000106 	br	c016ba4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 c016ba0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 c016ba4:	e0fff517 	ldw	r3,-44(fp)
 c016ba8:	e0bffd17 	ldw	r2,-12(fp)
 c016bac:	1880141e 	bne	r3,r2,c016c00 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 c016bb0:	e0bfff17 	ldw	r2,-4(fp)
 c016bb4:	1090000c 	andi	r2,r2,16384
 c016bb8:	1000131e 	bne	r2,zero,c016c08 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 c016bbc:	0001883a 	nop
 c016bc0:	e0bffc17 	ldw	r2,-16(fp)
 c016bc4:	10c00a17 	ldw	r3,40(r2)
 c016bc8:	e0bff717 	ldw	r2,-36(fp)
 c016bcc:	1880051e 	bne	r3,r2,c016be4 <altera_avalon_jtag_uart_read+0x138>
 c016bd0:	e0bffc17 	ldw	r2,-16(fp)
 c016bd4:	10c00917 	ldw	r3,36(r2)
 c016bd8:	e0bffc17 	ldw	r2,-16(fp)
 c016bdc:	10800117 	ldw	r2,4(r2)
 c016be0:	18bff736 	bltu	r3,r2,c016bc0 <__alt_data_end+0xfc016bc0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 c016be4:	e0bffc17 	ldw	r2,-16(fp)
 c016be8:	10c00a17 	ldw	r3,40(r2)
 c016bec:	e0bff717 	ldw	r2,-36(fp)
 c016bf0:	18800726 	beq	r3,r2,c016c10 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 c016bf4:	e0bffe17 	ldw	r2,-8(fp)
 c016bf8:	00bfb716 	blt	zero,r2,c016ad8 <__alt_data_end+0xfc016ad8>
 c016bfc:	00000506 	br	c016c14 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 c016c00:	0001883a 	nop
 c016c04:	00000306 	br	c016c14 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 c016c08:	0001883a 	nop
 c016c0c:	00000106 	br	c016c14 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 c016c10:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 c016c14:	e0fff517 	ldw	r3,-44(fp)
 c016c18:	e0bffd17 	ldw	r2,-12(fp)
 c016c1c:	18801826 	beq	r3,r2,c016c80 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c016c20:	0005303a 	rdctl	r2,status
 c016c24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c016c28:	e0fffb17 	ldw	r3,-20(fp)
 c016c2c:	00bfff84 	movi	r2,-2
 c016c30:	1884703a 	and	r2,r3,r2
 c016c34:	1001703a 	wrctl	status,r2
  
  return context;
 c016c38:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 c016c3c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 c016c40:	e0bffc17 	ldw	r2,-16(fp)
 c016c44:	10800817 	ldw	r2,32(r2)
 c016c48:	10c00054 	ori	r3,r2,1
 c016c4c:	e0bffc17 	ldw	r2,-16(fp)
 c016c50:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 c016c54:	e0bffc17 	ldw	r2,-16(fp)
 c016c58:	10800017 	ldw	r2,0(r2)
 c016c5c:	10800104 	addi	r2,r2,4
 c016c60:	1007883a 	mov	r3,r2
 c016c64:	e0bffc17 	ldw	r2,-16(fp)
 c016c68:	10800817 	ldw	r2,32(r2)
 c016c6c:	18800035 	stwio	r2,0(r3)
 c016c70:	e0bffa17 	ldw	r2,-24(fp)
 c016c74:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c016c78:	e0bff917 	ldw	r2,-28(fp)
 c016c7c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 c016c80:	e0fff517 	ldw	r3,-44(fp)
 c016c84:	e0bffd17 	ldw	r2,-12(fp)
 c016c88:	18800426 	beq	r3,r2,c016c9c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 c016c8c:	e0fff517 	ldw	r3,-44(fp)
 c016c90:	e0bffd17 	ldw	r2,-12(fp)
 c016c94:	1885c83a 	sub	r2,r3,r2
 c016c98:	00000606 	br	c016cb4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 c016c9c:	e0bfff17 	ldw	r2,-4(fp)
 c016ca0:	1090000c 	andi	r2,r2,16384
 c016ca4:	10000226 	beq	r2,zero,c016cb0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 c016ca8:	00bffd44 	movi	r2,-11
 c016cac:	00000106 	br	c016cb4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 c016cb0:	00bffec4 	movi	r2,-5
}
 c016cb4:	e037883a 	mov	sp,fp
 c016cb8:	dfc00117 	ldw	ra,4(sp)
 c016cbc:	df000017 	ldw	fp,0(sp)
 c016cc0:	dec00204 	addi	sp,sp,8
 c016cc4:	f800283a 	ret

0c016cc8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 c016cc8:	defff304 	addi	sp,sp,-52
 c016ccc:	dfc00c15 	stw	ra,48(sp)
 c016cd0:	df000b15 	stw	fp,44(sp)
 c016cd4:	df000b04 	addi	fp,sp,44
 c016cd8:	e13ffc15 	stw	r4,-16(fp)
 c016cdc:	e17ffd15 	stw	r5,-12(fp)
 c016ce0:	e1bffe15 	stw	r6,-8(fp)
 c016ce4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 c016ce8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 c016cec:	e0bffd17 	ldw	r2,-12(fp)
 c016cf0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 c016cf4:	00003706 	br	c016dd4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 c016cf8:	e0bffc17 	ldw	r2,-16(fp)
 c016cfc:	10800c17 	ldw	r2,48(r2)
 c016d00:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 c016d04:	e0bffc17 	ldw	r2,-16(fp)
 c016d08:	10800d17 	ldw	r2,52(r2)
 c016d0c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 c016d10:	e0fff917 	ldw	r3,-28(fp)
 c016d14:	e0bff517 	ldw	r2,-44(fp)
 c016d18:	1880062e 	bgeu	r3,r2,c016d34 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 c016d1c:	e0fff517 	ldw	r3,-44(fp)
 c016d20:	e0bff917 	ldw	r2,-28(fp)
 c016d24:	1885c83a 	sub	r2,r3,r2
 c016d28:	10bfffc4 	addi	r2,r2,-1
 c016d2c:	e0bff615 	stw	r2,-40(fp)
 c016d30:	00000b06 	br	c016d60 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 c016d34:	e0bff517 	ldw	r2,-44(fp)
 c016d38:	10000526 	beq	r2,zero,c016d50 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 c016d3c:	00c20004 	movi	r3,2048
 c016d40:	e0bff917 	ldw	r2,-28(fp)
 c016d44:	1885c83a 	sub	r2,r3,r2
 c016d48:	e0bff615 	stw	r2,-40(fp)
 c016d4c:	00000406 	br	c016d60 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 c016d50:	00c1ffc4 	movi	r3,2047
 c016d54:	e0bff917 	ldw	r2,-28(fp)
 c016d58:	1885c83a 	sub	r2,r3,r2
 c016d5c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 c016d60:	e0bff617 	ldw	r2,-40(fp)
 c016d64:	10001e26 	beq	r2,zero,c016de0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 c016d68:	e0fffe17 	ldw	r3,-8(fp)
 c016d6c:	e0bff617 	ldw	r2,-40(fp)
 c016d70:	1880022e 	bgeu	r3,r2,c016d7c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 c016d74:	e0bffe17 	ldw	r2,-8(fp)
 c016d78:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 c016d7c:	e0bffc17 	ldw	r2,-16(fp)
 c016d80:	10c20e04 	addi	r3,r2,2104
 c016d84:	e0bff917 	ldw	r2,-28(fp)
 c016d88:	1885883a 	add	r2,r3,r2
 c016d8c:	e1bff617 	ldw	r6,-40(fp)
 c016d90:	e17ffd17 	ldw	r5,-12(fp)
 c016d94:	1009883a 	mov	r4,r2
 c016d98:	c00cdf80 	call	c00cdf8 <memcpy>
      ptr   += n;
 c016d9c:	e0fffd17 	ldw	r3,-12(fp)
 c016da0:	e0bff617 	ldw	r2,-40(fp)
 c016da4:	1885883a 	add	r2,r3,r2
 c016da8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 c016dac:	e0fffe17 	ldw	r3,-8(fp)
 c016db0:	e0bff617 	ldw	r2,-40(fp)
 c016db4:	1885c83a 	sub	r2,r3,r2
 c016db8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c016dbc:	e0fff917 	ldw	r3,-28(fp)
 c016dc0:	e0bff617 	ldw	r2,-40(fp)
 c016dc4:	1885883a 	add	r2,r3,r2
 c016dc8:	10c1ffcc 	andi	r3,r2,2047
 c016dcc:	e0bffc17 	ldw	r2,-16(fp)
 c016dd0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 c016dd4:	e0bffe17 	ldw	r2,-8(fp)
 c016dd8:	00bfc716 	blt	zero,r2,c016cf8 <__alt_data_end+0xfc016cf8>
 c016ddc:	00000106 	br	c016de4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 c016de0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c016de4:	0005303a 	rdctl	r2,status
 c016de8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c016dec:	e0fffb17 	ldw	r3,-20(fp)
 c016df0:	00bfff84 	movi	r2,-2
 c016df4:	1884703a 	and	r2,r3,r2
 c016df8:	1001703a 	wrctl	status,r2
  
  return context;
 c016dfc:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 c016e00:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 c016e04:	e0bffc17 	ldw	r2,-16(fp)
 c016e08:	10800817 	ldw	r2,32(r2)
 c016e0c:	10c00094 	ori	r3,r2,2
 c016e10:	e0bffc17 	ldw	r2,-16(fp)
 c016e14:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 c016e18:	e0bffc17 	ldw	r2,-16(fp)
 c016e1c:	10800017 	ldw	r2,0(r2)
 c016e20:	10800104 	addi	r2,r2,4
 c016e24:	1007883a 	mov	r3,r2
 c016e28:	e0bffc17 	ldw	r2,-16(fp)
 c016e2c:	10800817 	ldw	r2,32(r2)
 c016e30:	18800035 	stwio	r2,0(r3)
 c016e34:	e0bffa17 	ldw	r2,-24(fp)
 c016e38:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c016e3c:	e0bff817 	ldw	r2,-32(fp)
 c016e40:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 c016e44:	e0bffe17 	ldw	r2,-8(fp)
 c016e48:	0080100e 	bge	zero,r2,c016e8c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 c016e4c:	e0bfff17 	ldw	r2,-4(fp)
 c016e50:	1090000c 	andi	r2,r2,16384
 c016e54:	1000101e 	bne	r2,zero,c016e98 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 c016e58:	0001883a 	nop
 c016e5c:	e0bffc17 	ldw	r2,-16(fp)
 c016e60:	10c00d17 	ldw	r3,52(r2)
 c016e64:	e0bff517 	ldw	r2,-44(fp)
 c016e68:	1880051e 	bne	r3,r2,c016e80 <altera_avalon_jtag_uart_write+0x1b8>
 c016e6c:	e0bffc17 	ldw	r2,-16(fp)
 c016e70:	10c00917 	ldw	r3,36(r2)
 c016e74:	e0bffc17 	ldw	r2,-16(fp)
 c016e78:	10800117 	ldw	r2,4(r2)
 c016e7c:	18bff736 	bltu	r3,r2,c016e5c <__alt_data_end+0xfc016e5c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 c016e80:	e0bffc17 	ldw	r2,-16(fp)
 c016e84:	10800917 	ldw	r2,36(r2)
 c016e88:	1000051e 	bne	r2,zero,c016ea0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 c016e8c:	e0bffe17 	ldw	r2,-8(fp)
 c016e90:	00bfd016 	blt	zero,r2,c016dd4 <__alt_data_end+0xfc016dd4>
 c016e94:	00000306 	br	c016ea4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 c016e98:	0001883a 	nop
 c016e9c:	00000106 	br	c016ea4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 c016ea0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 c016ea4:	e0fffd17 	ldw	r3,-12(fp)
 c016ea8:	e0bff717 	ldw	r2,-36(fp)
 c016eac:	18800426 	beq	r3,r2,c016ec0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 c016eb0:	e0fffd17 	ldw	r3,-12(fp)
 c016eb4:	e0bff717 	ldw	r2,-36(fp)
 c016eb8:	1885c83a 	sub	r2,r3,r2
 c016ebc:	00000606 	br	c016ed8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 c016ec0:	e0bfff17 	ldw	r2,-4(fp)
 c016ec4:	1090000c 	andi	r2,r2,16384
 c016ec8:	10000226 	beq	r2,zero,c016ed4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 c016ecc:	00bffd44 	movi	r2,-11
 c016ed0:	00000106 	br	c016ed8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 c016ed4:	00bffec4 	movi	r2,-5
}
 c016ed8:	e037883a 	mov	sp,fp
 c016edc:	dfc00117 	ldw	ra,4(sp)
 c016ee0:	df000017 	ldw	fp,0(sp)
 c016ee4:	dec00204 	addi	sp,sp,8
 c016ee8:	f800283a 	ret

0c016eec <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 c016eec:	defff404 	addi	sp,sp,-48
 c016ef0:	df000b15 	stw	fp,44(sp)
 c016ef4:	df000b04 	addi	fp,sp,44
 c016ef8:	e13ffc15 	stw	r4,-16(fp)
 c016efc:	e17ffd15 	stw	r5,-12(fp)
 c016f00:	e1bffe15 	stw	r6,-8(fp)
 c016f04:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 c016f08:	e0ffff17 	ldw	r3,-4(fp)
 c016f0c:	e0bffe17 	ldw	r2,-8(fp)
 c016f10:	1885883a 	add	r2,r3,r2
 c016f14:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 c016f18:	e0c00217 	ldw	r3,8(fp)
 c016f1c:	e0800117 	ldw	r2,4(fp)
 c016f20:	1885883a 	add	r2,r3,r2
 c016f24:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 c016f28:	e0800117 	ldw	r2,4(fp)
 c016f2c:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 c016f30:	e0bffe17 	ldw	r2,-8(fp)
 c016f34:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 c016f38:	00800044 	movi	r2,1
 c016f3c:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 c016f40:	e0bffc17 	ldw	r2,-16(fp)
 c016f44:	10800504 	addi	r2,r2,20
 c016f48:	1009883a 	mov	r4,r2
 c016f4c:	00c00044 	movi	r3,1
 c016f50:	e0bffd17 	ldw	r2,-12(fp)
 c016f54:	1884983a 	sll	r2,r3,r2
 c016f58:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 c016f5c:	e0800317 	ldw	r2,12(fp)
 c016f60:	1080008c 	andi	r2,r2,2
 c016f64:	1000051e 	bne	r2,zero,c016f7c <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 c016f68:	e0bffc17 	ldw	r2,-16(fp)
 c016f6c:	10800304 	addi	r2,r2,12
 c016f70:	1007883a 	mov	r3,r2
 c016f74:	00810004 	movi	r2,1024
 c016f78:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 c016f7c:	e0bffc17 	ldw	r2,-16(fp)
 c016f80:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 c016f84:	e0bffc17 	ldw	r2,-16(fp)
 c016f88:	10800204 	addi	r2,r2,8
 c016f8c:	10800037 	ldwio	r2,0(r2)
 c016f90:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 c016f94:	e0bffa17 	ldw	r2,-24(fp)
 c016f98:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 c016f9c:	10000226 	beq	r2,zero,c016fa8 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 c016fa0:	e0bff717 	ldw	r2,-36(fp)
 c016fa4:	1000031e 	bne	r2,zero,c016fb4 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 c016fa8:	e0bffa17 	ldw	r2,-24(fp)
 c016fac:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 c016fb0:	103ff426 	beq	r2,zero,c016f84 <__alt_data_end+0xfc016f84>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 c016fb4:	e0bffa17 	ldw	r2,-24(fp)
 c016fb8:	1080100c 	andi	r2,r2,64
 c016fbc:	10001e26 	beq	r2,zero,c017038 <alt_avalon_spi_command+0x14c>
 c016fc0:	e0bff717 	ldw	r2,-36(fp)
 c016fc4:	00801c0e 	bge	zero,r2,c017038 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 c016fc8:	e0bff717 	ldw	r2,-36(fp)
 c016fcc:	10bfffc4 	addi	r2,r2,-1
 c016fd0:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 c016fd4:	e0ffff17 	ldw	r3,-4(fp)
 c016fd8:	e0bff817 	ldw	r2,-32(fp)
 c016fdc:	18800a2e 	bgeu	r3,r2,c017008 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 c016fe0:	e0bffc17 	ldw	r2,-16(fp)
 c016fe4:	10800104 	addi	r2,r2,4
 c016fe8:	1009883a 	mov	r4,r2
 c016fec:	e0bfff17 	ldw	r2,-4(fp)
 c016ff0:	10c00044 	addi	r3,r2,1
 c016ff4:	e0ffff15 	stw	r3,-4(fp)
 c016ff8:	10800003 	ldbu	r2,0(r2)
 c016ffc:	10803fcc 	andi	r2,r2,255
 c017000:	20800035 	stwio	r2,0(r4)
 c017004:	00000c06 	br	c017038 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 c017008:	e0bff517 	ldw	r2,-44(fp)
 c01700c:	10000826 	beq	r2,zero,c017030 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 c017010:	e0bff517 	ldw	r2,-44(fp)
 c017014:	10bfffc4 	addi	r2,r2,-1
 c017018:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 c01701c:	e0bffc17 	ldw	r2,-16(fp)
 c017020:	10800104 	addi	r2,r2,4
 c017024:	0007883a 	mov	r3,zero
 c017028:	10c00035 	stwio	r3,0(r2)
 c01702c:	00000206 	br	c017038 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 c017030:	00bf0004 	movi	r2,-1024
 c017034:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 c017038:	e0bffa17 	ldw	r2,-24(fp)
 c01703c:	1080200c 	andi	r2,r2,128
 c017040:	103fd026 	beq	r2,zero,c016f84 <__alt_data_end+0xfc016f84>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 c017044:	e0bffc17 	ldw	r2,-16(fp)
 c017048:	10800037 	ldwio	r2,0(r2)
 c01704c:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 c017050:	e0bff617 	ldw	r2,-40(fp)
 c017054:	10000426 	beq	r2,zero,c017068 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 c017058:	e0bff617 	ldw	r2,-40(fp)
 c01705c:	10bfffc4 	addi	r2,r2,-1
 c017060:	e0bff615 	stw	r2,-40(fp)
 c017064:	00000506 	br	c01707c <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 c017068:	e0800217 	ldw	r2,8(fp)
 c01706c:	10c00044 	addi	r3,r2,1
 c017070:	e0c00215 	stw	r3,8(fp)
 c017074:	e0fffb17 	ldw	r3,-20(fp)
 c017078:	10c00005 	stb	r3,0(r2)
      credits++;
 c01707c:	e0bff717 	ldw	r2,-36(fp)
 c017080:	10800044 	addi	r2,r2,1
 c017084:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 c017088:	e0bff617 	ldw	r2,-40(fp)
 c01708c:	103fbd1e 	bne	r2,zero,c016f84 <__alt_data_end+0xfc016f84>
 c017090:	e0c00217 	ldw	r3,8(fp)
 c017094:	e0bff917 	ldw	r2,-28(fp)
 c017098:	18bfba1e 	bne	r3,r2,c016f84 <__alt_data_end+0xfc016f84>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 c01709c:	e0bffc17 	ldw	r2,-16(fp)
 c0170a0:	10800204 	addi	r2,r2,8
 c0170a4:	10800037 	ldwio	r2,0(r2)
 c0170a8:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 c0170ac:	e0bffa17 	ldw	r2,-24(fp)
 c0170b0:	1080080c 	andi	r2,r2,32
 c0170b4:	103ff926 	beq	r2,zero,c01709c <__alt_data_end+0xfc01709c>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 c0170b8:	e0800317 	ldw	r2,12(fp)
 c0170bc:	1080004c 	andi	r2,r2,1
 c0170c0:	1000041e 	bne	r2,zero,c0170d4 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 c0170c4:	e0bffc17 	ldw	r2,-16(fp)
 c0170c8:	10800304 	addi	r2,r2,12
 c0170cc:	0007883a 	mov	r3,zero
 c0170d0:	10c00035 	stwio	r3,0(r2)

  return read_length;
 c0170d4:	e0800117 	ldw	r2,4(fp)
}
 c0170d8:	e037883a 	mov	sp,fp
 c0170dc:	df000017 	ldw	fp,0(sp)
 c0170e0:	dec00104 	addi	sp,sp,4
 c0170e4:	f800283a 	ret

0c0170e8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 c0170e8:	defffa04 	addi	sp,sp,-24
 c0170ec:	dfc00515 	stw	ra,20(sp)
 c0170f0:	df000415 	stw	fp,16(sp)
 c0170f4:	df000404 	addi	fp,sp,16
 c0170f8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 c0170fc:	0007883a 	mov	r3,zero
 c017100:	e0bfff17 	ldw	r2,-4(fp)
 c017104:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 c017108:	e0bfff17 	ldw	r2,-4(fp)
 c01710c:	10800104 	addi	r2,r2,4
 c017110:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c017114:	0005303a 	rdctl	r2,status
 c017118:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c01711c:	e0fffd17 	ldw	r3,-12(fp)
 c017120:	00bfff84 	movi	r2,-2
 c017124:	1884703a 	and	r2,r3,r2
 c017128:	1001703a 	wrctl	status,r2
  
  return context;
 c01712c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 c017130:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 c017134:	c0161400 	call	c016140 <alt_tick>
 c017138:	e0bffc17 	ldw	r2,-16(fp)
 c01713c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c017140:	e0bffe17 	ldw	r2,-8(fp)
 c017144:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 c017148:	0001883a 	nop
 c01714c:	e037883a 	mov	sp,fp
 c017150:	dfc00117 	ldw	ra,4(sp)
 c017154:	df000017 	ldw	fp,0(sp)
 c017158:	dec00204 	addi	sp,sp,8
 c01715c:	f800283a 	ret

0c017160 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 c017160:	defff804 	addi	sp,sp,-32
 c017164:	dfc00715 	stw	ra,28(sp)
 c017168:	df000615 	stw	fp,24(sp)
 c01716c:	df000604 	addi	fp,sp,24
 c017170:	e13ffc15 	stw	r4,-16(fp)
 c017174:	e17ffd15 	stw	r5,-12(fp)
 c017178:	e1bffe15 	stw	r6,-8(fp)
 c01717c:	e1ffff15 	stw	r7,-4(fp)
 c017180:	e0bfff17 	ldw	r2,-4(fp)
 c017184:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 c017188:	d0a7af17 	ldw	r2,-24900(gp)
 c01718c:	1000021e 	bne	r2,zero,c017198 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 c017190:	e0bffb17 	ldw	r2,-20(fp)
 c017194:	d0a7af15 	stw	r2,-24900(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 c017198:	e0bffc17 	ldw	r2,-16(fp)
 c01719c:	10800104 	addi	r2,r2,4
 c0171a0:	00c001c4 	movi	r3,7
 c0171a4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 c0171a8:	d8000015 	stw	zero,0(sp)
 c0171ac:	e1fffc17 	ldw	r7,-16(fp)
 c0171b0:	01830074 	movhi	r6,3073
 c0171b4:	319c3a04 	addi	r6,r6,28904
 c0171b8:	e17ffe17 	ldw	r5,-8(fp)
 c0171bc:	e13ffd17 	ldw	r4,-12(fp)
 c0171c0:	c0176400 	call	c017640 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 c0171c4:	0001883a 	nop
 c0171c8:	e037883a 	mov	sp,fp
 c0171cc:	dfc00117 	ldw	ra,4(sp)
 c0171d0:	df000017 	ldw	fp,0(sp)
 c0171d4:	dec00204 	addi	sp,sp,8
 c0171d8:	f800283a 	ret

0c0171dc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 c0171dc:	defff504 	addi	sp,sp,-44
 c0171e0:	df000a15 	stw	fp,40(sp)
 c0171e4:	df000a04 	addi	fp,sp,40
 c0171e8:	e13ffc15 	stw	r4,-16(fp)
 c0171ec:	e17ffd15 	stw	r5,-12(fp)
 c0171f0:	e1bffe15 	stw	r6,-8(fp)
 c0171f4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 c0171f8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 c0171fc:	d0a7af17 	ldw	r2,-24900(gp)
  
  if (alt_ticks_per_second ())
 c017200:	10003c26 	beq	r2,zero,c0172f4 <alt_alarm_start+0x118>
  {
    if (alarm)
 c017204:	e0bffc17 	ldw	r2,-16(fp)
 c017208:	10003826 	beq	r2,zero,c0172ec <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 c01720c:	e0bffc17 	ldw	r2,-16(fp)
 c017210:	e0fffe17 	ldw	r3,-8(fp)
 c017214:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 c017218:	e0bffc17 	ldw	r2,-16(fp)
 c01721c:	e0ffff17 	ldw	r3,-4(fp)
 c017220:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c017224:	0005303a 	rdctl	r2,status
 c017228:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c01722c:	e0fff917 	ldw	r3,-28(fp)
 c017230:	00bfff84 	movi	r2,-2
 c017234:	1884703a 	and	r2,r3,r2
 c017238:	1001703a 	wrctl	status,r2
  
  return context;
 c01723c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 c017240:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 c017244:	d0a7b017 	ldw	r2,-24896(gp)
      
      current_nticks = alt_nticks();
 c017248:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 c01724c:	e0fffd17 	ldw	r3,-12(fp)
 c017250:	e0bff617 	ldw	r2,-40(fp)
 c017254:	1885883a 	add	r2,r3,r2
 c017258:	10c00044 	addi	r3,r2,1
 c01725c:	e0bffc17 	ldw	r2,-16(fp)
 c017260:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 c017264:	e0bffc17 	ldw	r2,-16(fp)
 c017268:	10c00217 	ldw	r3,8(r2)
 c01726c:	e0bff617 	ldw	r2,-40(fp)
 c017270:	1880042e 	bgeu	r3,r2,c017284 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 c017274:	e0bffc17 	ldw	r2,-16(fp)
 c017278:	00c00044 	movi	r3,1
 c01727c:	10c00405 	stb	r3,16(r2)
 c017280:	00000206 	br	c01728c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 c017284:	e0bffc17 	ldw	r2,-16(fp)
 c017288:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 c01728c:	e0bffc17 	ldw	r2,-16(fp)
 c017290:	d0e01504 	addi	r3,gp,-32684
 c017294:	e0fffa15 	stw	r3,-24(fp)
 c017298:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 c01729c:	e0bffb17 	ldw	r2,-20(fp)
 c0172a0:	e0fffa17 	ldw	r3,-24(fp)
 c0172a4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 c0172a8:	e0bffa17 	ldw	r2,-24(fp)
 c0172ac:	10c00017 	ldw	r3,0(r2)
 c0172b0:	e0bffb17 	ldw	r2,-20(fp)
 c0172b4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 c0172b8:	e0bffa17 	ldw	r2,-24(fp)
 c0172bc:	10800017 	ldw	r2,0(r2)
 c0172c0:	e0fffb17 	ldw	r3,-20(fp)
 c0172c4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 c0172c8:	e0bffa17 	ldw	r2,-24(fp)
 c0172cc:	e0fffb17 	ldw	r3,-20(fp)
 c0172d0:	10c00015 	stw	r3,0(r2)
 c0172d4:	e0bff817 	ldw	r2,-32(fp)
 c0172d8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c0172dc:	e0bff717 	ldw	r2,-36(fp)
 c0172e0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 c0172e4:	0005883a 	mov	r2,zero
 c0172e8:	00000306 	br	c0172f8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 c0172ec:	00bffa84 	movi	r2,-22
 c0172f0:	00000106 	br	c0172f8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 c0172f4:	00bfde84 	movi	r2,-134
  }
}
 c0172f8:	e037883a 	mov	sp,fp
 c0172fc:	df000017 	ldw	fp,0(sp)
 c017300:	dec00104 	addi	sp,sp,4
 c017304:	f800283a 	ret

0c017308 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 c017308:	defffa04 	addi	sp,sp,-24
 c01730c:	dfc00515 	stw	ra,20(sp)
 c017310:	df000415 	stw	fp,16(sp)
 c017314:	df000404 	addi	fp,sp,16
 c017318:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 c01731c:	00800244 	movi	r2,9
 c017320:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 c017324:	014003f4 	movhi	r5,15
 c017328:	29509004 	addi	r5,r5,16960
 c01732c:	e13ffd17 	ldw	r4,-12(fp)
 c017330:	c004de00 	call	c004de0 <__mulsi3>
 c017334:	100b883a 	mov	r5,r2
 c017338:	0100bef4 	movhi	r4,763
 c01733c:	213c2004 	addi	r4,r4,-3968
 c017340:	c004d240 	call	c004d24 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 c017344:	100b883a 	mov	r5,r2
 c017348:	01200034 	movhi	r4,32768
 c01734c:	213fffc4 	addi	r4,r4,-1
 c017350:	c004d240 	call	c004d24 <__udivsi3>
 c017354:	100b883a 	mov	r5,r2
 c017358:	e13fff17 	ldw	r4,-4(fp)
 c01735c:	c004d240 	call	c004d24 <__udivsi3>
 c017360:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 c017364:	e0bffe17 	ldw	r2,-8(fp)
 c017368:	10002a26 	beq	r2,zero,c017414 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 c01736c:	e03ffc15 	stw	zero,-16(fp)
 c017370:	00001706 	br	c0173d0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 c017374:	00a00034 	movhi	r2,32768
 c017378:	10bfffc4 	addi	r2,r2,-1
 c01737c:	10bfffc4 	addi	r2,r2,-1
 c017380:	103ffe1e 	bne	r2,zero,c01737c <__alt_data_end+0xfc01737c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 c017384:	014003f4 	movhi	r5,15
 c017388:	29509004 	addi	r5,r5,16960
 c01738c:	e13ffd17 	ldw	r4,-12(fp)
 c017390:	c004de00 	call	c004de0 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 c017394:	100b883a 	mov	r5,r2
 c017398:	0100bef4 	movhi	r4,763
 c01739c:	213c2004 	addi	r4,r4,-3968
 c0173a0:	c004d240 	call	c004d24 <__udivsi3>
 c0173a4:	100b883a 	mov	r5,r2
 c0173a8:	01200034 	movhi	r4,32768
 c0173ac:	213fffc4 	addi	r4,r4,-1
 c0173b0:	c004d240 	call	c004d24 <__udivsi3>
 c0173b4:	1007883a 	mov	r3,r2
 c0173b8:	e0bfff17 	ldw	r2,-4(fp)
 c0173bc:	10c5c83a 	sub	r2,r2,r3
 c0173c0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 c0173c4:	e0bffc17 	ldw	r2,-16(fp)
 c0173c8:	10800044 	addi	r2,r2,1
 c0173cc:	e0bffc15 	stw	r2,-16(fp)
 c0173d0:	e0fffc17 	ldw	r3,-16(fp)
 c0173d4:	e0bffe17 	ldw	r2,-8(fp)
 c0173d8:	18bfe616 	blt	r3,r2,c017374 <__alt_data_end+0xfc017374>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 c0173dc:	014003f4 	movhi	r5,15
 c0173e0:	29509004 	addi	r5,r5,16960
 c0173e4:	e13ffd17 	ldw	r4,-12(fp)
 c0173e8:	c004de00 	call	c004de0 <__mulsi3>
 c0173ec:	100b883a 	mov	r5,r2
 c0173f0:	0100bef4 	movhi	r4,763
 c0173f4:	213c2004 	addi	r4,r4,-3968
 c0173f8:	c004d240 	call	c004d24 <__udivsi3>
 c0173fc:	e17fff17 	ldw	r5,-4(fp)
 c017400:	1009883a 	mov	r4,r2
 c017404:	c004de00 	call	c004de0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 c017408:	10bfffc4 	addi	r2,r2,-1
 c01740c:	103ffe1e 	bne	r2,zero,c017408 <__alt_data_end+0xfc017408>
 c017410:	00000d06 	br	c017448 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 c017414:	014003f4 	movhi	r5,15
 c017418:	29509004 	addi	r5,r5,16960
 c01741c:	e13ffd17 	ldw	r4,-12(fp)
 c017420:	c004de00 	call	c004de0 <__mulsi3>
 c017424:	100b883a 	mov	r5,r2
 c017428:	0100bef4 	movhi	r4,763
 c01742c:	213c2004 	addi	r4,r4,-3968
 c017430:	c004d240 	call	c004d24 <__udivsi3>
 c017434:	e17fff17 	ldw	r5,-4(fp)
 c017438:	1009883a 	mov	r4,r2
 c01743c:	c004de00 	call	c004de0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 c017440:	10bfffc4 	addi	r2,r2,-1
 c017444:	00bffe16 	blt	zero,r2,c017440 <__alt_data_end+0xfc017440>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 c017448:	0005883a 	mov	r2,zero
}
 c01744c:	e037883a 	mov	sp,fp
 c017450:	dfc00117 	ldw	ra,4(sp)
 c017454:	df000017 	ldw	fp,0(sp)
 c017458:	dec00204 	addi	sp,sp,8
 c01745c:	f800283a 	ret

0c017460 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 c017460:	deffff04 	addi	sp,sp,-4
 c017464:	df000015 	stw	fp,0(sp)
 c017468:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 c01746c:	0001883a 	nop
 c017470:	e037883a 	mov	sp,fp
 c017474:	df000017 	ldw	fp,0(sp)
 c017478:	dec00104 	addi	sp,sp,4
 c01747c:	f800283a 	ret

0c017480 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c017480:	defffe04 	addi	sp,sp,-8
 c017484:	dfc00115 	stw	ra,4(sp)
 c017488:	df000015 	stw	fp,0(sp)
 c01748c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c017490:	d0a01317 	ldw	r2,-32692(gp)
 c017494:	10000326 	beq	r2,zero,c0174a4 <alt_get_errno+0x24>
 c017498:	d0a01317 	ldw	r2,-32692(gp)
 c01749c:	103ee83a 	callr	r2
 c0174a0:	00000106 	br	c0174a8 <alt_get_errno+0x28>
 c0174a4:	d0a7ab04 	addi	r2,gp,-24916
}
 c0174a8:	e037883a 	mov	sp,fp
 c0174ac:	dfc00117 	ldw	ra,4(sp)
 c0174b0:	df000017 	ldw	fp,0(sp)
 c0174b4:	dec00204 	addi	sp,sp,8
 c0174b8:	f800283a 	ret

0c0174bc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 c0174bc:	defffa04 	addi	sp,sp,-24
 c0174c0:	dfc00515 	stw	ra,20(sp)
 c0174c4:	df000415 	stw	fp,16(sp)
 c0174c8:	df000404 	addi	fp,sp,16
 c0174cc:	e13ffe15 	stw	r4,-8(fp)
 c0174d0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 c0174d4:	e0bffe17 	ldw	r2,-8(fp)
 c0174d8:	10000326 	beq	r2,zero,c0174e8 <alt_dev_llist_insert+0x2c>
 c0174dc:	e0bffe17 	ldw	r2,-8(fp)
 c0174e0:	10800217 	ldw	r2,8(r2)
 c0174e4:	1000061e 	bne	r2,zero,c017500 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 c0174e8:	c0174800 	call	c017480 <alt_get_errno>
 c0174ec:	1007883a 	mov	r3,r2
 c0174f0:	00800584 	movi	r2,22
 c0174f4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 c0174f8:	00bffa84 	movi	r2,-22
 c0174fc:	00001306 	br	c01754c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 c017500:	e0bffe17 	ldw	r2,-8(fp)
 c017504:	e0ffff17 	ldw	r3,-4(fp)
 c017508:	e0fffc15 	stw	r3,-16(fp)
 c01750c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 c017510:	e0bffd17 	ldw	r2,-12(fp)
 c017514:	e0fffc17 	ldw	r3,-16(fp)
 c017518:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 c01751c:	e0bffc17 	ldw	r2,-16(fp)
 c017520:	10c00017 	ldw	r3,0(r2)
 c017524:	e0bffd17 	ldw	r2,-12(fp)
 c017528:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 c01752c:	e0bffc17 	ldw	r2,-16(fp)
 c017530:	10800017 	ldw	r2,0(r2)
 c017534:	e0fffd17 	ldw	r3,-12(fp)
 c017538:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 c01753c:	e0bffc17 	ldw	r2,-16(fp)
 c017540:	e0fffd17 	ldw	r3,-12(fp)
 c017544:	10c00015 	stw	r3,0(r2)

  return 0;  
 c017548:	0005883a 	mov	r2,zero
}
 c01754c:	e037883a 	mov	sp,fp
 c017550:	dfc00117 	ldw	ra,4(sp)
 c017554:	df000017 	ldw	fp,0(sp)
 c017558:	dec00204 	addi	sp,sp,8
 c01755c:	f800283a 	ret

0c017560 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 c017560:	defffd04 	addi	sp,sp,-12
 c017564:	dfc00215 	stw	ra,8(sp)
 c017568:	df000115 	stw	fp,4(sp)
 c01756c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 c017570:	008300b4 	movhi	r2,3074
 c017574:	10a13604 	addi	r2,r2,-31528
 c017578:	e0bfff15 	stw	r2,-4(fp)
 c01757c:	00000606 	br	c017598 <_do_ctors+0x38>
        (*ctor) (); 
 c017580:	e0bfff17 	ldw	r2,-4(fp)
 c017584:	10800017 	ldw	r2,0(r2)
 c017588:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 c01758c:	e0bfff17 	ldw	r2,-4(fp)
 c017590:	10bfff04 	addi	r2,r2,-4
 c017594:	e0bfff15 	stw	r2,-4(fp)
 c017598:	e0ffff17 	ldw	r3,-4(fp)
 c01759c:	008300b4 	movhi	r2,3074
 c0175a0:	10a13704 	addi	r2,r2,-31524
 c0175a4:	18bff62e 	bgeu	r3,r2,c017580 <__alt_data_end+0xfc017580>
        (*ctor) (); 
}
 c0175a8:	0001883a 	nop
 c0175ac:	e037883a 	mov	sp,fp
 c0175b0:	dfc00117 	ldw	ra,4(sp)
 c0175b4:	df000017 	ldw	fp,0(sp)
 c0175b8:	dec00204 	addi	sp,sp,8
 c0175bc:	f800283a 	ret

0c0175c0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 c0175c0:	defffd04 	addi	sp,sp,-12
 c0175c4:	dfc00215 	stw	ra,8(sp)
 c0175c8:	df000115 	stw	fp,4(sp)
 c0175cc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 c0175d0:	008300b4 	movhi	r2,3074
 c0175d4:	10a13604 	addi	r2,r2,-31528
 c0175d8:	e0bfff15 	stw	r2,-4(fp)
 c0175dc:	00000606 	br	c0175f8 <_do_dtors+0x38>
        (*dtor) (); 
 c0175e0:	e0bfff17 	ldw	r2,-4(fp)
 c0175e4:	10800017 	ldw	r2,0(r2)
 c0175e8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 c0175ec:	e0bfff17 	ldw	r2,-4(fp)
 c0175f0:	10bfff04 	addi	r2,r2,-4
 c0175f4:	e0bfff15 	stw	r2,-4(fp)
 c0175f8:	e0ffff17 	ldw	r3,-4(fp)
 c0175fc:	008300b4 	movhi	r2,3074
 c017600:	10a13704 	addi	r2,r2,-31524
 c017604:	18bff62e 	bgeu	r3,r2,c0175e0 <__alt_data_end+0xfc0175e0>
        (*dtor) (); 
}
 c017608:	0001883a 	nop
 c01760c:	e037883a 	mov	sp,fp
 c017610:	dfc00117 	ldw	ra,4(sp)
 c017614:	df000017 	ldw	fp,0(sp)
 c017618:	dec00204 	addi	sp,sp,8
 c01761c:	f800283a 	ret

0c017620 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 c017620:	deffff04 	addi	sp,sp,-4
 c017624:	df000015 	stw	fp,0(sp)
 c017628:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 c01762c:	0001883a 	nop
 c017630:	e037883a 	mov	sp,fp
 c017634:	df000017 	ldw	fp,0(sp)
 c017638:	dec00104 	addi	sp,sp,4
 c01763c:	f800283a 	ret

0c017640 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 c017640:	defff904 	addi	sp,sp,-28
 c017644:	dfc00615 	stw	ra,24(sp)
 c017648:	df000515 	stw	fp,20(sp)
 c01764c:	df000504 	addi	fp,sp,20
 c017650:	e13ffc15 	stw	r4,-16(fp)
 c017654:	e17ffd15 	stw	r5,-12(fp)
 c017658:	e1bffe15 	stw	r6,-8(fp)
 c01765c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 c017660:	e0800217 	ldw	r2,8(fp)
 c017664:	d8800015 	stw	r2,0(sp)
 c017668:	e1ffff17 	ldw	r7,-4(fp)
 c01766c:	e1bffe17 	ldw	r6,-8(fp)
 c017670:	e17ffd17 	ldw	r5,-12(fp)
 c017674:	e13ffc17 	ldw	r4,-16(fp)
 c017678:	c0177f00 	call	c0177f0 <alt_iic_isr_register>
}  
 c01767c:	e037883a 	mov	sp,fp
 c017680:	dfc00117 	ldw	ra,4(sp)
 c017684:	df000017 	ldw	fp,0(sp)
 c017688:	dec00204 	addi	sp,sp,8
 c01768c:	f800283a 	ret

0c017690 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 c017690:	defff904 	addi	sp,sp,-28
 c017694:	df000615 	stw	fp,24(sp)
 c017698:	df000604 	addi	fp,sp,24
 c01769c:	e13ffe15 	stw	r4,-8(fp)
 c0176a0:	e17fff15 	stw	r5,-4(fp)
 c0176a4:	e0bfff17 	ldw	r2,-4(fp)
 c0176a8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c0176ac:	0005303a 	rdctl	r2,status
 c0176b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c0176b4:	e0fffb17 	ldw	r3,-20(fp)
 c0176b8:	00bfff84 	movi	r2,-2
 c0176bc:	1884703a 	and	r2,r3,r2
 c0176c0:	1001703a 	wrctl	status,r2
  
  return context;
 c0176c4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 c0176c8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 c0176cc:	00c00044 	movi	r3,1
 c0176d0:	e0bffa17 	ldw	r2,-24(fp)
 c0176d4:	1884983a 	sll	r2,r3,r2
 c0176d8:	1007883a 	mov	r3,r2
 c0176dc:	d0a7b117 	ldw	r2,-24892(gp)
 c0176e0:	1884b03a 	or	r2,r3,r2
 c0176e4:	d0a7b115 	stw	r2,-24892(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 c0176e8:	d0a7b117 	ldw	r2,-24892(gp)
 c0176ec:	100170fa 	wrctl	ienable,r2
 c0176f0:	e0bffc17 	ldw	r2,-16(fp)
 c0176f4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c0176f8:	e0bffd17 	ldw	r2,-12(fp)
 c0176fc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 c017700:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 c017704:	0001883a 	nop
}
 c017708:	e037883a 	mov	sp,fp
 c01770c:	df000017 	ldw	fp,0(sp)
 c017710:	dec00104 	addi	sp,sp,4
 c017714:	f800283a 	ret

0c017718 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 c017718:	defff904 	addi	sp,sp,-28
 c01771c:	df000615 	stw	fp,24(sp)
 c017720:	df000604 	addi	fp,sp,24
 c017724:	e13ffe15 	stw	r4,-8(fp)
 c017728:	e17fff15 	stw	r5,-4(fp)
 c01772c:	e0bfff17 	ldw	r2,-4(fp)
 c017730:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c017734:	0005303a 	rdctl	r2,status
 c017738:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c01773c:	e0fffb17 	ldw	r3,-20(fp)
 c017740:	00bfff84 	movi	r2,-2
 c017744:	1884703a 	and	r2,r3,r2
 c017748:	1001703a 	wrctl	status,r2
  
  return context;
 c01774c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 c017750:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 c017754:	00c00044 	movi	r3,1
 c017758:	e0bffa17 	ldw	r2,-24(fp)
 c01775c:	1884983a 	sll	r2,r3,r2
 c017760:	0084303a 	nor	r2,zero,r2
 c017764:	1007883a 	mov	r3,r2
 c017768:	d0a7b117 	ldw	r2,-24892(gp)
 c01776c:	1884703a 	and	r2,r3,r2
 c017770:	d0a7b115 	stw	r2,-24892(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 c017774:	d0a7b117 	ldw	r2,-24892(gp)
 c017778:	100170fa 	wrctl	ienable,r2
 c01777c:	e0bffc17 	ldw	r2,-16(fp)
 c017780:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c017784:	e0bffd17 	ldw	r2,-12(fp)
 c017788:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 c01778c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 c017790:	0001883a 	nop
}
 c017794:	e037883a 	mov	sp,fp
 c017798:	df000017 	ldw	fp,0(sp)
 c01779c:	dec00104 	addi	sp,sp,4
 c0177a0:	f800283a 	ret

0c0177a4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 c0177a4:	defffc04 	addi	sp,sp,-16
 c0177a8:	df000315 	stw	fp,12(sp)
 c0177ac:	df000304 	addi	fp,sp,12
 c0177b0:	e13ffe15 	stw	r4,-8(fp)
 c0177b4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 c0177b8:	000530fa 	rdctl	r2,ienable
 c0177bc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 c0177c0:	00c00044 	movi	r3,1
 c0177c4:	e0bfff17 	ldw	r2,-4(fp)
 c0177c8:	1884983a 	sll	r2,r3,r2
 c0177cc:	1007883a 	mov	r3,r2
 c0177d0:	e0bffd17 	ldw	r2,-12(fp)
 c0177d4:	1884703a 	and	r2,r3,r2
 c0177d8:	1004c03a 	cmpne	r2,r2,zero
 c0177dc:	10803fcc 	andi	r2,r2,255
}
 c0177e0:	e037883a 	mov	sp,fp
 c0177e4:	df000017 	ldw	fp,0(sp)
 c0177e8:	dec00104 	addi	sp,sp,4
 c0177ec:	f800283a 	ret

0c0177f0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 c0177f0:	defff504 	addi	sp,sp,-44
 c0177f4:	dfc00a15 	stw	ra,40(sp)
 c0177f8:	df000915 	stw	fp,36(sp)
 c0177fc:	df000904 	addi	fp,sp,36
 c017800:	e13ffc15 	stw	r4,-16(fp)
 c017804:	e17ffd15 	stw	r5,-12(fp)
 c017808:	e1bffe15 	stw	r6,-8(fp)
 c01780c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 c017810:	00bffa84 	movi	r2,-22
 c017814:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 c017818:	e0bffd17 	ldw	r2,-12(fp)
 c01781c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 c017820:	e0bff817 	ldw	r2,-32(fp)
 c017824:	10800808 	cmpgei	r2,r2,32
 c017828:	1000271e 	bne	r2,zero,c0178c8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c01782c:	0005303a 	rdctl	r2,status
 c017830:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c017834:	e0fffb17 	ldw	r3,-20(fp)
 c017838:	00bfff84 	movi	r2,-2
 c01783c:	1884703a 	and	r2,r3,r2
 c017840:	1001703a 	wrctl	status,r2
  
  return context;
 c017844:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 c017848:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 c01784c:	008300b4 	movhi	r2,3074
 c017850:	1097b604 	addi	r2,r2,24280
 c017854:	e0fff817 	ldw	r3,-32(fp)
 c017858:	180690fa 	slli	r3,r3,3
 c01785c:	10c5883a 	add	r2,r2,r3
 c017860:	e0fffe17 	ldw	r3,-8(fp)
 c017864:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 c017868:	008300b4 	movhi	r2,3074
 c01786c:	1097b604 	addi	r2,r2,24280
 c017870:	e0fff817 	ldw	r3,-32(fp)
 c017874:	180690fa 	slli	r3,r3,3
 c017878:	10c5883a 	add	r2,r2,r3
 c01787c:	10800104 	addi	r2,r2,4
 c017880:	e0ffff17 	ldw	r3,-4(fp)
 c017884:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 c017888:	e0bffe17 	ldw	r2,-8(fp)
 c01788c:	10000526 	beq	r2,zero,c0178a4 <alt_iic_isr_register+0xb4>
 c017890:	e0bff817 	ldw	r2,-32(fp)
 c017894:	100b883a 	mov	r5,r2
 c017898:	e13ffc17 	ldw	r4,-16(fp)
 c01789c:	c0176900 	call	c017690 <alt_ic_irq_enable>
 c0178a0:	00000406 	br	c0178b4 <alt_iic_isr_register+0xc4>
 c0178a4:	e0bff817 	ldw	r2,-32(fp)
 c0178a8:	100b883a 	mov	r5,r2
 c0178ac:	e13ffc17 	ldw	r4,-16(fp)
 c0178b0:	c0177180 	call	c017718 <alt_ic_irq_disable>
 c0178b4:	e0bff715 	stw	r2,-36(fp)
 c0178b8:	e0bffa17 	ldw	r2,-24(fp)
 c0178bc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c0178c0:	e0bff917 	ldw	r2,-28(fp)
 c0178c4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 c0178c8:	e0bff717 	ldw	r2,-36(fp)
}
 c0178cc:	e037883a 	mov	sp,fp
 c0178d0:	dfc00117 	ldw	ra,4(sp)
 c0178d4:	df000017 	ldw	fp,0(sp)
 c0178d8:	dec00204 	addi	sp,sp,8
 c0178dc:	f800283a 	ret

0c0178e0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 c0178e0:	defff804 	addi	sp,sp,-32
 c0178e4:	dfc00715 	stw	ra,28(sp)
 c0178e8:	df000615 	stw	fp,24(sp)
 c0178ec:	dc000515 	stw	r16,20(sp)
 c0178f0:	df000604 	addi	fp,sp,24
 c0178f4:	e13ffb15 	stw	r4,-20(fp)
 c0178f8:	e17ffc15 	stw	r5,-16(fp)
 c0178fc:	e1bffd15 	stw	r6,-12(fp)
 c017900:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 c017904:	e1bffe17 	ldw	r6,-8(fp)
 c017908:	e17ffd17 	ldw	r5,-12(fp)
 c01790c:	e13ffc17 	ldw	r4,-16(fp)
 c017910:	c017b680 	call	c017b68 <open>
 c017914:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 c017918:	e0bffa17 	ldw	r2,-24(fp)
 c01791c:	10002216 	blt	r2,zero,c0179a8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 c017920:	040300b4 	movhi	r16,3074
 c017924:	8425a504 	addi	r16,r16,-26988
 c017928:	e0bffa17 	ldw	r2,-24(fp)
 c01792c:	01400304 	movi	r5,12
 c017930:	1009883a 	mov	r4,r2
 c017934:	c004de00 	call	c004de0 <__mulsi3>
 c017938:	8085883a 	add	r2,r16,r2
 c01793c:	10c00017 	ldw	r3,0(r2)
 c017940:	e0bffb17 	ldw	r2,-20(fp)
 c017944:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 c017948:	040300b4 	movhi	r16,3074
 c01794c:	8425a504 	addi	r16,r16,-26988
 c017950:	e0bffa17 	ldw	r2,-24(fp)
 c017954:	01400304 	movi	r5,12
 c017958:	1009883a 	mov	r4,r2
 c01795c:	c004de00 	call	c004de0 <__mulsi3>
 c017960:	8085883a 	add	r2,r16,r2
 c017964:	10800104 	addi	r2,r2,4
 c017968:	10c00017 	ldw	r3,0(r2)
 c01796c:	e0bffb17 	ldw	r2,-20(fp)
 c017970:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 c017974:	040300b4 	movhi	r16,3074
 c017978:	8425a504 	addi	r16,r16,-26988
 c01797c:	e0bffa17 	ldw	r2,-24(fp)
 c017980:	01400304 	movi	r5,12
 c017984:	1009883a 	mov	r4,r2
 c017988:	c004de00 	call	c004de0 <__mulsi3>
 c01798c:	8085883a 	add	r2,r16,r2
 c017990:	10800204 	addi	r2,r2,8
 c017994:	10c00017 	ldw	r3,0(r2)
 c017998:	e0bffb17 	ldw	r2,-20(fp)
 c01799c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 c0179a0:	e13ffa17 	ldw	r4,-24(fp)
 c0179a4:	c015f700 	call	c015f70 <alt_release_fd>
  }
} 
 c0179a8:	0001883a 	nop
 c0179ac:	e6ffff04 	addi	sp,fp,-4
 c0179b0:	dfc00217 	ldw	ra,8(sp)
 c0179b4:	df000117 	ldw	fp,4(sp)
 c0179b8:	dc000017 	ldw	r16,0(sp)
 c0179bc:	dec00304 	addi	sp,sp,12
 c0179c0:	f800283a 	ret

0c0179c4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 c0179c4:	defffb04 	addi	sp,sp,-20
 c0179c8:	dfc00415 	stw	ra,16(sp)
 c0179cc:	df000315 	stw	fp,12(sp)
 c0179d0:	df000304 	addi	fp,sp,12
 c0179d4:	e13ffd15 	stw	r4,-12(fp)
 c0179d8:	e17ffe15 	stw	r5,-8(fp)
 c0179dc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 c0179e0:	01c07fc4 	movi	r7,511
 c0179e4:	01800044 	movi	r6,1
 c0179e8:	e17ffd17 	ldw	r5,-12(fp)
 c0179ec:	010300b4 	movhi	r4,3074
 c0179f0:	2125a804 	addi	r4,r4,-26976
 c0179f4:	c0178e00 	call	c0178e0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 c0179f8:	01c07fc4 	movi	r7,511
 c0179fc:	000d883a 	mov	r6,zero
 c017a00:	e17ffe17 	ldw	r5,-8(fp)
 c017a04:	010300b4 	movhi	r4,3074
 c017a08:	2125a504 	addi	r4,r4,-26988
 c017a0c:	c0178e00 	call	c0178e0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 c017a10:	01c07fc4 	movi	r7,511
 c017a14:	01800044 	movi	r6,1
 c017a18:	e17fff17 	ldw	r5,-4(fp)
 c017a1c:	010300b4 	movhi	r4,3074
 c017a20:	2125ab04 	addi	r4,r4,-26964
 c017a24:	c0178e00 	call	c0178e0 <alt_open_fd>
}  
 c017a28:	0001883a 	nop
 c017a2c:	e037883a 	mov	sp,fp
 c017a30:	dfc00117 	ldw	ra,4(sp)
 c017a34:	df000017 	ldw	fp,0(sp)
 c017a38:	dec00204 	addi	sp,sp,8
 c017a3c:	f800283a 	ret

0c017a40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c017a40:	defffe04 	addi	sp,sp,-8
 c017a44:	dfc00115 	stw	ra,4(sp)
 c017a48:	df000015 	stw	fp,0(sp)
 c017a4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c017a50:	d0a01317 	ldw	r2,-32692(gp)
 c017a54:	10000326 	beq	r2,zero,c017a64 <alt_get_errno+0x24>
 c017a58:	d0a01317 	ldw	r2,-32692(gp)
 c017a5c:	103ee83a 	callr	r2
 c017a60:	00000106 	br	c017a68 <alt_get_errno+0x28>
 c017a64:	d0a7ab04 	addi	r2,gp,-24916
}
 c017a68:	e037883a 	mov	sp,fp
 c017a6c:	dfc00117 	ldw	ra,4(sp)
 c017a70:	df000017 	ldw	fp,0(sp)
 c017a74:	dec00204 	addi	sp,sp,8
 c017a78:	f800283a 	ret

0c017a7c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 c017a7c:	defffb04 	addi	sp,sp,-20
 c017a80:	dfc00415 	stw	ra,16(sp)
 c017a84:	df000315 	stw	fp,12(sp)
 c017a88:	dc000215 	stw	r16,8(sp)
 c017a8c:	df000304 	addi	fp,sp,12
 c017a90:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 c017a94:	e0bffe17 	ldw	r2,-8(fp)
 c017a98:	10800217 	ldw	r2,8(r2)
 c017a9c:	10d00034 	orhi	r3,r2,16384
 c017aa0:	e0bffe17 	ldw	r2,-8(fp)
 c017aa4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 c017aa8:	e03ffd15 	stw	zero,-12(fp)
 c017aac:	00002306 	br	c017b3c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 c017ab0:	040300b4 	movhi	r16,3074
 c017ab4:	8425a504 	addi	r16,r16,-26988
 c017ab8:	e0bffd17 	ldw	r2,-12(fp)
 c017abc:	01400304 	movi	r5,12
 c017ac0:	1009883a 	mov	r4,r2
 c017ac4:	c004de00 	call	c004de0 <__mulsi3>
 c017ac8:	8085883a 	add	r2,r16,r2
 c017acc:	10c00017 	ldw	r3,0(r2)
 c017ad0:	e0bffe17 	ldw	r2,-8(fp)
 c017ad4:	10800017 	ldw	r2,0(r2)
 c017ad8:	1880151e 	bne	r3,r2,c017b30 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 c017adc:	040300b4 	movhi	r16,3074
 c017ae0:	8425a504 	addi	r16,r16,-26988
 c017ae4:	e0bffd17 	ldw	r2,-12(fp)
 c017ae8:	01400304 	movi	r5,12
 c017aec:	1009883a 	mov	r4,r2
 c017af0:	c004de00 	call	c004de0 <__mulsi3>
 c017af4:	8085883a 	add	r2,r16,r2
 c017af8:	10800204 	addi	r2,r2,8
 c017afc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 c017b00:	10000b0e 	bge	r2,zero,c017b30 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 c017b04:	01400304 	movi	r5,12
 c017b08:	e13ffd17 	ldw	r4,-12(fp)
 c017b0c:	c004de00 	call	c004de0 <__mulsi3>
 c017b10:	1007883a 	mov	r3,r2
 c017b14:	008300b4 	movhi	r2,3074
 c017b18:	10a5a504 	addi	r2,r2,-26988
 c017b1c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 c017b20:	e0bffe17 	ldw	r2,-8(fp)
 c017b24:	18800226 	beq	r3,r2,c017b30 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 c017b28:	00bffcc4 	movi	r2,-13
 c017b2c:	00000806 	br	c017b50 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 c017b30:	e0bffd17 	ldw	r2,-12(fp)
 c017b34:	10800044 	addi	r2,r2,1
 c017b38:	e0bffd15 	stw	r2,-12(fp)
 c017b3c:	d0a01217 	ldw	r2,-32696(gp)
 c017b40:	1007883a 	mov	r3,r2
 c017b44:	e0bffd17 	ldw	r2,-12(fp)
 c017b48:	18bfd92e 	bgeu	r3,r2,c017ab0 <__alt_data_end+0xfc017ab0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 c017b4c:	0005883a 	mov	r2,zero
}
 c017b50:	e6ffff04 	addi	sp,fp,-4
 c017b54:	dfc00217 	ldw	ra,8(sp)
 c017b58:	df000117 	ldw	fp,4(sp)
 c017b5c:	dc000017 	ldw	r16,0(sp)
 c017b60:	dec00304 	addi	sp,sp,12
 c017b64:	f800283a 	ret

0c017b68 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 c017b68:	defff604 	addi	sp,sp,-40
 c017b6c:	dfc00915 	stw	ra,36(sp)
 c017b70:	df000815 	stw	fp,32(sp)
 c017b74:	df000804 	addi	fp,sp,32
 c017b78:	e13ffd15 	stw	r4,-12(fp)
 c017b7c:	e17ffe15 	stw	r5,-8(fp)
 c017b80:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 c017b84:	00bfffc4 	movi	r2,-1
 c017b88:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 c017b8c:	00bffb44 	movi	r2,-19
 c017b90:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 c017b94:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 c017b98:	d1601004 	addi	r5,gp,-32704
 c017b9c:	e13ffd17 	ldw	r4,-12(fp)
 c017ba0:	c017ce80 	call	c017ce8 <alt_find_dev>
 c017ba4:	e0bff815 	stw	r2,-32(fp)
 c017ba8:	e0bff817 	ldw	r2,-32(fp)
 c017bac:	1000051e 	bne	r2,zero,c017bc4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 c017bb0:	e13ffd17 	ldw	r4,-12(fp)
 c017bb4:	c017d780 	call	c017d78 <alt_find_file>
 c017bb8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 c017bbc:	00800044 	movi	r2,1
 c017bc0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 c017bc4:	e0bff817 	ldw	r2,-32(fp)
 c017bc8:	10002b26 	beq	r2,zero,c017c78 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 c017bcc:	e13ff817 	ldw	r4,-32(fp)
 c017bd0:	c017e800 	call	c017e80 <alt_get_fd>
 c017bd4:	e0bff915 	stw	r2,-28(fp)
 c017bd8:	e0bff917 	ldw	r2,-28(fp)
 c017bdc:	1000030e 	bge	r2,zero,c017bec <open+0x84>
    {
      status = index;
 c017be0:	e0bff917 	ldw	r2,-28(fp)
 c017be4:	e0bffa15 	stw	r2,-24(fp)
 c017be8:	00002506 	br	c017c80 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 c017bec:	01400304 	movi	r5,12
 c017bf0:	e13ff917 	ldw	r4,-28(fp)
 c017bf4:	c004de00 	call	c004de0 <__mulsi3>
 c017bf8:	1007883a 	mov	r3,r2
 c017bfc:	008300b4 	movhi	r2,3074
 c017c00:	10a5a504 	addi	r2,r2,-26988
 c017c04:	1885883a 	add	r2,r3,r2
 c017c08:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 c017c0c:	e0fffe17 	ldw	r3,-8(fp)
 c017c10:	00900034 	movhi	r2,16384
 c017c14:	10bfffc4 	addi	r2,r2,-1
 c017c18:	1886703a 	and	r3,r3,r2
 c017c1c:	e0bffc17 	ldw	r2,-16(fp)
 c017c20:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 c017c24:	e0bffb17 	ldw	r2,-20(fp)
 c017c28:	1000051e 	bne	r2,zero,c017c40 <open+0xd8>
 c017c2c:	e13ffc17 	ldw	r4,-16(fp)
 c017c30:	c017a7c0 	call	c017a7c <alt_file_locked>
 c017c34:	e0bffa15 	stw	r2,-24(fp)
 c017c38:	e0bffa17 	ldw	r2,-24(fp)
 c017c3c:	10001016 	blt	r2,zero,c017c80 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 c017c40:	e0bff817 	ldw	r2,-32(fp)
 c017c44:	10800317 	ldw	r2,12(r2)
 c017c48:	10000826 	beq	r2,zero,c017c6c <open+0x104>
 c017c4c:	e0bff817 	ldw	r2,-32(fp)
 c017c50:	10800317 	ldw	r2,12(r2)
 c017c54:	e1ffff17 	ldw	r7,-4(fp)
 c017c58:	e1bffe17 	ldw	r6,-8(fp)
 c017c5c:	e17ffd17 	ldw	r5,-12(fp)
 c017c60:	e13ffc17 	ldw	r4,-16(fp)
 c017c64:	103ee83a 	callr	r2
 c017c68:	00000106 	br	c017c70 <open+0x108>
 c017c6c:	0005883a 	mov	r2,zero
 c017c70:	e0bffa15 	stw	r2,-24(fp)
 c017c74:	00000206 	br	c017c80 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 c017c78:	00bffb44 	movi	r2,-19
 c017c7c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 c017c80:	e0bffa17 	ldw	r2,-24(fp)
 c017c84:	1000090e 	bge	r2,zero,c017cac <open+0x144>
  {
    alt_release_fd (index);  
 c017c88:	e13ff917 	ldw	r4,-28(fp)
 c017c8c:	c015f700 	call	c015f70 <alt_release_fd>
    ALT_ERRNO = -status;
 c017c90:	c017a400 	call	c017a40 <alt_get_errno>
 c017c94:	1007883a 	mov	r3,r2
 c017c98:	e0bffa17 	ldw	r2,-24(fp)
 c017c9c:	0085c83a 	sub	r2,zero,r2
 c017ca0:	18800015 	stw	r2,0(r3)
    return -1;
 c017ca4:	00bfffc4 	movi	r2,-1
 c017ca8:	00000106 	br	c017cb0 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 c017cac:	e0bff917 	ldw	r2,-28(fp)
}
 c017cb0:	e037883a 	mov	sp,fp
 c017cb4:	dfc00117 	ldw	ra,4(sp)
 c017cb8:	df000017 	ldw	fp,0(sp)
 c017cbc:	dec00204 	addi	sp,sp,8
 c017cc0:	f800283a 	ret

0c017cc4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 c017cc4:	deffff04 	addi	sp,sp,-4
 c017cc8:	df000015 	stw	fp,0(sp)
 c017ccc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 c017cd0:	000170fa 	wrctl	ienable,zero
}
 c017cd4:	0001883a 	nop
 c017cd8:	e037883a 	mov	sp,fp
 c017cdc:	df000017 	ldw	fp,0(sp)
 c017ce0:	dec00104 	addi	sp,sp,4
 c017ce4:	f800283a 	ret

0c017ce8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 c017ce8:	defffa04 	addi	sp,sp,-24
 c017cec:	dfc00515 	stw	ra,20(sp)
 c017cf0:	df000415 	stw	fp,16(sp)
 c017cf4:	df000404 	addi	fp,sp,16
 c017cf8:	e13ffe15 	stw	r4,-8(fp)
 c017cfc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 c017d00:	e0bfff17 	ldw	r2,-4(fp)
 c017d04:	10800017 	ldw	r2,0(r2)
 c017d08:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 c017d0c:	e13ffe17 	ldw	r4,-8(fp)
 c017d10:	c0050880 	call	c005088 <strlen>
 c017d14:	10800044 	addi	r2,r2,1
 c017d18:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 c017d1c:	00000d06 	br	c017d54 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 c017d20:	e0bffc17 	ldw	r2,-16(fp)
 c017d24:	10800217 	ldw	r2,8(r2)
 c017d28:	e0fffd17 	ldw	r3,-12(fp)
 c017d2c:	180d883a 	mov	r6,r3
 c017d30:	e17ffe17 	ldw	r5,-8(fp)
 c017d34:	1009883a 	mov	r4,r2
 c017d38:	c01802c0 	call	c01802c <memcmp>
 c017d3c:	1000021e 	bne	r2,zero,c017d48 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 c017d40:	e0bffc17 	ldw	r2,-16(fp)
 c017d44:	00000706 	br	c017d64 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 c017d48:	e0bffc17 	ldw	r2,-16(fp)
 c017d4c:	10800017 	ldw	r2,0(r2)
 c017d50:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 c017d54:	e0fffc17 	ldw	r3,-16(fp)
 c017d58:	e0bfff17 	ldw	r2,-4(fp)
 c017d5c:	18bff01e 	bne	r3,r2,c017d20 <__alt_data_end+0xfc017d20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 c017d60:	0005883a 	mov	r2,zero
}
 c017d64:	e037883a 	mov	sp,fp
 c017d68:	dfc00117 	ldw	ra,4(sp)
 c017d6c:	df000017 	ldw	fp,0(sp)
 c017d70:	dec00204 	addi	sp,sp,8
 c017d74:	f800283a 	ret

0c017d78 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 c017d78:	defffb04 	addi	sp,sp,-20
 c017d7c:	dfc00415 	stw	ra,16(sp)
 c017d80:	df000315 	stw	fp,12(sp)
 c017d84:	df000304 	addi	fp,sp,12
 c017d88:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 c017d8c:	d0a00e17 	ldw	r2,-32712(gp)
 c017d90:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 c017d94:	00003106 	br	c017e5c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 c017d98:	e0bffd17 	ldw	r2,-12(fp)
 c017d9c:	10800217 	ldw	r2,8(r2)
 c017da0:	1009883a 	mov	r4,r2
 c017da4:	c0050880 	call	c005088 <strlen>
 c017da8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 c017dac:	e0bffd17 	ldw	r2,-12(fp)
 c017db0:	10c00217 	ldw	r3,8(r2)
 c017db4:	e0bffe17 	ldw	r2,-8(fp)
 c017db8:	10bfffc4 	addi	r2,r2,-1
 c017dbc:	1885883a 	add	r2,r3,r2
 c017dc0:	10800003 	ldbu	r2,0(r2)
 c017dc4:	10803fcc 	andi	r2,r2,255
 c017dc8:	1080201c 	xori	r2,r2,128
 c017dcc:	10bfe004 	addi	r2,r2,-128
 c017dd0:	10800bd8 	cmpnei	r2,r2,47
 c017dd4:	1000031e 	bne	r2,zero,c017de4 <alt_find_file+0x6c>
    {
      len -= 1;
 c017dd8:	e0bffe17 	ldw	r2,-8(fp)
 c017ddc:	10bfffc4 	addi	r2,r2,-1
 c017de0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 c017de4:	e0bffe17 	ldw	r2,-8(fp)
 c017de8:	e0ffff17 	ldw	r3,-4(fp)
 c017dec:	1885883a 	add	r2,r3,r2
 c017df0:	10800003 	ldbu	r2,0(r2)
 c017df4:	10803fcc 	andi	r2,r2,255
 c017df8:	1080201c 	xori	r2,r2,128
 c017dfc:	10bfe004 	addi	r2,r2,-128
 c017e00:	10800be0 	cmpeqi	r2,r2,47
 c017e04:	1000081e 	bne	r2,zero,c017e28 <alt_find_file+0xb0>
 c017e08:	e0bffe17 	ldw	r2,-8(fp)
 c017e0c:	e0ffff17 	ldw	r3,-4(fp)
 c017e10:	1885883a 	add	r2,r3,r2
 c017e14:	10800003 	ldbu	r2,0(r2)
 c017e18:	10803fcc 	andi	r2,r2,255
 c017e1c:	1080201c 	xori	r2,r2,128
 c017e20:	10bfe004 	addi	r2,r2,-128
 c017e24:	10000a1e 	bne	r2,zero,c017e50 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 c017e28:	e0bffd17 	ldw	r2,-12(fp)
 c017e2c:	10800217 	ldw	r2,8(r2)
 c017e30:	e0fffe17 	ldw	r3,-8(fp)
 c017e34:	180d883a 	mov	r6,r3
 c017e38:	e17fff17 	ldw	r5,-4(fp)
 c017e3c:	1009883a 	mov	r4,r2
 c017e40:	c01802c0 	call	c01802c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 c017e44:	1000021e 	bne	r2,zero,c017e50 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 c017e48:	e0bffd17 	ldw	r2,-12(fp)
 c017e4c:	00000706 	br	c017e6c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 c017e50:	e0bffd17 	ldw	r2,-12(fp)
 c017e54:	10800017 	ldw	r2,0(r2)
 c017e58:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 c017e5c:	e0fffd17 	ldw	r3,-12(fp)
 c017e60:	d0a00e04 	addi	r2,gp,-32712
 c017e64:	18bfcc1e 	bne	r3,r2,c017d98 <__alt_data_end+0xfc017d98>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 c017e68:	0005883a 	mov	r2,zero
}
 c017e6c:	e037883a 	mov	sp,fp
 c017e70:	dfc00117 	ldw	ra,4(sp)
 c017e74:	df000017 	ldw	fp,0(sp)
 c017e78:	dec00204 	addi	sp,sp,8
 c017e7c:	f800283a 	ret

0c017e80 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 c017e80:	defffa04 	addi	sp,sp,-24
 c017e84:	dfc00515 	stw	ra,20(sp)
 c017e88:	df000415 	stw	fp,16(sp)
 c017e8c:	dc000315 	stw	r16,12(sp)
 c017e90:	df000404 	addi	fp,sp,16
 c017e94:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 c017e98:	00bffa04 	movi	r2,-24
 c017e9c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 c017ea0:	e03ffc15 	stw	zero,-16(fp)
 c017ea4:	00001d06 	br	c017f1c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 c017ea8:	040300b4 	movhi	r16,3074
 c017eac:	8425a504 	addi	r16,r16,-26988
 c017eb0:	e0bffc17 	ldw	r2,-16(fp)
 c017eb4:	01400304 	movi	r5,12
 c017eb8:	1009883a 	mov	r4,r2
 c017ebc:	c004de00 	call	c004de0 <__mulsi3>
 c017ec0:	8085883a 	add	r2,r16,r2
 c017ec4:	10800017 	ldw	r2,0(r2)
 c017ec8:	1000111e 	bne	r2,zero,c017f10 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 c017ecc:	040300b4 	movhi	r16,3074
 c017ed0:	8425a504 	addi	r16,r16,-26988
 c017ed4:	e0bffc17 	ldw	r2,-16(fp)
 c017ed8:	01400304 	movi	r5,12
 c017edc:	1009883a 	mov	r4,r2
 c017ee0:	c004de00 	call	c004de0 <__mulsi3>
 c017ee4:	8085883a 	add	r2,r16,r2
 c017ee8:	e0fffe17 	ldw	r3,-8(fp)
 c017eec:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 c017ef0:	d0e01217 	ldw	r3,-32696(gp)
 c017ef4:	e0bffc17 	ldw	r2,-16(fp)
 c017ef8:	1880020e 	bge	r3,r2,c017f04 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 c017efc:	e0bffc17 	ldw	r2,-16(fp)
 c017f00:	d0a01215 	stw	r2,-32696(gp)
      }
      rc = i;
 c017f04:	e0bffc17 	ldw	r2,-16(fp)
 c017f08:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 c017f0c:	00000606 	br	c017f28 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 c017f10:	e0bffc17 	ldw	r2,-16(fp)
 c017f14:	10800044 	addi	r2,r2,1
 c017f18:	e0bffc15 	stw	r2,-16(fp)
 c017f1c:	e0bffc17 	ldw	r2,-16(fp)
 c017f20:	10800810 	cmplti	r2,r2,32
 c017f24:	103fe01e 	bne	r2,zero,c017ea8 <__alt_data_end+0xfc017ea8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 c017f28:	e0bffd17 	ldw	r2,-12(fp)
}
 c017f2c:	e6ffff04 	addi	sp,fp,-4
 c017f30:	dfc00217 	ldw	ra,8(sp)
 c017f34:	df000117 	ldw	fp,4(sp)
 c017f38:	dc000017 	ldw	r16,0(sp)
 c017f3c:	dec00304 	addi	sp,sp,12
 c017f40:	f800283a 	ret

0c017f44 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 c017f44:	defffe04 	addi	sp,sp,-8
 c017f48:	df000115 	stw	fp,4(sp)
 c017f4c:	df000104 	addi	fp,sp,4
 c017f50:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 c017f54:	e0bfff17 	ldw	r2,-4(fp)
 c017f58:	10bffe84 	addi	r2,r2,-6
 c017f5c:	10c00428 	cmpgeui	r3,r2,16
 c017f60:	18001a1e 	bne	r3,zero,c017fcc <alt_exception_cause_generated_bad_addr+0x88>
 c017f64:	100690ba 	slli	r3,r2,2
 c017f68:	00830074 	movhi	r2,3073
 c017f6c:	109fdf04 	addi	r2,r2,32636
 c017f70:	1885883a 	add	r2,r3,r2
 c017f74:	10800017 	ldw	r2,0(r2)
 c017f78:	1000683a 	jmp	r2
 c017f7c:	0c017fbc 	xorhi	r16,at,1534
 c017f80:	0c017fbc 	xorhi	r16,at,1534
 c017f84:	0c017fcc 	andi	r16,at,1535
 c017f88:	0c017fcc 	andi	r16,at,1535
 c017f8c:	0c017fcc 	andi	r16,at,1535
 c017f90:	0c017fbc 	xorhi	r16,at,1534
 c017f94:	0c017fc4 	addi	r16,at,1535
 c017f98:	0c017fcc 	andi	r16,at,1535
 c017f9c:	0c017fbc 	xorhi	r16,at,1534
 c017fa0:	0c017fbc 	xorhi	r16,at,1534
 c017fa4:	0c017fcc 	andi	r16,at,1535
 c017fa8:	0c017fbc 	xorhi	r16,at,1534
 c017fac:	0c017fc4 	addi	r16,at,1535
 c017fb0:	0c017fcc 	andi	r16,at,1535
 c017fb4:	0c017fcc 	andi	r16,at,1535
 c017fb8:	0c017fbc 	xorhi	r16,at,1534
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 c017fbc:	00800044 	movi	r2,1
 c017fc0:	00000306 	br	c017fd0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 c017fc4:	0005883a 	mov	r2,zero
 c017fc8:	00000106 	br	c017fd0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 c017fcc:	0005883a 	mov	r2,zero
  }
}
 c017fd0:	e037883a 	mov	sp,fp
 c017fd4:	df000017 	ldw	fp,0(sp)
 c017fd8:	dec00104 	addi	sp,sp,4
 c017fdc:	f800283a 	ret

0c017fe0 <atexit>:
 c017fe0:	200b883a 	mov	r5,r4
 c017fe4:	000f883a 	mov	r7,zero
 c017fe8:	000d883a 	mov	r6,zero
 c017fec:	0009883a 	mov	r4,zero
 c017ff0:	c0182101 	jmpi	c018210 <__register_exitproc>

0c017ff4 <exit>:
 c017ff4:	defffe04 	addi	sp,sp,-8
 c017ff8:	000b883a 	mov	r5,zero
 c017ffc:	dc000015 	stw	r16,0(sp)
 c018000:	dfc00115 	stw	ra,4(sp)
 c018004:	2021883a 	mov	r16,r4
 c018008:	c0183280 	call	c018328 <__call_exitprocs>
 c01800c:	008300b4 	movhi	r2,3074
 c018010:	10aa2504 	addi	r2,r2,-22380
 c018014:	11000017 	ldw	r4,0(r2)
 c018018:	20800f17 	ldw	r2,60(r4)
 c01801c:	10000126 	beq	r2,zero,c018024 <exit+0x30>
 c018020:	103ee83a 	callr	r2
 c018024:	8009883a 	mov	r4,r16
 c018028:	c0184a80 	call	c0184a8 <_exit>

0c01802c <memcmp>:
 c01802c:	01c000c4 	movi	r7,3
 c018030:	3980192e 	bgeu	r7,r6,c018098 <memcmp+0x6c>
 c018034:	2144b03a 	or	r2,r4,r5
 c018038:	11c4703a 	and	r2,r2,r7
 c01803c:	10000f26 	beq	r2,zero,c01807c <memcmp+0x50>
 c018040:	20800003 	ldbu	r2,0(r4)
 c018044:	28c00003 	ldbu	r3,0(r5)
 c018048:	10c0151e 	bne	r2,r3,c0180a0 <memcmp+0x74>
 c01804c:	31bfff84 	addi	r6,r6,-2
 c018050:	01ffffc4 	movi	r7,-1
 c018054:	00000406 	br	c018068 <memcmp+0x3c>
 c018058:	20800003 	ldbu	r2,0(r4)
 c01805c:	28c00003 	ldbu	r3,0(r5)
 c018060:	31bfffc4 	addi	r6,r6,-1
 c018064:	10c00e1e 	bne	r2,r3,c0180a0 <memcmp+0x74>
 c018068:	21000044 	addi	r4,r4,1
 c01806c:	29400044 	addi	r5,r5,1
 c018070:	31fff91e 	bne	r6,r7,c018058 <__alt_data_end+0xfc018058>
 c018074:	0005883a 	mov	r2,zero
 c018078:	f800283a 	ret
 c01807c:	20c00017 	ldw	r3,0(r4)
 c018080:	28800017 	ldw	r2,0(r5)
 c018084:	18bfee1e 	bne	r3,r2,c018040 <__alt_data_end+0xfc018040>
 c018088:	31bfff04 	addi	r6,r6,-4
 c01808c:	21000104 	addi	r4,r4,4
 c018090:	29400104 	addi	r5,r5,4
 c018094:	39bff936 	bltu	r7,r6,c01807c <__alt_data_end+0xfc01807c>
 c018098:	303fe91e 	bne	r6,zero,c018040 <__alt_data_end+0xfc018040>
 c01809c:	003ff506 	br	c018074 <__alt_data_end+0xfc018074>
 c0180a0:	10c5c83a 	sub	r2,r2,r3
 c0180a4:	f800283a 	ret

0c0180a8 <_putc_r>:
 c0180a8:	defffc04 	addi	sp,sp,-16
 c0180ac:	dc000215 	stw	r16,8(sp)
 c0180b0:	dfc00315 	stw	ra,12(sp)
 c0180b4:	2021883a 	mov	r16,r4
 c0180b8:	20000226 	beq	r4,zero,c0180c4 <_putc_r+0x1c>
 c0180bc:	20800e17 	ldw	r2,56(r4)
 c0180c0:	10001b26 	beq	r2,zero,c018130 <_putc_r+0x88>
 c0180c4:	30800217 	ldw	r2,8(r6)
 c0180c8:	10bfffc4 	addi	r2,r2,-1
 c0180cc:	30800215 	stw	r2,8(r6)
 c0180d0:	10000a16 	blt	r2,zero,c0180fc <_putc_r+0x54>
 c0180d4:	30800017 	ldw	r2,0(r6)
 c0180d8:	11400005 	stb	r5,0(r2)
 c0180dc:	30800017 	ldw	r2,0(r6)
 c0180e0:	10c00044 	addi	r3,r2,1
 c0180e4:	30c00015 	stw	r3,0(r6)
 c0180e8:	10800003 	ldbu	r2,0(r2)
 c0180ec:	dfc00317 	ldw	ra,12(sp)
 c0180f0:	dc000217 	ldw	r16,8(sp)
 c0180f4:	dec00404 	addi	sp,sp,16
 c0180f8:	f800283a 	ret
 c0180fc:	30c00617 	ldw	r3,24(r6)
 c018100:	10c00616 	blt	r2,r3,c01811c <_putc_r+0x74>
 c018104:	30800017 	ldw	r2,0(r6)
 c018108:	00c00284 	movi	r3,10
 c01810c:	11400005 	stb	r5,0(r2)
 c018110:	30800017 	ldw	r2,0(r6)
 c018114:	11400003 	ldbu	r5,0(r2)
 c018118:	28fff11e 	bne	r5,r3,c0180e0 <__alt_data_end+0xfc0180e0>
 c01811c:	8009883a 	mov	r4,r16
 c018120:	dfc00317 	ldw	ra,12(sp)
 c018124:	dc000217 	ldw	r16,8(sp)
 c018128:	dec00404 	addi	sp,sp,16
 c01812c:	c011d341 	jmpi	c011d34 <__swbuf_r>
 c018130:	d9400015 	stw	r5,0(sp)
 c018134:	d9800115 	stw	r6,4(sp)
 c018138:	c00b79c0 	call	c00b79c <__sinit>
 c01813c:	d9800117 	ldw	r6,4(sp)
 c018140:	d9400017 	ldw	r5,0(sp)
 c018144:	003fdf06 	br	c0180c4 <__alt_data_end+0xfc0180c4>

0c018148 <putc>:
 c018148:	008300b4 	movhi	r2,3074
 c01814c:	defffc04 	addi	sp,sp,-16
 c018150:	10aa2604 	addi	r2,r2,-22376
 c018154:	dc000115 	stw	r16,4(sp)
 c018158:	14000017 	ldw	r16,0(r2)
 c01815c:	dc400215 	stw	r17,8(sp)
 c018160:	dfc00315 	stw	ra,12(sp)
 c018164:	2023883a 	mov	r17,r4
 c018168:	80000226 	beq	r16,zero,c018174 <putc+0x2c>
 c01816c:	80800e17 	ldw	r2,56(r16)
 c018170:	10001a26 	beq	r2,zero,c0181dc <putc+0x94>
 c018174:	28800217 	ldw	r2,8(r5)
 c018178:	10bfffc4 	addi	r2,r2,-1
 c01817c:	28800215 	stw	r2,8(r5)
 c018180:	10000b16 	blt	r2,zero,c0181b0 <putc+0x68>
 c018184:	28800017 	ldw	r2,0(r5)
 c018188:	14400005 	stb	r17,0(r2)
 c01818c:	28800017 	ldw	r2,0(r5)
 c018190:	10c00044 	addi	r3,r2,1
 c018194:	28c00015 	stw	r3,0(r5)
 c018198:	10800003 	ldbu	r2,0(r2)
 c01819c:	dfc00317 	ldw	ra,12(sp)
 c0181a0:	dc400217 	ldw	r17,8(sp)
 c0181a4:	dc000117 	ldw	r16,4(sp)
 c0181a8:	dec00404 	addi	sp,sp,16
 c0181ac:	f800283a 	ret
 c0181b0:	28c00617 	ldw	r3,24(r5)
 c0181b4:	10c00e16 	blt	r2,r3,c0181f0 <putc+0xa8>
 c0181b8:	28800017 	ldw	r2,0(r5)
 c0181bc:	01000284 	movi	r4,10
 c0181c0:	14400005 	stb	r17,0(r2)
 c0181c4:	28800017 	ldw	r2,0(r5)
 c0181c8:	10c00003 	ldbu	r3,0(r2)
 c0181cc:	193ff01e 	bne	r3,r4,c018190 <__alt_data_end+0xfc018190>
 c0181d0:	280d883a 	mov	r6,r5
 c0181d4:	180b883a 	mov	r5,r3
 c0181d8:	00000706 	br	c0181f8 <putc+0xb0>
 c0181dc:	8009883a 	mov	r4,r16
 c0181e0:	d9400015 	stw	r5,0(sp)
 c0181e4:	c00b79c0 	call	c00b79c <__sinit>
 c0181e8:	d9400017 	ldw	r5,0(sp)
 c0181ec:	003fe106 	br	c018174 <__alt_data_end+0xfc018174>
 c0181f0:	280d883a 	mov	r6,r5
 c0181f4:	880b883a 	mov	r5,r17
 c0181f8:	8009883a 	mov	r4,r16
 c0181fc:	dfc00317 	ldw	ra,12(sp)
 c018200:	dc400217 	ldw	r17,8(sp)
 c018204:	dc000117 	ldw	r16,4(sp)
 c018208:	dec00404 	addi	sp,sp,16
 c01820c:	c011d341 	jmpi	c011d34 <__swbuf_r>

0c018210 <__register_exitproc>:
 c018210:	defffa04 	addi	sp,sp,-24
 c018214:	dc000315 	stw	r16,12(sp)
 c018218:	040300b4 	movhi	r16,3074
 c01821c:	842a2504 	addi	r16,r16,-22380
 c018220:	80c00017 	ldw	r3,0(r16)
 c018224:	dc400415 	stw	r17,16(sp)
 c018228:	dfc00515 	stw	ra,20(sp)
 c01822c:	18805217 	ldw	r2,328(r3)
 c018230:	2023883a 	mov	r17,r4
 c018234:	10003726 	beq	r2,zero,c018314 <__register_exitproc+0x104>
 c018238:	10c00117 	ldw	r3,4(r2)
 c01823c:	010007c4 	movi	r4,31
 c018240:	20c00e16 	blt	r4,r3,c01827c <__register_exitproc+0x6c>
 c018244:	1a000044 	addi	r8,r3,1
 c018248:	8800221e 	bne	r17,zero,c0182d4 <__register_exitproc+0xc4>
 c01824c:	18c00084 	addi	r3,r3,2
 c018250:	18c7883a 	add	r3,r3,r3
 c018254:	18c7883a 	add	r3,r3,r3
 c018258:	12000115 	stw	r8,4(r2)
 c01825c:	10c7883a 	add	r3,r2,r3
 c018260:	19400015 	stw	r5,0(r3)
 c018264:	0005883a 	mov	r2,zero
 c018268:	dfc00517 	ldw	ra,20(sp)
 c01826c:	dc400417 	ldw	r17,16(sp)
 c018270:	dc000317 	ldw	r16,12(sp)
 c018274:	dec00604 	addi	sp,sp,24
 c018278:	f800283a 	ret
 c01827c:	00800034 	movhi	r2,0
 c018280:	10800004 	addi	r2,r2,0
 c018284:	10002626 	beq	r2,zero,c018320 <__register_exitproc+0x110>
 c018288:	01006404 	movi	r4,400
 c01828c:	d9400015 	stw	r5,0(sp)
 c018290:	d9800115 	stw	r6,4(sp)
 c018294:	d9c00215 	stw	r7,8(sp)
 c018298:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 c01829c:	d9400017 	ldw	r5,0(sp)
 c0182a0:	d9800117 	ldw	r6,4(sp)
 c0182a4:	d9c00217 	ldw	r7,8(sp)
 c0182a8:	10001d26 	beq	r2,zero,c018320 <__register_exitproc+0x110>
 c0182ac:	81000017 	ldw	r4,0(r16)
 c0182b0:	10000115 	stw	zero,4(r2)
 c0182b4:	02000044 	movi	r8,1
 c0182b8:	22405217 	ldw	r9,328(r4)
 c0182bc:	0007883a 	mov	r3,zero
 c0182c0:	12400015 	stw	r9,0(r2)
 c0182c4:	20805215 	stw	r2,328(r4)
 c0182c8:	10006215 	stw	zero,392(r2)
 c0182cc:	10006315 	stw	zero,396(r2)
 c0182d0:	883fde26 	beq	r17,zero,c01824c <__alt_data_end+0xfc01824c>
 c0182d4:	18c9883a 	add	r4,r3,r3
 c0182d8:	2109883a 	add	r4,r4,r4
 c0182dc:	1109883a 	add	r4,r2,r4
 c0182e0:	21802215 	stw	r6,136(r4)
 c0182e4:	01800044 	movi	r6,1
 c0182e8:	12406217 	ldw	r9,392(r2)
 c0182ec:	30cc983a 	sll	r6,r6,r3
 c0182f0:	4992b03a 	or	r9,r9,r6
 c0182f4:	12406215 	stw	r9,392(r2)
 c0182f8:	21c04215 	stw	r7,264(r4)
 c0182fc:	01000084 	movi	r4,2
 c018300:	893fd21e 	bne	r17,r4,c01824c <__alt_data_end+0xfc01824c>
 c018304:	11006317 	ldw	r4,396(r2)
 c018308:	218cb03a 	or	r6,r4,r6
 c01830c:	11806315 	stw	r6,396(r2)
 c018310:	003fce06 	br	c01824c <__alt_data_end+0xfc01824c>
 c018314:	18805304 	addi	r2,r3,332
 c018318:	18805215 	stw	r2,328(r3)
 c01831c:	003fc606 	br	c018238 <__alt_data_end+0xfc018238>
 c018320:	00bfffc4 	movi	r2,-1
 c018324:	003fd006 	br	c018268 <__alt_data_end+0xfc018268>

0c018328 <__call_exitprocs>:
 c018328:	defff504 	addi	sp,sp,-44
 c01832c:	df000915 	stw	fp,36(sp)
 c018330:	dd400615 	stw	r21,24(sp)
 c018334:	dc800315 	stw	r18,12(sp)
 c018338:	dfc00a15 	stw	ra,40(sp)
 c01833c:	ddc00815 	stw	r23,32(sp)
 c018340:	dd800715 	stw	r22,28(sp)
 c018344:	dd000515 	stw	r20,20(sp)
 c018348:	dcc00415 	stw	r19,16(sp)
 c01834c:	dc400215 	stw	r17,8(sp)
 c018350:	dc000115 	stw	r16,4(sp)
 c018354:	d9000015 	stw	r4,0(sp)
 c018358:	2839883a 	mov	fp,r5
 c01835c:	04800044 	movi	r18,1
 c018360:	057fffc4 	movi	r21,-1
 c018364:	008300b4 	movhi	r2,3074
 c018368:	10aa2504 	addi	r2,r2,-22380
 c01836c:	12000017 	ldw	r8,0(r2)
 c018370:	45005217 	ldw	r20,328(r8)
 c018374:	44c05204 	addi	r19,r8,328
 c018378:	a0001c26 	beq	r20,zero,c0183ec <__call_exitprocs+0xc4>
 c01837c:	a0800117 	ldw	r2,4(r20)
 c018380:	15ffffc4 	addi	r23,r2,-1
 c018384:	b8000d16 	blt	r23,zero,c0183bc <__call_exitprocs+0x94>
 c018388:	14000044 	addi	r16,r2,1
 c01838c:	8421883a 	add	r16,r16,r16
 c018390:	8421883a 	add	r16,r16,r16
 c018394:	84402004 	addi	r17,r16,128
 c018398:	a463883a 	add	r17,r20,r17
 c01839c:	a421883a 	add	r16,r20,r16
 c0183a0:	e0001e26 	beq	fp,zero,c01841c <__call_exitprocs+0xf4>
 c0183a4:	80804017 	ldw	r2,256(r16)
 c0183a8:	e0801c26 	beq	fp,r2,c01841c <__call_exitprocs+0xf4>
 c0183ac:	bdffffc4 	addi	r23,r23,-1
 c0183b0:	843fff04 	addi	r16,r16,-4
 c0183b4:	8c7fff04 	addi	r17,r17,-4
 c0183b8:	bd7ff91e 	bne	r23,r21,c0183a0 <__alt_data_end+0xfc0183a0>
 c0183bc:	00800034 	movhi	r2,0
 c0183c0:	10800004 	addi	r2,r2,0
 c0183c4:	10000926 	beq	r2,zero,c0183ec <__call_exitprocs+0xc4>
 c0183c8:	a0800117 	ldw	r2,4(r20)
 c0183cc:	1000301e 	bne	r2,zero,c018490 <__call_exitprocs+0x168>
 c0183d0:	a0800017 	ldw	r2,0(r20)
 c0183d4:	10003226 	beq	r2,zero,c0184a0 <__call_exitprocs+0x178>
 c0183d8:	a009883a 	mov	r4,r20
 c0183dc:	98800015 	stw	r2,0(r19)
 c0183e0:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 c0183e4:	9d000017 	ldw	r20,0(r19)
 c0183e8:	a03fe41e 	bne	r20,zero,c01837c <__alt_data_end+0xfc01837c>
 c0183ec:	dfc00a17 	ldw	ra,40(sp)
 c0183f0:	df000917 	ldw	fp,36(sp)
 c0183f4:	ddc00817 	ldw	r23,32(sp)
 c0183f8:	dd800717 	ldw	r22,28(sp)
 c0183fc:	dd400617 	ldw	r21,24(sp)
 c018400:	dd000517 	ldw	r20,20(sp)
 c018404:	dcc00417 	ldw	r19,16(sp)
 c018408:	dc800317 	ldw	r18,12(sp)
 c01840c:	dc400217 	ldw	r17,8(sp)
 c018410:	dc000117 	ldw	r16,4(sp)
 c018414:	dec00b04 	addi	sp,sp,44
 c018418:	f800283a 	ret
 c01841c:	a0800117 	ldw	r2,4(r20)
 c018420:	80c00017 	ldw	r3,0(r16)
 c018424:	10bfffc4 	addi	r2,r2,-1
 c018428:	15c01426 	beq	r2,r23,c01847c <__call_exitprocs+0x154>
 c01842c:	80000015 	stw	zero,0(r16)
 c018430:	183fde26 	beq	r3,zero,c0183ac <__alt_data_end+0xfc0183ac>
 c018434:	95c8983a 	sll	r4,r18,r23
 c018438:	a0806217 	ldw	r2,392(r20)
 c01843c:	a5800117 	ldw	r22,4(r20)
 c018440:	2084703a 	and	r2,r4,r2
 c018444:	10000b26 	beq	r2,zero,c018474 <__call_exitprocs+0x14c>
 c018448:	a0806317 	ldw	r2,396(r20)
 c01844c:	2088703a 	and	r4,r4,r2
 c018450:	20000c1e 	bne	r4,zero,c018484 <__call_exitprocs+0x15c>
 c018454:	89400017 	ldw	r5,0(r17)
 c018458:	d9000017 	ldw	r4,0(sp)
 c01845c:	183ee83a 	callr	r3
 c018460:	a0800117 	ldw	r2,4(r20)
 c018464:	15bfbf1e 	bne	r2,r22,c018364 <__alt_data_end+0xfc018364>
 c018468:	98800017 	ldw	r2,0(r19)
 c01846c:	153fcf26 	beq	r2,r20,c0183ac <__alt_data_end+0xfc0183ac>
 c018470:	003fbc06 	br	c018364 <__alt_data_end+0xfc018364>
 c018474:	183ee83a 	callr	r3
 c018478:	003ff906 	br	c018460 <__alt_data_end+0xfc018460>
 c01847c:	a5c00115 	stw	r23,4(r20)
 c018480:	003feb06 	br	c018430 <__alt_data_end+0xfc018430>
 c018484:	89000017 	ldw	r4,0(r17)
 c018488:	183ee83a 	callr	r3
 c01848c:	003ff406 	br	c018460 <__alt_data_end+0xfc018460>
 c018490:	a0800017 	ldw	r2,0(r20)
 c018494:	a027883a 	mov	r19,r20
 c018498:	1029883a 	mov	r20,r2
 c01849c:	003fb606 	br	c018378 <__alt_data_end+0xfc018378>
 c0184a0:	0005883a 	mov	r2,zero
 c0184a4:	003ffb06 	br	c018494 <__alt_data_end+0xfc018494>

0c0184a8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 c0184a8:	defffd04 	addi	sp,sp,-12
 c0184ac:	df000215 	stw	fp,8(sp)
 c0184b0:	df000204 	addi	fp,sp,8
 c0184b4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 c0184b8:	0001883a 	nop
 c0184bc:	e0bfff17 	ldw	r2,-4(fp)
 c0184c0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 c0184c4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 c0184c8:	10000226 	beq	r2,zero,c0184d4 <_exit+0x2c>
    ALT_SIM_FAIL();
 c0184cc:	002af070 	cmpltui	zero,zero,43969
 c0184d0:	00000106 	br	c0184d8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 c0184d4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 c0184d8:	003fff06 	br	c0184d8 <__alt_data_end+0xfc0184d8>
