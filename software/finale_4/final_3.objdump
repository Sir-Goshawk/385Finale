
final_3.elf:     file format elf32-littlenios2
final_3.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0c000230

Program Header:
    LOAD off    0x00001000 vaddr 0x0c000000 paddr 0x0c000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x0c000020 paddr 0x0c000020 align 2**12
         filesz 0x00018d10 memsz 0x00018d10 flags r-x
    LOAD off    0x00019d30 vaddr 0x0c018d30 paddr 0x0c01ab54 align 2**12
         filesz 0x00001e24 memsz 0x00001e24 flags rw-
    LOAD off    0x0001c978 vaddr 0x0c01c978 paddr 0x0c01c978 align 2**12
         filesz 0x00000000 memsz 0x00000308 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  0c000000  0c000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  0c000020  0c000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00018410  0c000230  0c000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000006f0  0c018640  0c018640  00019640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001e24  0c018d30  0c01ab54  00019d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000308  0c01c978  0c01c978  0001c978  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  0001bb54  2**0
                  CONTENTS
  7 .sdram        00000000  0c01cc80  0c01cc80  0001bb54  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001bb54  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001160  00000000  00000000  0001bb78  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002ccb0  00000000  00000000  0001ccd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b16b  00000000  00000000  00049988  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e893  00000000  00000000  00054af3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002fb8  00000000  00000000  00063388  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000048ba  00000000  00000000  00066340  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001ce1d  00000000  00000000  0006abfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00087a18  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001b60  00000000  00000000  00087a58  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0008d64a  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0008d64d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0008d659  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0008d65a  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0008d65b  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0008d65f  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0008d663  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0008d667  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0008d672  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0008d67d  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000006  00000000  00000000  0008d688  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000012  00000000  00000000  0008d68e  2**0
                  CONTENTS, READONLY
 30 .jdi          00004d26  00000000  00000000  0008d6a0  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00097916  00000000  00000000  000923c6  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
0c000000 l    d  .entry	00000000 .entry
0c000020 l    d  .exceptions	00000000 .exceptions
0c000230 l    d  .text	00000000 .text
0c018640 l    d  .rodata	00000000 .rodata
0c018d30 l    d  .rwdata	00000000 .rwdata
0c01c978 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
0c01cc80 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../final_3_bsp//obj/HAL/src/crt0.o
0c000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 USB_drive.c
0c01aafc l     O .rwdata	00000001 addr
00000000 l    df *ABS*	00000000 main.c
0c01ab00 l     O .rwdata	00000004 vga_ctrl
0c018d30 l     O .rwdata	00000170 colors
00000000 l    df *ABS*	00000000 text_mode_vga_color.c
0c01ab04 l     O .rwdata	00000004 vga_ctrl
0c018ea0 l     O .rwdata	00000170 colors
00000000 l    df *ABS*	00000000 HID.c
00000000 l    df *ABS*	00000000 MAX3421E.c
00000000 l    df *ABS*	00000000 transfer.c
0c01c998 l     O .bss	00000004 usb_delay.2608
0c01c99c l     O .bss	00000001 tmp_addr.2609
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0c018a36 l     O .rodata	00000010 zeroes.4389
0c018a46 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
0c018a56 l     O .rodata	00000010 zeroes.4404
0c009f90 l     F .text	000000bc __sbprintf
0c018a66 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0c00a1a0 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0c00bcf8 l     F .text	00000008 __fp_unlock
0c00bd0c l     F .text	0000019c __sinit.part.1
0c00bea8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 impure.c
0c019448 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0c01988c l     O .rwdata	00000020 lc_ctype_charset
0c01986c l     O .rwdata	00000020 lc_message_charset
0c0198ac l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0c018a98 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0c018bbc l     O .rodata	00000010 zeroes.4333
0c018bcc l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 vfprintf.c
0c00ffa0 l     F .text	000000fc __sprint_r.part.0
0c018bdc l     O .rodata	00000010 zeroes.4349
0c0115dc l     F .text	000000bc __sbprintf
0c018bec l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0c015554 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0c015668 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0c015694 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0c01597c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0c015a64 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0c015b50 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0c015f94 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0c01ab44 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0c0163dc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0c016518 l     F .text	00000034 alt_dev_reg
0c019a8c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0c01680c l     F .text	0000020c altera_avalon_jtag_uart_irq
0c016a18 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0c01724c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0c0175e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0c017a44 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0c017ba4 l     F .text	0000003c alt_get_errno
0c017be0 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0c01c9e4 g     O .bss	00000004 alt_instruction_exception_handler
0c00e0c8 g     F .text	00000074 _mprec_log10
0c00e1b4 g     F .text	0000008c __any_on
0c011b90 g     F .text	00000054 _isatty_r
0c018aa4 g     O .rodata	00000028 __mprec_tinytens
0c015c68 g     F .text	0000007c alt_main
0c01ab08 g     O .rwdata	00000008 ctrl_xfers
0c00568c g     F .text	000000c0 _puts_r
0c01cb80 g     O .bss	00000100 alt_irq
0c011be4 g     F .text	00000060 _lseek_r
0c00427c g     F .text	00000644 USB_Task
0c01ab54 g       *ABS*	00000000 __flash_rwdata_start
0c013f2c g     F .text	00000088 .hidden __eqdf2
0c00cb2c g     F .text	0000005c _gettimeofday_r
0c01cc80 g       *ABS*	00000000 __alt_heap_start
0c005650 g     F .text	0000003c printf
0c011dfc g     F .text	0000009c _wcrtomb_r
0c00332c g     F .text	00000088 kbdPoll
0c00e8f0 g     F .text	0000005c __sseek
0c00c058 g     F .text	00000010 __sinit
0c011ca4 g     F .text	00000140 __swbuf_r
0c00cb88 g     F .text	0000007c _setlocale_r
0c00beb0 g     F .text	00000078 __sfmoreglue
0c015d08 g     F .text	00000024 __malloc_unlock
0c00267c g     F .text	000002b4 textVGAColorScreenSaver
0c018640 g     O .rodata	00000118 tetrisBlocks
0c000f88 g     F .text	00000188 TetrisCheckLineComplete
0c001510 g     F .text	000001f0 GetDriverandReport
0c001ddc g     F .text	00000450 keyInput
0c000478 g     F .text	000001bc TetrisCheckCollision
0c00cf04 g     F .text	0000015c memmove
0c00c040 g     F .text	00000018 _cleanup
0c00d188 g     F .text	000000a8 _Balloc
0c01aaf4 g     O .rwdata	00000004 timer
0c003480 g     F .text	00000088 MAXreg_wr
0c019010 g     O .rwdata	00000030 ClientDriverTable
0c013fb4 g     F .text	000000dc .hidden __gtdf2
0c017e28 g     F .text	00000024 altera_nios2_gen2_irq_init
0c0048c0 g     F .text	0000002c MSDProbe
0c000000 g     F .entry	0000000c __reset
0c003d7c g     F .text	000000e8 XferCtrlData
0c01c97c g     O .bss	00000004 nextColor
0c00299c g     F .text	000000b8 VGAwriteText
0c000020 g       *ABS*	00000000 __flash_exceptions_start
0c01c9e8 g     O .bss	00000010 hid_ep
0c011b34 g     F .text	0000005c _fstat_r
0c01c9ac g     O .bss	00000004 errno
0c00e86c g     F .text	00000008 __seofread
0c0003d4 g     F .text	000000a4 TetrisCleanup
0c00ec00 g     F .text	000013a0 ___svfiprintf_internal_r
0c01c9d0 g     O .bss	00000004 alt_argv
0c022aec g       *ABS*	00000000 _gp
0c0163ac g     F .text	00000030 usleep
0c003670 g     F .text	00000074 MAXreg_rd
0c01aaf8 g     O .rwdata	00000004 reset
0c0022f4 g     F .text	00000050 textVGAColorClr
0c01c980 g     O .bss	00000004 boardColor
0c01990c g     O .rwdata	00000180 alt_fd_list
0c003264 g     F .text	00000040 HID_init
0c0009e8 g     F .text	00000148 TetrisPrintBlock
0c017e4c g     F .text	00000090 alt_find_dev
0c0054d8 g     F .text	00000148 memcpy
0c01c984 g     O .bss	00000004 nextBlock
0c00bd00 g     F .text	0000000c _cleanup_r
0c01536c g     F .text	000000dc .hidden __floatsidf
0c017b28 g     F .text	0000007c alt_io_redirect
0c014090 g     F .text	000000f4 .hidden __ltdf2
0c018640 g       *ABS*	00000000 __DTOR_END__
0c00574c g     F .text	00000014 puts
0c0180a8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0c00e7a4 g     F .text	00000074 __fpclassifyd
0c00e024 g     F .text	000000a4 __ratio
0c0115c0 g     F .text	0000001c __vfiprintf_internal
0c016c10 g     F .text	0000021c altera_avalon_jtag_uart_read
0c004ca4 g     F .text	00000014 malloc
0c005620 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0c004bc0 g     F .text	00000064 .hidden __udivsi3
0c0159b8 g     F .text	000000ac isatty
0c018af4 g     O .rodata	000000c8 __mprec_tens
0c001cd0 g     F .text	00000084 moveMenu
0c00cc04 g     F .text	0000000c __locale_charset
0c01c9bc g     O .bss	00000008 alt_timezone
0c01c9a8 g     O .bss	00000004 __malloc_top_pad
0c001110 g     F .text	00000060 TetrisInputLeft
0c01ab10 g     O .rwdata	00000001 usb_task_state
0c01ab24 g     O .rwdata	00000004 __mb_cur_max
0c00cc34 g     F .text	0000000c _localeconv_r
0c00d5bc g     F .text	0000003c __i2b
0c00c4dc g     F .text	000004c8 __sfvwrite_r
0c0057dc g     F .text	00000054 _sbrk_r
0c011c44 g     F .text	00000060 _read_r
0c003a38 g     F .text	00000094 MAX3421E_init
0c0019dc g     F .text	00000034 setKeycode
0c01ab3c g     O .rwdata	00000004 alt_max_fd
0c011828 g     F .text	000000f0 _fclose_r
0c00bcc8 g     F .text	00000030 fflush
0c01c9a4 g     O .bss	00000004 __malloc_max_sbrked_mem
0c012cb0 g     F .text	000008ac .hidden __adddf3
0c00ddcc g     F .text	0000010c __b2d
0c0126ec g     F .text	000005c4 .hidden __umoddi3
0c015b8c g     F .text	000000dc lseek
0c01ab1c g     O .rwdata	00000004 _global_impure_ptr
0c00e240 g     F .text	00000564 _realloc_r
0c01cc80 g       *ABS*	00000000 __bss_end
0c017954 g     F .text	000000f0 alt_iic_isr_register
0c0162a4 g     F .text	00000108 alt_tick
0c0120f0 g     F .text	000005fc .hidden __udivdi3
0c011a90 g     F .text	00000024 _fputwc_r
0c018acc g     O .rodata	00000028 __mprec_bigtens
0c00d3a0 g     F .text	00000104 __s2b
0c015448 g     F .text	000000a8 .hidden __floatunsidf
0c00db0c g     F .text	00000060 __mcmp
0c00c078 g     F .text	00000018 __fp_lock_all
0c017908 g     F .text	0000004c alt_ic_irq_enabled
0c01c978 g     O .bss	00000004 players
0c016208 g     F .text	0000009c alt_alarm_stop
0c01c9e0 g     O .bss	00000004 alt_irq_active
0c004988 g     F .text	0000002c DummyProbe
0c0000fc g     F .exceptions	000000d4 alt_irq_handler
0c000e60 g     F .text	00000128 TetrisClearLine
0c0198e4 g     O .rwdata	00000028 alt_dev_null
0c0032a4 g     F .text	00000088 mousePoll
0c00388c g     F .text	00000024 Vbus_power
0c001a10 g     F .text	000001f8 TetrisPopulate
0c0175c4 g     F .text	00000020 alt_dcache_flush_all
0c00d4a4 g     F .text	00000068 __hi0bits
0c0152ec g     F .text	00000080 .hidden __fixdfsi
0c01ab54 g       *ABS*	00000000 __ram_rwdata_end
0c01ab34 g     O .rwdata	00000008 alt_dev_list
0c016418 g     F .text	00000100 write
0c01820c g     F .text	000000a0 _putc_r
0c018d30 g       *ABS*	00000000 __ram_rodata_end
0c01c99d g     O .bss	00000001 usb_error
0c0156d0 g     F .text	000000b8 fstat
0c014090 g     F .text	000000f4 .hidden __ledf2
0c00d884 g     F .text	00000140 __pow5mult
0c0100b4 g     F .text	0000150c ___vfiprintf_internal_r
0c01c9b8 g     O .bss	00000004 __nlocale_changed
0c004c24 g     F .text	00000058 .hidden __umodsi3
0c00026c g     F .text	00000168 TetrisInitialize
0c01cc80 g       *ABS*	00000000 end
0c01674c g     F .text	000000c0 altera_avalon_jtag_uart_init
0c0001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0c003ed8 g     F .text	0000017c XferDispatchPkt
0c018640 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
0c0172c4 g     F .text	0000007c alt_avalon_timer_sc_init
0c0154f0 g     F .text	00000064 .hidden __clzsi2
0c016e2c g     F .text	00000224 altera_avalon_jtag_uart_write
0c00c068 g     F .text	00000004 __sfp_lock_acquire
0c00ce20 g     F .text	000000e4 memchr
0c007c98 g     F .text	000022dc ___vfprintf_internal_r
0c003bfc g     F .text	00000034 MaxGpxHandler
0c005830 g     F .text	00000058 _sprintf_r
0c00c1cc g     F .text	00000310 _free_r
0c015d2c g     F .text	0000022c alt_printf
0c00cc10 g     F .text	00000010 __locale_mb_cur_max
0c01848c g     F .text	00000180 __call_exitprocs
0c01c9b4 g     O .bss	00000004 __mlocale_changed
0c01ab14 g     O .rwdata	00000004 __malloc_sbrk_base
0c000230 g     F .text	0000003c _start
0c01c9d8 g     O .bss	00000004 _alt_tick_rate
0c0036e4 g     F .text	00000108 MAXbytes_rd
0c005778 g     F .text	00000064 rand
0c00d9c4 g     F .text	00000148 __lshift
0c017050 g     F .text	000001fc alt_avalon_spi_command
0c01c9dc g     O .bss	00000004 _alt_nticks
0c015fd0 g     F .text	00000104 read
0c016584 g     F .text	00000064 alt_sys_init
0c00ea30 g     F .text	000001d0 __ssprint_r
0c01cb38 g     O .bss	00000048 devtable
0c018374 g     F .text	00000118 __register_exitproc
0c002e5c g     F .text	00000408 HIDKProbe
0c01c9f8 g     O .bss	00000018 msd_ep
0c001170 g     F .text	00000060 TetrisInputRight
0c00d5f8 g     F .text	0000028c __multiply
0c016ab8 g     F .text	00000068 altera_avalon_jtag_uart_close
0c0041e4 g     F .text	00000098 USB_init
0c01ca38 g     O .bss	00000100 bigbuf
0c004c7c g     F .text	00000028 .hidden __mulsi3
0c018d30 g       *ABS*	00000000 __ram_rwdata_start
0c018640 g       *ABS*	00000000 __ram_rodata_start
0c01ca10 g     O .bss	00000028 __malloc_current_mallinfo
0c01c994 g     O .bss	00000001 last_usb_task_state
0c00ded8 g     F .text	0000014c __d2b
0c01c98c g     O .bss	00000008 dev0ep
0c001744 g     F .text	00000048 clearLED
0c0165e8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0c017fe4 g     F .text	000000c4 alt_get_fd
0c01746c g     F .text	00000158 alt_busy_sleep
0c0048ec g     F .text	00000038 MSDEventHandler
0c0116f8 g     F .text	00000054 _close_r
0c018190 g     F .text	0000007c memcmp
0c0166a8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0c01cc80 g       *ABS*	00000000 __alt_stack_base
0c0166f8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0c00a04c g     F .text	00000154 __swsetup_r
0c01355c g     F .text	000009d0 .hidden __divdf3
0c00bf28 g     F .text	00000118 __sfp
0c00e13c g     F .text	00000078 __copybits
0c019040 g     O .rwdata	00000408 __malloc_av_
0c00c074 g     F .text	00000004 __sinit_lock_release
0c004950 g     F .text	00000038 CDCEventHandler
0c014184 g     F .text	0000086c .hidden __muldf3
0c0049b4 g     F .text	00000038 DummyEventHandler
0c00e818 g     F .text	00000054 __sread
0c017edc g     F .text	00000108 alt_find_file
0c017620 g     F .text	000000a4 alt_dev_llist_insert
0c015ce4 g     F .text	00000024 __malloc_lock
0c016158 g     F .text	000000b0 sbrk
0c00598c g     F .text	000022bc ___svfprintf_internal_r
0c00bc6c g     F .text	0000005c _fflush_r
0c01174c g     F .text	000000dc _calloc_r
0c015788 g     F .text	000001f4 gettimeofday
0c01c978 g       *ABS*	00000000 __bss_start
0c0038b0 g     F .text	00000188 MAX_busprobe
0c01c988 g     O .bss	00000002 hid_device
0c00d060 g     F .text	00000128 memset
0c00222c g     F .text	000000c8 main
0c003acc g     F .text	00000064 MAX3421E_Task
0c01c9d4 g     O .bss	00000004 alt_envp
0c01c9a0 g     O .bss	00000004 __malloc_max_total_mem
0c016648 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0c011de4 g     F .text	00000018 __swbuf
0c005760 g     F .text	00000018 srand
0c004a44 g     F .text	00000084 ConvUTF8ToStr
0c000b30 g     F .text	000002c0 TetrisRotateBlock
0c001c08 g     F .text	000000c8 gameMenu
0c000634 g     F .text	000003b4 TetrisCreateBlock
0c00e94c g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
0c00257c g     F .text	00000100 screenVGAinitializer
0c011918 g     F .text	00000014 fclose
0c002930 g     F .text	0000006c VGADrawColorBox
0c00a3c8 g     F .text	00001688 _dtoa_r
0c004ccc g     F .text	0000080c _malloc_r
0c011f58 g     F .text	00000030 __ascii_wctomb
0c007c48 g     F .text	00000050 time
0c01ab40 g     O .rwdata	00000004 alt_errno
0c00c9a4 g     F .text	000000c4 _fwalk
0c0182ac g     F .text	000000c8 putc
0c004ac8 g     F .text	00000084 .hidden __divsi3
0c004054 g     F .text	00000190 XferInTransfer
0c002454 g     F .text	00000128 setColorPalette
0c0018a4 g     F .text	00000138 printSignedHex1
0c00c0a8 g     F .text	00000124 _malloc_trim_r
0c018640 g       *ABS*	00000000 __CTOR_END__
0c0011d0 g     F .text	000002dc TetrisPrintBoard
0c004a0c g     F .text	00000038 GetDevtable
0c00e954 g     F .text	000000dc strcmp
0c018640 g       *ABS*	00000000 __flash_rodata_start
0c018640 g       *ABS*	00000000 __DTOR_LIST__
0c003e64 g     F .text	00000074 XferCtrlND
0c013f2c g     F .text	00000088 .hidden __nedf2
0c0037ec g     F .text	000000a0 MAX3421E_reset
0c01654c g     F .text	00000038 alt_irq_init
0c0160d4 g     F .text	00000084 alt_release_fd
0c005888 g     F .text	0000006c sprintf
0c018bfc g     O .rodata	00000100 .hidden __clz_tab
0c01c9b0 g     O .bss	00000004 _PathLocale
0c01aaf0 g     O .rwdata	00000004 arrowPos
0c018144 g     F .text	00000014 atexit
0c011698 g     F .text	00000060 _write_r
0c00cc40 g     F .text	00000018 setlocale
0c000df0 g     F .text	00000070 TetrisFallBlocks
0c01ab20 g     O .rwdata	00000004 _impure_ptr
0c01c9cc g     O .bss	00000004 alt_argc
0c00ba50 g     F .text	0000021c __sflush_r
0c017724 g     F .text	00000060 _do_dtors
0c00cc2c g     F .text	00000008 __locale_cjk_lang
0c003508 g     F .text	00000168 MAXbytes_wr
0c000020 g       .exceptions	00000000 alt_irq_entry
0c00dd68 g     F .text	00000064 __ulp
0c00c090 g     F .text	00000018 __fp_unlock_all
0c01ab2c g     O .rwdata	00000008 alt_fs_list
0c004924 g     F .text	0000002c CDCProbe
0c01c9c4 g     O .bss	00000008 alt_resettime
0c000020 g       *ABS*	00000000 __ram_exceptions_start
0c00cc58 g     F .text	0000000c localeconv
0c001700 g     F .text	00000044 setLED
0c0049ec g     F .text	00000020 GetUsbTaskState
0c0177a4 g     F .text	00000050 alt_ic_isr_register
0c0187e0 g     O .rodata	00000010 devclasses
0c01ab54 g       *ABS*	00000000 _edata
0c0033ec g     F .text	00000038 HIDKEventHandler
0c01cc80 g       *ABS*	00000000 _end
0c003b30 g     F .text	000000cc MaxIntHandler
0c01192c g     F .text	00000164 __fputwc
0c000230 g       *ABS*	00000000 __ram_exceptions_end
0c016b20 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0c0014d4 g     F .text	0000003c TetrisPause
0c002344 g     F .text	00000110 textVGADrawColorText
0c003424 g     F .text	00000034 SPI_init
0c01787c g     F .text	0000008c alt_ic_irq_disable
0c01aaec g     O .rwdata	00000004 tetrisBlockCount
0c00e874 g     F .text	0000007c __swrite
0c01ab18 g     O .rwdata	00000004 __malloc_trim_threshold
0c00cc20 g     F .text	0000000c __locale_msgcharset
0c018158 g     F .text	00000038 exit
0c00ca68 g     F .text	000000c4 _fwalk_reent
0c00db6c g     F .text	000001fc __mdiff
0c004b4c g     F .text	00000074 .hidden __modsi3
10000000 g       *ABS*	00000000 __alt_data_end
0c000020 g     F .exceptions	00000000 alt_exception
0c00c06c g     F .text	00000004 __sfp_lock_release
0c000000 g       *ABS*	00000000 __alt_mem_sdram
0c0033b4 g     F .text	00000038 HIDMEventHandler
0c01860c g     F .text	00000034 _exit
0c017340 g     F .text	0000012c alt_alarm_start
0c00178c g     F .text	00000118 printSignedHex0
0c011fe4 g     F .text	0000010c .hidden __muldi3
0c00cc64 g     F .text	000001bc __smakebuf_r
0c0058f4 g     F .text	00000098 strlen
0c001d54 g     F .text	00000088 clearMenu
0c017ccc g     F .text	0000015c open
0c013fb4 g     F .text	000000dc .hidden __gedf2
0c015f58 g     F .text	0000003c alt_putchar
0c0014ac g     F .text	00000028 TetrisShowScore
0c01ab28 g     O .rwdata	00000004 __wctomb
0c01009c g     F .text	00000018 __sprint_r
0c017784 g     F .text	00000020 alt_icache_flush_all
0c01ab50 g     O .rwdata	00000004 alt_priority_mask
0c0177f4 g     F .text	00000088 alt_ic_irq_enable
0c009f74 g     F .text	0000001c __vfprintf_internal
0c002a54 g     F .text	00000408 HIDMProbe
0c011f88 g     F .text	0000005c _wctomb_r
0c003458 g     F .text	00000028 SPI_wr
0c0149f0 g     F .text	000008fc .hidden __subdf3
0c00d50c g     F .text	000000b0 __lo0bits
0c01ab48 g     O .rwdata	00000008 alt_alarm_list
0c0176c4 g     F .text	00000060 _do_ctors
0c011e98 g     F .text	000000c0 wcrtomb
0c015590 g     F .text	000000d8 close
0c015acc g     F .text	00000084 alt_load
0c011ab4 g     F .text	00000080 fputwc
0c004cb8 g     F .text	00000014 free
0c00c070 g     F .text	00000004 __sinit_lock_acquire
0c003c30 g     F .text	0000014c XferCtrlReq
0c00d258 g     F .text	00000148 __multadd
0c00d230 g     F .text	00000028 _Bfree



Disassembly of section .entry:

0c000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 c000000:	00430034 	movhi	at,3072
    ori r1, r1, %lo(_start)
 c000004:	08408c14 	ori	at,at,560
    jmp r1
 c000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

0c000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 c000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 c000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 c000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 c00002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 c000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 c000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 c000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 c00003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 c000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 c000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 c000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 c00004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 c000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 c000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 c000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 c00005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 c000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 c000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 c000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 c00006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 c000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 c000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 c000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 c00007c:	10000326 	beq	r2,zero,c00008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 c000080:	20000226 	beq	r4,zero,c00008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 c000084:	c0000fc0 	call	c0000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 c000088:	00000706 	br	c0000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 c00008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 c000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 c000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 c000098:	c0001d00 	call	c0001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 c00009c:	1000021e 	bne	r2,zero,c0000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 c0000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 c0000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 c0000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 c0000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 c0000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 c0000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 c0000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 c0000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 c0000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 c0000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 c0000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 c0000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 c0000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 c0000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 c0000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 c0000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 c0000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 c0000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 c0000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 c0000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 c0000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 c0000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 c0000f8:	ef80083a 	eret

0c0000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 c0000fc:	defff904 	addi	sp,sp,-28
 c000100:	dfc00615 	stw	ra,24(sp)
 c000104:	df000515 	stw	fp,20(sp)
 c000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 c00010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 c000110:	0005313a 	rdctl	r2,ipending
 c000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 c000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 c00011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 c000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 c000124:	00800044 	movi	r2,1
 c000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 c00012c:	e0fffb17 	ldw	r3,-20(fp)
 c000130:	e0bffc17 	ldw	r2,-16(fp)
 c000134:	1884703a 	and	r2,r3,r2
 c000138:	10001426 	beq	r2,zero,c00018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 c00013c:	008300b4 	movhi	r2,3074
 c000140:	10b2e004 	addi	r2,r2,-13440
 c000144:	e0fffd17 	ldw	r3,-12(fp)
 c000148:	180690fa 	slli	r3,r3,3
 c00014c:	10c5883a 	add	r2,r2,r3
 c000150:	10c00017 	ldw	r3,0(r2)
 c000154:	008300b4 	movhi	r2,3074
 c000158:	10b2e004 	addi	r2,r2,-13440
 c00015c:	e13ffd17 	ldw	r4,-12(fp)
 c000160:	200890fa 	slli	r4,r4,3
 c000164:	1105883a 	add	r2,r2,r4
 c000168:	10800104 	addi	r2,r2,4
 c00016c:	10800017 	ldw	r2,0(r2)
 c000170:	1009883a 	mov	r4,r2
 c000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 c000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 c00017c:	0005313a 	rdctl	r2,ipending
 c000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 c000184:	e0bfff17 	ldw	r2,-4(fp)
 c000188:	00000706 	br	c0001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 c00018c:	e0bffc17 	ldw	r2,-16(fp)
 c000190:	1085883a 	add	r2,r2,r2
 c000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 c000198:	e0bffd17 	ldw	r2,-12(fp)
 c00019c:	10800044 	addi	r2,r2,1
 c0001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 c0001a4:	003fe106 	br	c00012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 c0001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 c0001ac:	e0bffb17 	ldw	r2,-20(fp)
 c0001b0:	103fdb1e 	bne	r2,zero,c000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 c0001b4:	0001883a 	nop
}
 c0001b8:	0001883a 	nop
 c0001bc:	e037883a 	mov	sp,fp
 c0001c0:	dfc00117 	ldw	ra,4(sp)
 c0001c4:	df000017 	ldw	fp,0(sp)
 c0001c8:	dec00204 	addi	sp,sp,8
 c0001cc:	f800283a 	ret

0c0001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 c0001d0:	defffb04 	addi	sp,sp,-20
 c0001d4:	dfc00415 	stw	ra,16(sp)
 c0001d8:	df000315 	stw	fp,12(sp)
 c0001dc:	df000304 	addi	fp,sp,12
 c0001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 c0001e4:	00bfffc4 	movi	r2,-1
 c0001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 c0001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 c0001f0:	d0a7be17 	ldw	r2,-24840(gp)
 c0001f4:	10000726 	beq	r2,zero,c000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 c0001f8:	d0a7be17 	ldw	r2,-24840(gp)
 c0001fc:	e0fffd17 	ldw	r3,-12(fp)
 c000200:	e1bffe17 	ldw	r6,-8(fp)
 c000204:	e17fff17 	ldw	r5,-4(fp)
 c000208:	1809883a 	mov	r4,r3
 c00020c:	103ee83a 	callr	r2
 c000210:	00000206 	br	c00021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 c000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 c000218:	0005883a 	mov	r2,zero
}
 c00021c:	e037883a 	mov	sp,fp
 c000220:	dfc00117 	ldw	ra,4(sp)
 c000224:	df000017 	ldw	fp,0(sp)
 c000228:	dec00204 	addi	sp,sp,8
 c00022c:	f800283a 	ret

Disassembly of section .text:

0c000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 c000230:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 c000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 c000238:	068300b4 	movhi	gp,3074
    ori gp, gp, %lo(_gp)
 c00023c:	d68abb14 	ori	gp,gp,10988
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 c000240:	00830074 	movhi	r2,3073
    ori r2, r2, %lo(__bss_start)
 c000244:	10b25e14 	ori	r2,r2,51576

    movhi r3, %hi(__bss_end)
 c000248:	00c30074 	movhi	r3,3073
    ori r3, r3, %lo(__bss_end)
 c00024c:	18f32014 	ori	r3,r3,52352

    beq r2, r3, 1f
 c000250:	10c00326 	beq	r2,r3,c000260 <_start+0x30>

0:
    stw zero, (r2)
 c000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 c000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 c00025c:	10fffd36 	bltu	r2,r3,c000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 c000260:	c015acc0 	call	c015acc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 c000264:	c015c680 	call	c015c68 <alt_main>

0c000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 c000268:	003fff06 	br	c000268 <__alt_data_end+0xfc000268>

0c00026c <TetrisInitialize>:
int arrowPos = 25;
alt_u8* timer = 0x00000040;
alt_u8* reset = 0x00000030;


void TetrisInitialize(TetrisGameState* givenState, int width, int height, int givenX, int givenY) {
 c00026c:	defff704 	addi	sp,sp,-36
 c000270:	dfc00815 	stw	ra,32(sp)
 c000274:	df000715 	stw	fp,28(sp)
 c000278:	dc000615 	stw	r16,24(sp)
 c00027c:	df000704 	addi	fp,sp,28
 c000280:	e13ffb15 	stw	r4,-20(fp)
 c000284:	e17ffc15 	stw	r5,-16(fp)
 c000288:	e1bffd15 	stw	r6,-12(fp)
 c00028c:	e1fffe15 	stw	r7,-8(fp)
    int x, y;
    givenState->completedLines = 0;
 c000290:	e0bffb17 	ldw	r2,-20(fp)
 c000294:	10000415 	stw	zero,16(r2)
    givenState->dead = 0;
 c000298:	e0bffb17 	ldw	r2,-20(fp)
 c00029c:	10000315 	stw	zero,12(r2)
    givenState->boardWidth = (width);
 c0002a0:	e0bffb17 	ldw	r2,-20(fp)
 c0002a4:	e0fffc17 	ldw	r3,-16(fp)
 c0002a8:	10c00115 	stw	r3,4(r2)
    givenState->boardHeight = (height+4);
 c0002ac:	e0bffd17 	ldw	r2,-12(fp)
 c0002b0:	10c00104 	addi	r3,r2,4
 c0002b4:	e0bffb17 	ldw	r2,-20(fp)
 c0002b8:	10c00215 	stw	r3,8(r2)
    givenState->gameX = givenX;
 c0002bc:	e0bffb17 	ldw	r2,-20(fp)
 c0002c0:	e0fffe17 	ldw	r3,-8(fp)
 c0002c4:	10c01215 	stw	r3,72(r2)
    givenState->gameY = givenY;
 c0002c8:	e0bffb17 	ldw	r2,-20(fp)
 c0002cc:	e0c00217 	ldw	r3,8(fp)
 c0002d0:	10c01315 	stw	r3,76(r2)
    givenState->board = (int**)malloc(sizeof(int*) * width);
 c0002d4:	e0bffc17 	ldw	r2,-16(fp)
 c0002d8:	1085883a 	add	r2,r2,r2
 c0002dc:	1085883a 	add	r2,r2,r2
 c0002e0:	1009883a 	mov	r4,r2
 c0002e4:	c004ca40 	call	c004ca4 <malloc>
 c0002e8:	1007883a 	mov	r3,r2
 c0002ec:	e0bffb17 	ldw	r2,-20(fp)
 c0002f0:	10c00015 	stw	r3,0(r2)

    for (x = 0; x < givenState->boardWidth; x++) {
 c0002f4:	e03ff915 	stw	zero,-28(fp)
 c0002f8:	00002706 	br	c000398 <TetrisInitialize+0x12c>
        givenState->board[x] = (int*)malloc(sizeof(int) * givenState->boardHeight);
 c0002fc:	e0bffb17 	ldw	r2,-20(fp)
 c000300:	10c00017 	ldw	r3,0(r2)
 c000304:	e0bff917 	ldw	r2,-28(fp)
 c000308:	1085883a 	add	r2,r2,r2
 c00030c:	1085883a 	add	r2,r2,r2
 c000310:	18a1883a 	add	r16,r3,r2
 c000314:	e0bffb17 	ldw	r2,-20(fp)
 c000318:	10800217 	ldw	r2,8(r2)
 c00031c:	1085883a 	add	r2,r2,r2
 c000320:	1085883a 	add	r2,r2,r2
 c000324:	1009883a 	mov	r4,r2
 c000328:	c004ca40 	call	c004ca4 <malloc>
 c00032c:	80800015 	stw	r2,0(r16)
        for (y = 0; y < givenState->boardHeight; y++) {
 c000330:	e03ffa15 	stw	zero,-24(fp)
 c000334:	00001106 	br	c00037c <TetrisInitialize+0x110>
            givenState->board[x][y] = givenState->boardColor;
 c000338:	e0bffb17 	ldw	r2,-20(fp)
 c00033c:	10c00017 	ldw	r3,0(r2)
 c000340:	e0bff917 	ldw	r2,-28(fp)
 c000344:	1085883a 	add	r2,r2,r2
 c000348:	1085883a 	add	r2,r2,r2
 c00034c:	1885883a 	add	r2,r3,r2
 c000350:	10c00017 	ldw	r3,0(r2)
 c000354:	e0bffa17 	ldw	r2,-24(fp)
 c000358:	1085883a 	add	r2,r2,r2
 c00035c:	1085883a 	add	r2,r2,r2
 c000360:	1885883a 	add	r2,r3,r2
 c000364:	e0fffb17 	ldw	r3,-20(fp)
 c000368:	18c01417 	ldw	r3,80(r3)
 c00036c:	10c00015 	stw	r3,0(r2)
    givenState->gameY = givenY;
    givenState->board = (int**)malloc(sizeof(int*) * width);

    for (x = 0; x < givenState->boardWidth; x++) {
        givenState->board[x] = (int*)malloc(sizeof(int) * givenState->boardHeight);
        for (y = 0; y < givenState->boardHeight; y++) {
 c000370:	e0bffa17 	ldw	r2,-24(fp)
 c000374:	10800044 	addi	r2,r2,1
 c000378:	e0bffa15 	stw	r2,-24(fp)
 c00037c:	e0bffb17 	ldw	r2,-20(fp)
 c000380:	10800217 	ldw	r2,8(r2)
 c000384:	e0fffa17 	ldw	r3,-24(fp)
 c000388:	18bfeb16 	blt	r3,r2,c000338 <__alt_data_end+0xfc000338>
    givenState->boardHeight = (height+4);
    givenState->gameX = givenX;
    givenState->gameY = givenY;
    givenState->board = (int**)malloc(sizeof(int*) * width);

    for (x = 0; x < givenState->boardWidth; x++) {
 c00038c:	e0bff917 	ldw	r2,-28(fp)
 c000390:	10800044 	addi	r2,r2,1
 c000394:	e0bff915 	stw	r2,-28(fp)
 c000398:	e0bffb17 	ldw	r2,-20(fp)
 c00039c:	10800117 	ldw	r2,4(r2)
 c0003a0:	e0fff917 	ldw	r3,-28(fp)
 c0003a4:	18bfd516 	blt	r3,r2,c0002fc <__alt_data_end+0xfc0002fc>
        givenState->board[x] = (int*)malloc(sizeof(int) * givenState->boardHeight);
        for (y = 0; y < givenState->boardHeight; y++) {
            givenState->board[x][y] = givenState->boardColor;
        }
    }
    TetrisPrintBoard(givenState);
 c0003a8:	e13ffb17 	ldw	r4,-20(fp)
 c0003ac:	c0011d00 	call	c0011d0 <TetrisPrintBoard>

    givenState->pause = 0;
 c0003b0:	e0bffb17 	ldw	r2,-20(fp)
 c0003b4:	10001115 	stw	zero,68(r2)
}
 c0003b8:	0001883a 	nop
 c0003bc:	e6ffff04 	addi	sp,fp,-4
 c0003c0:	dfc00217 	ldw	ra,8(sp)
 c0003c4:	df000117 	ldw	fp,4(sp)
 c0003c8:	dc000017 	ldw	r16,0(sp)
 c0003cc:	dec00304 	addi	sp,sp,12
 c0003d0:	f800283a 	ret

0c0003d4 <TetrisCleanup>:

void TetrisCleanup(TetrisGameState* givenState) {
 c0003d4:	defffc04 	addi	sp,sp,-16
 c0003d8:	df000315 	stw	fp,12(sp)
 c0003dc:	df000304 	addi	fp,sp,12
 c0003e0:	e13fff15 	stw	r4,-4(fp)
    for (int x = 0; x < givenState->boardWidth; x++) {
 c0003e4:	e03ffd15 	stw	zero,-12(fp)
 c0003e8:	00001a06 	br	c000454 <TetrisCleanup+0x80>
    	for (int y = 0; y < givenState->boardHeight; y++) {
 c0003ec:	e03ffe15 	stw	zero,-8(fp)
 c0003f0:	00001106 	br	c000438 <TetrisCleanup+0x64>
    		givenState->board[x][y] = givenState->boardColor;
 c0003f4:	e0bfff17 	ldw	r2,-4(fp)
 c0003f8:	10c00017 	ldw	r3,0(r2)
 c0003fc:	e0bffd17 	ldw	r2,-12(fp)
 c000400:	1085883a 	add	r2,r2,r2
 c000404:	1085883a 	add	r2,r2,r2
 c000408:	1885883a 	add	r2,r3,r2
 c00040c:	10c00017 	ldw	r3,0(r2)
 c000410:	e0bffe17 	ldw	r2,-8(fp)
 c000414:	1085883a 	add	r2,r2,r2
 c000418:	1085883a 	add	r2,r2,r2
 c00041c:	1885883a 	add	r2,r3,r2
 c000420:	e0ffff17 	ldw	r3,-4(fp)
 c000424:	18c01417 	ldw	r3,80(r3)
 c000428:	10c00015 	stw	r3,0(r2)
    givenState->pause = 0;
}

void TetrisCleanup(TetrisGameState* givenState) {
    for (int x = 0; x < givenState->boardWidth; x++) {
    	for (int y = 0; y < givenState->boardHeight; y++) {
 c00042c:	e0bffe17 	ldw	r2,-8(fp)
 c000430:	10800044 	addi	r2,r2,1
 c000434:	e0bffe15 	stw	r2,-8(fp)
 c000438:	e0bfff17 	ldw	r2,-4(fp)
 c00043c:	10800217 	ldw	r2,8(r2)
 c000440:	e0fffe17 	ldw	r3,-8(fp)
 c000444:	18bfeb16 	blt	r3,r2,c0003f4 <__alt_data_end+0xfc0003f4>

    givenState->pause = 0;
}

void TetrisCleanup(TetrisGameState* givenState) {
    for (int x = 0; x < givenState->boardWidth; x++) {
 c000448:	e0bffd17 	ldw	r2,-12(fp)
 c00044c:	10800044 	addi	r2,r2,1
 c000450:	e0bffd15 	stw	r2,-12(fp)
 c000454:	e0bfff17 	ldw	r2,-4(fp)
 c000458:	10800117 	ldw	r2,4(r2)
 c00045c:	e0fffd17 	ldw	r3,-12(fp)
 c000460:	18bfe216 	blt	r3,r2,c0003ec <__alt_data_end+0xfc0003ec>
    		givenState->board[x][y] = givenState->boardColor;
    	}
        //free(givenState->board[x]);
    }
    //free(givenState->board);
}
 c000464:	0001883a 	nop
 c000468:	e037883a 	mov	sp,fp
 c00046c:	df000017 	ldw	fp,0(sp)
 c000470:	dec00104 	addi	sp,sp,4
 c000474:	f800283a 	ret

0c000478 <TetrisCheckCollision>:


int TetrisCheckCollision(TetrisGameState* givenState) {
 c000478:	deffef04 	addi	sp,sp,-68
 c00047c:	dfc01015 	stw	ra,64(sp)
 c000480:	df000f15 	stw	fp,60(sp)
 c000484:	df000f04 	addi	fp,sp,60
 c000488:	e13fff15 	stw	r4,-4(fp)
    int x, y, X, Y;

    TetrisBlock activeBlock = givenState->activeBlock;
 c00048c:	e0bfff17 	ldw	r2,-4(fp)
 c000490:	10c00517 	ldw	r3,20(r2)
 c000494:	e0fff515 	stw	r3,-44(fp)
 c000498:	10c00617 	ldw	r3,24(r2)
 c00049c:	e0fff615 	stw	r3,-40(fp)
 c0004a0:	10c00717 	ldw	r3,28(r2)
 c0004a4:	e0fff715 	stw	r3,-36(fp)
 c0004a8:	10c00817 	ldw	r3,32(r2)
 c0004ac:	e0fff815 	stw	r3,-32(fp)
 c0004b0:	10c00917 	ldw	r3,36(r2)
 c0004b4:	e0fff915 	stw	r3,-28(fp)
 c0004b8:	10c00a17 	ldw	r3,40(r2)
 c0004bc:	e0fffa15 	stw	r3,-24(fp)
 c0004c0:	10c00b17 	ldw	r3,44(r2)
 c0004c4:	e0fffb15 	stw	r3,-20(fp)
 c0004c8:	10c00c17 	ldw	r3,48(r2)
 c0004cc:	e0fffc15 	stw	r3,-16(fp)
 c0004d0:	10c00d17 	ldw	r3,52(r2)
 c0004d4:	e0fffd15 	stw	r3,-12(fp)
 c0004d8:	10800e17 	ldw	r2,56(r2)
 c0004dc:	e0bffe15 	stw	r2,-8(fp)

    for (x = 0; x < activeBlock.width; x++) {
 c0004e0:	e03ff115 	stw	zero,-60(fp)
 c0004e4:	00004a06 	br	c000610 <TetrisCheckCollision+0x198>
        for (y = 0; y < activeBlock.height; y++) {
 c0004e8:	e03ff215 	stw	zero,-56(fp)
 c0004ec:	00004206 	br	c0005f8 <TetrisCheckCollision+0x180>
            X = givenState->activeBlockX + x;
 c0004f0:	e0bfff17 	ldw	r2,-4(fp)
 c0004f4:	10c00f17 	ldw	r3,60(r2)
 c0004f8:	e0bff117 	ldw	r2,-60(fp)
 c0004fc:	1885883a 	add	r2,r3,r2
 c000500:	e0bff315 	stw	r2,-52(fp)
            Y = givenState->activeBlockY + y;
 c000504:	e0bfff17 	ldw	r2,-4(fp)
 c000508:	10c01017 	ldw	r3,64(r2)
 c00050c:	e0bff217 	ldw	r2,-56(fp)
 c000510:	1885883a 	add	r2,r3,r2
 c000514:	e0bff415 	stw	r2,-48(fp)

            if (X < 0 || X >= givenState->boardWidth) return 1;
 c000518:	e0bff317 	ldw	r2,-52(fp)
 c00051c:	10000416 	blt	r2,zero,c000530 <TetrisCheckCollision+0xb8>
 c000520:	e0bfff17 	ldw	r2,-4(fp)
 c000524:	10800117 	ldw	r2,4(r2)
 c000528:	e0fff317 	ldw	r3,-52(fp)
 c00052c:	18800216 	blt	r3,r2,c000538 <TetrisCheckCollision+0xc0>
 c000530:	00800044 	movi	r2,1
 c000534:	00003a06 	br	c000620 <TetrisCheckCollision+0x1a8>

            if (activeBlock.data[y][x] != ' ') {
 c000538:	e0bff217 	ldw	r2,-56(fp)
 c00053c:	01400144 	movi	r5,5
 c000540:	1009883a 	mov	r4,r2
 c000544:	c004c7c0 	call	c004c7c <__mulsi3>
 c000548:	e13ff104 	addi	r4,fp,-60
 c00054c:	2087883a 	add	r3,r4,r2
 c000550:	e0bff117 	ldw	r2,-60(fp)
 c000554:	1885883a 	add	r2,r3,r2
 c000558:	10800604 	addi	r2,r2,24
 c00055c:	10800003 	ldbu	r2,0(r2)
 c000560:	10803fcc 	andi	r2,r2,255
 c000564:	1080201c 	xori	r2,r2,128
 c000568:	10bfe004 	addi	r2,r2,-128
 c00056c:	10800820 	cmpeqi	r2,r2,32
 c000570:	10001e1e 	bne	r2,zero,c0005ec <TetrisCheckCollision+0x174>
                if ((Y >= givenState->boardHeight) ||
 c000574:	e0bfff17 	ldw	r2,-4(fp)
 c000578:	10800217 	ldw	r2,8(r2)
 c00057c:	e0fff417 	ldw	r3,-48(fp)
 c000580:	1880180e 	bge	r3,r2,c0005e4 <TetrisCheckCollision+0x16c>
 c000584:	e0bff317 	ldw	r2,-52(fp)
 c000588:	10001816 	blt	r2,zero,c0005ec <TetrisCheckCollision+0x174>
                    (X >= 0 && X < givenState->boardWidth && Y >= 3 &&
 c00058c:	e0bfff17 	ldw	r2,-4(fp)
 c000590:	10800117 	ldw	r2,4(r2)
 c000594:	e0fff317 	ldw	r3,-52(fp)
 c000598:	1880140e 	bge	r3,r2,c0005ec <TetrisCheckCollision+0x174>
 c00059c:	e0bff417 	ldw	r2,-48(fp)
 c0005a0:	108000d0 	cmplti	r2,r2,3
 c0005a4:	1000111e 	bne	r2,zero,c0005ec <TetrisCheckCollision+0x174>
						givenState->board[X][Y] != givenState->boardColor)) {
 c0005a8:	e0bfff17 	ldw	r2,-4(fp)
 c0005ac:	10c00017 	ldw	r3,0(r2)
 c0005b0:	e0bff317 	ldw	r2,-52(fp)
 c0005b4:	1085883a 	add	r2,r2,r2
 c0005b8:	1085883a 	add	r2,r2,r2
 c0005bc:	1885883a 	add	r2,r3,r2
 c0005c0:	10c00017 	ldw	r3,0(r2)
 c0005c4:	e0bff417 	ldw	r2,-48(fp)
 c0005c8:	1085883a 	add	r2,r2,r2
 c0005cc:	1085883a 	add	r2,r2,r2
 c0005d0:	1885883a 	add	r2,r3,r2
 c0005d4:	10c00017 	ldw	r3,0(r2)
 c0005d8:	e0bfff17 	ldw	r2,-4(fp)
 c0005dc:	10801417 	ldw	r2,80(r2)

            if (X < 0 || X >= givenState->boardWidth) return 1;

            if (activeBlock.data[y][x] != ' ') {
                if ((Y >= givenState->boardHeight) ||
                    (X >= 0 && X < givenState->boardWidth && Y >= 3 &&
 c0005e0:	18800226 	beq	r3,r2,c0005ec <TetrisCheckCollision+0x174>
						givenState->board[X][Y] != givenState->boardColor)) {
                    return 1;
 c0005e4:	00800044 	movi	r2,1
 c0005e8:	00000d06 	br	c000620 <TetrisCheckCollision+0x1a8>
    int x, y, X, Y;

    TetrisBlock activeBlock = givenState->activeBlock;

    for (x = 0; x < activeBlock.width; x++) {
        for (y = 0; y < activeBlock.height; y++) {
 c0005ec:	e0bff217 	ldw	r2,-56(fp)
 c0005f0:	10800044 	addi	r2,r2,1
 c0005f4:	e0bff215 	stw	r2,-56(fp)
 c0005f8:	e0bff617 	ldw	r2,-40(fp)
 c0005fc:	e0fff217 	ldw	r3,-56(fp)
 c000600:	18bfbb16 	blt	r3,r2,c0004f0 <__alt_data_end+0xfc0004f0>
int TetrisCheckCollision(TetrisGameState* givenState) {
    int x, y, X, Y;

    TetrisBlock activeBlock = givenState->activeBlock;

    for (x = 0; x < activeBlock.width; x++) {
 c000604:	e0bff117 	ldw	r2,-60(fp)
 c000608:	10800044 	addi	r2,r2,1
 c00060c:	e0bff115 	stw	r2,-60(fp)
 c000610:	e0bff517 	ldw	r2,-44(fp)
 c000614:	e0fff117 	ldw	r3,-60(fp)
 c000618:	18bfb316 	blt	r3,r2,c0004e8 <__alt_data_end+0xfc0004e8>
                }
            }
        }
    }

    return 0;
 c00061c:	0005883a 	mov	r2,zero
}
 c000620:	e037883a 	mov	sp,fp
 c000624:	dfc00117 	ldw	ra,4(sp)
 c000628:	df000017 	ldw	fp,0(sp)
 c00062c:	dec00204 	addi	sp,sp,8
 c000630:	f800283a 	ret

0c000634 <TetrisCreateBlock>:

void TetrisCreateBlock(TetrisGameState* givenState) {
 c000634:	deffec04 	addi	sp,sp,-80
 c000638:	dfc01315 	stw	ra,76(sp)
 c00063c:	df001215 	stw	fp,72(sp)
 c000640:	dc401115 	stw	r17,68(sp)
 c000644:	dc001015 	stw	r16,64(sp)
 c000648:	df001204 	addi	fp,sp,72
 c00064c:	e13ffd15 	stw	r4,-12(fp)
    givenState->activeBlock = tetrisBlocks[nextBlock];
 c000650:	d0a7a617 	ldw	r2,-24936(gp)
 c000654:	e43ffd17 	ldw	r16,-12(fp)
 c000658:	044300b4 	movhi	r17,3074
 c00065c:	8c619004 	addi	r17,r17,-31168
 c000660:	01400a04 	movi	r5,40
 c000664:	1009883a 	mov	r4,r2
 c000668:	c004c7c0 	call	c004c7c <__mulsi3>
 c00066c:	8885883a 	add	r2,r17,r2
 c000670:	10c00017 	ldw	r3,0(r2)
 c000674:	80c00515 	stw	r3,20(r16)
 c000678:	10c00117 	ldw	r3,4(r2)
 c00067c:	80c00615 	stw	r3,24(r16)
 c000680:	10c00217 	ldw	r3,8(r2)
 c000684:	80c00715 	stw	r3,28(r16)
 c000688:	10c00317 	ldw	r3,12(r2)
 c00068c:	80c00815 	stw	r3,32(r16)
 c000690:	10c00417 	ldw	r3,16(r2)
 c000694:	80c00915 	stw	r3,36(r16)
 c000698:	10c00517 	ldw	r3,20(r2)
 c00069c:	80c00a15 	stw	r3,40(r16)
 c0006a0:	10c00617 	ldw	r3,24(r2)
 c0006a4:	80c00b15 	stw	r3,44(r16)
 c0006a8:	10c00717 	ldw	r3,28(r2)
 c0006ac:	80c00c15 	stw	r3,48(r16)
 c0006b0:	10c00817 	ldw	r3,32(r2)
 c0006b4:	80c00d15 	stw	r3,52(r16)
 c0006b8:	10800917 	ldw	r2,36(r2)
 c0006bc:	80800e15 	stw	r2,56(r16)

    givenState->activeBlockX =
        (givenState->boardWidth / 2) - (givenState->activeBlock.width / 2);
 c0006c0:	e0bffd17 	ldw	r2,-12(fp)
 c0006c4:	10800117 	ldw	r2,4(r2)
 c0006c8:	1006d7fa 	srli	r3,r2,31
 c0006cc:	1885883a 	add	r2,r3,r2
 c0006d0:	1005d07a 	srai	r2,r2,1
 c0006d4:	1009883a 	mov	r4,r2
 c0006d8:	e0bffd17 	ldw	r2,-12(fp)
 c0006dc:	10800517 	ldw	r2,20(r2)
 c0006e0:	1006d7fa 	srli	r3,r2,31
 c0006e4:	1885883a 	add	r2,r3,r2
 c0006e8:	1005d07a 	srai	r2,r2,1
 c0006ec:	2087c83a 	sub	r3,r4,r2
}

void TetrisCreateBlock(TetrisGameState* givenState) {
    givenState->activeBlock = tetrisBlocks[nextBlock];

    givenState->activeBlockX =
 c0006f0:	e0bffd17 	ldw	r2,-12(fp)
 c0006f4:	10c00f15 	stw	r3,60(r2)
        (givenState->boardWidth / 2) - (givenState->activeBlock.width / 2);

    givenState->activeBlockY = 4-givenState->activeBlock.height;
 c0006f8:	e0bffd17 	ldw	r2,-12(fp)
 c0006fc:	10800617 	ldw	r2,24(r2)
 c000700:	00c00104 	movi	r3,4
 c000704:	1887c83a 	sub	r3,r3,r2
 c000708:	e0bffd17 	ldw	r2,-12(fp)
 c00070c:	10c01015 	stw	r3,64(r2)

    givenState->activeBlock.color = nextColor; //current block's color
 c000710:	d0e7a417 	ldw	r3,-24944(gp)
 c000714:	e0bffd17 	ldw	r2,-12(fp)
 c000718:	10c00e15 	stw	r3,56(r2)
    nextBlock = rand() % tetrisBlockCount; //next block's color
 c00071c:	c0057780 	call	c005778 <rand>
 c000720:	1007883a 	mov	r3,r2
 c000724:	008001c4 	movi	r2,7
 c000728:	100b883a 	mov	r5,r2
 c00072c:	1809883a 	mov	r4,r3
 c000730:	c004b4c0 	call	c004b4c <__modsi3>
 c000734:	d0a7a615 	stw	r2,-24936(gp)
  	//nextBlock = 0;
    int color = (rand() % 15)+1;
 c000738:	c0057780 	call	c005778 <rand>
 c00073c:	014003c4 	movi	r5,15
 c000740:	1009883a 	mov	r4,r2
 c000744:	c004b4c0 	call	c004b4c <__modsi3>
 c000748:	10800044 	addi	r2,r2,1
 c00074c:	e0bfef15 	stw	r2,-68(fp)
    if (color == givenState->boardColor || color == nextColor) color = (rand() % 15)+1;
 c000750:	e0bffd17 	ldw	r2,-12(fp)
 c000754:	10c01417 	ldw	r3,80(r2)
 c000758:	e0bfef17 	ldw	r2,-68(fp)
 c00075c:	18800326 	beq	r3,r2,c00076c <TetrisCreateBlock+0x138>
 c000760:	d0a7a417 	ldw	r2,-24944(gp)
 c000764:	e0ffef17 	ldw	r3,-68(fp)
 c000768:	1880061e 	bne	r3,r2,c000784 <TetrisCreateBlock+0x150>
 c00076c:	c0057780 	call	c005778 <rand>
 c000770:	014003c4 	movi	r5,15
 c000774:	1009883a 	mov	r4,r2
 c000778:	c004b4c0 	call	c004b4c <__modsi3>
 c00077c:	10800044 	addi	r2,r2,1
 c000780:	e0bfef15 	stw	r2,-68(fp)
    nextColor = color; //next color
 c000784:	e0bfef17 	ldw	r2,-68(fp)
 c000788:	d0a7a415 	stw	r2,-24944(gp)
  	for (int i = 0; i < rand() % 3; i++) {
 c00078c:	e03ff015 	stw	zero,-64(fp)
 c000790:	00000506 	br	c0007a8 <TetrisCreateBlock+0x174>
  		TetrisRotateBlock(givenState); //roate block
 c000794:	e13ffd17 	ldw	r4,-12(fp)
 c000798:	c000b300 	call	c000b30 <TetrisRotateBlock>
    nextBlock = rand() % tetrisBlockCount; //next block's color
  	//nextBlock = 0;
    int color = (rand() % 15)+1;
    if (color == givenState->boardColor || color == nextColor) color = (rand() % 15)+1;
    nextColor = color; //next color
  	for (int i = 0; i < rand() % 3; i++) {
 c00079c:	e0bff017 	ldw	r2,-64(fp)
 c0007a0:	10800044 	addi	r2,r2,1
 c0007a4:	e0bff015 	stw	r2,-64(fp)
 c0007a8:	c0057780 	call	c005778 <rand>
 c0007ac:	014000c4 	movi	r5,3
 c0007b0:	1009883a 	mov	r4,r2
 c0007b4:	c004b4c0 	call	c004b4c <__modsi3>
 c0007b8:	1007883a 	mov	r3,r2
 c0007bc:	e0bff017 	ldw	r2,-64(fp)
 c0007c0:	10fff416 	blt	r2,r3,c000794 <__alt_data_end+0xfc000794>
  		TetrisRotateBlock(givenState); //roate block
  	}
  	TetrisBlock previewBlock = tetrisBlocks[nextBlock]; //preview next block
 c0007c4:	d0a7a617 	ldw	r2,-24936(gp)
 c0007c8:	040300b4 	movhi	r16,3074
 c0007cc:	84219004 	addi	r16,r16,-31168
 c0007d0:	01400a04 	movi	r5,40
 c0007d4:	1009883a 	mov	r4,r2
 c0007d8:	c004c7c0 	call	c004c7c <__mulsi3>
 c0007dc:	8085883a 	add	r2,r16,r2
 c0007e0:	10c00017 	ldw	r3,0(r2)
 c0007e4:	e0fff315 	stw	r3,-52(fp)
 c0007e8:	10c00117 	ldw	r3,4(r2)
 c0007ec:	e0fff415 	stw	r3,-48(fp)
 c0007f0:	10c00217 	ldw	r3,8(r2)
 c0007f4:	e0fff515 	stw	r3,-44(fp)
 c0007f8:	10c00317 	ldw	r3,12(r2)
 c0007fc:	e0fff615 	stw	r3,-40(fp)
 c000800:	10c00417 	ldw	r3,16(r2)
 c000804:	e0fff715 	stw	r3,-36(fp)
 c000808:	10c00517 	ldw	r3,20(r2)
 c00080c:	e0fff815 	stw	r3,-32(fp)
 c000810:	10c00617 	ldw	r3,24(r2)
 c000814:	e0fff915 	stw	r3,-28(fp)
 c000818:	10c00717 	ldw	r3,28(r2)
 c00081c:	e0fffa15 	stw	r3,-24(fp)
 c000820:	10c00817 	ldw	r3,32(r2)
 c000824:	e0fffb15 	stw	r3,-20(fp)
 c000828:	10800917 	ldw	r2,36(r2)
 c00082c:	e0bffc15 	stw	r2,-16(fp)
	for (int x = 0; x < 9; x++) {
 c000830:	e03ff115 	stw	zero,-60(fp)
 c000834:	00004206 	br	c000940 <TetrisCreateBlock+0x30c>
		for (int y = 0; y < 9; y++) {
 c000838:	e03ff215 	stw	zero,-56(fp)
 c00083c:	00003a06 	br	c000928 <TetrisCreateBlock+0x2f4>
			if ((x < previewBlock.width &&  y < previewBlock.height) && previewBlock.data[y/2][x/2] != ' ') 	VGADrawColorBox(x+givenState->gameX-10, y+givenState->gameY, color);
 c000840:	e0bff317 	ldw	r2,-52(fp)
 c000844:	e0fff117 	ldw	r3,-60(fp)
 c000848:	1880260e 	bge	r3,r2,c0008e4 <TetrisCreateBlock+0x2b0>
 c00084c:	e0bff417 	ldw	r2,-48(fp)
 c000850:	e0fff217 	ldw	r3,-56(fp)
 c000854:	1880230e 	bge	r3,r2,c0008e4 <TetrisCreateBlock+0x2b0>
 c000858:	e0bff217 	ldw	r2,-56(fp)
 c00085c:	1006d7fa 	srli	r3,r2,31
 c000860:	1885883a 	add	r2,r3,r2
 c000864:	1005d07a 	srai	r2,r2,1
 c000868:	1009883a 	mov	r4,r2
 c00086c:	e0bff117 	ldw	r2,-60(fp)
 c000870:	1006d7fa 	srli	r3,r2,31
 c000874:	1885883a 	add	r2,r3,r2
 c000878:	1005d07a 	srai	r2,r2,1
 c00087c:	1021883a 	mov	r16,r2
 c000880:	01400144 	movi	r5,5
 c000884:	c004c7c0 	call	c004c7c <__mulsi3>
 c000888:	e0ffef04 	addi	r3,fp,-68
 c00088c:	1885883a 	add	r2,r3,r2
 c000890:	1405883a 	add	r2,r2,r16
 c000894:	10800604 	addi	r2,r2,24
 c000898:	10800003 	ldbu	r2,0(r2)
 c00089c:	10803fcc 	andi	r2,r2,255
 c0008a0:	1080201c 	xori	r2,r2,128
 c0008a4:	10bfe004 	addi	r2,r2,-128
 c0008a8:	10800820 	cmpeqi	r2,r2,32
 c0008ac:	10000d1e 	bne	r2,zero,c0008e4 <TetrisCreateBlock+0x2b0>
 c0008b0:	e0bffd17 	ldw	r2,-12(fp)
 c0008b4:	10c01217 	ldw	r3,72(r2)
 c0008b8:	e0bff117 	ldw	r2,-60(fp)
 c0008bc:	1885883a 	add	r2,r3,r2
 c0008c0:	113ffd84 	addi	r4,r2,-10
 c0008c4:	e0bffd17 	ldw	r2,-12(fp)
 c0008c8:	10c01317 	ldw	r3,76(r2)
 c0008cc:	e0bff217 	ldw	r2,-56(fp)
 c0008d0:	1885883a 	add	r2,r3,r2
 c0008d4:	e1bfef17 	ldw	r6,-68(fp)
 c0008d8:	100b883a 	mov	r5,r2
 c0008dc:	c0029300 	call	c002930 <VGADrawColorBox>
 c0008e0:	00000e06 	br	c00091c <TetrisCreateBlock+0x2e8>
			else VGADrawColorBox(x+givenState->gameX-10, y+givenState->gameY, givenState->boardColor);
 c0008e4:	e0bffd17 	ldw	r2,-12(fp)
 c0008e8:	10c01217 	ldw	r3,72(r2)
 c0008ec:	e0bff117 	ldw	r2,-60(fp)
 c0008f0:	1885883a 	add	r2,r3,r2
 c0008f4:	113ffd84 	addi	r4,r2,-10
 c0008f8:	e0bffd17 	ldw	r2,-12(fp)
 c0008fc:	10c01317 	ldw	r3,76(r2)
 c000900:	e0bff217 	ldw	r2,-56(fp)
 c000904:	1887883a 	add	r3,r3,r2
 c000908:	e0bffd17 	ldw	r2,-12(fp)
 c00090c:	10801417 	ldw	r2,80(r2)
 c000910:	100d883a 	mov	r6,r2
 c000914:	180b883a 	mov	r5,r3
 c000918:	c0029300 	call	c002930 <VGADrawColorBox>
  	for (int i = 0; i < rand() % 3; i++) {
  		TetrisRotateBlock(givenState); //roate block
  	}
  	TetrisBlock previewBlock = tetrisBlocks[nextBlock]; //preview next block
	for (int x = 0; x < 9; x++) {
		for (int y = 0; y < 9; y++) {
 c00091c:	e0bff217 	ldw	r2,-56(fp)
 c000920:	10800044 	addi	r2,r2,1
 c000924:	e0bff215 	stw	r2,-56(fp)
 c000928:	e0bff217 	ldw	r2,-56(fp)
 c00092c:	10800250 	cmplti	r2,r2,9
 c000930:	103fc31e 	bne	r2,zero,c000840 <__alt_data_end+0xfc000840>
    nextColor = color; //next color
  	for (int i = 0; i < rand() % 3; i++) {
  		TetrisRotateBlock(givenState); //roate block
  	}
  	TetrisBlock previewBlock = tetrisBlocks[nextBlock]; //preview next block
	for (int x = 0; x < 9; x++) {
 c000934:	e0bff117 	ldw	r2,-60(fp)
 c000938:	10800044 	addi	r2,r2,1
 c00093c:	e0bff115 	stw	r2,-60(fp)
 c000940:	e0bff117 	ldw	r2,-60(fp)
 c000944:	10800250 	cmplti	r2,r2,9
 c000948:	103fbb1e 	bne	r2,zero,c000838 <__alt_data_end+0xfc000838>
			if ((x < previewBlock.width &&  y < previewBlock.height) && previewBlock.data[y/2][x/2] != ' ') 	VGADrawColorBox(x+givenState->gameX-10, y+givenState->gameY, color);
			else VGADrawColorBox(x+givenState->gameX-10, y+givenState->gameY, givenState->boardColor);
  		}
  	}

    if (TetrisCheckCollision(givenState)) {
 c00094c:	e13ffd17 	ldw	r4,-12(fp)
 c000950:	c0004780 	call	c000478 <TetrisCheckCollision>
 c000954:	10001c26 	beq	r2,zero,c0009c8 <TetrisCreateBlock+0x394>
        givenState->dead = 1;
 c000958:	e0bffd17 	ldw	r2,-12(fp)
 c00095c:	00c00044 	movi	r3,1
 c000960:	10c00315 	stw	r3,12(r2)
		printf("[%d,%d] end game",givenState->gameX,givenState->gameY);
 c000964:	e0bffd17 	ldw	r2,-12(fp)
 c000968:	10c01217 	ldw	r3,72(r2)
 c00096c:	e0bffd17 	ldw	r2,-12(fp)
 c000970:	10801317 	ldw	r2,76(r2)
 c000974:	100d883a 	mov	r6,r2
 c000978:	180b883a 	mov	r5,r3
 c00097c:	010300b4 	movhi	r4,3074
 c000980:	2121d604 	addi	r4,r4,-30888
 c000984:	c0056500 	call	c005650 <printf>
		VGAwriteText(givenState->gameX-(strlen("GAME OVER")),(givenState->gameY+4+(givenState->boardHeight)),2,0,"GAME OVER");
 c000988:	e0bffd17 	ldw	r2,-12(fp)
 c00098c:	10801217 	ldw	r2,72(r2)
 c000990:	113ffdc4 	addi	r4,r2,-9
 c000994:	e0bffd17 	ldw	r2,-12(fp)
 c000998:	10801317 	ldw	r2,76(r2)
 c00099c:	10c00104 	addi	r3,r2,4
 c0009a0:	e0bffd17 	ldw	r2,-12(fp)
 c0009a4:	10800217 	ldw	r2,8(r2)
 c0009a8:	1887883a 	add	r3,r3,r2
 c0009ac:	008300b4 	movhi	r2,3074
 c0009b0:	10a1db04 	addi	r2,r2,-30868
 c0009b4:	d8800015 	stw	r2,0(sp)
 c0009b8:	000f883a 	mov	r7,zero
 c0009bc:	01800084 	movi	r6,2
 c0009c0:	180b883a 	mov	r5,r3
 c0009c4:	c00299c0 	call	c00299c <VGAwriteText>
    }
}
 c0009c8:	0001883a 	nop
 c0009cc:	e6fffe04 	addi	sp,fp,-8
 c0009d0:	dfc00317 	ldw	ra,12(sp)
 c0009d4:	df000217 	ldw	fp,8(sp)
 c0009d8:	dc400117 	ldw	r17,4(sp)
 c0009dc:	dc000017 	ldw	r16,0(sp)
 c0009e0:	dec00404 	addi	sp,sp,16
 c0009e4:	f800283a 	ret

0c0009e8 <TetrisPrintBlock>:

void TetrisPrintBlock(TetrisGameState* givenState) {
 c0009e8:	defff104 	addi	sp,sp,-60
 c0009ec:	dfc00e15 	stw	ra,56(sp)
 c0009f0:	df000d15 	stw	fp,52(sp)
 c0009f4:	df000d04 	addi	fp,sp,52
 c0009f8:	e13fff15 	stw	r4,-4(fp)
    TetrisBlock activeBlock = givenState->activeBlock;
 c0009fc:	e0bfff17 	ldw	r2,-4(fp)
 c000a00:	10c00517 	ldw	r3,20(r2)
 c000a04:	e0fff515 	stw	r3,-44(fp)
 c000a08:	10c00617 	ldw	r3,24(r2)
 c000a0c:	e0fff615 	stw	r3,-40(fp)
 c000a10:	10c00717 	ldw	r3,28(r2)
 c000a14:	e0fff715 	stw	r3,-36(fp)
 c000a18:	10c00817 	ldw	r3,32(r2)
 c000a1c:	e0fff815 	stw	r3,-32(fp)
 c000a20:	10c00917 	ldw	r3,36(r2)
 c000a24:	e0fff915 	stw	r3,-28(fp)
 c000a28:	10c00a17 	ldw	r3,40(r2)
 c000a2c:	e0fffa15 	stw	r3,-24(fp)
 c000a30:	10c00b17 	ldw	r3,44(r2)
 c000a34:	e0fffb15 	stw	r3,-20(fp)
 c000a38:	10c00c17 	ldw	r3,48(r2)
 c000a3c:	e0fffc15 	stw	r3,-16(fp)
 c000a40:	10c00d17 	ldw	r3,52(r2)
 c000a44:	e0fffd15 	stw	r3,-12(fp)
 c000a48:	10800e17 	ldw	r2,56(r2)
 c000a4c:	e0bffe15 	stw	r2,-8(fp)

    int x, y;

    for (x = 0; x < activeBlock.width; x++) {
 c000a50:	e03ff315 	stw	zero,-52(fp)
 c000a54:	00002d06 	br	c000b0c <TetrisPrintBlock+0x124>
        for (y = 0; y < activeBlock.height; y++) {
 c000a58:	e03ff415 	stw	zero,-48(fp)
 c000a5c:	00002506 	br	c000af4 <TetrisPrintBlock+0x10c>
            if (activeBlock.data[y][x] != ' ') {
 c000a60:	e0bff417 	ldw	r2,-48(fp)
 c000a64:	01400144 	movi	r5,5
 c000a68:	1009883a 	mov	r4,r2
 c000a6c:	c004c7c0 	call	c004c7c <__mulsi3>
 c000a70:	e13ff304 	addi	r4,fp,-52
 c000a74:	2087883a 	add	r3,r4,r2
 c000a78:	e0bff317 	ldw	r2,-52(fp)
 c000a7c:	1885883a 	add	r2,r3,r2
 c000a80:	10800404 	addi	r2,r2,16
 c000a84:	10800003 	ldbu	r2,0(r2)
 c000a88:	10803fcc 	andi	r2,r2,255
 c000a8c:	1080201c 	xori	r2,r2,128
 c000a90:	10bfe004 	addi	r2,r2,-128
 c000a94:	10800820 	cmpeqi	r2,r2,32
 c000a98:	1000131e 	bne	r2,zero,c000ae8 <TetrisPrintBlock+0x100>
				givenState->board[givenState->activeBlockX + x][givenState->activeBlockY + y] = activeBlock.color;
 c000a9c:	e0bfff17 	ldw	r2,-4(fp)
 c000aa0:	10c00017 	ldw	r3,0(r2)
 c000aa4:	e0bfff17 	ldw	r2,-4(fp)
 c000aa8:	11000f17 	ldw	r4,60(r2)
 c000aac:	e0bff317 	ldw	r2,-52(fp)
 c000ab0:	2085883a 	add	r2,r4,r2
 c000ab4:	1085883a 	add	r2,r2,r2
 c000ab8:	1085883a 	add	r2,r2,r2
 c000abc:	1885883a 	add	r2,r3,r2
 c000ac0:	10c00017 	ldw	r3,0(r2)
 c000ac4:	e0bfff17 	ldw	r2,-4(fp)
 c000ac8:	11001017 	ldw	r4,64(r2)
 c000acc:	e0bff417 	ldw	r2,-48(fp)
 c000ad0:	2085883a 	add	r2,r4,r2
 c000ad4:	1085883a 	add	r2,r2,r2
 c000ad8:	1085883a 	add	r2,r2,r2
 c000adc:	1885883a 	add	r2,r3,r2
 c000ae0:	e0fffe17 	ldw	r3,-8(fp)
 c000ae4:	10c00015 	stw	r3,0(r2)
    TetrisBlock activeBlock = givenState->activeBlock;

    int x, y;

    for (x = 0; x < activeBlock.width; x++) {
        for (y = 0; y < activeBlock.height; y++) {
 c000ae8:	e0bff417 	ldw	r2,-48(fp)
 c000aec:	10800044 	addi	r2,r2,1
 c000af0:	e0bff415 	stw	r2,-48(fp)
 c000af4:	e0bff617 	ldw	r2,-40(fp)
 c000af8:	e0fff417 	ldw	r3,-48(fp)
 c000afc:	18bfd816 	blt	r3,r2,c000a60 <__alt_data_end+0xfc000a60>
void TetrisPrintBlock(TetrisGameState* givenState) {
    TetrisBlock activeBlock = givenState->activeBlock;

    int x, y;

    for (x = 0; x < activeBlock.width; x++) {
 c000b00:	e0bff317 	ldw	r2,-52(fp)
 c000b04:	10800044 	addi	r2,r2,1
 c000b08:	e0bff315 	stw	r2,-52(fp)
 c000b0c:	e0bff517 	ldw	r2,-44(fp)
 c000b10:	e0fff317 	ldw	r3,-52(fp)
 c000b14:	18bfd016 	blt	r3,r2,c000a58 <__alt_data_end+0xfc000a58>
            if (activeBlock.data[y][x] != ' ') {
				givenState->board[givenState->activeBlockX + x][givenState->activeBlockY + y] = activeBlock.color;
            }
        }
    }
}
 c000b18:	0001883a 	nop
 c000b1c:	e037883a 	mov	sp,fp
 c000b20:	dfc00117 	ldw	ra,4(sp)
 c000b24:	df000017 	ldw	fp,0(sp)
 c000b28:	dec00204 	addi	sp,sp,8
 c000b2c:	f800283a 	ret

0c000b30 <TetrisRotateBlock>:

void TetrisRotateBlock(TetrisGameState* givenState) {
 c000b30:	deffe604 	addi	sp,sp,-104
 c000b34:	dfc01915 	stw	ra,100(sp)
 c000b38:	df001815 	stw	fp,96(sp)
 c000b3c:	dc001715 	stw	r16,92(sp)
 c000b40:	df001804 	addi	fp,sp,96
 c000b44:	e13ffe15 	stw	r4,-8(fp)
    TetrisBlock b = givenState->activeBlock;
 c000b48:	e0bffe17 	ldw	r2,-8(fp)
 c000b4c:	10c00517 	ldw	r3,20(r2)
 c000b50:	e0ffea15 	stw	r3,-88(fp)
 c000b54:	10c00617 	ldw	r3,24(r2)
 c000b58:	e0ffeb15 	stw	r3,-84(fp)
 c000b5c:	10c00717 	ldw	r3,28(r2)
 c000b60:	e0ffec15 	stw	r3,-80(fp)
 c000b64:	10c00817 	ldw	r3,32(r2)
 c000b68:	e0ffed15 	stw	r3,-76(fp)
 c000b6c:	10c00917 	ldw	r3,36(r2)
 c000b70:	e0ffee15 	stw	r3,-72(fp)
 c000b74:	10c00a17 	ldw	r3,40(r2)
 c000b78:	e0ffef15 	stw	r3,-68(fp)
 c000b7c:	10c00b17 	ldw	r3,44(r2)
 c000b80:	e0fff015 	stw	r3,-64(fp)
 c000b84:	10c00c17 	ldw	r3,48(r2)
 c000b88:	e0fff115 	stw	r3,-60(fp)
 c000b8c:	10c00d17 	ldw	r3,52(r2)
 c000b90:	e0fff215 	stw	r3,-56(fp)
 c000b94:	10800e17 	ldw	r2,56(r2)
 c000b98:	e0bff315 	stw	r2,-52(fp)
    TetrisBlock s = b;
 c000b9c:	e0bfea17 	ldw	r2,-88(fp)
 c000ba0:	e0bff415 	stw	r2,-48(fp)
 c000ba4:	e0bfeb17 	ldw	r2,-84(fp)
 c000ba8:	e0bff515 	stw	r2,-44(fp)
 c000bac:	e0bfec17 	ldw	r2,-80(fp)
 c000bb0:	e0bff615 	stw	r2,-40(fp)
 c000bb4:	e0bfed17 	ldw	r2,-76(fp)
 c000bb8:	e0bff715 	stw	r2,-36(fp)
 c000bbc:	e0bfee17 	ldw	r2,-72(fp)
 c000bc0:	e0bff815 	stw	r2,-32(fp)
 c000bc4:	e0bfef17 	ldw	r2,-68(fp)
 c000bc8:	e0bff915 	stw	r2,-28(fp)
 c000bcc:	e0bff017 	ldw	r2,-64(fp)
 c000bd0:	e0bffa15 	stw	r2,-24(fp)
 c000bd4:	e0bff117 	ldw	r2,-60(fp)
 c000bd8:	e0bffb15 	stw	r2,-20(fp)
 c000bdc:	e0bff217 	ldw	r2,-56(fp)
 c000be0:	e0bffc15 	stw	r2,-16(fp)
 c000be4:	e0bff317 	ldw	r2,-52(fp)
 c000be8:	e0bffd15 	stw	r2,-12(fp)

    int x, y;

    b.width = s.height;
 c000bec:	e0bff517 	ldw	r2,-44(fp)
 c000bf0:	e0bfea15 	stw	r2,-88(fp)
    b.height = s.width;
 c000bf4:	e0bff417 	ldw	r2,-48(fp)
 c000bf8:	e0bfeb15 	stw	r2,-84(fp)

    for (x = 0; x < s.width; x++) {
 c000bfc:	e03fe815 	stw	zero,-96(fp)
 c000c00:	00002206 	br	c000c8c <TetrisRotateBlock+0x15c>
        for (y = 0; y < s.height; y++) {
 c000c04:	e03fe915 	stw	zero,-92(fp)
 c000c08:	00001a06 	br	c000c74 <TetrisRotateBlock+0x144>
            b.data[x][y] = s.data[s.height - y - 1][x];
 c000c0c:	e0fff517 	ldw	r3,-44(fp)
 c000c10:	e0bfe917 	ldw	r2,-92(fp)
 c000c14:	1885c83a 	sub	r2,r3,r2
 c000c18:	10bfffc4 	addi	r2,r2,-1
 c000c1c:	01400144 	movi	r5,5
 c000c20:	1009883a 	mov	r4,r2
 c000c24:	c004c7c0 	call	c004c7c <__mulsi3>
 c000c28:	e13fe804 	addi	r4,fp,-96
 c000c2c:	2087883a 	add	r3,r4,r2
 c000c30:	e0bfe817 	ldw	r2,-96(fp)
 c000c34:	1885883a 	add	r2,r3,r2
 c000c38:	10800e04 	addi	r2,r2,56
 c000c3c:	14000003 	ldbu	r16,0(r2)
 c000c40:	e0bfe817 	ldw	r2,-96(fp)
 c000c44:	01400144 	movi	r5,5
 c000c48:	1009883a 	mov	r4,r2
 c000c4c:	c004c7c0 	call	c004c7c <__mulsi3>
 c000c50:	e13fe804 	addi	r4,fp,-96
 c000c54:	2087883a 	add	r3,r4,r2
 c000c58:	e0bfe917 	ldw	r2,-92(fp)
 c000c5c:	1885883a 	add	r2,r3,r2
 c000c60:	10800404 	addi	r2,r2,16
 c000c64:	14000005 	stb	r16,0(r2)

    b.width = s.height;
    b.height = s.width;

    for (x = 0; x < s.width; x++) {
        for (y = 0; y < s.height; y++) {
 c000c68:	e0bfe917 	ldw	r2,-92(fp)
 c000c6c:	10800044 	addi	r2,r2,1
 c000c70:	e0bfe915 	stw	r2,-92(fp)
 c000c74:	e0bff517 	ldw	r2,-44(fp)
 c000c78:	e0ffe917 	ldw	r3,-92(fp)
 c000c7c:	18bfe316 	blt	r3,r2,c000c0c <__alt_data_end+0xfc000c0c>
    int x, y;

    b.width = s.height;
    b.height = s.width;

    for (x = 0; x < s.width; x++) {
 c000c80:	e0bfe817 	ldw	r2,-96(fp)
 c000c84:	10800044 	addi	r2,r2,1
 c000c88:	e0bfe815 	stw	r2,-96(fp)
 c000c8c:	e0bff417 	ldw	r2,-48(fp)
 c000c90:	e0ffe817 	ldw	r3,-96(fp)
 c000c94:	18bfdb16 	blt	r3,r2,c000c04 <__alt_data_end+0xfc000c04>
        for (y = 0; y < s.height; y++) {
            b.data[x][y] = s.data[s.height - y - 1][x];
        }
    }

    x = givenState->activeBlockX;
 c000c98:	e0bffe17 	ldw	r2,-8(fp)
 c000c9c:	10800f17 	ldw	r2,60(r2)
 c000ca0:	e0bfe815 	stw	r2,-96(fp)
    y = givenState->activeBlockY;
 c000ca4:	e0bffe17 	ldw	r2,-8(fp)
 c000ca8:	10801017 	ldw	r2,64(r2)
 c000cac:	e0bfe915 	stw	r2,-92(fp)

    givenState->activeBlockX -= (b.width - s.width) / 2;
 c000cb0:	e0bffe17 	ldw	r2,-8(fp)
 c000cb4:	10c00f17 	ldw	r3,60(r2)
 c000cb8:	e13fea17 	ldw	r4,-88(fp)
 c000cbc:	e0bff417 	ldw	r2,-48(fp)
 c000cc0:	2085c83a 	sub	r2,r4,r2
 c000cc4:	1008d7fa 	srli	r4,r2,31
 c000cc8:	2085883a 	add	r2,r4,r2
 c000ccc:	1005d07a 	srai	r2,r2,1
 c000cd0:	1887c83a 	sub	r3,r3,r2
 c000cd4:	e0bffe17 	ldw	r2,-8(fp)
 c000cd8:	10c00f15 	stw	r3,60(r2)
    givenState->activeBlockY -= (b.height - s.height) / 2;
 c000cdc:	e0bffe17 	ldw	r2,-8(fp)
 c000ce0:	10c01017 	ldw	r3,64(r2)
 c000ce4:	e13feb17 	ldw	r4,-84(fp)
 c000ce8:	e0bff517 	ldw	r2,-44(fp)
 c000cec:	2085c83a 	sub	r2,r4,r2
 c000cf0:	1008d7fa 	srli	r4,r2,31
 c000cf4:	2085883a 	add	r2,r4,r2
 c000cf8:	1005d07a 	srai	r2,r2,1
 c000cfc:	1887c83a 	sub	r3,r3,r2
 c000d00:	e0bffe17 	ldw	r2,-8(fp)
 c000d04:	10c01015 	stw	r3,64(r2)
    givenState->activeBlock = b;
 c000d08:	e0bffe17 	ldw	r2,-8(fp)
 c000d0c:	e0ffea17 	ldw	r3,-88(fp)
 c000d10:	10c00515 	stw	r3,20(r2)
 c000d14:	e0ffeb17 	ldw	r3,-84(fp)
 c000d18:	10c00615 	stw	r3,24(r2)
 c000d1c:	e0ffec17 	ldw	r3,-80(fp)
 c000d20:	10c00715 	stw	r3,28(r2)
 c000d24:	e0ffed17 	ldw	r3,-76(fp)
 c000d28:	10c00815 	stw	r3,32(r2)
 c000d2c:	e0ffee17 	ldw	r3,-72(fp)
 c000d30:	10c00915 	stw	r3,36(r2)
 c000d34:	e0ffef17 	ldw	r3,-68(fp)
 c000d38:	10c00a15 	stw	r3,40(r2)
 c000d3c:	e0fff017 	ldw	r3,-64(fp)
 c000d40:	10c00b15 	stw	r3,44(r2)
 c000d44:	e0fff117 	ldw	r3,-60(fp)
 c000d48:	10c00c15 	stw	r3,48(r2)
 c000d4c:	e0fff217 	ldw	r3,-56(fp)
 c000d50:	10c00d15 	stw	r3,52(r2)
 c000d54:	e0fff317 	ldw	r3,-52(fp)
 c000d58:	10c00e15 	stw	r3,56(r2)

    if (TetrisCheckCollision(givenState)) {
 c000d5c:	e13ffe17 	ldw	r4,-8(fp)
 c000d60:	c0004780 	call	c000478 <TetrisCheckCollision>
 c000d64:	10001b26 	beq	r2,zero,c000dd4 <TetrisRotateBlock+0x2a4>
        givenState->activeBlock = s;
 c000d68:	e0bffe17 	ldw	r2,-8(fp)
 c000d6c:	e0fff417 	ldw	r3,-48(fp)
 c000d70:	10c00515 	stw	r3,20(r2)
 c000d74:	e0fff517 	ldw	r3,-44(fp)
 c000d78:	10c00615 	stw	r3,24(r2)
 c000d7c:	e0fff617 	ldw	r3,-40(fp)
 c000d80:	10c00715 	stw	r3,28(r2)
 c000d84:	e0fff717 	ldw	r3,-36(fp)
 c000d88:	10c00815 	stw	r3,32(r2)
 c000d8c:	e0fff817 	ldw	r3,-32(fp)
 c000d90:	10c00915 	stw	r3,36(r2)
 c000d94:	e0fff917 	ldw	r3,-28(fp)
 c000d98:	10c00a15 	stw	r3,40(r2)
 c000d9c:	e0fffa17 	ldw	r3,-24(fp)
 c000da0:	10c00b15 	stw	r3,44(r2)
 c000da4:	e0fffb17 	ldw	r3,-20(fp)
 c000da8:	10c00c15 	stw	r3,48(r2)
 c000dac:	e0fffc17 	ldw	r3,-16(fp)
 c000db0:	10c00d15 	stw	r3,52(r2)
 c000db4:	e0fffd17 	ldw	r3,-12(fp)
 c000db8:	10c00e15 	stw	r3,56(r2)
        givenState->activeBlockX = x;
 c000dbc:	e0bffe17 	ldw	r2,-8(fp)
 c000dc0:	e0ffe817 	ldw	r3,-96(fp)
 c000dc4:	10c00f15 	stw	r3,60(r2)
        givenState->activeBlockY = y;
 c000dc8:	e0bffe17 	ldw	r2,-8(fp)
 c000dcc:	e0ffe917 	ldw	r3,-92(fp)
 c000dd0:	10c01015 	stw	r3,64(r2)
    }
}
 c000dd4:	0001883a 	nop
 c000dd8:	e6ffff04 	addi	sp,fp,-4
 c000ddc:	dfc00217 	ldw	ra,8(sp)
 c000de0:	df000117 	ldw	fp,4(sp)
 c000de4:	dc000017 	ldw	r16,0(sp)
 c000de8:	dec00304 	addi	sp,sp,12
 c000dec:	f800283a 	ret

0c000df0 <TetrisFallBlocks>:

void TetrisFallBlocks(TetrisGameState* givenState) {
 c000df0:	defffd04 	addi	sp,sp,-12
 c000df4:	dfc00215 	stw	ra,8(sp)
 c000df8:	df000115 	stw	fp,4(sp)
 c000dfc:	df000104 	addi	fp,sp,4
 c000e00:	e13fff15 	stw	r4,-4(fp)
	++givenState->activeBlockY;
 c000e04:	e0bfff17 	ldw	r2,-4(fp)
 c000e08:	10801017 	ldw	r2,64(r2)
 c000e0c:	10c00044 	addi	r3,r2,1
 c000e10:	e0bfff17 	ldw	r2,-4(fp)
 c000e14:	10c01015 	stw	r3,64(r2)

	if (TetrisCheckCollision(givenState)) {
 c000e18:	e13fff17 	ldw	r4,-4(fp)
 c000e1c:	c0004780 	call	c000478 <TetrisCheckCollision>
 c000e20:	10000926 	beq	r2,zero,c000e48 <TetrisFallBlocks+0x58>
		--givenState->activeBlockY;
 c000e24:	e0bfff17 	ldw	r2,-4(fp)
 c000e28:	10801017 	ldw	r2,64(r2)
 c000e2c:	10ffffc4 	addi	r3,r2,-1
 c000e30:	e0bfff17 	ldw	r2,-4(fp)
 c000e34:	10c01015 	stw	r3,64(r2)
		TetrisPrintBlock(givenState);
 c000e38:	e13fff17 	ldw	r4,-4(fp)
 c000e3c:	c0009e80 	call	c0009e8 <TetrisPrintBlock>
		TetrisCreateBlock(givenState);
 c000e40:	e13fff17 	ldw	r4,-4(fp)
 c000e44:	c0006340 	call	c000634 <TetrisCreateBlock>
	}
}
 c000e48:	0001883a 	nop
 c000e4c:	e037883a 	mov	sp,fp
 c000e50:	dfc00117 	ldw	ra,4(sp)
 c000e54:	df000017 	ldw	fp,0(sp)
 c000e58:	dec00204 	addi	sp,sp,8
 c000e5c:	f800283a 	ret

0c000e60 <TetrisClearLine>:

void TetrisClearLine(TetrisGameState* givenState, int l) {
 c000e60:	defffb04 	addi	sp,sp,-20
 c000e64:	df000415 	stw	fp,16(sp)
 c000e68:	df000404 	addi	fp,sp,16
 c000e6c:	e13ffe15 	stw	r4,-8(fp)
 c000e70:	e17fff15 	stw	r5,-4(fp)
    int x, y;

    for (y = l; y > 4; y--) {
 c000e74:	e0bfff17 	ldw	r2,-4(fp)
 c000e78:	e0bffd15 	stw	r2,-12(fp)
 c000e7c:	00002706 	br	c000f1c <TetrisClearLine+0xbc>
        for (x = 0; x < givenState->boardWidth; x++) {
 c000e80:	e03ffc15 	stw	zero,-16(fp)
 c000e84:	00001e06 	br	c000f00 <TetrisClearLine+0xa0>
            givenState->board[x][y] = givenState->board[x][y - 1];
 c000e88:	e0bffe17 	ldw	r2,-8(fp)
 c000e8c:	10c00017 	ldw	r3,0(r2)
 c000e90:	e0bffc17 	ldw	r2,-16(fp)
 c000e94:	1085883a 	add	r2,r2,r2
 c000e98:	1085883a 	add	r2,r2,r2
 c000e9c:	1885883a 	add	r2,r3,r2
 c000ea0:	10c00017 	ldw	r3,0(r2)
 c000ea4:	e0bffd17 	ldw	r2,-12(fp)
 c000ea8:	1085883a 	add	r2,r2,r2
 c000eac:	1085883a 	add	r2,r2,r2
 c000eb0:	1887883a 	add	r3,r3,r2
 c000eb4:	e0bffe17 	ldw	r2,-8(fp)
 c000eb8:	11000017 	ldw	r4,0(r2)
 c000ebc:	e0bffc17 	ldw	r2,-16(fp)
 c000ec0:	1085883a 	add	r2,r2,r2
 c000ec4:	1085883a 	add	r2,r2,r2
 c000ec8:	2085883a 	add	r2,r4,r2
 c000ecc:	11000017 	ldw	r4,0(r2)
 c000ed0:	e17ffd17 	ldw	r5,-12(fp)
 c000ed4:	00900034 	movhi	r2,16384
 c000ed8:	10bfffc4 	addi	r2,r2,-1
 c000edc:	2885883a 	add	r2,r5,r2
 c000ee0:	1085883a 	add	r2,r2,r2
 c000ee4:	1085883a 	add	r2,r2,r2
 c000ee8:	2085883a 	add	r2,r4,r2
 c000eec:	10800017 	ldw	r2,0(r2)
 c000ef0:	18800015 	stw	r2,0(r3)

void TetrisClearLine(TetrisGameState* givenState, int l) {
    int x, y;

    for (y = l; y > 4; y--) {
        for (x = 0; x < givenState->boardWidth; x++) {
 c000ef4:	e0bffc17 	ldw	r2,-16(fp)
 c000ef8:	10800044 	addi	r2,r2,1
 c000efc:	e0bffc15 	stw	r2,-16(fp)
 c000f00:	e0bffe17 	ldw	r2,-8(fp)
 c000f04:	10800117 	ldw	r2,4(r2)
 c000f08:	e0fffc17 	ldw	r3,-16(fp)
 c000f0c:	18bfde16 	blt	r3,r2,c000e88 <__alt_data_end+0xfc000e88>
}

void TetrisClearLine(TetrisGameState* givenState, int l) {
    int x, y;

    for (y = l; y > 4; y--) {
 c000f10:	e0bffd17 	ldw	r2,-12(fp)
 c000f14:	10bfffc4 	addi	r2,r2,-1
 c000f18:	e0bffd15 	stw	r2,-12(fp)
 c000f1c:	e0bffd17 	ldw	r2,-12(fp)
 c000f20:	10800148 	cmpgei	r2,r2,5
 c000f24:	103fd61e 	bne	r2,zero,c000e80 <__alt_data_end+0xfc000e80>
        for (x = 0; x < givenState->boardWidth; x++) {
            givenState->board[x][y] = givenState->board[x][y - 1];
        }
    }

    for (x = 0; x < givenState->boardWidth; x++) {
 c000f28:	e03ffc15 	stw	zero,-16(fp)
 c000f2c:	00000d06 	br	c000f64 <TetrisClearLine+0x104>
        givenState->board[x][0] = givenState->boardColor;
 c000f30:	e0bffe17 	ldw	r2,-8(fp)
 c000f34:	10c00017 	ldw	r3,0(r2)
 c000f38:	e0bffc17 	ldw	r2,-16(fp)
 c000f3c:	1085883a 	add	r2,r2,r2
 c000f40:	1085883a 	add	r2,r2,r2
 c000f44:	1885883a 	add	r2,r3,r2
 c000f48:	10800017 	ldw	r2,0(r2)
 c000f4c:	e0fffe17 	ldw	r3,-8(fp)
 c000f50:	18c01417 	ldw	r3,80(r3)
 c000f54:	10c00015 	stw	r3,0(r2)
        for (x = 0; x < givenState->boardWidth; x++) {
            givenState->board[x][y] = givenState->board[x][y - 1];
        }
    }

    for (x = 0; x < givenState->boardWidth; x++) {
 c000f58:	e0bffc17 	ldw	r2,-16(fp)
 c000f5c:	10800044 	addi	r2,r2,1
 c000f60:	e0bffc15 	stw	r2,-16(fp)
 c000f64:	e0bffe17 	ldw	r2,-8(fp)
 c000f68:	10800117 	ldw	r2,4(r2)
 c000f6c:	e0fffc17 	ldw	r3,-16(fp)
 c000f70:	18bfef16 	blt	r3,r2,c000f30 <__alt_data_end+0xfc000f30>
        givenState->board[x][0] = givenState->boardColor;
    }
}
 c000f74:	0001883a 	nop
 c000f78:	e037883a 	mov	sp,fp
 c000f7c:	df000017 	ldw	fp,0(sp)
 c000f80:	dec00104 	addi	sp,sp,4
 c000f84:	f800283a 	ret

0c000f88 <TetrisCheckLineComplete>:

void TetrisCheckLineComplete(TetrisGameState* givenState) {
 c000f88:	defff704 	addi	sp,sp,-36
 c000f8c:	dfc00815 	stw	ra,32(sp)
 c000f90:	df000715 	stw	fp,28(sp)
 c000f94:	df000704 	addi	fp,sp,28
 c000f98:	e13fff15 	stw	r4,-4(fp)
    int x, y, l;

    for (y = givenState->boardHeight - 1; y >= 0; y--) {
 c000f9c:	e0bfff17 	ldw	r2,-4(fp)
 c000fa0:	10800217 	ldw	r2,8(r2)
 c000fa4:	10bfffc4 	addi	r2,r2,-1
 c000fa8:	e0bffb15 	stw	r2,-20(fp)
 c000fac:	00005006 	br	c0010f0 <TetrisCheckLineComplete+0x168>
        l = 1;
 c000fb0:	00800044 	movi	r2,1
 c000fb4:	e0bffc15 	stw	r2,-16(fp)

        for (x = 0; x < givenState->boardWidth && l; x++) {
 c000fb8:	e03ffa15 	stw	zero,-24(fp)
 c000fbc:	00001306 	br	c00100c <TetrisCheckLineComplete+0x84>
            if (givenState->board[x][y] == givenState->boardColor) {
 c000fc0:	e0bfff17 	ldw	r2,-4(fp)
 c000fc4:	10c00017 	ldw	r3,0(r2)
 c000fc8:	e0bffa17 	ldw	r2,-24(fp)
 c000fcc:	1085883a 	add	r2,r2,r2
 c000fd0:	1085883a 	add	r2,r2,r2
 c000fd4:	1885883a 	add	r2,r3,r2
 c000fd8:	10c00017 	ldw	r3,0(r2)
 c000fdc:	e0bffb17 	ldw	r2,-20(fp)
 c000fe0:	1085883a 	add	r2,r2,r2
 c000fe4:	1085883a 	add	r2,r2,r2
 c000fe8:	1885883a 	add	r2,r3,r2
 c000fec:	10c00017 	ldw	r3,0(r2)
 c000ff0:	e0bfff17 	ldw	r2,-4(fp)
 c000ff4:	10801417 	ldw	r2,80(r2)
 c000ff8:	1880011e 	bne	r3,r2,c001000 <TetrisCheckLineComplete+0x78>
                l = 0;
 c000ffc:	e03ffc15 	stw	zero,-16(fp)
    int x, y, l;

    for (y = givenState->boardHeight - 1; y >= 0; y--) {
        l = 1;

        for (x = 0; x < givenState->boardWidth && l; x++) {
 c001000:	e0bffa17 	ldw	r2,-24(fp)
 c001004:	10800044 	addi	r2,r2,1
 c001008:	e0bffa15 	stw	r2,-24(fp)
 c00100c:	e0bfff17 	ldw	r2,-4(fp)
 c001010:	10800117 	ldw	r2,4(r2)
 c001014:	e0fffa17 	ldw	r3,-24(fp)
 c001018:	1880020e 	bge	r3,r2,c001024 <TetrisCheckLineComplete+0x9c>
 c00101c:	e0bffc17 	ldw	r2,-16(fp)
 c001020:	103fe71e 	bne	r2,zero,c000fc0 <__alt_data_end+0xfc000fc0>
            if (givenState->board[x][y] == givenState->boardColor) {
                l = 0;
            }
        }

        if (l) {
 c001024:	e0bffc17 	ldw	r2,-16(fp)
 c001028:	10002e26 	beq	r2,zero,c0010e4 <TetrisCheckLineComplete+0x15c>
            ++(givenState->completedLines);
 c00102c:	e0bfff17 	ldw	r2,-4(fp)
 c001030:	10800417 	ldw	r2,16(r2)
 c001034:	10c00044 	addi	r3,r2,1
 c001038:	e0bfff17 	ldw	r2,-4(fp)
 c00103c:	10c00415 	stw	r3,16(r2)
            TetrisClearLine(givenState, y);
 c001040:	e17ffb17 	ldw	r5,-20(fp)
 c001044:	e13fff17 	ldw	r4,-4(fp)
 c001048:	c000e600 	call	c000e60 <TetrisClearLine>
            int holder = (givenState->completedLines);
 c00104c:	e0bfff17 	ldw	r2,-4(fp)
 c001050:	10800417 	ldw	r2,16(r2)
 c001054:	e0bffd15 	stw	r2,-12(fp)
            holder = holder*100;
 c001058:	01401904 	movi	r5,100
 c00105c:	e13ffd17 	ldw	r4,-12(fp)
 c001060:	c004c7c0 	call	c004c7c <__mulsi3>
 c001064:	e0bffd15 	stw	r2,-12(fp)
            printf("%d line(s) completed at %d\n", givenState->completedLines, holder);
 c001068:	e0bfff17 	ldw	r2,-4(fp)
 c00106c:	10800417 	ldw	r2,16(r2)
 c001070:	e1bffd17 	ldw	r6,-12(fp)
 c001074:	100b883a 	mov	r5,r2
 c001078:	010300b4 	movhi	r4,3074
 c00107c:	2121de04 	addi	r4,r4,-30856
 c001080:	c0056500 	call	c005650 <printf>
            char showScore;
        	sprintf(showScore, "%d", holder);
 c001084:	e0bffe07 	ldb	r2,-8(fp)
 c001088:	e1bffd17 	ldw	r6,-12(fp)
 c00108c:	014300b4 	movhi	r5,3074
 c001090:	2961e504 	addi	r5,r5,-30828
 c001094:	1009883a 	mov	r4,r2
 c001098:	c0058880 	call	c005888 <sprintf>
            VGAwriteText(givenState->gameX-10, givenState->gameY+12, 14, givenState->boardColor, showScore);
 c00109c:	e0bfff17 	ldw	r2,-4(fp)
 c0010a0:	10801217 	ldw	r2,72(r2)
 c0010a4:	10fffd84 	addi	r3,r2,-10
 c0010a8:	e0bfff17 	ldw	r2,-4(fp)
 c0010ac:	10801317 	ldw	r2,76(r2)
 c0010b0:	11000304 	addi	r4,r2,12
 c0010b4:	e0bfff17 	ldw	r2,-4(fp)
 c0010b8:	11401417 	ldw	r5,80(r2)
 c0010bc:	e0bffe07 	ldb	r2,-8(fp)
 c0010c0:	d8800015 	stw	r2,0(sp)
 c0010c4:	280f883a 	mov	r7,r5
 c0010c8:	01800384 	movi	r6,14
 c0010cc:	200b883a 	mov	r5,r4
 c0010d0:	1809883a 	mov	r4,r3
 c0010d4:	c00299c0 	call	c00299c <VGAwriteText>
            y++;
 c0010d8:	e0bffb17 	ldw	r2,-20(fp)
 c0010dc:	10800044 	addi	r2,r2,1
 c0010e0:	e0bffb15 	stw	r2,-20(fp)
}

void TetrisCheckLineComplete(TetrisGameState* givenState) {
    int x, y, l;

    for (y = givenState->boardHeight - 1; y >= 0; y--) {
 c0010e4:	e0bffb17 	ldw	r2,-20(fp)
 c0010e8:	10bfffc4 	addi	r2,r2,-1
 c0010ec:	e0bffb15 	stw	r2,-20(fp)
 c0010f0:	e0bffb17 	ldw	r2,-20(fp)
 c0010f4:	103fae0e 	bge	r2,zero,c000fb0 <__alt_data_end+0xfc000fb0>
        	sprintf(showScore, "%d", holder);
            VGAwriteText(givenState->gameX-10, givenState->gameY+12, 14, givenState->boardColor, showScore);
            y++;
        }
    }
}
 c0010f8:	0001883a 	nop
 c0010fc:	e037883a 	mov	sp,fp
 c001100:	dfc00117 	ldw	ra,4(sp)
 c001104:	df000017 	ldw	fp,0(sp)
 c001108:	dec00204 	addi	sp,sp,8
 c00110c:	f800283a 	ret

0c001110 <TetrisInputLeft>:

void TetrisInputLeft(TetrisGameState* givenState) {
 c001110:	defffd04 	addi	sp,sp,-12
 c001114:	dfc00215 	stw	ra,8(sp)
 c001118:	df000115 	stw	fp,4(sp)
 c00111c:	df000104 	addi	fp,sp,4
 c001120:	e13fff15 	stw	r4,-4(fp)
    --givenState->activeBlockX;
 c001124:	e0bfff17 	ldw	r2,-4(fp)
 c001128:	10800f17 	ldw	r2,60(r2)
 c00112c:	10ffffc4 	addi	r3,r2,-1
 c001130:	e0bfff17 	ldw	r2,-4(fp)
 c001134:	10c00f15 	stw	r3,60(r2)
    if (TetrisCheckCollision(givenState)) ++givenState->activeBlockX;
 c001138:	e13fff17 	ldw	r4,-4(fp)
 c00113c:	c0004780 	call	c000478 <TetrisCheckCollision>
 c001140:	10000526 	beq	r2,zero,c001158 <TetrisInputLeft+0x48>
 c001144:	e0bfff17 	ldw	r2,-4(fp)
 c001148:	10800f17 	ldw	r2,60(r2)
 c00114c:	10c00044 	addi	r3,r2,1
 c001150:	e0bfff17 	ldw	r2,-4(fp)
 c001154:	10c00f15 	stw	r3,60(r2)
}
 c001158:	0001883a 	nop
 c00115c:	e037883a 	mov	sp,fp
 c001160:	dfc00117 	ldw	ra,4(sp)
 c001164:	df000017 	ldw	fp,0(sp)
 c001168:	dec00204 	addi	sp,sp,8
 c00116c:	f800283a 	ret

0c001170 <TetrisInputRight>:

void TetrisInputRight(TetrisGameState* givenState) {
 c001170:	defffd04 	addi	sp,sp,-12
 c001174:	dfc00215 	stw	ra,8(sp)
 c001178:	df000115 	stw	fp,4(sp)
 c00117c:	df000104 	addi	fp,sp,4
 c001180:	e13fff15 	stw	r4,-4(fp)
    ++givenState->activeBlockX;
 c001184:	e0bfff17 	ldw	r2,-4(fp)
 c001188:	10800f17 	ldw	r2,60(r2)
 c00118c:	10c00044 	addi	r3,r2,1
 c001190:	e0bfff17 	ldw	r2,-4(fp)
 c001194:	10c00f15 	stw	r3,60(r2)
    if (TetrisCheckCollision(givenState)) --givenState->activeBlockX;
 c001198:	e13fff17 	ldw	r4,-4(fp)
 c00119c:	c0004780 	call	c000478 <TetrisCheckCollision>
 c0011a0:	10000526 	beq	r2,zero,c0011b8 <TetrisInputRight+0x48>
 c0011a4:	e0bfff17 	ldw	r2,-4(fp)
 c0011a8:	10800f17 	ldw	r2,60(r2)
 c0011ac:	10ffffc4 	addi	r3,r2,-1
 c0011b0:	e0bfff17 	ldw	r2,-4(fp)
 c0011b4:	10c00f15 	stw	r3,60(r2)
}
 c0011b8:	0001883a 	nop
 c0011bc:	e037883a 	mov	sp,fp
 c0011c0:	dfc00117 	ldw	ra,4(sp)
 c0011c4:	df000017 	ldw	fp,0(sp)
 c0011c8:	dec00204 	addi	sp,sp,8
 c0011cc:	f800283a 	ret

0c0011d0 <TetrisPrintBoard>:

void TetrisPrintBoard(TetrisGameState* givenState) {
 c0011d0:	defff804 	addi	sp,sp,-32
 c0011d4:	dfc00715 	stw	ra,28(sp)
 c0011d8:	df000615 	stw	fp,24(sp)
 c0011dc:	dc400515 	stw	r17,20(sp)
 c0011e0:	dc000415 	stw	r16,16(sp)
 c0011e4:	df000604 	addi	fp,sp,24
 c0011e8:	e13ffd15 	stw	r4,-12(fp)
    int x, y;
    //printf("drawing start (%d, %d)", givenState->gameX, givenState->gameY);
	if (givenState->pause) {
 c0011ec:	e0bffd17 	ldw	r2,-12(fp)
 c0011f0:	10801117 	ldw	r2,68(r2)
 c0011f4:	10001026 	beq	r2,zero,c001238 <TetrisPrintBoard+0x68>
		VGAwriteText(givenState->gameX-(strlen("PAUSE GAME")),(givenState->gameY+(givenState->boardHeight)),0,2,"PAUSE GAME");
 c0011f8:	e0bffd17 	ldw	r2,-12(fp)
 c0011fc:	10801217 	ldw	r2,72(r2)
 c001200:	113ffd84 	addi	r4,r2,-10
 c001204:	e0bffd17 	ldw	r2,-12(fp)
 c001208:	10c01317 	ldw	r3,76(r2)
 c00120c:	e0bffd17 	ldw	r2,-12(fp)
 c001210:	10800217 	ldw	r2,8(r2)
 c001214:	1887883a 	add	r3,r3,r2
 c001218:	008300b4 	movhi	r2,3074
 c00121c:	10a1e604 	addi	r2,r2,-30824
 c001220:	d8800015 	stw	r2,0(sp)
 c001224:	01c00084 	movi	r7,2
 c001228:	000d883a 	mov	r6,zero
 c00122c:	180b883a 	mov	r5,r3
 c001230:	c00299c0 	call	c00299c <VGAwriteText>
				} else {
					VGADrawColorBox(givenState->gameX+x,givenState->gameY-4+y,givenState->board[x][y]);}
			}
		}*/
	}
}
 c001234:	00009506 	br	c00148c <TetrisPrintBoard+0x2bc>
    int x, y;
    //printf("drawing start (%d, %d)", givenState->gameX, givenState->gameY);
	if (givenState->pause) {
		VGAwriteText(givenState->gameX-(strlen("PAUSE GAME")),(givenState->gameY+(givenState->boardHeight)),0,2,"PAUSE GAME");
	} else {
		VGAwriteText(givenState->gameX-(strlen("PAUSE GAME")),(givenState->gameY+(givenState->boardHeight)),0,0,"PAUSE GAME");
 c001238:	e0bffd17 	ldw	r2,-12(fp)
 c00123c:	10801217 	ldw	r2,72(r2)
 c001240:	113ffd84 	addi	r4,r2,-10
 c001244:	e0bffd17 	ldw	r2,-12(fp)
 c001248:	10c01317 	ldw	r3,76(r2)
 c00124c:	e0bffd17 	ldw	r2,-12(fp)
 c001250:	10800217 	ldw	r2,8(r2)
 c001254:	1887883a 	add	r3,r3,r2
 c001258:	008300b4 	movhi	r2,3074
 c00125c:	10a1e604 	addi	r2,r2,-30824
 c001260:	d8800015 	stw	r2,0(sp)
 c001264:	000f883a 	mov	r7,zero
 c001268:	000d883a 	mov	r6,zero
 c00126c:	180b883a 	mov	r5,r3
 c001270:	c00299c0 	call	c00299c <VGAwriteText>
		for (y = 4; y < (givenState->boardHeight)*2; y++) {
 c001274:	00800104 	movi	r2,4
 c001278:	e0bffc15 	stw	r2,-16(fp)
 c00127c:	00007d06 	br	c001474 <TetrisPrintBoard+0x2a4>
			for (x = 0; x < (givenState->boardWidth)*2; x++) {
 c001280:	e03ffb15 	stw	zero,-20(fp)
 c001284:	00007206 	br	c001450 <TetrisPrintBoard+0x280>
				if (x/2 >= givenState->activeBlockX &&                              //
 c001288:	e0bffb17 	ldw	r2,-20(fp)
 c00128c:	1006d7fa 	srli	r3,r2,31
 c001290:	1885883a 	add	r2,r3,r2
 c001294:	1005d07a 	srai	r2,r2,1
 c001298:	1007883a 	mov	r3,r2
 c00129c:	e0bffd17 	ldw	r2,-12(fp)
 c0012a0:	10800f17 	ldw	r2,60(r2)
 c0012a4:	18804916 	blt	r3,r2,c0013cc <TetrisPrintBoard+0x1fc>
					y/2 >= givenState->activeBlockY &&                              //
 c0012a8:	e0bffc17 	ldw	r2,-16(fp)
 c0012ac:	1006d7fa 	srli	r3,r2,31
 c0012b0:	1885883a 	add	r2,r3,r2
 c0012b4:	1005d07a 	srai	r2,r2,1
 c0012b8:	1007883a 	mov	r3,r2
 c0012bc:	e0bffd17 	ldw	r2,-12(fp)
 c0012c0:	10801017 	ldw	r2,64(r2)
		VGAwriteText(givenState->gameX-(strlen("PAUSE GAME")),(givenState->gameY+(givenState->boardHeight)),0,2,"PAUSE GAME");
	} else {
		VGAwriteText(givenState->gameX-(strlen("PAUSE GAME")),(givenState->gameY+(givenState->boardHeight)),0,0,"PAUSE GAME");
		for (y = 4; y < (givenState->boardHeight)*2; y++) {
			for (x = 0; x < (givenState->boardWidth)*2; x++) {
				if (x/2 >= givenState->activeBlockX &&                              //
 c0012c4:	18804116 	blt	r3,r2,c0013cc <TetrisPrintBoard+0x1fc>
					y/2 >= givenState->activeBlockY &&                              //
					x/2 < (givenState->activeBlockX + givenState->activeBlock.width) &&  //
 c0012c8:	e0bffb17 	ldw	r2,-20(fp)
 c0012cc:	1006d7fa 	srli	r3,r2,31
 c0012d0:	1885883a 	add	r2,r3,r2
 c0012d4:	1005d07a 	srai	r2,r2,1
 c0012d8:	1009883a 	mov	r4,r2
 c0012dc:	e0bffd17 	ldw	r2,-12(fp)
 c0012e0:	10c00f17 	ldw	r3,60(r2)
 c0012e4:	e0bffd17 	ldw	r2,-12(fp)
 c0012e8:	10800517 	ldw	r2,20(r2)
 c0012ec:	1885883a 	add	r2,r3,r2
	} else {
		VGAwriteText(givenState->gameX-(strlen("PAUSE GAME")),(givenState->gameY+(givenState->boardHeight)),0,0,"PAUSE GAME");
		for (y = 4; y < (givenState->boardHeight)*2; y++) {
			for (x = 0; x < (givenState->boardWidth)*2; x++) {
				if (x/2 >= givenState->activeBlockX &&                              //
					y/2 >= givenState->activeBlockY &&                              //
 c0012f0:	2080360e 	bge	r4,r2,c0013cc <TetrisPrintBoard+0x1fc>
					x/2 < (givenState->activeBlockX + givenState->activeBlock.width) &&  //
					y/2 < (givenState->activeBlockY + givenState->activeBlock.height) && //
 c0012f4:	e0bffc17 	ldw	r2,-16(fp)
 c0012f8:	1006d7fa 	srli	r3,r2,31
 c0012fc:	1885883a 	add	r2,r3,r2
 c001300:	1005d07a 	srai	r2,r2,1
 c001304:	1009883a 	mov	r4,r2
 c001308:	e0bffd17 	ldw	r2,-12(fp)
 c00130c:	10c01017 	ldw	r3,64(r2)
 c001310:	e0bffd17 	ldw	r2,-12(fp)
 c001314:	10800617 	ldw	r2,24(r2)
 c001318:	1885883a 	add	r2,r3,r2
		VGAwriteText(givenState->gameX-(strlen("PAUSE GAME")),(givenState->gameY+(givenState->boardHeight)),0,0,"PAUSE GAME");
		for (y = 4; y < (givenState->boardHeight)*2; y++) {
			for (x = 0; x < (givenState->boardWidth)*2; x++) {
				if (x/2 >= givenState->activeBlockX &&                              //
					y/2 >= givenState->activeBlockY &&                              //
					x/2 < (givenState->activeBlockX + givenState->activeBlock.width) &&  //
 c00131c:	20802b0e 	bge	r4,r2,c0013cc <TetrisPrintBoard+0x1fc>
					y/2 < (givenState->activeBlockY + givenState->activeBlock.height) && //
					givenState->activeBlock.data[y/2 - givenState->activeBlockY]
 c001320:	e0bffc17 	ldw	r2,-16(fp)
 c001324:	1006d7fa 	srli	r3,r2,31
 c001328:	1885883a 	add	r2,r3,r2
 c00132c:	1005d07a 	srai	r2,r2,1
 c001330:	1007883a 	mov	r3,r2
 c001334:	e0bffd17 	ldw	r2,-12(fp)
 c001338:	10801017 	ldw	r2,64(r2)
 c00133c:	1889c83a 	sub	r4,r3,r2
										   [x/2 - givenState->activeBlockX] != ' ') {
 c001340:	e0bffb17 	ldw	r2,-20(fp)
 c001344:	1006d7fa 	srli	r3,r2,31
 c001348:	1885883a 	add	r2,r3,r2
 c00134c:	1005d07a 	srai	r2,r2,1
 c001350:	1007883a 	mov	r3,r2
 c001354:	e0bffd17 	ldw	r2,-12(fp)
 c001358:	10800f17 	ldw	r2,60(r2)
 c00135c:	18a1c83a 	sub	r16,r3,r2
 c001360:	e47ffd17 	ldw	r17,-12(fp)
 c001364:	01400144 	movi	r5,5
 c001368:	c004c7c0 	call	c004c7c <__mulsi3>
 c00136c:	8885883a 	add	r2,r17,r2
 c001370:	1405883a 	add	r2,r2,r16
 c001374:	10800704 	addi	r2,r2,28
 c001378:	10800003 	ldbu	r2,0(r2)
		for (y = 4; y < (givenState->boardHeight)*2; y++) {
			for (x = 0; x < (givenState->boardWidth)*2; x++) {
				if (x/2 >= givenState->activeBlockX &&                              //
					y/2 >= givenState->activeBlockY &&                              //
					x/2 < (givenState->activeBlockX + givenState->activeBlock.width) &&  //
					y/2 < (givenState->activeBlockY + givenState->activeBlock.height) && //
 c00137c:	10803fcc 	andi	r2,r2,255
 c001380:	1080201c 	xori	r2,r2,128
 c001384:	10bfe004 	addi	r2,r2,-128
 c001388:	10800820 	cmpeqi	r2,r2,32
 c00138c:	10000f1e 	bne	r2,zero,c0013cc <TetrisPrintBoard+0x1fc>
					givenState->activeBlock.data[y/2 - givenState->activeBlockY]
										   [x/2 - givenState->activeBlockX] != ' ') {
					VGADrawColorBox(givenState->gameX+x,givenState->gameY-4+y, givenState->activeBlock.color);
 c001390:	e0bffd17 	ldw	r2,-12(fp)
 c001394:	10c01217 	ldw	r3,72(r2)
 c001398:	e0bffb17 	ldw	r2,-20(fp)
 c00139c:	1889883a 	add	r4,r3,r2
 c0013a0:	e0bffd17 	ldw	r2,-12(fp)
 c0013a4:	10801317 	ldw	r2,76(r2)
 c0013a8:	10ffff04 	addi	r3,r2,-4
 c0013ac:	e0bffc17 	ldw	r2,-16(fp)
 c0013b0:	1887883a 	add	r3,r3,r2
 c0013b4:	e0bffd17 	ldw	r2,-12(fp)
 c0013b8:	10800e17 	ldw	r2,56(r2)
 c0013bc:	100d883a 	mov	r6,r2
 c0013c0:	180b883a 	mov	r5,r3
 c0013c4:	c0029300 	call	c002930 <VGADrawColorBox>
				if (x/2 >= givenState->activeBlockX &&                              //
					y/2 >= givenState->activeBlockY &&                              //
					x/2 < (givenState->activeBlockX + givenState->activeBlock.width) &&  //
					y/2 < (givenState->activeBlockY + givenState->activeBlock.height) && //
					givenState->activeBlock.data[y/2 - givenState->activeBlockY]
										   [x/2 - givenState->activeBlockX] != ' ') {
 c0013c8:	00001e06 	br	c001444 <TetrisPrintBoard+0x274>
					VGADrawColorBox(givenState->gameX+x,givenState->gameY-4+y, givenState->activeBlock.color);
				} else {
					VGADrawColorBox(givenState->gameX+x,givenState->gameY-4+y,givenState->board[x/2][y/2]);}
 c0013cc:	e0bffd17 	ldw	r2,-12(fp)
 c0013d0:	10c01217 	ldw	r3,72(r2)
 c0013d4:	e0bffb17 	ldw	r2,-20(fp)
 c0013d8:	188f883a 	add	r7,r3,r2
 c0013dc:	e0bffd17 	ldw	r2,-12(fp)
 c0013e0:	10801317 	ldw	r2,76(r2)
 c0013e4:	10ffff04 	addi	r3,r2,-4
 c0013e8:	e0bffc17 	ldw	r2,-16(fp)
 c0013ec:	188b883a 	add	r5,r3,r2
 c0013f0:	e0bffd17 	ldw	r2,-12(fp)
 c0013f4:	10c00017 	ldw	r3,0(r2)
 c0013f8:	e0bffb17 	ldw	r2,-20(fp)
 c0013fc:	1008d7fa 	srli	r4,r2,31
 c001400:	2085883a 	add	r2,r4,r2
 c001404:	1005d07a 	srai	r2,r2,1
 c001408:	1085883a 	add	r2,r2,r2
 c00140c:	1085883a 	add	r2,r2,r2
 c001410:	1885883a 	add	r2,r3,r2
 c001414:	10c00017 	ldw	r3,0(r2)
 c001418:	e0bffc17 	ldw	r2,-16(fp)
 c00141c:	1008d7fa 	srli	r4,r2,31
 c001420:	2085883a 	add	r2,r4,r2
 c001424:	1005d07a 	srai	r2,r2,1
 c001428:	1085883a 	add	r2,r2,r2
 c00142c:	1085883a 	add	r2,r2,r2
 c001430:	1885883a 	add	r2,r3,r2
 c001434:	10800017 	ldw	r2,0(r2)
 c001438:	100d883a 	mov	r6,r2
 c00143c:	3809883a 	mov	r4,r7
 c001440:	c0029300 	call	c002930 <VGADrawColorBox>
	if (givenState->pause) {
		VGAwriteText(givenState->gameX-(strlen("PAUSE GAME")),(givenState->gameY+(givenState->boardHeight)),0,2,"PAUSE GAME");
	} else {
		VGAwriteText(givenState->gameX-(strlen("PAUSE GAME")),(givenState->gameY+(givenState->boardHeight)),0,0,"PAUSE GAME");
		for (y = 4; y < (givenState->boardHeight)*2; y++) {
			for (x = 0; x < (givenState->boardWidth)*2; x++) {
 c001444:	e0bffb17 	ldw	r2,-20(fp)
 c001448:	10800044 	addi	r2,r2,1
 c00144c:	e0bffb15 	stw	r2,-20(fp)
 c001450:	e0bffd17 	ldw	r2,-12(fp)
 c001454:	10800117 	ldw	r2,4(r2)
 c001458:	1085883a 	add	r2,r2,r2
 c00145c:	1007883a 	mov	r3,r2
 c001460:	e0bffb17 	ldw	r2,-20(fp)
 c001464:	10ff8816 	blt	r2,r3,c001288 <__alt_data_end+0xfc001288>
    //printf("drawing start (%d, %d)", givenState->gameX, givenState->gameY);
	if (givenState->pause) {
		VGAwriteText(givenState->gameX-(strlen("PAUSE GAME")),(givenState->gameY+(givenState->boardHeight)),0,2,"PAUSE GAME");
	} else {
		VGAwriteText(givenState->gameX-(strlen("PAUSE GAME")),(givenState->gameY+(givenState->boardHeight)),0,0,"PAUSE GAME");
		for (y = 4; y < (givenState->boardHeight)*2; y++) {
 c001468:	e0bffc17 	ldw	r2,-16(fp)
 c00146c:	10800044 	addi	r2,r2,1
 c001470:	e0bffc15 	stw	r2,-16(fp)
 c001474:	e0bffd17 	ldw	r2,-12(fp)
 c001478:	10800217 	ldw	r2,8(r2)
 c00147c:	1085883a 	add	r2,r2,r2
 c001480:	1007883a 	mov	r3,r2
 c001484:	e0bffc17 	ldw	r2,-16(fp)
 c001488:	10ff7d16 	blt	r2,r3,c001280 <__alt_data_end+0xfc001280>
				} else {
					VGADrawColorBox(givenState->gameX+x,givenState->gameY-4+y,givenState->board[x][y]);}
			}
		}*/
	}
}
 c00148c:	0001883a 	nop
 c001490:	e6fffe04 	addi	sp,fp,-8
 c001494:	dfc00317 	ldw	ra,12(sp)
 c001498:	df000217 	ldw	fp,8(sp)
 c00149c:	dc400117 	ldw	r17,4(sp)
 c0014a0:	dc000017 	ldw	r16,0(sp)
 c0014a4:	dec00404 	addi	sp,sp,16
 c0014a8:	f800283a 	ret

0c0014ac <TetrisShowScore>:

void TetrisShowScore(int x, int y) {
 c0014ac:	defffd04 	addi	sp,sp,-12
 c0014b0:	df000215 	stw	fp,8(sp)
 c0014b4:	df000204 	addi	fp,sp,8
 c0014b8:	e13ffe15 	stw	r4,-8(fp)
 c0014bc:	e17fff15 	stw	r5,-4(fp)
    //char showScore;
	//sprintf(showScore, "%d", score);
}
 c0014c0:	0001883a 	nop
 c0014c4:	e037883a 	mov	sp,fp
 c0014c8:	df000017 	ldw	fp,0(sp)
 c0014cc:	dec00104 	addi	sp,sp,4
 c0014d0:	f800283a 	ret

0c0014d4 <TetrisPause>:

void TetrisPause(TetrisGameState* givenState) {
 c0014d4:	defffe04 	addi	sp,sp,-8
 c0014d8:	df000115 	stw	fp,4(sp)
 c0014dc:	df000104 	addi	fp,sp,4
 c0014e0:	e13fff15 	stw	r4,-4(fp)
	givenState->pause = !givenState->pause;
 c0014e4:	e0bfff17 	ldw	r2,-4(fp)
 c0014e8:	10801117 	ldw	r2,68(r2)
 c0014ec:	1005003a 	cmpeq	r2,r2,zero
 c0014f0:	10c03fcc 	andi	r3,r2,255
 c0014f4:	e0bfff17 	ldw	r2,-4(fp)
 c0014f8:	10c01115 	stw	r3,68(r2)
}
 c0014fc:	0001883a 	nop
 c001500:	e037883a 	mov	sp,fp
 c001504:	df000017 	ldw	fp,0(sp)
 c001508:	dec00104 	addi	sp,sp,4
 c00150c:	f800283a 	ret

0c001510 <GetDriverandReport>:

static BYTE addr = 1; 				//hard-wired USB address
const char* const devclasses[] = { " Uninitialized", " HID Keyboard", " HID Mouse", " Mass storage" };


BYTE GetDriverandReport() {
 c001510:	defff604 	addi	sp,sp,-40
 c001514:	dfc00915 	stw	ra,36(sp)
 c001518:	df000815 	stw	fp,32(sp)
 c00151c:	df000804 	addi	fp,sp,32
	BYTE i;
	BYTE rcode;
	BYTE device = 0xFF;
 c001520:	00bfffc4 	movi	r2,-1
 c001524:	e0bffd45 	stb	r2,-11(fp)
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
 c001528:	010300b4 	movhi	r4,3074
 c00152c:	2121fc04 	addi	r4,r4,-30736
 c001530:	c00574c0 	call	c00574c <puts>
	for (i = 1; i < USB_NUMDEVICES; i++) {
 c001534:	00800044 	movi	r2,1
 c001538:	e0bffd05 	stb	r2,-12(fp)
 c00153c:	00001f06 	br	c0015bc <GetDriverandReport+0xac>
		tpl_ptr = GetDevtable(i);
 c001540:	e0bffd03 	ldbu	r2,-12(fp)
 c001544:	1009883a 	mov	r4,r2
 c001548:	c004a0c0 	call	c004a0c <GetDevtable>
 c00154c:	e0bffe15 	stw	r2,-8(fp)
		if (tpl_ptr->epinfo != NULL) {
 c001550:	e0bffe17 	ldw	r2,-8(fp)
 c001554:	10800017 	ldw	r2,0(r2)
 c001558:	10001526 	beq	r2,zero,c0015b0 <GetDriverandReport+0xa0>
			printf("Device: %d", i);
 c00155c:	e0bffd03 	ldbu	r2,-12(fp)
 c001560:	100b883a 	mov	r5,r2
 c001564:	010300b4 	movhi	r4,3074
 c001568:	21220504 	addi	r4,r4,-30700
 c00156c:	c0056500 	call	c005650 <printf>
			printf("%s \n", devclasses[tpl_ptr->devclass]);
 c001570:	e0bffe17 	ldw	r2,-8(fp)
 c001574:	10800103 	ldbu	r2,4(r2)
 c001578:	10c03fcc 	andi	r3,r2,255
 c00157c:	008300b4 	movhi	r2,3074
 c001580:	10a1f804 	addi	r2,r2,-30752
 c001584:	18c7883a 	add	r3,r3,r3
 c001588:	18c7883a 	add	r3,r3,r3
 c00158c:	10c5883a 	add	r2,r2,r3
 c001590:	10800017 	ldw	r2,0(r2)
 c001594:	100b883a 	mov	r5,r2
 c001598:	010300b4 	movhi	r4,3074
 c00159c:	21220804 	addi	r4,r4,-30688
 c0015a0:	c0056500 	call	c005650 <printf>
			device = tpl_ptr->devclass;
 c0015a4:	e0bffe17 	ldw	r2,-8(fp)
 c0015a8:	10800103 	ldbu	r2,4(r2)
 c0015ac:	e0bffd45 	stb	r2,-11(fp)
	BYTE device = 0xFF;
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
	for (i = 1; i < USB_NUMDEVICES; i++) {
 c0015b0:	e0bffd03 	ldbu	r2,-12(fp)
 c0015b4:	10800044 	addi	r2,r2,1
 c0015b8:	e0bffd05 	stb	r2,-12(fp)
 c0015bc:	e0bffd03 	ldbu	r2,-12(fp)
 c0015c0:	10800230 	cmpltui	r2,r2,8
 c0015c4:	103fde1e 	bne	r2,zero,c001540 <__alt_data_end+0xfc001540>
			printf("%s \n", devclasses[tpl_ptr->devclass]);
			device = tpl_ptr->devclass;
		}
	}
	//Query rate and protocol
	rcode = XferGetIdle(addr, 0, hid_device.interface, 0, &tmpbyte);
 c0015c8:	d0a00403 	ldbu	r2,-32752(gp)
 c0015cc:	11003fcc 	andi	r4,r2,255
 c0015d0:	d0a7a743 	ldbu	r2,-24931(gp)
 c0015d4:	10803fcc 	andi	r2,r2,255
 c0015d8:	e0ffff44 	addi	r3,fp,-3
 c0015dc:	d8c00415 	stw	r3,16(sp)
 c0015e0:	00c00044 	movi	r3,1
 c0015e4:	d8c00315 	stw	r3,12(sp)
 c0015e8:	d8800215 	stw	r2,8(sp)
 c0015ec:	d8000115 	stw	zero,4(sp)
 c0015f0:	d8000015 	stw	zero,0(sp)
 c0015f4:	01c00084 	movi	r7,2
 c0015f8:	01802844 	movi	r6,161
 c0015fc:	000b883a 	mov	r5,zero
 c001600:	c003c300 	call	c003c30 <XferCtrlReq>
 c001604:	e0bfff05 	stb	r2,-4(fp)
	if (rcode) {   //error handling
 c001608:	e0bfff03 	ldbu	r2,-4(fp)
 c00160c:	10000926 	beq	r2,zero,c001634 <GetDriverandReport+0x124>
		printf("GetIdle Error. Error code: ");
 c001610:	010300b4 	movhi	r4,3074
 c001614:	21220a04 	addi	r4,r4,-30680
 c001618:	c0056500 	call	c005650 <printf>
		printf("%x \n", rcode);
 c00161c:	e0bfff03 	ldbu	r2,-4(fp)
 c001620:	100b883a 	mov	r5,r2
 c001624:	010300b4 	movhi	r4,3074
 c001628:	21221104 	addi	r4,r4,-30652
 c00162c:	c0056500 	call	c005650 <printf>
 c001630:	00000906 	br	c001658 <GetDriverandReport+0x148>
	} else {
		printf("Update rate: ");
 c001634:	010300b4 	movhi	r4,3074
 c001638:	21221304 	addi	r4,r4,-30644
 c00163c:	c0056500 	call	c005650 <printf>
		printf("%x \n", tmpbyte);
 c001640:	e0bfff43 	ldbu	r2,-3(fp)
 c001644:	10803fcc 	andi	r2,r2,255
 c001648:	100b883a 	mov	r5,r2
 c00164c:	010300b4 	movhi	r4,3074
 c001650:	21221104 	addi	r4,r4,-30652
 c001654:	c0056500 	call	c005650 <printf>
	}
	printf("Protocol: ");
 c001658:	010300b4 	movhi	r4,3074
 c00165c:	21221704 	addi	r4,r4,-30628
 c001660:	c0056500 	call	c005650 <printf>
	rcode = XferGetProto(addr, 0, hid_device.interface, &tmpbyte);
 c001664:	d0a00403 	ldbu	r2,-32752(gp)
 c001668:	11003fcc 	andi	r4,r2,255
 c00166c:	d0a7a743 	ldbu	r2,-24931(gp)
 c001670:	10803fcc 	andi	r2,r2,255
 c001674:	e0ffff44 	addi	r3,fp,-3
 c001678:	d8c00415 	stw	r3,16(sp)
 c00167c:	00c00044 	movi	r3,1
 c001680:	d8c00315 	stw	r3,12(sp)
 c001684:	d8800215 	stw	r2,8(sp)
 c001688:	d8000115 	stw	zero,4(sp)
 c00168c:	d8000015 	stw	zero,0(sp)
 c001690:	01c000c4 	movi	r7,3
 c001694:	01802844 	movi	r6,161
 c001698:	000b883a 	mov	r5,zero
 c00169c:	c003c300 	call	c003c30 <XferCtrlReq>
 c0016a0:	e0bfff05 	stb	r2,-4(fp)
	if (rcode) {   //error handling
 c0016a4:	e0bfff03 	ldbu	r2,-4(fp)
 c0016a8:	10000926 	beq	r2,zero,c0016d0 <GetDriverandReport+0x1c0>
		printf("GetProto Error. Error code ");
 c0016ac:	010300b4 	movhi	r4,3074
 c0016b0:	21221a04 	addi	r4,r4,-30616
 c0016b4:	c0056500 	call	c005650 <printf>
		printf("%x \n", rcode);
 c0016b8:	e0bfff03 	ldbu	r2,-4(fp)
 c0016bc:	100b883a 	mov	r5,r2
 c0016c0:	010300b4 	movhi	r4,3074
 c0016c4:	21221104 	addi	r4,r4,-30652
 c0016c8:	c0056500 	call	c005650 <printf>
 c0016cc:	00000606 	br	c0016e8 <GetDriverandReport+0x1d8>
	} else {
		printf("%d \n", tmpbyte);
 c0016d0:	e0bfff43 	ldbu	r2,-3(fp)
 c0016d4:	10803fcc 	andi	r2,r2,255
 c0016d8:	100b883a 	mov	r5,r2
 c0016dc:	010300b4 	movhi	r4,3074
 c0016e0:	21222104 	addi	r4,r4,-30588
 c0016e4:	c0056500 	call	c005650 <printf>
	}
	return device;
 c0016e8:	e0bffd43 	ldbu	r2,-11(fp)
}
 c0016ec:	e037883a 	mov	sp,fp
 c0016f0:	dfc00117 	ldw	ra,4(sp)
 c0016f4:	df000017 	ldw	fp,0(sp)
 c0016f8:	dec00204 	addi	sp,sp,8
 c0016fc:	f800283a 	ret

0c001700 <setLED>:

void setLED(int LED) {
 c001700:	defffe04 	addi	sp,sp,-8
 c001704:	df000115 	stw	fp,4(sp)
 c001708:	df000104 	addi	fp,sp,4
 c00170c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
 c001710:	00806804 	movi	r2,416
 c001714:	10c00037 	ldwio	r3,0(r2)
 c001718:	01000044 	movi	r4,1
 c00171c:	e0bfff17 	ldw	r2,-4(fp)
 c001720:	2084983a 	sll	r2,r4,r2
 c001724:	1886b03a 	or	r3,r3,r2
 c001728:	00806804 	movi	r2,416
 c00172c:	10c00035 	stwio	r3,0(r2)
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) | (0x001 << LED)));
}
 c001730:	0001883a 	nop
 c001734:	e037883a 	mov	sp,fp
 c001738:	df000017 	ldw	fp,0(sp)
 c00173c:	dec00104 	addi	sp,sp,4
 c001740:	f800283a 	ret

0c001744 <clearLED>:

void clearLED(int LED) {
 c001744:	defffe04 	addi	sp,sp,-8
 c001748:	df000115 	stw	fp,4(sp)
 c00174c:	df000104 	addi	fp,sp,4
 c001750:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
 c001754:	00806804 	movi	r2,416
 c001758:	10c00037 	ldwio	r3,0(r2)
 c00175c:	01000044 	movi	r4,1
 c001760:	e0bfff17 	ldw	r2,-4(fp)
 c001764:	2084983a 	sll	r2,r4,r2
 c001768:	0084303a 	nor	r2,zero,r2
 c00176c:	1886703a 	and	r3,r3,r2
 c001770:	00806804 	movi	r2,416
 c001774:	10c00035 	stwio	r3,0(r2)
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) & ~(0x001 << LED)));

}
 c001778:	0001883a 	nop
 c00177c:	e037883a 	mov	sp,fp
 c001780:	df000017 	ldw	fp,0(sp)
 c001784:	dec00104 	addi	sp,sp,4
 c001788:	f800283a 	ret

0c00178c <printSignedHex0>:

void printSignedHex0(signed char value) {
 c00178c:	defffc04 	addi	sp,sp,-16
 c001790:	dfc00315 	stw	ra,12(sp)
 c001794:	df000215 	stw	fp,8(sp)
 c001798:	df000204 	addi	fp,sp,8
 c00179c:	2005883a 	mov	r2,r4
 c0017a0:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
 c0017a4:	e03ffe05 	stb	zero,-8(fp)
	BYTE ones = 0;
 c0017a8:	e03ffe45 	stb	zero,-7(fp)
	WORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 c0017ac:	00805404 	movi	r2,336
 c0017b0:	10800037 	ldwio	r2,0(r2)
 c0017b4:	e0bffe8d 	sth	r2,-6(fp)
	if (value < 0) {
 c0017b8:	e0bfff07 	ldb	r2,-4(fp)
 c0017bc:	1000060e 	bge	r2,zero,c0017d8 <printSignedHex0+0x4c>
		setLED(11);
 c0017c0:	010002c4 	movi	r4,11
 c0017c4:	c0017000 	call	c001700 <setLED>
		value = -value;
 c0017c8:	e0bfff03 	ldbu	r2,-4(fp)
 c0017cc:	0085c83a 	sub	r2,zero,r2
 c0017d0:	e0bfff05 	stb	r2,-4(fp)
 c0017d4:	00000206 	br	c0017e0 <printSignedHex0+0x54>
	} else {
		clearLED(11);
 c0017d8:	010002c4 	movi	r4,11
 c0017dc:	c0017440 	call	c001744 <clearLED>
	}
	//handled hundreds
	if (value / 100)
 c0017e0:	e0bfff03 	ldbu	r2,-4(fp)
 c0017e4:	108018c4 	addi	r2,r2,99
 c0017e8:	10803fcc 	andi	r2,r2,255
 c0017ec:	108031f0 	cmpltui	r2,r2,199
 c0017f0:	1000031e 	bne	r2,zero,c001800 <printSignedHex0+0x74>
		setLED(13);
 c0017f4:	01000344 	movi	r4,13
 c0017f8:	c0017000 	call	c001700 <setLED>
 c0017fc:	00000206 	br	c001808 <printSignedHex0+0x7c>
	else
		clearLED(13);
 c001800:	01000344 	movi	r4,13
 c001804:	c0017440 	call	c001744 <clearLED>

	value = value % 100;
 c001808:	e0bfff07 	ldb	r2,-4(fp)
 c00180c:	01401904 	movi	r5,100
 c001810:	1009883a 	mov	r4,r2
 c001814:	c004b4c0 	call	c004b4c <__modsi3>
 c001818:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 c00181c:	e0bfff07 	ldb	r2,-4(fp)
 c001820:	01400284 	movi	r5,10
 c001824:	1009883a 	mov	r4,r2
 c001828:	c004ac80 	call	c004ac8 <__divsi3>
 c00182c:	e0bffe05 	stb	r2,-8(fp)
	ones = value % 10;
 c001830:	e0bfff07 	ldb	r2,-4(fp)
 c001834:	01400284 	movi	r5,10
 c001838:	1009883a 	mov	r4,r2
 c00183c:	c004b4c0 	call	c004b4c <__modsi3>
 c001840:	e0bffe45 	stb	r2,-7(fp)

	pio_val &= 0x00FF;
 c001844:	e0bffe8b 	ldhu	r2,-6(fp)
 c001848:	10803fcc 	andi	r2,r2,255
 c00184c:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (tens << 12);
 c001850:	e0bffe03 	ldbu	r2,-8(fp)
 c001854:	1004933a 	slli	r2,r2,12
 c001858:	1007883a 	mov	r3,r2
 c00185c:	e0bffe8b 	ldhu	r2,-6(fp)
 c001860:	1884b03a 	or	r2,r3,r2
 c001864:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (ones << 8);
 c001868:	e0bffe43 	ldbu	r2,-7(fp)
 c00186c:	1004923a 	slli	r2,r2,8
 c001870:	1007883a 	mov	r3,r2
 c001874:	e0bffe8b 	ldhu	r2,-6(fp)
 c001878:	1884b03a 	or	r2,r3,r2
 c00187c:	e0bffe8d 	sth	r2,-6(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 c001880:	e0fffe8b 	ldhu	r3,-6(fp)
 c001884:	00805404 	movi	r2,336
 c001888:	10c00035 	stwio	r3,0(r2)
}
 c00188c:	0001883a 	nop
 c001890:	e037883a 	mov	sp,fp
 c001894:	dfc00117 	ldw	ra,4(sp)
 c001898:	df000017 	ldw	fp,0(sp)
 c00189c:	dec00204 	addi	sp,sp,8
 c0018a0:	f800283a 	ret

0c0018a4 <printSignedHex1>:

void printSignedHex1(signed char value) {
 c0018a4:	defffb04 	addi	sp,sp,-20
 c0018a8:	dfc00415 	stw	ra,16(sp)
 c0018ac:	df000315 	stw	fp,12(sp)
 c0018b0:	df000304 	addi	fp,sp,12
 c0018b4:	2005883a 	mov	r2,r4
 c0018b8:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
 c0018bc:	e03ffd05 	stb	zero,-12(fp)
	BYTE ones = 0;
 c0018c0:	e03ffd45 	stb	zero,-11(fp)
	DWORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 c0018c4:	00805404 	movi	r2,336
 c0018c8:	10800037 	ldwio	r2,0(r2)
 c0018cc:	e0bffe15 	stw	r2,-8(fp)
	if (value < 0) {
 c0018d0:	e0bfff07 	ldb	r2,-4(fp)
 c0018d4:	1000060e 	bge	r2,zero,c0018f0 <printSignedHex1+0x4c>
		setLED(10);
 c0018d8:	01000284 	movi	r4,10
 c0018dc:	c0017000 	call	c001700 <setLED>
		value = -value;
 c0018e0:	e0bfff03 	ldbu	r2,-4(fp)
 c0018e4:	0085c83a 	sub	r2,zero,r2
 c0018e8:	e0bfff05 	stb	r2,-4(fp)
 c0018ec:	00000206 	br	c0018f8 <printSignedHex1+0x54>
	} else {
		clearLED(10);
 c0018f0:	01000284 	movi	r4,10
 c0018f4:	c0017440 	call	c001744 <clearLED>
	}
	//handled hundreds
	if (value / 100)
 c0018f8:	e0bfff03 	ldbu	r2,-4(fp)
 c0018fc:	108018c4 	addi	r2,r2,99
 c001900:	10803fcc 	andi	r2,r2,255
 c001904:	108031f0 	cmpltui	r2,r2,199
 c001908:	1000031e 	bne	r2,zero,c001918 <printSignedHex1+0x74>
		setLED(12);
 c00190c:	01000304 	movi	r4,12
 c001910:	c0017000 	call	c001700 <setLED>
 c001914:	00000206 	br	c001920 <printSignedHex1+0x7c>
	else
		clearLED(12);
 c001918:	01000304 	movi	r4,12
 c00191c:	c0017440 	call	c001744 <clearLED>

	value = value % 100;
 c001920:	e0bfff07 	ldb	r2,-4(fp)
 c001924:	01401904 	movi	r5,100
 c001928:	1009883a 	mov	r4,r2
 c00192c:	c004b4c0 	call	c004b4c <__modsi3>
 c001930:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 c001934:	e0bfff07 	ldb	r2,-4(fp)
 c001938:	01400284 	movi	r5,10
 c00193c:	1009883a 	mov	r4,r2
 c001940:	c004ac80 	call	c004ac8 <__divsi3>
 c001944:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
 c001948:	e0bfff07 	ldb	r2,-4(fp)
 c00194c:	01400284 	movi	r5,10
 c001950:	1009883a 	mov	r4,r2
 c001954:	c004b4c0 	call	c004b4c <__modsi3>
 c001958:	e0bffd45 	stb	r2,-11(fp)
	tens = value / 10;
 c00195c:	e0bfff07 	ldb	r2,-4(fp)
 c001960:	01400284 	movi	r5,10
 c001964:	1009883a 	mov	r4,r2
 c001968:	c004ac80 	call	c004ac8 <__divsi3>
 c00196c:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
 c001970:	e0bfff07 	ldb	r2,-4(fp)
 c001974:	01400284 	movi	r5,10
 c001978:	1009883a 	mov	r4,r2
 c00197c:	c004b4c0 	call	c004b4c <__modsi3>
 c001980:	e0bffd45 	stb	r2,-11(fp)

	pio_val &= 0xFF00;
 c001984:	e0bffe17 	ldw	r2,-8(fp)
 c001988:	10bfc00c 	andi	r2,r2,65280
 c00198c:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (tens << 4);
 c001990:	e0bffd03 	ldbu	r2,-12(fp)
 c001994:	1004913a 	slli	r2,r2,4
 c001998:	1007883a 	mov	r3,r2
 c00199c:	e0bffe17 	ldw	r2,-8(fp)
 c0019a0:	10c4b03a 	or	r2,r2,r3
 c0019a4:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (ones << 0);
 c0019a8:	e0bffd43 	ldbu	r2,-11(fp)
 c0019ac:	e0fffe17 	ldw	r3,-8(fp)
 c0019b0:	1884b03a 	or	r2,r3,r2
 c0019b4:	e0bffe15 	stw	r2,-8(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 c0019b8:	e0fffe17 	ldw	r3,-8(fp)
 c0019bc:	00805404 	movi	r2,336
 c0019c0:	10c00035 	stwio	r3,0(r2)
}
 c0019c4:	0001883a 	nop
 c0019c8:	e037883a 	mov	sp,fp
 c0019cc:	dfc00117 	ldw	ra,4(sp)
 c0019d0:	df000017 	ldw	fp,0(sp)
 c0019d4:	dec00204 	addi	sp,sp,8
 c0019d8:	f800283a 	ret

0c0019dc <setKeycode>:

void setKeycode(WORD keycode) {
 c0019dc:	defffe04 	addi	sp,sp,-8
 c0019e0:	df000115 	stw	fp,4(sp)
 c0019e4:	df000104 	addi	fp,sp,4
 c0019e8:	2005883a 	mov	r2,r4
 c0019ec:	e0bfff0d 	sth	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(0x00000160, keycode);
 c0019f0:	e0ffff0b 	ldhu	r3,-4(fp)
 c0019f4:	00805804 	movi	r2,352
 c0019f8:	10c00035 	stwio	r3,0(r2)
}
 c0019fc:	0001883a 	nop
 c001a00:	e037883a 	mov	sp,fp
 c001a04:	df000017 	ldw	fp,0(sp)
 c001a08:	dec00104 	addi	sp,sp,4
 c001a0c:	f800283a 	ret

0c001a10 <TetrisPopulate>:
TetrisGameState TetrisPopulate(int x, int y, int boardcolor, int width, int height) {
 c001a10:	deffe104 	addi	sp,sp,-124
 c001a14:	dfc01e15 	stw	ra,120(sp)
 c001a18:	df001d15 	stw	fp,116(sp)
 c001a1c:	df001d04 	addi	fp,sp,116
 c001a20:	e13ffc15 	stw	r4,-16(fp)
 c001a24:	e17ffd15 	stw	r5,-12(fp)
 c001a28:	e1bffe15 	stw	r6,-8(fp)
 c001a2c:	e1ffff15 	stw	r7,-4(fp)
	TetrisGameState state; //new game
	state.boardColor = boardcolor; //set board color
 c001a30:	e0bfff17 	ldw	r2,-4(fp)
 c001a34:	e0bffb15 	stw	r2,-20(fp)
	//nextBlock = 0;
	nextBlock = rand() % tetrisBlockCount; //intize first block
 c001a38:	c0057780 	call	c005778 <rand>
 c001a3c:	1007883a 	mov	r3,r2
 c001a40:	008001c4 	movi	r2,7
 c001a44:	100b883a 	mov	r5,r2
 c001a48:	1809883a 	mov	r4,r3
 c001a4c:	c004b4c0 	call	c004b4c <__modsi3>
 c001a50:	d0a7a615 	stw	r2,-24936(gp)
	int color = (rand() % 15)+1;
 c001a54:	c0057780 	call	c005778 <rand>
 c001a58:	014003c4 	movi	r5,15
 c001a5c:	1009883a 	mov	r4,r2
 c001a60:	c004b4c0 	call	c004b4c <__modsi3>
 c001a64:	10800044 	addi	r2,r2,1
 c001a68:	e0bfe415 	stw	r2,-112(fp)
	if (color == boardcolor || color == nextColor) color = (rand() % 15)+1;
 c001a6c:	e0ffe417 	ldw	r3,-112(fp)
 c001a70:	e0bfff17 	ldw	r2,-4(fp)
 c001a74:	18800326 	beq	r3,r2,c001a84 <TetrisPopulate+0x74>
 c001a78:	d0a7a417 	ldw	r2,-24944(gp)
 c001a7c:	e0ffe417 	ldw	r3,-112(fp)
 c001a80:	1880061e 	bne	r3,r2,c001a9c <TetrisPopulate+0x8c>
 c001a84:	c0057780 	call	c005778 <rand>
 c001a88:	014003c4 	movi	r5,15
 c001a8c:	1009883a 	mov	r4,r2
 c001a90:	c004b4c0 	call	c004b4c <__modsi3>
 c001a94:	10800044 	addi	r2,r2,1
 c001a98:	e0bfe415 	stw	r2,-112(fp)
	nextColor = color; //initize first color
 c001a9c:	e0bfe417 	ldw	r2,-112(fp)
 c001aa0:	d0a7a415 	stw	r2,-24944(gp)
	TetrisInitialize(&state, width, height, x, y);
 c001aa4:	e0ffe704 	addi	r3,fp,-100
 c001aa8:	e0bffe17 	ldw	r2,-8(fp)
 c001aac:	d8800015 	stw	r2,0(sp)
 c001ab0:	e1fffd17 	ldw	r7,-12(fp)
 c001ab4:	e1800317 	ldw	r6,12(fp)
 c001ab8:	e1400217 	ldw	r5,8(fp)
 c001abc:	1809883a 	mov	r4,r3
 c001ac0:	c00026c0 	call	c00026c <TetrisInitialize>
	TetrisCreateBlock(&state);
 c001ac4:	e0bfe704 	addi	r2,fp,-100
 c001ac8:	1009883a 	mov	r4,r2
 c001acc:	c0006340 	call	c000634 <TetrisCreateBlock>
	VGAwriteText(x+width-(strlen("TETRIS")/2),y-2,2,0,"TETRIS");
 c001ad0:	e0fffd17 	ldw	r3,-12(fp)
 c001ad4:	e0800217 	ldw	r2,8(fp)
 c001ad8:	1885883a 	add	r2,r3,r2
 c001adc:	10ffff44 	addi	r3,r2,-3
 c001ae0:	e0bffe17 	ldw	r2,-8(fp)
 c001ae4:	113fff84 	addi	r4,r2,-2
 c001ae8:	008300b4 	movhi	r2,3074
 c001aec:	10a22304 	addi	r2,r2,-30580
 c001af0:	d8800015 	stw	r2,0(sp)
 c001af4:	000f883a 	mov	r7,zero
 c001af8:	01800084 	movi	r6,2
 c001afc:	200b883a 	mov	r5,r4
 c001b00:	1809883a 	mov	r4,r3
 c001b04:	c00299c0 	call	c00299c <VGAwriteText>
    for (int i = 0; i < 9; i++) {
 c001b08:	e03fe515 	stw	zero,-108(fp)
 c001b0c:	00001606 	br	c001b68 <TetrisPopulate+0x158>
    	for (int j = 0; j < 6; j++) {
 c001b10:	e03fe615 	stw	zero,-104(fp)
 c001b14:	00000e06 	br	c001b50 <TetrisPopulate+0x140>
    		VGADrawColorBox(x-10+i,y+10+j,boardcolor);
 c001b18:	e0bffd17 	ldw	r2,-12(fp)
 c001b1c:	10fffd84 	addi	r3,r2,-10
 c001b20:	e0bfe517 	ldw	r2,-108(fp)
 c001b24:	1889883a 	add	r4,r3,r2
 c001b28:	e0bffe17 	ldw	r2,-8(fp)
 c001b2c:	10c00284 	addi	r3,r2,10
 c001b30:	e0bfe617 	ldw	r2,-104(fp)
 c001b34:	1885883a 	add	r2,r3,r2
 c001b38:	e1bfff17 	ldw	r6,-4(fp)
 c001b3c:	100b883a 	mov	r5,r2
 c001b40:	c0029300 	call	c002930 <VGADrawColorBox>
	nextColor = color; //initize first color
	TetrisInitialize(&state, width, height, x, y);
	TetrisCreateBlock(&state);
	VGAwriteText(x+width-(strlen("TETRIS")/2),y-2,2,0,"TETRIS");
    for (int i = 0; i < 9; i++) {
    	for (int j = 0; j < 6; j++) {
 c001b44:	e0bfe617 	ldw	r2,-104(fp)
 c001b48:	10800044 	addi	r2,r2,1
 c001b4c:	e0bfe615 	stw	r2,-104(fp)
 c001b50:	e0bfe617 	ldw	r2,-104(fp)
 c001b54:	10800190 	cmplti	r2,r2,6
 c001b58:	103fef1e 	bne	r2,zero,c001b18 <__alt_data_end+0xfc001b18>
	if (color == boardcolor || color == nextColor) color = (rand() % 15)+1;
	nextColor = color; //initize first color
	TetrisInitialize(&state, width, height, x, y);
	TetrisCreateBlock(&state);
	VGAwriteText(x+width-(strlen("TETRIS")/2),y-2,2,0,"TETRIS");
    for (int i = 0; i < 9; i++) {
 c001b5c:	e0bfe517 	ldw	r2,-108(fp)
 c001b60:	10800044 	addi	r2,r2,1
 c001b64:	e0bfe515 	stw	r2,-108(fp)
 c001b68:	e0bfe517 	ldw	r2,-108(fp)
 c001b6c:	10800250 	cmplti	r2,r2,9
 c001b70:	103fe71e 	bne	r2,zero,c001b10 <__alt_data_end+0xfc001b10>
    	for (int j = 0; j < 6; j++) {
    		VGADrawColorBox(x-10+i,y+10+j,boardcolor);
    	}
    }
    VGAwriteText(x-10, y+10, 14, boardcolor, "SCORE:");
 c001b74:	e0bffd17 	ldw	r2,-12(fp)
 c001b78:	10fffd84 	addi	r3,r2,-10
 c001b7c:	e0bffe17 	ldw	r2,-8(fp)
 c001b80:	11000284 	addi	r4,r2,10
 c001b84:	008300b4 	movhi	r2,3074
 c001b88:	10a22504 	addi	r2,r2,-30572
 c001b8c:	d8800015 	stw	r2,0(sp)
 c001b90:	e1ffff17 	ldw	r7,-4(fp)
 c001b94:	01800384 	movi	r6,14
 c001b98:	200b883a 	mov	r5,r4
 c001b9c:	1809883a 	mov	r4,r3
 c001ba0:	c00299c0 	call	c00299c <VGAwriteText>
    VGAwriteText(x-10, y+12, 14, boardcolor, "0");
 c001ba4:	e0bffd17 	ldw	r2,-12(fp)
 c001ba8:	10fffd84 	addi	r3,r2,-10
 c001bac:	e0bffe17 	ldw	r2,-8(fp)
 c001bb0:	11000304 	addi	r4,r2,12
 c001bb4:	008300b4 	movhi	r2,3074
 c001bb8:	10a22704 	addi	r2,r2,-30564
 c001bbc:	d8800015 	stw	r2,0(sp)
 c001bc0:	e1ffff17 	ldw	r7,-4(fp)
 c001bc4:	01800384 	movi	r6,14
 c001bc8:	200b883a 	mov	r5,r4
 c001bcc:	1809883a 	mov	r4,r3
 c001bd0:	c00299c0 	call	c00299c <VGAwriteText>
    return state;
 c001bd4:	e0bffc17 	ldw	r2,-16(fp)
 c001bd8:	1009883a 	mov	r4,r2
 c001bdc:	e0bfe704 	addi	r2,fp,-100
 c001be0:	00c01504 	movi	r3,84
 c001be4:	180d883a 	mov	r6,r3
 c001be8:	100b883a 	mov	r5,r2
 c001bec:	c0054d80 	call	c0054d8 <memcpy>
}
 c001bf0:	e0bffc17 	ldw	r2,-16(fp)
 c001bf4:	e037883a 	mov	sp,fp
 c001bf8:	dfc00117 	ldw	ra,4(sp)
 c001bfc:	df000017 	ldw	fp,0(sp)
 c001c00:	dec00204 	addi	sp,sp,8
 c001c04:	f800283a 	ret

0c001c08 <gameMenu>:

void gameMenu() {
 c001c08:	defffb04 	addi	sp,sp,-20
 c001c0c:	dfc00415 	stw	ra,16(sp)
 c001c10:	df000315 	stw	fp,12(sp)
 c001c14:	df000304 	addi	fp,sp,12
	for (int i = 0; i < 12; i++) {
 c001c18:	e03ffe15 	stw	zero,-8(fp)
 c001c1c:	00001306 	br	c001c6c <gameMenu+0x64>
		for (int j = 0; j < 4; j++) {
 c001c20:	e03fff15 	stw	zero,-4(fp)
 c001c24:	00000b06 	br	c001c54 <gameMenu+0x4c>
    		VGADrawColorBox(33+i,24+j,1);
 c001c28:	e0bffe17 	ldw	r2,-8(fp)
 c001c2c:	10c00844 	addi	r3,r2,33
 c001c30:	e0bfff17 	ldw	r2,-4(fp)
 c001c34:	10800604 	addi	r2,r2,24
 c001c38:	01800044 	movi	r6,1
 c001c3c:	100b883a 	mov	r5,r2
 c001c40:	1809883a 	mov	r4,r3
 c001c44:	c0029300 	call	c002930 <VGADrawColorBox>
    return state;
}

void gameMenu() {
	for (int i = 0; i < 12; i++) {
		for (int j = 0; j < 4; j++) {
 c001c48:	e0bfff17 	ldw	r2,-4(fp)
 c001c4c:	10800044 	addi	r2,r2,1
 c001c50:	e0bfff15 	stw	r2,-4(fp)
 c001c54:	e0bfff17 	ldw	r2,-4(fp)
 c001c58:	10800110 	cmplti	r2,r2,4
 c001c5c:	103ff21e 	bne	r2,zero,c001c28 <__alt_data_end+0xfc001c28>
    VGAwriteText(x-10, y+12, 14, boardcolor, "0");
    return state;
}

void gameMenu() {
	for (int i = 0; i < 12; i++) {
 c001c60:	e0bffe17 	ldw	r2,-8(fp)
 c001c64:	10800044 	addi	r2,r2,1
 c001c68:	e0bffe15 	stw	r2,-8(fp)
 c001c6c:	e0bffe17 	ldw	r2,-8(fp)
 c001c70:	10800310 	cmplti	r2,r2,12
 c001c74:	103fea1e 	bne	r2,zero,c001c20 <__alt_data_end+0xfc001c20>
		for (int j = 0; j < 4; j++) {
    		VGADrawColorBox(33+i,24+j,1);
		}
	}
    VGAwriteText(34, 25, 14, 1, "1 PLAYER");
 c001c78:	008300b4 	movhi	r2,3074
 c001c7c:	10a22804 	addi	r2,r2,-30560
 c001c80:	d8800015 	stw	r2,0(sp)
 c001c84:	01c00044 	movi	r7,1
 c001c88:	01800384 	movi	r6,14
 c001c8c:	01400644 	movi	r5,25
 c001c90:	01000884 	movi	r4,34
 c001c94:	c00299c0 	call	c00299c <VGAwriteText>
    VGAwriteText(34, 27, 14, 1, "2 PLAYERS");
 c001c98:	008300b4 	movhi	r2,3074
 c001c9c:	10a22b04 	addi	r2,r2,-30548
 c001ca0:	d8800015 	stw	r2,0(sp)
 c001ca4:	01c00044 	movi	r7,1
 c001ca8:	01800384 	movi	r6,14
 c001cac:	014006c4 	movi	r5,27
 c001cb0:	01000884 	movi	r4,34
 c001cb4:	c00299c0 	call	c00299c <VGAwriteText>
}
 c001cb8:	0001883a 	nop
 c001cbc:	e037883a 	mov	sp,fp
 c001cc0:	dfc00117 	ldw	ra,4(sp)
 c001cc4:	df000017 	ldw	fp,0(sp)
 c001cc8:	dec00204 	addi	sp,sp,8
 c001ccc:	f800283a 	ret

0c001cd0 <moveMenu>:

void moveMenu() {
 c001cd0:	defffd04 	addi	sp,sp,-12
 c001cd4:	dfc00215 	stw	ra,8(sp)
 c001cd8:	df000115 	stw	fp,4(sp)
 c001cdc:	df000104 	addi	fp,sp,4
	if (arrowPos == 25) VGAwriteText(34, arrowPos, 14, 1, ">");
 c001ce0:	d0a00117 	ldw	r2,-32764(gp)
 c001ce4:	10800658 	cmpnei	r2,r2,25
 c001ce8:	10000a1e 	bne	r2,zero,c001d14 <moveMenu+0x44>
 c001cec:	d0e00117 	ldw	r3,-32764(gp)
 c001cf0:	008300b4 	movhi	r2,3074
 c001cf4:	10a22e04 	addi	r2,r2,-30536
 c001cf8:	d8800015 	stw	r2,0(sp)
 c001cfc:	01c00044 	movi	r7,1
 c001d00:	01800384 	movi	r6,14
 c001d04:	180b883a 	mov	r5,r3
 c001d08:	01000884 	movi	r4,34
 c001d0c:	c00299c0 	call	c00299c <VGAwriteText>
	else {
		VGAwriteText(34, 27, 14, 1, ">");
		arrowPos = 27;
	}
}
 c001d10:	00000a06 	br	c001d3c <moveMenu+0x6c>
}

void moveMenu() {
	if (arrowPos == 25) VGAwriteText(34, arrowPos, 14, 1, ">");
	else {
		VGAwriteText(34, 27, 14, 1, ">");
 c001d14:	008300b4 	movhi	r2,3074
 c001d18:	10a22e04 	addi	r2,r2,-30536
 c001d1c:	d8800015 	stw	r2,0(sp)
 c001d20:	01c00044 	movi	r7,1
 c001d24:	01800384 	movi	r6,14
 c001d28:	014006c4 	movi	r5,27
 c001d2c:	01000884 	movi	r4,34
 c001d30:	c00299c0 	call	c00299c <VGAwriteText>
		arrowPos = 27;
 c001d34:	008006c4 	movi	r2,27
 c001d38:	d0a00115 	stw	r2,-32764(gp)
	}
}
 c001d3c:	0001883a 	nop
 c001d40:	e037883a 	mov	sp,fp
 c001d44:	dfc00117 	ldw	ra,4(sp)
 c001d48:	df000017 	ldw	fp,0(sp)
 c001d4c:	dec00204 	addi	sp,sp,8
 c001d50:	f800283a 	ret

0c001d54 <clearMenu>:

void clearMenu() {
 c001d54:	defffc04 	addi	sp,sp,-16
 c001d58:	dfc00315 	stw	ra,12(sp)
 c001d5c:	df000215 	stw	fp,8(sp)
 c001d60:	df000204 	addi	fp,sp,8
	for (int i = 0; i < 10; i++) {
 c001d64:	e03ffe15 	stw	zero,-8(fp)
 c001d68:	00001306 	br	c001db8 <clearMenu+0x64>
		for (int j = 0; j < 4; j++) {
 c001d6c:	e03fff15 	stw	zero,-4(fp)
 c001d70:	00000b06 	br	c001da0 <clearMenu+0x4c>
    		VGADrawColorBox(32+i,24+j,0);
 c001d74:	e0bffe17 	ldw	r2,-8(fp)
 c001d78:	10c00804 	addi	r3,r2,32
 c001d7c:	e0bfff17 	ldw	r2,-4(fp)
 c001d80:	10800604 	addi	r2,r2,24
 c001d84:	000d883a 	mov	r6,zero
 c001d88:	100b883a 	mov	r5,r2
 c001d8c:	1809883a 	mov	r4,r3
 c001d90:	c0029300 	call	c002930 <VGADrawColorBox>
	}
}

void clearMenu() {
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 4; j++) {
 c001d94:	e0bfff17 	ldw	r2,-4(fp)
 c001d98:	10800044 	addi	r2,r2,1
 c001d9c:	e0bfff15 	stw	r2,-4(fp)
 c001da0:	e0bfff17 	ldw	r2,-4(fp)
 c001da4:	10800110 	cmplti	r2,r2,4
 c001da8:	103ff21e 	bne	r2,zero,c001d74 <__alt_data_end+0xfc001d74>
		arrowPos = 27;
	}
}

void clearMenu() {
	for (int i = 0; i < 10; i++) {
 c001dac:	e0bffe17 	ldw	r2,-8(fp)
 c001db0:	10800044 	addi	r2,r2,1
 c001db4:	e0bffe15 	stw	r2,-8(fp)
 c001db8:	e0bffe17 	ldw	r2,-8(fp)
 c001dbc:	10800290 	cmplti	r2,r2,10
 c001dc0:	103fea1e 	bne	r2,zero,c001d6c <__alt_data_end+0xfc001d6c>
		for (int j = 0; j < 4; j++) {
    		VGADrawColorBox(32+i,24+j,0);
		}
	}
}
 c001dc4:	0001883a 	nop
 c001dc8:	e037883a 	mov	sp,fp
 c001dcc:	dfc00117 	ldw	ra,4(sp)
 c001dd0:	df000017 	ldw	fp,0(sp)
 c001dd4:	dec00204 	addi	sp,sp,8
 c001dd8:	f800283a 	ret

0c001ddc <keyInput>:

void keyInput(int x, int y, int boardcolor, int width, int height) {
 c001ddc:	deffdc04 	addi	sp,sp,-144
 c001de0:	dfc02315 	stw	ra,140(sp)
 c001de4:	df002215 	stw	fp,136(sp)
 c001de8:	df002204 	addi	fp,sp,136
 c001dec:	e13ffc15 	stw	r4,-16(fp)
 c001df0:	e17ffd15 	stw	r5,-12(fp)
 c001df4:	e1bffe15 	stw	r6,-8(fp)
 c001df8:	e1ffff15 	stw	r7,-4(fp)
	srand(time(NULL));
 c001dfc:	0009883a 	mov	r4,zero
 c001e00:	c007c480 	call	c007c48 <time>
 c001e04:	1009883a 	mov	r4,r2
 c001e08:	c0057600 	call	c005760 <srand>
	gameMenu();
 c001e0c:	c001c080 	call	c001c08 <gameMenu>
	TetrisGameState state = TetrisPopulate(x, y, boardcolor,width, height);
 c001e10:	e0ffe304 	addi	r3,fp,-116
 c001e14:	e0800217 	ldw	r2,8(fp)
 c001e18:	d8800115 	stw	r2,4(sp)
 c001e1c:	e0bfff17 	ldw	r2,-4(fp)
 c001e20:	d8800015 	stw	r2,0(sp)
 c001e24:	e1fffe17 	ldw	r7,-8(fp)
 c001e28:	e1bffd17 	ldw	r6,-12(fp)
 c001e2c:	e17ffc17 	ldw	r5,-16(fp)
 c001e30:	1809883a 	mov	r4,r3
 c001e34:	c001a100 	call	c001a10 <TetrisPopulate>

	BYTE rcode;
	BOOT_MOUSE_REPORT buf;		//USB mouse report
	BOOT_KBD_REPORT kbdbuf;

	BYTE runningdebugflag = 0;//flag to dump out a bunch of information when we first get to USB_STATE_RUNNING
 c001e38:	e03fe005 	stb	zero,-128(fp)
	BYTE errorflag = 0; //flag once we get an error device so we don't keep dumping out state info
 c001e3c:	e03fe045 	stb	zero,-127(fp)
	BYTE device;
	WORD keycode;

	printf("initializing MAX3421E...\n");
 c001e40:	010300b4 	movhi	r4,3074
 c001e44:	21222f04 	addi	r4,r4,-30532
 c001e48:	c00574c0 	call	c00574c <puts>
	MAX3421E_init();
 c001e4c:	c003a380 	call	c003a38 <MAX3421E_init>
	printf("initializing USB...\n");
 c001e50:	010300b4 	movhi	r4,3074
 c001e54:	21223604 	addi	r4,r4,-30504
 c001e58:	c00574c0 	call	c00574c <puts>
	USB_init();
 c001e5c:	c0041e40 	call	c0041e4 <USB_init>

	long counter;
	while (1) {
		srand(time(NULL));
 c001e60:	0009883a 	mov	r4,zero
 c001e64:	c007c480 	call	c007c48 <time>
 c001e68:	1009883a 	mov	r4,r2
 c001e6c:	c0057600 	call	c005760 <srand>
		//printf(".");
		MAX3421E_Task();
 c001e70:	c003acc0 	call	c003acc <MAX3421E_Task>
		USB_Task();
 c001e74:	c00427c0 	call	c00427c <USB_Task>
		//usleep (500000);
		if (GetUsbTaskState() == USB_STATE_RUNNING) {
 c001e78:	c0049ec0 	call	c0049ec <GetUsbTaskState>
 c001e7c:	10803fcc 	andi	r2,r2,255
 c001e80:	10801018 	cmpnei	r2,r2,64
 c001e84:	1000c71e 	bne	r2,zero,c0021a4 <keyInput+0x3c8>
			if (!runningdebugflag) {
 c001e88:	e0bfe003 	ldbu	r2,-128(fp)
 c001e8c:	1000071e 	bne	r2,zero,c001eac <keyInput+0xd0>
				runningdebugflag = 1;
 c001e90:	00800044 	movi	r2,1
 c001e94:	e0bfe005 	stb	r2,-128(fp)
				setLED(9);
 c001e98:	01000244 	movi	r4,9
 c001e9c:	c0017000 	call	c001700 <setLED>
				device = GetDriverandReport();
 c001ea0:	c0015100 	call	c001510 <GetDriverandReport>
 c001ea4:	e0bfe085 	stb	r2,-126(fp)
 c001ea8:	003fed06 	br	c001e60 <__alt_data_end+0xfc001e60>
			} else if (device == 1) {
 c001eac:	e0bfe083 	ldbu	r2,-126(fp)
 c001eb0:	10800058 	cmpnei	r2,r2,1
 c001eb4:	103fea1e 	bne	r2,zero,c001e60 <__alt_data_end+0xfc001e60>
				//run keyboard debug polling
				rcode = kbdPoll(&kbdbuf);
 c001eb8:	e0bffa04 	addi	r2,fp,-24
 c001ebc:	1009883a 	mov	r4,r2
 c001ec0:	c00332c0 	call	c00332c <kbdPoll>
 c001ec4:	e0bfe205 	stb	r2,-120(fp)
				if (rcode == hrNAK) {
 c001ec8:	e0bfe203 	ldbu	r2,-120(fp)
 c001ecc:	10800118 	cmpnei	r2,r2,4
 c001ed0:	1000d426 	beq	r2,zero,c002224 <keyInput+0x448>
					continue; //NAK means no new data
				} else if (rcode) {
 c001ed4:	e0bfe203 	ldbu	r2,-120(fp)
 c001ed8:	10000926 	beq	r2,zero,c001f00 <keyInput+0x124>
					printf("Rcode: ");
 c001edc:	010300b4 	movhi	r4,3074
 c001ee0:	21223b04 	addi	r4,r4,-30484
 c001ee4:	c0056500 	call	c005650 <printf>
					printf("%x \n", rcode);
 c001ee8:	e0bfe203 	ldbu	r2,-120(fp)
 c001eec:	100b883a 	mov	r5,r2
 c001ef0:	010300b4 	movhi	r4,3074
 c001ef4:	21221104 	addi	r4,r4,-30652
 c001ef8:	c0056500 	call	c005650 <printf>
					continue;
 c001efc:	0000ca06 	br	c002228 <keyInput+0x44c>
				}
			  if(!state.dead) {
 c001f00:	e0bfe617 	ldw	r2,-104(fp)
 c001f04:	1000101e 	bne	r2,zero,c001f48 <keyInput+0x16c>

				  if (timer != 0 && !state.pause) {
 c001f08:	d0a00217 	ldw	r2,-32760(gp)
 c001f0c:	10000826 	beq	r2,zero,c001f30 <keyInput+0x154>
 c001f10:	e0bff417 	ldw	r2,-48(fp)
 c001f14:	1000061e 	bne	r2,zero,c001f30 <keyInput+0x154>
						TetrisFallBlocks(&state);
 c001f18:	e0bfe304 	addi	r2,fp,-116
 c001f1c:	1009883a 	mov	r4,r2
 c001f20:	c000df00 	call	c000df0 <TetrisFallBlocks>
						//printf("%ul \n",time(NULL));
						reset = 1;
 c001f24:	00800044 	movi	r2,1
 c001f28:	d0a00315 	stw	r2,-32756(gp)
						reset = 0;
 c001f2c:	d0200315 	stw	zero,-32756(gp)
				  }
					TetrisPrintBoard(&state);
 c001f30:	e0bfe304 	addi	r2,fp,-116
 c001f34:	1009883a 	mov	r4,r2
 c001f38:	c0011d00 	call	c0011d0 <TetrisPrintBoard>
					TetrisCheckLineComplete(&state);
 c001f3c:	e0bfe304 	addi	r2,fp,-116
 c001f40:	1009883a 	mov	r4,r2
 c001f44:	c000f880 	call	c000f88 <TetrisCheckLineComplete>
				}
				//printf("a");
				for (int i = 0; i < 6; i++) {
 c001f48:	e03fe115 	stw	zero,-124(fp)
 c001f4c:	00008106 	br	c002154 <keyInput+0x378>
					if (kbdbuf.keycode[i] != 0) {
 c001f50:	e0fffa84 	addi	r3,fp,-22
 c001f54:	e0bfe117 	ldw	r2,-124(fp)
 c001f58:	1885883a 	add	r2,r3,r2
 c001f5c:	10800003 	ldbu	r2,0(r2)
 c001f60:	10803fcc 	andi	r2,r2,255
 c001f64:	10007826 	beq	r2,zero,c002148 <keyInput+0x36c>
						//printf("%x - ", kbdbuf.keycode[i]);
						if (kbdbuf.keycode[i] == 26 || kbdbuf.keycode[i] == 82) { //W
 c001f68:	e0fffa84 	addi	r3,fp,-22
 c001f6c:	e0bfe117 	ldw	r2,-124(fp)
 c001f70:	1885883a 	add	r2,r3,r2
 c001f74:	10800003 	ldbu	r2,0(r2)
 c001f78:	10803fcc 	andi	r2,r2,255
 c001f7c:	108006a0 	cmpeqi	r2,r2,26
 c001f80:	1000071e 	bne	r2,zero,c001fa0 <keyInput+0x1c4>
 c001f84:	e0fffa84 	addi	r3,fp,-22
 c001f88:	e0bfe117 	ldw	r2,-124(fp)
 c001f8c:	1885883a 	add	r2,r3,r2
 c001f90:	10800003 	ldbu	r2,0(r2)
 c001f94:	10803fcc 	andi	r2,r2,255
 c001f98:	10801498 	cmpnei	r2,r2,82
 c001f9c:	1000041e 	bne	r2,zero,c001fb0 <keyInput+0x1d4>
							//printf("W - ");
							TetrisRotateBlock(&state);
 c001fa0:	e0bfe304 	addi	r2,fp,-116
 c001fa4:	1009883a 	mov	r4,r2
 c001fa8:	c000b300 	call	c000b30 <TetrisRotateBlock>
 c001fac:	00006606 	br	c002148 <keyInput+0x36c>
						} else if (kbdbuf.keycode[i] == 4 || kbdbuf.keycode[i] == 80) { //A
 c001fb0:	e0fffa84 	addi	r3,fp,-22
 c001fb4:	e0bfe117 	ldw	r2,-124(fp)
 c001fb8:	1885883a 	add	r2,r3,r2
 c001fbc:	10800003 	ldbu	r2,0(r2)
 c001fc0:	10803fcc 	andi	r2,r2,255
 c001fc4:	10800120 	cmpeqi	r2,r2,4
 c001fc8:	1000071e 	bne	r2,zero,c001fe8 <keyInput+0x20c>
 c001fcc:	e0fffa84 	addi	r3,fp,-22
 c001fd0:	e0bfe117 	ldw	r2,-124(fp)
 c001fd4:	1885883a 	add	r2,r3,r2
 c001fd8:	10800003 	ldbu	r2,0(r2)
 c001fdc:	10803fcc 	andi	r2,r2,255
 c001fe0:	10801418 	cmpnei	r2,r2,80
 c001fe4:	1000041e 	bne	r2,zero,c001ff8 <keyInput+0x21c>
							//printf("A - ");
							TetrisInputLeft(&state);
 c001fe8:	e0bfe304 	addi	r2,fp,-116
 c001fec:	1009883a 	mov	r4,r2
 c001ff0:	c0011100 	call	c001110 <TetrisInputLeft>
 c001ff4:	00005406 	br	c002148 <keyInput+0x36c>
						} else if (kbdbuf.keycode[i] == 22 || kbdbuf.keycode[i] == 81) { //S
 c001ff8:	e0fffa84 	addi	r3,fp,-22
 c001ffc:	e0bfe117 	ldw	r2,-124(fp)
 c002000:	1885883a 	add	r2,r3,r2
 c002004:	10800003 	ldbu	r2,0(r2)
 c002008:	10803fcc 	andi	r2,r2,255
 c00200c:	108005a0 	cmpeqi	r2,r2,22
 c002010:	1000071e 	bne	r2,zero,c002030 <keyInput+0x254>
 c002014:	e0fffa84 	addi	r3,fp,-22
 c002018:	e0bfe117 	ldw	r2,-124(fp)
 c00201c:	1885883a 	add	r2,r3,r2
 c002020:	10800003 	ldbu	r2,0(r2)
 c002024:	10803fcc 	andi	r2,r2,255
 c002028:	10801458 	cmpnei	r2,r2,81
 c00202c:	1000041e 	bne	r2,zero,c002040 <keyInput+0x264>
							//printf("S - ");
							TetrisFallBlocks(&state);
 c002030:	e0bfe304 	addi	r2,fp,-116
 c002034:	1009883a 	mov	r4,r2
 c002038:	c000df00 	call	c000df0 <TetrisFallBlocks>
 c00203c:	00004206 	br	c002148 <keyInput+0x36c>
						} else if (kbdbuf.keycode[i] == 7 || kbdbuf.keycode[i] == 79) { //D
 c002040:	e0fffa84 	addi	r3,fp,-22
 c002044:	e0bfe117 	ldw	r2,-124(fp)
 c002048:	1885883a 	add	r2,r3,r2
 c00204c:	10800003 	ldbu	r2,0(r2)
 c002050:	10803fcc 	andi	r2,r2,255
 c002054:	108001e0 	cmpeqi	r2,r2,7
 c002058:	1000071e 	bne	r2,zero,c002078 <keyInput+0x29c>
 c00205c:	e0fffa84 	addi	r3,fp,-22
 c002060:	e0bfe117 	ldw	r2,-124(fp)
 c002064:	1885883a 	add	r2,r3,r2
 c002068:	10800003 	ldbu	r2,0(r2)
 c00206c:	10803fcc 	andi	r2,r2,255
 c002070:	108013d8 	cmpnei	r2,r2,79
 c002074:	1000041e 	bne	r2,zero,c002088 <keyInput+0x2ac>
							//printf("D - ");
							TetrisInputRight(&state);
 c002078:	e0bfe304 	addi	r2,fp,-116
 c00207c:	1009883a 	mov	r4,r2
 c002080:	c0011700 	call	c001170 <TetrisInputRight>
 c002084:	00003006 	br	c002148 <keyInput+0x36c>
						} else if (kbdbuf.keycode[i] == 41) { //esc
 c002088:	e0fffa84 	addi	r3,fp,-22
 c00208c:	e0bfe117 	ldw	r2,-124(fp)
 c002090:	1885883a 	add	r2,r3,r2
 c002094:	10800003 	ldbu	r2,0(r2)
 c002098:	10803fcc 	andi	r2,r2,255
 c00209c:	10800a58 	cmpnei	r2,r2,41
 c0020a0:	1000041e 	bne	r2,zero,c0020b4 <keyInput+0x2d8>
							TetrisPause(&state);
 c0020a4:	e0bfe304 	addi	r2,fp,-116
 c0020a8:	1009883a 	mov	r4,r2
 c0020ac:	c0014d40 	call	c0014d4 <TetrisPause>
 c0020b0:	00002506 	br	c002148 <keyInput+0x36c>
							//printf("pause game \n");
						} else if (kbdbuf.keycode[i] == 40) { //enter
 c0020b4:	e0fffa84 	addi	r3,fp,-22
 c0020b8:	e0bfe117 	ldw	r2,-124(fp)
 c0020bc:	1885883a 	add	r2,r3,r2
 c0020c0:	10800003 	ldbu	r2,0(r2)
 c0020c4:	10803fcc 	andi	r2,r2,255
 c0020c8:	10800a18 	cmpnei	r2,r2,40
 c0020cc:	10001e1e 	bne	r2,zero,c002148 <keyInput+0x36c>
							if (state.dead) {
 c0020d0:	e0bfe617 	ldw	r2,-104(fp)
 c0020d4:	10001626 	beq	r2,zero,c002130 <keyInput+0x354>
								TetrisCleanup(&state);
 c0020d8:	e0bfe304 	addi	r2,fp,-116
 c0020dc:	1009883a 	mov	r4,r2
 c0020e0:	c0003d40 	call	c0003d4 <TetrisCleanup>
								state.dead = 0;
 c0020e4:	e03fe615 	stw	zero,-104(fp)
								VGAwriteText(x-(strlen("GAME OVER")),(y+8+(height)),0,0,"GAME OVER");
 c0020e8:	e0bffc17 	ldw	r2,-16(fp)
 c0020ec:	113ffdc4 	addi	r4,r2,-9
 c0020f0:	e0bffd17 	ldw	r2,-12(fp)
 c0020f4:	10c00204 	addi	r3,r2,8
 c0020f8:	e0800217 	ldw	r2,8(fp)
 c0020fc:	1887883a 	add	r3,r3,r2
 c002100:	008300b4 	movhi	r2,3074
 c002104:	10a1db04 	addi	r2,r2,-30868
 c002108:	d8800015 	stw	r2,0(sp)
 c00210c:	000f883a 	mov	r7,zero
 c002110:	000d883a 	mov	r6,zero
 c002114:	180b883a 	mov	r5,r3
 c002118:	c00299c0 	call	c00299c <VGAwriteText>
								printf("(%d,%d) \n",x,y );
 c00211c:	e1bffd17 	ldw	r6,-12(fp)
 c002120:	e17ffc17 	ldw	r5,-16(fp)
 c002124:	010300b4 	movhi	r4,3074
 c002128:	21223d04 	addi	r4,r4,-30476
 c00212c:	c0056500 	call	c005650 <printf>
							}
							if (players == 0) {
 c002130:	d0a7a317 	ldw	r2,-24948(gp)
 c002134:	1000041e 	bne	r2,zero,c002148 <keyInput+0x36c>
								if (arrowPos == 25) {
 c002138:	d0a00117 	ldw	r2,-32764(gp)
 c00213c:	10800658 	cmpnei	r2,r2,25
 c002140:	1000011e 	bne	r2,zero,c002148 <keyInput+0x36c>
									//TetrisGameState state = TetrisPopulate(x, y, boardcolor,width, height);
									clearMenu();
 c002144:	c001d540 	call	c001d54 <clearMenu>
				  }
					TetrisPrintBoard(&state);
					TetrisCheckLineComplete(&state);
				}
				//printf("a");
				for (int i = 0; i < 6; i++) {
 c002148:	e0bfe117 	ldw	r2,-124(fp)
 c00214c:	10800044 	addi	r2,r2,1
 c002150:	e0bfe115 	stw	r2,-124(fp)
 c002154:	e0bfe117 	ldw	r2,-124(fp)
 c002158:	10800190 	cmplti	r2,r2,6
 c00215c:	103f7c1e 	bne	r2,zero,c001f50 <__alt_data_end+0xfc001f50>
								}
							}
						}
					}
				}
				setKeycode(kbdbuf.keycode[0]);
 c002160:	e0bffa83 	ldbu	r2,-22(fp)
 c002164:	10803fcc 	andi	r2,r2,255
 c002168:	1009883a 	mov	r4,r2
 c00216c:	c0019dc0 	call	c0019dc <setKeycode>
				printSignedHex0(kbdbuf.keycode[0]);
 c002170:	e0bffa83 	ldbu	r2,-22(fp)
 c002174:	10803fcc 	andi	r2,r2,255
 c002178:	1080201c 	xori	r2,r2,128
 c00217c:	10bfe004 	addi	r2,r2,-128
 c002180:	1009883a 	mov	r4,r2
 c002184:	c00178c0 	call	c00178c <printSignedHex0>
				printSignedHex1(kbdbuf.keycode[1]);
 c002188:	e0bffac3 	ldbu	r2,-21(fp)
 c00218c:	10803fcc 	andi	r2,r2,255
 c002190:	1080201c 	xori	r2,r2,128
 c002194:	10bfe004 	addi	r2,r2,-128
 c002198:	1009883a 	mov	r4,r2
 c00219c:	c0018a40 	call	c0018a4 <printSignedHex1>
 c0021a0:	003f2f06 	br	c001e60 <__alt_data_end+0xfc001e60>
			}
		} else if (GetUsbTaskState() == USB_STATE_ERROR) {
 c0021a4:	c0049ec0 	call	c0049ec <GetUsbTaskState>
 c0021a8:	10803fcc 	andi	r2,r2,255
 c0021ac:	10803fd8 	cmpnei	r2,r2,255
 c0021b0:	10000a1e 	bne	r2,zero,c0021dc <keyInput+0x400>
			if (!errorflag) {
 c0021b4:	e0bfe043 	ldbu	r2,-127(fp)
 c0021b8:	103f291e 	bne	r2,zero,c001e60 <__alt_data_end+0xfc001e60>
				errorflag = 1;
 c0021bc:	00800044 	movi	r2,1
 c0021c0:	e0bfe045 	stb	r2,-127(fp)
				clearLED(9);
 c0021c4:	01000244 	movi	r4,9
 c0021c8:	c0017440 	call	c001744 <clearLED>
				printf("USB Error State\n");
 c0021cc:	010300b4 	movhi	r4,3074
 c0021d0:	21224004 	addi	r4,r4,-30464
 c0021d4:	c00574c0 	call	c00574c <puts>
 c0021d8:	003f2106 	br	c001e60 <__alt_data_end+0xfc001e60>
				//print out string descriptor here
			}
		} else { //not in USB running state

			printf("USB task state: ");
 c0021dc:	010300b4 	movhi	r4,3074
 c0021e0:	21224404 	addi	r4,r4,-30448
 c0021e4:	c0056500 	call	c005650 <printf>
			printf("%x\n", GetUsbTaskState());
 c0021e8:	c0049ec0 	call	c0049ec <GetUsbTaskState>
 c0021ec:	10803fcc 	andi	r2,r2,255
 c0021f0:	100b883a 	mov	r5,r2
 c0021f4:	010300b4 	movhi	r4,3074
 c0021f8:	21224904 	addi	r4,r4,-30428
 c0021fc:	c0056500 	call	c005650 <printf>
			if (runningdebugflag) {	//previously running, reset USB hardware just to clear out any funky state, HS/FS etc
 c002200:	e0bfe003 	ldbu	r2,-128(fp)
 c002204:	10000326 	beq	r2,zero,c002214 <keyInput+0x438>
				runningdebugflag = 0;
 c002208:	e03fe005 	stb	zero,-128(fp)
				MAX3421E_init();
 c00220c:	c003a380 	call	c003a38 <MAX3421E_init>
				USB_init();
 c002210:	c0041e40 	call	c0041e4 <USB_init>
			}
			errorflag = 0;
 c002214:	e03fe045 	stb	zero,-127(fp)
			clearLED(9);
 c002218:	01000244 	movi	r4,9
 c00221c:	c0017440 	call	c001744 <clearLED>
 c002220:	003f0f06 	br	c001e60 <__alt_data_end+0xfc001e60>
				device = GetDriverandReport();
			} else if (device == 1) {
				//run keyboard debug polling
				rcode = kbdPoll(&kbdbuf);
				if (rcode == hrNAK) {
					continue; //NAK means no new data
 c002224:	0001883a 	nop
				USB_init();
			}
			errorflag = 0;
			clearLED(9);
		}
	}
 c002228:	003f0d06 	br	c001e60 <__alt_data_end+0xfc001e60>

0c00222c <main>:

#define COLUMNS 80
#define ROWS 60
#include "text_mode_vga_color.h"

int main() {
 c00222c:	defffb04 	addi	sp,sp,-20
 c002230:	dfc00415 	stw	ra,16(sp)
 c002234:	df000315 	stw	fp,12(sp)
 c002238:	df000304 	addi	fp,sp,12
	screenVGAinitializer();
 c00223c:	c00257c0 	call	c00257c <screenVGAinitializer>
	for (int i = 0; i < 80; i++) {
 c002240:	e03ffe15 	stw	zero,-8(fp)
 c002244:	00000b06 	br	c002274 <main+0x48>
		VGADrawColorBox(i,0,15);
 c002248:	018003c4 	movi	r6,15
 c00224c:	000b883a 	mov	r5,zero
 c002250:	e13ffe17 	ldw	r4,-8(fp)
 c002254:	c0029300 	call	c002930 <VGADrawColorBox>
		VGADrawColorBox(i,59,15);
 c002258:	018003c4 	movi	r6,15
 c00225c:	01400ec4 	movi	r5,59
 c002260:	e13ffe17 	ldw	r4,-8(fp)
 c002264:	c0029300 	call	c002930 <VGADrawColorBox>
#define ROWS 60
#include "text_mode_vga_color.h"

int main() {
	screenVGAinitializer();
	for (int i = 0; i < 80; i++) {
 c002268:	e0bffe17 	ldw	r2,-8(fp)
 c00226c:	10800044 	addi	r2,r2,1
 c002270:	e0bffe15 	stw	r2,-8(fp)
 c002274:	e0bffe17 	ldw	r2,-8(fp)
 c002278:	10801410 	cmplti	r2,r2,80
 c00227c:	103ff21e 	bne	r2,zero,c002248 <__alt_data_end+0xfc002248>
		VGADrawColorBox(i,0,15);
		VGADrawColorBox(i,59,15);
	}
	for (int i = 0; i < 60; i++) {
 c002280:	e03fff15 	stw	zero,-4(fp)
 c002284:	00000b06 	br	c0022b4 <main+0x88>
		VGADrawColorBox(0,i,15);
 c002288:	018003c4 	movi	r6,15
 c00228c:	e17fff17 	ldw	r5,-4(fp)
 c002290:	0009883a 	mov	r4,zero
 c002294:	c0029300 	call	c002930 <VGADrawColorBox>
		VGADrawColorBox(79,i,15);
 c002298:	018003c4 	movi	r6,15
 c00229c:	e17fff17 	ldw	r5,-4(fp)
 c0022a0:	010013c4 	movi	r4,79
 c0022a4:	c0029300 	call	c002930 <VGADrawColorBox>
	screenVGAinitializer();
	for (int i = 0; i < 80; i++) {
		VGADrawColorBox(i,0,15);
		VGADrawColorBox(i,59,15);
	}
	for (int i = 0; i < 60; i++) {
 c0022a8:	e0bfff17 	ldw	r2,-4(fp)
 c0022ac:	10800044 	addi	r2,r2,1
 c0022b0:	e0bfff15 	stw	r2,-4(fp)
 c0022b4:	e0bfff17 	ldw	r2,-4(fp)
 c0022b8:	10800f10 	cmplti	r2,r2,60
 c0022bc:	103ff21e 	bne	r2,zero,c002288 <__alt_data_end+0xfc002288>
		VGADrawColorBox(0,i,15);
		VGADrawColorBox(79,i,15);
	}


	keyInput(12,4,1,10,20);
 c0022c0:	00800504 	movi	r2,20
 c0022c4:	d8800015 	stw	r2,0(sp)
 c0022c8:	01c00284 	movi	r7,10
 c0022cc:	01800044 	movi	r6,1
 c0022d0:	01400104 	movi	r5,4
 c0022d4:	01000304 	movi	r4,12
 c0022d8:	c001ddc0 	call	c001ddc <keyInput>
	return 1;
 c0022dc:	00800044 	movi	r2,1
}
 c0022e0:	e037883a 	mov	sp,fp
 c0022e4:	dfc00117 	ldw	ra,4(sp)
 c0022e8:	df000017 	ldw	fp,0(sp)
 c0022ec:	dec00204 	addi	sp,sp,8
 c0022f0:	f800283a 	ret

0c0022f4 <textVGAColorClr>:
#include <string.h>
#include <alt_types.h>
#include "text_mode_vga_color.h"

void textVGAColorClr()
{
 c0022f4:	defffe04 	addi	sp,sp,-8
 c0022f8:	df000115 	stw	fp,4(sp)
 c0022fc:	df000104 	addi	fp,sp,4
	for (int i = 0; i<(ROWS*COLUMNS) * 2; i++)
 c002300:	e03fff15 	stw	zero,-4(fp)
 c002304:	00000706 	br	c002324 <textVGAColorClr+0x30>
	{
		vga_ctrl->VRAM[i] = 0x00;
 c002308:	d0e00617 	ldw	r3,-32744(gp)
 c00230c:	e0bfff17 	ldw	r2,-4(fp)
 c002310:	1885883a 	add	r2,r3,r2
 c002314:	10000005 	stb	zero,0(r2)
#include <alt_types.h>
#include "text_mode_vga_color.h"

void textVGAColorClr()
{
	for (int i = 0; i<(ROWS*COLUMNS) * 2; i++)
 c002318:	e0bfff17 	ldw	r2,-4(fp)
 c00231c:	10800044 	addi	r2,r2,1
 c002320:	e0bfff15 	stw	r2,-4(fp)
 c002324:	e0bfff17 	ldw	r2,-4(fp)
 c002328:	10896010 	cmplti	r2,r2,9600
 c00232c:	103ff61e 	bne	r2,zero,c002308 <__alt_data_end+0xfc002308>
	{
		vga_ctrl->VRAM[i] = 0x00;
	}
}
 c002330:	0001883a 	nop
 c002334:	e037883a 	mov	sp,fp
 c002338:	df000017 	ldw	fp,0(sp)
 c00233c:	dec00104 	addi	sp,sp,4
 c002340:	f800283a 	ret

0c002344 <textVGADrawColorText>:

void textVGADrawColorText(char* str, int x, int y, alt_u8 background, alt_u8 foreground)
{
 c002344:	defff704 	addi	sp,sp,-36
 c002348:	dfc00815 	stw	ra,32(sp)
 c00234c:	df000715 	stw	fp,28(sp)
 c002350:	dc000615 	stw	r16,24(sp)
 c002354:	df000704 	addi	fp,sp,28
 c002358:	e13ffa15 	stw	r4,-24(fp)
 c00235c:	e17ffb15 	stw	r5,-20(fp)
 c002360:	e1bffc15 	stw	r6,-16(fp)
 c002364:	3807883a 	mov	r3,r7
 c002368:	e0800217 	ldw	r2,8(fp)
 c00236c:	e0fffd05 	stb	r3,-12(fp)
 c002370:	e0bffe05 	stb	r2,-8(fp)
	int i = 0;
 c002374:	e03ff915 	stw	zero,-28(fp)
	while (str[i]!=0)
 c002378:	00002706 	br	c002418 <textVGADrawColorText+0xd4>
	{
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2] = foreground << 4 | background;
 c00237c:	d4200617 	ldw	r16,-32744(gp)
 c002380:	01401404 	movi	r5,80
 c002384:	e13ffc17 	ldw	r4,-16(fp)
 c002388:	c004c7c0 	call	c004c7c <__mulsi3>
 c00238c:	1007883a 	mov	r3,r2
 c002390:	e0bffb17 	ldw	r2,-20(fp)
 c002394:	1887883a 	add	r3,r3,r2
 c002398:	e0bff917 	ldw	r2,-28(fp)
 c00239c:	1885883a 	add	r2,r3,r2
 c0023a0:	1085883a 	add	r2,r2,r2
 c0023a4:	1009883a 	mov	r4,r2
 c0023a8:	e0bffe03 	ldbu	r2,-8(fp)
 c0023ac:	1004913a 	slli	r2,r2,4
 c0023b0:	1007883a 	mov	r3,r2
 c0023b4:	e0bffd03 	ldbu	r2,-12(fp)
 c0023b8:	1884b03a 	or	r2,r3,r2
 c0023bc:	1007883a 	mov	r3,r2
 c0023c0:	8105883a 	add	r2,r16,r4
 c0023c4:	10c00005 	stb	r3,0(r2)
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2 + 1] = str[i];
 c0023c8:	d4200617 	ldw	r16,-32744(gp)
 c0023cc:	01401404 	movi	r5,80
 c0023d0:	e13ffc17 	ldw	r4,-16(fp)
 c0023d4:	c004c7c0 	call	c004c7c <__mulsi3>
 c0023d8:	1007883a 	mov	r3,r2
 c0023dc:	e0bffb17 	ldw	r2,-20(fp)
 c0023e0:	1887883a 	add	r3,r3,r2
 c0023e4:	e0bff917 	ldw	r2,-28(fp)
 c0023e8:	1885883a 	add	r2,r3,r2
 c0023ec:	1085883a 	add	r2,r2,r2
 c0023f0:	10800044 	addi	r2,r2,1
 c0023f4:	e0fff917 	ldw	r3,-28(fp)
 c0023f8:	e13ffa17 	ldw	r4,-24(fp)
 c0023fc:	20c7883a 	add	r3,r4,r3
 c002400:	18c00003 	ldbu	r3,0(r3)
 c002404:	8085883a 	add	r2,r16,r2
 c002408:	10c00005 	stb	r3,0(r2)
		i++;
 c00240c:	e0bff917 	ldw	r2,-28(fp)
 c002410:	10800044 	addi	r2,r2,1
 c002414:	e0bff915 	stw	r2,-28(fp)
}

void textVGADrawColorText(char* str, int x, int y, alt_u8 background, alt_u8 foreground)
{
	int i = 0;
	while (str[i]!=0)
 c002418:	e0bff917 	ldw	r2,-28(fp)
 c00241c:	e0fffa17 	ldw	r3,-24(fp)
 c002420:	1885883a 	add	r2,r3,r2
 c002424:	10800003 	ldbu	r2,0(r2)
 c002428:	10803fcc 	andi	r2,r2,255
 c00242c:	1080201c 	xori	r2,r2,128
 c002430:	10bfe004 	addi	r2,r2,-128
 c002434:	103fd11e 	bne	r2,zero,c00237c <__alt_data_end+0xfc00237c>
	{
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2 + 1] = str[i];
		i++;
	}
}
 c002438:	0001883a 	nop
 c00243c:	e6ffff04 	addi	sp,fp,-4
 c002440:	dfc00217 	ldw	ra,8(sp)
 c002444:	df000117 	ldw	fp,4(sp)
 c002448:	dc000017 	ldw	r16,0(sp)
 c00244c:	dec00304 	addi	sp,sp,12
 c002450:	f800283a 	ret

0c002454 <setColorPalette>:

void setColorPalette (alt_u8 color, alt_u8 red, alt_u8 green, alt_u8 blue)
{
 c002454:	defff904 	addi	sp,sp,-28
 c002458:	df000615 	stw	fp,24(sp)
 c00245c:	df000604 	addi	fp,sp,24
 c002460:	2011883a 	mov	r8,r4
 c002464:	2809883a 	mov	r4,r5
 c002468:	3007883a 	mov	r3,r6
 c00246c:	3805883a 	mov	r2,r7
 c002470:	e23ffc05 	stb	r8,-16(fp)
 c002474:	e13ffd05 	stb	r4,-12(fp)
 c002478:	e0fffe05 	stb	r3,-8(fp)
 c00247c:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 shifts;
	alt_u32 original;
	original = vga_ctrl->palette[color/2];
 c002480:	d0e00617 	ldw	r3,-32744(gp)
 c002484:	e0bffc03 	ldbu	r2,-16(fp)
 c002488:	1004d07a 	srli	r2,r2,1
 c00248c:	10803fcc 	andi	r2,r2,255
 c002490:	10830004 	addi	r2,r2,3072
 c002494:	1085883a 	add	r2,r2,r2
 c002498:	1085883a 	add	r2,r2,r2
 c00249c:	1885883a 	add	r2,r3,r2
 c0024a0:	10800017 	ldw	r2,0(r2)
 c0024a4:	e0bffb15 	stw	r2,-20(fp)
	shifts = red;
 c0024a8:	e0bffd03 	ldbu	r2,-12(fp)
 c0024ac:	e0bffa15 	stw	r2,-24(fp)
	shifts = shifts << 4;
 c0024b0:	e0bffa17 	ldw	r2,-24(fp)
 c0024b4:	1004913a 	slli	r2,r2,4
 c0024b8:	e0bffa15 	stw	r2,-24(fp)
	shifts = shifts | green;
 c0024bc:	e0bffe03 	ldbu	r2,-8(fp)
 c0024c0:	e0fffa17 	ldw	r3,-24(fp)
 c0024c4:	1884b03a 	or	r2,r3,r2
 c0024c8:	e0bffa15 	stw	r2,-24(fp)
	shifts = shifts << 4;
 c0024cc:	e0bffa17 	ldw	r2,-24(fp)
 c0024d0:	1004913a 	slli	r2,r2,4
 c0024d4:	e0bffa15 	stw	r2,-24(fp)
	shifts = shifts | blue;
 c0024d8:	e0bfff03 	ldbu	r2,-4(fp)
 c0024dc:	e0fffa17 	ldw	r3,-24(fp)
 c0024e0:	1884b03a 	or	r2,r3,r2
 c0024e4:	e0bffa15 	stw	r2,-24(fp)
	if (color %2 ==0){
 c0024e8:	e0bffc03 	ldbu	r2,-16(fp)
 c0024ec:	1080004c 	andi	r2,r2,1
 c0024f0:	10803fcc 	andi	r2,r2,255
 c0024f4:	1000081e 	bne	r2,zero,c002518 <setColorPalette+0xc4>
		original = original & 0xFFFFE000;
 c0024f8:	e0fffb17 	ldw	r3,-20(fp)
 c0024fc:	00b80004 	movi	r2,-8192
 c002500:	1884703a 	and	r2,r3,r2
 c002504:	e0bffb15 	stw	r2,-20(fp)
		shifts = shifts << 1;
 c002508:	e0bffa17 	ldw	r2,-24(fp)
 c00250c:	1085883a 	add	r2,r2,r2
 c002510:	e0bffa15 	stw	r2,-24(fp)
 c002514:	00000606 	br	c002530 <setColorPalette+0xdc>
	} else {
		original = original & 0x00001FFF;
 c002518:	e0bffb17 	ldw	r2,-20(fp)
 c00251c:	1087ffcc 	andi	r2,r2,8191
 c002520:	e0bffb15 	stw	r2,-20(fp)
		shifts = shifts << 13;
 c002524:	e0bffa17 	ldw	r2,-24(fp)
 c002528:	1004937a 	slli	r2,r2,13
 c00252c:	e0bffa15 	stw	r2,-24(fp)
	}
	original = original | shifts;
 c002530:	e0fffb17 	ldw	r3,-20(fp)
 c002534:	e0bffa17 	ldw	r2,-24(fp)
 c002538:	1884b03a 	or	r2,r3,r2
 c00253c:	e0bffb15 	stw	r2,-20(fp)
	vga_ctrl->palette[color/2] = original;
 c002540:	d0e00617 	ldw	r3,-32744(gp)
 c002544:	e0bffc03 	ldbu	r2,-16(fp)
 c002548:	1004d07a 	srli	r2,r2,1
 c00254c:	10803fcc 	andi	r2,r2,255
 c002550:	10830004 	addi	r2,r2,3072
 c002554:	1085883a 	add	r2,r2,r2
 c002558:	1085883a 	add	r2,r2,r2
 c00255c:	1885883a 	add	r2,r3,r2
 c002560:	e0fffb17 	ldw	r3,-20(fp)
 c002564:	10c00015 	stw	r3,0(r2)
}
 c002568:	0001883a 	nop
 c00256c:	e037883a 	mov	sp,fp
 c002570:	df000017 	ldw	fp,0(sp)
 c002574:	dec00104 	addi	sp,sp,4
 c002578:	f800283a 	ret

0c00257c <screenVGAinitializer>:

void screenVGAinitializer() {
 c00257c:	defff904 	addi	sp,sp,-28
 c002580:	dfc00615 	stw	ra,24(sp)
 c002584:	df000515 	stw	fp,20(sp)
 c002588:	dcc00415 	stw	r19,16(sp)
 c00258c:	dc800315 	stw	r18,12(sp)
 c002590:	dc400215 	stw	r17,8(sp)
 c002594:	dc000115 	stw	r16,4(sp)
 c002598:	df000504 	addi	fp,sp,20
	textVGAColorClr();
 c00259c:	c0022f40 	call	c0022f4 <textVGAColorClr>
	//initialize palette
	for (int i = 0; i < 16; i++)
 c0025a0:	e03ffb15 	stw	zero,-20(fp)
 c0025a4:	00002806 	br	c002648 <screenVGAinitializer+0xcc>
	{
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
 c0025a8:	e0bffb17 	ldw	r2,-20(fp)
 c0025ac:	14403fcc 	andi	r17,r2,255
 c0025b0:	040300b4 	movhi	r16,3074
 c0025b4:	8423a804 	addi	r16,r16,-29024
 c0025b8:	e0bffb17 	ldw	r2,-20(fp)
 c0025bc:	014005c4 	movi	r5,23
 c0025c0:	1009883a 	mov	r4,r2
 c0025c4:	c004c7c0 	call	c004c7c <__mulsi3>
 c0025c8:	8085883a 	add	r2,r16,r2
 c0025cc:	10800504 	addi	r2,r2,20
 c0025d0:	10800003 	ldbu	r2,0(r2)
 c0025d4:	14803fcc 	andi	r18,r2,255
 c0025d8:	040300b4 	movhi	r16,3074
 c0025dc:	8423a804 	addi	r16,r16,-29024
 c0025e0:	e0bffb17 	ldw	r2,-20(fp)
 c0025e4:	014005c4 	movi	r5,23
 c0025e8:	1009883a 	mov	r4,r2
 c0025ec:	c004c7c0 	call	c004c7c <__mulsi3>
 c0025f0:	8085883a 	add	r2,r16,r2
 c0025f4:	10800544 	addi	r2,r2,21
 c0025f8:	10800003 	ldbu	r2,0(r2)
 c0025fc:	14c03fcc 	andi	r19,r2,255
 c002600:	040300b4 	movhi	r16,3074
 c002604:	8423a804 	addi	r16,r16,-29024
 c002608:	e0bffb17 	ldw	r2,-20(fp)
 c00260c:	014005c4 	movi	r5,23
 c002610:	1009883a 	mov	r4,r2
 c002614:	c004c7c0 	call	c004c7c <__mulsi3>
 c002618:	8085883a 	add	r2,r16,r2
 c00261c:	10800584 	addi	r2,r2,22
 c002620:	10800003 	ldbu	r2,0(r2)
 c002624:	10803fcc 	andi	r2,r2,255
 c002628:	100f883a 	mov	r7,r2
 c00262c:	980d883a 	mov	r6,r19
 c002630:	900b883a 	mov	r5,r18
 c002634:	8809883a 	mov	r4,r17
 c002638:	c0024540 	call	c002454 <setColorPalette>
}

void screenVGAinitializer() {
	textVGAColorClr();
	//initialize palette
	for (int i = 0; i < 16; i++)
 c00263c:	e0bffb17 	ldw	r2,-20(fp)
 c002640:	10800044 	addi	r2,r2,1
 c002644:	e0bffb15 	stw	r2,-20(fp)
 c002648:	e0bffb17 	ldw	r2,-20(fp)
 c00264c:	10800410 	cmplti	r2,r2,16
 c002650:	103fd51e 	bne	r2,zero,c0025a8 <__alt_data_end+0xfc0025a8>
	{
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
	}

}
 c002654:	0001883a 	nop
 c002658:	e6fffc04 	addi	sp,fp,-16
 c00265c:	dfc00517 	ldw	ra,20(sp)
 c002660:	df000417 	ldw	fp,16(sp)
 c002664:	dcc00317 	ldw	r19,12(sp)
 c002668:	dc800217 	ldw	r18,8(sp)
 c00266c:	dc400117 	ldw	r17,4(sp)
 c002670:	dc000017 	ldw	r16,0(sp)
 c002674:	dec00604 	addi	sp,sp,24
 c002678:	f800283a 	ret

0c00267c <textVGAColorScreenSaver>:

void textVGAColorScreenSaver()
{
 c00267c:	deffde04 	addi	sp,sp,-136
 c002680:	dfc02115 	stw	ra,132(sp)
 c002684:	df002015 	stw	fp,128(sp)
 c002688:	dcc01f15 	stw	r19,124(sp)
 c00268c:	dc801e15 	stw	r18,120(sp)
 c002690:	dc401d15 	stw	r17,116(sp)
 c002694:	dc001c15 	stw	r16,112(sp)
 c002698:	df002004 	addi	fp,sp,128
	//This is the function you call for your week 2 demo
	int flag = 0;
 c00269c:	e03fe415 	stw	zero,-112(fp)
	char color_string[80];
    int fg, bg, x, y;
	textVGAColorClr();
 c0026a0:	c0022f40 	call	c0022f4 <textVGAColorClr>
	//initialize palette
	for (int i = 0; i < 16; i++)
 c0026a4:	e03fe315 	stw	zero,-116(fp)
 c0026a8:	00002806 	br	c00274c <textVGAColorScreenSaver+0xd0>
	{
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
 c0026ac:	e0bfe317 	ldw	r2,-116(fp)
 c0026b0:	14403fcc 	andi	r17,r2,255
 c0026b4:	040300b4 	movhi	r16,3074
 c0026b8:	8423a804 	addi	r16,r16,-29024
 c0026bc:	e0bfe317 	ldw	r2,-116(fp)
 c0026c0:	014005c4 	movi	r5,23
 c0026c4:	1009883a 	mov	r4,r2
 c0026c8:	c004c7c0 	call	c004c7c <__mulsi3>
 c0026cc:	8085883a 	add	r2,r16,r2
 c0026d0:	10800504 	addi	r2,r2,20
 c0026d4:	10800003 	ldbu	r2,0(r2)
 c0026d8:	14803fcc 	andi	r18,r2,255
 c0026dc:	040300b4 	movhi	r16,3074
 c0026e0:	8423a804 	addi	r16,r16,-29024
 c0026e4:	e0bfe317 	ldw	r2,-116(fp)
 c0026e8:	014005c4 	movi	r5,23
 c0026ec:	1009883a 	mov	r4,r2
 c0026f0:	c004c7c0 	call	c004c7c <__mulsi3>
 c0026f4:	8085883a 	add	r2,r16,r2
 c0026f8:	10800544 	addi	r2,r2,21
 c0026fc:	10800003 	ldbu	r2,0(r2)
 c002700:	14c03fcc 	andi	r19,r2,255
 c002704:	040300b4 	movhi	r16,3074
 c002708:	8423a804 	addi	r16,r16,-29024
 c00270c:	e0bfe317 	ldw	r2,-116(fp)
 c002710:	014005c4 	movi	r5,23
 c002714:	1009883a 	mov	r4,r2
 c002718:	c004c7c0 	call	c004c7c <__mulsi3>
 c00271c:	8085883a 	add	r2,r16,r2
 c002720:	10800584 	addi	r2,r2,22
 c002724:	10800003 	ldbu	r2,0(r2)
 c002728:	10803fcc 	andi	r2,r2,255
 c00272c:	100f883a 	mov	r7,r2
 c002730:	980d883a 	mov	r6,r19
 c002734:	900b883a 	mov	r5,r18
 c002738:	8809883a 	mov	r4,r17
 c00273c:	c0024540 	call	c002454 <setColorPalette>
	int flag = 0;
	char color_string[80];
    int fg, bg, x, y;
	textVGAColorClr();
	//initialize palette
	for (int i = 0; i < 16; i++)
 c002740:	e0bfe317 	ldw	r2,-116(fp)
 c002744:	10800044 	addi	r2,r2,1
 c002748:	e0bfe315 	stw	r2,-116(fp)
 c00274c:	e0bfe317 	ldw	r2,-116(fp)
 c002750:	10800410 	cmplti	r2,r2,16
 c002754:	103fd51e 	bne	r2,zero,c0026ac <__alt_data_end+0xfc0026ac>
	{
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
	}
	int count =0;
 c002758:	e03fe515 	stw	zero,-108(fp)
	while (1) {
	//for(int y = 0; y < COLUMNS; y++){
		fg = rand() % 16;
 c00275c:	c0057780 	call	c005778 <rand>
 c002760:	1007883a 	mov	r3,r2
 c002764:	00a00034 	movhi	r2,32768
 c002768:	108003c4 	addi	r2,r2,15
 c00276c:	1884703a 	and	r2,r3,r2
 c002770:	1000040e 	bge	r2,zero,c002784 <textVGAColorScreenSaver+0x108>
 c002774:	10bfffc4 	addi	r2,r2,-1
 c002778:	00fffc04 	movi	r3,-16
 c00277c:	10c4b03a 	or	r2,r2,r3
 c002780:	10800044 	addi	r2,r2,1
 c002784:	e0bfe115 	stw	r2,-124(fp)
		bg = rand() % 16;
 c002788:	c0057780 	call	c005778 <rand>
 c00278c:	1007883a 	mov	r3,r2
 c002790:	00a00034 	movhi	r2,32768
 c002794:	108003c4 	addi	r2,r2,15
 c002798:	1884703a 	and	r2,r3,r2
 c00279c:	1000040e 	bge	r2,zero,c0027b0 <textVGAColorScreenSaver+0x134>
 c0027a0:	10bfffc4 	addi	r2,r2,-1
 c0027a4:	00fffc04 	movi	r3,-16
 c0027a8:	10c4b03a 	or	r2,r2,r3
 c0027ac:	10800044 	addi	r2,r2,1
 c0027b0:	e0bfe215 	stw	r2,-120(fp)
		while (fg == bg)
 c0027b4:	00001606 	br	c002810 <textVGAColorScreenSaver+0x194>
		{
			fg = rand() % 16;
 c0027b8:	c0057780 	call	c005778 <rand>
 c0027bc:	1007883a 	mov	r3,r2
 c0027c0:	00a00034 	movhi	r2,32768
 c0027c4:	108003c4 	addi	r2,r2,15
 c0027c8:	1884703a 	and	r2,r3,r2
 c0027cc:	1000040e 	bge	r2,zero,c0027e0 <textVGAColorScreenSaver+0x164>
 c0027d0:	10bfffc4 	addi	r2,r2,-1
 c0027d4:	00fffc04 	movi	r3,-16
 c0027d8:	10c4b03a 	or	r2,r2,r3
 c0027dc:	10800044 	addi	r2,r2,1
 c0027e0:	e0bfe115 	stw	r2,-124(fp)
			bg = rand() % 16;
 c0027e4:	c0057780 	call	c005778 <rand>
 c0027e8:	1007883a 	mov	r3,r2
 c0027ec:	00a00034 	movhi	r2,32768
 c0027f0:	108003c4 	addi	r2,r2,15
 c0027f4:	1884703a 	and	r2,r3,r2
 c0027f8:	1000040e 	bge	r2,zero,c00280c <textVGAColorScreenSaver+0x190>
 c0027fc:	10bfffc4 	addi	r2,r2,-1
 c002800:	00fffc04 	movi	r3,-16
 c002804:	10c4b03a 	or	r2,r2,r3
 c002808:	10800044 	addi	r2,r2,1
 c00280c:	e0bfe215 	stw	r2,-120(fp)
	int count =0;
	while (1) {
	//for(int y = 0; y < COLUMNS; y++){
		fg = rand() % 16;
		bg = rand() % 16;
		while (fg == bg)
 c002810:	e0ffe117 	ldw	r3,-124(fp)
 c002814:	e0bfe217 	ldw	r2,-120(fp)
 c002818:	18bfe726 	beq	r3,r2,c0027b8 <__alt_data_end+0xfc0027b8>
		{
			fg = rand() % 16;
			bg = rand() % 16;
		}
		//sprintf(color_string," ttttttt ");
		sprintf(color_string, "Drawing %s text with %s background", colors[fg].name, colors[bg].name);
 c00281c:	014005c4 	movi	r5,23
 c002820:	e13fe117 	ldw	r4,-124(fp)
 c002824:	c004c7c0 	call	c004c7c <__mulsi3>
 c002828:	1007883a 	mov	r3,r2
 c00282c:	008300b4 	movhi	r2,3074
 c002830:	10a3a804 	addi	r2,r2,-29024
 c002834:	18a1883a 	add	r16,r3,r2
 c002838:	014005c4 	movi	r5,23
 c00283c:	e13fe217 	ldw	r4,-120(fp)
 c002840:	c004c7c0 	call	c004c7c <__mulsi3>
 c002844:	1007883a 	mov	r3,r2
 c002848:	008300b4 	movhi	r2,3074
 c00284c:	10a3a804 	addi	r2,r2,-29024
 c002850:	1887883a 	add	r3,r3,r2
 c002854:	e0bfe804 	addi	r2,fp,-96
 c002858:	180f883a 	mov	r7,r3
 c00285c:	800d883a 	mov	r6,r16
 c002860:	014300b4 	movhi	r5,3074
 c002864:	29624a04 	addi	r5,r5,-30424
 c002868:	1009883a 	mov	r4,r2
 c00286c:	c0058880 	call	c005888 <sprintf>
		x = rand() % (ROWS-strlen(color_string));
 c002870:	c0057780 	call	c005778 <rand>
 c002874:	1021883a 	mov	r16,r2
 c002878:	e0bfe804 	addi	r2,fp,-96
 c00287c:	1009883a 	mov	r4,r2
 c002880:	c0058f40 	call	c0058f4 <strlen>
 c002884:	1007883a 	mov	r3,r2
 c002888:	00800f04 	movi	r2,60
 c00288c:	10c5c83a 	sub	r2,r2,r3
 c002890:	100b883a 	mov	r5,r2
 c002894:	8009883a 	mov	r4,r16
 c002898:	c004c240 	call	c004c24 <__umodsi3>
 c00289c:	e0bfe615 	stw	r2,-104(fp)
		y = rand() % 60;
 c0028a0:	c0057780 	call	c005778 <rand>
 c0028a4:	01400f04 	movi	r5,60
 c0028a8:	1009883a 	mov	r4,r2
 c0028ac:	c004b4c0 	call	c004b4c <__modsi3>
 c0028b0:	e0bfe715 	stw	r2,-100(fp)
		if (y %2==0) {
 c0028b4:	e0bfe717 	ldw	r2,-100(fp)
 c0028b8:	1080004c 	andi	r2,r2,1
 c0028bc:	1000181e 	bne	r2,zero,c002920 <textVGAColorScreenSaver+0x2a4>
			textVGADrawColorText (color_string, x, y, bg, fg);
 c0028c0:	e0bfe217 	ldw	r2,-120(fp)
 c0028c4:	11003fcc 	andi	r4,r2,255
 c0028c8:	e0bfe117 	ldw	r2,-124(fp)
 c0028cc:	10803fcc 	andi	r2,r2,255
 c0028d0:	e0ffe804 	addi	r3,fp,-96
 c0028d4:	d8800015 	stw	r2,0(sp)
 c0028d8:	200f883a 	mov	r7,r4
 c0028dc:	e1bfe717 	ldw	r6,-100(fp)
 c0028e0:	e17fe617 	ldw	r5,-104(fp)
 c0028e4:	1809883a 	mov	r4,r3
 c0028e8:	c0023440 	call	c002344 <textVGADrawColorText>
			textVGADrawColorText (color_string, x, y+1, bg, fg);
 c0028ec:	e0bfe717 	ldw	r2,-100(fp)
 c0028f0:	11000044 	addi	r4,r2,1
 c0028f4:	e0bfe217 	ldw	r2,-120(fp)
 c0028f8:	11403fcc 	andi	r5,r2,255
 c0028fc:	e0bfe117 	ldw	r2,-124(fp)
 c002900:	10803fcc 	andi	r2,r2,255
 c002904:	e0ffe804 	addi	r3,fp,-96
 c002908:	d8800015 	stw	r2,0(sp)
 c00290c:	280f883a 	mov	r7,r5
 c002910:	200d883a 	mov	r6,r4
 c002914:	e17fe617 	ldw	r5,-104(fp)
 c002918:	1809883a 	mov	r4,r3
 c00291c:	c0023440 	call	c002344 <textVGADrawColorText>

		}
		usleep (100000);
 c002920:	010000b4 	movhi	r4,2
 c002924:	2121a804 	addi	r4,r4,-31072
 c002928:	c0163ac0 	call	c0163ac <usleep>
	//}
	}
 c00292c:	003f8b06 	br	c00275c <__alt_data_end+0xfc00275c>

0c002930 <VGADrawColorBox>:
	//VGADrawColorBox(2,2,15,0);
	//VGADrawColorBox(ROWS/2,COLUMNS/2,3,0);
}

void VGADrawColorBox(int x, int y, alt_u8 background)
{
 c002930:	defffa04 	addi	sp,sp,-24
 c002934:	dfc00515 	stw	ra,20(sp)
 c002938:	df000415 	stw	fp,16(sp)
 c00293c:	dc000315 	stw	r16,12(sp)
 c002940:	df000404 	addi	fp,sp,16
 c002944:	e13ffc15 	stw	r4,-16(fp)
 c002948:	e17ffd15 	stw	r5,-12(fp)
 c00294c:	3005883a 	mov	r2,r6
 c002950:	e0bffe05 	stb	r2,-8(fp)
	vga_ctrl->VRAM[(y*COLUMNS + x) * 2] = 0 << 4 | background;
 c002954:	d4200617 	ldw	r16,-32744(gp)
 c002958:	01401404 	movi	r5,80
 c00295c:	e13ffd17 	ldw	r4,-12(fp)
 c002960:	c004c7c0 	call	c004c7c <__mulsi3>
 c002964:	1007883a 	mov	r3,r2
 c002968:	e0bffc17 	ldw	r2,-16(fp)
 c00296c:	1885883a 	add	r2,r3,r2
 c002970:	1085883a 	add	r2,r2,r2
 c002974:	8085883a 	add	r2,r16,r2
 c002978:	e0fffe03 	ldbu	r3,-8(fp)
 c00297c:	10c00005 	stb	r3,0(r2)
}
 c002980:	0001883a 	nop
 c002984:	e6ffff04 	addi	sp,fp,-4
 c002988:	dfc00217 	ldw	ra,8(sp)
 c00298c:	df000117 	ldw	fp,4(sp)
 c002990:	dc000017 	ldw	r16,0(sp)
 c002994:	dec00304 	addi	sp,sp,12
 c002998:	f800283a 	ret

0c00299c <VGAwriteText>:

void VGAwriteText(int x, int y, int colorFG, int colorBG, char text[]) {
 c00299c:	defff904 	addi	sp,sp,-28
 c0029a0:	dfc00615 	stw	ra,24(sp)
 c0029a4:	df000515 	stw	fp,20(sp)
 c0029a8:	df000504 	addi	fp,sp,20
 c0029ac:	e13ffc15 	stw	r4,-16(fp)
 c0029b0:	e17ffd15 	stw	r5,-12(fp)
 c0029b4:	e1bffe15 	stw	r6,-8(fp)
 c0029b8:	e1ffff15 	stw	r7,-4(fp)
		textVGADrawColorText (text, x, (y/2)*2, colorBG, colorFG);
 c0029bc:	e0bffd17 	ldw	r2,-12(fp)
 c0029c0:	1006d7fa 	srli	r3,r2,31
 c0029c4:	1885883a 	add	r2,r3,r2
 c0029c8:	1005d07a 	srai	r2,r2,1
 c0029cc:	1085883a 	add	r2,r2,r2
 c0029d0:	1009883a 	mov	r4,r2
 c0029d4:	e0bfff17 	ldw	r2,-4(fp)
 c0029d8:	10c03fcc 	andi	r3,r2,255
 c0029dc:	e0bffe17 	ldw	r2,-8(fp)
 c0029e0:	10803fcc 	andi	r2,r2,255
 c0029e4:	d8800015 	stw	r2,0(sp)
 c0029e8:	180f883a 	mov	r7,r3
 c0029ec:	200d883a 	mov	r6,r4
 c0029f0:	e17ffc17 	ldw	r5,-16(fp)
 c0029f4:	e1000217 	ldw	r4,8(fp)
 c0029f8:	c0023440 	call	c002344 <textVGADrawColorText>
		textVGADrawColorText (text, x, (y/2)*2+1, colorBG, colorFG);
 c0029fc:	e0bffd17 	ldw	r2,-12(fp)
 c002a00:	1006d7fa 	srli	r3,r2,31
 c002a04:	1885883a 	add	r2,r3,r2
 c002a08:	1005d07a 	srai	r2,r2,1
 c002a0c:	1085883a 	add	r2,r2,r2
 c002a10:	10c00044 	addi	r3,r2,1
 c002a14:	e0bfff17 	ldw	r2,-4(fp)
 c002a18:	11003fcc 	andi	r4,r2,255
 c002a1c:	e0bffe17 	ldw	r2,-8(fp)
 c002a20:	10803fcc 	andi	r2,r2,255
 c002a24:	d8800015 	stw	r2,0(sp)
 c002a28:	200f883a 	mov	r7,r4
 c002a2c:	180d883a 	mov	r6,r3
 c002a30:	e17ffc17 	ldw	r5,-16(fp)
 c002a34:	e1000217 	ldw	r4,8(fp)
 c002a38:	c0023440 	call	c002344 <textVGADrawColorText>
}
 c002a3c:	0001883a 	nop
 c002a40:	e037883a 	mov	sp,fp
 c002a44:	dfc00117 	ldw	ra,4(sp)
 c002a48:	df000017 	ldw	fp,0(sp)
 c002a4c:	dec00204 	addi	sp,sp,8
 c002a50:	f800283a 	ret

0c002a54 <HIDMProbe>:
/* HID Mouse probe. Called from USB state machine.                          */
/* assumes configuration length is less than 256 bytes                      */
/* looks for Class:03, Subclass: 01, Protocol: 02 in interface descriptor   */
/* sets mouse in boot protocol                                              */
/* assumes single configuration and interface configuration 0               */
BOOL HIDMProbe(BYTE addr, DWORD flags) {
 c002a54:	defff204 	addi	sp,sp,-56
 c002a58:	dfc00d15 	stw	ra,52(sp)
 c002a5c:	df000c15 	stw	fp,48(sp)
 c002a60:	df000c04 	addi	fp,sp,48
 c002a64:	2005883a 	mov	r2,r4
 c002a68:	e17fff15 	stw	r5,-4(fp)
 c002a6c:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 c002a70:	008300b4 	movhi	r2,3074
 c002a74:	10b28e04 	addi	r2,r2,-13768
 c002a78:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
 c002a7c:	008300b4 	movhi	r2,3074
 c002a80:	10b28e04 	addi	r2,r2,-13768
 c002a84:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 c002a88:	e0fffe03 	ldbu	r3,-8(fp)
 c002a8c:	008300b4 	movhi	r2,3074
 c002a90:	10b28e04 	addi	r2,r2,-13768
 c002a94:	d8800415 	stw	r2,16(sp)
 c002a98:	00800244 	movi	r2,9
 c002a9c:	d8800315 	stw	r2,12(sp)
 c002aa0:	d8000215 	stw	zero,8(sp)
 c002aa4:	00800084 	movi	r2,2
 c002aa8:	d8800115 	stw	r2,4(sp)
 c002aac:	d8000015 	stw	zero,0(sp)
 c002ab0:	01c00184 	movi	r7,6
 c002ab4:	01802004 	movi	r6,128
 c002ab8:	000b883a 	mov	r5,zero
 c002abc:	1809883a 	mov	r4,r3
 c002ac0:	c003c300 	call	c003c30 <XferCtrlReq>
 c002ac4:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 c002ac8:	e0bffc03 	ldbu	r2,-16(fp)
 c002acc:	10000226 	beq	r2,zero,c002ad8 <HIDMProbe+0x84>
		//printf("unable to get configuration descriptor");
		return (FALSE);
 c002ad0:	0005883a 	mov	r2,zero
 c002ad4:	0000dc06 	br	c002e48 <HIDMProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 c002ad8:	e0bffa17 	ldw	r2,-24(fp)
 c002adc:	1080008b 	ldhu	r2,2(r2)
 c002ae0:	10bfffcc 	andi	r2,r2,65535
 c002ae4:	10804070 	cmpltui	r2,r2,257
 c002ae8:	1000031e 	bne	r2,zero,c002af8 <HIDMProbe+0xa4>
		total_length = 256;
 c002aec:	00804004 	movi	r2,256
 c002af0:	e0bff90d 	sth	r2,-28(fp)
 c002af4:	00000306 	br	c002b04 <HIDMProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 c002af8:	e0bffa17 	ldw	r2,-24(fp)
 c002afc:	1080008b 	ldhu	r2,2(r2)
 c002b00:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 c002b04:	e13ffe03 	ldbu	r4,-8(fp)
 c002b08:	e0fff90b 	ldhu	r3,-28(fp)
 c002b0c:	008300b4 	movhi	r2,3074
 c002b10:	10b28e04 	addi	r2,r2,-13768
 c002b14:	d8800415 	stw	r2,16(sp)
 c002b18:	d8c00315 	stw	r3,12(sp)
 c002b1c:	d8000215 	stw	zero,8(sp)
 c002b20:	00800084 	movi	r2,2
 c002b24:	d8800115 	stw	r2,4(sp)
 c002b28:	d8000015 	stw	zero,0(sp)
 c002b2c:	01c00184 	movi	r7,6
 c002b30:	01802004 	movi	r6,128
 c002b34:	000b883a 	mov	r5,zero
 c002b38:	c003c300 	call	c003c30 <XferCtrlReq>
 c002b3c:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 c002b40:	e0bffc03 	ldbu	r2,-16(fp)
 c002b44:	10000226 	beq	r2,zero,c002b50 <HIDMProbe+0xfc>
		//printf("unable to get configuration");
		return (FALSE);
 c002b48:	0005883a 	mov	r2,zero
 c002b4c:	0000be06 	br	c002e48 <HIDMProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue;
 c002b50:	e0bffa17 	ldw	r2,-24(fp)
 c002b54:	10800143 	ldbu	r2,5(r2)
 c002b58:	e0bffc45 	stb	r2,-15(fp)
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
 c002b5c:	0000b306 	br	c002e2c <HIDMProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) {
 c002b60:	e0bffa17 	ldw	r2,-24(fp)
 c002b64:	10800043 	ldbu	r2,1(r2)
 c002b68:	10803fcc 	andi	r2,r2,255
 c002b6c:	10800120 	cmpeqi	r2,r2,4
 c002b70:	1000091e 	bne	r2,zero,c002b98 <HIDMProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 c002b74:	e0bffa17 	ldw	r2,-24(fp)
 c002b78:	10800003 	ldbu	r2,0(r2)
 c002b7c:	10803fcc 	andi	r2,r2,255
 c002b80:	e0fffb17 	ldw	r3,-20(fp)
 c002b84:	1885883a 	add	r2,r3,r2
 c002b88:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 c002b8c:	e0bffb17 	ldw	r2,-20(fp)
 c002b90:	e0bffa15 	stw	r2,-24(fp)
 c002b94:	0000a506 	br	c002e2c <HIDMProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 c002b98:	e0bffa17 	ldw	r2,-24(fp)
 c002b9c:	10800143 	ldbu	r2,5(r2)
 c002ba0:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 c002ba4:	e0bffa17 	ldw	r2,-24(fp)
 c002ba8:	10800183 	ldbu	r2,6(r2)
 c002bac:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 c002bb0:	e0bffa17 	ldw	r2,-24(fp)
 c002bb4:	108001c3 	ldbu	r2,7(r2)
 c002bb8:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 c002bbc:	e0bffc83 	ldbu	r2,-14(fp)
 c002bc0:	108000d8 	cmpnei	r2,r2,3
 c002bc4:	1000971e 	bne	r2,zero,c002e24 <HIDMProbe+0x3d0>
 c002bc8:	e0bffcc3 	ldbu	r2,-13(fp)
 c002bcc:	10800058 	cmpnei	r2,r2,1
 c002bd0:	1000941e 	bne	r2,zero,c002e24 <HIDMProbe+0x3d0>
					&& protocol == HID_PROTOCOL_MOUSE) {
 c002bd4:	e0bffd03 	ldbu	r2,-12(fp)
 c002bd8:	10800098 	cmpnei	r2,r2,2
 c002bdc:	1000911e 	bne	r2,zero,c002e24 <HIDMProbe+0x3d0>
				//detected a mouse
				devtable[addr].devclass = HID_M;                  //device class
 c002be0:	e0fffe03 	ldbu	r3,-8(fp)
 c002be4:	008300b4 	movhi	r2,3074
 c002be8:	10b2ce04 	addi	r2,r2,-13512
 c002bec:	180690fa 	slli	r3,r3,3
 c002bf0:	10c5883a 	add	r2,r2,r3
 c002bf4:	10800104 	addi	r2,r2,4
 c002bf8:	00c00084 	movi	r3,2
 c002bfc:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
 c002c00:	e0fffe03 	ldbu	r3,-8(fp)
 c002c04:	008300b4 	movhi	r2,3074
 c002c08:	10b2ce04 	addi	r2,r2,-13512
 c002c0c:	180690fa 	slli	r3,r3,3
 c002c10:	10c5883a 	add	r2,r2,r3
 c002c14:	10800017 	ldw	r2,0(r2)
 c002c18:	1080008b 	ldhu	r2,2(r2)
 c002c1c:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
 c002c20:	c0032640 	call	c003264 <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 c002c24:	e0fffe03 	ldbu	r3,-8(fp)
 c002c28:	008300b4 	movhi	r2,3074
 c002c2c:	10b2ce04 	addi	r2,r2,-13512
 c002c30:	180690fa 	slli	r3,r3,3
 c002c34:	10c7883a 	add	r3,r2,r3
 c002c38:	008300b4 	movhi	r2,3074
 c002c3c:	10b27a04 	addi	r2,r2,-13848
 c002c40:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
 c002c44:	e0fffe03 	ldbu	r3,-8(fp)
 c002c48:	008300b4 	movhi	r2,3074
 c002c4c:	10b2ce04 	addi	r2,r2,-13512
 c002c50:	180690fa 	slli	r3,r3,3
 c002c54:	10c5883a 	add	r2,r2,r3
 c002c58:	10800017 	ldw	r2,0(r2)
 c002c5c:	e0fffd43 	ldbu	r3,-11(fp)
 c002c60:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
 c002c64:	e0bffa17 	ldw	r2,-24(fp)
 c002c68:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_M;                  //device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
				hid_device.interface =
 c002c6c:	d0a7a745 	stb	r2,-24931(gp)
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
 c002c70:	e0bffe03 	ldbu	r2,-8(fp)
 c002c74:	d0a7a705 	stb	r2,-24932(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 c002c78:	e0bffa17 	ldw	r2,-24(fp)
 c002c7c:	10800003 	ldbu	r2,0(r2)
 c002c80:	10803fcc 	andi	r2,r2,255
 c002c84:	e0fffb17 	ldw	r3,-20(fp)
 c002c88:	1885883a 	add	r2,r3,r2
 c002c8c:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 c002c90:	e0bffb17 	ldw	r2,-20(fp)
 c002c94:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
 c002c98:	00005b06 	br	c002e08 <HIDMProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
 c002c9c:	e0bffa17 	ldw	r2,-24(fp)
 c002ca0:	10800043 	ldbu	r2,1(r2)
 c002ca4:	10803fcc 	andi	r2,r2,255
 c002ca8:	10800160 	cmpeqi	r2,r2,5
 c002cac:	1000091e 	bne	r2,zero,c002cd4 <HIDMProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 c002cb0:	e0bffa17 	ldw	r2,-24(fp)
 c002cb4:	10800003 	ldbu	r2,0(r2)
 c002cb8:	10803fcc 	andi	r2,r2,255
 c002cbc:	e0fffb17 	ldw	r3,-20(fp)
 c002cc0:	1885883a 	add	r2,r3,r2
 c002cc4:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 c002cc8:	e0bffb17 	ldw	r2,-20(fp)
 c002ccc:	e0bffa15 	stw	r2,-24(fp)
 c002cd0:	00004d06 	br	c002e08 <HIDMProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 c002cd4:	e0fffe03 	ldbu	r3,-8(fp)
 c002cd8:	008300b4 	movhi	r2,3074
 c002cdc:	10b2ce04 	addi	r2,r2,-13512
 c002ce0:	180690fa 	slli	r3,r3,3
 c002ce4:	10c5883a 	add	r2,r2,r3
 c002ce8:	10800017 	ldw	r2,0(r2)
 c002cec:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 c002cf0:	e0fffa17 	ldw	r3,-24(fp)
 c002cf4:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 c002cf8:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 c002cfc:	e0fffe03 	ldbu	r3,-8(fp)
 c002d00:	008300b4 	movhi	r2,3074
 c002d04:	10b2ce04 	addi	r2,r2,-13512
 c002d08:	180690fa 	slli	r3,r3,3
 c002d0c:	10c5883a 	add	r2,r2,r3
 c002d10:	10800017 	ldw	r2,0(r2)
 c002d14:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 c002d18:	e0fffa17 	ldw	r3,-24(fp)
 c002d1c:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 c002d20:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 c002d24:	e0fffe03 	ldbu	r3,-8(fp)
 c002d28:	008300b4 	movhi	r2,3074
 c002d2c:	10b2ce04 	addi	r2,r2,-13512
 c002d30:	180690fa 	slli	r3,r3,3
 c002d34:	10c5883a 	add	r2,r2,r3
 c002d38:	10800017 	ldw	r2,0(r2)
 c002d3c:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 c002d40:	e0fffa17 	ldw	r3,-24(fp)
 c002d44:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 c002d48:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 c002d4c:	e0fffe03 	ldbu	r3,-8(fp)
 c002d50:	008300b4 	movhi	r2,3074
 c002d54:	10b2ce04 	addi	r2,r2,-13512
 c002d58:	180690fa 	slli	r3,r3,3
 c002d5c:	10c5883a 	add	r2,r2,r3
 c002d60:	10800017 	ldw	r2,0(r2)
 c002d64:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 c002d68:	e0fffa17 	ldw	r3,-24(fp)
 c002d6c:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 c002d70:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						// devtable[ addr ].epinfo[ 1 ].rcvToggle = bmRCVTOG0;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 c002d74:	e0fffe03 	ldbu	r3,-8(fp)
 c002d78:	e0bffc43 	ldbu	r2,-15(fp)
 c002d7c:	d8000415 	stw	zero,16(sp)
 c002d80:	d8000315 	stw	zero,12(sp)
 c002d84:	d8000215 	stw	zero,8(sp)
 c002d88:	d8000115 	stw	zero,4(sp)
 c002d8c:	d8800015 	stw	r2,0(sp)
 c002d90:	01c00244 	movi	r7,9
 c002d94:	000d883a 	mov	r6,zero
 c002d98:	000b883a 	mov	r5,zero
 c002d9c:	1809883a 	mov	r4,r3
 c002da0:	c003c300 	call	c003c30 <XferCtrlReq>
 c002da4:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
 c002da8:	e0bffc03 	ldbu	r2,-16(fp)
 c002dac:	10000226 	beq	r2,zero,c002db8 <HIDMProbe+0x364>
							return (FALSE);
 c002db0:	0005883a 	mov	r2,zero
 c002db4:	00002406 	br	c002e48 <HIDMProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 c002db8:	e0fffe03 	ldbu	r3,-8(fp)
 c002dbc:	d0a7a743 	ldbu	r2,-24931(gp)
 c002dc0:	10803fcc 	andi	r2,r2,255
 c002dc4:	d8000415 	stw	zero,16(sp)
 c002dc8:	d8000315 	stw	zero,12(sp)
 c002dcc:	d8800215 	stw	r2,8(sp)
 c002dd0:	d8000115 	stw	zero,4(sp)
 c002dd4:	d8000015 	stw	zero,0(sp)
 c002dd8:	01c002c4 	movi	r7,11
 c002ddc:	01800844 	movi	r6,33
 c002de0:	000b883a 	mov	r5,zero
 c002de4:	1809883a 	mov	r4,r3
 c002de8:	c003c300 	call	c003c30 <XferCtrlReq>
 c002dec:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 c002df0:	e0bffc03 	ldbu	r2,-16(fp)
 c002df4:	10000226 	beq	r2,zero,c002e00 <HIDMProbe+0x3ac>
							return (FALSE);
 c002df8:	0005883a 	mov	r2,zero
 c002dfc:	00001206 	br	c002e48 <HIDMProbe+0x3f4>
						} else {
							return (TRUE);
 c002e00:	00800044 	movi	r2,1
 c002e04:	00001006 	br	c002e48 <HIDMProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
 c002e08:	e0fff90b 	ldhu	r3,-28(fp)
 c002e0c:	008300b4 	movhi	r2,3074
 c002e10:	10b28e04 	addi	r2,r2,-13768
 c002e14:	1885883a 	add	r2,r3,r2
 c002e18:	e0fffb17 	ldw	r3,-20(fp)
 c002e1c:	18bf9f36 	bltu	r3,r2,c002c9c <__alt_data_end+0xfc002c9c>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 c002e20:	00000206 	br	c002e2c <HIDMProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
 c002e24:	0005883a 	mov	r2,zero
 c002e28:	00000706 	br	c002e48 <HIDMProbe+0x3f4>
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
 c002e2c:	e0fff90b 	ldhu	r3,-28(fp)
 c002e30:	008300b4 	movhi	r2,3074
 c002e34:	10b28e04 	addi	r2,r2,-13768
 c002e38:	1885883a 	add	r2,r3,r2
 c002e3c:	e0fffb17 	ldw	r3,-20(fp)
 c002e40:	18bf4736 	bltu	r3,r2,c002b60 <__alt_data_end+0xfc002b60>
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 c002e44:	0005883a 	mov	r2,zero
}
 c002e48:	e037883a 	mov	sp,fp
 c002e4c:	dfc00117 	ldw	ra,4(sp)
 c002e50:	df000017 	ldw	fp,0(sp)
 c002e54:	dec00204 	addi	sp,sp,8
 c002e58:	f800283a 	ret

0c002e5c <HIDKProbe>:
/* HID Keyboard probe. Called from USB state machine.                           */
/* assumes configuration length is less than 256 bytes                          */
/* looks for Class:03, Subclass: 01, Protocol: 01 in interface descriptor       */
/* sets keyboard in boot protocol                                               */
/* assumes single configuration, single endpoint, and interface configuration 0 */
BOOL HIDKProbe(BYTE addr, DWORD flags) {
 c002e5c:	defff204 	addi	sp,sp,-56
 c002e60:	dfc00d15 	stw	ra,52(sp)
 c002e64:	df000c15 	stw	fp,48(sp)
 c002e68:	df000c04 	addi	fp,sp,48
 c002e6c:	2005883a 	mov	r2,r4
 c002e70:	e17fff15 	stw	r5,-4(fp)
 c002e74:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 c002e78:	008300b4 	movhi	r2,3074
 c002e7c:	10b28e04 	addi	r2,r2,-13768
 c002e80:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
 c002e84:	008300b4 	movhi	r2,3074
 c002e88:	10b28e04 	addi	r2,r2,-13768
 c002e8c:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 c002e90:	e0fffe03 	ldbu	r3,-8(fp)
 c002e94:	008300b4 	movhi	r2,3074
 c002e98:	10b28e04 	addi	r2,r2,-13768
 c002e9c:	d8800415 	stw	r2,16(sp)
 c002ea0:	00800244 	movi	r2,9
 c002ea4:	d8800315 	stw	r2,12(sp)
 c002ea8:	d8000215 	stw	zero,8(sp)
 c002eac:	00800084 	movi	r2,2
 c002eb0:	d8800115 	stw	r2,4(sp)
 c002eb4:	d8000015 	stw	zero,0(sp)
 c002eb8:	01c00184 	movi	r7,6
 c002ebc:	01802004 	movi	r6,128
 c002ec0:	000b883a 	mov	r5,zero
 c002ec4:	1809883a 	mov	r4,r3
 c002ec8:	c003c300 	call	c003c30 <XferCtrlReq>
 c002ecc:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling           
 c002ed0:	e0bffc03 	ldbu	r2,-16(fp)
 c002ed4:	10000226 	beq	r2,zero,c002ee0 <HIDKProbe+0x84>
		return (FALSE);
 c002ed8:	0005883a 	mov	r2,zero
 c002edc:	0000dc06 	br	c003250 <HIDKProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 c002ee0:	e0bffa17 	ldw	r2,-24(fp)
 c002ee4:	1080008b 	ldhu	r2,2(r2)
 c002ee8:	10bfffcc 	andi	r2,r2,65535
 c002eec:	10804070 	cmpltui	r2,r2,257
 c002ef0:	1000031e 	bne	r2,zero,c002f00 <HIDKProbe+0xa4>
		total_length = 256;
 c002ef4:	00804004 	movi	r2,256
 c002ef8:	e0bff90d 	sth	r2,-28(fp)
 c002efc:	00000306 	br	c002f0c <HIDKProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 c002f00:	e0bffa17 	ldw	r2,-24(fp)
 c002f04:	1080008b 	ldhu	r2,2(r2)
 c002f08:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 c002f0c:	e13ffe03 	ldbu	r4,-8(fp)
 c002f10:	e0fff90b 	ldhu	r3,-28(fp)
 c002f14:	008300b4 	movhi	r2,3074
 c002f18:	10b28e04 	addi	r2,r2,-13768
 c002f1c:	d8800415 	stw	r2,16(sp)
 c002f20:	d8c00315 	stw	r3,12(sp)
 c002f24:	d8000215 	stw	zero,8(sp)
 c002f28:	00800084 	movi	r2,2
 c002f2c:	d8800115 	stw	r2,4(sp)
 c002f30:	d8000015 	stw	zero,0(sp)
 c002f34:	01c00184 	movi	r7,6
 c002f38:	01802004 	movi	r6,128
 c002f3c:	000b883a 	mov	r5,zero
 c002f40:	c003c300 	call	c003c30 <XferCtrlReq>
 c002f44:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 c002f48:	e0bffc03 	ldbu	r2,-16(fp)
 c002f4c:	10000226 	beq	r2,zero,c002f58 <HIDKProbe+0xfc>
		return (FALSE);
 c002f50:	0005883a 	mov	r2,zero
 c002f54:	0000be06 	br	c003250 <HIDKProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
 c002f58:	e0bffa17 	ldw	r2,-24(fp)
 c002f5c:	10800143 	ldbu	r2,5(r2)
 c002f60:	e0bffc45 	stb	r2,-15(fp)
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 c002f64:	0000b306 	br	c003234 <HIDKProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) { //skip to the next descriptor
 c002f68:	e0bffa17 	ldw	r2,-24(fp)
 c002f6c:	10800043 	ldbu	r2,1(r2)
 c002f70:	10803fcc 	andi	r2,r2,255
 c002f74:	10800120 	cmpeqi	r2,r2,4
 c002f78:	1000091e 	bne	r2,zero,c002fa0 <HIDKProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 c002f7c:	e0bffa17 	ldw	r2,-24(fp)
 c002f80:	10800003 	ldbu	r2,0(r2)
 c002f84:	10803fcc 	andi	r2,r2,255
 c002f88:	e0fffb17 	ldw	r3,-20(fp)
 c002f8c:	1885883a 	add	r2,r3,r2
 c002f90:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 c002f94:	e0bffb17 	ldw	r2,-20(fp)
 c002f98:	e0bffa15 	stw	r2,-24(fp)
 c002f9c:	0000a506 	br	c003234 <HIDKProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 c002fa0:	e0bffa17 	ldw	r2,-24(fp)
 c002fa4:	10800143 	ldbu	r2,5(r2)
 c002fa8:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 c002fac:	e0bffa17 	ldw	r2,-24(fp)
 c002fb0:	10800183 	ldbu	r2,6(r2)
 c002fb4:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 c002fb8:	e0bffa17 	ldw	r2,-24(fp)
 c002fbc:	108001c3 	ldbu	r2,7(r2)
 c002fc0:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 c002fc4:	e0bffc83 	ldbu	r2,-14(fp)
 c002fc8:	108000d8 	cmpnei	r2,r2,3
 c002fcc:	1000971e 	bne	r2,zero,c00322c <HIDKProbe+0x3d0>
 c002fd0:	e0bffcc3 	ldbu	r2,-13(fp)
 c002fd4:	10800058 	cmpnei	r2,r2,1
 c002fd8:	1000941e 	bne	r2,zero,c00322c <HIDKProbe+0x3d0>
					&& protocol == HID_PROTOCOL_KEYBOARD) {
 c002fdc:	e0bffd03 	ldbu	r2,-12(fp)
 c002fe0:	10800058 	cmpnei	r2,r2,1
 c002fe4:	1000911e 	bne	r2,zero,c00322c <HIDKProbe+0x3d0>
				//detected a keyboard
				devtable[addr].devclass = HID_K;             //fill device class
 c002fe8:	e0fffe03 	ldbu	r3,-8(fp)
 c002fec:	008300b4 	movhi	r2,3074
 c002ff0:	10b2ce04 	addi	r2,r2,-13512
 c002ff4:	180690fa 	slli	r3,r3,3
 c002ff8:	10c5883a 	add	r2,r2,r3
 c002ffc:	10800104 	addi	r2,r2,4
 c003000:	00c00044 	movi	r3,1
 c003004:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
 c003008:	e0fffe03 	ldbu	r3,-8(fp)
 c00300c:	008300b4 	movhi	r2,3074
 c003010:	10b2ce04 	addi	r2,r2,-13512
 c003014:	180690fa 	slli	r3,r3,3
 c003018:	10c5883a 	add	r2,r2,r3
 c00301c:	10800017 	ldw	r2,0(r2)
 c003020:	1080008b 	ldhu	r2,2(r2)
 c003024:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
 c003028:	c0032640 	call	c003264 <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 c00302c:	e0fffe03 	ldbu	r3,-8(fp)
 c003030:	008300b4 	movhi	r2,3074
 c003034:	10b2ce04 	addi	r2,r2,-13512
 c003038:	180690fa 	slli	r3,r3,3
 c00303c:	10c7883a 	add	r3,r2,r3
 c003040:	008300b4 	movhi	r2,3074
 c003044:	10b27a04 	addi	r2,r2,-13848
 c003048:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
 c00304c:	e0fffe03 	ldbu	r3,-8(fp)
 c003050:	008300b4 	movhi	r2,3074
 c003054:	10b2ce04 	addi	r2,r2,-13512
 c003058:	180690fa 	slli	r3,r3,3
 c00305c:	10c5883a 	add	r2,r2,r3
 c003060:	10800017 	ldw	r2,0(r2)
 c003064:	e0fffd43 	ldbu	r3,-11(fp)
 c003068:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
 c00306c:	e0bffa17 	ldw	r2,-24(fp)
 c003070:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_K;             //fill device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
				hid_device.interface =
 c003074:	d0a7a745 	stb	r2,-24931(gp)
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
 c003078:	e0bffe03 	ldbu	r2,-8(fp)
 c00307c:	d0a7a705 	stb	r2,-24932(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
 c003080:	e0bffa17 	ldw	r2,-24(fp)
 c003084:	10800003 	ldbu	r2,0(r2)
 c003088:	10803fcc 	andi	r2,r2,255
 c00308c:	e0fffb17 	ldw	r3,-20(fp)
 c003090:	1885883a 	add	r2,r3,r2
 c003094:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 c003098:	e0bffb17 	ldw	r2,-20(fp)
 c00309c:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
 c0030a0:	00005b06 	br	c003210 <HIDKProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
 c0030a4:	e0bffa17 	ldw	r2,-24(fp)
 c0030a8:	10800043 	ldbu	r2,1(r2)
 c0030ac:	10803fcc 	andi	r2,r2,255
 c0030b0:	10800160 	cmpeqi	r2,r2,5
 c0030b4:	1000091e 	bne	r2,zero,c0030dc <HIDKProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 c0030b8:	e0bffa17 	ldw	r2,-24(fp)
 c0030bc:	10800003 	ldbu	r2,0(r2)
 c0030c0:	10803fcc 	andi	r2,r2,255
 c0030c4:	e0fffb17 	ldw	r3,-20(fp)
 c0030c8:	1885883a 	add	r2,r3,r2
 c0030cc:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 c0030d0:	e0bffb17 	ldw	r2,-20(fp)
 c0030d4:	e0bffa15 	stw	r2,-24(fp)
 c0030d8:	00004d06 	br	c003210 <HIDKProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 c0030dc:	e0fffe03 	ldbu	r3,-8(fp)
 c0030e0:	008300b4 	movhi	r2,3074
 c0030e4:	10b2ce04 	addi	r2,r2,-13512
 c0030e8:	180690fa 	slli	r3,r3,3
 c0030ec:	10c5883a 	add	r2,r2,r3
 c0030f0:	10800017 	ldw	r2,0(r2)
 c0030f4:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 c0030f8:	e0fffa17 	ldw	r3,-24(fp)
 c0030fc:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 c003100:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 c003104:	e0fffe03 	ldbu	r3,-8(fp)
 c003108:	008300b4 	movhi	r2,3074
 c00310c:	10b2ce04 	addi	r2,r2,-13512
 c003110:	180690fa 	slli	r3,r3,3
 c003114:	10c5883a 	add	r2,r2,r3
 c003118:	10800017 	ldw	r2,0(r2)
 c00311c:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 c003120:	e0fffa17 	ldw	r3,-24(fp)
 c003124:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 c003128:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 c00312c:	e0fffe03 	ldbu	r3,-8(fp)
 c003130:	008300b4 	movhi	r2,3074
 c003134:	10b2ce04 	addi	r2,r2,-13512
 c003138:	180690fa 	slli	r3,r3,3
 c00313c:	10c5883a 	add	r2,r2,r3
 c003140:	10800017 	ldw	r2,0(r2)
 c003144:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 c003148:	e0fffa17 	ldw	r3,-24(fp)
 c00314c:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 c003150:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 c003154:	e0fffe03 	ldbu	r3,-8(fp)
 c003158:	008300b4 	movhi	r2,3074
 c00315c:	10b2ce04 	addi	r2,r2,-13512
 c003160:	180690fa 	slli	r3,r3,3
 c003164:	10c5883a 	add	r2,r2,r3
 c003168:	10800017 	ldw	r2,0(r2)
 c00316c:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 c003170:	e0fffa17 	ldw	r3,-24(fp)
 c003174:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 c003178:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 c00317c:	e0fffe03 	ldbu	r3,-8(fp)
 c003180:	e0bffc43 	ldbu	r2,-15(fp)
 c003184:	d8000415 	stw	zero,16(sp)
 c003188:	d8000315 	stw	zero,12(sp)
 c00318c:	d8000215 	stw	zero,8(sp)
 c003190:	d8000115 	stw	zero,4(sp)
 c003194:	d8800015 	stw	r2,0(sp)
 c003198:	01c00244 	movi	r7,9
 c00319c:	000d883a 	mov	r6,zero
 c0031a0:	000b883a 	mov	r5,zero
 c0031a4:	1809883a 	mov	r4,r3
 c0031a8:	c003c300 	call	c003c30 <XferCtrlReq>
 c0031ac:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
 c0031b0:	e0bffc03 	ldbu	r2,-16(fp)
 c0031b4:	10000226 	beq	r2,zero,c0031c0 <HIDKProbe+0x364>
							return (FALSE);
 c0031b8:	0005883a 	mov	r2,zero
 c0031bc:	00002406 	br	c003250 <HIDKProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 c0031c0:	e0fffe03 	ldbu	r3,-8(fp)
 c0031c4:	d0a7a743 	ldbu	r2,-24931(gp)
 c0031c8:	10803fcc 	andi	r2,r2,255
 c0031cc:	d8000415 	stw	zero,16(sp)
 c0031d0:	d8000315 	stw	zero,12(sp)
 c0031d4:	d8800215 	stw	r2,8(sp)
 c0031d8:	d8000115 	stw	zero,4(sp)
 c0031dc:	d8000015 	stw	zero,0(sp)
 c0031e0:	01c002c4 	movi	r7,11
 c0031e4:	01800844 	movi	r6,33
 c0031e8:	000b883a 	mov	r5,zero
 c0031ec:	1809883a 	mov	r4,r3
 c0031f0:	c003c300 	call	c003c30 <XferCtrlReq>
 c0031f4:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 c0031f8:	e0bffc03 	ldbu	r2,-16(fp)
 c0031fc:	10000226 	beq	r2,zero,c003208 <HIDKProbe+0x3ac>
							return (FALSE);
 c003200:	0005883a 	mov	r2,zero
 c003204:	00001206 	br	c003250 <HIDKProbe+0x3f4>
						} else {
							return (TRUE);
 c003208:	00800044 	movi	r2,1
 c00320c:	00001006 	br	c003250 <HIDKProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
 c003210:	e0fff90b 	ldhu	r3,-28(fp)
 c003214:	008300b4 	movhi	r2,3074
 c003218:	10b28e04 	addi	r2,r2,-13768
 c00321c:	1885883a 	add	r2,r3,r2
 c003220:	e0fffb17 	ldw	r3,-20(fp)
 c003224:	18bf9f36 	bltu	r3,r2,c0030a4 <__alt_data_end+0xfc0030a4>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 c003228:	00000206 	br	c003234 <HIDKProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
 c00322c:	0005883a 	mov	r2,zero
 c003230:	00000706 	br	c003250 <HIDKProbe+0x3f4>
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
	if (rcode) {   //error handling
		return (FALSE);
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 c003234:	e0fff90b 	ldhu	r3,-28(fp)
 c003238:	008300b4 	movhi	r2,3074
 c00323c:	10b28e04 	addi	r2,r2,-13768
 c003240:	1885883a 	add	r2,r3,r2
 c003244:	e0fffb17 	ldw	r3,-20(fp)
 c003248:	18bf4736 	bltu	r3,r2,c002f68 <__alt_data_end+0xfc002f68>
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 c00324c:	0005883a 	mov	r2,zero
}
 c003250:	e037883a 	mov	sp,fp
 c003254:	dfc00117 	ldw	ra,4(sp)
 c003258:	df000017 	ldw	fp,0(sp)
 c00325c:	dec00204 	addi	sp,sp,8
 c003260:	f800283a 	ret

0c003264 <HID_init>:
/* HID data structures initialization */
void HID_init(void) {
 c003264:	deffff04 	addi	sp,sp,-4
 c003268:	df000015 	stw	fp,0(sp)
 c00326c:	d839883a 	mov	fp,sp
	hid_ep[1].sndToggle = bmSNDTOG0;
 c003270:	008300b4 	movhi	r2,3074
 c003274:	10b27a04 	addi	r2,r2,-13848
 c003278:	00c01004 	movi	r3,64
 c00327c:	10c00345 	stb	r3,13(r2)
	hid_ep[1].rcvToggle = bmRCVTOG0;
 c003280:	008300b4 	movhi	r2,3074
 c003284:	10b27a04 	addi	r2,r2,-13848
 c003288:	00c00404 	movi	r3,16
 c00328c:	10c00385 	stb	r3,14(r2)
}
 c003290:	0001883a 	nop
 c003294:	e037883a 	mov	sp,fp
 c003298:	df000017 	ldw	fp,0(sp)
 c00329c:	dec00104 	addi	sp,sp,4
 c0032a0:	f800283a 	ret

0c0032a4 <mousePoll>:
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
 c0032a4:	defffb04 	addi	sp,sp,-20
 c0032a8:	dfc00415 	stw	ra,16(sp)
 c0032ac:	df000315 	stw	fp,12(sp)
 c0032b0:	df000304 	addi	fp,sp,12
 c0032b4:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 c0032b8:	d0a7a703 	ldbu	r2,-24932(gp)
 c0032bc:	10803fcc 	andi	r2,r2,255
 c0032c0:	100b883a 	mov	r5,r2
 c0032c4:	01003804 	movi	r4,224
 c0032c8:	c0034800 	call	c003480 <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 c0032cc:	d0a7a703 	ldbu	r2,-24932(gp)
 c0032d0:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 c0032d4:	d0a7a703 	ldbu	r2,-24932(gp)
 c0032d8:	10c03fcc 	andi	r3,r2,255
 c0032dc:	008300b4 	movhi	r2,3074
 c0032e0:	10b2ce04 	addi	r2,r2,-13512
 c0032e4:	180690fa 	slli	r3,r3,3
 c0032e8:	10c5883a 	add	r2,r2,r3
 c0032ec:	10800017 	ldw	r2,0(r2)
 c0032f0:	10800204 	addi	r2,r2,8
 c0032f4:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 c0032f8:	10803fcc 	andi	r2,r2,255
 c0032fc:	d8800015 	stw	r2,0(sp)
 c003300:	e1ffff17 	ldw	r7,-4(fp)
 c003304:	01800204 	movi	r6,8
 c003308:	01400044 	movi	r5,1
 c00330c:	c0040540 	call	c004054 <XferInTransfer>
 c003310:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	return (rcode);
 c003314:	e0bffe03 	ldbu	r2,-8(fp)
}
 c003318:	e037883a 	mov	sp,fp
 c00331c:	dfc00117 	ldw	ra,4(sp)
 c003320:	df000017 	ldw	fp,0(sp)
 c003324:	dec00204 	addi	sp,sp,8
 c003328:	f800283a 	ret

0c00332c <kbdPoll>:
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
 c00332c:	defffb04 	addi	sp,sp,-20
 c003330:	dfc00415 	stw	ra,16(sp)
 c003334:	df000315 	stw	fp,12(sp)
 c003338:	df000304 	addi	fp,sp,12
 c00333c:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 c003340:	d0a7a703 	ldbu	r2,-24932(gp)
 c003344:	10803fcc 	andi	r2,r2,255
 c003348:	100b883a 	mov	r5,r2
 c00334c:	01003804 	movi	r4,224
 c003350:	c0034800 	call	c003480 <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 c003354:	d0a7a703 	ldbu	r2,-24932(gp)
 c003358:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 c00335c:	d0a7a703 	ldbu	r2,-24932(gp)
 c003360:	10c03fcc 	andi	r3,r2,255
 c003364:	008300b4 	movhi	r2,3074
 c003368:	10b2ce04 	addi	r2,r2,-13512
 c00336c:	180690fa 	slli	r3,r3,3
 c003370:	10c5883a 	add	r2,r2,r3
 c003374:	10800017 	ldw	r2,0(r2)
 c003378:	10800204 	addi	r2,r2,8
 c00337c:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 c003380:	10803fcc 	andi	r2,r2,255
 c003384:	d8800015 	stw	r2,0(sp)
 c003388:	e1ffff17 	ldw	r7,-4(fp)
 c00338c:	01800204 	movi	r6,8
 c003390:	01400044 	movi	r5,1
 c003394:	c0040540 	call	c004054 <XferInTransfer>
 c003398:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	return (rcode);
 c00339c:	e0bffe03 	ldbu	r2,-8(fp)
}
 c0033a0:	e037883a 	mov	sp,fp
 c0033a4:	dfc00117 	ldw	ra,4(sp)
 c0033a8:	df000017 	ldw	fp,0(sp)
 c0033ac:	dec00204 	addi	sp,sp,8
 c0033b0:	f800283a 	ret

0c0033b4 <HIDMEventHandler>:
BOOL HIDMEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 c0033b4:	defffb04 	addi	sp,sp,-20
 c0033b8:	df000415 	stw	fp,16(sp)
 c0033bc:	df000404 	addi	fp,sp,16
 c0033c0:	2007883a 	mov	r3,r4
 c0033c4:	2805883a 	mov	r2,r5
 c0033c8:	e1bffe15 	stw	r6,-8(fp)
 c0033cc:	e1ffff15 	stw	r7,-4(fp)
 c0033d0:	e0fffc05 	stb	r3,-16(fp)
 c0033d4:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
 c0033d8:	0005883a 	mov	r2,zero
}
 c0033dc:	e037883a 	mov	sp,fp
 c0033e0:	df000017 	ldw	fp,0(sp)
 c0033e4:	dec00104 	addi	sp,sp,4
 c0033e8:	f800283a 	ret

0c0033ec <HIDKEventHandler>:
BOOL HIDKEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 c0033ec:	defffb04 	addi	sp,sp,-20
 c0033f0:	df000415 	stw	fp,16(sp)
 c0033f4:	df000404 	addi	fp,sp,16
 c0033f8:	2007883a 	mov	r3,r4
 c0033fc:	2805883a 	mov	r2,r5
 c003400:	e1bffe15 	stw	r6,-8(fp)
 c003404:	e1ffff15 	stw	r7,-4(fp)
 c003408:	e0fffc05 	stb	r3,-16(fp)
 c00340c:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
 c003410:	0005883a 	mov	r2,zero
}
 c003414:	e037883a 	mov	sp,fp
 c003418:	df000017 	ldw	fp,0(sp)
 c00341c:	dec00104 	addi	sp,sp,4
 c003420:	f800283a 	ret

0c003424 <SPI_init>:
//variables and data structures
//External variables
extern BYTE usb_task_state;

/* Functions    */
void SPI_init(BYTE sync_mode, BYTE bus_mode, BYTE smp_phase) {
 c003424:	defffc04 	addi	sp,sp,-16
 c003428:	df000315 	stw	fp,12(sp)
 c00342c:	df000304 	addi	fp,sp,12
 c003430:	2807883a 	mov	r3,r5
 c003434:	3005883a 	mov	r2,r6
 c003438:	e13ffd05 	stb	r4,-12(fp)
 c00343c:	e0fffe05 	stb	r3,-8(fp)
 c003440:	e0bfff05 	stb	r2,-4(fp)
	//Don't need to initialize SPI port, already ready to go with BSP
}
 c003444:	0001883a 	nop
 c003448:	e037883a 	mov	sp,fp
 c00344c:	df000017 	ldw	fp,0(sp)
 c003450:	dec00104 	addi	sp,sp,4
 c003454:	f800283a 	ret

0c003458 <SPI_wr>:

//writes single byte to MAX3421E via SPI, simultanously reads status register and returns it
BYTE SPI_wr(BYTE data) {
 c003458:	defffe04 	addi	sp,sp,-8
 c00345c:	df000115 	stw	fp,4(sp)
 c003460:	df000104 	addi	fp,sp,4
 c003464:	2005883a 	mov	r2,r4
 c003468:	e0bfff05 	stb	r2,-4(fp)
	//This function is never used by the code, so you do not need to fill it in
}
 c00346c:	0001883a 	nop
 c003470:	e037883a 	mov	sp,fp
 c003474:	df000017 	ldw	fp,0(sp)
 c003478:	dec00104 	addi	sp,sp,4
 c00347c:	f800283a 	ret

0c003480 <MAXreg_wr>:
//writes register to MAX3421E via SPI
void MAXreg_wr(BYTE reg, BYTE val) {
 c003480:	defff704 	addi	sp,sp,-36
 c003484:	dfc00815 	stw	ra,32(sp)
 c003488:	df000715 	stw	fp,28(sp)
 c00348c:	df000704 	addi	fp,sp,28
 c003490:	2007883a 	mov	r3,r4
 c003494:	2805883a 	mov	r2,r5
 c003498:	e0fffe05 	stb	r3,-8(fp)
 c00349c:	e0bfff05 	stb	r2,-4(fp)
	//write val via SPI
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	BYTE array[2];
	array[0]=(reg+2);
 c0034a0:	e0bffe03 	ldbu	r2,-8(fp)
 c0034a4:	10800084 	addi	r2,r2,2
 c0034a8:	e0bffd05 	stb	r2,-12(fp)
	array[1]=val;
 c0034ac:	e0bfff03 	ldbu	r2,-4(fp)
 c0034b0:	e0bffd45 	stb	r2,-11(fp)
	int retura=alt_avalon_spi_command(0xc0,0,2,array,0,0,0);
 c0034b4:	e0bffd04 	addi	r2,fp,-12
 c0034b8:	d8000215 	stw	zero,8(sp)
 c0034bc:	d8000115 	stw	zero,4(sp)
 c0034c0:	d8000015 	stw	zero,0(sp)
 c0034c4:	100f883a 	mov	r7,r2
 c0034c8:	01800084 	movi	r6,2
 c0034cc:	000b883a 	mov	r5,zero
 c0034d0:	01003004 	movi	r4,192
 c0034d4:	c0170500 	call	c017050 <alt_avalon_spi_command>
 c0034d8:	e0bffc15 	stw	r2,-16(fp)
			if (retura<0){alt_printf("errpr\n");}
 c0034dc:	e0bffc17 	ldw	r2,-16(fp)
 c0034e0:	1000030e 	bge	r2,zero,c0034f0 <MAXreg_wr+0x70>
 c0034e4:	010300b4 	movhi	r4,3074
 c0034e8:	21225304 	addi	r4,r4,-30388
 c0034ec:	c015d2c0 	call	c015d2c <alt_printf>


}
 c0034f0:	0001883a 	nop
 c0034f4:	e037883a 	mov	sp,fp
 c0034f8:	dfc00117 	ldw	ra,4(sp)
 c0034fc:	df000017 	ldw	fp,0(sp)
 c003500:	dec00204 	addi	sp,sp,8
 c003504:	f800283a 	ret

0c003508 <MAXbytes_wr>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_wr(BYTE reg, BYTE nbytes, BYTE* data) {
 c003508:	defff304 	addi	sp,sp,-52
 c00350c:	dfc00c15 	stw	ra,48(sp)
 c003510:	df000b15 	stw	fp,44(sp)
 c003514:	dc000a15 	stw	r16,40(sp)
 c003518:	df000b04 	addi	fp,sp,44
 c00351c:	201b883a 	mov	r13,r4
 c003520:	2809883a 	mov	r4,r5
 c003524:	e1bffe15 	stw	r6,-8(fp)
 c003528:	e37ffc05 	stb	r13,-16(fp)
 c00352c:	e13ffd05 	stb	r4,-12(fp)
 c003530:	d809883a 	mov	r4,sp
 c003534:	2021883a 	mov	r16,r4
	//write data[n] via SPI, where n goes from 0 to nbytes-1
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0  print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	BYTE array[nbytes+1];
 c003538:	e13ffd03 	ldbu	r4,-12(fp)
 c00353c:	21000044 	addi	r4,r4,1
 c003540:	217fffc4 	addi	r5,r4,-1
 c003544:	e17ff915 	stw	r5,-28(fp)
 c003548:	200b883a 	mov	r5,r4
 c00354c:	2817883a 	mov	r11,r5
 c003550:	0019883a 	mov	r12,zero
 c003554:	580ad77a 	srli	r5,r11,29
 c003558:	601090fa 	slli	r8,r12,3
 c00355c:	2a10b03a 	or	r8,r5,r8
 c003560:	580e90fa 	slli	r7,r11,3
 c003564:	200b883a 	mov	r5,r4
 c003568:	2813883a 	mov	r9,r5
 c00356c:	0015883a 	mov	r10,zero
 c003570:	480ad77a 	srli	r5,r9,29
 c003574:	500690fa 	slli	r3,r10,3
 c003578:	28c6b03a 	or	r3,r5,r3
 c00357c:	480490fa 	slli	r2,r9,3
 c003580:	2005883a 	mov	r2,r4
 c003584:	108000c4 	addi	r2,r2,3
 c003588:	1004d0ba 	srli	r2,r2,2
 c00358c:	1085883a 	add	r2,r2,r2
 c003590:	1085883a 	add	r2,r2,r2
 c003594:	d8b7c83a 	sub	sp,sp,r2
 c003598:	d8800304 	addi	r2,sp,12
 c00359c:	1005883a 	mov	r2,r2
 c0035a0:	e0bffa15 	stw	r2,-24(fp)
	array[0]=reg+2;
 c0035a4:	e0bffc03 	ldbu	r2,-16(fp)
 c0035a8:	10800084 	addi	r2,r2,2
 c0035ac:	1007883a 	mov	r3,r2
 c0035b0:	e0bffa17 	ldw	r2,-24(fp)
 c0035b4:	10c00005 	stb	r3,0(r2)
	for (int i=1;i<=nbytes;i++){
 c0035b8:	00800044 	movi	r2,1
 c0035bc:	e0bff815 	stw	r2,-32(fp)
 c0035c0:	00000c06 	br	c0035f4 <MAXbytes_wr+0xec>
		array[i]=data[i-1];
 c0035c4:	e0bff817 	ldw	r2,-32(fp)
 c0035c8:	10bfffc4 	addi	r2,r2,-1
 c0035cc:	e0fffe17 	ldw	r3,-8(fp)
 c0035d0:	1885883a 	add	r2,r3,r2
 c0035d4:	10c00003 	ldbu	r3,0(r2)
 c0035d8:	e13ffa17 	ldw	r4,-24(fp)
 c0035dc:	e0bff817 	ldw	r2,-32(fp)
 c0035e0:	2085883a 	add	r2,r4,r2
 c0035e4:	10c00005 	stb	r3,0(r2)
	//if return code < 0  print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	BYTE array[nbytes+1];
	array[0]=reg+2;
	for (int i=1;i<=nbytes;i++){
 c0035e8:	e0bff817 	ldw	r2,-32(fp)
 c0035ec:	10800044 	addi	r2,r2,1
 c0035f0:	e0bff815 	stw	r2,-32(fp)
 c0035f4:	e0fffd03 	ldbu	r3,-12(fp)
 c0035f8:	e0bff817 	ldw	r2,-32(fp)
 c0035fc:	18bff10e 	bge	r3,r2,c0035c4 <__alt_data_end+0xfc0035c4>
		array[i]=data[i-1];
	}
	int retura=alt_avalon_spi_command(0xc0,0,nbytes+1,array,0,0,0);
 c003600:	e0bffd03 	ldbu	r2,-12(fp)
 c003604:	10800044 	addi	r2,r2,1
 c003608:	1007883a 	mov	r3,r2
 c00360c:	e0bffa17 	ldw	r2,-24(fp)
 c003610:	d8000215 	stw	zero,8(sp)
 c003614:	d8000115 	stw	zero,4(sp)
 c003618:	d8000015 	stw	zero,0(sp)
 c00361c:	100f883a 	mov	r7,r2
 c003620:	180d883a 	mov	r6,r3
 c003624:	000b883a 	mov	r5,zero
 c003628:	01003004 	movi	r4,192
 c00362c:	c0170500 	call	c017050 <alt_avalon_spi_command>
 c003630:	e0bffb15 	stw	r2,-20(fp)
				if (retura<0){alt_printf("errpr\n");}
 c003634:	e0bffb17 	ldw	r2,-20(fp)
 c003638:	1000030e 	bge	r2,zero,c003648 <MAXbytes_wr+0x140>
 c00363c:	010300b4 	movhi	r4,3074
 c003640:	21225304 	addi	r4,r4,-30388
 c003644:	c015d2c0 	call	c015d2c <alt_printf>
				return (data+nbytes);
 c003648:	e0bffd03 	ldbu	r2,-12(fp)
 c00364c:	e0fffe17 	ldw	r3,-8(fp)
 c003650:	1885883a 	add	r2,r3,r2
 c003654:	8037883a 	mov	sp,r16
}
 c003658:	e6ffff04 	addi	sp,fp,-4
 c00365c:	dfc00217 	ldw	ra,8(sp)
 c003660:	df000117 	ldw	fp,4(sp)
 c003664:	dc000017 	ldw	r16,0(sp)
 c003668:	dec00304 	addi	sp,sp,12
 c00366c:	f800283a 	ret

0c003670 <MAXreg_rd>:

//reads register from MAX3421E via SPI
BYTE MAXreg_rd(BYTE reg) {
 c003670:	defff804 	addi	sp,sp,-32
 c003674:	dfc00715 	stw	ra,28(sp)
 c003678:	df000615 	stw	fp,24(sp)
 c00367c:	df000604 	addi	fp,sp,24
 c003680:	2005883a 	mov	r2,r4
 c003684:	e0bfff05 	stb	r2,-4(fp)
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return val
BYTE val;
	int retura=alt_avalon_spi_command(0xc0,0,1,&reg,1,&val,0);
 c003688:	e0ffff04 	addi	r3,fp,-4
 c00368c:	d8000215 	stw	zero,8(sp)
 c003690:	e0bffe04 	addi	r2,fp,-8
 c003694:	d8800115 	stw	r2,4(sp)
 c003698:	00800044 	movi	r2,1
 c00369c:	d8800015 	stw	r2,0(sp)
 c0036a0:	180f883a 	mov	r7,r3
 c0036a4:	01800044 	movi	r6,1
 c0036a8:	000b883a 	mov	r5,zero
 c0036ac:	01003004 	movi	r4,192
 c0036b0:	c0170500 	call	c017050 <alt_avalon_spi_command>
 c0036b4:	e0bffd15 	stw	r2,-12(fp)
	if (retura<0){alt_printf("errpr\n");}
 c0036b8:	e0bffd17 	ldw	r2,-12(fp)
 c0036bc:	1000030e 	bge	r2,zero,c0036cc <MAXreg_rd+0x5c>
 c0036c0:	010300b4 	movhi	r4,3074
 c0036c4:	21225304 	addi	r4,r4,-30388
 c0036c8:	c015d2c0 	call	c015d2c <alt_printf>
	return val;
 c0036cc:	e0bffe03 	ldbu	r2,-8(fp)

}
 c0036d0:	e037883a 	mov	sp,fp
 c0036d4:	dfc00117 	ldw	ra,4(sp)
 c0036d8:	df000017 	ldw	fp,0(sp)
 c0036dc:	dec00204 	addi	sp,sp,8
 c0036e0:	f800283a 	ret

0c0036e4 <MAXbytes_rd>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_rd(BYTE reg, BYTE nbytes, BYTE* data) {
 c0036e4:	defff404 	addi	sp,sp,-48
 c0036e8:	dfc00b15 	stw	ra,44(sp)
 c0036ec:	df000a15 	stw	fp,40(sp)
 c0036f0:	dc000915 	stw	r16,36(sp)
 c0036f4:	df000a04 	addi	fp,sp,40
 c0036f8:	201b883a 	mov	r13,r4
 c0036fc:	2809883a 	mov	r4,r5
 c003700:	e1bffe15 	stw	r6,-8(fp)
 c003704:	e37ffc05 	stb	r13,-16(fp)
 c003708:	e13ffd05 	stb	r4,-12(fp)
 c00370c:	d809883a 	mov	r4,sp
 c003710:	2021883a 	mov	r16,r4
	//read data[n] from SPI, where n goes from 0 to nbytes-1
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	BYTE array[nbytes];
 c003714:	e13ffd03 	ldbu	r4,-12(fp)
 c003718:	21403fcc 	andi	r5,r4,255
 c00371c:	297fffc4 	addi	r5,r5,-1
 c003720:	e17ff915 	stw	r5,-28(fp)
 c003724:	21403fcc 	andi	r5,r4,255
 c003728:	2817883a 	mov	r11,r5
 c00372c:	0019883a 	mov	r12,zero
 c003730:	580ad77a 	srli	r5,r11,29
 c003734:	601090fa 	slli	r8,r12,3
 c003738:	2a10b03a 	or	r8,r5,r8
 c00373c:	580e90fa 	slli	r7,r11,3
 c003740:	21403fcc 	andi	r5,r4,255
 c003744:	2813883a 	mov	r9,r5
 c003748:	0015883a 	mov	r10,zero
 c00374c:	480ad77a 	srli	r5,r9,29
 c003750:	500690fa 	slli	r3,r10,3
 c003754:	28c6b03a 	or	r3,r5,r3
 c003758:	480490fa 	slli	r2,r9,3
 c00375c:	20803fcc 	andi	r2,r4,255
 c003760:	108000c4 	addi	r2,r2,3
 c003764:	1004d0ba 	srli	r2,r2,2
 c003768:	1085883a 	add	r2,r2,r2
 c00376c:	1085883a 	add	r2,r2,r2
 c003770:	d8b7c83a 	sub	sp,sp,r2
 c003774:	d8800304 	addi	r2,sp,12
 c003778:	1005883a 	mov	r2,r2
 c00377c:	e0bffa15 	stw	r2,-24(fp)


		int retura=alt_avalon_spi_command(0xc0,0,1,&reg,nbytes,data,0);
 c003780:	e0bffd03 	ldbu	r2,-12(fp)
 c003784:	e13ffc04 	addi	r4,fp,-16
 c003788:	d8000215 	stw	zero,8(sp)
 c00378c:	e0fffe17 	ldw	r3,-8(fp)
 c003790:	d8c00115 	stw	r3,4(sp)
 c003794:	d8800015 	stw	r2,0(sp)
 c003798:	200f883a 	mov	r7,r4
 c00379c:	01800044 	movi	r6,1
 c0037a0:	000b883a 	mov	r5,zero
 c0037a4:	01003004 	movi	r4,192
 c0037a8:	c0170500 	call	c017050 <alt_avalon_spi_command>
 c0037ac:	e0bffb15 	stw	r2,-20(fp)
					if (retura<0){alt_printf("errpr\n");}
 c0037b0:	e0bffb17 	ldw	r2,-20(fp)
 c0037b4:	1000030e 	bge	r2,zero,c0037c4 <MAXbytes_rd+0xe0>
 c0037b8:	010300b4 	movhi	r4,3074
 c0037bc:	21225304 	addi	r4,r4,-30388
 c0037c0:	c015d2c0 	call	c015d2c <alt_printf>
					return (data+nbytes);
 c0037c4:	e0bffd03 	ldbu	r2,-12(fp)
 c0037c8:	e0fffe17 	ldw	r3,-8(fp)
 c0037cc:	1885883a 	add	r2,r3,r2
 c0037d0:	8037883a 	mov	sp,r16
	}
 c0037d4:	e6ffff04 	addi	sp,fp,-4
 c0037d8:	dfc00217 	ldw	ra,8(sp)
 c0037dc:	df000117 	ldw	fp,4(sp)
 c0037e0:	dc000017 	ldw	r16,0(sp)
 c0037e4:	dec00304 	addi	sp,sp,12
 c0037e8:	f800283a 	ret

0c0037ec <MAX3421E_reset>:

/* reset MAX3421E using chip reset bit. SPI configuration is not affected   */
void MAX3421E_reset(void) {
 c0037ec:	defffd04 	addi	sp,sp,-12
 c0037f0:	dfc00215 	stw	ra,8(sp)
 c0037f4:	df000115 	stw	fp,4(sp)
 c0037f8:	df000104 	addi	fp,sp,4
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
 c0037fc:	0007883a 	mov	r3,zero
 c003800:	00805804 	movi	r2,352
 c003804:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
 c003808:	010003f4 	movhi	r4,15
 c00380c:	21109004 	addi	r4,r4,16960
 c003810:	c0163ac0 	call	c0163ac <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
 c003814:	00c00044 	movi	r3,1
 c003818:	00805804 	movi	r2,352
 c00381c:	10c00035 	stwio	r3,0(r2)
	BYTE tmp = 0;
 c003820:	e03fff05 	stb	zero,-4(fp)
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
 c003824:	01400804 	movi	r5,32
 c003828:	01001e04 	movi	r4,120
 c00382c:	c0034800 	call	c003480 <MAXreg_wr>
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
 c003830:	000b883a 	mov	r5,zero
 c003834:	01001e04 	movi	r4,120
 c003838:	c0034800 	call	c003480 <MAXreg_wr>
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 c00383c:	00000806 	br	c003860 <MAX3421E_reset+0x74>
		tmp++;                                      //timeout after 256 attempts
 c003840:	e0bfff03 	ldbu	r2,-4(fp)
 c003844:	10800044 	addi	r2,r2,1
 c003848:	e0bfff05 	stb	r2,-4(fp)
		if (tmp == 0) {
 c00384c:	e0bfff03 	ldbu	r2,-4(fp)
 c003850:	1000031e 	bne	r2,zero,c003860 <MAX3421E_reset+0x74>
			printf("reset timeout!");
 c003854:	010300b4 	movhi	r4,3074
 c003858:	21225504 	addi	r4,r4,-30380
 c00385c:	c0056500 	call	c005650 <printf>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	BYTE tmp = 0;
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 c003860:	01001a04 	movi	r4,104
 c003864:	c0036700 	call	c003670 <MAXreg_rd>
 c003868:	10803fcc 	andi	r2,r2,255
 c00386c:	1080004c 	andi	r2,r2,1
 c003870:	103ff326 	beq	r2,zero,c003840 <__alt_data_end+0xfc003840>
		tmp++;                                      //timeout after 256 attempts
		if (tmp == 0) {
			printf("reset timeout!");
		}
	}
}
 c003874:	0001883a 	nop
 c003878:	e037883a 	mov	sp,fp
 c00387c:	dfc00117 	ldw	ra,4(sp)
 c003880:	df000017 	ldw	fp,0(sp)
 c003884:	dec00204 	addi	sp,sp,8
 c003888:	f800283a 	ret

0c00388c <Vbus_power>:
/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
BOOL Vbus_power(BOOL action) {
 c00388c:	defffe04 	addi	sp,sp,-8
 c003890:	df000115 	stw	fp,4(sp)
 c003894:	df000104 	addi	fp,sp,4
 c003898:	e13fff15 	stw	r4,-4(fp)
	// power on/off successful
	return (1);
 c00389c:	00800044 	movi	r2,1
}
 c0038a0:	e037883a 	mov	sp,fp
 c0038a4:	df000017 	ldw	fp,0(sp)
 c0038a8:	dec00104 	addi	sp,sp,4
 c0038ac:	f800283a 	ret

0c0038b0 <MAX_busprobe>:

/* probe bus to determine device presense and speed */
void MAX_busprobe(void) {
 c0038b0:	defffd04 	addi	sp,sp,-12
 c0038b4:	dfc00215 	stw	ra,8(sp)
 c0038b8:	df000115 	stw	fp,4(sp)
 c0038bc:	df000104 	addi	fp,sp,4
	BYTE bus_sample;

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
 c0038c0:	01003e04 	movi	r4,248
 c0038c4:	c0036700 	call	c003670 <MAXreg_rd>
 c0038c8:	e0bfff05 	stb	r2,-4(fp)
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte
 c0038cc:	e0ffff03 	ldbu	r3,-4(fp)
 c0038d0:	00bff004 	movi	r2,-64
 c0038d4:	1884703a 	and	r2,r3,r2
 c0038d8:	e0bfff05 	stb	r2,-4(fp)

	switch (bus_sample) {                   //start full-speed or low-speed host
 c0038dc:	e0bfff03 	ldbu	r2,-4(fp)
 c0038e0:	10c01020 	cmpeqi	r3,r2,64
 c0038e4:	1800221e 	bne	r3,zero,c003970 <MAX_busprobe+0xc0>
 c0038e8:	10c01048 	cmpgei	r3,r2,65
 c0038ec:	1800021e 	bne	r3,zero,c0038f8 <MAX_busprobe+0x48>
 c0038f0:	10003b26 	beq	r2,zero,c0039e0 <MAX_busprobe+0x130>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 c0038f4:	00004a06 	br	c003a20 <MAX_busprobe+0x170>

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
 c0038f8:	10c02020 	cmpeqi	r3,r2,128
 c0038fc:	1800031e 	bne	r3,zero,c00390c <MAX_busprobe+0x5c>
 c003900:	10803020 	cmpeqi	r2,r2,192
 c003904:	1000331e 	bne	r2,zero,c0039d4 <MAX_busprobe+0x124>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 c003908:	00004506 	br	c003a20 <MAX_busprobe+0x170>
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
	case ( bmJSTATUS):
		/*kludgy*/
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 c00390c:	d0a00903 	ldbu	r2,-32732(gp)
 c003910:	10803fcc 	andi	r2,r2,255
 c003914:	108004e0 	cmpeqi	r2,r2,19
 c003918:	10003e1e 	bne	r2,zero,c003a14 <MAX_busprobe+0x164>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 c00391c:	01003604 	movi	r4,216
 c003920:	c0036700 	call	c003670 <MAXreg_rd>
 c003924:	10803fcc 	andi	r2,r2,255
 c003928:	1080008c 	andi	r2,r2,2
 c00392c:	1000071e 	bne	r2,zero,c00394c <MAX_busprobe+0x9c>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 c003930:	01403244 	movi	r5,201
 c003934:	01003604 	movi	r4,216
 c003938:	c0034800 	call	c003480 <MAXreg_wr>
				printf("Starting in full speed\n");
 c00393c:	010300b4 	movhi	r4,3074
 c003940:	21225904 	addi	r4,r4,-30364
 c003944:	c00574c0 	call	c00574c <puts>
 c003948:	00000606 	br	c003964 <MAX_busprobe+0xb4>
			} else {
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
 c00394c:	014032c4 	movi	r5,203
 c003950:	01003604 	movi	r4,216
 c003954:	c0034800 	call	c003480 <MAXreg_wr>
				printf("Starting in low speed\n");
 c003958:	010300b4 	movhi	r4,3074
 c00395c:	21225f04 	addi	r4,r4,-30340
 c003960:	c00574c0 	call	c00574c <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 c003964:	00800404 	movi	r2,16
 c003968:	d0a00905 	stb	r2,-32732(gp)
		}
		break;
 c00396c:	00002906 	br	c003a14 <MAX_busprobe+0x164>
	case ( bmKSTATUS):
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 c003970:	d0a00903 	ldbu	r2,-32732(gp)
 c003974:	10803fcc 	andi	r2,r2,255
 c003978:	108004e0 	cmpeqi	r2,r2,19
 c00397c:	1000271e 	bne	r2,zero,c003a1c <MAX_busprobe+0x16c>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 c003980:	01003604 	movi	r4,216
 c003984:	c0036700 	call	c003670 <MAXreg_rd>
 c003988:	10803fcc 	andi	r2,r2,255
 c00398c:	1080008c 	andi	r2,r2,2
 c003990:	1000071e 	bne	r2,zero,c0039b0 <MAX_busprobe+0x100>
				MAXreg_wr( rMODE, MODE_LS_HOST);   //start low-speed host
 c003994:	014032c4 	movi	r5,203
 c003998:	01003604 	movi	r4,216
 c00399c:	c0034800 	call	c003480 <MAXreg_wr>
				printf("Starting in low speed\n");
 c0039a0:	010300b4 	movhi	r4,3074
 c0039a4:	21225f04 	addi	r4,r4,-30340
 c0039a8:	c00574c0 	call	c00574c <puts>
 c0039ac:	00000606 	br	c0039c8 <MAX_busprobe+0x118>
			} else {
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 c0039b0:	01403244 	movi	r5,201
 c0039b4:	01003604 	movi	r4,216
 c0039b8:	c0034800 	call	c003480 <MAXreg_wr>
				printf("Starting in full speed\n");
 c0039bc:	010300b4 	movhi	r4,3074
 c0039c0:	21225904 	addi	r4,r4,-30364
 c0039c4:	c00574c0 	call	c00574c <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 c0039c8:	00800404 	movi	r2,16
 c0039cc:	d0a00905 	stb	r2,-32732(gp)
		}
		break;
 c0039d0:	00001206 	br	c003a1c <MAX_busprobe+0x16c>
	case ( bmSE1):              //illegal state
		usb_task_state = ( USB_DETACHED_SUBSTATE_ILLEGAL);
 c0039d4:	00800104 	movi	r2,4
 c0039d8:	d0a00905 	stb	r2,-32732(gp)
		break;
 c0039dc:	00001006 	br	c003a20 <MAX_busprobe+0x170>
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
 c0039e0:	d0a00903 	ldbu	r2,-32732(gp)
 c0039e4:	10803fcc 	andi	r2,r2,255
 c0039e8:	10803c0c 	andi	r2,r2,240
 c0039ec:	10000326 	beq	r2,zero,c0039fc <MAX_busprobe+0x14c>
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
 c0039f0:	00800044 	movi	r2,1
 c0039f4:	d0a00905 	stb	r2,-32732(gp)
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
 c0039f8:	00000906 	br	c003a20 <MAX_busprobe+0x170>
		break;
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
 c0039fc:	01403244 	movi	r5,201
 c003a00:	01003604 	movi	r4,216
 c003a04:	c0034800 	call	c003480 <MAXreg_wr>
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
 c003a08:	008000c4 	movi	r2,3
 c003a0c:	d0a00905 	stb	r2,-32732(gp)
		}
		break;
 c003a10:	00000306 	br	c003a20 <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
				printf("Starting in low speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
 c003a14:	0001883a 	nop
 c003a18:	00000106 	br	c003a20 <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
				printf("Starting in full speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
 c003a1c:	0001883a 	nop
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 c003a20:	0001883a 	nop
 c003a24:	e037883a 	mov	sp,fp
 c003a28:	dfc00117 	ldw	ra,4(sp)
 c003a2c:	df000017 	ldw	fp,0(sp)
 c003a30:	dec00204 	addi	sp,sp,8
 c003a34:	f800283a 	ret

0c003a38 <MAX3421E_init>:
/* MAX3421E initialization after power-on   */
void MAX3421E_init(void) {
 c003a38:	defffe04 	addi	sp,sp,-8
 c003a3c:	dfc00115 	stw	ra,4(sp)
 c003a40:	df000015 	stw	fp,0(sp)
 c003a44:	d839883a 	mov	fp,sp
	/* Configure full-duplex SPI, interrupt pulse   */
	MAXreg_wr( rPINCTL, (bmFDUPSPI + bmINTLEVEL + bmGPXB)); //Full-duplex SPI, level interrupt, GPX
 c003a48:	01400684 	movi	r5,26
 c003a4c:	01002204 	movi	r4,136
 c003a50:	c0034800 	call	c003480 <MAXreg_wr>
	MAX3421E_reset();                                //stop/start the oscillator
 c003a54:	c0037ec0 	call	c0037ec <MAX3421E_reset>
	/* configure power switch   */
	Vbus_power( OFF);                                      //turn Vbus power off
 c003a58:	0009883a 	mov	r4,zero
 c003a5c:	c00388c0 	call	c00388c <Vbus_power>
	MAXreg_wr( rGPINIEN, bmGPINIEN7); //enable interrupt on GPIN7 (power switch overload flag)
 c003a60:	01402004 	movi	r5,128
 c003a64:	01002e04 	movi	r4,184
 c003a68:	c0034800 	call	c003480 <MAXreg_wr>
	Vbus_power( ON);
 c003a6c:	01000044 	movi	r4,1
 c003a70:	c00388c0 	call	c00388c <Vbus_power>
	/* configure host operation */
	MAXreg_wr( rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ); // set pull-downs, SOF, Host, Separate GPIN IRQ on GPX
 c003a74:	01403444 	movi	r5,209
 c003a78:	01003604 	movi	r4,216
 c003a7c:	c0034800 	call	c003480 <MAXreg_wr>
	//MAXreg_wr( rHIEN, bmFRAMEIE|bmCONDETIE|bmBUSEVENTIE );                      // enable SOF, connection detection, bus event IRQs
	MAXreg_wr( rHIEN, bmCONDETIE);                        //connection detection
 c003a80:	01400804 	movi	r5,32
 c003a84:	01003404 	movi	r4,208
 c003a88:	c0034800 	call	c003480 <MAXreg_wr>
	/* HXFRDNIRQ is checked in Dispatch packet function */
	MAXreg_wr(rHCTL, bmSAMPLEBUS);        // update the JSTATUS and KSTATUS bits
 c003a8c:	01400104 	movi	r5,4
 c003a90:	01003a04 	movi	r4,232
 c003a94:	c0034800 	call	c003480 <MAXreg_wr>
	MAX_busprobe();                             //check if anything is connected
 c003a98:	c0038b00 	call	c0038b0 <MAX_busprobe>
	MAXreg_wr( rHIRQ, bmCONDETIRQ); //clear connection detect interrupt                 
 c003a9c:	01400804 	movi	r5,32
 c003aa0:	01003204 	movi	r4,200
 c003aa4:	c0034800 	call	c003480 <MAXreg_wr>
	MAXreg_wr( rCPUCTL, 0x01);                            //enable interrupt pin
 c003aa8:	01400044 	movi	r5,1
 c003aac:	01002004 	movi	r4,128
 c003ab0:	c0034800 	call	c003480 <MAXreg_wr>
}
 c003ab4:	0001883a 	nop
 c003ab8:	e037883a 	mov	sp,fp
 c003abc:	dfc00117 	ldw	ra,4(sp)
 c003ac0:	df000017 	ldw	fp,0(sp)
 c003ac4:	dec00204 	addi	sp,sp,8
 c003ac8:	f800283a 	ret

0c003acc <MAX3421E_Task>:

/* MAX3421 state change task and interrupt handler */
void MAX3421E_Task(void) {
 c003acc:	defffe04 	addi	sp,sp,-8
 c003ad0:	dfc00115 	stw	ra,4(sp)
 c003ad4:	df000015 	stw	fp,0(sp)
 c003ad8:	d839883a 	mov	fp,sp
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
 c003adc:	00806404 	movi	r2,400
 c003ae0:	10800037 	ldwio	r2,0(r2)
 c003ae4:	1000041e 	bne	r2,zero,c003af8 <MAX3421E_Task+0x2c>
		printf("MAX interrupt\n\r");
 c003ae8:	010300b4 	movhi	r4,3074
 c003aec:	21226504 	addi	r4,r4,-30316
 c003af0:	c0056500 	call	c005650 <printf>
		MaxIntHandler();
 c003af4:	c003b300 	call	c003b30 <MaxIntHandler>
	}
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_GPX_BASE) == 1) {
 c003af8:	00806004 	movi	r2,384
 c003afc:	10800037 	ldwio	r2,0(r2)
 c003b00:	10800058 	cmpnei	r2,r2,1
 c003b04:	1000041e 	bne	r2,zero,c003b18 <MAX3421E_Task+0x4c>
		printf("GPX interrupt\n\r");
 c003b08:	010300b4 	movhi	r4,3074
 c003b0c:	21226904 	addi	r4,r4,-30300
 c003b10:	c0056500 	call	c005650 <printf>
		MaxGpxHandler();
 c003b14:	c003bfc0 	call	c003bfc <MaxGpxHandler>
	}
}
 c003b18:	0001883a 	nop
 c003b1c:	e037883a 	mov	sp,fp
 c003b20:	dfc00117 	ldw	ra,4(sp)
 c003b24:	df000017 	ldw	fp,0(sp)
 c003b28:	dec00204 	addi	sp,sp,8
 c003b2c:	f800283a 	ret

0c003b30 <MaxIntHandler>:

void MaxIntHandler(void) {
 c003b30:	defffd04 	addi	sp,sp,-12
 c003b34:	dfc00215 	stw	ra,8(sp)
 c003b38:	df000115 	stw	fp,4(sp)
 c003b3c:	df000104 	addi	fp,sp,4
	BYTE HIRQ;
	BYTE HIRQ_sendback = 0x00;
 c003b40:	e03fff05 	stb	zero,-4(fp)
	HIRQ = MAXreg_rd( rHIRQ);                  //determine interrupt source
 c003b44:	01003204 	movi	r4,200
 c003b48:	c0036700 	call	c003670 <MAXreg_rd>
 c003b4c:	e0bfff45 	stb	r2,-3(fp)
	printf("IRQ: %x\n", HIRQ);
 c003b50:	e0bfff43 	ldbu	r2,-3(fp)
 c003b54:	100b883a 	mov	r5,r2
 c003b58:	010300b4 	movhi	r4,3074
 c003b5c:	21226d04 	addi	r4,r4,-30284
 c003b60:	c0056500 	call	c005650 <printf>
	if (HIRQ & bmFRAMEIRQ) {                   //->1ms SOF interrupt handler
 c003b64:	e0bfff43 	ldbu	r2,-3(fp)
 c003b68:	1080100c 	andi	r2,r2,64
 c003b6c:	10000326 	beq	r2,zero,c003b7c <MaxIntHandler+0x4c>
		HIRQ_sendback |= bmFRAMEIRQ;
 c003b70:	e0bfff03 	ldbu	r2,-4(fp)
 c003b74:	10801014 	ori	r2,r2,64
 c003b78:	e0bfff05 	stb	r2,-4(fp)
	}                   //end FRAMEIRQ handling

	if (HIRQ & bmCONDETIRQ) {
 c003b7c:	e0bfff43 	ldbu	r2,-3(fp)
 c003b80:	1080080c 	andi	r2,r2,32
 c003b84:	10000426 	beq	r2,zero,c003b98 <MaxIntHandler+0x68>
		MAX_busprobe();
 c003b88:	c0038b00 	call	c0038b0 <MAX_busprobe>
		HIRQ_sendback |= bmCONDETIRQ;      //set sendback to 1 to clear register
 c003b8c:	e0bfff03 	ldbu	r2,-4(fp)
 c003b90:	10800814 	ori	r2,r2,32
 c003b94:	e0bfff05 	stb	r2,-4(fp)
	}
	if (HIRQ & bmSNDBAVIRQ) //if the send buffer is clear (previous transfer completed without issue)
 c003b98:	e0bfff43 	ldbu	r2,-3(fp)
 c003b9c:	1080020c 	andi	r2,r2,8
 c003ba0:	10000326 	beq	r2,zero,c003bb0 <MaxIntHandler+0x80>
	{
		MAXreg_wr(rSNDBC, 0x00);//clear the send buffer (not really necessary, but clears interrupt)
 c003ba4:	000b883a 	mov	r5,zero
 c003ba8:	01000e04 	movi	r4,56
 c003bac:	c0034800 	call	c003480 <MAXreg_wr>
	}
	if (HIRQ & bmBUSEVENTIRQ) {           //bus event is either reset or suspend
 c003bb0:	e0bfff43 	ldbu	r2,-3(fp)
 c003bb4:	1080004c 	andi	r2,r2,1
 c003bb8:	10000626 	beq	r2,zero,c003bd4 <MaxIntHandler+0xa4>
		usb_task_state++;                       //advance USB task state machine
 c003bbc:	d0a00903 	ldbu	r2,-32732(gp)
 c003bc0:	10800044 	addi	r2,r2,1
 c003bc4:	d0a00905 	stb	r2,-32732(gp)
		HIRQ_sendback |= bmBUSEVENTIRQ;
 c003bc8:	e0bfff03 	ldbu	r2,-4(fp)
 c003bcc:	10800054 	ori	r2,r2,1
 c003bd0:	e0bfff05 	stb	r2,-4(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	MAXreg_wr( rHIRQ, HIRQ_sendback); //write '1' to CONDETIRQ to ack bus state change
 c003bd4:	e0bfff03 	ldbu	r2,-4(fp)
 c003bd8:	100b883a 	mov	r5,r2
 c003bdc:	01003204 	movi	r4,200
 c003be0:	c0034800 	call	c003480 <MAXreg_wr>
}
 c003be4:	0001883a 	nop
 c003be8:	e037883a 	mov	sp,fp
 c003bec:	dfc00117 	ldw	ra,4(sp)
 c003bf0:	df000017 	ldw	fp,0(sp)
 c003bf4:	dec00204 	addi	sp,sp,8
 c003bf8:	f800283a 	ret

0c003bfc <MaxGpxHandler>:

void MaxGpxHandler(void) {
 c003bfc:	defffd04 	addi	sp,sp,-12
 c003c00:	dfc00215 	stw	ra,8(sp)
 c003c04:	df000115 	stw	fp,4(sp)
 c003c08:	df000104 	addi	fp,sp,4
	BYTE GPINIRQ;
	GPINIRQ = MAXreg_rd( rGPINIRQ);            //read both IRQ registers
 c003c0c:	01002c04 	movi	r4,176
 c003c10:	c0036700 	call	c003670 <MAXreg_rd>
 c003c14:	e0bfff05 	stb	r2,-4(fp)
}
 c003c18:	0001883a 	nop
 c003c1c:	e037883a 	mov	sp,fp
 c003c20:	dfc00117 	ldw	ra,4(sp)
 c003c24:	df000017 	ldw	fp,0(sp)
 c003c28:	dec00204 	addi	sp,sp,8
 c003c2c:	f800283a 	ret

0c003c30 <XferCtrlReq>:
/* depending on request. Actual requests are defined as macros                                                                                      */
/* return codes:                */
/* 00       =   success         */
/* 01-0f    =   non-zero HRSLT  */
BYTE XferCtrlReq( BYTE addr, BYTE ep, BYTE bmReqType, BYTE bRequest, BYTE wValLo, BYTE wValHi, WORD wInd, WORD nbytes, BYTE* dataptr )
{
 c003c30:	defff104 	addi	sp,sp,-60
 c003c34:	dfc00e15 	stw	ra,56(sp)
 c003c38:	df000d15 	stw	fp,52(sp)
 c003c3c:	df000d04 	addi	fp,sp,52
 c003c40:	2015883a 	mov	r10,r4
 c003c44:	2813883a 	mov	r9,r5
 c003c48:	3011883a 	mov	r8,r6
 c003c4c:	380d883a 	mov	r6,r7
 c003c50:	e1400217 	ldw	r5,8(fp)
 c003c54:	e1000317 	ldw	r4,12(fp)
 c003c58:	e0c00417 	ldw	r3,16(fp)
 c003c5c:	e0800517 	ldw	r2,20(fp)
 c003c60:	e2bff805 	stb	r10,-32(fp)
 c003c64:	e27ff905 	stb	r9,-28(fp)
 c003c68:	e23ffa05 	stb	r8,-24(fp)
 c003c6c:	e1bffb05 	stb	r6,-20(fp)
 c003c70:	e17ffc05 	stb	r5,-16(fp)
 c003c74:	e13ffd05 	stb	r4,-12(fp)
 c003c78:	e0fffe0d 	sth	r3,-8(fp)
 c003c7c:	e0bfff0d 	sth	r2,-4(fp)
 BOOL direction = FALSE;        //request direction, IN or OUT
 c003c80:	e03ff415 	stw	zero,-48(fp)
 BYTE datastage = 1; //request data stage present or absent
 c003c84:	00800044 	movi	r2,1
 c003c88:	e0bff505 	stb	r2,-44(fp)
 BYTE rcode;
 SETUP_PKT setup_pkt;
    if( dataptr == NULL ) {
 c003c8c:	e0800617 	ldw	r2,24(fp)
 c003c90:	1000011e 	bne	r2,zero,c003c98 <XferCtrlReq+0x68>
        datastage = 0;
 c003c94:	e03ff505 	stb	zero,-44(fp)
    }
    MAXreg_wr( rPERADDR, addr );                    //set peripheral address
 c003c98:	e0bff803 	ldbu	r2,-32(fp)
 c003c9c:	100b883a 	mov	r5,r2
 c003ca0:	01003804 	movi	r4,224
 c003ca4:	c0034800 	call	c003480 <MAXreg_wr>
    /* fill in setup packet */
    if( bmReqType & 0x80 ) {
 c003ca8:	e0bffa03 	ldbu	r2,-24(fp)
 c003cac:	10803fcc 	andi	r2,r2,255
 c003cb0:	1080201c 	xori	r2,r2,128
 c003cb4:	10bfe004 	addi	r2,r2,-128
 c003cb8:	1000020e 	bge	r2,zero,c003cc4 <XferCtrlReq+0x94>
        direction = TRUE;                   		//determine request direction
 c003cbc:	00800044 	movi	r2,1
 c003cc0:	e0bff415 	stw	r2,-48(fp)
    }
    /* fill in setup packet */
    setup_pkt.ReqType_u.bmRequestType = bmReqType;
 c003cc4:	e0bffa03 	ldbu	r2,-24(fp)
 c003cc8:	e0bff585 	stb	r2,-42(fp)
    setup_pkt.bRequest = bRequest;
 c003ccc:	e0bffb03 	ldbu	r2,-20(fp)
 c003cd0:	e0bff5c5 	stb	r2,-41(fp)
    setup_pkt.wVal_u.wValueLo = wValLo;
 c003cd4:	e0bffc03 	ldbu	r2,-16(fp)
 c003cd8:	e0bff605 	stb	r2,-40(fp)
    setup_pkt.wVal_u.wValueHi = wValHi;
 c003cdc:	e0bffd03 	ldbu	r2,-12(fp)
 c003ce0:	e0bff645 	stb	r2,-39(fp)
    setup_pkt.wIndex = wInd;
 c003ce4:	e0bffe0b 	ldhu	r2,-8(fp)
 c003ce8:	e0bff68d 	sth	r2,-38(fp)
    setup_pkt.wLength = nbytes;
 c003cec:	e0bfff0b 	ldhu	r2,-4(fp)
 c003cf0:	e0bff70d 	sth	r2,-36(fp)
    MAXbytes_wr( rSUDFIFO, 8, (BYTE *)&setup_pkt );     //transfer to setup packet FIFO
 c003cf4:	e0bff584 	addi	r2,fp,-42
 c003cf8:	100d883a 	mov	r6,r2
 c003cfc:	01400204 	movi	r5,8
 c003d00:	01000804 	movi	r4,32
 c003d04:	c0035080 	call	c003508 <MAXbytes_wr>
    rcode = XferDispatchPkt( tokSETUP, ep );            //dispatch packet
 c003d08:	e0bff903 	ldbu	r2,-28(fp)
 c003d0c:	100b883a 	mov	r5,r2
 c003d10:	01000404 	movi	r4,16
 c003d14:	c003ed80 	call	c003ed8 <XferDispatchPkt>
 c003d18:	e0bff545 	stb	r2,-43(fp)
    if( rcode ) {                                       //return HRSLT if not zero
 c003d1c:	e0bff543 	ldbu	r2,-43(fp)
 c003d20:	10000226 	beq	r2,zero,c003d2c <XferCtrlReq+0xfc>
        return( rcode );
 c003d24:	e0bff543 	ldbu	r2,-43(fp)
 c003d28:	00000f06 	br	c003d68 <XferCtrlReq+0x138>
    }
    rcode = ctrl_xfers[ datastage ]( addr, ep, nbytes, dataptr, direction );    //call data stage or no data stage transfer
 c003d2c:	e0bff503 	ldbu	r2,-44(fp)
 c003d30:	1085883a 	add	r2,r2,r2
 c003d34:	1087883a 	add	r3,r2,r2
 c003d38:	d0a00704 	addi	r2,gp,-32740
 c003d3c:	1885883a 	add	r2,r3,r2
 c003d40:	10800017 	ldw	r2,0(r2)
 c003d44:	e13ff803 	ldbu	r4,-32(fp)
 c003d48:	e17ff903 	ldbu	r5,-28(fp)
 c003d4c:	e1bfff0b 	ldhu	r6,-4(fp)
 c003d50:	e0fff417 	ldw	r3,-48(fp)
 c003d54:	d8c00015 	stw	r3,0(sp)
 c003d58:	e1c00617 	ldw	r7,24(fp)
 c003d5c:	103ee83a 	callr	r2
 c003d60:	e0bff545 	stb	r2,-43(fp)
    return( rcode );
 c003d64:	e0bff543 	ldbu	r2,-43(fp)
}
 c003d68:	e037883a 	mov	sp,fp
 c003d6c:	dfc00117 	ldw	ra,4(sp)
 c003d70:	df000017 	ldw	fp,0(sp)
 c003d74:	dec00204 	addi	sp,sp,8
 c003d78:	f800283a 	ret

0c003d7c <XferCtrlData>:
/* Control transfer with data stage */
BYTE XferCtrlData( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 c003d7c:	defff804 	addi	sp,sp,-32
 c003d80:	dfc00715 	stw	ra,28(sp)
 c003d84:	df000615 	stw	fp,24(sp)
 c003d88:	df000604 	addi	fp,sp,24
 c003d8c:	2807883a 	mov	r3,r5
 c003d90:	3005883a 	mov	r2,r6
 c003d94:	e1ffff15 	stw	r7,-4(fp)
 c003d98:	e13ffc05 	stb	r4,-16(fp)
 c003d9c:	e0fffd05 	stb	r3,-12(fp)
 c003da0:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;

    //MAXreg_wr( rHCTL, bmRCVTOG1 );       //set toggle to DATA1
    if( direction ) {   //IN transfer
 c003da4:	e0800217 	ldw	r2,8(fp)
 c003da8:	10002826 	beq	r2,zero,c003e4c <XferCtrlData+0xd0>
        devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 c003dac:	e0fffc03 	ldbu	r3,-16(fp)
 c003db0:	008300b4 	movhi	r2,3074
 c003db4:	10b2ce04 	addi	r2,r2,-13512
 c003db8:	180690fa 	slli	r3,r3,3
 c003dbc:	10c5883a 	add	r2,r2,r3
 c003dc0:	10c00017 	ldw	r3,0(r2)
 c003dc4:	e0bffd03 	ldbu	r2,-12(fp)
 c003dc8:	100490fa 	slli	r2,r2,3
 c003dcc:	1885883a 	add	r2,r3,r2
 c003dd0:	00c00804 	movi	r3,32
 c003dd4:	10c00185 	stb	r3,6(r2)
        rcode = XferInTransfer( addr, ep, nbytes, dataptr, devtable[ addr ].epinfo[ ep ].MaxPktSize );
 c003dd8:	e13ffc03 	ldbu	r4,-16(fp)
 c003ddc:	e17ffd03 	ldbu	r5,-12(fp)
 c003de0:	e1bffe0b 	ldhu	r6,-8(fp)
 c003de4:	e0fffc03 	ldbu	r3,-16(fp)
 c003de8:	008300b4 	movhi	r2,3074
 c003dec:	10b2ce04 	addi	r2,r2,-13512
 c003df0:	180690fa 	slli	r3,r3,3
 c003df4:	10c5883a 	add	r2,r2,r3
 c003df8:	10c00017 	ldw	r3,0(r2)
 c003dfc:	e0bffd03 	ldbu	r2,-12(fp)
 c003e00:	100490fa 	slli	r2,r2,3
 c003e04:	1885883a 	add	r2,r3,r2
 c003e08:	1080008b 	ldhu	r2,2(r2)
 c003e0c:	10803fcc 	andi	r2,r2,255
 c003e10:	d8800015 	stw	r2,0(sp)
 c003e14:	e1ffff17 	ldw	r7,-4(fp)
 c003e18:	c0040540 	call	c004054 <XferInTransfer>
 c003e1c:	e0bffb05 	stb	r2,-20(fp)
        if( rcode ) {
 c003e20:	e0bffb03 	ldbu	r2,-20(fp)
 c003e24:	10000226 	beq	r2,zero,c003e30 <XferCtrlData+0xb4>
        return( rcode );
 c003e28:	e0bffb03 	ldbu	r2,-20(fp)
 c003e2c:	00000806 	br	c003e50 <XferCtrlData+0xd4>
        }
        rcode = XferDispatchPkt( tokOUTHS, ep );
 c003e30:	e0bffd03 	ldbu	r2,-12(fp)
 c003e34:	100b883a 	mov	r5,r2
 c003e38:	01002804 	movi	r4,160
 c003e3c:	c003ed80 	call	c003ed8 <XferDispatchPkt>
 c003e40:	e0bffb05 	stb	r2,-20(fp)
        return( rcode );
 c003e44:	e0bffb03 	ldbu	r2,-20(fp)
 c003e48:	00000106 	br	c003e50 <XferCtrlData+0xd4>
    }
    else {              //OUT not implemented
        return( 0xff );
 c003e4c:	00bfffc4 	movi	r2,-1
    }
}
 c003e50:	e037883a 	mov	sp,fp
 c003e54:	dfc00117 	ldw	ra,4(sp)
 c003e58:	df000017 	ldw	fp,0(sp)
 c003e5c:	dec00204 	addi	sp,sp,8
 c003e60:	f800283a 	ret

0c003e64 <XferCtrlND>:
/* Control transfer with status stage and no data stage */
BYTE XferCtrlND( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 c003e64:	defff904 	addi	sp,sp,-28
 c003e68:	dfc00615 	stw	ra,24(sp)
 c003e6c:	df000515 	stw	fp,20(sp)
 c003e70:	df000504 	addi	fp,sp,20
 c003e74:	2807883a 	mov	r3,r5
 c003e78:	3005883a 	mov	r2,r6
 c003e7c:	e1ffff15 	stw	r7,-4(fp)
 c003e80:	e13ffc05 	stb	r4,-16(fp)
 c003e84:	e0fffd05 	stb	r3,-12(fp)
 c003e88:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;
    if( direction ) { //GET
 c003e8c:	e0800217 	ldw	r2,8(fp)
 c003e90:	10000626 	beq	r2,zero,c003eac <XferCtrlND+0x48>
        rcode = XferDispatchPkt( tokOUTHS, ep );
 c003e94:	e0bffd03 	ldbu	r2,-12(fp)
 c003e98:	100b883a 	mov	r5,r2
 c003e9c:	01002804 	movi	r4,160
 c003ea0:	c003ed80 	call	c003ed8 <XferDispatchPkt>
 c003ea4:	e0bffb05 	stb	r2,-20(fp)
 c003ea8:	00000506 	br	c003ec0 <XferCtrlND+0x5c>
    }
    else {
        rcode = XferDispatchPkt( tokINHS, ep );
 c003eac:	e0bffd03 	ldbu	r2,-12(fp)
 c003eb0:	100b883a 	mov	r5,r2
 c003eb4:	01002004 	movi	r4,128
 c003eb8:	c003ed80 	call	c003ed8 <XferDispatchPkt>
 c003ebc:	e0bffb05 	stb	r2,-20(fp)
    }
    return( rcode );
 c003ec0:	e0bffb03 	ldbu	r2,-20(fp)
}
 c003ec4:	e037883a 	mov	sp,fp
 c003ec8:	dfc00117 	ldw	ra,4(sp)
 c003ecc:	df000017 	ldw	fp,0(sp)
 c003ed0:	dec00204 	addi	sp,sp,8
 c003ed4:	f800283a 	ret

0c003ed8 <XferDispatchPkt>:
/* Result code: 0 success, nonzero = error condition                                                */
/* If NAK, tries to re-send up to USB_NAK_LIMIT times                                               */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */
/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
BYTE XferDispatchPkt( BYTE token, BYTE ep )
{
 c003ed8:	defff904 	addi	sp,sp,-28
 c003edc:	dfc00615 	stw	ra,24(sp)
 c003ee0:	df000515 	stw	fp,20(sp)
 c003ee4:	df000504 	addi	fp,sp,20
 c003ee8:	2007883a 	mov	r3,r4
 c003eec:	2805883a 	mov	r2,r5
 c003ef0:	e0fffe05 	stb	r3,-8(fp)
 c003ef4:	e0bfff05 	stb	r2,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 c003ef8:	d0a7bc17 	ldw	r2,-24848(gp)
 DWORD timeout = (alt_nticks()*1000)/alt_ticks_per_second() + USB_XFER_TIMEOUT;
 c003efc:	0140fa04 	movi	r5,1000
 c003f00:	1009883a 	mov	r4,r2
 c003f04:	c004c7c0 	call	c004c7c <__mulsi3>
 c003f08:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 c003f0c:	d0a7bb17 	ldw	r2,-24852(gp)
 c003f10:	100b883a 	mov	r5,r2
 c003f14:	1809883a 	mov	r4,r3
 c003f18:	c004bc00 	call	c004bc0 <__udivsi3>
 c003f1c:	1084e204 	addi	r2,r2,5000
 c003f20:	e0bffc15 	stw	r2,-16(fp)
 BYTE tmpdata;
 BYTE rcode;
 char retry_count = 0;
 c003f24:	e03ffb45 	stb	zero,-19(fp)
 BYTE nak_count = 0;
 c003f28:	e03ffb85 	stb	zero,-18(fp)

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
 c003f2c:	e0fffe03 	ldbu	r3,-8(fp)
 c003f30:	e0bfff03 	ldbu	r2,-4(fp)
 c003f34:	1884b03a 	or	r2,r3,r2
 c003f38:	10803fcc 	andi	r2,r2,255
 c003f3c:	100b883a 	mov	r5,r2
 c003f40:	01003c04 	movi	r4,240
 c003f44:	c0034800 	call	c003480 <MAXreg_wr>
        rcode = 0xff;
 c003f48:	00bfffc4 	movi	r2,-1
 c003f4c:	e0bffb05 	stb	r2,-20(fp)
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 c003f50:	00000d06 	br	c003f88 <XferDispatchPkt+0xb0>
            tmpdata = MAXreg_rd( rHIRQ );
 c003f54:	01003204 	movi	r4,200
 c003f58:	c0036700 	call	c003670 <MAXreg_rd>
 c003f5c:	e0bffd05 	stb	r2,-12(fp)
            if( tmpdata & bmHXFRDNIRQ ) {
 c003f60:	e0bffd03 	ldbu	r2,-12(fp)
 c003f64:	10803fcc 	andi	r2,r2,255
 c003f68:	1080201c 	xori	r2,r2,128
 c003f6c:	10bfe004 	addi	r2,r2,-128
 c003f70:	1000050e 	bge	r2,zero,c003f88 <XferDispatchPkt+0xb0>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
 c003f74:	01402004 	movi	r5,128
 c003f78:	01003204 	movi	r4,200
 c003f7c:	c0034800 	call	c003480 <MAXreg_wr>
                rcode = 0x00;
 c003f80:	e03ffb05 	stb	zero,-20(fp)
                break;
 c003f84:	00000c06 	br	c003fb8 <XferDispatchPkt+0xe0>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 c003f88:	d0a7bc17 	ldw	r2,-24848(gp)
 BYTE nak_count = 0;

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
        rcode = 0xff;
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 c003f8c:	0140fa04 	movi	r5,1000
 c003f90:	1009883a 	mov	r4,r2
 c003f94:	c004c7c0 	call	c004c7c <__mulsi3>
 c003f98:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 c003f9c:	d0a7bb17 	ldw	r2,-24852(gp)
 c003fa0:	100b883a 	mov	r5,r2
 c003fa4:	1809883a 	mov	r4,r3
 c003fa8:	c004bc00 	call	c004bc0 <__udivsi3>
 c003fac:	1007883a 	mov	r3,r2
 c003fb0:	e0bffc17 	ldw	r2,-16(fp)
 c003fb4:	18bfe736 	bltu	r3,r2,c003f54 <__alt_data_end+0xfc003f54>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
                rcode = 0x00;
                break;
            }
        }
        if( rcode != 0x00 ) {               //exit if timeout
 c003fb8:	e0bffb03 	ldbu	r2,-20(fp)
 c003fbc:	10000226 	beq	r2,zero,c003fc8 <XferDispatchPkt+0xf0>
            return( rcode );
 c003fc0:	e0bffb03 	ldbu	r2,-20(fp)
 c003fc4:	00001e06 	br	c004040 <XferDispatchPkt+0x168>
        }
        rcode = ( MAXreg_rd( rHRSL ) & 0x0f );
 c003fc8:	01003e04 	movi	r4,248
 c003fcc:	c0036700 	call	c003670 <MAXreg_rd>
 c003fd0:	108003cc 	andi	r2,r2,15
 c003fd4:	e0bffb05 	stb	r2,-20(fp)
        if( rcode == hrNAK ) {
 c003fd8:	e0bffb03 	ldbu	r2,-20(fp)
 c003fdc:	10800118 	cmpnei	r2,r2,4
 c003fe0:	1000071e 	bne	r2,zero,c004000 <XferDispatchPkt+0x128>
            nak_count++;
 c003fe4:	e0bffb83 	ldbu	r2,-18(fp)
 c003fe8:	10800044 	addi	r2,r2,1
 c003fec:	e0bffb85 	stb	r2,-18(fp)
            if( nak_count == USB_NAK_LIMIT ) {
 c003ff0:	e0bffb83 	ldbu	r2,-18(fp)
 c003ff4:	10803218 	cmpnei	r2,r2,200
 c003ff8:	10000b1e 	bne	r2,zero,c004028 <XferDispatchPkt+0x150>
                break;
 c003ffc:	00000f06 	br	c00403c <XferDispatchPkt+0x164>
            }
            else {
                continue;
            }
        }
        if( rcode == hrTIMEOUT ) {
 c004000:	e0bffb03 	ldbu	r2,-20(fp)
 c004004:	10800398 	cmpnei	r2,r2,14
 c004008:	1000091e 	bne	r2,zero,c004030 <XferDispatchPkt+0x158>
            retry_count++;
 c00400c:	e0bffb43 	ldbu	r2,-19(fp)
 c004010:	10800044 	addi	r2,r2,1
 c004014:	e0bffb45 	stb	r2,-19(fp)
            if( retry_count == USB_RETRY_LIMIT ) {
 c004018:	e0bffb47 	ldb	r2,-19(fp)
 c00401c:	108000d8 	cmpnei	r2,r2,3
 c004020:	10000526 	beq	r2,zero,c004038 <XferDispatchPkt+0x160>
                break;
            }
            else {
                continue;
 c004024:	00000106 	br	c00402c <XferDispatchPkt+0x154>
            nak_count++;
            if( nak_count == USB_NAK_LIMIT ) {
                break;
            }
            else {
                continue;
 c004028:	0001883a 	nop
            else {
                continue;
            }
        }
        else break;
    }//while( 1 )
 c00402c:	003fbf06 	br	c003f2c <__alt_data_end+0xfc003f2c>
            }
            else {
                continue;
            }
        }
        else break;
 c004030:	0001883a 	nop
 c004034:	00000106 	br	c00403c <XferDispatchPkt+0x164>
            }
        }
        if( rcode == hrTIMEOUT ) {
            retry_count++;
            if( retry_count == USB_RETRY_LIMIT ) {
                break;
 c004038:	0001883a 	nop
                continue;
            }
        }
        else break;
    }//while( 1 )
    return( rcode );
 c00403c:	e0bffb03 	ldbu	r2,-20(fp)
}
 c004040:	e037883a 	mov	sp,fp
 c004044:	dfc00117 	ldw	ra,4(sp)
 c004048:	df000017 	ldw	fp,0(sp)
 c00404c:	dec00204 	addi	sp,sp,8
 c004050:	f800283a 	ret

0c004054 <XferInTransfer>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes.
    Keep sending INs and writes data to memory area pointed by 'data' */
/* rcode 0 if no errors. rcode 01-0f is relayed from prvXferDispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
BYTE XferInTransfer( BYTE addr/* not sure if it's necessary */, BYTE ep, WORD nbytes, BYTE* data, BYTE maxpktsize )
{
 c004054:	defff804 	addi	sp,sp,-32
 c004058:	dfc00715 	stw	ra,28(sp)
 c00405c:	df000615 	stw	fp,24(sp)
 c004060:	df000604 	addi	fp,sp,24
 c004064:	2011883a 	mov	r8,r4
 c004068:	2809883a 	mov	r4,r5
 c00406c:	3007883a 	mov	r3,r6
 c004070:	e1fffe15 	stw	r7,-8(fp)
 c004074:	e0800217 	ldw	r2,8(fp)
 c004078:	e23ffb05 	stb	r8,-20(fp)
 c00407c:	e13ffc05 	stb	r4,-16(fp)
 c004080:	e0fffd0d 	sth	r3,-12(fp)
 c004084:	e0bfff05 	stb	r2,-4(fp)
 BYTE rcode;
 BYTE i;
 BYTE tmpbyte;
 BYTE pktsize;
 WORD xfrlen = 0;
 c004088:	e03ffa0d 	sth	zero,-24(fp)
    MAXreg_wr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
 c00408c:	e0fffb03 	ldbu	r3,-20(fp)
 c004090:	008300b4 	movhi	r2,3074
 c004094:	10b2ce04 	addi	r2,r2,-13512
 c004098:	180690fa 	slli	r3,r3,3
 c00409c:	10c5883a 	add	r2,r2,r3
 c0040a0:	10c00017 	ldw	r3,0(r2)
 c0040a4:	e0bffc03 	ldbu	r2,-16(fp)
 c0040a8:	100490fa 	slli	r2,r2,3
 c0040ac:	1885883a 	add	r2,r3,r2
 c0040b0:	10800183 	ldbu	r2,6(r2)
 c0040b4:	10803fcc 	andi	r2,r2,255
 c0040b8:	100b883a 	mov	r5,r2
 c0040bc:	01003a04 	movi	r4,232
 c0040c0:	c0034800 	call	c003480 <MAXreg_wr>
    while( 1 ) { // use a 'return' to exit this loop
        rcode = XferDispatchPkt( tokIN, ep );           //IN packet to EP-'endpoint'. Function takes care of NAKS.
 c0040c4:	e0bffc03 	ldbu	r2,-16(fp)
 c0040c8:	100b883a 	mov	r5,r2
 c0040cc:	0009883a 	mov	r4,zero
 c0040d0:	c003ed80 	call	c003ed8 <XferDispatchPkt>
 c0040d4:	e0bffa85 	stb	r2,-22(fp)
        if( rcode ) {
 c0040d8:	e0bffa83 	ldbu	r2,-22(fp)
 c0040dc:	10000226 	beq	r2,zero,c0040e8 <XferInTransfer+0x94>
            return( rcode );                            //should be 0, indicating ACK. Else return error code.
 c0040e0:	e0bffa83 	ldbu	r2,-22(fp)
 c0040e4:	00003a06 	br	c0041d0 <XferInTransfer+0x17c>
        }
        /* check for RCVDAVIRQ and generate error if not present */
        /* the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred. Need to add handling for that */
        if(( MAXreg_rd( rHIRQ ) & bmRCVDAVIRQ ) == 0 ) {
 c0040e8:	01003204 	movi	r4,200
 c0040ec:	c0036700 	call	c003670 <MAXreg_rd>
 c0040f0:	10803fcc 	andi	r2,r2,255
 c0040f4:	1080010c 	andi	r2,r2,4
 c0040f8:	1000021e 	bne	r2,zero,c004104 <XferInTransfer+0xb0>
            return ( 0xf0 );                            //receive error
 c0040fc:	00bffc04 	movi	r2,-16
 c004100:	00003306 	br	c0041d0 <XferInTransfer+0x17c>
        }
        pktsize = MAXreg_rd( rRCVBC );                  //number of received bytes
 c004104:	01000c04 	movi	r4,48
 c004108:	c0036700 	call	c003670 <MAXreg_rd>
 c00410c:	e0bffac5 	stb	r2,-21(fp)
        //printf ("pktsize: %d\n", pktsize);
        data = MAXbytes_rd( rRCVFIFO, pktsize, data );
 c004110:	e0bffac3 	ldbu	r2,-21(fp)
 c004114:	e1bffe17 	ldw	r6,-8(fp)
 c004118:	100b883a 	mov	r5,r2
 c00411c:	01000204 	movi	r4,8
 c004120:	c0036e40 	call	c0036e4 <MAXbytes_rd>
 c004124:	e0bffe15 	stw	r2,-8(fp)
        MAXreg_wr( rHIRQ, bmRCVDAVIRQ );                // Clear the IRQ & free the buffer
 c004128:	01400104 	movi	r5,4
 c00412c:	01003204 	movi	r4,200
 c004130:	c0034800 	call	c003480 <MAXreg_wr>
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
 c004134:	e0fffac3 	ldbu	r3,-21(fp)
 c004138:	e0bffa0b 	ldhu	r2,-24(fp)
 c00413c:	1885883a 	add	r2,r3,r2
 c004140:	e0bffa0d 	sth	r2,-24(fp)
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {    // have we transferred 'nbytes' bytes?
 c004144:	e0fffac3 	ldbu	r3,-21(fp)
 c004148:	e0bfff03 	ldbu	r2,-4(fp)
 c00414c:	18800336 	bltu	r3,r2,c00415c <XferInTransfer+0x108>
 c004150:	e0fffa0b 	ldhu	r3,-24(fp)
 c004154:	e0bffd0b 	ldhu	r2,-12(fp)
 c004158:	18bfda36 	bltu	r3,r2,c0040c4 <__alt_data_end+0xfc0040c4>
            if( MAXreg_rd( rHRSL ) & bmRCVTOGRD ) {                 //save toggle value
 c00415c:	01003e04 	movi	r4,248
 c004160:	c0036700 	call	c003670 <MAXreg_rd>
 c004164:	10803fcc 	andi	r2,r2,255
 c004168:	1080040c 	andi	r2,r2,16
 c00416c:	10000c26 	beq	r2,zero,c0041a0 <XferInTransfer+0x14c>
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 c004170:	e0fffb03 	ldbu	r3,-20(fp)
 c004174:	008300b4 	movhi	r2,3074
 c004178:	10b2ce04 	addi	r2,r2,-13512
 c00417c:	180690fa 	slli	r3,r3,3
 c004180:	10c5883a 	add	r2,r2,r3
 c004184:	10c00017 	ldw	r3,0(r2)
 c004188:	e0bffc03 	ldbu	r2,-16(fp)
 c00418c:	100490fa 	slli	r2,r2,3
 c004190:	1885883a 	add	r2,r3,r2
 c004194:	00c00804 	movi	r3,32
 c004198:	10c00185 	stb	r3,6(r2)
 c00419c:	00000b06 	br	c0041cc <XferInTransfer+0x178>
            }
            else {
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
 c0041a0:	e0fffb03 	ldbu	r3,-20(fp)
 c0041a4:	008300b4 	movhi	r2,3074
 c0041a8:	10b2ce04 	addi	r2,r2,-13512
 c0041ac:	180690fa 	slli	r3,r3,3
 c0041b0:	10c5883a 	add	r2,r2,r3
 c0041b4:	10c00017 	ldw	r3,0(r2)
 c0041b8:	e0bffc03 	ldbu	r2,-16(fp)
 c0041bc:	100490fa 	slli	r2,r2,3
 c0041c0:	1885883a 	add	r2,r3,r2
 c0041c4:	00c00404 	movi	r3,16
 c0041c8:	10c00185 	stb	r3,6(r2)
            }
            return( 0 );
 c0041cc:	0005883a 	mov	r2,zero
        }
  }//while( 1 )
}
 c0041d0:	e037883a 	mov	sp,fp
 c0041d4:	dfc00117 	ldw	ra,4(sp)
 c0041d8:	df000017 	ldw	fp,0(sp)
 c0041dc:	dec00204 	addi	sp,sp,8
 c0041e0:	f800283a 	ret

0c0041e4 <USB_init>:
/* initialization of USB data structures */
void USB_init( void )
{
 c0041e4:	defffe04 	addi	sp,sp,-8
 c0041e8:	df000115 	stw	fp,4(sp)
 c0041ec:	df000104 	addi	fp,sp,4
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 c0041f0:	e03fff05 	stb	zero,-4(fp)
 c0041f4:	00001006 	br	c004238 <USB_init+0x54>
        devtable[ i ].epinfo = NULL;       //clear device table
 c0041f8:	e0ffff03 	ldbu	r3,-4(fp)
 c0041fc:	008300b4 	movhi	r2,3074
 c004200:	10b2ce04 	addi	r2,r2,-13512
 c004204:	180690fa 	slli	r3,r3,3
 c004208:	10c5883a 	add	r2,r2,r3
 c00420c:	10000015 	stw	zero,0(r2)
        devtable[ i ].devclass = 0;
 c004210:	e0ffff03 	ldbu	r3,-4(fp)
 c004214:	008300b4 	movhi	r2,3074
 c004218:	10b2ce04 	addi	r2,r2,-13512
 c00421c:	180690fa 	slli	r3,r3,3
 c004220:	10c5883a 	add	r2,r2,r3
 c004224:	10800104 	addi	r2,r2,4
 c004228:	10000005 	stb	zero,0(r2)
}
/* initialization of USB data structures */
void USB_init( void )
{
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 c00422c:	e0bfff03 	ldbu	r2,-4(fp)
 c004230:	10800044 	addi	r2,r2,1
 c004234:	e0bfff05 	stb	r2,-4(fp)
 c004238:	e0bfff03 	ldbu	r2,-4(fp)
 c00423c:	10800270 	cmpltui	r2,r2,9
 c004240:	103fed1e 	bne	r2,zero,c0041f8 <__alt_data_end+0xfc0041f8>
        devtable[ i ].epinfo = NULL;       //clear device table
        devtable[ i ].devclass = 0;
    }
    devtable[ 0 ].epinfo = &dev0ep;  //set single ep for uninitialized device
 c004244:	008300b4 	movhi	r2,3074
 c004248:	10b2ce04 	addi	r2,r2,-13512
 c00424c:	d0e7a804 	addi	r3,gp,-24928
 c004250:	10c00015 	stw	r3,0(r2)
    dev0ep.MaxPktSize = 0;
 c004254:	d027a88d 	sth	zero,-24926(gp)
    dev0ep.sndToggle = bmSNDTOG0;   //set DATA0/1 toggles to 0
 c004258:	00801004 	movi	r2,64
 c00425c:	d0a7a945 	stb	r2,-24923(gp)
    dev0ep.rcvToggle = bmRCVTOG0;
 c004260:	00800404 	movi	r2,16
 c004264:	d0a7a985 	stb	r2,-24922(gp)
}
 c004268:	0001883a 	nop
 c00426c:	e037883a 	mov	sp,fp
 c004270:	df000017 	ldw	fp,0(sp)
 c004274:	dec00104 	addi	sp,sp,4
 c004278:	f800283a 	ret

0c00427c <USB_Task>:
/* error codes: 01-0f HRSLT        */
/* ff - unsupported device         */
/* fe - no address available       */
/* fd - no client driver available */
void USB_Task( void )
{
 c00427c:	deffb204 	addi	sp,sp,-312
 c004280:	dfc04d15 	stw	ra,308(sp)
 c004284:	df004c15 	stw	fp,304(sp)
 c004288:	dc004b15 	stw	r16,300(sp)
 c00428c:	df004c04 	addi	fp,sp,304
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 c004290:	d0a00903 	ldbu	r2,-32732(gp)
 c004294:	10803fcc 	andi	r2,r2,255
 c004298:	10803c0c 	andi	r2,r2,240
 c00429c:	10c00820 	cmpeqi	r3,r2,32
 c0042a0:	1801121e 	bne	r3,zero,c0046ec <USB_Task+0x470>
 c0042a4:	10c00848 	cmpgei	r3,r2,33
 c0042a8:	1800041e 	bne	r3,zero,c0042bc <USB_Task+0x40>
 c0042ac:	10000a26 	beq	r2,zero,c0042d8 <USB_Task+0x5c>
 c0042b0:	10800420 	cmpeqi	r2,r2,16
 c0042b4:	10001b1e 	bne	r2,zero,c004324 <USB_Task+0xa8>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
 c0042b8:	00017a06 	br	c0048a4 <USB_Task+0x628>
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 c0042bc:	10c01020 	cmpeqi	r3,r2,64
 c0042c0:	18016f1e 	bne	r3,zero,c004880 <USB_Task+0x604>
 c0042c4:	10c03fe0 	cmpeqi	r3,r2,255
 c0042c8:	18016f1e 	bne	r3,zero,c004888 <USB_Task+0x60c>
 c0042cc:	10800c20 	cmpeqi	r2,r2,48
 c0042d0:	1001441e 	bne	r2,zero,c0047e4 <USB_Task+0x568>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
 c0042d4:	00017306 	br	c0048a4 <USB_Task+0x628>
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
 c0042d8:	d0a00903 	ldbu	r2,-32732(gp)
 c0042dc:	10803fcc 	andi	r2,r2,255
 c0042e0:	10c000e0 	cmpeqi	r3,r2,3
 c0042e4:	1800091e 	bne	r3,zero,c00430c <USB_Task+0x90>
 c0042e8:	10c00120 	cmpeqi	r3,r2,4
 c0042ec:	18000b1e 	bne	r3,zero,c00431c <USB_Task+0xa0>
 c0042f0:	10800060 	cmpeqi	r2,r2,1
 c0042f4:	1000011e 	bne	r2,zero,c0042fc <USB_Task+0x80>
                    break;
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
 c0042f8:	00016a06 	br	c0048a4 <USB_Task+0x628>
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
                case( USB_DETACHED_SUBSTATE_INITIALIZE ):
                    /* cleanup device data structures */
                    USB_init();
 c0042fc:	c0041e40 	call	c0041e4 <USB_init>
                    usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 c004300:	008000c4 	movi	r2,3
 c004304:	d0a00905 	stb	r2,-32732(gp)
                    break;
 c004308:	00000506 	br	c004320 <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE ):
                    /* Do nothing */
                    MAXreg_wr(rHCTL,bmSAMPLEBUS);
 c00430c:	01400104 	movi	r5,4
 c004310:	01003a04 	movi	r4,232
 c004314:	c0034800 	call	c003480 <MAXreg_wr>
                    break;
 c004318:	00000106 	br	c004320 <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
 c00431c:	0001883a 	nop
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
 c004320:	00016006 	br	c0048a4 <USB_Task+0x628>
            /**/
        case( USB_STATE_ATTACHED ):                     //prepare for enumeration
            switch( usb_task_state ) {
 c004324:	d0a00903 	ldbu	r2,-32732(gp)
 c004328:	10803fcc 	andi	r2,r2,255
 c00432c:	10bffc04 	addi	r2,r2,-16
 c004330:	10c001a8 	cmpgeui	r3,r2,6
 c004334:	1801561e 	bne	r3,zero,c004890 <USB_Task+0x614>
 c004338:	100690ba 	slli	r3,r2,2
 c00433c:	00830034 	movhi	r2,3072
 c004340:	1090d404 	addi	r2,r2,17232
 c004344:	1885883a 	add	r2,r3,r2
 c004348:	10800017 	ldw	r2,0(r2)
 c00434c:	1000683a 	jmp	r2
 c004350:	0c004368 	cmpgeui	r16,at,269
 c004354:	0c0043a0 	cmpeqi	r16,at,270
 c004358:	0c0043dc 	xori	r16,at,271
 c00435c:	0c004400 	call	c00440 <__alt_mem_onchip_memory2_0+0xc00440>
 c004360:	0c004440 	call	c00444 <__alt_mem_onchip_memory2_0+0xc00444>
 c004364:	0c004454 	ori	r16,at,273
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 c004368:	d0a7bc17 	ldw	r2,-24848(gp)
                case( USB_STATE_ATTACHED ):
                    usb_delay = (alt_nticks()*1000)/alt_ticks_per_second() + 200;           //initial settle 200ms
 c00436c:	0140fa04 	movi	r5,1000
 c004370:	1009883a 	mov	r4,r2
 c004374:	c004c7c0 	call	c004c7c <__mulsi3>
 c004378:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 c00437c:	d0a7bb17 	ldw	r2,-24852(gp)
 c004380:	100b883a 	mov	r5,r2
 c004384:	1809883a 	mov	r4,r3
 c004388:	c004bc00 	call	c004bc0 <__udivsi3>
 c00438c:	10803204 	addi	r2,r2,200
 c004390:	d0a7ab15 	stw	r2,-24916(gp)
                    usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 c004394:	00800444 	movi	r2,17
 c004398:	d0a00905 	stb	r2,-32732(gp)
                    break;//case( USB_STATE_ATTACHED )
 c00439c:	0000d206 	br	c0046e8 <USB_Task+0x46c>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 c0043a0:	d0a7bc17 	ldw	r2,-24848(gp)
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
 c0043a4:	0140fa04 	movi	r5,1000
 c0043a8:	1009883a 	mov	r4,r2
 c0043ac:	c004c7c0 	call	c004c7c <__mulsi3>
 c0043b0:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 c0043b4:	d0a7bb17 	ldw	r2,-24852(gp)
 c0043b8:	100b883a 	mov	r5,r2
 c0043bc:	1809883a 	mov	r4,r3
 c0043c0:	c004bc00 	call	c004bc0 <__udivsi3>
 c0043c4:	1007883a 	mov	r3,r2
 c0043c8:	d0a7ab17 	ldw	r2,-24916(gp)
 c0043cc:	10c0c32e 	bgeu	r2,r3,c0046dc <USB_Task+0x460>
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 c0043d0:	00800484 	movi	r2,18
 c0043d4:	d0a00905 	stb	r2,-32732(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 c0043d8:	0000c006 	br	c0046dc <USB_Task+0x460>
                case( USB_ATTACHED_SUBSTATE_RESET_DEVICE ):
                    MAXreg_wr( rHIRQ, bmBUSEVENTIRQ );                               //clear bus event IRQ
 c0043dc:	01400044 	movi	r5,1
 c0043e0:	01003204 	movi	r4,200
 c0043e4:	c0034800 	call	c003480 <MAXreg_wr>
                    MAXreg_wr( rHCTL, bmBUSRST );                                    //issue bus reset
 c0043e8:	01400044 	movi	r5,1
 c0043ec:	01003a04 	movi	r4,232
 c0043f0:	c0034800 	call	c003480 <MAXreg_wr>
                    usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 c0043f4:	008004c4 	movi	r2,19
 c0043f8:	d0a00905 	stb	r2,-32732(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_RESET_DEVICE )
 c0043fc:	0000ba06 	br	c0046e8 <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE ):                  //wait for bus reset and first SOF
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
 c004400:	01003a04 	movi	r4,232
 c004404:	c0036700 	call	c003670 <MAXreg_rd>
 c004408:	10803fcc 	andi	r2,r2,255
 c00440c:	1080004c 	andi	r2,r2,1
 c004410:	1000b41e 	bne	r2,zero,c0046e4 <USB_Task+0x468>
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
 c004414:	01003604 	movi	r4,216
 c004418:	c0036700 	call	c003670 <MAXreg_rd>
 c00441c:	10800214 	ori	r2,r2,8
 c004420:	e0bfb945 	stb	r2,-283(fp)
                        MAXreg_wr( rMODE, tmpdata );
 c004424:	e0bfb943 	ldbu	r2,-283(fp)
 c004428:	100b883a 	mov	r5,r2
 c00442c:	01003604 	movi	r4,216
 c004430:	c0034800 	call	c003480 <MAXreg_wr>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 c004434:	00800504 	movi	r2,20
 c004438:	d0a00905 	stb	r2,-32732(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 c00443c:	0000a906 	br	c0046e4 <USB_Task+0x468>
                case( USB_ATTACHED_SUBSTATE_WAIT_SOF ):
                    if( MAXreg_rd( rHIRQ ) | bmFRAMEIRQ ) {                     //when first SOF received we can continue
 c004440:	01003204 	movi	r4,200
 c004444:	c0036700 	call	c003670 <MAXreg_rd>
                        usb_task_state = USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE;
 c004448:	00800544 	movi	r2,21
 c00444c:	d0a00905 	stb	r2,-32732(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_SOF )
 c004450:	0000a506 	br	c0046e8 <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):   //send request for first 8 bytes of device descriptor
                    devtable[ 0 ].epinfo->MaxPktSize = 0x0008;             //fill max packet size with minimum allowed
 c004454:	008300b4 	movhi	r2,3074
 c004458:	10b2ce04 	addi	r2,r2,-13512
 c00445c:	10800017 	ldw	r2,0(r2)
 c004460:	00c00204 	movi	r3,8
 c004464:	10c0008d 	sth	r3,2(r2)
                	rcode = XferGetDevDescr( 0, 0, 8, (BYTE *)&buf );       //get device descriptor size
 c004468:	e0bfba04 	addi	r2,fp,-280
 c00446c:	d8800415 	stw	r2,16(sp)
 c004470:	00800204 	movi	r2,8
 c004474:	d8800315 	stw	r2,12(sp)
 c004478:	d8000215 	stw	zero,8(sp)
 c00447c:	00800044 	movi	r2,1
 c004480:	d8800115 	stw	r2,4(sp)
 c004484:	d8000015 	stw	zero,0(sp)
 c004488:	01c00184 	movi	r7,6
 c00448c:	01802004 	movi	r6,128
 c004490:	000b883a 	mov	r5,zero
 c004494:	0009883a 	mov	r4,zero
 c004498:	c003c300 	call	c003c30 <XferCtrlReq>
 c00449c:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
 c0044a0:	e0bfb983 	ldbu	r2,-282(fp)
 c0044a4:	1000861e 	bne	r2,zero,c0046c0 <USB_Task+0x444>
                        devtable[ 0 ].epinfo->MaxPktSize = buf.bMaxPacketSize0;
 c0044a8:	008300b4 	movhi	r2,3074
 c0044ac:	10b2ce04 	addi	r2,r2,-13512
 c0044b0:	10800017 	ldw	r2,0(r2)
 c0044b4:	e0ffbbc3 	ldbu	r3,-273(fp)
 c0044b8:	18c03fcc 	andi	r3,r3,255
 c0044bc:	10c0008d 	sth	r3,2(r2)

                        rcode = XferGetDevDescr( 0, 0, buf.bLength, (BYTE *)&buf );     //get full descriptor
 c0044c0:	e0bfba03 	ldbu	r2,-280(fp)
 c0044c4:	10803fcc 	andi	r2,r2,255
 c0044c8:	e0ffba04 	addi	r3,fp,-280
 c0044cc:	d8c00415 	stw	r3,16(sp)
 c0044d0:	d8800315 	stw	r2,12(sp)
 c0044d4:	d8000215 	stw	zero,8(sp)
 c0044d8:	00800044 	movi	r2,1
 c0044dc:	d8800115 	stw	r2,4(sp)
 c0044e0:	d8000015 	stw	zero,0(sp)
 c0044e4:	01c00184 	movi	r7,6
 c0044e8:	01802004 	movi	r6,128
 c0044ec:	000b883a 	mov	r5,zero
 c0044f0:	0009883a 	mov	r4,zero
 c0044f4:	c003c300 	call	c003c30 <XferCtrlReq>
 c0044f8:	e0bfb985 	stb	r2,-282(fp)
                        //pull the string descriptor for the product if it exists
            			//hackish, store this somewhere
                        if (buf.iManufacturer != 0)
 c0044fc:	e0bfbd83 	ldbu	r2,-266(fp)
 c004500:	10803fcc 	andi	r2,r2,255
 c004504:	10003426 	beq	r2,zero,c0045d8 <USB_Task+0x35c>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                			rcode = XferGetStrDescr( 0, 0, 2, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 c004508:	e0bfbd83 	ldbu	r2,-266(fp)
 c00450c:	10803fcc 	andi	r2,r2,255
 c004510:	e0ffbe84 	addi	r3,fp,-262
 c004514:	d8c00415 	stw	r3,16(sp)
 c004518:	00c00084 	movi	r3,2
 c00451c:	d8c00315 	stw	r3,12(sp)
 c004520:	00c10244 	movi	r3,1033
 c004524:	d8c00215 	stw	r3,8(sp)
 c004528:	00c000c4 	movi	r3,3
 c00452c:	d8c00115 	stw	r3,4(sp)
 c004530:	d8800015 	stw	r2,0(sp)
 c004534:	01c00184 	movi	r7,6
 c004538:	01802004 	movi	r6,128
 c00453c:	000b883a 	mov	r5,zero
 c004540:	0009883a 	mov	r4,zero
 c004544:	c003c300 	call	c003c30 <XferCtrlReq>
 c004548:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 c00454c:	e0bfbd83 	ldbu	r2,-266(fp)
 c004550:	10803fcc 	andi	r2,r2,255
 c004554:	e0ffbe83 	ldbu	r3,-262(fp)
 c004558:	18c03fcc 	andi	r3,r3,255
 c00455c:	e13fbe84 	addi	r4,fp,-262
 c004560:	d9000415 	stw	r4,16(sp)
 c004564:	d8c00315 	stw	r3,12(sp)
 c004568:	00c10244 	movi	r3,1033
 c00456c:	d8c00215 	stw	r3,8(sp)
 c004570:	00c000c4 	movi	r3,3
 c004574:	d8c00115 	stw	r3,4(sp)
 c004578:	d8800015 	stw	r2,0(sp)
 c00457c:	01c00184 	movi	r7,6
 c004580:	01802004 	movi	r6,128
 c004584:	000b883a 	mov	r5,zero
 c004588:	0009883a 	mov	r4,zero
 c00458c:	c003c300 	call	c003c30 <XferCtrlReq>
 c004590:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Mfgr string(%i): %s\n", buf.iManufacturer, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 c004594:	e0bfbd83 	ldbu	r2,-266(fp)
 c004598:	14003fcc 	andi	r16,r2,255
 c00459c:	e0bfbe83 	ldbu	r2,-262(fp)
 c0045a0:	10803fcc 	andi	r2,r2,255
 c0045a4:	1004d07a 	srli	r2,r2,1
 c0045a8:	10bfffc4 	addi	r2,r2,-1
 c0045ac:	10c03fcc 	andi	r3,r2,255
 c0045b0:	e0bfbe84 	addi	r2,fp,-262
 c0045b4:	10800084 	addi	r2,r2,2
 c0045b8:	180b883a 	mov	r5,r3
 c0045bc:	1009883a 	mov	r4,r2
 c0045c0:	c004a440 	call	c004a44 <ConvUTF8ToStr>
 c0045c4:	100d883a 	mov	r6,r2
 c0045c8:	800b883a 	mov	r5,r16
 c0045cc:	010300b4 	movhi	r4,3074
 c0045d0:	21227004 	addi	r4,r4,-30272
 c0045d4:	c0056500 	call	c005650 <printf>
                		}
                		if (buf.iProduct != 0)
 c0045d8:	e0bfbdc3 	ldbu	r2,-265(fp)
 c0045dc:	10803fcc 	andi	r2,r2,255
 c0045e0:	10003426 	beq	r2,zero,c0046b4 <USB_Task+0x438>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                        	rcode = XferGetStrDescr( 0, 0, 2, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 c0045e4:	e0bfbdc3 	ldbu	r2,-265(fp)
 c0045e8:	10803fcc 	andi	r2,r2,255
 c0045ec:	e0ffbe84 	addi	r3,fp,-262
 c0045f0:	d8c00415 	stw	r3,16(sp)
 c0045f4:	00c00084 	movi	r3,2
 c0045f8:	d8c00315 	stw	r3,12(sp)
 c0045fc:	00c10244 	movi	r3,1033
 c004600:	d8c00215 	stw	r3,8(sp)
 c004604:	00c000c4 	movi	r3,3
 c004608:	d8c00115 	stw	r3,4(sp)
 c00460c:	d8800015 	stw	r2,0(sp)
 c004610:	01c00184 	movi	r7,6
 c004614:	01802004 	movi	r6,128
 c004618:	000b883a 	mov	r5,zero
 c00461c:	0009883a 	mov	r4,zero
 c004620:	c003c300 	call	c003c30 <XferCtrlReq>
 c004624:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 c004628:	e0bfbdc3 	ldbu	r2,-265(fp)
 c00462c:	10803fcc 	andi	r2,r2,255
 c004630:	e0ffbe83 	ldbu	r3,-262(fp)
 c004634:	18c03fcc 	andi	r3,r3,255
 c004638:	e13fbe84 	addi	r4,fp,-262
 c00463c:	d9000415 	stw	r4,16(sp)
 c004640:	d8c00315 	stw	r3,12(sp)
 c004644:	00c10244 	movi	r3,1033
 c004648:	d8c00215 	stw	r3,8(sp)
 c00464c:	00c000c4 	movi	r3,3
 c004650:	d8c00115 	stw	r3,4(sp)
 c004654:	d8800015 	stw	r2,0(sp)
 c004658:	01c00184 	movi	r7,6
 c00465c:	01802004 	movi	r6,128
 c004660:	000b883a 	mov	r5,zero
 c004664:	0009883a 	mov	r4,zero
 c004668:	c003c300 	call	c003c30 <XferCtrlReq>
 c00466c:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Product string(%i): %s\n", buf.iProduct, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 c004670:	e0bfbdc3 	ldbu	r2,-265(fp)
 c004674:	14003fcc 	andi	r16,r2,255
 c004678:	e0bfbe83 	ldbu	r2,-262(fp)
 c00467c:	10803fcc 	andi	r2,r2,255
 c004680:	1004d07a 	srli	r2,r2,1
 c004684:	10bfffc4 	addi	r2,r2,-1
 c004688:	10c03fcc 	andi	r3,r2,255
 c00468c:	e0bfbe84 	addi	r2,fp,-262
 c004690:	10800084 	addi	r2,r2,2
 c004694:	180b883a 	mov	r5,r3
 c004698:	1009883a 	mov	r4,r2
 c00469c:	c004a440 	call	c004a44 <ConvUTF8ToStr>
 c0046a0:	100d883a 	mov	r6,r2
 c0046a4:	800b883a 	mov	r5,r16
 c0046a8:	010300b4 	movhi	r4,3074
 c0046ac:	21227604 	addi	r4,r4,-30248
 c0046b0:	c0056500 	call	c005650 <printf>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;
 c0046b4:	00800804 	movi	r2,32
 c0046b8:	d0a00905 	stb	r2,-32732(gp)
                    else {
                        usb_error = rcode;
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 c0046bc:	00000a06 	br	c0046e8 <USB_Task+0x46c>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;

                    }
                    else {
                        usb_error = rcode;
 c0046c0:	e0bfb983 	ldbu	r2,-282(fp)
 c0046c4:	d0a7ac45 	stb	r2,-24911(gp)
                        last_usb_task_state = usb_task_state;
 c0046c8:	d0a00903 	ldbu	r2,-32732(gp)
 c0046cc:	d0a7aa05 	stb	r2,-24920(gp)
                        usb_task_state = USB_STATE_ERROR;
 c0046d0:	00bfffc4 	movi	r2,-1
 c0046d4:	d0a00905 	stb	r2,-32732(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 c0046d8:	00000306 	br	c0046e8 <USB_Task+0x46c>
                    break;//case( USB_STATE_ATTACHED )
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 c0046dc:	0001883a 	nop
 c0046e0:	00006b06 	br	c004890 <USB_Task+0x614>
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
                        MAXreg_wr( rMODE, tmpdata );
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 c0046e4:	0001883a 	nop
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
 c0046e8:	00006906 	br	c004890 <USB_Task+0x614>
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 c0046ec:	00800044 	movi	r2,1
 c0046f0:	e0bfb905 	stb	r2,-284(fp)
 c0046f4:	00002d06 	br	c0047ac <USB_Task+0x530>
                if( devtable[ i ].epinfo == NULL ) {
 c0046f8:	e0ffb903 	ldbu	r3,-284(fp)
 c0046fc:	008300b4 	movhi	r2,3074
 c004700:	10b2ce04 	addi	r2,r2,-13512
 c004704:	180690fa 	slli	r3,r3,3
 c004708:	10c5883a 	add	r2,r2,r3
 c00470c:	10800017 	ldw	r2,0(r2)
 c004710:	1000231e 	bne	r2,zero,c0047a0 <USB_Task+0x524>
                    devtable[ i ].epinfo = devtable[ 0 ].epinfo;        //set correct MaxPktSize
 c004714:	e13fb903 	ldbu	r4,-284(fp)
 c004718:	008300b4 	movhi	r2,3074
 c00471c:	10b2ce04 	addi	r2,r2,-13512
 c004720:	10c00017 	ldw	r3,0(r2)
 c004724:	008300b4 	movhi	r2,3074
 c004728:	10b2ce04 	addi	r2,r2,-13512
 c00472c:	200890fa 	slli	r4,r4,3
 c004730:	1105883a 	add	r2,r2,r4
 c004734:	10c00015 	stw	r3,0(r2)
                    //devtable[ i ].epinfo->MaxPktSize = devtable[ 0 ].epinfo->MaxPktSize;  //copy uninitialized device record to have correct MaxPktSize
                    rcode = XferSetAddr( 0, 0, i );
 c004738:	e0bfb903 	ldbu	r2,-284(fp)
 c00473c:	d8000415 	stw	zero,16(sp)
 c004740:	d8000315 	stw	zero,12(sp)
 c004744:	d8000215 	stw	zero,8(sp)
 c004748:	d8000115 	stw	zero,4(sp)
 c00474c:	d8800015 	stw	r2,0(sp)
 c004750:	01c00144 	movi	r7,5
 c004754:	000d883a 	mov	r6,zero
 c004758:	000b883a 	mov	r5,zero
 c00475c:	0009883a 	mov	r4,zero
 c004760:	c003c300 	call	c003c30 <XferCtrlReq>
 c004764:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
 c004768:	e0bfb983 	ldbu	r2,-282(fp)
 c00476c:	1000051e 	bne	r2,zero,c004784 <USB_Task+0x508>
                        tmp_addr = i;
 c004770:	e0bfb903 	ldbu	r2,-284(fp)
 c004774:	d0a7ac05 	stb	r2,-24912(gp)
                        usb_task_state = USB_STATE_CONFIGURING;
 c004778:	00800c04 	movi	r2,48
 c00477c:	d0a00905 	stb	r2,-32732(gp)
                    else {
                        usb_error = rcode;          //set address error
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
 c004780:	00000d06 	br	c0047b8 <USB_Task+0x53c>
                    if( rcode == 0 ) {
                        tmp_addr = i;
                        usb_task_state = USB_STATE_CONFIGURING;
                    }
                    else {
                        usb_error = rcode;          //set address error
 c004784:	e0bfb983 	ldbu	r2,-282(fp)
 c004788:	d0a7ac45 	stb	r2,-24911(gp)
                        last_usb_task_state = usb_task_state;
 c00478c:	d0a00903 	ldbu	r2,-32732(gp)
 c004790:	d0a7aa05 	stb	r2,-24920(gp)
                        usb_task_state = USB_STATE_ERROR;
 c004794:	00bfffc4 	movi	r2,-1
 c004798:	d0a00905 	stb	r2,-32732(gp)
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
 c00479c:	00000606 	br	c0047b8 <USB_Task+0x53c>
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 c0047a0:	e0bfb903 	ldbu	r2,-284(fp)
 c0047a4:	10800044 	addi	r2,r2,1
 c0047a8:	e0bfb905 	stb	r2,-284(fp)
 c0047ac:	e0bfb903 	ldbu	r2,-284(fp)
 c0047b0:	10800230 	cmpltui	r2,r2,8
 c0047b4:	103fd01e 	bne	r2,zero,c0046f8 <__alt_data_end+0xfc0046f8>
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
                }
            }
            if( usb_task_state == USB_STATE_ADDRESSING ) {
 c0047b8:	d0a00903 	ldbu	r2,-32732(gp)
 c0047bc:	10803fcc 	andi	r2,r2,255
 c0047c0:	10800818 	cmpnei	r2,r2,32
 c0047c4:	1000341e 	bne	r2,zero,c004898 <USB_Task+0x61c>
                usb_error = 0xfe;
 c0047c8:	00bfff84 	movi	r2,-2
 c0047cc:	d0a7ac45 	stb	r2,-24911(gp)
                last_usb_task_state = usb_task_state;
 c0047d0:	d0a00903 	ldbu	r2,-32732(gp)
 c0047d4:	d0a7aa05 	stb	r2,-24920(gp)
                usb_task_state = USB_STATE_ERROR;
 c0047d8:	00bfffc4 	movi	r2,-1
 c0047dc:	d0a00905 	stb	r2,-32732(gp)
            }
            break;//case ( USB_STATE_ADDRESSING )
 c0047e0:	00002d06 	br	c004898 <USB_Task+0x61c>
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 c0047e4:	e03fb905 	stb	zero,-284(fp)
 c0047e8:	00001706 	br	c004848 <USB_Task+0x5cc>
                rcode = ClientDriverTable[ i ].Initialize( tmp_addr, 0 );
 c0047ec:	e0bfb903 	ldbu	r2,-284(fp)
 c0047f0:	040300b4 	movhi	r16,3074
 c0047f4:	84240404 	addi	r16,r16,-28656
 c0047f8:	01400304 	movi	r5,12
 c0047fc:	1009883a 	mov	r4,r2
 c004800:	c004c7c0 	call	c004c7c <__mulsi3>
 c004804:	8085883a 	add	r2,r16,r2
 c004808:	10800017 	ldw	r2,0(r2)
 c00480c:	d0e7ac03 	ldbu	r3,-24912(gp)
 c004810:	18c03fcc 	andi	r3,r3,255
 c004814:	000b883a 	mov	r5,zero
 c004818:	1809883a 	mov	r4,r3
 c00481c:	103ee83a 	callr	r2
 c004820:	e0bfb985 	stb	r2,-282(fp)
                if( rcode == TRUE ) {
 c004824:	e0bfb983 	ldbu	r2,-282(fp)
 c004828:	10800058 	cmpnei	r2,r2,1
 c00482c:	1000031e 	bne	r2,zero,c00483c <USB_Task+0x5c0>
			        usb_task_state = USB_STATE_RUNNING;
 c004830:	00801004 	movi	r2,64
 c004834:	d0a00905 	stb	r2,-32732(gp)
                    break;
 c004838:	00000606 	br	c004854 <USB_Task+0x5d8>
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 c00483c:	e0bfb903 	ldbu	r2,-284(fp)
 c004840:	10800044 	addi	r2,r2,1
 c004844:	e0bfb905 	stb	r2,-284(fp)
 c004848:	e0bfb903 	ldbu	r2,-284(fp)
 c00484c:	10800130 	cmpltui	r2,r2,4
 c004850:	103fe61e 	bne	r2,zero,c0047ec <__alt_data_end+0xfc0047ec>
                if( rcode == TRUE ) {
			        usb_task_state = USB_STATE_RUNNING;
                    break;
                }
            }
            if( usb_task_state == USB_STATE_CONFIGURING ) {
 c004854:	d0a00903 	ldbu	r2,-32732(gp)
 c004858:	10803fcc 	andi	r2,r2,255
 c00485c:	10800c18 	cmpnei	r2,r2,48
 c004860:	10000f1e 	bne	r2,zero,c0048a0 <USB_Task+0x624>
                usb_error = 0xfd;
 c004864:	00bfff44 	movi	r2,-3
 c004868:	d0a7ac45 	stb	r2,-24911(gp)
                last_usb_task_state = usb_task_state;
 c00486c:	d0a00903 	ldbu	r2,-32732(gp)
 c004870:	d0a7aa05 	stb	r2,-24920(gp)
                usb_task_state = USB_STATE_ERROR;
 c004874:	00bfffc4 	movi	r2,-1
 c004878:	d0a00905 	stb	r2,-32732(gp)
            }
            break;//( USB_STATE_CONFIGURING )
 c00487c:	00000806 	br	c0048a0 <USB_Task+0x624>
        case( USB_STATE_RUNNING ):
          //vTaskDelay( LED_RATE );
            break;//( USB_STATE_RUNNING )
 c004880:	0001883a 	nop
 c004884:	00000706 	br	c0048a4 <USB_Task+0x628>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
 c004888:	0001883a 	nop
 c00488c:	00000506 	br	c0048a4 <USB_Task+0x628>
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
 c004890:	0001883a 	nop
 c004894:	00000306 	br	c0048a4 <USB_Task+0x628>
            if( usb_task_state == USB_STATE_ADDRESSING ) {
                usb_error = 0xfe;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
 c004898:	0001883a 	nop
 c00489c:	00000106 	br	c0048a4 <USB_Task+0x628>
            if( usb_task_state == USB_STATE_CONFIGURING ) {
                usb_error = 0xfd;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//( USB_STATE_CONFIGURING )
 c0048a0:	0001883a 	nop
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
    }//switch( usb_task_state & STATE_MASK )
}
 c0048a4:	0001883a 	nop
 c0048a8:	e6ffff04 	addi	sp,fp,-4
 c0048ac:	dfc00217 	ldw	ra,8(sp)
 c0048b0:	df000117 	ldw	fp,4(sp)
 c0048b4:	dc000017 	ldw	r16,0(sp)
 c0048b8:	dec00304 	addi	sp,sp,12
 c0048bc:	f800283a 	ret

0c0048c0 <MSDProbe>:

//place-holders for MSD (mass-storage device) drivers, we don't have them ported.
//returns TRUE if device is successfully identified and configured, otherwise returns FALSE
BOOL MSDProbe( BYTE addr, DWORD flags )
{
 c0048c0:	defffd04 	addi	sp,sp,-12
 c0048c4:	df000215 	stw	fp,8(sp)
 c0048c8:	df000204 	addi	fp,sp,8
 c0048cc:	2005883a 	mov	r2,r4
 c0048d0:	e17fff15 	stw	r5,-4(fp)
 c0048d4:	e0bffe05 	stb	r2,-8(fp)
    return( FALSE );
 c0048d8:	0005883a 	mov	r2,zero
}
 c0048dc:	e037883a 	mov	sp,fp
 c0048e0:	df000017 	ldw	fp,0(sp)
 c0048e4:	dec00104 	addi	sp,sp,4
 c0048e8:	f800283a 	ret

0c0048ec <MSDEventHandler>:

BOOL MSDEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 c0048ec:	defffb04 	addi	sp,sp,-20
 c0048f0:	df000415 	stw	fp,16(sp)
 c0048f4:	df000404 	addi	fp,sp,16
 c0048f8:	2007883a 	mov	r3,r4
 c0048fc:	2805883a 	mov	r2,r5
 c004900:	e1bffe15 	stw	r6,-8(fp)
 c004904:	e1ffff15 	stw	r7,-4(fp)
 c004908:	e0fffc05 	stb	r3,-16(fp)
 c00490c:	e0bffd05 	stb	r2,-12(fp)

	return( FALSE );
 c004910:	0005883a 	mov	r2,zero

}
 c004914:	e037883a 	mov	sp,fp
 c004918:	df000017 	ldw	fp,0(sp)
 c00491c:	dec00104 	addi	sp,sp,4
 c004920:	f800283a 	ret

0c004924 <CDCProbe>:
//CDC (communication device class also not supported)
BOOL CDCProbe( BYTE address, DWORD flags )
{
 c004924:	defffd04 	addi	sp,sp,-12
 c004928:	df000215 	stw	fp,8(sp)
 c00492c:	df000204 	addi	fp,sp,8
 c004930:	2005883a 	mov	r2,r4
 c004934:	e17fff15 	stw	r5,-4(fp)
 c004938:	e0bffe05 	stb	r2,-8(fp)

	return( FALSE );
 c00493c:	0005883a 	mov	r2,zero

}
 c004940:	e037883a 	mov	sp,fp
 c004944:	df000017 	ldw	fp,0(sp)
 c004948:	dec00104 	addi	sp,sp,4
 c00494c:	f800283a 	ret

0c004950 <CDCEventHandler>:

BOOL CDCEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 c004950:	defffb04 	addi	sp,sp,-20
 c004954:	df000415 	stw	fp,16(sp)
 c004958:	df000404 	addi	fp,sp,16
 c00495c:	2007883a 	mov	r3,r4
 c004960:	2805883a 	mov	r2,r5
 c004964:	e1bffe15 	stw	r6,-8(fp)
 c004968:	e1ffff15 	stw	r7,-4(fp)
 c00496c:	e0fffc05 	stb	r3,-16(fp)
 c004970:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
 c004974:	0005883a 	mov	r2,zero
}
 c004978:	e037883a 	mov	sp,fp
 c00497c:	df000017 	ldw	fp,0(sp)
 c004980:	dec00104 	addi	sp,sp,4
 c004984:	f800283a 	ret

0c004988 <DummyProbe>:

BOOL DummyProbe( BYTE address , DWORD flags )
{
 c004988:	defffd04 	addi	sp,sp,-12
 c00498c:	df000215 	stw	fp,8(sp)
 c004990:	df000204 	addi	fp,sp,8
 c004994:	2005883a 	mov	r2,r4
 c004998:	e17fff15 	stw	r5,-4(fp)
 c00499c:	e0bffe05 	stb	r2,-8(fp)
	return( FALSE );
 c0049a0:	0005883a 	mov	r2,zero
}
 c0049a4:	e037883a 	mov	sp,fp
 c0049a8:	df000017 	ldw	fp,0(sp)
 c0049ac:	dec00104 	addi	sp,sp,4
 c0049b0:	f800283a 	ret

0c0049b4 <DummyEventHandler>:

BOOL DummyEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 c0049b4:	defffb04 	addi	sp,sp,-20
 c0049b8:	df000415 	stw	fp,16(sp)
 c0049bc:	df000404 	addi	fp,sp,16
 c0049c0:	2007883a 	mov	r3,r4
 c0049c4:	2805883a 	mov	r2,r5
 c0049c8:	e1bffe15 	stw	r6,-8(fp)
 c0049cc:	e1ffff15 	stw	r7,-4(fp)
 c0049d0:	e0fffc05 	stb	r3,-16(fp)
 c0049d4:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
 c0049d8:	0005883a 	mov	r2,zero
}
 c0049dc:	e037883a 	mov	sp,fp
 c0049e0:	df000017 	ldw	fp,0(sp)
 c0049e4:	dec00104 	addi	sp,sp,4
 c0049e8:	f800283a 	ret

0c0049ec <GetUsbTaskState>:
/* Function to access usb_task_state variable from outside */
BYTE GetUsbTaskState( void )
{
 c0049ec:	deffff04 	addi	sp,sp,-4
 c0049f0:	df000015 	stw	fp,0(sp)
 c0049f4:	d839883a 	mov	fp,sp
    return( usb_task_state );
 c0049f8:	d0a00903 	ldbu	r2,-32732(gp)
}
 c0049fc:	e037883a 	mov	sp,fp
 c004a00:	df000017 	ldw	fp,0(sp)
 c004a04:	dec00104 	addi	sp,sp,4
 c004a08:	f800283a 	ret

0c004a0c <GetDevtable>:
/* Function to access devtable[] from outside */
DEV_RECORD* GetDevtable( BYTE index )
{
 c004a0c:	defffe04 	addi	sp,sp,-8
 c004a10:	df000115 	stw	fp,4(sp)
 c004a14:	df000104 	addi	fp,sp,4
 c004a18:	2005883a 	mov	r2,r4
 c004a1c:	e0bfff05 	stb	r2,-4(fp)
    return( &devtable[ index ] );
 c004a20:	e0bfff03 	ldbu	r2,-4(fp)
 c004a24:	100690fa 	slli	r3,r2,3
 c004a28:	008300b4 	movhi	r2,3074
 c004a2c:	10b2ce04 	addi	r2,r2,-13512
 c004a30:	1885883a 	add	r2,r3,r2
}
 c004a34:	e037883a 	mov	sp,fp
 c004a38:	df000017 	ldw	fp,0(sp)
 c004a3c:	dec00104 	addi	sp,sp,4
 c004a40:	f800283a 	ret

0c004a44 <ConvUTF8ToStr>:

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
 c004a44:	defffc04 	addi	sp,sp,-16
 c004a48:	df000315 	stw	fp,12(sp)
 c004a4c:	df000304 	addi	fp,sp,12
 c004a50:	e13ffe15 	stw	r4,-8(fp)
 c004a54:	2805883a 	mov	r2,r5
 c004a58:	e0bfff05 	stb	r2,-4(fp)
	BYTE i;
	for (i = 0; i < length; i++)
 c004a5c:	e03ffd05 	stb	zero,-12(fp)
 c004a60:	00000d06 	br	c004a98 <ConvUTF8ToStr+0x54>
	{
		utf8[i] = utf8[2*i];
 c004a64:	e0bffd03 	ldbu	r2,-12(fp)
 c004a68:	e0fffe17 	ldw	r3,-8(fp)
 c004a6c:	1887883a 	add	r3,r3,r2
 c004a70:	e0bffd03 	ldbu	r2,-12(fp)
 c004a74:	1085883a 	add	r2,r2,r2
 c004a78:	1009883a 	mov	r4,r2
 c004a7c:	e0bffe17 	ldw	r2,-8(fp)
 c004a80:	1105883a 	add	r2,r2,r4
 c004a84:	10800003 	ldbu	r2,0(r2)
 c004a88:	18800005 	stb	r2,0(r3)
}

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
	BYTE i;
	for (i = 0; i < length; i++)
 c004a8c:	e0bffd03 	ldbu	r2,-12(fp)
 c004a90:	10800044 	addi	r2,r2,1
 c004a94:	e0bffd05 	stb	r2,-12(fp)
 c004a98:	e0fffd03 	ldbu	r3,-12(fp)
 c004a9c:	e0bfff03 	ldbu	r2,-4(fp)
 c004aa0:	18bff036 	bltu	r3,r2,c004a64 <__alt_data_end+0xfc004a64>
	{
		utf8[i] = utf8[2*i];
	}
	utf8[length] = 0x00;
 c004aa4:	e0bfff03 	ldbu	r2,-4(fp)
 c004aa8:	e0fffe17 	ldw	r3,-8(fp)
 c004aac:	1885883a 	add	r2,r3,r2
 c004ab0:	10000005 	stb	zero,0(r2)
	return (char*)utf8;
 c004ab4:	e0bffe17 	ldw	r2,-8(fp)
}
 c004ab8:	e037883a 	mov	sp,fp
 c004abc:	df000017 	ldw	fp,0(sp)
 c004ac0:	dec00104 	addi	sp,sp,4
 c004ac4:	f800283a 	ret

0c004ac8 <__divsi3>:
 c004ac8:	20001b16 	blt	r4,zero,c004b38 <__divsi3+0x70>
 c004acc:	000f883a 	mov	r7,zero
 c004ad0:	28001616 	blt	r5,zero,c004b2c <__divsi3+0x64>
 c004ad4:	200d883a 	mov	r6,r4
 c004ad8:	29001a2e 	bgeu	r5,r4,c004b44 <__divsi3+0x7c>
 c004adc:	00800804 	movi	r2,32
 c004ae0:	00c00044 	movi	r3,1
 c004ae4:	00000106 	br	c004aec <__divsi3+0x24>
 c004ae8:	10000d26 	beq	r2,zero,c004b20 <__divsi3+0x58>
 c004aec:	294b883a 	add	r5,r5,r5
 c004af0:	10bfffc4 	addi	r2,r2,-1
 c004af4:	18c7883a 	add	r3,r3,r3
 c004af8:	293ffb36 	bltu	r5,r4,c004ae8 <__alt_data_end+0xfc004ae8>
 c004afc:	0005883a 	mov	r2,zero
 c004b00:	18000726 	beq	r3,zero,c004b20 <__divsi3+0x58>
 c004b04:	0005883a 	mov	r2,zero
 c004b08:	31400236 	bltu	r6,r5,c004b14 <__divsi3+0x4c>
 c004b0c:	314dc83a 	sub	r6,r6,r5
 c004b10:	10c4b03a 	or	r2,r2,r3
 c004b14:	1806d07a 	srli	r3,r3,1
 c004b18:	280ad07a 	srli	r5,r5,1
 c004b1c:	183ffa1e 	bne	r3,zero,c004b08 <__alt_data_end+0xfc004b08>
 c004b20:	38000126 	beq	r7,zero,c004b28 <__divsi3+0x60>
 c004b24:	0085c83a 	sub	r2,zero,r2
 c004b28:	f800283a 	ret
 c004b2c:	014bc83a 	sub	r5,zero,r5
 c004b30:	39c0005c 	xori	r7,r7,1
 c004b34:	003fe706 	br	c004ad4 <__alt_data_end+0xfc004ad4>
 c004b38:	0109c83a 	sub	r4,zero,r4
 c004b3c:	01c00044 	movi	r7,1
 c004b40:	003fe306 	br	c004ad0 <__alt_data_end+0xfc004ad0>
 c004b44:	00c00044 	movi	r3,1
 c004b48:	003fee06 	br	c004b04 <__alt_data_end+0xfc004b04>

0c004b4c <__modsi3>:
 c004b4c:	20001716 	blt	r4,zero,c004bac <__modsi3+0x60>
 c004b50:	000f883a 	mov	r7,zero
 c004b54:	2005883a 	mov	r2,r4
 c004b58:	28001216 	blt	r5,zero,c004ba4 <__modsi3+0x58>
 c004b5c:	2900162e 	bgeu	r5,r4,c004bb8 <__modsi3+0x6c>
 c004b60:	01800804 	movi	r6,32
 c004b64:	00c00044 	movi	r3,1
 c004b68:	00000106 	br	c004b70 <__modsi3+0x24>
 c004b6c:	30000a26 	beq	r6,zero,c004b98 <__modsi3+0x4c>
 c004b70:	294b883a 	add	r5,r5,r5
 c004b74:	31bfffc4 	addi	r6,r6,-1
 c004b78:	18c7883a 	add	r3,r3,r3
 c004b7c:	293ffb36 	bltu	r5,r4,c004b6c <__alt_data_end+0xfc004b6c>
 c004b80:	18000526 	beq	r3,zero,c004b98 <__modsi3+0x4c>
 c004b84:	1806d07a 	srli	r3,r3,1
 c004b88:	11400136 	bltu	r2,r5,c004b90 <__modsi3+0x44>
 c004b8c:	1145c83a 	sub	r2,r2,r5
 c004b90:	280ad07a 	srli	r5,r5,1
 c004b94:	183ffb1e 	bne	r3,zero,c004b84 <__alt_data_end+0xfc004b84>
 c004b98:	38000126 	beq	r7,zero,c004ba0 <__modsi3+0x54>
 c004b9c:	0085c83a 	sub	r2,zero,r2
 c004ba0:	f800283a 	ret
 c004ba4:	014bc83a 	sub	r5,zero,r5
 c004ba8:	003fec06 	br	c004b5c <__alt_data_end+0xfc004b5c>
 c004bac:	0109c83a 	sub	r4,zero,r4
 c004bb0:	01c00044 	movi	r7,1
 c004bb4:	003fe706 	br	c004b54 <__alt_data_end+0xfc004b54>
 c004bb8:	00c00044 	movi	r3,1
 c004bbc:	003ff106 	br	c004b84 <__alt_data_end+0xfc004b84>

0c004bc0 <__udivsi3>:
 c004bc0:	200d883a 	mov	r6,r4
 c004bc4:	2900152e 	bgeu	r5,r4,c004c1c <__udivsi3+0x5c>
 c004bc8:	28001416 	blt	r5,zero,c004c1c <__udivsi3+0x5c>
 c004bcc:	00800804 	movi	r2,32
 c004bd0:	00c00044 	movi	r3,1
 c004bd4:	00000206 	br	c004be0 <__udivsi3+0x20>
 c004bd8:	10000e26 	beq	r2,zero,c004c14 <__udivsi3+0x54>
 c004bdc:	28000516 	blt	r5,zero,c004bf4 <__udivsi3+0x34>
 c004be0:	294b883a 	add	r5,r5,r5
 c004be4:	10bfffc4 	addi	r2,r2,-1
 c004be8:	18c7883a 	add	r3,r3,r3
 c004bec:	293ffa36 	bltu	r5,r4,c004bd8 <__alt_data_end+0xfc004bd8>
 c004bf0:	18000826 	beq	r3,zero,c004c14 <__udivsi3+0x54>
 c004bf4:	0005883a 	mov	r2,zero
 c004bf8:	31400236 	bltu	r6,r5,c004c04 <__udivsi3+0x44>
 c004bfc:	314dc83a 	sub	r6,r6,r5
 c004c00:	10c4b03a 	or	r2,r2,r3
 c004c04:	1806d07a 	srli	r3,r3,1
 c004c08:	280ad07a 	srli	r5,r5,1
 c004c0c:	183ffa1e 	bne	r3,zero,c004bf8 <__alt_data_end+0xfc004bf8>
 c004c10:	f800283a 	ret
 c004c14:	0005883a 	mov	r2,zero
 c004c18:	f800283a 	ret
 c004c1c:	00c00044 	movi	r3,1
 c004c20:	003ff406 	br	c004bf4 <__alt_data_end+0xfc004bf4>

0c004c24 <__umodsi3>:
 c004c24:	2005883a 	mov	r2,r4
 c004c28:	2900122e 	bgeu	r5,r4,c004c74 <__umodsi3+0x50>
 c004c2c:	28001116 	blt	r5,zero,c004c74 <__umodsi3+0x50>
 c004c30:	01800804 	movi	r6,32
 c004c34:	00c00044 	movi	r3,1
 c004c38:	00000206 	br	c004c44 <__umodsi3+0x20>
 c004c3c:	30000c26 	beq	r6,zero,c004c70 <__umodsi3+0x4c>
 c004c40:	28000516 	blt	r5,zero,c004c58 <__umodsi3+0x34>
 c004c44:	294b883a 	add	r5,r5,r5
 c004c48:	31bfffc4 	addi	r6,r6,-1
 c004c4c:	18c7883a 	add	r3,r3,r3
 c004c50:	293ffa36 	bltu	r5,r4,c004c3c <__alt_data_end+0xfc004c3c>
 c004c54:	18000626 	beq	r3,zero,c004c70 <__umodsi3+0x4c>
 c004c58:	1806d07a 	srli	r3,r3,1
 c004c5c:	11400136 	bltu	r2,r5,c004c64 <__umodsi3+0x40>
 c004c60:	1145c83a 	sub	r2,r2,r5
 c004c64:	280ad07a 	srli	r5,r5,1
 c004c68:	183ffb1e 	bne	r3,zero,c004c58 <__alt_data_end+0xfc004c58>
 c004c6c:	f800283a 	ret
 c004c70:	f800283a 	ret
 c004c74:	00c00044 	movi	r3,1
 c004c78:	003ff706 	br	c004c58 <__alt_data_end+0xfc004c58>

0c004c7c <__mulsi3>:
 c004c7c:	0005883a 	mov	r2,zero
 c004c80:	20000726 	beq	r4,zero,c004ca0 <__mulsi3+0x24>
 c004c84:	20c0004c 	andi	r3,r4,1
 c004c88:	2008d07a 	srli	r4,r4,1
 c004c8c:	18000126 	beq	r3,zero,c004c94 <__mulsi3+0x18>
 c004c90:	1145883a 	add	r2,r2,r5
 c004c94:	294b883a 	add	r5,r5,r5
 c004c98:	203ffa1e 	bne	r4,zero,c004c84 <__alt_data_end+0xfc004c84>
 c004c9c:	f800283a 	ret
 c004ca0:	f800283a 	ret

0c004ca4 <malloc>:
 c004ca4:	008300b4 	movhi	r2,3074
 c004ca8:	10aac804 	addi	r2,r2,-21728
 c004cac:	200b883a 	mov	r5,r4
 c004cb0:	11000017 	ldw	r4,0(r2)
 c004cb4:	c004ccc1 	jmpi	c004ccc <_malloc_r>

0c004cb8 <free>:
 c004cb8:	008300b4 	movhi	r2,3074
 c004cbc:	10aac804 	addi	r2,r2,-21728
 c004cc0:	200b883a 	mov	r5,r4
 c004cc4:	11000017 	ldw	r4,0(r2)
 c004cc8:	c00c1cc1 	jmpi	c00c1cc <_free_r>

0c004ccc <_malloc_r>:
 c004ccc:	defff504 	addi	sp,sp,-44
 c004cd0:	dc800315 	stw	r18,12(sp)
 c004cd4:	dfc00a15 	stw	ra,40(sp)
 c004cd8:	df000915 	stw	fp,36(sp)
 c004cdc:	ddc00815 	stw	r23,32(sp)
 c004ce0:	dd800715 	stw	r22,28(sp)
 c004ce4:	dd400615 	stw	r21,24(sp)
 c004ce8:	dd000515 	stw	r20,20(sp)
 c004cec:	dcc00415 	stw	r19,16(sp)
 c004cf0:	dc400215 	stw	r17,8(sp)
 c004cf4:	dc000115 	stw	r16,4(sp)
 c004cf8:	288002c4 	addi	r2,r5,11
 c004cfc:	00c00584 	movi	r3,22
 c004d00:	2025883a 	mov	r18,r4
 c004d04:	18807f2e 	bgeu	r3,r2,c004f04 <_malloc_r+0x238>
 c004d08:	047ffe04 	movi	r17,-8
 c004d0c:	1462703a 	and	r17,r2,r17
 c004d10:	8800a316 	blt	r17,zero,c004fa0 <_malloc_r+0x2d4>
 c004d14:	8940a236 	bltu	r17,r5,c004fa0 <_malloc_r+0x2d4>
 c004d18:	c015ce40 	call	c015ce4 <__malloc_lock>
 c004d1c:	00807dc4 	movi	r2,503
 c004d20:	1441e92e 	bgeu	r2,r17,c0054c8 <_malloc_r+0x7fc>
 c004d24:	8804d27a 	srli	r2,r17,9
 c004d28:	1000a126 	beq	r2,zero,c004fb0 <_malloc_r+0x2e4>
 c004d2c:	00c00104 	movi	r3,4
 c004d30:	18811e36 	bltu	r3,r2,c0051ac <_malloc_r+0x4e0>
 c004d34:	8804d1ba 	srli	r2,r17,6
 c004d38:	12000e44 	addi	r8,r2,57
 c004d3c:	11c00e04 	addi	r7,r2,56
 c004d40:	4209883a 	add	r4,r8,r8
 c004d44:	04c300b4 	movhi	r19,3074
 c004d48:	2109883a 	add	r4,r4,r4
 c004d4c:	9ce41004 	addi	r19,r19,-28608
 c004d50:	2109883a 	add	r4,r4,r4
 c004d54:	9909883a 	add	r4,r19,r4
 c004d58:	24000117 	ldw	r16,4(r4)
 c004d5c:	213ffe04 	addi	r4,r4,-8
 c004d60:	24009726 	beq	r4,r16,c004fc0 <_malloc_r+0x2f4>
 c004d64:	80800117 	ldw	r2,4(r16)
 c004d68:	01bfff04 	movi	r6,-4
 c004d6c:	014003c4 	movi	r5,15
 c004d70:	1184703a 	and	r2,r2,r6
 c004d74:	1447c83a 	sub	r3,r2,r17
 c004d78:	28c00716 	blt	r5,r3,c004d98 <_malloc_r+0xcc>
 c004d7c:	1800920e 	bge	r3,zero,c004fc8 <_malloc_r+0x2fc>
 c004d80:	84000317 	ldw	r16,12(r16)
 c004d84:	24008e26 	beq	r4,r16,c004fc0 <_malloc_r+0x2f4>
 c004d88:	80800117 	ldw	r2,4(r16)
 c004d8c:	1184703a 	and	r2,r2,r6
 c004d90:	1447c83a 	sub	r3,r2,r17
 c004d94:	28fff90e 	bge	r5,r3,c004d7c <__alt_data_end+0xfc004d7c>
 c004d98:	3809883a 	mov	r4,r7
 c004d9c:	018300b4 	movhi	r6,3074
 c004da0:	9c000417 	ldw	r16,16(r19)
 c004da4:	31a41004 	addi	r6,r6,-28608
 c004da8:	32000204 	addi	r8,r6,8
 c004dac:	82013426 	beq	r16,r8,c005280 <_malloc_r+0x5b4>
 c004db0:	80c00117 	ldw	r3,4(r16)
 c004db4:	00bfff04 	movi	r2,-4
 c004db8:	188e703a 	and	r7,r3,r2
 c004dbc:	3c45c83a 	sub	r2,r7,r17
 c004dc0:	00c003c4 	movi	r3,15
 c004dc4:	18811f16 	blt	r3,r2,c005244 <_malloc_r+0x578>
 c004dc8:	32000515 	stw	r8,20(r6)
 c004dcc:	32000415 	stw	r8,16(r6)
 c004dd0:	10007f0e 	bge	r2,zero,c004fd0 <_malloc_r+0x304>
 c004dd4:	00807fc4 	movi	r2,511
 c004dd8:	11c0fd36 	bltu	r2,r7,c0051d0 <_malloc_r+0x504>
 c004ddc:	3806d0fa 	srli	r3,r7,3
 c004de0:	01c00044 	movi	r7,1
 c004de4:	30800117 	ldw	r2,4(r6)
 c004de8:	19400044 	addi	r5,r3,1
 c004dec:	294b883a 	add	r5,r5,r5
 c004df0:	1807d0ba 	srai	r3,r3,2
 c004df4:	294b883a 	add	r5,r5,r5
 c004df8:	294b883a 	add	r5,r5,r5
 c004dfc:	298b883a 	add	r5,r5,r6
 c004e00:	38c6983a 	sll	r3,r7,r3
 c004e04:	29c00017 	ldw	r7,0(r5)
 c004e08:	2a7ffe04 	addi	r9,r5,-8
 c004e0c:	1886b03a 	or	r3,r3,r2
 c004e10:	82400315 	stw	r9,12(r16)
 c004e14:	81c00215 	stw	r7,8(r16)
 c004e18:	30c00115 	stw	r3,4(r6)
 c004e1c:	2c000015 	stw	r16,0(r5)
 c004e20:	3c000315 	stw	r16,12(r7)
 c004e24:	2005d0ba 	srai	r2,r4,2
 c004e28:	01400044 	movi	r5,1
 c004e2c:	288a983a 	sll	r5,r5,r2
 c004e30:	19406f36 	bltu	r3,r5,c004ff0 <_malloc_r+0x324>
 c004e34:	28c4703a 	and	r2,r5,r3
 c004e38:	10000a1e 	bne	r2,zero,c004e64 <_malloc_r+0x198>
 c004e3c:	00bfff04 	movi	r2,-4
 c004e40:	294b883a 	add	r5,r5,r5
 c004e44:	2088703a 	and	r4,r4,r2
 c004e48:	28c4703a 	and	r2,r5,r3
 c004e4c:	21000104 	addi	r4,r4,4
 c004e50:	1000041e 	bne	r2,zero,c004e64 <_malloc_r+0x198>
 c004e54:	294b883a 	add	r5,r5,r5
 c004e58:	28c4703a 	and	r2,r5,r3
 c004e5c:	21000104 	addi	r4,r4,4
 c004e60:	103ffc26 	beq	r2,zero,c004e54 <__alt_data_end+0xfc004e54>
 c004e64:	02bfff04 	movi	r10,-4
 c004e68:	024003c4 	movi	r9,15
 c004e6c:	21800044 	addi	r6,r4,1
 c004e70:	318d883a 	add	r6,r6,r6
 c004e74:	318d883a 	add	r6,r6,r6
 c004e78:	318d883a 	add	r6,r6,r6
 c004e7c:	998d883a 	add	r6,r19,r6
 c004e80:	333ffe04 	addi	r12,r6,-8
 c004e84:	2017883a 	mov	r11,r4
 c004e88:	31800104 	addi	r6,r6,4
 c004e8c:	34000017 	ldw	r16,0(r6)
 c004e90:	31fffd04 	addi	r7,r6,-12
 c004e94:	81c0041e 	bne	r16,r7,c004ea8 <_malloc_r+0x1dc>
 c004e98:	0000fb06 	br	c005288 <_malloc_r+0x5bc>
 c004e9c:	1801030e 	bge	r3,zero,c0052ac <_malloc_r+0x5e0>
 c004ea0:	84000317 	ldw	r16,12(r16)
 c004ea4:	81c0f826 	beq	r16,r7,c005288 <_malloc_r+0x5bc>
 c004ea8:	80800117 	ldw	r2,4(r16)
 c004eac:	1284703a 	and	r2,r2,r10
 c004eb0:	1447c83a 	sub	r3,r2,r17
 c004eb4:	48fff90e 	bge	r9,r3,c004e9c <__alt_data_end+0xfc004e9c>
 c004eb8:	80800317 	ldw	r2,12(r16)
 c004ebc:	81000217 	ldw	r4,8(r16)
 c004ec0:	89400054 	ori	r5,r17,1
 c004ec4:	81400115 	stw	r5,4(r16)
 c004ec8:	20800315 	stw	r2,12(r4)
 c004ecc:	11000215 	stw	r4,8(r2)
 c004ed0:	8463883a 	add	r17,r16,r17
 c004ed4:	9c400515 	stw	r17,20(r19)
 c004ed8:	9c400415 	stw	r17,16(r19)
 c004edc:	18800054 	ori	r2,r3,1
 c004ee0:	88800115 	stw	r2,4(r17)
 c004ee4:	8a000315 	stw	r8,12(r17)
 c004ee8:	8a000215 	stw	r8,8(r17)
 c004eec:	88e3883a 	add	r17,r17,r3
 c004ef0:	88c00015 	stw	r3,0(r17)
 c004ef4:	9009883a 	mov	r4,r18
 c004ef8:	c015d080 	call	c015d08 <__malloc_unlock>
 c004efc:	80800204 	addi	r2,r16,8
 c004f00:	00001b06 	br	c004f70 <_malloc_r+0x2a4>
 c004f04:	04400404 	movi	r17,16
 c004f08:	89402536 	bltu	r17,r5,c004fa0 <_malloc_r+0x2d4>
 c004f0c:	c015ce40 	call	c015ce4 <__malloc_lock>
 c004f10:	00800184 	movi	r2,6
 c004f14:	01000084 	movi	r4,2
 c004f18:	04c300b4 	movhi	r19,3074
 c004f1c:	1085883a 	add	r2,r2,r2
 c004f20:	9ce41004 	addi	r19,r19,-28608
 c004f24:	1085883a 	add	r2,r2,r2
 c004f28:	9885883a 	add	r2,r19,r2
 c004f2c:	14000117 	ldw	r16,4(r2)
 c004f30:	10fffe04 	addi	r3,r2,-8
 c004f34:	80c0d926 	beq	r16,r3,c00529c <_malloc_r+0x5d0>
 c004f38:	80c00117 	ldw	r3,4(r16)
 c004f3c:	81000317 	ldw	r4,12(r16)
 c004f40:	00bfff04 	movi	r2,-4
 c004f44:	1884703a 	and	r2,r3,r2
 c004f48:	81400217 	ldw	r5,8(r16)
 c004f4c:	8085883a 	add	r2,r16,r2
 c004f50:	10c00117 	ldw	r3,4(r2)
 c004f54:	29000315 	stw	r4,12(r5)
 c004f58:	21400215 	stw	r5,8(r4)
 c004f5c:	18c00054 	ori	r3,r3,1
 c004f60:	10c00115 	stw	r3,4(r2)
 c004f64:	9009883a 	mov	r4,r18
 c004f68:	c015d080 	call	c015d08 <__malloc_unlock>
 c004f6c:	80800204 	addi	r2,r16,8
 c004f70:	dfc00a17 	ldw	ra,40(sp)
 c004f74:	df000917 	ldw	fp,36(sp)
 c004f78:	ddc00817 	ldw	r23,32(sp)
 c004f7c:	dd800717 	ldw	r22,28(sp)
 c004f80:	dd400617 	ldw	r21,24(sp)
 c004f84:	dd000517 	ldw	r20,20(sp)
 c004f88:	dcc00417 	ldw	r19,16(sp)
 c004f8c:	dc800317 	ldw	r18,12(sp)
 c004f90:	dc400217 	ldw	r17,8(sp)
 c004f94:	dc000117 	ldw	r16,4(sp)
 c004f98:	dec00b04 	addi	sp,sp,44
 c004f9c:	f800283a 	ret
 c004fa0:	00800304 	movi	r2,12
 c004fa4:	90800015 	stw	r2,0(r18)
 c004fa8:	0005883a 	mov	r2,zero
 c004fac:	003ff006 	br	c004f70 <__alt_data_end+0xfc004f70>
 c004fb0:	01002004 	movi	r4,128
 c004fb4:	02001004 	movi	r8,64
 c004fb8:	01c00fc4 	movi	r7,63
 c004fbc:	003f6106 	br	c004d44 <__alt_data_end+0xfc004d44>
 c004fc0:	4009883a 	mov	r4,r8
 c004fc4:	003f7506 	br	c004d9c <__alt_data_end+0xfc004d9c>
 c004fc8:	81000317 	ldw	r4,12(r16)
 c004fcc:	003fde06 	br	c004f48 <__alt_data_end+0xfc004f48>
 c004fd0:	81c5883a 	add	r2,r16,r7
 c004fd4:	11400117 	ldw	r5,4(r2)
 c004fd8:	9009883a 	mov	r4,r18
 c004fdc:	29400054 	ori	r5,r5,1
 c004fe0:	11400115 	stw	r5,4(r2)
 c004fe4:	c015d080 	call	c015d08 <__malloc_unlock>
 c004fe8:	80800204 	addi	r2,r16,8
 c004fec:	003fe006 	br	c004f70 <__alt_data_end+0xfc004f70>
 c004ff0:	9c000217 	ldw	r16,8(r19)
 c004ff4:	00bfff04 	movi	r2,-4
 c004ff8:	85800117 	ldw	r22,4(r16)
 c004ffc:	b0ac703a 	and	r22,r22,r2
 c005000:	b4400336 	bltu	r22,r17,c005010 <_malloc_r+0x344>
 c005004:	b445c83a 	sub	r2,r22,r17
 c005008:	00c003c4 	movi	r3,15
 c00500c:	18805d16 	blt	r3,r2,c005184 <_malloc_r+0x4b8>
 c005010:	05c300b4 	movhi	r23,3074
 c005014:	008300b4 	movhi	r2,3074
 c005018:	10b26a04 	addi	r2,r2,-13912
 c00501c:	bdeac504 	addi	r23,r23,-21740
 c005020:	15400017 	ldw	r21,0(r2)
 c005024:	b8c00017 	ldw	r3,0(r23)
 c005028:	00bfffc4 	movi	r2,-1
 c00502c:	858d883a 	add	r6,r16,r22
 c005030:	8d6b883a 	add	r21,r17,r21
 c005034:	1880ea26 	beq	r3,r2,c0053e0 <_malloc_r+0x714>
 c005038:	ad4403c4 	addi	r21,r21,4111
 c00503c:	00bc0004 	movi	r2,-4096
 c005040:	a8aa703a 	and	r21,r21,r2
 c005044:	a80b883a 	mov	r5,r21
 c005048:	9009883a 	mov	r4,r18
 c00504c:	d9800015 	stw	r6,0(sp)
 c005050:	c0057dc0 	call	c0057dc <_sbrk_r>
 c005054:	1029883a 	mov	r20,r2
 c005058:	00bfffc4 	movi	r2,-1
 c00505c:	d9800017 	ldw	r6,0(sp)
 c005060:	a080e826 	beq	r20,r2,c005404 <_malloc_r+0x738>
 c005064:	a180a636 	bltu	r20,r6,c005300 <_malloc_r+0x634>
 c005068:	070300b4 	movhi	fp,3074
 c00506c:	e7328404 	addi	fp,fp,-13808
 c005070:	e0800017 	ldw	r2,0(fp)
 c005074:	a887883a 	add	r3,r21,r2
 c005078:	e0c00015 	stw	r3,0(fp)
 c00507c:	3500e626 	beq	r6,r20,c005418 <_malloc_r+0x74c>
 c005080:	b9000017 	ldw	r4,0(r23)
 c005084:	00bfffc4 	movi	r2,-1
 c005088:	2080ee26 	beq	r4,r2,c005444 <_malloc_r+0x778>
 c00508c:	a185c83a 	sub	r2,r20,r6
 c005090:	10c5883a 	add	r2,r2,r3
 c005094:	e0800015 	stw	r2,0(fp)
 c005098:	a0c001cc 	andi	r3,r20,7
 c00509c:	1800bc26 	beq	r3,zero,c005390 <_malloc_r+0x6c4>
 c0050a0:	a0e9c83a 	sub	r20,r20,r3
 c0050a4:	00840204 	movi	r2,4104
 c0050a8:	a5000204 	addi	r20,r20,8
 c0050ac:	10c7c83a 	sub	r3,r2,r3
 c0050b0:	a545883a 	add	r2,r20,r21
 c0050b4:	1083ffcc 	andi	r2,r2,4095
 c0050b8:	18abc83a 	sub	r21,r3,r2
 c0050bc:	a80b883a 	mov	r5,r21
 c0050c0:	9009883a 	mov	r4,r18
 c0050c4:	c0057dc0 	call	c0057dc <_sbrk_r>
 c0050c8:	00ffffc4 	movi	r3,-1
 c0050cc:	10c0e126 	beq	r2,r3,c005454 <_malloc_r+0x788>
 c0050d0:	1505c83a 	sub	r2,r2,r20
 c0050d4:	1545883a 	add	r2,r2,r21
 c0050d8:	10800054 	ori	r2,r2,1
 c0050dc:	e0c00017 	ldw	r3,0(fp)
 c0050e0:	9d000215 	stw	r20,8(r19)
 c0050e4:	a0800115 	stw	r2,4(r20)
 c0050e8:	a8c7883a 	add	r3,r21,r3
 c0050ec:	e0c00015 	stw	r3,0(fp)
 c0050f0:	84c00e26 	beq	r16,r19,c00512c <_malloc_r+0x460>
 c0050f4:	018003c4 	movi	r6,15
 c0050f8:	3580a72e 	bgeu	r6,r22,c005398 <_malloc_r+0x6cc>
 c0050fc:	81400117 	ldw	r5,4(r16)
 c005100:	013ffe04 	movi	r4,-8
 c005104:	b0bffd04 	addi	r2,r22,-12
 c005108:	1104703a 	and	r2,r2,r4
 c00510c:	2900004c 	andi	r4,r5,1
 c005110:	2088b03a 	or	r4,r4,r2
 c005114:	81000115 	stw	r4,4(r16)
 c005118:	01400144 	movi	r5,5
 c00511c:	8089883a 	add	r4,r16,r2
 c005120:	21400115 	stw	r5,4(r4)
 c005124:	21400215 	stw	r5,8(r4)
 c005128:	3080cd36 	bltu	r6,r2,c005460 <_malloc_r+0x794>
 c00512c:	008300b4 	movhi	r2,3074
 c005130:	10b26904 	addi	r2,r2,-13916
 c005134:	11000017 	ldw	r4,0(r2)
 c005138:	20c0012e 	bgeu	r4,r3,c005140 <_malloc_r+0x474>
 c00513c:	10c00015 	stw	r3,0(r2)
 c005140:	008300b4 	movhi	r2,3074
 c005144:	10b26804 	addi	r2,r2,-13920
 c005148:	11000017 	ldw	r4,0(r2)
 c00514c:	9c000217 	ldw	r16,8(r19)
 c005150:	20c0012e 	bgeu	r4,r3,c005158 <_malloc_r+0x48c>
 c005154:	10c00015 	stw	r3,0(r2)
 c005158:	80c00117 	ldw	r3,4(r16)
 c00515c:	00bfff04 	movi	r2,-4
 c005160:	1886703a 	and	r3,r3,r2
 c005164:	1c45c83a 	sub	r2,r3,r17
 c005168:	1c400236 	bltu	r3,r17,c005174 <_malloc_r+0x4a8>
 c00516c:	00c003c4 	movi	r3,15
 c005170:	18800416 	blt	r3,r2,c005184 <_malloc_r+0x4b8>
 c005174:	9009883a 	mov	r4,r18
 c005178:	c015d080 	call	c015d08 <__malloc_unlock>
 c00517c:	0005883a 	mov	r2,zero
 c005180:	003f7b06 	br	c004f70 <__alt_data_end+0xfc004f70>
 c005184:	88c00054 	ori	r3,r17,1
 c005188:	80c00115 	stw	r3,4(r16)
 c00518c:	8463883a 	add	r17,r16,r17
 c005190:	10800054 	ori	r2,r2,1
 c005194:	9c400215 	stw	r17,8(r19)
 c005198:	88800115 	stw	r2,4(r17)
 c00519c:	9009883a 	mov	r4,r18
 c0051a0:	c015d080 	call	c015d08 <__malloc_unlock>
 c0051a4:	80800204 	addi	r2,r16,8
 c0051a8:	003f7106 	br	c004f70 <__alt_data_end+0xfc004f70>
 c0051ac:	00c00504 	movi	r3,20
 c0051b0:	18804a2e 	bgeu	r3,r2,c0052dc <_malloc_r+0x610>
 c0051b4:	00c01504 	movi	r3,84
 c0051b8:	18806e36 	bltu	r3,r2,c005374 <_malloc_r+0x6a8>
 c0051bc:	8804d33a 	srli	r2,r17,12
 c0051c0:	12001bc4 	addi	r8,r2,111
 c0051c4:	11c01b84 	addi	r7,r2,110
 c0051c8:	4209883a 	add	r4,r8,r8
 c0051cc:	003edd06 	br	c004d44 <__alt_data_end+0xfc004d44>
 c0051d0:	3804d27a 	srli	r2,r7,9
 c0051d4:	00c00104 	movi	r3,4
 c0051d8:	1880442e 	bgeu	r3,r2,c0052ec <_malloc_r+0x620>
 c0051dc:	00c00504 	movi	r3,20
 c0051e0:	18808136 	bltu	r3,r2,c0053e8 <_malloc_r+0x71c>
 c0051e4:	11401704 	addi	r5,r2,92
 c0051e8:	10c016c4 	addi	r3,r2,91
 c0051ec:	294b883a 	add	r5,r5,r5
 c0051f0:	294b883a 	add	r5,r5,r5
 c0051f4:	294b883a 	add	r5,r5,r5
 c0051f8:	994b883a 	add	r5,r19,r5
 c0051fc:	28800017 	ldw	r2,0(r5)
 c005200:	018300b4 	movhi	r6,3074
 c005204:	297ffe04 	addi	r5,r5,-8
 c005208:	31a41004 	addi	r6,r6,-28608
 c00520c:	28806526 	beq	r5,r2,c0053a4 <_malloc_r+0x6d8>
 c005210:	01bfff04 	movi	r6,-4
 c005214:	10c00117 	ldw	r3,4(r2)
 c005218:	1986703a 	and	r3,r3,r6
 c00521c:	38c0022e 	bgeu	r7,r3,c005228 <_malloc_r+0x55c>
 c005220:	10800217 	ldw	r2,8(r2)
 c005224:	28bffb1e 	bne	r5,r2,c005214 <__alt_data_end+0xfc005214>
 c005228:	11400317 	ldw	r5,12(r2)
 c00522c:	98c00117 	ldw	r3,4(r19)
 c005230:	81400315 	stw	r5,12(r16)
 c005234:	80800215 	stw	r2,8(r16)
 c005238:	2c000215 	stw	r16,8(r5)
 c00523c:	14000315 	stw	r16,12(r2)
 c005240:	003ef806 	br	c004e24 <__alt_data_end+0xfc004e24>
 c005244:	88c00054 	ori	r3,r17,1
 c005248:	80c00115 	stw	r3,4(r16)
 c00524c:	8463883a 	add	r17,r16,r17
 c005250:	34400515 	stw	r17,20(r6)
 c005254:	34400415 	stw	r17,16(r6)
 c005258:	10c00054 	ori	r3,r2,1
 c00525c:	8a000315 	stw	r8,12(r17)
 c005260:	8a000215 	stw	r8,8(r17)
 c005264:	88c00115 	stw	r3,4(r17)
 c005268:	88a3883a 	add	r17,r17,r2
 c00526c:	88800015 	stw	r2,0(r17)
 c005270:	9009883a 	mov	r4,r18
 c005274:	c015d080 	call	c015d08 <__malloc_unlock>
 c005278:	80800204 	addi	r2,r16,8
 c00527c:	003f3c06 	br	c004f70 <__alt_data_end+0xfc004f70>
 c005280:	30c00117 	ldw	r3,4(r6)
 c005284:	003ee706 	br	c004e24 <__alt_data_end+0xfc004e24>
 c005288:	5ac00044 	addi	r11,r11,1
 c00528c:	588000cc 	andi	r2,r11,3
 c005290:	31800204 	addi	r6,r6,8
 c005294:	103efd1e 	bne	r2,zero,c004e8c <__alt_data_end+0xfc004e8c>
 c005298:	00002406 	br	c00532c <_malloc_r+0x660>
 c00529c:	14000317 	ldw	r16,12(r2)
 c0052a0:	143f251e 	bne	r2,r16,c004f38 <__alt_data_end+0xfc004f38>
 c0052a4:	21000084 	addi	r4,r4,2
 c0052a8:	003ebc06 	br	c004d9c <__alt_data_end+0xfc004d9c>
 c0052ac:	8085883a 	add	r2,r16,r2
 c0052b0:	10c00117 	ldw	r3,4(r2)
 c0052b4:	81000317 	ldw	r4,12(r16)
 c0052b8:	81400217 	ldw	r5,8(r16)
 c0052bc:	18c00054 	ori	r3,r3,1
 c0052c0:	10c00115 	stw	r3,4(r2)
 c0052c4:	29000315 	stw	r4,12(r5)
 c0052c8:	21400215 	stw	r5,8(r4)
 c0052cc:	9009883a 	mov	r4,r18
 c0052d0:	c015d080 	call	c015d08 <__malloc_unlock>
 c0052d4:	80800204 	addi	r2,r16,8
 c0052d8:	003f2506 	br	c004f70 <__alt_data_end+0xfc004f70>
 c0052dc:	12001704 	addi	r8,r2,92
 c0052e0:	11c016c4 	addi	r7,r2,91
 c0052e4:	4209883a 	add	r4,r8,r8
 c0052e8:	003e9606 	br	c004d44 <__alt_data_end+0xfc004d44>
 c0052ec:	3804d1ba 	srli	r2,r7,6
 c0052f0:	11400e44 	addi	r5,r2,57
 c0052f4:	10c00e04 	addi	r3,r2,56
 c0052f8:	294b883a 	add	r5,r5,r5
 c0052fc:	003fbc06 	br	c0051f0 <__alt_data_end+0xfc0051f0>
 c005300:	84ff5926 	beq	r16,r19,c005068 <__alt_data_end+0xfc005068>
 c005304:	008300b4 	movhi	r2,3074
 c005308:	10a41004 	addi	r2,r2,-28608
 c00530c:	14000217 	ldw	r16,8(r2)
 c005310:	00bfff04 	movi	r2,-4
 c005314:	80c00117 	ldw	r3,4(r16)
 c005318:	1886703a 	and	r3,r3,r2
 c00531c:	003f9106 	br	c005164 <__alt_data_end+0xfc005164>
 c005320:	60800217 	ldw	r2,8(r12)
 c005324:	213fffc4 	addi	r4,r4,-1
 c005328:	1300651e 	bne	r2,r12,c0054c0 <_malloc_r+0x7f4>
 c00532c:	208000cc 	andi	r2,r4,3
 c005330:	633ffe04 	addi	r12,r12,-8
 c005334:	103ffa1e 	bne	r2,zero,c005320 <__alt_data_end+0xfc005320>
 c005338:	98800117 	ldw	r2,4(r19)
 c00533c:	0146303a 	nor	r3,zero,r5
 c005340:	1884703a 	and	r2,r3,r2
 c005344:	98800115 	stw	r2,4(r19)
 c005348:	294b883a 	add	r5,r5,r5
 c00534c:	117f2836 	bltu	r2,r5,c004ff0 <__alt_data_end+0xfc004ff0>
 c005350:	283f2726 	beq	r5,zero,c004ff0 <__alt_data_end+0xfc004ff0>
 c005354:	2886703a 	and	r3,r5,r2
 c005358:	5809883a 	mov	r4,r11
 c00535c:	183ec31e 	bne	r3,zero,c004e6c <__alt_data_end+0xfc004e6c>
 c005360:	294b883a 	add	r5,r5,r5
 c005364:	2886703a 	and	r3,r5,r2
 c005368:	21000104 	addi	r4,r4,4
 c00536c:	183ffc26 	beq	r3,zero,c005360 <__alt_data_end+0xfc005360>
 c005370:	003ebe06 	br	c004e6c <__alt_data_end+0xfc004e6c>
 c005374:	00c05504 	movi	r3,340
 c005378:	18801236 	bltu	r3,r2,c0053c4 <_malloc_r+0x6f8>
 c00537c:	8804d3fa 	srli	r2,r17,15
 c005380:	12001e04 	addi	r8,r2,120
 c005384:	11c01dc4 	addi	r7,r2,119
 c005388:	4209883a 	add	r4,r8,r8
 c00538c:	003e6d06 	br	c004d44 <__alt_data_end+0xfc004d44>
 c005390:	00c40004 	movi	r3,4096
 c005394:	003f4606 	br	c0050b0 <__alt_data_end+0xfc0050b0>
 c005398:	00800044 	movi	r2,1
 c00539c:	a0800115 	stw	r2,4(r20)
 c0053a0:	003f7406 	br	c005174 <__alt_data_end+0xfc005174>
 c0053a4:	1805d0ba 	srai	r2,r3,2
 c0053a8:	01c00044 	movi	r7,1
 c0053ac:	30c00117 	ldw	r3,4(r6)
 c0053b0:	388e983a 	sll	r7,r7,r2
 c0053b4:	2805883a 	mov	r2,r5
 c0053b8:	38c6b03a 	or	r3,r7,r3
 c0053bc:	30c00115 	stw	r3,4(r6)
 c0053c0:	003f9b06 	br	c005230 <__alt_data_end+0xfc005230>
 c0053c4:	00c15504 	movi	r3,1364
 c0053c8:	18801a36 	bltu	r3,r2,c005434 <_malloc_r+0x768>
 c0053cc:	8804d4ba 	srli	r2,r17,18
 c0053d0:	12001f44 	addi	r8,r2,125
 c0053d4:	11c01f04 	addi	r7,r2,124
 c0053d8:	4209883a 	add	r4,r8,r8
 c0053dc:	003e5906 	br	c004d44 <__alt_data_end+0xfc004d44>
 c0053e0:	ad400404 	addi	r21,r21,16
 c0053e4:	003f1706 	br	c005044 <__alt_data_end+0xfc005044>
 c0053e8:	00c01504 	movi	r3,84
 c0053ec:	18802336 	bltu	r3,r2,c00547c <_malloc_r+0x7b0>
 c0053f0:	3804d33a 	srli	r2,r7,12
 c0053f4:	11401bc4 	addi	r5,r2,111
 c0053f8:	10c01b84 	addi	r3,r2,110
 c0053fc:	294b883a 	add	r5,r5,r5
 c005400:	003f7b06 	br	c0051f0 <__alt_data_end+0xfc0051f0>
 c005404:	9c000217 	ldw	r16,8(r19)
 c005408:	00bfff04 	movi	r2,-4
 c00540c:	80c00117 	ldw	r3,4(r16)
 c005410:	1886703a 	and	r3,r3,r2
 c005414:	003f5306 	br	c005164 <__alt_data_end+0xfc005164>
 c005418:	3083ffcc 	andi	r2,r6,4095
 c00541c:	103f181e 	bne	r2,zero,c005080 <__alt_data_end+0xfc005080>
 c005420:	99000217 	ldw	r4,8(r19)
 c005424:	b545883a 	add	r2,r22,r21
 c005428:	10800054 	ori	r2,r2,1
 c00542c:	20800115 	stw	r2,4(r4)
 c005430:	003f3e06 	br	c00512c <__alt_data_end+0xfc00512c>
 c005434:	01003f84 	movi	r4,254
 c005438:	02001fc4 	movi	r8,127
 c00543c:	01c01f84 	movi	r7,126
 c005440:	003e4006 	br	c004d44 <__alt_data_end+0xfc004d44>
 c005444:	008300b4 	movhi	r2,3074
 c005448:	10aac504 	addi	r2,r2,-21740
 c00544c:	15000015 	stw	r20,0(r2)
 c005450:	003f1106 	br	c005098 <__alt_data_end+0xfc005098>
 c005454:	00800044 	movi	r2,1
 c005458:	002b883a 	mov	r21,zero
 c00545c:	003f1f06 	br	c0050dc <__alt_data_end+0xfc0050dc>
 c005460:	81400204 	addi	r5,r16,8
 c005464:	9009883a 	mov	r4,r18
 c005468:	c00c1cc0 	call	c00c1cc <_free_r>
 c00546c:	008300b4 	movhi	r2,3074
 c005470:	10b28404 	addi	r2,r2,-13808
 c005474:	10c00017 	ldw	r3,0(r2)
 c005478:	003f2c06 	br	c00512c <__alt_data_end+0xfc00512c>
 c00547c:	00c05504 	movi	r3,340
 c005480:	18800536 	bltu	r3,r2,c005498 <_malloc_r+0x7cc>
 c005484:	3804d3fa 	srli	r2,r7,15
 c005488:	11401e04 	addi	r5,r2,120
 c00548c:	10c01dc4 	addi	r3,r2,119
 c005490:	294b883a 	add	r5,r5,r5
 c005494:	003f5606 	br	c0051f0 <__alt_data_end+0xfc0051f0>
 c005498:	00c15504 	movi	r3,1364
 c00549c:	18800536 	bltu	r3,r2,c0054b4 <_malloc_r+0x7e8>
 c0054a0:	3804d4ba 	srli	r2,r7,18
 c0054a4:	11401f44 	addi	r5,r2,125
 c0054a8:	10c01f04 	addi	r3,r2,124
 c0054ac:	294b883a 	add	r5,r5,r5
 c0054b0:	003f4f06 	br	c0051f0 <__alt_data_end+0xfc0051f0>
 c0054b4:	01403f84 	movi	r5,254
 c0054b8:	00c01f84 	movi	r3,126
 c0054bc:	003f4c06 	br	c0051f0 <__alt_data_end+0xfc0051f0>
 c0054c0:	98800117 	ldw	r2,4(r19)
 c0054c4:	003fa006 	br	c005348 <__alt_data_end+0xfc005348>
 c0054c8:	8808d0fa 	srli	r4,r17,3
 c0054cc:	20800044 	addi	r2,r4,1
 c0054d0:	1085883a 	add	r2,r2,r2
 c0054d4:	003e9006 	br	c004f18 <__alt_data_end+0xfc004f18>

0c0054d8 <memcpy>:
 c0054d8:	defffd04 	addi	sp,sp,-12
 c0054dc:	dfc00215 	stw	ra,8(sp)
 c0054e0:	dc400115 	stw	r17,4(sp)
 c0054e4:	dc000015 	stw	r16,0(sp)
 c0054e8:	00c003c4 	movi	r3,15
 c0054ec:	2005883a 	mov	r2,r4
 c0054f0:	1980452e 	bgeu	r3,r6,c005608 <memcpy+0x130>
 c0054f4:	2906b03a 	or	r3,r5,r4
 c0054f8:	18c000cc 	andi	r3,r3,3
 c0054fc:	1800441e 	bne	r3,zero,c005610 <memcpy+0x138>
 c005500:	347ffc04 	addi	r17,r6,-16
 c005504:	8822d13a 	srli	r17,r17,4
 c005508:	28c00104 	addi	r3,r5,4
 c00550c:	23400104 	addi	r13,r4,4
 c005510:	8820913a 	slli	r16,r17,4
 c005514:	2b000204 	addi	r12,r5,8
 c005518:	22c00204 	addi	r11,r4,8
 c00551c:	84000504 	addi	r16,r16,20
 c005520:	2a800304 	addi	r10,r5,12
 c005524:	22400304 	addi	r9,r4,12
 c005528:	2c21883a 	add	r16,r5,r16
 c00552c:	2811883a 	mov	r8,r5
 c005530:	200f883a 	mov	r7,r4
 c005534:	41000017 	ldw	r4,0(r8)
 c005538:	1fc00017 	ldw	ra,0(r3)
 c00553c:	63c00017 	ldw	r15,0(r12)
 c005540:	39000015 	stw	r4,0(r7)
 c005544:	53800017 	ldw	r14,0(r10)
 c005548:	6fc00015 	stw	ra,0(r13)
 c00554c:	5bc00015 	stw	r15,0(r11)
 c005550:	4b800015 	stw	r14,0(r9)
 c005554:	18c00404 	addi	r3,r3,16
 c005558:	39c00404 	addi	r7,r7,16
 c00555c:	42000404 	addi	r8,r8,16
 c005560:	6b400404 	addi	r13,r13,16
 c005564:	63000404 	addi	r12,r12,16
 c005568:	5ac00404 	addi	r11,r11,16
 c00556c:	52800404 	addi	r10,r10,16
 c005570:	4a400404 	addi	r9,r9,16
 c005574:	1c3fef1e 	bne	r3,r16,c005534 <__alt_data_end+0xfc005534>
 c005578:	89c00044 	addi	r7,r17,1
 c00557c:	380e913a 	slli	r7,r7,4
 c005580:	310003cc 	andi	r4,r6,15
 c005584:	02c000c4 	movi	r11,3
 c005588:	11c7883a 	add	r3,r2,r7
 c00558c:	29cb883a 	add	r5,r5,r7
 c005590:	5900212e 	bgeu	r11,r4,c005618 <memcpy+0x140>
 c005594:	1813883a 	mov	r9,r3
 c005598:	2811883a 	mov	r8,r5
 c00559c:	200f883a 	mov	r7,r4
 c0055a0:	42800017 	ldw	r10,0(r8)
 c0055a4:	4a400104 	addi	r9,r9,4
 c0055a8:	39ffff04 	addi	r7,r7,-4
 c0055ac:	4abfff15 	stw	r10,-4(r9)
 c0055b0:	42000104 	addi	r8,r8,4
 c0055b4:	59fffa36 	bltu	r11,r7,c0055a0 <__alt_data_end+0xfc0055a0>
 c0055b8:	213fff04 	addi	r4,r4,-4
 c0055bc:	2008d0ba 	srli	r4,r4,2
 c0055c0:	318000cc 	andi	r6,r6,3
 c0055c4:	21000044 	addi	r4,r4,1
 c0055c8:	2109883a 	add	r4,r4,r4
 c0055cc:	2109883a 	add	r4,r4,r4
 c0055d0:	1907883a 	add	r3,r3,r4
 c0055d4:	290b883a 	add	r5,r5,r4
 c0055d8:	30000626 	beq	r6,zero,c0055f4 <memcpy+0x11c>
 c0055dc:	198d883a 	add	r6,r3,r6
 c0055e0:	29c00003 	ldbu	r7,0(r5)
 c0055e4:	18c00044 	addi	r3,r3,1
 c0055e8:	29400044 	addi	r5,r5,1
 c0055ec:	19ffffc5 	stb	r7,-1(r3)
 c0055f0:	19bffb1e 	bne	r3,r6,c0055e0 <__alt_data_end+0xfc0055e0>
 c0055f4:	dfc00217 	ldw	ra,8(sp)
 c0055f8:	dc400117 	ldw	r17,4(sp)
 c0055fc:	dc000017 	ldw	r16,0(sp)
 c005600:	dec00304 	addi	sp,sp,12
 c005604:	f800283a 	ret
 c005608:	2007883a 	mov	r3,r4
 c00560c:	003ff206 	br	c0055d8 <__alt_data_end+0xfc0055d8>
 c005610:	2007883a 	mov	r3,r4
 c005614:	003ff106 	br	c0055dc <__alt_data_end+0xfc0055dc>
 c005618:	200d883a 	mov	r6,r4
 c00561c:	003fee06 	br	c0055d8 <__alt_data_end+0xfc0055d8>

0c005620 <_printf_r>:
 c005620:	defffd04 	addi	sp,sp,-12
 c005624:	2805883a 	mov	r2,r5
 c005628:	dfc00015 	stw	ra,0(sp)
 c00562c:	d9800115 	stw	r6,4(sp)
 c005630:	d9c00215 	stw	r7,8(sp)
 c005634:	21400217 	ldw	r5,8(r4)
 c005638:	d9c00104 	addi	r7,sp,4
 c00563c:	100d883a 	mov	r6,r2
 c005640:	c007c980 	call	c007c98 <___vfprintf_internal_r>
 c005644:	dfc00017 	ldw	ra,0(sp)
 c005648:	dec00304 	addi	sp,sp,12
 c00564c:	f800283a 	ret

0c005650 <printf>:
 c005650:	defffc04 	addi	sp,sp,-16
 c005654:	dfc00015 	stw	ra,0(sp)
 c005658:	d9400115 	stw	r5,4(sp)
 c00565c:	d9800215 	stw	r6,8(sp)
 c005660:	d9c00315 	stw	r7,12(sp)
 c005664:	008300b4 	movhi	r2,3074
 c005668:	10aac804 	addi	r2,r2,-21728
 c00566c:	10800017 	ldw	r2,0(r2)
 c005670:	200b883a 	mov	r5,r4
 c005674:	d9800104 	addi	r6,sp,4
 c005678:	11000217 	ldw	r4,8(r2)
 c00567c:	c009f740 	call	c009f74 <__vfprintf_internal>
 c005680:	dfc00017 	ldw	ra,0(sp)
 c005684:	dec00404 	addi	sp,sp,16
 c005688:	f800283a 	ret

0c00568c <_puts_r>:
 c00568c:	defff604 	addi	sp,sp,-40
 c005690:	dc000715 	stw	r16,28(sp)
 c005694:	2021883a 	mov	r16,r4
 c005698:	2809883a 	mov	r4,r5
 c00569c:	dc400815 	stw	r17,32(sp)
 c0056a0:	dfc00915 	stw	ra,36(sp)
 c0056a4:	2823883a 	mov	r17,r5
 c0056a8:	c0058f40 	call	c0058f4 <strlen>
 c0056ac:	10c00044 	addi	r3,r2,1
 c0056b0:	d8800115 	stw	r2,4(sp)
 c0056b4:	008300b4 	movhi	r2,3074
 c0056b8:	10a27c04 	addi	r2,r2,-30224
 c0056bc:	d8800215 	stw	r2,8(sp)
 c0056c0:	00800044 	movi	r2,1
 c0056c4:	d8800315 	stw	r2,12(sp)
 c0056c8:	00800084 	movi	r2,2
 c0056cc:	dc400015 	stw	r17,0(sp)
 c0056d0:	d8c00615 	stw	r3,24(sp)
 c0056d4:	dec00415 	stw	sp,16(sp)
 c0056d8:	d8800515 	stw	r2,20(sp)
 c0056dc:	80000226 	beq	r16,zero,c0056e8 <_puts_r+0x5c>
 c0056e0:	80800e17 	ldw	r2,56(r16)
 c0056e4:	10001426 	beq	r2,zero,c005738 <_puts_r+0xac>
 c0056e8:	81400217 	ldw	r5,8(r16)
 c0056ec:	2880030b 	ldhu	r2,12(r5)
 c0056f0:	10c8000c 	andi	r3,r2,8192
 c0056f4:	1800061e 	bne	r3,zero,c005710 <_puts_r+0x84>
 c0056f8:	29001917 	ldw	r4,100(r5)
 c0056fc:	00f7ffc4 	movi	r3,-8193
 c005700:	10880014 	ori	r2,r2,8192
 c005704:	20c6703a 	and	r3,r4,r3
 c005708:	2880030d 	sth	r2,12(r5)
 c00570c:	28c01915 	stw	r3,100(r5)
 c005710:	d9800404 	addi	r6,sp,16
 c005714:	8009883a 	mov	r4,r16
 c005718:	c00c4dc0 	call	c00c4dc <__sfvwrite_r>
 c00571c:	1000091e 	bne	r2,zero,c005744 <_puts_r+0xb8>
 c005720:	00800284 	movi	r2,10
 c005724:	dfc00917 	ldw	ra,36(sp)
 c005728:	dc400817 	ldw	r17,32(sp)
 c00572c:	dc000717 	ldw	r16,28(sp)
 c005730:	dec00a04 	addi	sp,sp,40
 c005734:	f800283a 	ret
 c005738:	8009883a 	mov	r4,r16
 c00573c:	c00c0580 	call	c00c058 <__sinit>
 c005740:	003fe906 	br	c0056e8 <__alt_data_end+0xfc0056e8>
 c005744:	00bfffc4 	movi	r2,-1
 c005748:	003ff606 	br	c005724 <__alt_data_end+0xfc005724>

0c00574c <puts>:
 c00574c:	008300b4 	movhi	r2,3074
 c005750:	10aac804 	addi	r2,r2,-21728
 c005754:	200b883a 	mov	r5,r4
 c005758:	11000017 	ldw	r4,0(r2)
 c00575c:	c00568c1 	jmpi	c00568c <_puts_r>

0c005760 <srand>:
 c005760:	008300b4 	movhi	r2,3074
 c005764:	10aac804 	addi	r2,r2,-21728
 c005768:	10800017 	ldw	r2,0(r2)
 c00576c:	11002915 	stw	r4,164(r2)
 c005770:	10002a15 	stw	zero,168(r2)
 c005774:	f800283a 	ret

0c005778 <rand>:
 c005778:	008300b4 	movhi	r2,3074
 c00577c:	defffe04 	addi	sp,sp,-8
 c005780:	10aac804 	addi	r2,r2,-21728
 c005784:	dc000015 	stw	r16,0(sp)
 c005788:	14000017 	ldw	r16,0(r2)
 c00578c:	dfc00115 	stw	ra,4(sp)
 c005790:	01932574 	movhi	r6,19605
 c005794:	81002917 	ldw	r4,164(r16)
 c005798:	81402a17 	ldw	r5,168(r16)
 c00579c:	01d614b4 	movhi	r7,22610
 c0057a0:	319fcb44 	addi	r6,r6,32557
 c0057a4:	39fd0b44 	addi	r7,r7,-3027
 c0057a8:	c011fe40 	call	c011fe4 <__muldi3>
 c0057ac:	11000044 	addi	r4,r2,1
 c0057b0:	2085803a 	cmpltu	r2,r4,r2
 c0057b4:	10c7883a 	add	r3,r2,r3
 c0057b8:	00a00034 	movhi	r2,32768
 c0057bc:	10bfffc4 	addi	r2,r2,-1
 c0057c0:	1884703a 	and	r2,r3,r2
 c0057c4:	81002915 	stw	r4,164(r16)
 c0057c8:	80c02a15 	stw	r3,168(r16)
 c0057cc:	dfc00117 	ldw	ra,4(sp)
 c0057d0:	dc000017 	ldw	r16,0(sp)
 c0057d4:	dec00204 	addi	sp,sp,8
 c0057d8:	f800283a 	ret

0c0057dc <_sbrk_r>:
 c0057dc:	defffd04 	addi	sp,sp,-12
 c0057e0:	dc000015 	stw	r16,0(sp)
 c0057e4:	040300b4 	movhi	r16,3074
 c0057e8:	dc400115 	stw	r17,4(sp)
 c0057ec:	84326b04 	addi	r16,r16,-13908
 c0057f0:	2023883a 	mov	r17,r4
 c0057f4:	2809883a 	mov	r4,r5
 c0057f8:	dfc00215 	stw	ra,8(sp)
 c0057fc:	80000015 	stw	zero,0(r16)
 c005800:	c0161580 	call	c016158 <sbrk>
 c005804:	00ffffc4 	movi	r3,-1
 c005808:	10c00526 	beq	r2,r3,c005820 <_sbrk_r+0x44>
 c00580c:	dfc00217 	ldw	ra,8(sp)
 c005810:	dc400117 	ldw	r17,4(sp)
 c005814:	dc000017 	ldw	r16,0(sp)
 c005818:	dec00304 	addi	sp,sp,12
 c00581c:	f800283a 	ret
 c005820:	80c00017 	ldw	r3,0(r16)
 c005824:	183ff926 	beq	r3,zero,c00580c <__alt_data_end+0xfc00580c>
 c005828:	88c00015 	stw	r3,0(r17)
 c00582c:	003ff706 	br	c00580c <__alt_data_end+0xfc00580c>

0c005830 <_sprintf_r>:
 c005830:	deffe404 	addi	sp,sp,-112
 c005834:	2807883a 	mov	r3,r5
 c005838:	dfc01a15 	stw	ra,104(sp)
 c00583c:	d9c01b15 	stw	r7,108(sp)
 c005840:	00a00034 	movhi	r2,32768
 c005844:	10bfffc4 	addi	r2,r2,-1
 c005848:	02008204 	movi	r8,520
 c00584c:	d8800215 	stw	r2,8(sp)
 c005850:	d8800515 	stw	r2,20(sp)
 c005854:	d9c01b04 	addi	r7,sp,108
 c005858:	d80b883a 	mov	r5,sp
 c00585c:	00bfffc4 	movi	r2,-1
 c005860:	d8c00015 	stw	r3,0(sp)
 c005864:	d8c00415 	stw	r3,16(sp)
 c005868:	da00030d 	sth	r8,12(sp)
 c00586c:	d880038d 	sth	r2,14(sp)
 c005870:	c00598c0 	call	c00598c <___svfprintf_internal_r>
 c005874:	d8c00017 	ldw	r3,0(sp)
 c005878:	18000005 	stb	zero,0(r3)
 c00587c:	dfc01a17 	ldw	ra,104(sp)
 c005880:	dec01c04 	addi	sp,sp,112
 c005884:	f800283a 	ret

0c005888 <sprintf>:
 c005888:	deffe304 	addi	sp,sp,-116
 c00588c:	2007883a 	mov	r3,r4
 c005890:	dfc01a15 	stw	ra,104(sp)
 c005894:	d9801b15 	stw	r6,108(sp)
 c005898:	d9c01c15 	stw	r7,112(sp)
 c00589c:	010300b4 	movhi	r4,3074
 c0058a0:	212ac804 	addi	r4,r4,-21728
 c0058a4:	21000017 	ldw	r4,0(r4)
 c0058a8:	00a00034 	movhi	r2,32768
 c0058ac:	10bfffc4 	addi	r2,r2,-1
 c0058b0:	280d883a 	mov	r6,r5
 c0058b4:	02008204 	movi	r8,520
 c0058b8:	d8800215 	stw	r2,8(sp)
 c0058bc:	d8800515 	stw	r2,20(sp)
 c0058c0:	d9c01b04 	addi	r7,sp,108
 c0058c4:	d80b883a 	mov	r5,sp
 c0058c8:	00bfffc4 	movi	r2,-1
 c0058cc:	d8c00015 	stw	r3,0(sp)
 c0058d0:	d8c00415 	stw	r3,16(sp)
 c0058d4:	da00030d 	sth	r8,12(sp)
 c0058d8:	d880038d 	sth	r2,14(sp)
 c0058dc:	c00598c0 	call	c00598c <___svfprintf_internal_r>
 c0058e0:	d8c00017 	ldw	r3,0(sp)
 c0058e4:	18000005 	stb	zero,0(r3)
 c0058e8:	dfc01a17 	ldw	ra,104(sp)
 c0058ec:	dec01d04 	addi	sp,sp,116
 c0058f0:	f800283a 	ret

0c0058f4 <strlen>:
 c0058f4:	208000cc 	andi	r2,r4,3
 c0058f8:	10002026 	beq	r2,zero,c00597c <strlen+0x88>
 c0058fc:	20800007 	ldb	r2,0(r4)
 c005900:	10002026 	beq	r2,zero,c005984 <strlen+0x90>
 c005904:	2005883a 	mov	r2,r4
 c005908:	00000206 	br	c005914 <strlen+0x20>
 c00590c:	10c00007 	ldb	r3,0(r2)
 c005910:	18001826 	beq	r3,zero,c005974 <strlen+0x80>
 c005914:	10800044 	addi	r2,r2,1
 c005918:	10c000cc 	andi	r3,r2,3
 c00591c:	183ffb1e 	bne	r3,zero,c00590c <__alt_data_end+0xfc00590c>
 c005920:	10c00017 	ldw	r3,0(r2)
 c005924:	01ffbff4 	movhi	r7,65279
 c005928:	39ffbfc4 	addi	r7,r7,-257
 c00592c:	00ca303a 	nor	r5,zero,r3
 c005930:	01a02074 	movhi	r6,32897
 c005934:	19c7883a 	add	r3,r3,r7
 c005938:	31a02004 	addi	r6,r6,-32640
 c00593c:	1946703a 	and	r3,r3,r5
 c005940:	1986703a 	and	r3,r3,r6
 c005944:	1800091e 	bne	r3,zero,c00596c <strlen+0x78>
 c005948:	10800104 	addi	r2,r2,4
 c00594c:	10c00017 	ldw	r3,0(r2)
 c005950:	19cb883a 	add	r5,r3,r7
 c005954:	00c6303a 	nor	r3,zero,r3
 c005958:	28c6703a 	and	r3,r5,r3
 c00595c:	1986703a 	and	r3,r3,r6
 c005960:	183ff926 	beq	r3,zero,c005948 <__alt_data_end+0xfc005948>
 c005964:	00000106 	br	c00596c <strlen+0x78>
 c005968:	10800044 	addi	r2,r2,1
 c00596c:	10c00007 	ldb	r3,0(r2)
 c005970:	183ffd1e 	bne	r3,zero,c005968 <__alt_data_end+0xfc005968>
 c005974:	1105c83a 	sub	r2,r2,r4
 c005978:	f800283a 	ret
 c00597c:	2005883a 	mov	r2,r4
 c005980:	003fe706 	br	c005920 <__alt_data_end+0xfc005920>
 c005984:	0005883a 	mov	r2,zero
 c005988:	f800283a 	ret

0c00598c <___svfprintf_internal_r>:
 c00598c:	deffb704 	addi	sp,sp,-292
 c005990:	dfc04815 	stw	ra,288(sp)
 c005994:	ddc04615 	stw	r23,280(sp)
 c005998:	d9402d15 	stw	r5,180(sp)
 c00599c:	d9003915 	stw	r4,228(sp)
 c0059a0:	302f883a 	mov	r23,r6
 c0059a4:	d9c02e15 	stw	r7,184(sp)
 c0059a8:	df004715 	stw	fp,284(sp)
 c0059ac:	dd804515 	stw	r22,276(sp)
 c0059b0:	dd404415 	stw	r21,272(sp)
 c0059b4:	dd004315 	stw	r20,268(sp)
 c0059b8:	dcc04215 	stw	r19,264(sp)
 c0059bc:	dc804115 	stw	r18,260(sp)
 c0059c0:	dc404015 	stw	r17,256(sp)
 c0059c4:	dc003f15 	stw	r16,252(sp)
 c0059c8:	c00cc340 	call	c00cc34 <_localeconv_r>
 c0059cc:	10800017 	ldw	r2,0(r2)
 c0059d0:	1009883a 	mov	r4,r2
 c0059d4:	d8803415 	stw	r2,208(sp)
 c0059d8:	c0058f40 	call	c0058f4 <strlen>
 c0059dc:	d8c02d17 	ldw	r3,180(sp)
 c0059e0:	d8803815 	stw	r2,224(sp)
 c0059e4:	1880030b 	ldhu	r2,12(r3)
 c0059e8:	1080200c 	andi	r2,r2,128
 c0059ec:	10000226 	beq	r2,zero,c0059f8 <___svfprintf_internal_r+0x6c>
 c0059f0:	18800417 	ldw	r2,16(r3)
 c0059f4:	1006b126 	beq	r2,zero,c0074bc <___svfprintf_internal_r+0x1b30>
 c0059f8:	dcc03917 	ldw	r19,228(sp)
 c0059fc:	d8c00404 	addi	r3,sp,16
 c005a00:	054300b4 	movhi	r21,3074
 c005a04:	d9001e04 	addi	r4,sp,120
 c005a08:	ad628d84 	addi	r21,r21,-30154
 c005a0c:	d8c01e15 	stw	r3,120(sp)
 c005a10:	d8002015 	stw	zero,128(sp)
 c005a14:	d8001f15 	stw	zero,124(sp)
 c005a18:	d8003315 	stw	zero,204(sp)
 c005a1c:	d8003615 	stw	zero,216(sp)
 c005a20:	d8003715 	stw	zero,220(sp)
 c005a24:	1811883a 	mov	r8,r3
 c005a28:	d8003a15 	stw	zero,232(sp)
 c005a2c:	d8003b15 	stw	zero,236(sp)
 c005a30:	d8002f15 	stw	zero,188(sp)
 c005a34:	d9002815 	stw	r4,160(sp)
 c005a38:	b8800007 	ldb	r2,0(r23)
 c005a3c:	10027726 	beq	r2,zero,c00641c <___svfprintf_internal_r+0xa90>
 c005a40:	00c00944 	movi	r3,37
 c005a44:	b823883a 	mov	r17,r23
 c005a48:	10c0021e 	bne	r2,r3,c005a54 <___svfprintf_internal_r+0xc8>
 c005a4c:	00001406 	br	c005aa0 <___svfprintf_internal_r+0x114>
 c005a50:	10c00326 	beq	r2,r3,c005a60 <___svfprintf_internal_r+0xd4>
 c005a54:	8c400044 	addi	r17,r17,1
 c005a58:	88800007 	ldb	r2,0(r17)
 c005a5c:	103ffc1e 	bne	r2,zero,c005a50 <__alt_data_end+0xfc005a50>
 c005a60:	8de1c83a 	sub	r16,r17,r23
 c005a64:	80000e26 	beq	r16,zero,c005aa0 <___svfprintf_internal_r+0x114>
 c005a68:	d8c02017 	ldw	r3,128(sp)
 c005a6c:	d8801f17 	ldw	r2,124(sp)
 c005a70:	45c00015 	stw	r23,0(r8)
 c005a74:	1c07883a 	add	r3,r3,r16
 c005a78:	10800044 	addi	r2,r2,1
 c005a7c:	d8c02015 	stw	r3,128(sp)
 c005a80:	44000115 	stw	r16,4(r8)
 c005a84:	d8801f15 	stw	r2,124(sp)
 c005a88:	00c001c4 	movi	r3,7
 c005a8c:	18809916 	blt	r3,r2,c005cf4 <___svfprintf_internal_r+0x368>
 c005a90:	42000204 	addi	r8,r8,8
 c005a94:	d9402f17 	ldw	r5,188(sp)
 c005a98:	2c0b883a 	add	r5,r5,r16
 c005a9c:	d9402f15 	stw	r5,188(sp)
 c005aa0:	88800007 	ldb	r2,0(r17)
 c005aa4:	10009a26 	beq	r2,zero,c005d10 <___svfprintf_internal_r+0x384>
 c005aa8:	8dc00044 	addi	r23,r17,1
 c005aac:	8c400047 	ldb	r17,1(r17)
 c005ab0:	0021883a 	mov	r16,zero
 c005ab4:	00bfffc4 	movi	r2,-1
 c005ab8:	0025883a 	mov	r18,zero
 c005abc:	dc002905 	stb	r16,164(sp)
 c005ac0:	d8002785 	stb	zero,158(sp)
 c005ac4:	d8002b05 	stb	zero,172(sp)
 c005ac8:	d8802a15 	stw	r2,168(sp)
 c005acc:	d8003115 	stw	zero,196(sp)
 c005ad0:	05001604 	movi	r20,88
 c005ad4:	05800244 	movi	r22,9
 c005ad8:	4039883a 	mov	fp,r8
 c005adc:	9021883a 	mov	r16,r18
 c005ae0:	bdc00044 	addi	r23,r23,1
 c005ae4:	88bff804 	addi	r2,r17,-32
 c005ae8:	a0831e36 	bltu	r20,r2,c006764 <___svfprintf_internal_r+0xdd8>
 c005aec:	100490ba 	slli	r2,r2,2
 c005af0:	00c30034 	movhi	r3,3072
 c005af4:	18d6c104 	addi	r3,r3,23300
 c005af8:	10c5883a 	add	r2,r2,r3
 c005afc:	10800017 	ldw	r2,0(r2)
 c005b00:	1000683a 	jmp	r2
 c005b04:	0c0066ac 	andhi	r16,at,410
 c005b08:	0c006764 	muli	r16,at,413
 c005b0c:	0c006764 	muli	r16,at,413
 c005b10:	0c0066a0 	cmpeqi	r16,at,410
 c005b14:	0c006764 	muli	r16,at,413
 c005b18:	0c006764 	muli	r16,at,413
 c005b1c:	0c006764 	muli	r16,at,413
 c005b20:	0c006764 	muli	r16,at,413
 c005b24:	0c006764 	muli	r16,at,413
 c005b28:	0c006764 	muli	r16,at,413
 c005b2c:	0c005d6c 	andhi	r16,at,373
 c005b30:	0c0065b0 	cmpltui	r16,at,406
 c005b34:	0c006764 	muli	r16,at,413
 c005b38:	0c005c78 	rdprs	r16,at,369
 c005b3c:	0c005d90 	cmplti	r16,at,374
 c005b40:	0c006764 	muli	r16,at,413
 c005b44:	0c005e1c 	xori	r16,at,376
 c005b48:	0c005de0 	cmpeqi	r16,at,375
 c005b4c:	0c005de0 	cmpeqi	r16,at,375
 c005b50:	0c005de0 	cmpeqi	r16,at,375
 c005b54:	0c005de0 	cmpeqi	r16,at,375
 c005b58:	0c005de0 	cmpeqi	r16,at,375
 c005b5c:	0c005de0 	cmpeqi	r16,at,375
 c005b60:	0c005de0 	cmpeqi	r16,at,375
 c005b64:	0c005de0 	cmpeqi	r16,at,375
 c005b68:	0c005de0 	cmpeqi	r16,at,375
 c005b6c:	0c006764 	muli	r16,at,413
 c005b70:	0c006764 	muli	r16,at,413
 c005b74:	0c006764 	muli	r16,at,413
 c005b78:	0c006764 	muli	r16,at,413
 c005b7c:	0c006764 	muli	r16,at,413
 c005b80:	0c006764 	muli	r16,at,413
 c005b84:	0c006764 	muli	r16,at,413
 c005b88:	0c006764 	muli	r16,at,413
 c005b8c:	0c006764 	muli	r16,at,413
 c005b90:	0c006764 	muli	r16,at,413
 c005b94:	0c005ee0 	cmpeqi	r16,at,379
 c005b98:	0c005e28 	cmpgeui	r16,at,376
 c005b9c:	0c006764 	muli	r16,at,413
 c005ba0:	0c005e28 	cmpgeui	r16,at,376
 c005ba4:	0c006764 	muli	r16,at,413
 c005ba8:	0c006764 	muli	r16,at,413
 c005bac:	0c006764 	muli	r16,at,413
 c005bb0:	0c006764 	muli	r16,at,413
 c005bb4:	0c005ed4 	ori	r16,at,379
 c005bb8:	0c006764 	muli	r16,at,413
 c005bbc:	0c006764 	muli	r16,at,413
 c005bc0:	0c005fa8 	cmpgeui	r16,at,382
 c005bc4:	0c006764 	muli	r16,at,413
 c005bc8:	0c006764 	muli	r16,at,413
 c005bcc:	0c006764 	muli	r16,at,413
 c005bd0:	0c006764 	muli	r16,at,413
 c005bd4:	0c006764 	muli	r16,at,413
 c005bd8:	0c006424 	muli	r16,at,400
 c005bdc:	0c006764 	muli	r16,at,413
 c005be0:	0c006764 	muli	r16,at,413
 c005be4:	0c006490 	cmplti	r16,at,402
 c005be8:	0c006764 	muli	r16,at,413
 c005bec:	0c006764 	muli	r16,at,413
 c005bf0:	0c006764 	muli	r16,at,413
 c005bf4:	0c006764 	muli	r16,at,413
 c005bf8:	0c006764 	muli	r16,at,413
 c005bfc:	0c006764 	muli	r16,at,413
 c005c00:	0c006764 	muli	r16,at,413
 c005c04:	0c006764 	muli	r16,at,413
 c005c08:	0c006764 	muli	r16,at,413
 c005c0c:	0c006764 	muli	r16,at,413
 c005c10:	0c00654c 	andi	r16,at,405
 c005c14:	0c0066cc 	andi	r16,at,411
 c005c18:	0c005e28 	cmpgeui	r16,at,376
 c005c1c:	0c005e28 	cmpgeui	r16,at,376
 c005c20:	0c005e28 	cmpgeui	r16,at,376
 c005c24:	0c006740 	call	c00674 <__alt_mem_onchip_memory2_0+0xc00674>
 c005c28:	0c0066cc 	andi	r16,at,411
 c005c2c:	0c006764 	muli	r16,at,413
 c005c30:	0c006764 	muli	r16,at,413
 c005c34:	0c0066ec 	andhi	r16,at,411
 c005c38:	0c006764 	muli	r16,at,413
 c005c3c:	0c006700 	call	c00670 <__alt_mem_onchip_memory2_0+0xc00670>
 c005c40:	0c006590 	cmplti	r16,at,406
 c005c44:	0c005c84 	addi	r16,at,370
 c005c48:	0c0065c8 	cmpgei	r16,at,407
 c005c4c:	0c006764 	muli	r16,at,413
 c005c50:	0c0065d4 	ori	r16,at,407
 c005c54:	0c006764 	muli	r16,at,413
 c005c58:	0c006638 	rdprs	r16,at,408
 c005c5c:	0c006764 	muli	r16,at,413
 c005c60:	0c006764 	muli	r16,at,413
 c005c64:	0c006658 	cmpnei	r16,at,409
 c005c68:	d8c03117 	ldw	r3,196(sp)
 c005c6c:	d8802e15 	stw	r2,184(sp)
 c005c70:	00c7c83a 	sub	r3,zero,r3
 c005c74:	d8c03115 	stw	r3,196(sp)
 c005c78:	84000114 	ori	r16,r16,4
 c005c7c:	bc400007 	ldb	r17,0(r23)
 c005c80:	003f9706 	br	c005ae0 <__alt_data_end+0xfc005ae0>
 c005c84:	00800c04 	movi	r2,48
 c005c88:	d8802705 	stb	r2,156(sp)
 c005c8c:	00801e04 	movi	r2,120
 c005c90:	d8802745 	stb	r2,157(sp)
 c005c94:	d9002a17 	ldw	r4,168(sp)
 c005c98:	d8802e17 	ldw	r2,184(sp)
 c005c9c:	d8002785 	stb	zero,158(sp)
 c005ca0:	e011883a 	mov	r8,fp
 c005ca4:	10c00104 	addi	r3,r2,4
 c005ca8:	15000017 	ldw	r20,0(r2)
 c005cac:	002d883a 	mov	r22,zero
 c005cb0:	80800094 	ori	r2,r16,2
 c005cb4:	2002b616 	blt	r4,zero,c006790 <___svfprintf_internal_r+0xe04>
 c005cb8:	00bfdfc4 	movi	r2,-129
 c005cbc:	80a4703a 	and	r18,r16,r2
 c005cc0:	d8c02e15 	stw	r3,184(sp)
 c005cc4:	94800094 	ori	r18,r18,2
 c005cc8:	a002a01e 	bne	r20,zero,c00674c <___svfprintf_internal_r+0xdc0>
 c005ccc:	014300b4 	movhi	r5,3074
 c005cd0:	29628604 	addi	r5,r5,-30184
 c005cd4:	d9403a15 	stw	r5,232(sp)
 c005cd8:	04401e04 	movi	r17,120
 c005cdc:	d8c02a17 	ldw	r3,168(sp)
 c005ce0:	0039883a 	mov	fp,zero
 c005ce4:	1801e626 	beq	r3,zero,c006480 <___svfprintf_internal_r+0xaf4>
 c005ce8:	0029883a 	mov	r20,zero
 c005cec:	002d883a 	mov	r22,zero
 c005cf0:	00020506 	br	c006508 <___svfprintf_internal_r+0xb7c>
 c005cf4:	d9402d17 	ldw	r5,180(sp)
 c005cf8:	d9801e04 	addi	r6,sp,120
 c005cfc:	9809883a 	mov	r4,r19
 c005d00:	c00ea300 	call	c00ea30 <__ssprint_r>
 c005d04:	1000081e 	bne	r2,zero,c005d28 <___svfprintf_internal_r+0x39c>
 c005d08:	da000404 	addi	r8,sp,16
 c005d0c:	003f6106 	br	c005a94 <__alt_data_end+0xfc005a94>
 c005d10:	d8802017 	ldw	r2,128(sp)
 c005d14:	10000426 	beq	r2,zero,c005d28 <___svfprintf_internal_r+0x39c>
 c005d18:	d9402d17 	ldw	r5,180(sp)
 c005d1c:	d9003917 	ldw	r4,228(sp)
 c005d20:	d9801e04 	addi	r6,sp,120
 c005d24:	c00ea300 	call	c00ea30 <__ssprint_r>
 c005d28:	d8802d17 	ldw	r2,180(sp)
 c005d2c:	10c0030b 	ldhu	r3,12(r2)
 c005d30:	d8802f17 	ldw	r2,188(sp)
 c005d34:	18c0100c 	andi	r3,r3,64
 c005d38:	1806251e 	bne	r3,zero,c0075d0 <___svfprintf_internal_r+0x1c44>
 c005d3c:	dfc04817 	ldw	ra,288(sp)
 c005d40:	df004717 	ldw	fp,284(sp)
 c005d44:	ddc04617 	ldw	r23,280(sp)
 c005d48:	dd804517 	ldw	r22,276(sp)
 c005d4c:	dd404417 	ldw	r21,272(sp)
 c005d50:	dd004317 	ldw	r20,268(sp)
 c005d54:	dcc04217 	ldw	r19,264(sp)
 c005d58:	dc804117 	ldw	r18,260(sp)
 c005d5c:	dc404017 	ldw	r17,256(sp)
 c005d60:	dc003f17 	ldw	r16,252(sp)
 c005d64:	dec04904 	addi	sp,sp,292
 c005d68:	f800283a 	ret
 c005d6c:	d9002e17 	ldw	r4,184(sp)
 c005d70:	d9402e17 	ldw	r5,184(sp)
 c005d74:	21000017 	ldw	r4,0(r4)
 c005d78:	28800104 	addi	r2,r5,4
 c005d7c:	d9003115 	stw	r4,196(sp)
 c005d80:	203fb916 	blt	r4,zero,c005c68 <__alt_data_end+0xfc005c68>
 c005d84:	d8802e15 	stw	r2,184(sp)
 c005d88:	bc400007 	ldb	r17,0(r23)
 c005d8c:	003f5406 	br	c005ae0 <__alt_data_end+0xfc005ae0>
 c005d90:	bc400007 	ldb	r17,0(r23)
 c005d94:	01000a84 	movi	r4,42
 c005d98:	b8c00044 	addi	r3,r23,1
 c005d9c:	89076926 	beq	r17,r4,c007b44 <___svfprintf_internal_r+0x21b8>
 c005da0:	8cbff404 	addi	r18,r17,-48
 c005da4:	b486b936 	bltu	r22,r18,c00788c <___svfprintf_internal_r+0x1f00>
 c005da8:	0009883a 	mov	r4,zero
 c005dac:	1823883a 	mov	r17,r3
 c005db0:	01400284 	movi	r5,10
 c005db4:	c004c7c0 	call	c004c7c <__mulsi3>
 c005db8:	88c00007 	ldb	r3,0(r17)
 c005dbc:	1489883a 	add	r4,r2,r18
 c005dc0:	8dc00044 	addi	r23,r17,1
 c005dc4:	1cbff404 	addi	r18,r3,-48
 c005dc8:	b823883a 	mov	r17,r23
 c005dcc:	b4bff82e 	bgeu	r22,r18,c005db0 <__alt_data_end+0xfc005db0>
 c005dd0:	1823883a 	mov	r17,r3
 c005dd4:	20060416 	blt	r4,zero,c0075e8 <___svfprintf_internal_r+0x1c5c>
 c005dd8:	d9002a15 	stw	r4,168(sp)
 c005ddc:	003f4106 	br	c005ae4 <__alt_data_end+0xfc005ae4>
 c005de0:	8cbff404 	addi	r18,r17,-48
 c005de4:	d8003115 	stw	zero,196(sp)
 c005de8:	0009883a 	mov	r4,zero
 c005dec:	b823883a 	mov	r17,r23
 c005df0:	01400284 	movi	r5,10
 c005df4:	c004c7c0 	call	c004c7c <__mulsi3>
 c005df8:	88c00007 	ldb	r3,0(r17)
 c005dfc:	9089883a 	add	r4,r18,r2
 c005e00:	bdc00044 	addi	r23,r23,1
 c005e04:	1cbff404 	addi	r18,r3,-48
 c005e08:	b823883a 	mov	r17,r23
 c005e0c:	b4bff82e 	bgeu	r22,r18,c005df0 <__alt_data_end+0xfc005df0>
 c005e10:	1823883a 	mov	r17,r3
 c005e14:	d9003115 	stw	r4,196(sp)
 c005e18:	003f3206 	br	c005ae4 <__alt_data_end+0xfc005ae4>
 c005e1c:	84002014 	ori	r16,r16,128
 c005e20:	bc400007 	ldb	r17,0(r23)
 c005e24:	003f2e06 	br	c005ae0 <__alt_data_end+0xfc005ae0>
 c005e28:	8025883a 	mov	r18,r16
 c005e2c:	dc002903 	ldbu	r16,164(sp)
 c005e30:	e011883a 	mov	r8,fp
 c005e34:	84003fcc 	andi	r16,r16,255
 c005e38:	8007721e 	bne	r16,zero,c007c04 <___svfprintf_internal_r+0x2278>
 c005e3c:	9080020c 	andi	r2,r18,8
 c005e40:	1004a526 	beq	r2,zero,c0070d8 <___svfprintf_internal_r+0x174c>
 c005e44:	d9002e17 	ldw	r4,184(sp)
 c005e48:	d9402e17 	ldw	r5,184(sp)
 c005e4c:	d8802e17 	ldw	r2,184(sp)
 c005e50:	21000017 	ldw	r4,0(r4)
 c005e54:	29400117 	ldw	r5,4(r5)
 c005e58:	10800204 	addi	r2,r2,8
 c005e5c:	d9003615 	stw	r4,216(sp)
 c005e60:	d9403715 	stw	r5,220(sp)
 c005e64:	d8802e15 	stw	r2,184(sp)
 c005e68:	d9003617 	ldw	r4,216(sp)
 c005e6c:	d9403717 	ldw	r5,220(sp)
 c005e70:	da003e15 	stw	r8,248(sp)
 c005e74:	04000044 	movi	r16,1
 c005e78:	c00e7a40 	call	c00e7a4 <__fpclassifyd>
 c005e7c:	da003e17 	ldw	r8,248(sp)
 c005e80:	1404731e 	bne	r2,r16,c007050 <___svfprintf_internal_r+0x16c4>
 c005e84:	d9003617 	ldw	r4,216(sp)
 c005e88:	d9403717 	ldw	r5,220(sp)
 c005e8c:	000d883a 	mov	r6,zero
 c005e90:	000f883a 	mov	r7,zero
 c005e94:	c0140900 	call	c014090 <__ledf2>
 c005e98:	da003e17 	ldw	r8,248(sp)
 c005e9c:	10061b16 	blt	r2,zero,c00770c <___svfprintf_internal_r+0x1d80>
 c005ea0:	df002783 	ldbu	fp,158(sp)
 c005ea4:	008011c4 	movi	r2,71
 c005ea8:	1445810e 	bge	r2,r17,c0074b0 <___svfprintf_internal_r+0x1b24>
 c005eac:	040300b4 	movhi	r16,3074
 c005eb0:	84227e04 	addi	r16,r16,-30216
 c005eb4:	00c000c4 	movi	r3,3
 c005eb8:	00bfdfc4 	movi	r2,-129
 c005ebc:	d8c02915 	stw	r3,164(sp)
 c005ec0:	90a4703a 	and	r18,r18,r2
 c005ec4:	d8c02b15 	stw	r3,172(sp)
 c005ec8:	d8002a15 	stw	zero,168(sp)
 c005ecc:	d8003215 	stw	zero,200(sp)
 c005ed0:	00006c06 	br	c006084 <___svfprintf_internal_r+0x6f8>
 c005ed4:	84000214 	ori	r16,r16,8
 c005ed8:	bc400007 	ldb	r17,0(r23)
 c005edc:	003f0006 	br	c005ae0 <__alt_data_end+0xfc005ae0>
 c005ee0:	8025883a 	mov	r18,r16
 c005ee4:	dc002903 	ldbu	r16,164(sp)
 c005ee8:	e011883a 	mov	r8,fp
 c005eec:	84003fcc 	andi	r16,r16,255
 c005ef0:	80073f1e 	bne	r16,zero,c007bf0 <___svfprintf_internal_r+0x2264>
 c005ef4:	94800414 	ori	r18,r18,16
 c005ef8:	9080080c 	andi	r2,r18,32
 c005efc:	1003bb26 	beq	r2,zero,c006dec <___svfprintf_internal_r+0x1460>
 c005f00:	d9002e17 	ldw	r4,184(sp)
 c005f04:	20800117 	ldw	r2,4(r4)
 c005f08:	25000017 	ldw	r20,0(r4)
 c005f0c:	21000204 	addi	r4,r4,8
 c005f10:	d9002e15 	stw	r4,184(sp)
 c005f14:	102d883a 	mov	r22,r2
 c005f18:	1003bd16 	blt	r2,zero,c006e10 <___svfprintf_internal_r+0x1484>
 c005f1c:	d9002a17 	ldw	r4,168(sp)
 c005f20:	df002783 	ldbu	fp,158(sp)
 c005f24:	2003d016 	blt	r4,zero,c006e68 <___svfprintf_internal_r+0x14dc>
 c005f28:	00ffdfc4 	movi	r3,-129
 c005f2c:	a584b03a 	or	r2,r20,r22
 c005f30:	90e4703a 	and	r18,r18,r3
 c005f34:	10015026 	beq	r2,zero,c006478 <___svfprintf_internal_r+0xaec>
 c005f38:	b0037026 	beq	r22,zero,c006cfc <___svfprintf_internal_r+0x1370>
 c005f3c:	dc402915 	stw	r17,164(sp)
 c005f40:	dc001e04 	addi	r16,sp,120
 c005f44:	b023883a 	mov	r17,r22
 c005f48:	402d883a 	mov	r22,r8
 c005f4c:	a009883a 	mov	r4,r20
 c005f50:	880b883a 	mov	r5,r17
 c005f54:	01800284 	movi	r6,10
 c005f58:	000f883a 	mov	r7,zero
 c005f5c:	c0126ec0 	call	c0126ec <__umoddi3>
 c005f60:	10800c04 	addi	r2,r2,48
 c005f64:	843fffc4 	addi	r16,r16,-1
 c005f68:	a009883a 	mov	r4,r20
 c005f6c:	880b883a 	mov	r5,r17
 c005f70:	80800005 	stb	r2,0(r16)
 c005f74:	01800284 	movi	r6,10
 c005f78:	000f883a 	mov	r7,zero
 c005f7c:	c0120f00 	call	c0120f0 <__udivdi3>
 c005f80:	1029883a 	mov	r20,r2
 c005f84:	10c4b03a 	or	r2,r2,r3
 c005f88:	1823883a 	mov	r17,r3
 c005f8c:	103fef1e 	bne	r2,zero,c005f4c <__alt_data_end+0xfc005f4c>
 c005f90:	d8c02817 	ldw	r3,160(sp)
 c005f94:	dc402917 	ldw	r17,164(sp)
 c005f98:	b011883a 	mov	r8,r22
 c005f9c:	1c07c83a 	sub	r3,r3,r16
 c005fa0:	d8c02b15 	stw	r3,172(sp)
 c005fa4:	00003106 	br	c00606c <___svfprintf_internal_r+0x6e0>
 c005fa8:	8025883a 	mov	r18,r16
 c005fac:	dc002903 	ldbu	r16,164(sp)
 c005fb0:	e011883a 	mov	r8,fp
 c005fb4:	84003fcc 	andi	r16,r16,255
 c005fb8:	80070a1e 	bne	r16,zero,c007be4 <___svfprintf_internal_r+0x2258>
 c005fbc:	94800414 	ori	r18,r18,16
 c005fc0:	9080080c 	andi	r2,r18,32
 c005fc4:	1002f626 	beq	r2,zero,c006ba0 <___svfprintf_internal_r+0x1214>
 c005fc8:	d9002e17 	ldw	r4,184(sp)
 c005fcc:	d9402a17 	ldw	r5,168(sp)
 c005fd0:	d8002785 	stb	zero,158(sp)
 c005fd4:	20800204 	addi	r2,r4,8
 c005fd8:	25000017 	ldw	r20,0(r4)
 c005fdc:	25800117 	ldw	r22,4(r4)
 c005fe0:	28043716 	blt	r5,zero,c0070c0 <___svfprintf_internal_r+0x1734>
 c005fe4:	013fdfc4 	movi	r4,-129
 c005fe8:	a586b03a 	or	r3,r20,r22
 c005fec:	d8802e15 	stw	r2,184(sp)
 c005ff0:	9124703a 	and	r18,r18,r4
 c005ff4:	1802f71e 	bne	r3,zero,c006bd4 <___svfprintf_internal_r+0x1248>
 c005ff8:	d9402a17 	ldw	r5,168(sp)
 c005ffc:	0039883a 	mov	fp,zero
 c006000:	2806df26 	beq	r5,zero,c007b80 <___svfprintf_internal_r+0x21f4>
 c006004:	0029883a 	mov	r20,zero
 c006008:	002d883a 	mov	r22,zero
 c00600c:	dc001e04 	addi	r16,sp,120
 c006010:	a006d0fa 	srli	r3,r20,3
 c006014:	b008977a 	slli	r4,r22,29
 c006018:	b02cd0fa 	srli	r22,r22,3
 c00601c:	a50001cc 	andi	r20,r20,7
 c006020:	a0800c04 	addi	r2,r20,48
 c006024:	843fffc4 	addi	r16,r16,-1
 c006028:	20e8b03a 	or	r20,r4,r3
 c00602c:	80800005 	stb	r2,0(r16)
 c006030:	a586b03a 	or	r3,r20,r22
 c006034:	183ff61e 	bne	r3,zero,c006010 <__alt_data_end+0xfc006010>
 c006038:	90c0004c 	andi	r3,r18,1
 c00603c:	18013f26 	beq	r3,zero,c00653c <___svfprintf_internal_r+0xbb0>
 c006040:	10803fcc 	andi	r2,r2,255
 c006044:	1080201c 	xori	r2,r2,128
 c006048:	10bfe004 	addi	r2,r2,-128
 c00604c:	00c00c04 	movi	r3,48
 c006050:	10c13a26 	beq	r2,r3,c00653c <___svfprintf_internal_r+0xbb0>
 c006054:	80ffffc5 	stb	r3,-1(r16)
 c006058:	d8c02817 	ldw	r3,160(sp)
 c00605c:	80bfffc4 	addi	r2,r16,-1
 c006060:	1021883a 	mov	r16,r2
 c006064:	1887c83a 	sub	r3,r3,r2
 c006068:	d8c02b15 	stw	r3,172(sp)
 c00606c:	d8802b17 	ldw	r2,172(sp)
 c006070:	d9002a17 	ldw	r4,168(sp)
 c006074:	1100010e 	bge	r2,r4,c00607c <___svfprintf_internal_r+0x6f0>
 c006078:	2005883a 	mov	r2,r4
 c00607c:	d8802915 	stw	r2,164(sp)
 c006080:	d8003215 	stw	zero,200(sp)
 c006084:	e7003fcc 	andi	fp,fp,255
 c006088:	e700201c 	xori	fp,fp,128
 c00608c:	e73fe004 	addi	fp,fp,-128
 c006090:	e0000326 	beq	fp,zero,c0060a0 <___svfprintf_internal_r+0x714>
 c006094:	d8c02917 	ldw	r3,164(sp)
 c006098:	18c00044 	addi	r3,r3,1
 c00609c:	d8c02915 	stw	r3,164(sp)
 c0060a0:	90c0008c 	andi	r3,r18,2
 c0060a4:	d8c02c15 	stw	r3,176(sp)
 c0060a8:	18000326 	beq	r3,zero,c0060b8 <___svfprintf_internal_r+0x72c>
 c0060ac:	d8c02917 	ldw	r3,164(sp)
 c0060b0:	18c00084 	addi	r3,r3,2
 c0060b4:	d8c02915 	stw	r3,164(sp)
 c0060b8:	90c0210c 	andi	r3,r18,132
 c0060bc:	d8c03015 	stw	r3,192(sp)
 c0060c0:	1801c31e 	bne	r3,zero,c0067d0 <___svfprintf_internal_r+0xe44>
 c0060c4:	d9003117 	ldw	r4,196(sp)
 c0060c8:	d8c02917 	ldw	r3,164(sp)
 c0060cc:	20e9c83a 	sub	r20,r4,r3
 c0060d0:	0501bf0e 	bge	zero,r20,c0067d0 <___svfprintf_internal_r+0xe44>
 c0060d4:	02400404 	movi	r9,16
 c0060d8:	d8c02017 	ldw	r3,128(sp)
 c0060dc:	d8801f17 	ldw	r2,124(sp)
 c0060e0:	4d053d0e 	bge	r9,r20,c0075d8 <___svfprintf_internal_r+0x1c4c>
 c0060e4:	014300b4 	movhi	r5,3074
 c0060e8:	29629184 	addi	r5,r5,-30138
 c0060ec:	dc403c15 	stw	r17,240(sp)
 c0060f0:	d9403515 	stw	r5,212(sp)
 c0060f4:	a023883a 	mov	r17,r20
 c0060f8:	482d883a 	mov	r22,r9
 c0060fc:	9029883a 	mov	r20,r18
 c006100:	070001c4 	movi	fp,7
 c006104:	8025883a 	mov	r18,r16
 c006108:	dc002d17 	ldw	r16,180(sp)
 c00610c:	00000306 	br	c00611c <___svfprintf_internal_r+0x790>
 c006110:	8c7ffc04 	addi	r17,r17,-16
 c006114:	42000204 	addi	r8,r8,8
 c006118:	b440130e 	bge	r22,r17,c006168 <___svfprintf_internal_r+0x7dc>
 c00611c:	010300b4 	movhi	r4,3074
 c006120:	18c00404 	addi	r3,r3,16
 c006124:	10800044 	addi	r2,r2,1
 c006128:	21229184 	addi	r4,r4,-30138
 c00612c:	41000015 	stw	r4,0(r8)
 c006130:	45800115 	stw	r22,4(r8)
 c006134:	d8c02015 	stw	r3,128(sp)
 c006138:	d8801f15 	stw	r2,124(sp)
 c00613c:	e0bff40e 	bge	fp,r2,c006110 <__alt_data_end+0xfc006110>
 c006140:	d9801e04 	addi	r6,sp,120
 c006144:	800b883a 	mov	r5,r16
 c006148:	9809883a 	mov	r4,r19
 c00614c:	c00ea300 	call	c00ea30 <__ssprint_r>
 c006150:	103ef51e 	bne	r2,zero,c005d28 <__alt_data_end+0xfc005d28>
 c006154:	8c7ffc04 	addi	r17,r17,-16
 c006158:	d8c02017 	ldw	r3,128(sp)
 c00615c:	d8801f17 	ldw	r2,124(sp)
 c006160:	da000404 	addi	r8,sp,16
 c006164:	b47fed16 	blt	r22,r17,c00611c <__alt_data_end+0xfc00611c>
 c006168:	9021883a 	mov	r16,r18
 c00616c:	a025883a 	mov	r18,r20
 c006170:	8829883a 	mov	r20,r17
 c006174:	dc403c17 	ldw	r17,240(sp)
 c006178:	d9403517 	ldw	r5,212(sp)
 c00617c:	a0c7883a 	add	r3,r20,r3
 c006180:	10800044 	addi	r2,r2,1
 c006184:	41400015 	stw	r5,0(r8)
 c006188:	45000115 	stw	r20,4(r8)
 c00618c:	d8c02015 	stw	r3,128(sp)
 c006190:	d8801f15 	stw	r2,124(sp)
 c006194:	010001c4 	movi	r4,7
 c006198:	2082c116 	blt	r4,r2,c006ca0 <___svfprintf_internal_r+0x1314>
 c00619c:	df002787 	ldb	fp,158(sp)
 c0061a0:	42000204 	addi	r8,r8,8
 c0061a4:	e0000c26 	beq	fp,zero,c0061d8 <___svfprintf_internal_r+0x84c>
 c0061a8:	d8801f17 	ldw	r2,124(sp)
 c0061ac:	d9002784 	addi	r4,sp,158
 c0061b0:	18c00044 	addi	r3,r3,1
 c0061b4:	10800044 	addi	r2,r2,1
 c0061b8:	41000015 	stw	r4,0(r8)
 c0061bc:	01000044 	movi	r4,1
 c0061c0:	41000115 	stw	r4,4(r8)
 c0061c4:	d8c02015 	stw	r3,128(sp)
 c0061c8:	d8801f15 	stw	r2,124(sp)
 c0061cc:	010001c4 	movi	r4,7
 c0061d0:	20825a16 	blt	r4,r2,c006b3c <___svfprintf_internal_r+0x11b0>
 c0061d4:	42000204 	addi	r8,r8,8
 c0061d8:	d8802c17 	ldw	r2,176(sp)
 c0061dc:	10000c26 	beq	r2,zero,c006210 <___svfprintf_internal_r+0x884>
 c0061e0:	d8801f17 	ldw	r2,124(sp)
 c0061e4:	d9002704 	addi	r4,sp,156
 c0061e8:	18c00084 	addi	r3,r3,2
 c0061ec:	10800044 	addi	r2,r2,1
 c0061f0:	41000015 	stw	r4,0(r8)
 c0061f4:	01000084 	movi	r4,2
 c0061f8:	41000115 	stw	r4,4(r8)
 c0061fc:	d8c02015 	stw	r3,128(sp)
 c006200:	d8801f15 	stw	r2,124(sp)
 c006204:	010001c4 	movi	r4,7
 c006208:	20825416 	blt	r4,r2,c006b5c <___svfprintf_internal_r+0x11d0>
 c00620c:	42000204 	addi	r8,r8,8
 c006210:	d9003017 	ldw	r4,192(sp)
 c006214:	00802004 	movi	r2,128
 c006218:	2081b926 	beq	r4,r2,c006900 <___svfprintf_internal_r+0xf74>
 c00621c:	d9402a17 	ldw	r5,168(sp)
 c006220:	d8802b17 	ldw	r2,172(sp)
 c006224:	28adc83a 	sub	r22,r5,r2
 c006228:	05802f0e 	bge	zero,r22,c0062e8 <___svfprintf_internal_r+0x95c>
 c00622c:	07000404 	movi	fp,16
 c006230:	d8801f17 	ldw	r2,124(sp)
 c006234:	e583e20e 	bge	fp,r22,c0071c0 <___svfprintf_internal_r+0x1834>
 c006238:	014300b4 	movhi	r5,3074
 c00623c:	29628d84 	addi	r5,r5,-30154
 c006240:	dc402a15 	stw	r17,168(sp)
 c006244:	d9402c15 	stw	r5,176(sp)
 c006248:	b023883a 	mov	r17,r22
 c00624c:	050001c4 	movi	r20,7
 c006250:	902d883a 	mov	r22,r18
 c006254:	8025883a 	mov	r18,r16
 c006258:	dc002d17 	ldw	r16,180(sp)
 c00625c:	00000306 	br	c00626c <___svfprintf_internal_r+0x8e0>
 c006260:	8c7ffc04 	addi	r17,r17,-16
 c006264:	42000204 	addi	r8,r8,8
 c006268:	e440110e 	bge	fp,r17,c0062b0 <___svfprintf_internal_r+0x924>
 c00626c:	18c00404 	addi	r3,r3,16
 c006270:	10800044 	addi	r2,r2,1
 c006274:	45400015 	stw	r21,0(r8)
 c006278:	47000115 	stw	fp,4(r8)
 c00627c:	d8c02015 	stw	r3,128(sp)
 c006280:	d8801f15 	stw	r2,124(sp)
 c006284:	a0bff60e 	bge	r20,r2,c006260 <__alt_data_end+0xfc006260>
 c006288:	d9801e04 	addi	r6,sp,120
 c00628c:	800b883a 	mov	r5,r16
 c006290:	9809883a 	mov	r4,r19
 c006294:	c00ea300 	call	c00ea30 <__ssprint_r>
 c006298:	103ea31e 	bne	r2,zero,c005d28 <__alt_data_end+0xfc005d28>
 c00629c:	8c7ffc04 	addi	r17,r17,-16
 c0062a0:	d8c02017 	ldw	r3,128(sp)
 c0062a4:	d8801f17 	ldw	r2,124(sp)
 c0062a8:	da000404 	addi	r8,sp,16
 c0062ac:	e47fef16 	blt	fp,r17,c00626c <__alt_data_end+0xfc00626c>
 c0062b0:	9021883a 	mov	r16,r18
 c0062b4:	b025883a 	mov	r18,r22
 c0062b8:	882d883a 	mov	r22,r17
 c0062bc:	dc402a17 	ldw	r17,168(sp)
 c0062c0:	d9002c17 	ldw	r4,176(sp)
 c0062c4:	1d87883a 	add	r3,r3,r22
 c0062c8:	10800044 	addi	r2,r2,1
 c0062cc:	41000015 	stw	r4,0(r8)
 c0062d0:	45800115 	stw	r22,4(r8)
 c0062d4:	d8c02015 	stw	r3,128(sp)
 c0062d8:	d8801f15 	stw	r2,124(sp)
 c0062dc:	010001c4 	movi	r4,7
 c0062e0:	20820e16 	blt	r4,r2,c006b1c <___svfprintf_internal_r+0x1190>
 c0062e4:	42000204 	addi	r8,r8,8
 c0062e8:	9080400c 	andi	r2,r18,256
 c0062ec:	10013a1e 	bne	r2,zero,c0067d8 <___svfprintf_internal_r+0xe4c>
 c0062f0:	d9402b17 	ldw	r5,172(sp)
 c0062f4:	d8801f17 	ldw	r2,124(sp)
 c0062f8:	44000015 	stw	r16,0(r8)
 c0062fc:	1947883a 	add	r3,r3,r5
 c006300:	10800044 	addi	r2,r2,1
 c006304:	41400115 	stw	r5,4(r8)
 c006308:	d8c02015 	stw	r3,128(sp)
 c00630c:	d8801f15 	stw	r2,124(sp)
 c006310:	010001c4 	movi	r4,7
 c006314:	2081f316 	blt	r4,r2,c006ae4 <___svfprintf_internal_r+0x1158>
 c006318:	42000204 	addi	r8,r8,8
 c00631c:	9480010c 	andi	r18,r18,4
 c006320:	90003226 	beq	r18,zero,c0063ec <___svfprintf_internal_r+0xa60>
 c006324:	d9403117 	ldw	r5,196(sp)
 c006328:	d8802917 	ldw	r2,164(sp)
 c00632c:	28a1c83a 	sub	r16,r5,r2
 c006330:	04002e0e 	bge	zero,r16,c0063ec <___svfprintf_internal_r+0xa60>
 c006334:	04400404 	movi	r17,16
 c006338:	d8801f17 	ldw	r2,124(sp)
 c00633c:	8c04db0e 	bge	r17,r16,c0076ac <___svfprintf_internal_r+0x1d20>
 c006340:	014300b4 	movhi	r5,3074
 c006344:	29629184 	addi	r5,r5,-30138
 c006348:	d9403515 	stw	r5,212(sp)
 c00634c:	048001c4 	movi	r18,7
 c006350:	dd002d17 	ldw	r20,180(sp)
 c006354:	00000306 	br	c006364 <___svfprintf_internal_r+0x9d8>
 c006358:	843ffc04 	addi	r16,r16,-16
 c00635c:	42000204 	addi	r8,r8,8
 c006360:	8c00130e 	bge	r17,r16,c0063b0 <___svfprintf_internal_r+0xa24>
 c006364:	010300b4 	movhi	r4,3074
 c006368:	18c00404 	addi	r3,r3,16
 c00636c:	10800044 	addi	r2,r2,1
 c006370:	21229184 	addi	r4,r4,-30138
 c006374:	41000015 	stw	r4,0(r8)
 c006378:	44400115 	stw	r17,4(r8)
 c00637c:	d8c02015 	stw	r3,128(sp)
 c006380:	d8801f15 	stw	r2,124(sp)
 c006384:	90bff40e 	bge	r18,r2,c006358 <__alt_data_end+0xfc006358>
 c006388:	d9801e04 	addi	r6,sp,120
 c00638c:	a00b883a 	mov	r5,r20
 c006390:	9809883a 	mov	r4,r19
 c006394:	c00ea300 	call	c00ea30 <__ssprint_r>
 c006398:	103e631e 	bne	r2,zero,c005d28 <__alt_data_end+0xfc005d28>
 c00639c:	843ffc04 	addi	r16,r16,-16
 c0063a0:	d8c02017 	ldw	r3,128(sp)
 c0063a4:	d8801f17 	ldw	r2,124(sp)
 c0063a8:	da000404 	addi	r8,sp,16
 c0063ac:	8c3fed16 	blt	r17,r16,c006364 <__alt_data_end+0xfc006364>
 c0063b0:	d9403517 	ldw	r5,212(sp)
 c0063b4:	1c07883a 	add	r3,r3,r16
 c0063b8:	10800044 	addi	r2,r2,1
 c0063bc:	41400015 	stw	r5,0(r8)
 c0063c0:	44000115 	stw	r16,4(r8)
 c0063c4:	d8c02015 	stw	r3,128(sp)
 c0063c8:	d8801f15 	stw	r2,124(sp)
 c0063cc:	010001c4 	movi	r4,7
 c0063d0:	2080060e 	bge	r4,r2,c0063ec <___svfprintf_internal_r+0xa60>
 c0063d4:	d9402d17 	ldw	r5,180(sp)
 c0063d8:	d9801e04 	addi	r6,sp,120
 c0063dc:	9809883a 	mov	r4,r19
 c0063e0:	c00ea300 	call	c00ea30 <__ssprint_r>
 c0063e4:	103e501e 	bne	r2,zero,c005d28 <__alt_data_end+0xfc005d28>
 c0063e8:	d8c02017 	ldw	r3,128(sp)
 c0063ec:	d8803117 	ldw	r2,196(sp)
 c0063f0:	d9002917 	ldw	r4,164(sp)
 c0063f4:	1100010e 	bge	r2,r4,c0063fc <___svfprintf_internal_r+0xa70>
 c0063f8:	2005883a 	mov	r2,r4
 c0063fc:	d9402f17 	ldw	r5,188(sp)
 c006400:	288b883a 	add	r5,r5,r2
 c006404:	d9402f15 	stw	r5,188(sp)
 c006408:	1801be1e 	bne	r3,zero,c006b04 <___svfprintf_internal_r+0x1178>
 c00640c:	b8800007 	ldb	r2,0(r23)
 c006410:	d8001f15 	stw	zero,124(sp)
 c006414:	da000404 	addi	r8,sp,16
 c006418:	103d891e 	bne	r2,zero,c005a40 <__alt_data_end+0xfc005a40>
 c00641c:	b823883a 	mov	r17,r23
 c006420:	003d9f06 	br	c005aa0 <__alt_data_end+0xfc005aa0>
 c006424:	8025883a 	mov	r18,r16
 c006428:	dc002903 	ldbu	r16,164(sp)
 c00642c:	e011883a 	mov	r8,fp
 c006430:	84003fcc 	andi	r16,r16,255
 c006434:	8005e61e 	bne	r16,zero,c007bd0 <___svfprintf_internal_r+0x2244>
 c006438:	94800414 	ori	r18,r18,16
 c00643c:	9080080c 	andi	r2,r18,32
 c006440:	10022026 	beq	r2,zero,c006cc4 <___svfprintf_internal_r+0x1338>
 c006444:	d9002e17 	ldw	r4,184(sp)
 c006448:	d9402a17 	ldw	r5,168(sp)
 c00644c:	d8002785 	stb	zero,158(sp)
 c006450:	20c00204 	addi	r3,r4,8
 c006454:	25000017 	ldw	r20,0(r4)
 c006458:	25800117 	ldw	r22,4(r4)
 c00645c:	2803ad16 	blt	r5,zero,c007314 <___svfprintf_internal_r+0x1988>
 c006460:	013fdfc4 	movi	r4,-129
 c006464:	a584b03a 	or	r2,r20,r22
 c006468:	d8c02e15 	stw	r3,184(sp)
 c00646c:	9124703a 	and	r18,r18,r4
 c006470:	0039883a 	mov	fp,zero
 c006474:	103eb01e 	bne	r2,zero,c005f38 <__alt_data_end+0xfc005f38>
 c006478:	d8802a17 	ldw	r2,168(sp)
 c00647c:	1002e71e 	bne	r2,zero,c00701c <___svfprintf_internal_r+0x1690>
 c006480:	d8002a15 	stw	zero,168(sp)
 c006484:	d8002b15 	stw	zero,172(sp)
 c006488:	dc001e04 	addi	r16,sp,120
 c00648c:	003ef706 	br	c00606c <__alt_data_end+0xfc00606c>
 c006490:	8025883a 	mov	r18,r16
 c006494:	dc002903 	ldbu	r16,164(sp)
 c006498:	e011883a 	mov	r8,fp
 c00649c:	84003fcc 	andi	r16,r16,255
 c0064a0:	8005c81e 	bne	r16,zero,c007bc4 <___svfprintf_internal_r+0x2238>
 c0064a4:	010300b4 	movhi	r4,3074
 c0064a8:	21228104 	addi	r4,r4,-30204
 c0064ac:	d9003a15 	stw	r4,232(sp)
 c0064b0:	9080080c 	andi	r2,r18,32
 c0064b4:	10007226 	beq	r2,zero,c006680 <___svfprintf_internal_r+0xcf4>
 c0064b8:	d9402e17 	ldw	r5,184(sp)
 c0064bc:	2d000017 	ldw	r20,0(r5)
 c0064c0:	2d800117 	ldw	r22,4(r5)
 c0064c4:	29400204 	addi	r5,r5,8
 c0064c8:	d9402e15 	stw	r5,184(sp)
 c0064cc:	9080004c 	andi	r2,r18,1
 c0064d0:	1001aa26 	beq	r2,zero,c006b7c <___svfprintf_internal_r+0x11f0>
 c0064d4:	a584b03a 	or	r2,r20,r22
 c0064d8:	10032526 	beq	r2,zero,c007170 <___svfprintf_internal_r+0x17e4>
 c0064dc:	d8c02a17 	ldw	r3,168(sp)
 c0064e0:	00800c04 	movi	r2,48
 c0064e4:	d8802705 	stb	r2,156(sp)
 c0064e8:	dc402745 	stb	r17,157(sp)
 c0064ec:	d8002785 	stb	zero,158(sp)
 c0064f0:	90800094 	ori	r2,r18,2
 c0064f4:	1804a316 	blt	r3,zero,c007784 <___svfprintf_internal_r+0x1df8>
 c0064f8:	00bfdfc4 	movi	r2,-129
 c0064fc:	90a4703a 	and	r18,r18,r2
 c006500:	94800094 	ori	r18,r18,2
 c006504:	0039883a 	mov	fp,zero
 c006508:	d9003a17 	ldw	r4,232(sp)
 c00650c:	dc001e04 	addi	r16,sp,120
 c006510:	a08003cc 	andi	r2,r20,15
 c006514:	b006973a 	slli	r3,r22,28
 c006518:	2085883a 	add	r2,r4,r2
 c00651c:	a028d13a 	srli	r20,r20,4
 c006520:	10800003 	ldbu	r2,0(r2)
 c006524:	b02cd13a 	srli	r22,r22,4
 c006528:	843fffc4 	addi	r16,r16,-1
 c00652c:	1d28b03a 	or	r20,r3,r20
 c006530:	80800005 	stb	r2,0(r16)
 c006534:	a584b03a 	or	r2,r20,r22
 c006538:	103ff51e 	bne	r2,zero,c006510 <__alt_data_end+0xfc006510>
 c00653c:	d8c02817 	ldw	r3,160(sp)
 c006540:	1c07c83a 	sub	r3,r3,r16
 c006544:	d8c02b15 	stw	r3,172(sp)
 c006548:	003ec806 	br	c00606c <__alt_data_end+0xfc00606c>
 c00654c:	d8c02e17 	ldw	r3,184(sp)
 c006550:	d9002e17 	ldw	r4,184(sp)
 c006554:	8025883a 	mov	r18,r16
 c006558:	18800017 	ldw	r2,0(r3)
 c00655c:	21000104 	addi	r4,r4,4
 c006560:	00c00044 	movi	r3,1
 c006564:	e011883a 	mov	r8,fp
 c006568:	d8c02915 	stw	r3,164(sp)
 c00656c:	d8002785 	stb	zero,158(sp)
 c006570:	d8801405 	stb	r2,80(sp)
 c006574:	d9002e15 	stw	r4,184(sp)
 c006578:	d8c02b15 	stw	r3,172(sp)
 c00657c:	d8002a15 	stw	zero,168(sp)
 c006580:	d8003215 	stw	zero,200(sp)
 c006584:	dc001404 	addi	r16,sp,80
 c006588:	0039883a 	mov	fp,zero
 c00658c:	003ec406 	br	c0060a0 <__alt_data_end+0xfc0060a0>
 c006590:	8025883a 	mov	r18,r16
 c006594:	dc002903 	ldbu	r16,164(sp)
 c006598:	e011883a 	mov	r8,fp
 c00659c:	84003fcc 	andi	r16,r16,255
 c0065a0:	803e8726 	beq	r16,zero,c005fc0 <__alt_data_end+0xfc005fc0>
 c0065a4:	d8c02b03 	ldbu	r3,172(sp)
 c0065a8:	d8c02785 	stb	r3,158(sp)
 c0065ac:	003e8406 	br	c005fc0 <__alt_data_end+0xfc005fc0>
 c0065b0:	00c00044 	movi	r3,1
 c0065b4:	d8c02905 	stb	r3,164(sp)
 c0065b8:	00c00ac4 	movi	r3,43
 c0065bc:	d8c02b05 	stb	r3,172(sp)
 c0065c0:	bc400007 	ldb	r17,0(r23)
 c0065c4:	003d4606 	br	c005ae0 <__alt_data_end+0xfc005ae0>
 c0065c8:	84000814 	ori	r16,r16,32
 c0065cc:	bc400007 	ldb	r17,0(r23)
 c0065d0:	003d4306 	br	c005ae0 <__alt_data_end+0xfc005ae0>
 c0065d4:	d8802e17 	ldw	r2,184(sp)
 c0065d8:	8025883a 	mov	r18,r16
 c0065dc:	d8002785 	stb	zero,158(sp)
 c0065e0:	14000017 	ldw	r16,0(r2)
 c0065e4:	e011883a 	mov	r8,fp
 c0065e8:	15000104 	addi	r20,r2,4
 c0065ec:	80042126 	beq	r16,zero,c007674 <___svfprintf_internal_r+0x1ce8>
 c0065f0:	d8c02a17 	ldw	r3,168(sp)
 c0065f4:	1803ee16 	blt	r3,zero,c0075b0 <___svfprintf_internal_r+0x1c24>
 c0065f8:	180d883a 	mov	r6,r3
 c0065fc:	000b883a 	mov	r5,zero
 c006600:	8009883a 	mov	r4,r16
 c006604:	df003e15 	stw	fp,248(sp)
 c006608:	c00ce200 	call	c00ce20 <memchr>
 c00660c:	da003e17 	ldw	r8,248(sp)
 c006610:	10046a26 	beq	r2,zero,c0077bc <___svfprintf_internal_r+0x1e30>
 c006614:	1405c83a 	sub	r2,r2,r16
 c006618:	d8802b15 	stw	r2,172(sp)
 c00661c:	1003ea16 	blt	r2,zero,c0075c8 <___svfprintf_internal_r+0x1c3c>
 c006620:	df002783 	ldbu	fp,158(sp)
 c006624:	d8802915 	stw	r2,164(sp)
 c006628:	dd002e15 	stw	r20,184(sp)
 c00662c:	d8002a15 	stw	zero,168(sp)
 c006630:	d8003215 	stw	zero,200(sp)
 c006634:	003e9306 	br	c006084 <__alt_data_end+0xfc006084>
 c006638:	8025883a 	mov	r18,r16
 c00663c:	dc002903 	ldbu	r16,164(sp)
 c006640:	e011883a 	mov	r8,fp
 c006644:	84003fcc 	andi	r16,r16,255
 c006648:	803f7c26 	beq	r16,zero,c00643c <__alt_data_end+0xfc00643c>
 c00664c:	d8c02b03 	ldbu	r3,172(sp)
 c006650:	d8c02785 	stb	r3,158(sp)
 c006654:	003f7906 	br	c00643c <__alt_data_end+0xfc00643c>
 c006658:	8025883a 	mov	r18,r16
 c00665c:	dc002903 	ldbu	r16,164(sp)
 c006660:	e011883a 	mov	r8,fp
 c006664:	84003fcc 	andi	r16,r16,255
 c006668:	8005741e 	bne	r16,zero,c007c3c <___svfprintf_internal_r+0x22b0>
 c00666c:	010300b4 	movhi	r4,3074
 c006670:	21228604 	addi	r4,r4,-30184
 c006674:	d9003a15 	stw	r4,232(sp)
 c006678:	9080080c 	andi	r2,r18,32
 c00667c:	103f8e1e 	bne	r2,zero,c0064b8 <__alt_data_end+0xfc0064b8>
 c006680:	9080040c 	andi	r2,r18,16
 c006684:	1002a726 	beq	r2,zero,c007124 <___svfprintf_internal_r+0x1798>
 c006688:	d8802e17 	ldw	r2,184(sp)
 c00668c:	002d883a 	mov	r22,zero
 c006690:	15000017 	ldw	r20,0(r2)
 c006694:	10800104 	addi	r2,r2,4
 c006698:	d8802e15 	stw	r2,184(sp)
 c00669c:	003f8b06 	br	c0064cc <__alt_data_end+0xfc0064cc>
 c0066a0:	84000054 	ori	r16,r16,1
 c0066a4:	bc400007 	ldb	r17,0(r23)
 c0066a8:	003d0d06 	br	c005ae0 <__alt_data_end+0xfc005ae0>
 c0066ac:	d8802b07 	ldb	r2,172(sp)
 c0066b0:	1002a41e 	bne	r2,zero,c007144 <___svfprintf_internal_r+0x17b8>
 c0066b4:	00c00044 	movi	r3,1
 c0066b8:	d8c02905 	stb	r3,164(sp)
 c0066bc:	00c00804 	movi	r3,32
 c0066c0:	d8c02b05 	stb	r3,172(sp)
 c0066c4:	bc400007 	ldb	r17,0(r23)
 c0066c8:	003d0506 	br	c005ae0 <__alt_data_end+0xfc005ae0>
 c0066cc:	8025883a 	mov	r18,r16
 c0066d0:	dc002903 	ldbu	r16,164(sp)
 c0066d4:	e011883a 	mov	r8,fp
 c0066d8:	84003fcc 	andi	r16,r16,255
 c0066dc:	803e0626 	beq	r16,zero,c005ef8 <__alt_data_end+0xfc005ef8>
 c0066e0:	d8c02b03 	ldbu	r3,172(sp)
 c0066e4:	d8c02785 	stb	r3,158(sp)
 c0066e8:	003e0306 	br	c005ef8 <__alt_data_end+0xfc005ef8>
 c0066ec:	bc400007 	ldb	r17,0(r23)
 c0066f0:	00801b04 	movi	r2,108
 c0066f4:	88830a26 	beq	r17,r2,c007320 <___svfprintf_internal_r+0x1994>
 c0066f8:	84000414 	ori	r16,r16,16
 c0066fc:	003cf806 	br	c005ae0 <__alt_data_end+0xfc005ae0>
 c006700:	8025883a 	mov	r18,r16
 c006704:	dc002903 	ldbu	r16,164(sp)
 c006708:	e011883a 	mov	r8,fp
 c00670c:	84003fcc 	andi	r16,r16,255
 c006710:	8005471e 	bne	r16,zero,c007c30 <___svfprintf_internal_r+0x22a4>
 c006714:	9080080c 	andi	r2,r18,32
 c006718:	10028c26 	beq	r2,zero,c00714c <___svfprintf_internal_r+0x17c0>
 c00671c:	d9002e17 	ldw	r4,184(sp)
 c006720:	d9402f17 	ldw	r5,188(sp)
 c006724:	20800017 	ldw	r2,0(r4)
 c006728:	2807d7fa 	srai	r3,r5,31
 c00672c:	21000104 	addi	r4,r4,4
 c006730:	d9002e15 	stw	r4,184(sp)
 c006734:	11400015 	stw	r5,0(r2)
 c006738:	10c00115 	stw	r3,4(r2)
 c00673c:	003cbe06 	br	c005a38 <__alt_data_end+0xfc005a38>
 c006740:	84001014 	ori	r16,r16,64
 c006744:	bc400007 	ldb	r17,0(r23)
 c006748:	003ce506 	br	c005ae0 <__alt_data_end+0xfc005ae0>
 c00674c:	010300b4 	movhi	r4,3074
 c006750:	21228604 	addi	r4,r4,-30184
 c006754:	0039883a 	mov	fp,zero
 c006758:	d9003a15 	stw	r4,232(sp)
 c00675c:	04401e04 	movi	r17,120
 c006760:	003f6906 	br	c006508 <__alt_data_end+0xfc006508>
 c006764:	8025883a 	mov	r18,r16
 c006768:	dc002903 	ldbu	r16,164(sp)
 c00676c:	e011883a 	mov	r8,fp
 c006770:	84003fcc 	andi	r16,r16,255
 c006774:	8005261e 	bne	r16,zero,c007c10 <___svfprintf_internal_r+0x2284>
 c006778:	883d6526 	beq	r17,zero,c005d10 <__alt_data_end+0xfc005d10>
 c00677c:	00c00044 	movi	r3,1
 c006780:	d8c02915 	stw	r3,164(sp)
 c006784:	dc401405 	stb	r17,80(sp)
 c006788:	d8002785 	stb	zero,158(sp)
 c00678c:	003f7a06 	br	c006578 <__alt_data_end+0xfc006578>
 c006790:	010300b4 	movhi	r4,3074
 c006794:	21228604 	addi	r4,r4,-30184
 c006798:	d9003a15 	stw	r4,232(sp)
 c00679c:	d8c02e15 	stw	r3,184(sp)
 c0067a0:	1025883a 	mov	r18,r2
 c0067a4:	04401e04 	movi	r17,120
 c0067a8:	a584b03a 	or	r2,r20,r22
 c0067ac:	1000fa1e 	bne	r2,zero,c006b98 <___svfprintf_internal_r+0x120c>
 c0067b0:	0039883a 	mov	fp,zero
 c0067b4:	00800084 	movi	r2,2
 c0067b8:	10803fcc 	andi	r2,r2,255
 c0067bc:	00c00044 	movi	r3,1
 c0067c0:	10c21626 	beq	r2,r3,c00701c <___svfprintf_internal_r+0x1690>
 c0067c4:	00c00084 	movi	r3,2
 c0067c8:	10fe0e1e 	bne	r2,r3,c006004 <__alt_data_end+0xfc006004>
 c0067cc:	003d4606 	br	c005ce8 <__alt_data_end+0xfc005ce8>
 c0067d0:	d8c02017 	ldw	r3,128(sp)
 c0067d4:	003e7306 	br	c0061a4 <__alt_data_end+0xfc0061a4>
 c0067d8:	00801944 	movi	r2,101
 c0067dc:	14407c0e 	bge	r2,r17,c0069d0 <___svfprintf_internal_r+0x1044>
 c0067e0:	d9003617 	ldw	r4,216(sp)
 c0067e4:	d9403717 	ldw	r5,220(sp)
 c0067e8:	000d883a 	mov	r6,zero
 c0067ec:	000f883a 	mov	r7,zero
 c0067f0:	d8c03d15 	stw	r3,244(sp)
 c0067f4:	da003e15 	stw	r8,248(sp)
 c0067f8:	c013f2c0 	call	c013f2c <__eqdf2>
 c0067fc:	d8c03d17 	ldw	r3,244(sp)
 c006800:	da003e17 	ldw	r8,248(sp)
 c006804:	1000f51e 	bne	r2,zero,c006bdc <___svfprintf_internal_r+0x1250>
 c006808:	d8801f17 	ldw	r2,124(sp)
 c00680c:	010300b4 	movhi	r4,3074
 c006810:	21228d04 	addi	r4,r4,-30156
 c006814:	18c00044 	addi	r3,r3,1
 c006818:	10800044 	addi	r2,r2,1
 c00681c:	41000015 	stw	r4,0(r8)
 c006820:	01000044 	movi	r4,1
 c006824:	41000115 	stw	r4,4(r8)
 c006828:	d8c02015 	stw	r3,128(sp)
 c00682c:	d8801f15 	stw	r2,124(sp)
 c006830:	010001c4 	movi	r4,7
 c006834:	20826616 	blt	r4,r2,c0071d0 <___svfprintf_internal_r+0x1844>
 c006838:	42000204 	addi	r8,r8,8
 c00683c:	d8802617 	ldw	r2,152(sp)
 c006840:	d9403317 	ldw	r5,204(sp)
 c006844:	11400216 	blt	r2,r5,c006850 <___svfprintf_internal_r+0xec4>
 c006848:	9080004c 	andi	r2,r18,1
 c00684c:	103eb326 	beq	r2,zero,c00631c <__alt_data_end+0xfc00631c>
 c006850:	d8803817 	ldw	r2,224(sp)
 c006854:	d9003417 	ldw	r4,208(sp)
 c006858:	d9403817 	ldw	r5,224(sp)
 c00685c:	1887883a 	add	r3,r3,r2
 c006860:	d8801f17 	ldw	r2,124(sp)
 c006864:	41000015 	stw	r4,0(r8)
 c006868:	41400115 	stw	r5,4(r8)
 c00686c:	10800044 	addi	r2,r2,1
 c006870:	d8c02015 	stw	r3,128(sp)
 c006874:	d8801f15 	stw	r2,124(sp)
 c006878:	010001c4 	movi	r4,7
 c00687c:	2082af16 	blt	r4,r2,c00733c <___svfprintf_internal_r+0x19b0>
 c006880:	42000204 	addi	r8,r8,8
 c006884:	d8803317 	ldw	r2,204(sp)
 c006888:	143fffc4 	addi	r16,r2,-1
 c00688c:	043ea30e 	bge	zero,r16,c00631c <__alt_data_end+0xfc00631c>
 c006890:	04400404 	movi	r17,16
 c006894:	d8801f17 	ldw	r2,124(sp)
 c006898:	8c00860e 	bge	r17,r16,c006ab4 <___svfprintf_internal_r+0x1128>
 c00689c:	014300b4 	movhi	r5,3074
 c0068a0:	29628d84 	addi	r5,r5,-30154
 c0068a4:	d9402c15 	stw	r5,176(sp)
 c0068a8:	058001c4 	movi	r22,7
 c0068ac:	dd002d17 	ldw	r20,180(sp)
 c0068b0:	00000306 	br	c0068c0 <___svfprintf_internal_r+0xf34>
 c0068b4:	42000204 	addi	r8,r8,8
 c0068b8:	843ffc04 	addi	r16,r16,-16
 c0068bc:	8c00800e 	bge	r17,r16,c006ac0 <___svfprintf_internal_r+0x1134>
 c0068c0:	18c00404 	addi	r3,r3,16
 c0068c4:	10800044 	addi	r2,r2,1
 c0068c8:	45400015 	stw	r21,0(r8)
 c0068cc:	44400115 	stw	r17,4(r8)
 c0068d0:	d8c02015 	stw	r3,128(sp)
 c0068d4:	d8801f15 	stw	r2,124(sp)
 c0068d8:	b0bff60e 	bge	r22,r2,c0068b4 <__alt_data_end+0xfc0068b4>
 c0068dc:	d9801e04 	addi	r6,sp,120
 c0068e0:	a00b883a 	mov	r5,r20
 c0068e4:	9809883a 	mov	r4,r19
 c0068e8:	c00ea300 	call	c00ea30 <__ssprint_r>
 c0068ec:	103d0e1e 	bne	r2,zero,c005d28 <__alt_data_end+0xfc005d28>
 c0068f0:	d8c02017 	ldw	r3,128(sp)
 c0068f4:	d8801f17 	ldw	r2,124(sp)
 c0068f8:	da000404 	addi	r8,sp,16
 c0068fc:	003fee06 	br	c0068b8 <__alt_data_end+0xfc0068b8>
 c006900:	d9403117 	ldw	r5,196(sp)
 c006904:	d8802917 	ldw	r2,164(sp)
 c006908:	28adc83a 	sub	r22,r5,r2
 c00690c:	05be430e 	bge	zero,r22,c00621c <__alt_data_end+0xfc00621c>
 c006910:	07000404 	movi	fp,16
 c006914:	d8801f17 	ldw	r2,124(sp)
 c006918:	e583a20e 	bge	fp,r22,c0077a4 <___svfprintf_internal_r+0x1e18>
 c00691c:	014300b4 	movhi	r5,3074
 c006920:	29628d84 	addi	r5,r5,-30154
 c006924:	dc403015 	stw	r17,192(sp)
 c006928:	d9402c15 	stw	r5,176(sp)
 c00692c:	b023883a 	mov	r17,r22
 c006930:	050001c4 	movi	r20,7
 c006934:	902d883a 	mov	r22,r18
 c006938:	8025883a 	mov	r18,r16
 c00693c:	dc002d17 	ldw	r16,180(sp)
 c006940:	00000306 	br	c006950 <___svfprintf_internal_r+0xfc4>
 c006944:	8c7ffc04 	addi	r17,r17,-16
 c006948:	42000204 	addi	r8,r8,8
 c00694c:	e440110e 	bge	fp,r17,c006994 <___svfprintf_internal_r+0x1008>
 c006950:	18c00404 	addi	r3,r3,16
 c006954:	10800044 	addi	r2,r2,1
 c006958:	45400015 	stw	r21,0(r8)
 c00695c:	47000115 	stw	fp,4(r8)
 c006960:	d8c02015 	stw	r3,128(sp)
 c006964:	d8801f15 	stw	r2,124(sp)
 c006968:	a0bff60e 	bge	r20,r2,c006944 <__alt_data_end+0xfc006944>
 c00696c:	d9801e04 	addi	r6,sp,120
 c006970:	800b883a 	mov	r5,r16
 c006974:	9809883a 	mov	r4,r19
 c006978:	c00ea300 	call	c00ea30 <__ssprint_r>
 c00697c:	103cea1e 	bne	r2,zero,c005d28 <__alt_data_end+0xfc005d28>
 c006980:	8c7ffc04 	addi	r17,r17,-16
 c006984:	d8c02017 	ldw	r3,128(sp)
 c006988:	d8801f17 	ldw	r2,124(sp)
 c00698c:	da000404 	addi	r8,sp,16
 c006990:	e47fef16 	blt	fp,r17,c006950 <__alt_data_end+0xfc006950>
 c006994:	9021883a 	mov	r16,r18
 c006998:	b025883a 	mov	r18,r22
 c00699c:	882d883a 	mov	r22,r17
 c0069a0:	dc403017 	ldw	r17,192(sp)
 c0069a4:	d9002c17 	ldw	r4,176(sp)
 c0069a8:	1d87883a 	add	r3,r3,r22
 c0069ac:	10800044 	addi	r2,r2,1
 c0069b0:	41000015 	stw	r4,0(r8)
 c0069b4:	45800115 	stw	r22,4(r8)
 c0069b8:	d8c02015 	stw	r3,128(sp)
 c0069bc:	d8801f15 	stw	r2,124(sp)
 c0069c0:	010001c4 	movi	r4,7
 c0069c4:	20819a16 	blt	r4,r2,c007030 <___svfprintf_internal_r+0x16a4>
 c0069c8:	42000204 	addi	r8,r8,8
 c0069cc:	003e1306 	br	c00621c <__alt_data_end+0xfc00621c>
 c0069d0:	d9403317 	ldw	r5,204(sp)
 c0069d4:	00800044 	movi	r2,1
 c0069d8:	18c00044 	addi	r3,r3,1
 c0069dc:	1141710e 	bge	r2,r5,c006fa4 <___svfprintf_internal_r+0x1618>
 c0069e0:	dc401f17 	ldw	r17,124(sp)
 c0069e4:	00800044 	movi	r2,1
 c0069e8:	40800115 	stw	r2,4(r8)
 c0069ec:	8c400044 	addi	r17,r17,1
 c0069f0:	44000015 	stw	r16,0(r8)
 c0069f4:	d8c02015 	stw	r3,128(sp)
 c0069f8:	dc401f15 	stw	r17,124(sp)
 c0069fc:	008001c4 	movi	r2,7
 c006a00:	14417416 	blt	r2,r17,c006fd4 <___svfprintf_internal_r+0x1648>
 c006a04:	42000204 	addi	r8,r8,8
 c006a08:	d8803817 	ldw	r2,224(sp)
 c006a0c:	d9003417 	ldw	r4,208(sp)
 c006a10:	8c400044 	addi	r17,r17,1
 c006a14:	10c7883a 	add	r3,r2,r3
 c006a18:	40800115 	stw	r2,4(r8)
 c006a1c:	41000015 	stw	r4,0(r8)
 c006a20:	d8c02015 	stw	r3,128(sp)
 c006a24:	dc401f15 	stw	r17,124(sp)
 c006a28:	008001c4 	movi	r2,7
 c006a2c:	14417216 	blt	r2,r17,c006ff8 <___svfprintf_internal_r+0x166c>
 c006a30:	45800204 	addi	r22,r8,8
 c006a34:	d9003617 	ldw	r4,216(sp)
 c006a38:	d9403717 	ldw	r5,220(sp)
 c006a3c:	000d883a 	mov	r6,zero
 c006a40:	000f883a 	mov	r7,zero
 c006a44:	d8c03d15 	stw	r3,244(sp)
 c006a48:	c013f2c0 	call	c013f2c <__eqdf2>
 c006a4c:	d8c03d17 	ldw	r3,244(sp)
 c006a50:	1000b326 	beq	r2,zero,c006d20 <___svfprintf_internal_r+0x1394>
 c006a54:	d9403317 	ldw	r5,204(sp)
 c006a58:	84000044 	addi	r16,r16,1
 c006a5c:	8c400044 	addi	r17,r17,1
 c006a60:	28bfffc4 	addi	r2,r5,-1
 c006a64:	1887883a 	add	r3,r3,r2
 c006a68:	b0800115 	stw	r2,4(r22)
 c006a6c:	b4000015 	stw	r16,0(r22)
 c006a70:	d8c02015 	stw	r3,128(sp)
 c006a74:	dc401f15 	stw	r17,124(sp)
 c006a78:	008001c4 	movi	r2,7
 c006a7c:	1440d216 	blt	r2,r17,c006dc8 <___svfprintf_internal_r+0x143c>
 c006a80:	b5800204 	addi	r22,r22,8
 c006a84:	d9003b17 	ldw	r4,236(sp)
 c006a88:	df0022c4 	addi	fp,sp,139
 c006a8c:	8c400044 	addi	r17,r17,1
 c006a90:	20c7883a 	add	r3,r4,r3
 c006a94:	b7000015 	stw	fp,0(r22)
 c006a98:	b1000115 	stw	r4,4(r22)
 c006a9c:	d8c02015 	stw	r3,128(sp)
 c006aa0:	dc401f15 	stw	r17,124(sp)
 c006aa4:	008001c4 	movi	r2,7
 c006aa8:	14400e16 	blt	r2,r17,c006ae4 <___svfprintf_internal_r+0x1158>
 c006aac:	b2000204 	addi	r8,r22,8
 c006ab0:	003e1a06 	br	c00631c <__alt_data_end+0xfc00631c>
 c006ab4:	010300b4 	movhi	r4,3074
 c006ab8:	21228d84 	addi	r4,r4,-30154
 c006abc:	d9002c15 	stw	r4,176(sp)
 c006ac0:	d9002c17 	ldw	r4,176(sp)
 c006ac4:	1c07883a 	add	r3,r3,r16
 c006ac8:	44000115 	stw	r16,4(r8)
 c006acc:	41000015 	stw	r4,0(r8)
 c006ad0:	10800044 	addi	r2,r2,1
 c006ad4:	d8c02015 	stw	r3,128(sp)
 c006ad8:	d8801f15 	stw	r2,124(sp)
 c006adc:	010001c4 	movi	r4,7
 c006ae0:	20be0d0e 	bge	r4,r2,c006318 <__alt_data_end+0xfc006318>
 c006ae4:	d9402d17 	ldw	r5,180(sp)
 c006ae8:	d9801e04 	addi	r6,sp,120
 c006aec:	9809883a 	mov	r4,r19
 c006af0:	c00ea300 	call	c00ea30 <__ssprint_r>
 c006af4:	103c8c1e 	bne	r2,zero,c005d28 <__alt_data_end+0xfc005d28>
 c006af8:	d8c02017 	ldw	r3,128(sp)
 c006afc:	da000404 	addi	r8,sp,16
 c006b00:	003e0606 	br	c00631c <__alt_data_end+0xfc00631c>
 c006b04:	d9402d17 	ldw	r5,180(sp)
 c006b08:	d9801e04 	addi	r6,sp,120
 c006b0c:	9809883a 	mov	r4,r19
 c006b10:	c00ea300 	call	c00ea30 <__ssprint_r>
 c006b14:	103e3d26 	beq	r2,zero,c00640c <__alt_data_end+0xfc00640c>
 c006b18:	003c8306 	br	c005d28 <__alt_data_end+0xfc005d28>
 c006b1c:	d9402d17 	ldw	r5,180(sp)
 c006b20:	d9801e04 	addi	r6,sp,120
 c006b24:	9809883a 	mov	r4,r19
 c006b28:	c00ea300 	call	c00ea30 <__ssprint_r>
 c006b2c:	103c7e1e 	bne	r2,zero,c005d28 <__alt_data_end+0xfc005d28>
 c006b30:	d8c02017 	ldw	r3,128(sp)
 c006b34:	da000404 	addi	r8,sp,16
 c006b38:	003deb06 	br	c0062e8 <__alt_data_end+0xfc0062e8>
 c006b3c:	d9402d17 	ldw	r5,180(sp)
 c006b40:	d9801e04 	addi	r6,sp,120
 c006b44:	9809883a 	mov	r4,r19
 c006b48:	c00ea300 	call	c00ea30 <__ssprint_r>
 c006b4c:	103c761e 	bne	r2,zero,c005d28 <__alt_data_end+0xfc005d28>
 c006b50:	d8c02017 	ldw	r3,128(sp)
 c006b54:	da000404 	addi	r8,sp,16
 c006b58:	003d9f06 	br	c0061d8 <__alt_data_end+0xfc0061d8>
 c006b5c:	d9402d17 	ldw	r5,180(sp)
 c006b60:	d9801e04 	addi	r6,sp,120
 c006b64:	9809883a 	mov	r4,r19
 c006b68:	c00ea300 	call	c00ea30 <__ssprint_r>
 c006b6c:	103c6e1e 	bne	r2,zero,c005d28 <__alt_data_end+0xfc005d28>
 c006b70:	d8c02017 	ldw	r3,128(sp)
 c006b74:	da000404 	addi	r8,sp,16
 c006b78:	003da506 	br	c006210 <__alt_data_end+0xfc006210>
 c006b7c:	d9402a17 	ldw	r5,168(sp)
 c006b80:	d8002785 	stb	zero,158(sp)
 c006b84:	283f0816 	blt	r5,zero,c0067a8 <__alt_data_end+0xfc0067a8>
 c006b88:	00ffdfc4 	movi	r3,-129
 c006b8c:	a584b03a 	or	r2,r20,r22
 c006b90:	90e4703a 	and	r18,r18,r3
 c006b94:	103c5126 	beq	r2,zero,c005cdc <__alt_data_end+0xfc005cdc>
 c006b98:	0039883a 	mov	fp,zero
 c006b9c:	003e5a06 	br	c006508 <__alt_data_end+0xfc006508>
 c006ba0:	9080040c 	andi	r2,r18,16
 c006ba4:	10013d26 	beq	r2,zero,c00709c <___svfprintf_internal_r+0x1710>
 c006ba8:	d8c02e17 	ldw	r3,184(sp)
 c006bac:	d9002a17 	ldw	r4,168(sp)
 c006bb0:	d8002785 	stb	zero,158(sp)
 c006bb4:	18800104 	addi	r2,r3,4
 c006bb8:	1d000017 	ldw	r20,0(r3)
 c006bbc:	002d883a 	mov	r22,zero
 c006bc0:	20013f16 	blt	r4,zero,c0070c0 <___svfprintf_internal_r+0x1734>
 c006bc4:	00ffdfc4 	movi	r3,-129
 c006bc8:	d8802e15 	stw	r2,184(sp)
 c006bcc:	90e4703a 	and	r18,r18,r3
 c006bd0:	a03d0926 	beq	r20,zero,c005ff8 <__alt_data_end+0xfc005ff8>
 c006bd4:	0039883a 	mov	fp,zero
 c006bd8:	003d0c06 	br	c00600c <__alt_data_end+0xfc00600c>
 c006bdc:	dc402617 	ldw	r17,152(sp)
 c006be0:	0441830e 	bge	zero,r17,c0071f0 <___svfprintf_internal_r+0x1864>
 c006be4:	dc403217 	ldw	r17,200(sp)
 c006be8:	d8803317 	ldw	r2,204(sp)
 c006bec:	1440010e 	bge	r2,r17,c006bf4 <___svfprintf_internal_r+0x1268>
 c006bf0:	1023883a 	mov	r17,r2
 c006bf4:	04400a0e 	bge	zero,r17,c006c20 <___svfprintf_internal_r+0x1294>
 c006bf8:	d8801f17 	ldw	r2,124(sp)
 c006bfc:	1c47883a 	add	r3,r3,r17
 c006c00:	44000015 	stw	r16,0(r8)
 c006c04:	10800044 	addi	r2,r2,1
 c006c08:	44400115 	stw	r17,4(r8)
 c006c0c:	d8c02015 	stw	r3,128(sp)
 c006c10:	d8801f15 	stw	r2,124(sp)
 c006c14:	010001c4 	movi	r4,7
 c006c18:	20827516 	blt	r4,r2,c0075f0 <___svfprintf_internal_r+0x1c64>
 c006c1c:	42000204 	addi	r8,r8,8
 c006c20:	88027b16 	blt	r17,zero,c007610 <___svfprintf_internal_r+0x1c84>
 c006c24:	d9003217 	ldw	r4,200(sp)
 c006c28:	2463c83a 	sub	r17,r4,r17
 c006c2c:	0440990e 	bge	zero,r17,c006e94 <___svfprintf_internal_r+0x1508>
 c006c30:	05800404 	movi	r22,16
 c006c34:	d8801f17 	ldw	r2,124(sp)
 c006c38:	b441530e 	bge	r22,r17,c007188 <___svfprintf_internal_r+0x17fc>
 c006c3c:	010300b4 	movhi	r4,3074
 c006c40:	21228d84 	addi	r4,r4,-30154
 c006c44:	d9002c15 	stw	r4,176(sp)
 c006c48:	070001c4 	movi	fp,7
 c006c4c:	dd002d17 	ldw	r20,180(sp)
 c006c50:	00000306 	br	c006c60 <___svfprintf_internal_r+0x12d4>
 c006c54:	42000204 	addi	r8,r8,8
 c006c58:	8c7ffc04 	addi	r17,r17,-16
 c006c5c:	b4414d0e 	bge	r22,r17,c007194 <___svfprintf_internal_r+0x1808>
 c006c60:	18c00404 	addi	r3,r3,16
 c006c64:	10800044 	addi	r2,r2,1
 c006c68:	45400015 	stw	r21,0(r8)
 c006c6c:	45800115 	stw	r22,4(r8)
 c006c70:	d8c02015 	stw	r3,128(sp)
 c006c74:	d8801f15 	stw	r2,124(sp)
 c006c78:	e0bff60e 	bge	fp,r2,c006c54 <__alt_data_end+0xfc006c54>
 c006c7c:	d9801e04 	addi	r6,sp,120
 c006c80:	a00b883a 	mov	r5,r20
 c006c84:	9809883a 	mov	r4,r19
 c006c88:	c00ea300 	call	c00ea30 <__ssprint_r>
 c006c8c:	103c261e 	bne	r2,zero,c005d28 <__alt_data_end+0xfc005d28>
 c006c90:	d8c02017 	ldw	r3,128(sp)
 c006c94:	d8801f17 	ldw	r2,124(sp)
 c006c98:	da000404 	addi	r8,sp,16
 c006c9c:	003fee06 	br	c006c58 <__alt_data_end+0xfc006c58>
 c006ca0:	d9402d17 	ldw	r5,180(sp)
 c006ca4:	d9801e04 	addi	r6,sp,120
 c006ca8:	9809883a 	mov	r4,r19
 c006cac:	c00ea300 	call	c00ea30 <__ssprint_r>
 c006cb0:	103c1d1e 	bne	r2,zero,c005d28 <__alt_data_end+0xfc005d28>
 c006cb4:	d8c02017 	ldw	r3,128(sp)
 c006cb8:	df002787 	ldb	fp,158(sp)
 c006cbc:	da000404 	addi	r8,sp,16
 c006cc0:	003d3806 	br	c0061a4 <__alt_data_end+0xfc0061a4>
 c006cc4:	9080040c 	andi	r2,r18,16
 c006cc8:	10005c26 	beq	r2,zero,c006e3c <___svfprintf_internal_r+0x14b0>
 c006ccc:	d8c02e17 	ldw	r3,184(sp)
 c006cd0:	d9002a17 	ldw	r4,168(sp)
 c006cd4:	d8002785 	stb	zero,158(sp)
 c006cd8:	18800104 	addi	r2,r3,4
 c006cdc:	1d000017 	ldw	r20,0(r3)
 c006ce0:	002d883a 	mov	r22,zero
 c006ce4:	20005e16 	blt	r4,zero,c006e60 <___svfprintf_internal_r+0x14d4>
 c006ce8:	00ffdfc4 	movi	r3,-129
 c006cec:	d8802e15 	stw	r2,184(sp)
 c006cf0:	90e4703a 	and	r18,r18,r3
 c006cf4:	0039883a 	mov	fp,zero
 c006cf8:	a03ddf26 	beq	r20,zero,c006478 <__alt_data_end+0xfc006478>
 c006cfc:	00800244 	movi	r2,9
 c006d00:	153c8e36 	bltu	r2,r20,c005f3c <__alt_data_end+0xfc005f3c>
 c006d04:	a5000c04 	addi	r20,r20,48
 c006d08:	dc001dc4 	addi	r16,sp,119
 c006d0c:	dd001dc5 	stb	r20,119(sp)
 c006d10:	d8c02817 	ldw	r3,160(sp)
 c006d14:	1c07c83a 	sub	r3,r3,r16
 c006d18:	d8c02b15 	stw	r3,172(sp)
 c006d1c:	003cd306 	br	c00606c <__alt_data_end+0xfc00606c>
 c006d20:	d8803317 	ldw	r2,204(sp)
 c006d24:	143fffc4 	addi	r16,r2,-1
 c006d28:	043f560e 	bge	zero,r16,c006a84 <__alt_data_end+0xfc006a84>
 c006d2c:	07000404 	movi	fp,16
 c006d30:	e403530e 	bge	fp,r16,c007a80 <___svfprintf_internal_r+0x20f4>
 c006d34:	014300b4 	movhi	r5,3074
 c006d38:	29628d84 	addi	r5,r5,-30154
 c006d3c:	d9402c15 	stw	r5,176(sp)
 c006d40:	01c001c4 	movi	r7,7
 c006d44:	dd002d17 	ldw	r20,180(sp)
 c006d48:	00000306 	br	c006d58 <___svfprintf_internal_r+0x13cc>
 c006d4c:	843ffc04 	addi	r16,r16,-16
 c006d50:	b5800204 	addi	r22,r22,8
 c006d54:	e400130e 	bge	fp,r16,c006da4 <___svfprintf_internal_r+0x1418>
 c006d58:	18c00404 	addi	r3,r3,16
 c006d5c:	8c400044 	addi	r17,r17,1
 c006d60:	b5400015 	stw	r21,0(r22)
 c006d64:	b7000115 	stw	fp,4(r22)
 c006d68:	d8c02015 	stw	r3,128(sp)
 c006d6c:	dc401f15 	stw	r17,124(sp)
 c006d70:	3c7ff60e 	bge	r7,r17,c006d4c <__alt_data_end+0xfc006d4c>
 c006d74:	d9801e04 	addi	r6,sp,120
 c006d78:	a00b883a 	mov	r5,r20
 c006d7c:	9809883a 	mov	r4,r19
 c006d80:	d9c03d15 	stw	r7,244(sp)
 c006d84:	c00ea300 	call	c00ea30 <__ssprint_r>
 c006d88:	d9c03d17 	ldw	r7,244(sp)
 c006d8c:	103be61e 	bne	r2,zero,c005d28 <__alt_data_end+0xfc005d28>
 c006d90:	843ffc04 	addi	r16,r16,-16
 c006d94:	d8c02017 	ldw	r3,128(sp)
 c006d98:	dc401f17 	ldw	r17,124(sp)
 c006d9c:	dd800404 	addi	r22,sp,16
 c006da0:	e43fed16 	blt	fp,r16,c006d58 <__alt_data_end+0xfc006d58>
 c006da4:	d8802c17 	ldw	r2,176(sp)
 c006da8:	1c07883a 	add	r3,r3,r16
 c006dac:	8c400044 	addi	r17,r17,1
 c006db0:	b0800015 	stw	r2,0(r22)
 c006db4:	b4000115 	stw	r16,4(r22)
 c006db8:	d8c02015 	stw	r3,128(sp)
 c006dbc:	dc401f15 	stw	r17,124(sp)
 c006dc0:	008001c4 	movi	r2,7
 c006dc4:	147f2e0e 	bge	r2,r17,c006a80 <__alt_data_end+0xfc006a80>
 c006dc8:	d9402d17 	ldw	r5,180(sp)
 c006dcc:	d9801e04 	addi	r6,sp,120
 c006dd0:	9809883a 	mov	r4,r19
 c006dd4:	c00ea300 	call	c00ea30 <__ssprint_r>
 c006dd8:	103bd31e 	bne	r2,zero,c005d28 <__alt_data_end+0xfc005d28>
 c006ddc:	d8c02017 	ldw	r3,128(sp)
 c006de0:	dc401f17 	ldw	r17,124(sp)
 c006de4:	dd800404 	addi	r22,sp,16
 c006de8:	003f2606 	br	c006a84 <__alt_data_end+0xfc006a84>
 c006dec:	9080040c 	andi	r2,r18,16
 c006df0:	1000c326 	beq	r2,zero,c007100 <___svfprintf_internal_r+0x1774>
 c006df4:	d9402e17 	ldw	r5,184(sp)
 c006df8:	2d000017 	ldw	r20,0(r5)
 c006dfc:	29400104 	addi	r5,r5,4
 c006e00:	d9402e15 	stw	r5,184(sp)
 c006e04:	a02dd7fa 	srai	r22,r20,31
 c006e08:	b005883a 	mov	r2,r22
 c006e0c:	103c430e 	bge	r2,zero,c005f1c <__alt_data_end+0xfc005f1c>
 c006e10:	d9402a17 	ldw	r5,168(sp)
 c006e14:	0529c83a 	sub	r20,zero,r20
 c006e18:	07000b44 	movi	fp,45
 c006e1c:	a004c03a 	cmpne	r2,r20,zero
 c006e20:	05adc83a 	sub	r22,zero,r22
 c006e24:	df002785 	stb	fp,158(sp)
 c006e28:	b0adc83a 	sub	r22,r22,r2
 c006e2c:	28022e16 	blt	r5,zero,c0076e8 <___svfprintf_internal_r+0x1d5c>
 c006e30:	00bfdfc4 	movi	r2,-129
 c006e34:	90a4703a 	and	r18,r18,r2
 c006e38:	003c3f06 	br	c005f38 <__alt_data_end+0xfc005f38>
 c006e3c:	9080100c 	andi	r2,r18,64
 c006e40:	d8002785 	stb	zero,158(sp)
 c006e44:	10012526 	beq	r2,zero,c0072dc <___svfprintf_internal_r+0x1950>
 c006e48:	d9402e17 	ldw	r5,184(sp)
 c006e4c:	d8c02a17 	ldw	r3,168(sp)
 c006e50:	002d883a 	mov	r22,zero
 c006e54:	28800104 	addi	r2,r5,4
 c006e58:	2d00000b 	ldhu	r20,0(r5)
 c006e5c:	183fa20e 	bge	r3,zero,c006ce8 <__alt_data_end+0xfc006ce8>
 c006e60:	d8802e15 	stw	r2,184(sp)
 c006e64:	0039883a 	mov	fp,zero
 c006e68:	a584b03a 	or	r2,r20,r22
 c006e6c:	103c321e 	bne	r2,zero,c005f38 <__alt_data_end+0xfc005f38>
 c006e70:	00800044 	movi	r2,1
 c006e74:	003e5006 	br	c0067b8 <__alt_data_end+0xfc0067b8>
 c006e78:	d9402d17 	ldw	r5,180(sp)
 c006e7c:	d9801e04 	addi	r6,sp,120
 c006e80:	9809883a 	mov	r4,r19
 c006e84:	c00ea300 	call	c00ea30 <__ssprint_r>
 c006e88:	103ba71e 	bne	r2,zero,c005d28 <__alt_data_end+0xfc005d28>
 c006e8c:	d8c02017 	ldw	r3,128(sp)
 c006e90:	da000404 	addi	r8,sp,16
 c006e94:	d9003217 	ldw	r4,200(sp)
 c006e98:	d8802617 	ldw	r2,152(sp)
 c006e9c:	d9403317 	ldw	r5,204(sp)
 c006ea0:	8123883a 	add	r17,r16,r4
 c006ea4:	11400216 	blt	r2,r5,c006eb0 <___svfprintf_internal_r+0x1524>
 c006ea8:	9100004c 	andi	r4,r18,1
 c006eac:	20000d26 	beq	r4,zero,c006ee4 <___svfprintf_internal_r+0x1558>
 c006eb0:	d9003817 	ldw	r4,224(sp)
 c006eb4:	d9403417 	ldw	r5,208(sp)
 c006eb8:	1907883a 	add	r3,r3,r4
 c006ebc:	d9001f17 	ldw	r4,124(sp)
 c006ec0:	41400015 	stw	r5,0(r8)
 c006ec4:	d9403817 	ldw	r5,224(sp)
 c006ec8:	21000044 	addi	r4,r4,1
 c006ecc:	d8c02015 	stw	r3,128(sp)
 c006ed0:	41400115 	stw	r5,4(r8)
 c006ed4:	d9001f15 	stw	r4,124(sp)
 c006ed8:	014001c4 	movi	r5,7
 c006edc:	2901dc16 	blt	r5,r4,c007650 <___svfprintf_internal_r+0x1cc4>
 c006ee0:	42000204 	addi	r8,r8,8
 c006ee4:	d9003317 	ldw	r4,204(sp)
 c006ee8:	8121883a 	add	r16,r16,r4
 c006eec:	2085c83a 	sub	r2,r4,r2
 c006ef0:	8461c83a 	sub	r16,r16,r17
 c006ef4:	1400010e 	bge	r2,r16,c006efc <___svfprintf_internal_r+0x1570>
 c006ef8:	1021883a 	mov	r16,r2
 c006efc:	04000a0e 	bge	zero,r16,c006f28 <___svfprintf_internal_r+0x159c>
 c006f00:	d9001f17 	ldw	r4,124(sp)
 c006f04:	1c07883a 	add	r3,r3,r16
 c006f08:	44400015 	stw	r17,0(r8)
 c006f0c:	21000044 	addi	r4,r4,1
 c006f10:	44000115 	stw	r16,4(r8)
 c006f14:	d8c02015 	stw	r3,128(sp)
 c006f18:	d9001f15 	stw	r4,124(sp)
 c006f1c:	014001c4 	movi	r5,7
 c006f20:	2901e616 	blt	r5,r4,c0076bc <___svfprintf_internal_r+0x1d30>
 c006f24:	42000204 	addi	r8,r8,8
 c006f28:	8001f616 	blt	r16,zero,c007704 <___svfprintf_internal_r+0x1d78>
 c006f2c:	1421c83a 	sub	r16,r2,r16
 c006f30:	043cfa0e 	bge	zero,r16,c00631c <__alt_data_end+0xfc00631c>
 c006f34:	04400404 	movi	r17,16
 c006f38:	d8801f17 	ldw	r2,124(sp)
 c006f3c:	8c3edd0e 	bge	r17,r16,c006ab4 <__alt_data_end+0xfc006ab4>
 c006f40:	014300b4 	movhi	r5,3074
 c006f44:	29628d84 	addi	r5,r5,-30154
 c006f48:	d9402c15 	stw	r5,176(sp)
 c006f4c:	058001c4 	movi	r22,7
 c006f50:	dd002d17 	ldw	r20,180(sp)
 c006f54:	00000306 	br	c006f64 <___svfprintf_internal_r+0x15d8>
 c006f58:	42000204 	addi	r8,r8,8
 c006f5c:	843ffc04 	addi	r16,r16,-16
 c006f60:	8c3ed70e 	bge	r17,r16,c006ac0 <__alt_data_end+0xfc006ac0>
 c006f64:	18c00404 	addi	r3,r3,16
 c006f68:	10800044 	addi	r2,r2,1
 c006f6c:	45400015 	stw	r21,0(r8)
 c006f70:	44400115 	stw	r17,4(r8)
 c006f74:	d8c02015 	stw	r3,128(sp)
 c006f78:	d8801f15 	stw	r2,124(sp)
 c006f7c:	b0bff60e 	bge	r22,r2,c006f58 <__alt_data_end+0xfc006f58>
 c006f80:	d9801e04 	addi	r6,sp,120
 c006f84:	a00b883a 	mov	r5,r20
 c006f88:	9809883a 	mov	r4,r19
 c006f8c:	c00ea300 	call	c00ea30 <__ssprint_r>
 c006f90:	103b651e 	bne	r2,zero,c005d28 <__alt_data_end+0xfc005d28>
 c006f94:	d8c02017 	ldw	r3,128(sp)
 c006f98:	d8801f17 	ldw	r2,124(sp)
 c006f9c:	da000404 	addi	r8,sp,16
 c006fa0:	003fee06 	br	c006f5c <__alt_data_end+0xfc006f5c>
 c006fa4:	9088703a 	and	r4,r18,r2
 c006fa8:	203e8d1e 	bne	r4,zero,c0069e0 <__alt_data_end+0xfc0069e0>
 c006fac:	dc401f17 	ldw	r17,124(sp)
 c006fb0:	40800115 	stw	r2,4(r8)
 c006fb4:	44000015 	stw	r16,0(r8)
 c006fb8:	8c400044 	addi	r17,r17,1
 c006fbc:	d8c02015 	stw	r3,128(sp)
 c006fc0:	dc401f15 	stw	r17,124(sp)
 c006fc4:	008001c4 	movi	r2,7
 c006fc8:	147f7f16 	blt	r2,r17,c006dc8 <__alt_data_end+0xfc006dc8>
 c006fcc:	45800204 	addi	r22,r8,8
 c006fd0:	003eac06 	br	c006a84 <__alt_data_end+0xfc006a84>
 c006fd4:	d9402d17 	ldw	r5,180(sp)
 c006fd8:	d9801e04 	addi	r6,sp,120
 c006fdc:	9809883a 	mov	r4,r19
 c006fe0:	c00ea300 	call	c00ea30 <__ssprint_r>
 c006fe4:	103b501e 	bne	r2,zero,c005d28 <__alt_data_end+0xfc005d28>
 c006fe8:	d8c02017 	ldw	r3,128(sp)
 c006fec:	dc401f17 	ldw	r17,124(sp)
 c006ff0:	da000404 	addi	r8,sp,16
 c006ff4:	003e8406 	br	c006a08 <__alt_data_end+0xfc006a08>
 c006ff8:	d9402d17 	ldw	r5,180(sp)
 c006ffc:	d9801e04 	addi	r6,sp,120
 c007000:	9809883a 	mov	r4,r19
 c007004:	c00ea300 	call	c00ea30 <__ssprint_r>
 c007008:	103b471e 	bne	r2,zero,c005d28 <__alt_data_end+0xfc005d28>
 c00700c:	d8c02017 	ldw	r3,128(sp)
 c007010:	dc401f17 	ldw	r17,124(sp)
 c007014:	dd800404 	addi	r22,sp,16
 c007018:	003e8606 	br	c006a34 <__alt_data_end+0xfc006a34>
 c00701c:	0029883a 	mov	r20,zero
 c007020:	a5000c04 	addi	r20,r20,48
 c007024:	dc001dc4 	addi	r16,sp,119
 c007028:	dd001dc5 	stb	r20,119(sp)
 c00702c:	003f3806 	br	c006d10 <__alt_data_end+0xfc006d10>
 c007030:	d9402d17 	ldw	r5,180(sp)
 c007034:	d9801e04 	addi	r6,sp,120
 c007038:	9809883a 	mov	r4,r19
 c00703c:	c00ea300 	call	c00ea30 <__ssprint_r>
 c007040:	103b391e 	bne	r2,zero,c005d28 <__alt_data_end+0xfc005d28>
 c007044:	d8c02017 	ldw	r3,128(sp)
 c007048:	da000404 	addi	r8,sp,16
 c00704c:	003c7306 	br	c00621c <__alt_data_end+0xfc00621c>
 c007050:	d9003617 	ldw	r4,216(sp)
 c007054:	d9403717 	ldw	r5,220(sp)
 c007058:	da003e15 	stw	r8,248(sp)
 c00705c:	c00e7a40 	call	c00e7a4 <__fpclassifyd>
 c007060:	da003e17 	ldw	r8,248(sp)
 c007064:	1000bd1e 	bne	r2,zero,c00735c <___svfprintf_internal_r+0x19d0>
 c007068:	008011c4 	movi	r2,71
 c00706c:	14411e0e 	bge	r2,r17,c0074e8 <___svfprintf_internal_r+0x1b5c>
 c007070:	040300b4 	movhi	r16,3074
 c007074:	84228004 	addi	r16,r16,-30208
 c007078:	00c000c4 	movi	r3,3
 c00707c:	00bfdfc4 	movi	r2,-129
 c007080:	d8c02915 	stw	r3,164(sp)
 c007084:	90a4703a 	and	r18,r18,r2
 c007088:	df002783 	ldbu	fp,158(sp)
 c00708c:	d8c02b15 	stw	r3,172(sp)
 c007090:	d8002a15 	stw	zero,168(sp)
 c007094:	d8003215 	stw	zero,200(sp)
 c007098:	003bfa06 	br	c006084 <__alt_data_end+0xfc006084>
 c00709c:	9080100c 	andi	r2,r18,64
 c0070a0:	d8002785 	stb	zero,158(sp)
 c0070a4:	10009426 	beq	r2,zero,c0072f8 <___svfprintf_internal_r+0x196c>
 c0070a8:	d9402e17 	ldw	r5,184(sp)
 c0070ac:	d8c02a17 	ldw	r3,168(sp)
 c0070b0:	002d883a 	mov	r22,zero
 c0070b4:	28800104 	addi	r2,r5,4
 c0070b8:	2d00000b 	ldhu	r20,0(r5)
 c0070bc:	183ec10e 	bge	r3,zero,c006bc4 <__alt_data_end+0xfc006bc4>
 c0070c0:	a586b03a 	or	r3,r20,r22
 c0070c4:	d8802e15 	stw	r2,184(sp)
 c0070c8:	183ec21e 	bne	r3,zero,c006bd4 <__alt_data_end+0xfc006bd4>
 c0070cc:	0039883a 	mov	fp,zero
 c0070d0:	0005883a 	mov	r2,zero
 c0070d4:	003db806 	br	c0067b8 <__alt_data_end+0xfc0067b8>
 c0070d8:	d8c02e17 	ldw	r3,184(sp)
 c0070dc:	d9002e17 	ldw	r4,184(sp)
 c0070e0:	d9402e17 	ldw	r5,184(sp)
 c0070e4:	18c00017 	ldw	r3,0(r3)
 c0070e8:	21000117 	ldw	r4,4(r4)
 c0070ec:	29400204 	addi	r5,r5,8
 c0070f0:	d8c03615 	stw	r3,216(sp)
 c0070f4:	d9003715 	stw	r4,220(sp)
 c0070f8:	d9402e15 	stw	r5,184(sp)
 c0070fc:	003b5a06 	br	c005e68 <__alt_data_end+0xfc005e68>
 c007100:	9080100c 	andi	r2,r18,64
 c007104:	10010726 	beq	r2,zero,c007524 <___svfprintf_internal_r+0x1b98>
 c007108:	d8802e17 	ldw	r2,184(sp)
 c00710c:	1500000f 	ldh	r20,0(r2)
 c007110:	10800104 	addi	r2,r2,4
 c007114:	d8802e15 	stw	r2,184(sp)
 c007118:	a02dd7fa 	srai	r22,r20,31
 c00711c:	b005883a 	mov	r2,r22
 c007120:	003b7d06 	br	c005f18 <__alt_data_end+0xfc005f18>
 c007124:	9080100c 	andi	r2,r18,64
 c007128:	10010526 	beq	r2,zero,c007540 <___svfprintf_internal_r+0x1bb4>
 c00712c:	d8c02e17 	ldw	r3,184(sp)
 c007130:	002d883a 	mov	r22,zero
 c007134:	1d00000b 	ldhu	r20,0(r3)
 c007138:	18c00104 	addi	r3,r3,4
 c00713c:	d8c02e15 	stw	r3,184(sp)
 c007140:	003ce206 	br	c0064cc <__alt_data_end+0xfc0064cc>
 c007144:	bc400007 	ldb	r17,0(r23)
 c007148:	003a6506 	br	c005ae0 <__alt_data_end+0xfc005ae0>
 c00714c:	9080040c 	andi	r2,r18,16
 c007150:	10010126 	beq	r2,zero,c007558 <___svfprintf_internal_r+0x1bcc>
 c007154:	d8c02e17 	ldw	r3,184(sp)
 c007158:	d9002f17 	ldw	r4,188(sp)
 c00715c:	18800017 	ldw	r2,0(r3)
 c007160:	18c00104 	addi	r3,r3,4
 c007164:	d8c02e15 	stw	r3,184(sp)
 c007168:	11000015 	stw	r4,0(r2)
 c00716c:	003a3206 	br	c005a38 <__alt_data_end+0xfc005a38>
 c007170:	d9002a17 	ldw	r4,168(sp)
 c007174:	d8002785 	stb	zero,158(sp)
 c007178:	203d8d16 	blt	r4,zero,c0067b0 <__alt_data_end+0xfc0067b0>
 c00717c:	00bfdfc4 	movi	r2,-129
 c007180:	90a4703a 	and	r18,r18,r2
 c007184:	003ad506 	br	c005cdc <__alt_data_end+0xfc005cdc>
 c007188:	014300b4 	movhi	r5,3074
 c00718c:	29628d84 	addi	r5,r5,-30154
 c007190:	d9402c15 	stw	r5,176(sp)
 c007194:	d9402c17 	ldw	r5,176(sp)
 c007198:	1c47883a 	add	r3,r3,r17
 c00719c:	10800044 	addi	r2,r2,1
 c0071a0:	41400015 	stw	r5,0(r8)
 c0071a4:	44400115 	stw	r17,4(r8)
 c0071a8:	d8c02015 	stw	r3,128(sp)
 c0071ac:	d8801f15 	stw	r2,124(sp)
 c0071b0:	010001c4 	movi	r4,7
 c0071b4:	20bf3016 	blt	r4,r2,c006e78 <__alt_data_end+0xfc006e78>
 c0071b8:	42000204 	addi	r8,r8,8
 c0071bc:	003f3506 	br	c006e94 <__alt_data_end+0xfc006e94>
 c0071c0:	010300b4 	movhi	r4,3074
 c0071c4:	21228d84 	addi	r4,r4,-30154
 c0071c8:	d9002c15 	stw	r4,176(sp)
 c0071cc:	003c3c06 	br	c0062c0 <__alt_data_end+0xfc0062c0>
 c0071d0:	d9402d17 	ldw	r5,180(sp)
 c0071d4:	d9801e04 	addi	r6,sp,120
 c0071d8:	9809883a 	mov	r4,r19
 c0071dc:	c00ea300 	call	c00ea30 <__ssprint_r>
 c0071e0:	103ad11e 	bne	r2,zero,c005d28 <__alt_data_end+0xfc005d28>
 c0071e4:	d8c02017 	ldw	r3,128(sp)
 c0071e8:	da000404 	addi	r8,sp,16
 c0071ec:	003d9306 	br	c00683c <__alt_data_end+0xfc00683c>
 c0071f0:	d8801f17 	ldw	r2,124(sp)
 c0071f4:	014300b4 	movhi	r5,3074
 c0071f8:	01000044 	movi	r4,1
 c0071fc:	18c00044 	addi	r3,r3,1
 c007200:	10800044 	addi	r2,r2,1
 c007204:	29628d04 	addi	r5,r5,-30156
 c007208:	41000115 	stw	r4,4(r8)
 c00720c:	41400015 	stw	r5,0(r8)
 c007210:	d8c02015 	stw	r3,128(sp)
 c007214:	d8801f15 	stw	r2,124(sp)
 c007218:	010001c4 	movi	r4,7
 c00721c:	2080b516 	blt	r4,r2,c0074f4 <___svfprintf_internal_r+0x1b68>
 c007220:	42000204 	addi	r8,r8,8
 c007224:	8800041e 	bne	r17,zero,c007238 <___svfprintf_internal_r+0x18ac>
 c007228:	d8803317 	ldw	r2,204(sp)
 c00722c:	1000021e 	bne	r2,zero,c007238 <___svfprintf_internal_r+0x18ac>
 c007230:	9080004c 	andi	r2,r18,1
 c007234:	103c3926 	beq	r2,zero,c00631c <__alt_data_end+0xfc00631c>
 c007238:	d9003817 	ldw	r4,224(sp)
 c00723c:	d8801f17 	ldw	r2,124(sp)
 c007240:	d9403417 	ldw	r5,208(sp)
 c007244:	20c7883a 	add	r3,r4,r3
 c007248:	10800044 	addi	r2,r2,1
 c00724c:	41000115 	stw	r4,4(r8)
 c007250:	41400015 	stw	r5,0(r8)
 c007254:	d8c02015 	stw	r3,128(sp)
 c007258:	d8801f15 	stw	r2,124(sp)
 c00725c:	010001c4 	movi	r4,7
 c007260:	20818016 	blt	r4,r2,c007864 <___svfprintf_internal_r+0x1ed8>
 c007264:	42000204 	addi	r8,r8,8
 c007268:	0463c83a 	sub	r17,zero,r17
 c00726c:	0440cb0e 	bge	zero,r17,c00759c <___svfprintf_internal_r+0x1c10>
 c007270:	05800404 	movi	r22,16
 c007274:	b440e80e 	bge	r22,r17,c007618 <___svfprintf_internal_r+0x1c8c>
 c007278:	014300b4 	movhi	r5,3074
 c00727c:	29628d84 	addi	r5,r5,-30154
 c007280:	d9402c15 	stw	r5,176(sp)
 c007284:	070001c4 	movi	fp,7
 c007288:	dd002d17 	ldw	r20,180(sp)
 c00728c:	00000306 	br	c00729c <___svfprintf_internal_r+0x1910>
 c007290:	42000204 	addi	r8,r8,8
 c007294:	8c7ffc04 	addi	r17,r17,-16
 c007298:	b440e20e 	bge	r22,r17,c007624 <___svfprintf_internal_r+0x1c98>
 c00729c:	18c00404 	addi	r3,r3,16
 c0072a0:	10800044 	addi	r2,r2,1
 c0072a4:	45400015 	stw	r21,0(r8)
 c0072a8:	45800115 	stw	r22,4(r8)
 c0072ac:	d8c02015 	stw	r3,128(sp)
 c0072b0:	d8801f15 	stw	r2,124(sp)
 c0072b4:	e0bff60e 	bge	fp,r2,c007290 <__alt_data_end+0xfc007290>
 c0072b8:	d9801e04 	addi	r6,sp,120
 c0072bc:	a00b883a 	mov	r5,r20
 c0072c0:	9809883a 	mov	r4,r19
 c0072c4:	c00ea300 	call	c00ea30 <__ssprint_r>
 c0072c8:	103a971e 	bne	r2,zero,c005d28 <__alt_data_end+0xfc005d28>
 c0072cc:	d8c02017 	ldw	r3,128(sp)
 c0072d0:	d8801f17 	ldw	r2,124(sp)
 c0072d4:	da000404 	addi	r8,sp,16
 c0072d8:	003fee06 	br	c007294 <__alt_data_end+0xfc007294>
 c0072dc:	d9002e17 	ldw	r4,184(sp)
 c0072e0:	d9402a17 	ldw	r5,168(sp)
 c0072e4:	002d883a 	mov	r22,zero
 c0072e8:	20800104 	addi	r2,r4,4
 c0072ec:	25000017 	ldw	r20,0(r4)
 c0072f0:	283e7d0e 	bge	r5,zero,c006ce8 <__alt_data_end+0xfc006ce8>
 c0072f4:	003eda06 	br	c006e60 <__alt_data_end+0xfc006e60>
 c0072f8:	d9002e17 	ldw	r4,184(sp)
 c0072fc:	d9402a17 	ldw	r5,168(sp)
 c007300:	002d883a 	mov	r22,zero
 c007304:	20800104 	addi	r2,r4,4
 c007308:	25000017 	ldw	r20,0(r4)
 c00730c:	283e2d0e 	bge	r5,zero,c006bc4 <__alt_data_end+0xfc006bc4>
 c007310:	003f6b06 	br	c0070c0 <__alt_data_end+0xfc0070c0>
 c007314:	d8c02e15 	stw	r3,184(sp)
 c007318:	0039883a 	mov	fp,zero
 c00731c:	003ed206 	br	c006e68 <__alt_data_end+0xfc006e68>
 c007320:	bc400043 	ldbu	r17,1(r23)
 c007324:	84000814 	ori	r16,r16,32
 c007328:	bdc00044 	addi	r23,r23,1
 c00732c:	8c403fcc 	andi	r17,r17,255
 c007330:	8c40201c 	xori	r17,r17,128
 c007334:	8c7fe004 	addi	r17,r17,-128
 c007338:	0039e906 	br	c005ae0 <__alt_data_end+0xfc005ae0>
 c00733c:	d9402d17 	ldw	r5,180(sp)
 c007340:	d9801e04 	addi	r6,sp,120
 c007344:	9809883a 	mov	r4,r19
 c007348:	c00ea300 	call	c00ea30 <__ssprint_r>
 c00734c:	103a761e 	bne	r2,zero,c005d28 <__alt_data_end+0xfc005d28>
 c007350:	d8c02017 	ldw	r3,128(sp)
 c007354:	da000404 	addi	r8,sp,16
 c007358:	003d4a06 	br	c006884 <__alt_data_end+0xfc006884>
 c00735c:	d9002a17 	ldw	r4,168(sp)
 c007360:	05bff7c4 	movi	r22,-33
 c007364:	00bfffc4 	movi	r2,-1
 c007368:	8dac703a 	and	r22,r17,r22
 c00736c:	20806a26 	beq	r4,r2,c007518 <___svfprintf_internal_r+0x1b8c>
 c007370:	008011c4 	movi	r2,71
 c007374:	b0813726 	beq	r22,r2,c007854 <___svfprintf_internal_r+0x1ec8>
 c007378:	d9003717 	ldw	r4,220(sp)
 c00737c:	90c04014 	ori	r3,r18,256
 c007380:	d8c02c15 	stw	r3,176(sp)
 c007384:	20015d16 	blt	r4,zero,c0078fc <___svfprintf_internal_r+0x1f70>
 c007388:	dd003717 	ldw	r20,220(sp)
 c00738c:	d8002905 	stb	zero,164(sp)
 c007390:	00801984 	movi	r2,102
 c007394:	88814026 	beq	r17,r2,c007898 <___svfprintf_internal_r+0x1f0c>
 c007398:	00801184 	movi	r2,70
 c00739c:	88817126 	beq	r17,r2,c007964 <___svfprintf_internal_r+0x1fd8>
 c0073a0:	00801144 	movi	r2,69
 c0073a4:	b0816226 	beq	r22,r2,c007930 <___svfprintf_internal_r+0x1fa4>
 c0073a8:	d8c02a17 	ldw	r3,168(sp)
 c0073ac:	d8802104 	addi	r2,sp,132
 c0073b0:	d8800315 	stw	r2,12(sp)
 c0073b4:	d9403617 	ldw	r5,216(sp)
 c0073b8:	d8802504 	addi	r2,sp,148
 c0073bc:	d8800215 	stw	r2,8(sp)
 c0073c0:	d8802604 	addi	r2,sp,152
 c0073c4:	d8c00015 	stw	r3,0(sp)
 c0073c8:	d8800115 	stw	r2,4(sp)
 c0073cc:	01c00084 	movi	r7,2
 c0073d0:	a00d883a 	mov	r6,r20
 c0073d4:	9809883a 	mov	r4,r19
 c0073d8:	d8c03d15 	stw	r3,244(sp)
 c0073dc:	da003e15 	stw	r8,248(sp)
 c0073e0:	c00a3c80 	call	c00a3c8 <_dtoa_r>
 c0073e4:	1021883a 	mov	r16,r2
 c0073e8:	008019c4 	movi	r2,103
 c0073ec:	d8c03d17 	ldw	r3,244(sp)
 c0073f0:	da003e17 	ldw	r8,248(sp)
 c0073f4:	8880e726 	beq	r17,r2,c007794 <___svfprintf_internal_r+0x1e08>
 c0073f8:	008011c4 	movi	r2,71
 c0073fc:	8880d426 	beq	r17,r2,c007750 <___svfprintf_internal_r+0x1dc4>
 c007400:	80f9883a 	add	fp,r16,r3
 c007404:	d9003617 	ldw	r4,216(sp)
 c007408:	000d883a 	mov	r6,zero
 c00740c:	000f883a 	mov	r7,zero
 c007410:	a00b883a 	mov	r5,r20
 c007414:	da003e15 	stw	r8,248(sp)
 c007418:	c013f2c0 	call	c013f2c <__eqdf2>
 c00741c:	da003e17 	ldw	r8,248(sp)
 c007420:	1000e426 	beq	r2,zero,c0077b4 <___svfprintf_internal_r+0x1e28>
 c007424:	d8802117 	ldw	r2,132(sp)
 c007428:	1700062e 	bgeu	r2,fp,c007444 <___svfprintf_internal_r+0x1ab8>
 c00742c:	01000c04 	movi	r4,48
 c007430:	10c00044 	addi	r3,r2,1
 c007434:	d8c02115 	stw	r3,132(sp)
 c007438:	11000005 	stb	r4,0(r2)
 c00743c:	d8802117 	ldw	r2,132(sp)
 c007440:	173ffb36 	bltu	r2,fp,c007430 <__alt_data_end+0xfc007430>
 c007444:	1405c83a 	sub	r2,r2,r16
 c007448:	d8803315 	stw	r2,204(sp)
 c00744c:	008011c4 	movi	r2,71
 c007450:	b080c526 	beq	r22,r2,c007768 <___svfprintf_internal_r+0x1ddc>
 c007454:	00801944 	movi	r2,101
 c007458:	1441d80e 	bge	r2,r17,c007bbc <___svfprintf_internal_r+0x2230>
 c00745c:	d8c02617 	ldw	r3,152(sp)
 c007460:	00801984 	movi	r2,102
 c007464:	d8c03215 	stw	r3,200(sp)
 c007468:	88813426 	beq	r17,r2,c00793c <___svfprintf_internal_r+0x1fb0>
 c00746c:	d8c03217 	ldw	r3,200(sp)
 c007470:	d9003317 	ldw	r4,204(sp)
 c007474:	19012516 	blt	r3,r4,c00790c <___svfprintf_internal_r+0x1f80>
 c007478:	9480004c 	andi	r18,r18,1
 c00747c:	9001841e 	bne	r18,zero,c007a90 <___svfprintf_internal_r+0x2104>
 c007480:	1805883a 	mov	r2,r3
 c007484:	1801cb16 	blt	r3,zero,c007bb4 <___svfprintf_internal_r+0x2228>
 c007488:	d8c03217 	ldw	r3,200(sp)
 c00748c:	044019c4 	movi	r17,103
 c007490:	d8c02b15 	stw	r3,172(sp)
 c007494:	df002907 	ldb	fp,164(sp)
 c007498:	e000a61e 	bne	fp,zero,c007734 <___svfprintf_internal_r+0x1da8>
 c00749c:	df002783 	ldbu	fp,158(sp)
 c0074a0:	d8802915 	stw	r2,164(sp)
 c0074a4:	dc802c17 	ldw	r18,176(sp)
 c0074a8:	d8002a15 	stw	zero,168(sp)
 c0074ac:	003af506 	br	c006084 <__alt_data_end+0xfc006084>
 c0074b0:	040300b4 	movhi	r16,3074
 c0074b4:	84227d04 	addi	r16,r16,-30220
 c0074b8:	003a7e06 	br	c005eb4 <__alt_data_end+0xfc005eb4>
 c0074bc:	d9003917 	ldw	r4,228(sp)
 c0074c0:	04001004 	movi	r16,64
 c0074c4:	800b883a 	mov	r5,r16
 c0074c8:	c004ccc0 	call	c004ccc <_malloc_r>
 c0074cc:	d9002d17 	ldw	r4,180(sp)
 c0074d0:	20800015 	stw	r2,0(r4)
 c0074d4:	20800415 	stw	r2,16(r4)
 c0074d8:	1001d026 	beq	r2,zero,c007c1c <___svfprintf_internal_r+0x2290>
 c0074dc:	d8802d17 	ldw	r2,180(sp)
 c0074e0:	14000515 	stw	r16,20(r2)
 c0074e4:	00394406 	br	c0059f8 <__alt_data_end+0xfc0059f8>
 c0074e8:	040300b4 	movhi	r16,3074
 c0074ec:	84227f04 	addi	r16,r16,-30212
 c0074f0:	003ee106 	br	c007078 <__alt_data_end+0xfc007078>
 c0074f4:	d9402d17 	ldw	r5,180(sp)
 c0074f8:	d9801e04 	addi	r6,sp,120
 c0074fc:	9809883a 	mov	r4,r19
 c007500:	c00ea300 	call	c00ea30 <__ssprint_r>
 c007504:	103a081e 	bne	r2,zero,c005d28 <__alt_data_end+0xfc005d28>
 c007508:	dc402617 	ldw	r17,152(sp)
 c00750c:	d8c02017 	ldw	r3,128(sp)
 c007510:	da000404 	addi	r8,sp,16
 c007514:	003f4306 	br	c007224 <__alt_data_end+0xfc007224>
 c007518:	01400184 	movi	r5,6
 c00751c:	d9402a15 	stw	r5,168(sp)
 c007520:	003f9506 	br	c007378 <__alt_data_end+0xfc007378>
 c007524:	d8c02e17 	ldw	r3,184(sp)
 c007528:	1d000017 	ldw	r20,0(r3)
 c00752c:	18c00104 	addi	r3,r3,4
 c007530:	d8c02e15 	stw	r3,184(sp)
 c007534:	a02dd7fa 	srai	r22,r20,31
 c007538:	b005883a 	mov	r2,r22
 c00753c:	003a7606 	br	c005f18 <__alt_data_end+0xfc005f18>
 c007540:	d9002e17 	ldw	r4,184(sp)
 c007544:	002d883a 	mov	r22,zero
 c007548:	25000017 	ldw	r20,0(r4)
 c00754c:	21000104 	addi	r4,r4,4
 c007550:	d9002e15 	stw	r4,184(sp)
 c007554:	003bdd06 	br	c0064cc <__alt_data_end+0xfc0064cc>
 c007558:	9480100c 	andi	r18,r18,64
 c00755c:	90006e26 	beq	r18,zero,c007718 <___svfprintf_internal_r+0x1d8c>
 c007560:	d9402e17 	ldw	r5,184(sp)
 c007564:	d8c02f17 	ldw	r3,188(sp)
 c007568:	28800017 	ldw	r2,0(r5)
 c00756c:	29400104 	addi	r5,r5,4
 c007570:	d9402e15 	stw	r5,184(sp)
 c007574:	10c0000d 	sth	r3,0(r2)
 c007578:	00392f06 	br	c005a38 <__alt_data_end+0xfc005a38>
 c00757c:	d9402d17 	ldw	r5,180(sp)
 c007580:	d9801e04 	addi	r6,sp,120
 c007584:	9809883a 	mov	r4,r19
 c007588:	c00ea300 	call	c00ea30 <__ssprint_r>
 c00758c:	1039e61e 	bne	r2,zero,c005d28 <__alt_data_end+0xfc005d28>
 c007590:	d8c02017 	ldw	r3,128(sp)
 c007594:	d8801f17 	ldw	r2,124(sp)
 c007598:	da000404 	addi	r8,sp,16
 c00759c:	d9403317 	ldw	r5,204(sp)
 c0075a0:	10800044 	addi	r2,r2,1
 c0075a4:	44000015 	stw	r16,0(r8)
 c0075a8:	28c7883a 	add	r3,r5,r3
 c0075ac:	003b5506 	br	c006304 <__alt_data_end+0xfc006304>
 c0075b0:	8009883a 	mov	r4,r16
 c0075b4:	df003e15 	stw	fp,248(sp)
 c0075b8:	c0058f40 	call	c0058f4 <strlen>
 c0075bc:	d8802b15 	stw	r2,172(sp)
 c0075c0:	da003e17 	ldw	r8,248(sp)
 c0075c4:	103c160e 	bge	r2,zero,c006620 <__alt_data_end+0xfc006620>
 c0075c8:	0005883a 	mov	r2,zero
 c0075cc:	003c1406 	br	c006620 <__alt_data_end+0xfc006620>
 c0075d0:	00bfffc4 	movi	r2,-1
 c0075d4:	0039d906 	br	c005d3c <__alt_data_end+0xfc005d3c>
 c0075d8:	010300b4 	movhi	r4,3074
 c0075dc:	21229184 	addi	r4,r4,-30138
 c0075e0:	d9003515 	stw	r4,212(sp)
 c0075e4:	003ae406 	br	c006178 <__alt_data_end+0xfc006178>
 c0075e8:	013fffc4 	movi	r4,-1
 c0075ec:	0039fa06 	br	c005dd8 <__alt_data_end+0xfc005dd8>
 c0075f0:	d9402d17 	ldw	r5,180(sp)
 c0075f4:	d9801e04 	addi	r6,sp,120
 c0075f8:	9809883a 	mov	r4,r19
 c0075fc:	c00ea300 	call	c00ea30 <__ssprint_r>
 c007600:	1039c91e 	bne	r2,zero,c005d28 <__alt_data_end+0xfc005d28>
 c007604:	d8c02017 	ldw	r3,128(sp)
 c007608:	da000404 	addi	r8,sp,16
 c00760c:	003d8406 	br	c006c20 <__alt_data_end+0xfc006c20>
 c007610:	0023883a 	mov	r17,zero
 c007614:	003d8306 	br	c006c24 <__alt_data_end+0xfc006c24>
 c007618:	010300b4 	movhi	r4,3074
 c00761c:	21228d84 	addi	r4,r4,-30154
 c007620:	d9002c15 	stw	r4,176(sp)
 c007624:	d9002c17 	ldw	r4,176(sp)
 c007628:	1c47883a 	add	r3,r3,r17
 c00762c:	10800044 	addi	r2,r2,1
 c007630:	41000015 	stw	r4,0(r8)
 c007634:	44400115 	stw	r17,4(r8)
 c007638:	d8c02015 	stw	r3,128(sp)
 c00763c:	d8801f15 	stw	r2,124(sp)
 c007640:	010001c4 	movi	r4,7
 c007644:	20bfcd16 	blt	r4,r2,c00757c <__alt_data_end+0xfc00757c>
 c007648:	42000204 	addi	r8,r8,8
 c00764c:	003fd306 	br	c00759c <__alt_data_end+0xfc00759c>
 c007650:	d9402d17 	ldw	r5,180(sp)
 c007654:	d9801e04 	addi	r6,sp,120
 c007658:	9809883a 	mov	r4,r19
 c00765c:	c00ea300 	call	c00ea30 <__ssprint_r>
 c007660:	1039b11e 	bne	r2,zero,c005d28 <__alt_data_end+0xfc005d28>
 c007664:	d8802617 	ldw	r2,152(sp)
 c007668:	d8c02017 	ldw	r3,128(sp)
 c00766c:	da000404 	addi	r8,sp,16
 c007670:	003e1c06 	br	c006ee4 <__alt_data_end+0xfc006ee4>
 c007674:	d8802a17 	ldw	r2,168(sp)
 c007678:	00c00184 	movi	r3,6
 c00767c:	1880012e 	bgeu	r3,r2,c007684 <___svfprintf_internal_r+0x1cf8>
 c007680:	1805883a 	mov	r2,r3
 c007684:	d8802b15 	stw	r2,172(sp)
 c007688:	1000f316 	blt	r2,zero,c007a58 <___svfprintf_internal_r+0x20cc>
 c00768c:	040300b4 	movhi	r16,3074
 c007690:	d8802915 	stw	r2,164(sp)
 c007694:	dd002e15 	stw	r20,184(sp)
 c007698:	d8002a15 	stw	zero,168(sp)
 c00769c:	d8003215 	stw	zero,200(sp)
 c0076a0:	84228b04 	addi	r16,r16,-30164
 c0076a4:	0039883a 	mov	fp,zero
 c0076a8:	003a7d06 	br	c0060a0 <__alt_data_end+0xfc0060a0>
 c0076ac:	010300b4 	movhi	r4,3074
 c0076b0:	21229184 	addi	r4,r4,-30138
 c0076b4:	d9003515 	stw	r4,212(sp)
 c0076b8:	003b3d06 	br	c0063b0 <__alt_data_end+0xfc0063b0>
 c0076bc:	d9402d17 	ldw	r5,180(sp)
 c0076c0:	d9801e04 	addi	r6,sp,120
 c0076c4:	9809883a 	mov	r4,r19
 c0076c8:	c00ea300 	call	c00ea30 <__ssprint_r>
 c0076cc:	1039961e 	bne	r2,zero,c005d28 <__alt_data_end+0xfc005d28>
 c0076d0:	d8802617 	ldw	r2,152(sp)
 c0076d4:	d9403317 	ldw	r5,204(sp)
 c0076d8:	d8c02017 	ldw	r3,128(sp)
 c0076dc:	da000404 	addi	r8,sp,16
 c0076e0:	2885c83a 	sub	r2,r5,r2
 c0076e4:	003e1006 	br	c006f28 <__alt_data_end+0xfc006f28>
 c0076e8:	00800044 	movi	r2,1
 c0076ec:	10803fcc 	andi	r2,r2,255
 c0076f0:	00c00044 	movi	r3,1
 c0076f4:	10fa1026 	beq	r2,r3,c005f38 <__alt_data_end+0xfc005f38>
 c0076f8:	00c00084 	movi	r3,2
 c0076fc:	10fb8226 	beq	r2,r3,c006508 <__alt_data_end+0xfc006508>
 c007700:	003a4206 	br	c00600c <__alt_data_end+0xfc00600c>
 c007704:	0021883a 	mov	r16,zero
 c007708:	003e0806 	br	c006f2c <__alt_data_end+0xfc006f2c>
 c00770c:	07000b44 	movi	fp,45
 c007710:	df002785 	stb	fp,158(sp)
 c007714:	0039e306 	br	c005ea4 <__alt_data_end+0xfc005ea4>
 c007718:	d9002e17 	ldw	r4,184(sp)
 c00771c:	d9402f17 	ldw	r5,188(sp)
 c007720:	20800017 	ldw	r2,0(r4)
 c007724:	21000104 	addi	r4,r4,4
 c007728:	d9002e15 	stw	r4,184(sp)
 c00772c:	11400015 	stw	r5,0(r2)
 c007730:	0038c106 	br	c005a38 <__alt_data_end+0xfc005a38>
 c007734:	00c00b44 	movi	r3,45
 c007738:	d8c02785 	stb	r3,158(sp)
 c00773c:	d8802915 	stw	r2,164(sp)
 c007740:	dc802c17 	ldw	r18,176(sp)
 c007744:	d8002a15 	stw	zero,168(sp)
 c007748:	07000b44 	movi	fp,45
 c00774c:	003a5106 	br	c006094 <__alt_data_end+0xfc006094>
 c007750:	9080004c 	andi	r2,r18,1
 c007754:	1000941e 	bne	r2,zero,c0079a8 <___svfprintf_internal_r+0x201c>
 c007758:	d8802117 	ldw	r2,132(sp)
 c00775c:	1405c83a 	sub	r2,r2,r16
 c007760:	d8803315 	stw	r2,204(sp)
 c007764:	b441151e 	bne	r22,r17,c007bbc <___svfprintf_internal_r+0x2230>
 c007768:	dd802617 	ldw	r22,152(sp)
 c00776c:	00bfff44 	movi	r2,-3
 c007770:	b0801a16 	blt	r22,r2,c0077dc <___svfprintf_internal_r+0x1e50>
 c007774:	d9402a17 	ldw	r5,168(sp)
 c007778:	2d801816 	blt	r5,r22,c0077dc <___svfprintf_internal_r+0x1e50>
 c00777c:	dd803215 	stw	r22,200(sp)
 c007780:	003f3a06 	br	c00746c <__alt_data_end+0xfc00746c>
 c007784:	1025883a 	mov	r18,r2
 c007788:	0039883a 	mov	fp,zero
 c00778c:	00800084 	movi	r2,2
 c007790:	003fd606 	br	c0076ec <__alt_data_end+0xfc0076ec>
 c007794:	9080004c 	andi	r2,r18,1
 c007798:	103f191e 	bne	r2,zero,c007400 <__alt_data_end+0xfc007400>
 c00779c:	d8802117 	ldw	r2,132(sp)
 c0077a0:	003f2806 	br	c007444 <__alt_data_end+0xfc007444>
 c0077a4:	010300b4 	movhi	r4,3074
 c0077a8:	21228d84 	addi	r4,r4,-30154
 c0077ac:	d9002c15 	stw	r4,176(sp)
 c0077b0:	003c7c06 	br	c0069a4 <__alt_data_end+0xfc0069a4>
 c0077b4:	e005883a 	mov	r2,fp
 c0077b8:	003f2206 	br	c007444 <__alt_data_end+0xfc007444>
 c0077bc:	d9002a17 	ldw	r4,168(sp)
 c0077c0:	df002783 	ldbu	fp,158(sp)
 c0077c4:	dd002e15 	stw	r20,184(sp)
 c0077c8:	d9002915 	stw	r4,164(sp)
 c0077cc:	d9002b15 	stw	r4,172(sp)
 c0077d0:	d8002a15 	stw	zero,168(sp)
 c0077d4:	d8003215 	stw	zero,200(sp)
 c0077d8:	003a2a06 	br	c006084 <__alt_data_end+0xfc006084>
 c0077dc:	8c7fff84 	addi	r17,r17,-2
 c0077e0:	b5bfffc4 	addi	r22,r22,-1
 c0077e4:	dd802615 	stw	r22,152(sp)
 c0077e8:	dc4022c5 	stb	r17,139(sp)
 c0077ec:	b000c316 	blt	r22,zero,c007afc <___svfprintf_internal_r+0x2170>
 c0077f0:	00800ac4 	movi	r2,43
 c0077f4:	d8802305 	stb	r2,140(sp)
 c0077f8:	00800244 	movi	r2,9
 c0077fc:	15806e16 	blt	r2,r22,c0079b8 <___svfprintf_internal_r+0x202c>
 c007800:	00800c04 	movi	r2,48
 c007804:	b5800c04 	addi	r22,r22,48
 c007808:	d8802345 	stb	r2,141(sp)
 c00780c:	dd802385 	stb	r22,142(sp)
 c007810:	d88023c4 	addi	r2,sp,143
 c007814:	df0022c4 	addi	fp,sp,139
 c007818:	d8c03317 	ldw	r3,204(sp)
 c00781c:	1739c83a 	sub	fp,r2,fp
 c007820:	d9003317 	ldw	r4,204(sp)
 c007824:	e0c7883a 	add	r3,fp,r3
 c007828:	df003b15 	stw	fp,236(sp)
 c00782c:	d8c02b15 	stw	r3,172(sp)
 c007830:	00800044 	movi	r2,1
 c007834:	1100b70e 	bge	r2,r4,c007b14 <___svfprintf_internal_r+0x2188>
 c007838:	d8c02b17 	ldw	r3,172(sp)
 c00783c:	18c00044 	addi	r3,r3,1
 c007840:	d8c02b15 	stw	r3,172(sp)
 c007844:	1805883a 	mov	r2,r3
 c007848:	1800b016 	blt	r3,zero,c007b0c <___svfprintf_internal_r+0x2180>
 c00784c:	d8003215 	stw	zero,200(sp)
 c007850:	003f1006 	br	c007494 <__alt_data_end+0xfc007494>
 c007854:	d8802a17 	ldw	r2,168(sp)
 c007858:	103ec71e 	bne	r2,zero,c007378 <__alt_data_end+0xfc007378>
 c00785c:	dc002a15 	stw	r16,168(sp)
 c007860:	003ec506 	br	c007378 <__alt_data_end+0xfc007378>
 c007864:	d9402d17 	ldw	r5,180(sp)
 c007868:	d9801e04 	addi	r6,sp,120
 c00786c:	9809883a 	mov	r4,r19
 c007870:	c00ea300 	call	c00ea30 <__ssprint_r>
 c007874:	10392c1e 	bne	r2,zero,c005d28 <__alt_data_end+0xfc005d28>
 c007878:	dc402617 	ldw	r17,152(sp)
 c00787c:	d8c02017 	ldw	r3,128(sp)
 c007880:	d8801f17 	ldw	r2,124(sp)
 c007884:	da000404 	addi	r8,sp,16
 c007888:	003e7706 	br	c007268 <__alt_data_end+0xfc007268>
 c00788c:	182f883a 	mov	r23,r3
 c007890:	d8002a15 	stw	zero,168(sp)
 c007894:	00389306 	br	c005ae4 <__alt_data_end+0xfc005ae4>
 c007898:	d8c02a17 	ldw	r3,168(sp)
 c00789c:	d8802104 	addi	r2,sp,132
 c0078a0:	d8800315 	stw	r2,12(sp)
 c0078a4:	d9403617 	ldw	r5,216(sp)
 c0078a8:	d8802504 	addi	r2,sp,148
 c0078ac:	d8800215 	stw	r2,8(sp)
 c0078b0:	d8802604 	addi	r2,sp,152
 c0078b4:	d8c00015 	stw	r3,0(sp)
 c0078b8:	9809883a 	mov	r4,r19
 c0078bc:	d8800115 	stw	r2,4(sp)
 c0078c0:	01c000c4 	movi	r7,3
 c0078c4:	a00d883a 	mov	r6,r20
 c0078c8:	da003e15 	stw	r8,248(sp)
 c0078cc:	c00a3c80 	call	c00a3c8 <_dtoa_r>
 c0078d0:	d9002a17 	ldw	r4,168(sp)
 c0078d4:	da003e17 	ldw	r8,248(sp)
 c0078d8:	1021883a 	mov	r16,r2
 c0078dc:	1139883a 	add	fp,r2,r4
 c0078e0:	2007883a 	mov	r3,r4
 c0078e4:	81000007 	ldb	r4,0(r16)
 c0078e8:	00800c04 	movi	r2,48
 c0078ec:	20806f26 	beq	r4,r2,c007aac <___svfprintf_internal_r+0x2120>
 c0078f0:	d8c02617 	ldw	r3,152(sp)
 c0078f4:	e0f9883a 	add	fp,fp,r3
 c0078f8:	003ec206 	br	c007404 <__alt_data_end+0xfc007404>
 c0078fc:	00c00b44 	movi	r3,45
 c007900:	2520003c 	xorhi	r20,r4,32768
 c007904:	d8c02905 	stb	r3,164(sp)
 c007908:	003ea106 	br	c007390 <__alt_data_end+0xfc007390>
 c00790c:	d8c03217 	ldw	r3,200(sp)
 c007910:	00c0890e 	bge	zero,r3,c007b38 <___svfprintf_internal_r+0x21ac>
 c007914:	00800044 	movi	r2,1
 c007918:	d9003317 	ldw	r4,204(sp)
 c00791c:	1105883a 	add	r2,r2,r4
 c007920:	d8802b15 	stw	r2,172(sp)
 c007924:	10005f16 	blt	r2,zero,c007aa4 <___svfprintf_internal_r+0x2118>
 c007928:	044019c4 	movi	r17,103
 c00792c:	003ed906 	br	c007494 <__alt_data_end+0xfc007494>
 c007930:	d9002a17 	ldw	r4,168(sp)
 c007934:	20c00044 	addi	r3,r4,1
 c007938:	003e9c06 	br	c0073ac <__alt_data_end+0xfc0073ac>
 c00793c:	d9002a17 	ldw	r4,168(sp)
 c007940:	00c0680e 	bge	zero,r3,c007ae4 <___svfprintf_internal_r+0x2158>
 c007944:	2000461e 	bne	r4,zero,c007a60 <___svfprintf_internal_r+0x20d4>
 c007948:	9480004c 	andi	r18,r18,1
 c00794c:	9000441e 	bne	r18,zero,c007a60 <___svfprintf_internal_r+0x20d4>
 c007950:	1805883a 	mov	r2,r3
 c007954:	1800a116 	blt	r3,zero,c007bdc <___svfprintf_internal_r+0x2250>
 c007958:	d8c03217 	ldw	r3,200(sp)
 c00795c:	d8c02b15 	stw	r3,172(sp)
 c007960:	003ecc06 	br	c007494 <__alt_data_end+0xfc007494>
 c007964:	d9402a17 	ldw	r5,168(sp)
 c007968:	d8802104 	addi	r2,sp,132
 c00796c:	d8800315 	stw	r2,12(sp)
 c007970:	d9400015 	stw	r5,0(sp)
 c007974:	d8802504 	addi	r2,sp,148
 c007978:	d9403617 	ldw	r5,216(sp)
 c00797c:	d8800215 	stw	r2,8(sp)
 c007980:	d8802604 	addi	r2,sp,152
 c007984:	d8800115 	stw	r2,4(sp)
 c007988:	01c000c4 	movi	r7,3
 c00798c:	a00d883a 	mov	r6,r20
 c007990:	9809883a 	mov	r4,r19
 c007994:	da003e15 	stw	r8,248(sp)
 c007998:	c00a3c80 	call	c00a3c8 <_dtoa_r>
 c00799c:	d8c02a17 	ldw	r3,168(sp)
 c0079a0:	da003e17 	ldw	r8,248(sp)
 c0079a4:	1021883a 	mov	r16,r2
 c0079a8:	00801184 	movi	r2,70
 c0079ac:	80f9883a 	add	fp,r16,r3
 c0079b0:	88bfcc26 	beq	r17,r2,c0078e4 <__alt_data_end+0xfc0078e4>
 c0079b4:	003e9306 	br	c007404 <__alt_data_end+0xfc007404>
 c0079b8:	df0022c4 	addi	fp,sp,139
 c0079bc:	dc002a15 	stw	r16,168(sp)
 c0079c0:	9829883a 	mov	r20,r19
 c0079c4:	e021883a 	mov	r16,fp
 c0079c8:	4027883a 	mov	r19,r8
 c0079cc:	b009883a 	mov	r4,r22
 c0079d0:	01400284 	movi	r5,10
 c0079d4:	c004b4c0 	call	c004b4c <__modsi3>
 c0079d8:	10800c04 	addi	r2,r2,48
 c0079dc:	843fffc4 	addi	r16,r16,-1
 c0079e0:	b009883a 	mov	r4,r22
 c0079e4:	01400284 	movi	r5,10
 c0079e8:	80800005 	stb	r2,0(r16)
 c0079ec:	c004ac80 	call	c004ac8 <__divsi3>
 c0079f0:	102d883a 	mov	r22,r2
 c0079f4:	00800244 	movi	r2,9
 c0079f8:	15bff416 	blt	r2,r22,c0079cc <__alt_data_end+0xfc0079cc>
 c0079fc:	9811883a 	mov	r8,r19
 c007a00:	b0800c04 	addi	r2,r22,48
 c007a04:	a027883a 	mov	r19,r20
 c007a08:	8029883a 	mov	r20,r16
 c007a0c:	a17fffc4 	addi	r5,r20,-1
 c007a10:	a0bfffc5 	stb	r2,-1(r20)
 c007a14:	dc002a17 	ldw	r16,168(sp)
 c007a18:	2f00782e 	bgeu	r5,fp,c007bfc <___svfprintf_internal_r+0x2270>
 c007a1c:	d9c02384 	addi	r7,sp,142
 c007a20:	3d0fc83a 	sub	r7,r7,r20
 c007a24:	d9002344 	addi	r4,sp,141
 c007a28:	e1cf883a 	add	r7,fp,r7
 c007a2c:	00000106 	br	c007a34 <___svfprintf_internal_r+0x20a8>
 c007a30:	28800003 	ldbu	r2,0(r5)
 c007a34:	20800005 	stb	r2,0(r4)
 c007a38:	21000044 	addi	r4,r4,1
 c007a3c:	29400044 	addi	r5,r5,1
 c007a40:	21fffb1e 	bne	r4,r7,c007a30 <__alt_data_end+0xfc007a30>
 c007a44:	d8802304 	addi	r2,sp,140
 c007a48:	1505c83a 	sub	r2,r2,r20
 c007a4c:	d8c02344 	addi	r3,sp,141
 c007a50:	1885883a 	add	r2,r3,r2
 c007a54:	003f7006 	br	c007818 <__alt_data_end+0xfc007818>
 c007a58:	0005883a 	mov	r2,zero
 c007a5c:	003f0b06 	br	c00768c <__alt_data_end+0xfc00768c>
 c007a60:	d9002a17 	ldw	r4,168(sp)
 c007a64:	d8c03217 	ldw	r3,200(sp)
 c007a68:	20800044 	addi	r2,r4,1
 c007a6c:	1885883a 	add	r2,r3,r2
 c007a70:	d8802b15 	stw	r2,172(sp)
 c007a74:	103e870e 	bge	r2,zero,c007494 <__alt_data_end+0xfc007494>
 c007a78:	0005883a 	mov	r2,zero
 c007a7c:	003e8506 	br	c007494 <__alt_data_end+0xfc007494>
 c007a80:	010300b4 	movhi	r4,3074
 c007a84:	21228d84 	addi	r4,r4,-30154
 c007a88:	d9002c15 	stw	r4,176(sp)
 c007a8c:	003cc506 	br	c006da4 <__alt_data_end+0xfc006da4>
 c007a90:	d8c03217 	ldw	r3,200(sp)
 c007a94:	18c00044 	addi	r3,r3,1
 c007a98:	d8c02b15 	stw	r3,172(sp)
 c007a9c:	1805883a 	mov	r2,r3
 c007aa0:	183fa10e 	bge	r3,zero,c007928 <__alt_data_end+0xfc007928>
 c007aa4:	0005883a 	mov	r2,zero
 c007aa8:	003f9f06 	br	c007928 <__alt_data_end+0xfc007928>
 c007aac:	d9003617 	ldw	r4,216(sp)
 c007ab0:	000d883a 	mov	r6,zero
 c007ab4:	000f883a 	mov	r7,zero
 c007ab8:	a00b883a 	mov	r5,r20
 c007abc:	d8c03d15 	stw	r3,244(sp)
 c007ac0:	da003e15 	stw	r8,248(sp)
 c007ac4:	c013f2c0 	call	c013f2c <__eqdf2>
 c007ac8:	d8c03d17 	ldw	r3,244(sp)
 c007acc:	da003e17 	ldw	r8,248(sp)
 c007ad0:	103f8726 	beq	r2,zero,c0078f0 <__alt_data_end+0xfc0078f0>
 c007ad4:	00800044 	movi	r2,1
 c007ad8:	10c7c83a 	sub	r3,r2,r3
 c007adc:	d8c02615 	stw	r3,152(sp)
 c007ae0:	003f8406 	br	c0078f4 <__alt_data_end+0xfc0078f4>
 c007ae4:	20000e1e 	bne	r4,zero,c007b20 <___svfprintf_internal_r+0x2194>
 c007ae8:	9480004c 	andi	r18,r18,1
 c007aec:	90000c1e 	bne	r18,zero,c007b20 <___svfprintf_internal_r+0x2194>
 c007af0:	00800044 	movi	r2,1
 c007af4:	d8802b15 	stw	r2,172(sp)
 c007af8:	003e6606 	br	c007494 <__alt_data_end+0xfc007494>
 c007afc:	00800b44 	movi	r2,45
 c007b00:	05adc83a 	sub	r22,zero,r22
 c007b04:	d8802305 	stb	r2,140(sp)
 c007b08:	003f3b06 	br	c0077f8 <__alt_data_end+0xfc0077f8>
 c007b0c:	0005883a 	mov	r2,zero
 c007b10:	003f4e06 	br	c00784c <__alt_data_end+0xfc00784c>
 c007b14:	90a4703a 	and	r18,r18,r2
 c007b18:	903f4a26 	beq	r18,zero,c007844 <__alt_data_end+0xfc007844>
 c007b1c:	003f4606 	br	c007838 <__alt_data_end+0xfc007838>
 c007b20:	d8c02a17 	ldw	r3,168(sp)
 c007b24:	18c00084 	addi	r3,r3,2
 c007b28:	d8c02b15 	stw	r3,172(sp)
 c007b2c:	1805883a 	mov	r2,r3
 c007b30:	183e580e 	bge	r3,zero,c007494 <__alt_data_end+0xfc007494>
 c007b34:	003fd006 	br	c007a78 <__alt_data_end+0xfc007a78>
 c007b38:	00800084 	movi	r2,2
 c007b3c:	10c5c83a 	sub	r2,r2,r3
 c007b40:	003f7506 	br	c007918 <__alt_data_end+0xfc007918>
 c007b44:	d9402e17 	ldw	r5,184(sp)
 c007b48:	d9002e17 	ldw	r4,184(sp)
 c007b4c:	bc400043 	ldbu	r17,1(r23)
 c007b50:	29400017 	ldw	r5,0(r5)
 c007b54:	20800104 	addi	r2,r4,4
 c007b58:	d8802e15 	stw	r2,184(sp)
 c007b5c:	d9402a15 	stw	r5,168(sp)
 c007b60:	182f883a 	mov	r23,r3
 c007b64:	283df10e 	bge	r5,zero,c00732c <__alt_data_end+0xfc00732c>
 c007b68:	8c403fcc 	andi	r17,r17,255
 c007b6c:	017fffc4 	movi	r5,-1
 c007b70:	8c40201c 	xori	r17,r17,128
 c007b74:	d9402a15 	stw	r5,168(sp)
 c007b78:	8c7fe004 	addi	r17,r17,-128
 c007b7c:	0037d806 	br	c005ae0 <__alt_data_end+0xfc005ae0>
 c007b80:	9080004c 	andi	r2,r18,1
 c007b84:	0039883a 	mov	fp,zero
 c007b88:	10000726 	beq	r2,zero,c007ba8 <___svfprintf_internal_r+0x221c>
 c007b8c:	d8c02817 	ldw	r3,160(sp)
 c007b90:	dc001dc4 	addi	r16,sp,119
 c007b94:	00800c04 	movi	r2,48
 c007b98:	1c07c83a 	sub	r3,r3,r16
 c007b9c:	d8801dc5 	stb	r2,119(sp)
 c007ba0:	d8c02b15 	stw	r3,172(sp)
 c007ba4:	00393106 	br	c00606c <__alt_data_end+0xfc00606c>
 c007ba8:	d8002b15 	stw	zero,172(sp)
 c007bac:	dc001e04 	addi	r16,sp,120
 c007bb0:	00392e06 	br	c00606c <__alt_data_end+0xfc00606c>
 c007bb4:	0005883a 	mov	r2,zero
 c007bb8:	003e3306 	br	c007488 <__alt_data_end+0xfc007488>
 c007bbc:	dd802617 	ldw	r22,152(sp)
 c007bc0:	003f0706 	br	c0077e0 <__alt_data_end+0xfc0077e0>
 c007bc4:	d8c02b03 	ldbu	r3,172(sp)
 c007bc8:	d8c02785 	stb	r3,158(sp)
 c007bcc:	003a3506 	br	c0064a4 <__alt_data_end+0xfc0064a4>
 c007bd0:	d8c02b03 	ldbu	r3,172(sp)
 c007bd4:	d8c02785 	stb	r3,158(sp)
 c007bd8:	003a1706 	br	c006438 <__alt_data_end+0xfc006438>
 c007bdc:	0005883a 	mov	r2,zero
 c007be0:	003f5d06 	br	c007958 <__alt_data_end+0xfc007958>
 c007be4:	d8c02b03 	ldbu	r3,172(sp)
 c007be8:	d8c02785 	stb	r3,158(sp)
 c007bec:	0038f306 	br	c005fbc <__alt_data_end+0xfc005fbc>
 c007bf0:	d8c02b03 	ldbu	r3,172(sp)
 c007bf4:	d8c02785 	stb	r3,158(sp)
 c007bf8:	0038be06 	br	c005ef4 <__alt_data_end+0xfc005ef4>
 c007bfc:	d8802344 	addi	r2,sp,141
 c007c00:	003f0506 	br	c007818 <__alt_data_end+0xfc007818>
 c007c04:	d8c02b03 	ldbu	r3,172(sp)
 c007c08:	d8c02785 	stb	r3,158(sp)
 c007c0c:	00388b06 	br	c005e3c <__alt_data_end+0xfc005e3c>
 c007c10:	d8c02b03 	ldbu	r3,172(sp)
 c007c14:	d8c02785 	stb	r3,158(sp)
 c007c18:	003ad706 	br	c006778 <__alt_data_end+0xfc006778>
 c007c1c:	d9403917 	ldw	r5,228(sp)
 c007c20:	00800304 	movi	r2,12
 c007c24:	28800015 	stw	r2,0(r5)
 c007c28:	00bfffc4 	movi	r2,-1
 c007c2c:	00384306 	br	c005d3c <__alt_data_end+0xfc005d3c>
 c007c30:	d8c02b03 	ldbu	r3,172(sp)
 c007c34:	d8c02785 	stb	r3,158(sp)
 c007c38:	003ab606 	br	c006714 <__alt_data_end+0xfc006714>
 c007c3c:	d8c02b03 	ldbu	r3,172(sp)
 c007c40:	d8c02785 	stb	r3,158(sp)
 c007c44:	003a8906 	br	c00666c <__alt_data_end+0xfc00666c>

0c007c48 <time>:
 c007c48:	008300b4 	movhi	r2,3074
 c007c4c:	defffc04 	addi	sp,sp,-16
 c007c50:	10aac804 	addi	r2,r2,-21728
 c007c54:	dc000215 	stw	r16,8(sp)
 c007c58:	2021883a 	mov	r16,r4
 c007c5c:	11000017 	ldw	r4,0(r2)
 c007c60:	000d883a 	mov	r6,zero
 c007c64:	d80b883a 	mov	r5,sp
 c007c68:	dfc00315 	stw	ra,12(sp)
 c007c6c:	c00cb2c0 	call	c00cb2c <_gettimeofday_r>
 c007c70:	10000716 	blt	r2,zero,c007c90 <time+0x48>
 c007c74:	d8800017 	ldw	r2,0(sp)
 c007c78:	80000126 	beq	r16,zero,c007c80 <time+0x38>
 c007c7c:	80800015 	stw	r2,0(r16)
 c007c80:	dfc00317 	ldw	ra,12(sp)
 c007c84:	dc000217 	ldw	r16,8(sp)
 c007c88:	dec00404 	addi	sp,sp,16
 c007c8c:	f800283a 	ret
 c007c90:	00bfffc4 	movi	r2,-1
 c007c94:	003ffa06 	br	c007c80 <__alt_data_end+0xfc007c80>

0c007c98 <___vfprintf_internal_r>:
 c007c98:	deffb804 	addi	sp,sp,-288
 c007c9c:	dfc04715 	stw	ra,284(sp)
 c007ca0:	ddc04515 	stw	r23,276(sp)
 c007ca4:	dd404315 	stw	r21,268(sp)
 c007ca8:	d9002d15 	stw	r4,180(sp)
 c007cac:	282f883a 	mov	r23,r5
 c007cb0:	302b883a 	mov	r21,r6
 c007cb4:	d9c02e15 	stw	r7,184(sp)
 c007cb8:	df004615 	stw	fp,280(sp)
 c007cbc:	dd804415 	stw	r22,272(sp)
 c007cc0:	dd004215 	stw	r20,264(sp)
 c007cc4:	dcc04115 	stw	r19,260(sp)
 c007cc8:	dc804015 	stw	r18,256(sp)
 c007ccc:	dc403f15 	stw	r17,252(sp)
 c007cd0:	dc003e15 	stw	r16,248(sp)
 c007cd4:	c00cc340 	call	c00cc34 <_localeconv_r>
 c007cd8:	10800017 	ldw	r2,0(r2)
 c007cdc:	1009883a 	mov	r4,r2
 c007ce0:	d8803415 	stw	r2,208(sp)
 c007ce4:	c0058f40 	call	c0058f4 <strlen>
 c007ce8:	d8803715 	stw	r2,220(sp)
 c007cec:	d8802d17 	ldw	r2,180(sp)
 c007cf0:	10000226 	beq	r2,zero,c007cfc <___vfprintf_internal_r+0x64>
 c007cf4:	10800e17 	ldw	r2,56(r2)
 c007cf8:	1000fb26 	beq	r2,zero,c0080e8 <___vfprintf_internal_r+0x450>
 c007cfc:	b880030b 	ldhu	r2,12(r23)
 c007d00:	10c8000c 	andi	r3,r2,8192
 c007d04:	1800061e 	bne	r3,zero,c007d20 <___vfprintf_internal_r+0x88>
 c007d08:	b9001917 	ldw	r4,100(r23)
 c007d0c:	00f7ffc4 	movi	r3,-8193
 c007d10:	10880014 	ori	r2,r2,8192
 c007d14:	20c6703a 	and	r3,r4,r3
 c007d18:	b880030d 	sth	r2,12(r23)
 c007d1c:	b8c01915 	stw	r3,100(r23)
 c007d20:	10c0020c 	andi	r3,r2,8
 c007d24:	1800c326 	beq	r3,zero,c008034 <___vfprintf_internal_r+0x39c>
 c007d28:	b8c00417 	ldw	r3,16(r23)
 c007d2c:	1800c126 	beq	r3,zero,c008034 <___vfprintf_internal_r+0x39c>
 c007d30:	1080068c 	andi	r2,r2,26
 c007d34:	00c00284 	movi	r3,10
 c007d38:	10c0c626 	beq	r2,r3,c008054 <___vfprintf_internal_r+0x3bc>
 c007d3c:	d8c00404 	addi	r3,sp,16
 c007d40:	050300b4 	movhi	r20,3074
 c007d44:	d9001e04 	addi	r4,sp,120
 c007d48:	a5229584 	addi	r20,r20,-30122
 c007d4c:	d8c01e15 	stw	r3,120(sp)
 c007d50:	d8002015 	stw	zero,128(sp)
 c007d54:	d8001f15 	stw	zero,124(sp)
 c007d58:	d8003315 	stw	zero,204(sp)
 c007d5c:	d8003615 	stw	zero,216(sp)
 c007d60:	d8003815 	stw	zero,224(sp)
 c007d64:	1811883a 	mov	r8,r3
 c007d68:	d8003915 	stw	zero,228(sp)
 c007d6c:	d8003a15 	stw	zero,232(sp)
 c007d70:	d8002f15 	stw	zero,188(sp)
 c007d74:	d9002815 	stw	r4,160(sp)
 c007d78:	a8800007 	ldb	r2,0(r21)
 c007d7c:	10028b26 	beq	r2,zero,c0087ac <___vfprintf_internal_r+0xb14>
 c007d80:	00c00944 	movi	r3,37
 c007d84:	a823883a 	mov	r17,r21
 c007d88:	10c0021e 	bne	r2,r3,c007d94 <___vfprintf_internal_r+0xfc>
 c007d8c:	00001406 	br	c007de0 <___vfprintf_internal_r+0x148>
 c007d90:	10c00326 	beq	r2,r3,c007da0 <___vfprintf_internal_r+0x108>
 c007d94:	8c400044 	addi	r17,r17,1
 c007d98:	88800007 	ldb	r2,0(r17)
 c007d9c:	103ffc1e 	bne	r2,zero,c007d90 <__alt_data_end+0xfc007d90>
 c007da0:	8d61c83a 	sub	r16,r17,r21
 c007da4:	80000e26 	beq	r16,zero,c007de0 <___vfprintf_internal_r+0x148>
 c007da8:	d8c02017 	ldw	r3,128(sp)
 c007dac:	d8801f17 	ldw	r2,124(sp)
 c007db0:	45400015 	stw	r21,0(r8)
 c007db4:	1c07883a 	add	r3,r3,r16
 c007db8:	10800044 	addi	r2,r2,1
 c007dbc:	d8c02015 	stw	r3,128(sp)
 c007dc0:	44000115 	stw	r16,4(r8)
 c007dc4:	d8801f15 	stw	r2,124(sp)
 c007dc8:	00c001c4 	movi	r3,7
 c007dcc:	1880a916 	blt	r3,r2,c008074 <___vfprintf_internal_r+0x3dc>
 c007dd0:	42000204 	addi	r8,r8,8
 c007dd4:	d9402f17 	ldw	r5,188(sp)
 c007dd8:	2c0b883a 	add	r5,r5,r16
 c007ddc:	d9402f15 	stw	r5,188(sp)
 c007de0:	88800007 	ldb	r2,0(r17)
 c007de4:	1000aa26 	beq	r2,zero,c008090 <___vfprintf_internal_r+0x3f8>
 c007de8:	8d400044 	addi	r21,r17,1
 c007dec:	8c400047 	ldb	r17,1(r17)
 c007df0:	0021883a 	mov	r16,zero
 c007df4:	00bfffc4 	movi	r2,-1
 c007df8:	0025883a 	mov	r18,zero
 c007dfc:	dc002905 	stb	r16,164(sp)
 c007e00:	d8002785 	stb	zero,158(sp)
 c007e04:	d8002b05 	stb	zero,172(sp)
 c007e08:	d8802a15 	stw	r2,168(sp)
 c007e0c:	d8003115 	stw	zero,196(sp)
 c007e10:	04c01604 	movi	r19,88
 c007e14:	05800244 	movi	r22,9
 c007e18:	9021883a 	mov	r16,r18
 c007e1c:	4039883a 	mov	fp,r8
 c007e20:	ad400044 	addi	r21,r21,1
 c007e24:	88bff804 	addi	r2,r17,-32
 c007e28:	98833236 	bltu	r19,r2,c008af4 <___vfprintf_internal_r+0xe5c>
 c007e2c:	100490ba 	slli	r2,r2,2
 c007e30:	00c30034 	movhi	r3,3072
 c007e34:	18df9104 	addi	r3,r3,32324
 c007e38:	10c5883a 	add	r2,r2,r3
 c007e3c:	10800017 	ldw	r2,0(r2)
 c007e40:	1000683a 	jmp	r2
 c007e44:	0c0089ec 	andhi	r16,at,551
 c007e48:	0c008af4 	orhi	r16,at,555
 c007e4c:	0c008af4 	orhi	r16,at,555
 c007e50:	0c008a0c 	andi	r16,at,552
 c007e54:	0c008af4 	orhi	r16,at,555
 c007e58:	0c008af4 	orhi	r16,at,555
 c007e5c:	0c008af4 	orhi	r16,at,555
 c007e60:	0c008af4 	orhi	r16,at,555
 c007e64:	0c008af4 	orhi	r16,at,555
 c007e68:	0c008af4 	orhi	r16,at,555
 c007e6c:	0c0080f4 	orhi	r16,at,515
 c007e70:	0c0088fc 	xorhi	r16,at,547
 c007e74:	0c008af4 	orhi	r16,at,555
 c007e78:	0c007fb8 	rdprs	r16,at,510
 c007e7c:	0c008118 	cmpnei	r16,at,516
 c007e80:	0c008af4 	orhi	r16,at,555
 c007e84:	0c008168 	cmpgeui	r16,at,517
 c007e88:	0c008174 	orhi	r16,at,517
 c007e8c:	0c008174 	orhi	r16,at,517
 c007e90:	0c008174 	orhi	r16,at,517
 c007e94:	0c008174 	orhi	r16,at,517
 c007e98:	0c008174 	orhi	r16,at,517
 c007e9c:	0c008174 	orhi	r16,at,517
 c007ea0:	0c008174 	orhi	r16,at,517
 c007ea4:	0c008174 	orhi	r16,at,517
 c007ea8:	0c008174 	orhi	r16,at,517
 c007eac:	0c008af4 	orhi	r16,at,555
 c007eb0:	0c008af4 	orhi	r16,at,555
 c007eb4:	0c008af4 	orhi	r16,at,555
 c007eb8:	0c008af4 	orhi	r16,at,555
 c007ebc:	0c008af4 	orhi	r16,at,555
 c007ec0:	0c008af4 	orhi	r16,at,555
 c007ec4:	0c008af4 	orhi	r16,at,555
 c007ec8:	0c008af4 	orhi	r16,at,555
 c007ecc:	0c008af4 	orhi	r16,at,555
 c007ed0:	0c008af4 	orhi	r16,at,555
 c007ed4:	0c0081b0 	cmpltui	r16,at,518
 c007ed8:	0c008278 	rdprs	r16,at,521
 c007edc:	0c008af4 	orhi	r16,at,555
 c007ee0:	0c008278 	rdprs	r16,at,521
 c007ee4:	0c008af4 	orhi	r16,at,555
 c007ee8:	0c008af4 	orhi	r16,at,555
 c007eec:	0c008af4 	orhi	r16,at,555
 c007ef0:	0c008af4 	orhi	r16,at,555
 c007ef4:	0c008324 	muli	r16,at,524
 c007ef8:	0c008af4 	orhi	r16,at,555
 c007efc:	0c008af4 	orhi	r16,at,555
 c007f00:	0c008330 	cmpltui	r16,at,524
 c007f04:	0c008af4 	orhi	r16,at,555
 c007f08:	0c008af4 	orhi	r16,at,555
 c007f0c:	0c008af4 	orhi	r16,at,555
 c007f10:	0c008af4 	orhi	r16,at,555
 c007f14:	0c008af4 	orhi	r16,at,555
 c007f18:	0c0087b4 	orhi	r16,at,542
 c007f1c:	0c008af4 	orhi	r16,at,555
 c007f20:	0c008af4 	orhi	r16,at,555
 c007f24:	0c008820 	cmpeqi	r16,at,544
 c007f28:	0c008af4 	orhi	r16,at,555
 c007f2c:	0c008af4 	orhi	r16,at,555
 c007f30:	0c008af4 	orhi	r16,at,555
 c007f34:	0c008af4 	orhi	r16,at,555
 c007f38:	0c008af4 	orhi	r16,at,555
 c007f3c:	0c008af4 	orhi	r16,at,555
 c007f40:	0c008af4 	orhi	r16,at,555
 c007f44:	0c008af4 	orhi	r16,at,555
 c007f48:	0c008af4 	orhi	r16,at,555
 c007f4c:	0c008af4 	orhi	r16,at,555
 c007f50:	0c008a98 	cmpnei	r16,at,554
 c007f54:	0c008a18 	cmpnei	r16,at,552
 c007f58:	0c008278 	rdprs	r16,at,521
 c007f5c:	0c008278 	rdprs	r16,at,521
 c007f60:	0c008278 	rdprs	r16,at,521
 c007f64:	0c008a38 	rdprs	r16,at,552
 c007f68:	0c008a18 	cmpnei	r16,at,552
 c007f6c:	0c008af4 	orhi	r16,at,555
 c007f70:	0c008af4 	orhi	r16,at,555
 c007f74:	0c008a44 	addi	r16,at,553
 c007f78:	0c008af4 	orhi	r16,at,555
 c007f7c:	0c008a58 	cmpnei	r16,at,553
 c007f80:	0c0088dc 	xori	r16,at,547
 c007f84:	0c007fc4 	addi	r16,at,511
 c007f88:	0c008914 	ori	r16,at,548
 c007f8c:	0c008af4 	orhi	r16,at,555
 c007f90:	0c008920 	cmpeqi	r16,at,548
 c007f94:	0c008af4 	orhi	r16,at,555
 c007f98:	0c008984 	addi	r16,at,550
 c007f9c:	0c008af4 	orhi	r16,at,555
 c007fa0:	0c008af4 	orhi	r16,at,555
 c007fa4:	0c0089a4 	muli	r16,at,550
 c007fa8:	d8c03117 	ldw	r3,196(sp)
 c007fac:	d8802e15 	stw	r2,184(sp)
 c007fb0:	00c7c83a 	sub	r3,zero,r3
 c007fb4:	d8c03115 	stw	r3,196(sp)
 c007fb8:	84000114 	ori	r16,r16,4
 c007fbc:	ac400007 	ldb	r17,0(r21)
 c007fc0:	003f9706 	br	c007e20 <__alt_data_end+0xfc007e20>
 c007fc4:	00800c04 	movi	r2,48
 c007fc8:	d8802705 	stb	r2,156(sp)
 c007fcc:	00801e04 	movi	r2,120
 c007fd0:	d8802745 	stb	r2,157(sp)
 c007fd4:	d9002a17 	ldw	r4,168(sp)
 c007fd8:	d8802e17 	ldw	r2,184(sp)
 c007fdc:	d8002785 	stb	zero,158(sp)
 c007fe0:	e011883a 	mov	r8,fp
 c007fe4:	10c00104 	addi	r3,r2,4
 c007fe8:	14c00017 	ldw	r19,0(r2)
 c007fec:	002d883a 	mov	r22,zero
 c007ff0:	80800094 	ori	r2,r16,2
 c007ff4:	2002ca16 	blt	r4,zero,c008b20 <___vfprintf_internal_r+0xe88>
 c007ff8:	00bfdfc4 	movi	r2,-129
 c007ffc:	80a4703a 	and	r18,r16,r2
 c008000:	d8c02e15 	stw	r3,184(sp)
 c008004:	94800094 	ori	r18,r18,2
 c008008:	9802b41e 	bne	r19,zero,c008adc <___vfprintf_internal_r+0xe44>
 c00800c:	014300b4 	movhi	r5,3074
 c008010:	29628604 	addi	r5,r5,-30184
 c008014:	d9403915 	stw	r5,228(sp)
 c008018:	04401e04 	movi	r17,120
 c00801c:	d8802a17 	ldw	r2,168(sp)
 c008020:	0039883a 	mov	fp,zero
 c008024:	1001fa26 	beq	r2,zero,c008810 <___vfprintf_internal_r+0xb78>
 c008028:	0027883a 	mov	r19,zero
 c00802c:	002d883a 	mov	r22,zero
 c008030:	00021906 	br	c008898 <___vfprintf_internal_r+0xc00>
 c008034:	d9002d17 	ldw	r4,180(sp)
 c008038:	b80b883a 	mov	r5,r23
 c00803c:	c00a04c0 	call	c00a04c <__swsetup_r>
 c008040:	1005dc1e 	bne	r2,zero,c0097b4 <___vfprintf_internal_r+0x1b1c>
 c008044:	b880030b 	ldhu	r2,12(r23)
 c008048:	00c00284 	movi	r3,10
 c00804c:	1080068c 	andi	r2,r2,26
 c008050:	10ff3a1e 	bne	r2,r3,c007d3c <__alt_data_end+0xfc007d3c>
 c008054:	b880038f 	ldh	r2,14(r23)
 c008058:	103f3816 	blt	r2,zero,c007d3c <__alt_data_end+0xfc007d3c>
 c00805c:	d9c02e17 	ldw	r7,184(sp)
 c008060:	d9002d17 	ldw	r4,180(sp)
 c008064:	a80d883a 	mov	r6,r21
 c008068:	b80b883a 	mov	r5,r23
 c00806c:	c009f900 	call	c009f90 <__sbprintf>
 c008070:	00001106 	br	c0080b8 <___vfprintf_internal_r+0x420>
 c008074:	d9002d17 	ldw	r4,180(sp)
 c008078:	d9801e04 	addi	r6,sp,120
 c00807c:	b80b883a 	mov	r5,r23
 c008080:	c01009c0 	call	c01009c <__sprint_r>
 c008084:	1000081e 	bne	r2,zero,c0080a8 <___vfprintf_internal_r+0x410>
 c008088:	da000404 	addi	r8,sp,16
 c00808c:	003f5106 	br	c007dd4 <__alt_data_end+0xfc007dd4>
 c008090:	d8802017 	ldw	r2,128(sp)
 c008094:	10000426 	beq	r2,zero,c0080a8 <___vfprintf_internal_r+0x410>
 c008098:	d9002d17 	ldw	r4,180(sp)
 c00809c:	d9801e04 	addi	r6,sp,120
 c0080a0:	b80b883a 	mov	r5,r23
 c0080a4:	c01009c0 	call	c01009c <__sprint_r>
 c0080a8:	b880030b 	ldhu	r2,12(r23)
 c0080ac:	1080100c 	andi	r2,r2,64
 c0080b0:	1005c01e 	bne	r2,zero,c0097b4 <___vfprintf_internal_r+0x1b1c>
 c0080b4:	d8802f17 	ldw	r2,188(sp)
 c0080b8:	dfc04717 	ldw	ra,284(sp)
 c0080bc:	df004617 	ldw	fp,280(sp)
 c0080c0:	ddc04517 	ldw	r23,276(sp)
 c0080c4:	dd804417 	ldw	r22,272(sp)
 c0080c8:	dd404317 	ldw	r21,268(sp)
 c0080cc:	dd004217 	ldw	r20,264(sp)
 c0080d0:	dcc04117 	ldw	r19,260(sp)
 c0080d4:	dc804017 	ldw	r18,256(sp)
 c0080d8:	dc403f17 	ldw	r17,252(sp)
 c0080dc:	dc003e17 	ldw	r16,248(sp)
 c0080e0:	dec04804 	addi	sp,sp,288
 c0080e4:	f800283a 	ret
 c0080e8:	d9002d17 	ldw	r4,180(sp)
 c0080ec:	c00c0580 	call	c00c058 <__sinit>
 c0080f0:	003f0206 	br	c007cfc <__alt_data_end+0xfc007cfc>
 c0080f4:	d9002e17 	ldw	r4,184(sp)
 c0080f8:	d9402e17 	ldw	r5,184(sp)
 c0080fc:	21000017 	ldw	r4,0(r4)
 c008100:	28800104 	addi	r2,r5,4
 c008104:	d9003115 	stw	r4,196(sp)
 c008108:	203fa716 	blt	r4,zero,c007fa8 <__alt_data_end+0xfc007fa8>
 c00810c:	d8802e15 	stw	r2,184(sp)
 c008110:	ac400007 	ldb	r17,0(r21)
 c008114:	003f4206 	br	c007e20 <__alt_data_end+0xfc007e20>
 c008118:	ac400007 	ldb	r17,0(r21)
 c00811c:	01000a84 	movi	r4,42
 c008120:	a8c00044 	addi	r3,r21,1
 c008124:	89075826 	beq	r17,r4,c009e88 <___vfprintf_internal_r+0x21f0>
 c008128:	8cbff404 	addi	r18,r17,-48
 c00812c:	b486ae36 	bltu	r22,r18,c009be8 <___vfprintf_internal_r+0x1f50>
 c008130:	0009883a 	mov	r4,zero
 c008134:	1823883a 	mov	r17,r3
 c008138:	01400284 	movi	r5,10
 c00813c:	c004c7c0 	call	c004c7c <__mulsi3>
 c008140:	88c00007 	ldb	r3,0(r17)
 c008144:	1489883a 	add	r4,r2,r18
 c008148:	8d400044 	addi	r21,r17,1
 c00814c:	1cbff404 	addi	r18,r3,-48
 c008150:	a823883a 	mov	r17,r21
 c008154:	b4bff82e 	bgeu	r22,r18,c008138 <__alt_data_end+0xfc008138>
 c008158:	1823883a 	mov	r17,r3
 c00815c:	2005f616 	blt	r4,zero,c009938 <___vfprintf_internal_r+0x1ca0>
 c008160:	d9002a15 	stw	r4,168(sp)
 c008164:	003f2f06 	br	c007e24 <__alt_data_end+0xfc007e24>
 c008168:	84002014 	ori	r16,r16,128
 c00816c:	ac400007 	ldb	r17,0(r21)
 c008170:	003f2b06 	br	c007e20 <__alt_data_end+0xfc007e20>
 c008174:	8cbff404 	addi	r18,r17,-48
 c008178:	d8003115 	stw	zero,196(sp)
 c00817c:	0009883a 	mov	r4,zero
 c008180:	a823883a 	mov	r17,r21
 c008184:	01400284 	movi	r5,10
 c008188:	c004c7c0 	call	c004c7c <__mulsi3>
 c00818c:	88c00007 	ldb	r3,0(r17)
 c008190:	9089883a 	add	r4,r18,r2
 c008194:	ad400044 	addi	r21,r21,1
 c008198:	1cbff404 	addi	r18,r3,-48
 c00819c:	a823883a 	mov	r17,r21
 c0081a0:	b4bff82e 	bgeu	r22,r18,c008184 <__alt_data_end+0xfc008184>
 c0081a4:	1823883a 	mov	r17,r3
 c0081a8:	d9003115 	stw	r4,196(sp)
 c0081ac:	003f1d06 	br	c007e24 <__alt_data_end+0xfc007e24>
 c0081b0:	8025883a 	mov	r18,r16
 c0081b4:	dc002903 	ldbu	r16,164(sp)
 c0081b8:	e011883a 	mov	r8,fp
 c0081bc:	84003fcc 	andi	r16,r16,255
 c0081c0:	8007531e 	bne	r16,zero,c009f10 <___vfprintf_internal_r+0x2278>
 c0081c4:	94800414 	ori	r18,r18,16
 c0081c8:	9080080c 	andi	r2,r18,32
 c0081cc:	1003a326 	beq	r2,zero,c00905c <___vfprintf_internal_r+0x13c4>
 c0081d0:	d9002e17 	ldw	r4,184(sp)
 c0081d4:	20800117 	ldw	r2,4(r4)
 c0081d8:	24c00017 	ldw	r19,0(r4)
 c0081dc:	21000204 	addi	r4,r4,8
 c0081e0:	d9002e15 	stw	r4,184(sp)
 c0081e4:	102d883a 	mov	r22,r2
 c0081e8:	10047316 	blt	r2,zero,c0093b8 <___vfprintf_internal_r+0x1720>
 c0081ec:	d9002a17 	ldw	r4,168(sp)
 c0081f0:	df002783 	ldbu	fp,158(sp)
 c0081f4:	2003e416 	blt	r4,zero,c009188 <___vfprintf_internal_r+0x14f0>
 c0081f8:	00ffdfc4 	movi	r3,-129
 c0081fc:	9d84b03a 	or	r2,r19,r22
 c008200:	90e4703a 	and	r18,r18,r3
 c008204:	10018026 	beq	r2,zero,c008808 <___vfprintf_internal_r+0xb70>
 c008208:	b003ab26 	beq	r22,zero,c0090b8 <___vfprintf_internal_r+0x1420>
 c00820c:	dc402915 	stw	r17,164(sp)
 c008210:	dc001e04 	addi	r16,sp,120
 c008214:	b023883a 	mov	r17,r22
 c008218:	402d883a 	mov	r22,r8
 c00821c:	9809883a 	mov	r4,r19
 c008220:	880b883a 	mov	r5,r17
 c008224:	01800284 	movi	r6,10
 c008228:	000f883a 	mov	r7,zero
 c00822c:	c0126ec0 	call	c0126ec <__umoddi3>
 c008230:	10800c04 	addi	r2,r2,48
 c008234:	843fffc4 	addi	r16,r16,-1
 c008238:	9809883a 	mov	r4,r19
 c00823c:	880b883a 	mov	r5,r17
 c008240:	80800005 	stb	r2,0(r16)
 c008244:	01800284 	movi	r6,10
 c008248:	000f883a 	mov	r7,zero
 c00824c:	c0120f00 	call	c0120f0 <__udivdi3>
 c008250:	1027883a 	mov	r19,r2
 c008254:	10c4b03a 	or	r2,r2,r3
 c008258:	1823883a 	mov	r17,r3
 c00825c:	103fef1e 	bne	r2,zero,c00821c <__alt_data_end+0xfc00821c>
 c008260:	d8c02817 	ldw	r3,160(sp)
 c008264:	dc402917 	ldw	r17,164(sp)
 c008268:	b011883a 	mov	r8,r22
 c00826c:	1c07c83a 	sub	r3,r3,r16
 c008270:	d8c02b15 	stw	r3,172(sp)
 c008274:	00005f06 	br	c0083f4 <___vfprintf_internal_r+0x75c>
 c008278:	8025883a 	mov	r18,r16
 c00827c:	dc002903 	ldbu	r16,164(sp)
 c008280:	e011883a 	mov	r8,fp
 c008284:	84003fcc 	andi	r16,r16,255
 c008288:	80071e1e 	bne	r16,zero,c009f04 <___vfprintf_internal_r+0x226c>
 c00828c:	9080020c 	andi	r2,r18,8
 c008290:	1004af26 	beq	r2,zero,c009550 <___vfprintf_internal_r+0x18b8>
 c008294:	d9002e17 	ldw	r4,184(sp)
 c008298:	d9402e17 	ldw	r5,184(sp)
 c00829c:	d8802e17 	ldw	r2,184(sp)
 c0082a0:	21000017 	ldw	r4,0(r4)
 c0082a4:	29400117 	ldw	r5,4(r5)
 c0082a8:	10800204 	addi	r2,r2,8
 c0082ac:	d9003615 	stw	r4,216(sp)
 c0082b0:	d9403815 	stw	r5,224(sp)
 c0082b4:	d8802e15 	stw	r2,184(sp)
 c0082b8:	d9003617 	ldw	r4,216(sp)
 c0082bc:	d9403817 	ldw	r5,224(sp)
 c0082c0:	da003d15 	stw	r8,244(sp)
 c0082c4:	04000044 	movi	r16,1
 c0082c8:	c00e7a40 	call	c00e7a4 <__fpclassifyd>
 c0082cc:	da003d17 	ldw	r8,244(sp)
 c0082d0:	1404441e 	bne	r2,r16,c0093e4 <___vfprintf_internal_r+0x174c>
 c0082d4:	d9003617 	ldw	r4,216(sp)
 c0082d8:	d9403817 	ldw	r5,224(sp)
 c0082dc:	000d883a 	mov	r6,zero
 c0082e0:	000f883a 	mov	r7,zero
 c0082e4:	c0140900 	call	c014090 <__ledf2>
 c0082e8:	da003d17 	ldw	r8,244(sp)
 c0082ec:	1005e316 	blt	r2,zero,c009a7c <___vfprintf_internal_r+0x1de4>
 c0082f0:	df002783 	ldbu	fp,158(sp)
 c0082f4:	008011c4 	movi	r2,71
 c0082f8:	1445580e 	bge	r2,r17,c00985c <___vfprintf_internal_r+0x1bc4>
 c0082fc:	040300b4 	movhi	r16,3074
 c008300:	84227e04 	addi	r16,r16,-30216
 c008304:	00c000c4 	movi	r3,3
 c008308:	00bfdfc4 	movi	r2,-129
 c00830c:	d8c02915 	stw	r3,164(sp)
 c008310:	90a4703a 	and	r18,r18,r2
 c008314:	d8c02b15 	stw	r3,172(sp)
 c008318:	d8002a15 	stw	zero,168(sp)
 c00831c:	d8003215 	stw	zero,200(sp)
 c008320:	00003a06 	br	c00840c <___vfprintf_internal_r+0x774>
 c008324:	84000214 	ori	r16,r16,8
 c008328:	ac400007 	ldb	r17,0(r21)
 c00832c:	003ebc06 	br	c007e20 <__alt_data_end+0xfc007e20>
 c008330:	8025883a 	mov	r18,r16
 c008334:	dc002903 	ldbu	r16,164(sp)
 c008338:	e011883a 	mov	r8,fp
 c00833c:	84003fcc 	andi	r16,r16,255
 c008340:	8007001e 	bne	r16,zero,c009f44 <___vfprintf_internal_r+0x22ac>
 c008344:	94800414 	ori	r18,r18,16
 c008348:	9080080c 	andi	r2,r18,32
 c00834c:	1002fa26 	beq	r2,zero,c008f38 <___vfprintf_internal_r+0x12a0>
 c008350:	d9002e17 	ldw	r4,184(sp)
 c008354:	d9402a17 	ldw	r5,168(sp)
 c008358:	d8002785 	stb	zero,158(sp)
 c00835c:	20800204 	addi	r2,r4,8
 c008360:	24c00017 	ldw	r19,0(r4)
 c008364:	25800117 	ldw	r22,4(r4)
 c008368:	2804b116 	blt	r5,zero,c009630 <___vfprintf_internal_r+0x1998>
 c00836c:	013fdfc4 	movi	r4,-129
 c008370:	9d86b03a 	or	r3,r19,r22
 c008374:	d8802e15 	stw	r2,184(sp)
 c008378:	9124703a 	and	r18,r18,r4
 c00837c:	1802fb1e 	bne	r3,zero,c008f6c <___vfprintf_internal_r+0x12d4>
 c008380:	d8c02a17 	ldw	r3,168(sp)
 c008384:	0039883a 	mov	fp,zero
 c008388:	1805e526 	beq	r3,zero,c009b20 <___vfprintf_internal_r+0x1e88>
 c00838c:	0027883a 	mov	r19,zero
 c008390:	002d883a 	mov	r22,zero
 c008394:	dc001e04 	addi	r16,sp,120
 c008398:	9806d0fa 	srli	r3,r19,3
 c00839c:	b008977a 	slli	r4,r22,29
 c0083a0:	b02cd0fa 	srli	r22,r22,3
 c0083a4:	9cc001cc 	andi	r19,r19,7
 c0083a8:	98800c04 	addi	r2,r19,48
 c0083ac:	843fffc4 	addi	r16,r16,-1
 c0083b0:	20e6b03a 	or	r19,r4,r3
 c0083b4:	80800005 	stb	r2,0(r16)
 c0083b8:	9d86b03a 	or	r3,r19,r22
 c0083bc:	183ff61e 	bne	r3,zero,c008398 <__alt_data_end+0xfc008398>
 c0083c0:	90c0004c 	andi	r3,r18,1
 c0083c4:	18014126 	beq	r3,zero,c0088cc <___vfprintf_internal_r+0xc34>
 c0083c8:	10803fcc 	andi	r2,r2,255
 c0083cc:	1080201c 	xori	r2,r2,128
 c0083d0:	10bfe004 	addi	r2,r2,-128
 c0083d4:	00c00c04 	movi	r3,48
 c0083d8:	10c13c26 	beq	r2,r3,c0088cc <___vfprintf_internal_r+0xc34>
 c0083dc:	80ffffc5 	stb	r3,-1(r16)
 c0083e0:	d8c02817 	ldw	r3,160(sp)
 c0083e4:	80bfffc4 	addi	r2,r16,-1
 c0083e8:	1021883a 	mov	r16,r2
 c0083ec:	1887c83a 	sub	r3,r3,r2
 c0083f0:	d8c02b15 	stw	r3,172(sp)
 c0083f4:	d8802b17 	ldw	r2,172(sp)
 c0083f8:	d9002a17 	ldw	r4,168(sp)
 c0083fc:	1100010e 	bge	r2,r4,c008404 <___vfprintf_internal_r+0x76c>
 c008400:	2005883a 	mov	r2,r4
 c008404:	d8802915 	stw	r2,164(sp)
 c008408:	d8003215 	stw	zero,200(sp)
 c00840c:	e7003fcc 	andi	fp,fp,255
 c008410:	e700201c 	xori	fp,fp,128
 c008414:	e73fe004 	addi	fp,fp,-128
 c008418:	e0000326 	beq	fp,zero,c008428 <___vfprintf_internal_r+0x790>
 c00841c:	d8c02917 	ldw	r3,164(sp)
 c008420:	18c00044 	addi	r3,r3,1
 c008424:	d8c02915 	stw	r3,164(sp)
 c008428:	90c0008c 	andi	r3,r18,2
 c00842c:	d8c02c15 	stw	r3,176(sp)
 c008430:	18000326 	beq	r3,zero,c008440 <___vfprintf_internal_r+0x7a8>
 c008434:	d8c02917 	ldw	r3,164(sp)
 c008438:	18c00084 	addi	r3,r3,2
 c00843c:	d8c02915 	stw	r3,164(sp)
 c008440:	90c0210c 	andi	r3,r18,132
 c008444:	d8c03015 	stw	r3,192(sp)
 c008448:	1801c51e 	bne	r3,zero,c008b60 <___vfprintf_internal_r+0xec8>
 c00844c:	d9003117 	ldw	r4,196(sp)
 c008450:	d8c02917 	ldw	r3,164(sp)
 c008454:	20e7c83a 	sub	r19,r4,r3
 c008458:	04c1c10e 	bge	zero,r19,c008b60 <___vfprintf_internal_r+0xec8>
 c00845c:	02400404 	movi	r9,16
 c008460:	d8c02017 	ldw	r3,128(sp)
 c008464:	d8801f17 	ldw	r2,124(sp)
 c008468:	4cc52f0e 	bge	r9,r19,c009928 <___vfprintf_internal_r+0x1c90>
 c00846c:	014300b4 	movhi	r5,3074
 c008470:	29629984 	addi	r5,r5,-30106
 c008474:	dc403b15 	stw	r17,236(sp)
 c008478:	d9403515 	stw	r5,212(sp)
 c00847c:	9823883a 	mov	r17,r19
 c008480:	482d883a 	mov	r22,r9
 c008484:	9027883a 	mov	r19,r18
 c008488:	070001c4 	movi	fp,7
 c00848c:	8025883a 	mov	r18,r16
 c008490:	dc002d17 	ldw	r16,180(sp)
 c008494:	00000306 	br	c0084a4 <___vfprintf_internal_r+0x80c>
 c008498:	8c7ffc04 	addi	r17,r17,-16
 c00849c:	42000204 	addi	r8,r8,8
 c0084a0:	b440130e 	bge	r22,r17,c0084f0 <___vfprintf_internal_r+0x858>
 c0084a4:	010300b4 	movhi	r4,3074
 c0084a8:	18c00404 	addi	r3,r3,16
 c0084ac:	10800044 	addi	r2,r2,1
 c0084b0:	21229984 	addi	r4,r4,-30106
 c0084b4:	41000015 	stw	r4,0(r8)
 c0084b8:	45800115 	stw	r22,4(r8)
 c0084bc:	d8c02015 	stw	r3,128(sp)
 c0084c0:	d8801f15 	stw	r2,124(sp)
 c0084c4:	e0bff40e 	bge	fp,r2,c008498 <__alt_data_end+0xfc008498>
 c0084c8:	d9801e04 	addi	r6,sp,120
 c0084cc:	b80b883a 	mov	r5,r23
 c0084d0:	8009883a 	mov	r4,r16
 c0084d4:	c01009c0 	call	c01009c <__sprint_r>
 c0084d8:	103ef31e 	bne	r2,zero,c0080a8 <__alt_data_end+0xfc0080a8>
 c0084dc:	8c7ffc04 	addi	r17,r17,-16
 c0084e0:	d8c02017 	ldw	r3,128(sp)
 c0084e4:	d8801f17 	ldw	r2,124(sp)
 c0084e8:	da000404 	addi	r8,sp,16
 c0084ec:	b47fed16 	blt	r22,r17,c0084a4 <__alt_data_end+0xfc0084a4>
 c0084f0:	9021883a 	mov	r16,r18
 c0084f4:	9825883a 	mov	r18,r19
 c0084f8:	8827883a 	mov	r19,r17
 c0084fc:	dc403b17 	ldw	r17,236(sp)
 c008500:	d9403517 	ldw	r5,212(sp)
 c008504:	98c7883a 	add	r3,r19,r3
 c008508:	10800044 	addi	r2,r2,1
 c00850c:	41400015 	stw	r5,0(r8)
 c008510:	44c00115 	stw	r19,4(r8)
 c008514:	d8c02015 	stw	r3,128(sp)
 c008518:	d8801f15 	stw	r2,124(sp)
 c00851c:	010001c4 	movi	r4,7
 c008520:	2082c516 	blt	r4,r2,c009038 <___vfprintf_internal_r+0x13a0>
 c008524:	df002787 	ldb	fp,158(sp)
 c008528:	42000204 	addi	r8,r8,8
 c00852c:	e0000c26 	beq	fp,zero,c008560 <___vfprintf_internal_r+0x8c8>
 c008530:	d8801f17 	ldw	r2,124(sp)
 c008534:	d9002784 	addi	r4,sp,158
 c008538:	18c00044 	addi	r3,r3,1
 c00853c:	10800044 	addi	r2,r2,1
 c008540:	41000015 	stw	r4,0(r8)
 c008544:	01000044 	movi	r4,1
 c008548:	41000115 	stw	r4,4(r8)
 c00854c:	d8c02015 	stw	r3,128(sp)
 c008550:	d8801f15 	stw	r2,124(sp)
 c008554:	010001c4 	movi	r4,7
 c008558:	20825e16 	blt	r4,r2,c008ed4 <___vfprintf_internal_r+0x123c>
 c00855c:	42000204 	addi	r8,r8,8
 c008560:	d8802c17 	ldw	r2,176(sp)
 c008564:	10000c26 	beq	r2,zero,c008598 <___vfprintf_internal_r+0x900>
 c008568:	d8801f17 	ldw	r2,124(sp)
 c00856c:	d9002704 	addi	r4,sp,156
 c008570:	18c00084 	addi	r3,r3,2
 c008574:	10800044 	addi	r2,r2,1
 c008578:	41000015 	stw	r4,0(r8)
 c00857c:	01000084 	movi	r4,2
 c008580:	41000115 	stw	r4,4(r8)
 c008584:	d8c02015 	stw	r3,128(sp)
 c008588:	d8801f15 	stw	r2,124(sp)
 c00858c:	010001c4 	movi	r4,7
 c008590:	20825816 	blt	r4,r2,c008ef4 <___vfprintf_internal_r+0x125c>
 c008594:	42000204 	addi	r8,r8,8
 c008598:	d9003017 	ldw	r4,192(sp)
 c00859c:	00802004 	movi	r2,128
 c0085a0:	2081bb26 	beq	r4,r2,c008c90 <___vfprintf_internal_r+0xff8>
 c0085a4:	d9402a17 	ldw	r5,168(sp)
 c0085a8:	d8802b17 	ldw	r2,172(sp)
 c0085ac:	28adc83a 	sub	r22,r5,r2
 c0085b0:	0580310e 	bge	zero,r22,c008678 <___vfprintf_internal_r+0x9e0>
 c0085b4:	07000404 	movi	fp,16
 c0085b8:	d8801f17 	ldw	r2,124(sp)
 c0085bc:	e584360e 	bge	fp,r22,c009698 <___vfprintf_internal_r+0x1a00>
 c0085c0:	014300b4 	movhi	r5,3074
 c0085c4:	29629584 	addi	r5,r5,-30122
 c0085c8:	dc402a15 	stw	r17,168(sp)
 c0085cc:	d9402c15 	stw	r5,176(sp)
 c0085d0:	b023883a 	mov	r17,r22
 c0085d4:	04c001c4 	movi	r19,7
 c0085d8:	a82d883a 	mov	r22,r21
 c0085dc:	902b883a 	mov	r21,r18
 c0085e0:	8025883a 	mov	r18,r16
 c0085e4:	dc002d17 	ldw	r16,180(sp)
 c0085e8:	00000306 	br	c0085f8 <___vfprintf_internal_r+0x960>
 c0085ec:	8c7ffc04 	addi	r17,r17,-16
 c0085f0:	42000204 	addi	r8,r8,8
 c0085f4:	e440110e 	bge	fp,r17,c00863c <___vfprintf_internal_r+0x9a4>
 c0085f8:	18c00404 	addi	r3,r3,16
 c0085fc:	10800044 	addi	r2,r2,1
 c008600:	45000015 	stw	r20,0(r8)
 c008604:	47000115 	stw	fp,4(r8)
 c008608:	d8c02015 	stw	r3,128(sp)
 c00860c:	d8801f15 	stw	r2,124(sp)
 c008610:	98bff60e 	bge	r19,r2,c0085ec <__alt_data_end+0xfc0085ec>
 c008614:	d9801e04 	addi	r6,sp,120
 c008618:	b80b883a 	mov	r5,r23
 c00861c:	8009883a 	mov	r4,r16
 c008620:	c01009c0 	call	c01009c <__sprint_r>
 c008624:	103ea01e 	bne	r2,zero,c0080a8 <__alt_data_end+0xfc0080a8>
 c008628:	8c7ffc04 	addi	r17,r17,-16
 c00862c:	d8c02017 	ldw	r3,128(sp)
 c008630:	d8801f17 	ldw	r2,124(sp)
 c008634:	da000404 	addi	r8,sp,16
 c008638:	e47fef16 	blt	fp,r17,c0085f8 <__alt_data_end+0xfc0085f8>
 c00863c:	9021883a 	mov	r16,r18
 c008640:	a825883a 	mov	r18,r21
 c008644:	b02b883a 	mov	r21,r22
 c008648:	882d883a 	mov	r22,r17
 c00864c:	dc402a17 	ldw	r17,168(sp)
 c008650:	d9002c17 	ldw	r4,176(sp)
 c008654:	1d87883a 	add	r3,r3,r22
 c008658:	10800044 	addi	r2,r2,1
 c00865c:	41000015 	stw	r4,0(r8)
 c008660:	45800115 	stw	r22,4(r8)
 c008664:	d8c02015 	stw	r3,128(sp)
 c008668:	d8801f15 	stw	r2,124(sp)
 c00866c:	010001c4 	movi	r4,7
 c008670:	20821016 	blt	r4,r2,c008eb4 <___vfprintf_internal_r+0x121c>
 c008674:	42000204 	addi	r8,r8,8
 c008678:	9080400c 	andi	r2,r18,256
 c00867c:	10013a1e 	bne	r2,zero,c008b68 <___vfprintf_internal_r+0xed0>
 c008680:	d9402b17 	ldw	r5,172(sp)
 c008684:	d8801f17 	ldw	r2,124(sp)
 c008688:	44000015 	stw	r16,0(r8)
 c00868c:	1947883a 	add	r3,r3,r5
 c008690:	10800044 	addi	r2,r2,1
 c008694:	41400115 	stw	r5,4(r8)
 c008698:	d8c02015 	stw	r3,128(sp)
 c00869c:	d8801f15 	stw	r2,124(sp)
 c0086a0:	010001c4 	movi	r4,7
 c0086a4:	2081f516 	blt	r4,r2,c008e7c <___vfprintf_internal_r+0x11e4>
 c0086a8:	42000204 	addi	r8,r8,8
 c0086ac:	9480010c 	andi	r18,r18,4
 c0086b0:	90003226 	beq	r18,zero,c00877c <___vfprintf_internal_r+0xae4>
 c0086b4:	d9403117 	ldw	r5,196(sp)
 c0086b8:	d8802917 	ldw	r2,164(sp)
 c0086bc:	28a1c83a 	sub	r16,r5,r2
 c0086c0:	04002e0e 	bge	zero,r16,c00877c <___vfprintf_internal_r+0xae4>
 c0086c4:	04400404 	movi	r17,16
 c0086c8:	d8801f17 	ldw	r2,124(sp)
 c0086cc:	8c04c40e 	bge	r17,r16,c0099e0 <___vfprintf_internal_r+0x1d48>
 c0086d0:	014300b4 	movhi	r5,3074
 c0086d4:	29629984 	addi	r5,r5,-30106
 c0086d8:	d9403515 	stw	r5,212(sp)
 c0086dc:	048001c4 	movi	r18,7
 c0086e0:	dcc02d17 	ldw	r19,180(sp)
 c0086e4:	00000306 	br	c0086f4 <___vfprintf_internal_r+0xa5c>
 c0086e8:	843ffc04 	addi	r16,r16,-16
 c0086ec:	42000204 	addi	r8,r8,8
 c0086f0:	8c00130e 	bge	r17,r16,c008740 <___vfprintf_internal_r+0xaa8>
 c0086f4:	010300b4 	movhi	r4,3074
 c0086f8:	18c00404 	addi	r3,r3,16
 c0086fc:	10800044 	addi	r2,r2,1
 c008700:	21229984 	addi	r4,r4,-30106
 c008704:	41000015 	stw	r4,0(r8)
 c008708:	44400115 	stw	r17,4(r8)
 c00870c:	d8c02015 	stw	r3,128(sp)
 c008710:	d8801f15 	stw	r2,124(sp)
 c008714:	90bff40e 	bge	r18,r2,c0086e8 <__alt_data_end+0xfc0086e8>
 c008718:	d9801e04 	addi	r6,sp,120
 c00871c:	b80b883a 	mov	r5,r23
 c008720:	9809883a 	mov	r4,r19
 c008724:	c01009c0 	call	c01009c <__sprint_r>
 c008728:	103e5f1e 	bne	r2,zero,c0080a8 <__alt_data_end+0xfc0080a8>
 c00872c:	843ffc04 	addi	r16,r16,-16
 c008730:	d8c02017 	ldw	r3,128(sp)
 c008734:	d8801f17 	ldw	r2,124(sp)
 c008738:	da000404 	addi	r8,sp,16
 c00873c:	8c3fed16 	blt	r17,r16,c0086f4 <__alt_data_end+0xfc0086f4>
 c008740:	d9403517 	ldw	r5,212(sp)
 c008744:	1c07883a 	add	r3,r3,r16
 c008748:	10800044 	addi	r2,r2,1
 c00874c:	41400015 	stw	r5,0(r8)
 c008750:	44000115 	stw	r16,4(r8)
 c008754:	d8c02015 	stw	r3,128(sp)
 c008758:	d8801f15 	stw	r2,124(sp)
 c00875c:	010001c4 	movi	r4,7
 c008760:	2080060e 	bge	r4,r2,c00877c <___vfprintf_internal_r+0xae4>
 c008764:	d9002d17 	ldw	r4,180(sp)
 c008768:	d9801e04 	addi	r6,sp,120
 c00876c:	b80b883a 	mov	r5,r23
 c008770:	c01009c0 	call	c01009c <__sprint_r>
 c008774:	103e4c1e 	bne	r2,zero,c0080a8 <__alt_data_end+0xfc0080a8>
 c008778:	d8c02017 	ldw	r3,128(sp)
 c00877c:	d8803117 	ldw	r2,196(sp)
 c008780:	d9002917 	ldw	r4,164(sp)
 c008784:	1100010e 	bge	r2,r4,c00878c <___vfprintf_internal_r+0xaf4>
 c008788:	2005883a 	mov	r2,r4
 c00878c:	d9402f17 	ldw	r5,188(sp)
 c008790:	288b883a 	add	r5,r5,r2
 c008794:	d9402f15 	stw	r5,188(sp)
 c008798:	1801c01e 	bne	r3,zero,c008e9c <___vfprintf_internal_r+0x1204>
 c00879c:	a8800007 	ldb	r2,0(r21)
 c0087a0:	d8001f15 	stw	zero,124(sp)
 c0087a4:	da000404 	addi	r8,sp,16
 c0087a8:	103d751e 	bne	r2,zero,c007d80 <__alt_data_end+0xfc007d80>
 c0087ac:	a823883a 	mov	r17,r21
 c0087b0:	003d8b06 	br	c007de0 <__alt_data_end+0xfc007de0>
 c0087b4:	8025883a 	mov	r18,r16
 c0087b8:	dc002903 	ldbu	r16,164(sp)
 c0087bc:	e011883a 	mov	r8,fp
 c0087c0:	84003fcc 	andi	r16,r16,255
 c0087c4:	8005e51e 	bne	r16,zero,c009f5c <___vfprintf_internal_r+0x22c4>
 c0087c8:	94800414 	ori	r18,r18,16
 c0087cc:	9080080c 	andi	r2,r18,32
 c0087d0:	10022b26 	beq	r2,zero,c009080 <___vfprintf_internal_r+0x13e8>
 c0087d4:	d9002e17 	ldw	r4,184(sp)
 c0087d8:	d9402a17 	ldw	r5,168(sp)
 c0087dc:	d8002785 	stb	zero,158(sp)
 c0087e0:	20c00204 	addi	r3,r4,8
 c0087e4:	24c00017 	ldw	r19,0(r4)
 c0087e8:	25800117 	ldw	r22,4(r4)
 c0087ec:	28042e16 	blt	r5,zero,c0098a8 <___vfprintf_internal_r+0x1c10>
 c0087f0:	013fdfc4 	movi	r4,-129
 c0087f4:	9d84b03a 	or	r2,r19,r22
 c0087f8:	d8c02e15 	stw	r3,184(sp)
 c0087fc:	9124703a 	and	r18,r18,r4
 c008800:	0039883a 	mov	fp,zero
 c008804:	103e801e 	bne	r2,zero,c008208 <__alt_data_end+0xfc008208>
 c008808:	d9002a17 	ldw	r4,168(sp)
 c00880c:	2002e01e 	bne	r4,zero,c009390 <___vfprintf_internal_r+0x16f8>
 c008810:	d8002a15 	stw	zero,168(sp)
 c008814:	d8002b15 	stw	zero,172(sp)
 c008818:	dc001e04 	addi	r16,sp,120
 c00881c:	003ef506 	br	c0083f4 <__alt_data_end+0xfc0083f4>
 c008820:	8025883a 	mov	r18,r16
 c008824:	dc002903 	ldbu	r16,164(sp)
 c008828:	e011883a 	mov	r8,fp
 c00882c:	84003fcc 	andi	r16,r16,255
 c008830:	8005ba1e 	bne	r16,zero,c009f1c <___vfprintf_internal_r+0x2284>
 c008834:	010300b4 	movhi	r4,3074
 c008838:	21228104 	addi	r4,r4,-30204
 c00883c:	d9003915 	stw	r4,228(sp)
 c008840:	9080080c 	andi	r2,r18,32
 c008844:	10006126 	beq	r2,zero,c0089cc <___vfprintf_internal_r+0xd34>
 c008848:	d9402e17 	ldw	r5,184(sp)
 c00884c:	2cc00017 	ldw	r19,0(r5)
 c008850:	2d800117 	ldw	r22,4(r5)
 c008854:	29400204 	addi	r5,r5,8
 c008858:	d9402e15 	stw	r5,184(sp)
 c00885c:	9080004c 	andi	r2,r18,1
 c008860:	1001ac26 	beq	r2,zero,c008f14 <___vfprintf_internal_r+0x127c>
 c008864:	9d84b03a 	or	r2,r19,r22
 c008868:	10038526 	beq	r2,zero,c009680 <___vfprintf_internal_r+0x19e8>
 c00886c:	d8c02a17 	ldw	r3,168(sp)
 c008870:	00800c04 	movi	r2,48
 c008874:	d8802705 	stb	r2,156(sp)
 c008878:	dc402745 	stb	r17,157(sp)
 c00887c:	d8002785 	stb	zero,158(sp)
 c008880:	90800094 	ori	r2,r18,2
 c008884:	18047916 	blt	r3,zero,c009a6c <___vfprintf_internal_r+0x1dd4>
 c008888:	00bfdfc4 	movi	r2,-129
 c00888c:	90a4703a 	and	r18,r18,r2
 c008890:	94800094 	ori	r18,r18,2
 c008894:	0039883a 	mov	fp,zero
 c008898:	d9003917 	ldw	r4,228(sp)
 c00889c:	dc001e04 	addi	r16,sp,120
 c0088a0:	988003cc 	andi	r2,r19,15
 c0088a4:	b006973a 	slli	r3,r22,28
 c0088a8:	2085883a 	add	r2,r4,r2
 c0088ac:	9826d13a 	srli	r19,r19,4
 c0088b0:	10800003 	ldbu	r2,0(r2)
 c0088b4:	b02cd13a 	srli	r22,r22,4
 c0088b8:	843fffc4 	addi	r16,r16,-1
 c0088bc:	1ce6b03a 	or	r19,r3,r19
 c0088c0:	80800005 	stb	r2,0(r16)
 c0088c4:	9d84b03a 	or	r2,r19,r22
 c0088c8:	103ff51e 	bne	r2,zero,c0088a0 <__alt_data_end+0xfc0088a0>
 c0088cc:	d8c02817 	ldw	r3,160(sp)
 c0088d0:	1c07c83a 	sub	r3,r3,r16
 c0088d4:	d8c02b15 	stw	r3,172(sp)
 c0088d8:	003ec606 	br	c0083f4 <__alt_data_end+0xfc0083f4>
 c0088dc:	8025883a 	mov	r18,r16
 c0088e0:	dc002903 	ldbu	r16,164(sp)
 c0088e4:	e011883a 	mov	r8,fp
 c0088e8:	84003fcc 	andi	r16,r16,255
 c0088ec:	803e9626 	beq	r16,zero,c008348 <__alt_data_end+0xfc008348>
 c0088f0:	d8c02b03 	ldbu	r3,172(sp)
 c0088f4:	d8c02785 	stb	r3,158(sp)
 c0088f8:	003e9306 	br	c008348 <__alt_data_end+0xfc008348>
 c0088fc:	00c00044 	movi	r3,1
 c008900:	d8c02905 	stb	r3,164(sp)
 c008904:	00c00ac4 	movi	r3,43
 c008908:	d8c02b05 	stb	r3,172(sp)
 c00890c:	ac400007 	ldb	r17,0(r21)
 c008910:	003d4306 	br	c007e20 <__alt_data_end+0xfc007e20>
 c008914:	84000814 	ori	r16,r16,32
 c008918:	ac400007 	ldb	r17,0(r21)
 c00891c:	003d4006 	br	c007e20 <__alt_data_end+0xfc007e20>
 c008920:	d8802e17 	ldw	r2,184(sp)
 c008924:	8025883a 	mov	r18,r16
 c008928:	d8002785 	stb	zero,158(sp)
 c00892c:	14000017 	ldw	r16,0(r2)
 c008930:	e011883a 	mov	r8,fp
 c008934:	14c00104 	addi	r19,r2,4
 c008938:	80042d26 	beq	r16,zero,c0099f0 <___vfprintf_internal_r+0x1d58>
 c00893c:	d8c02a17 	ldw	r3,168(sp)
 c008940:	1803e416 	blt	r3,zero,c0098d4 <___vfprintf_internal_r+0x1c3c>
 c008944:	180d883a 	mov	r6,r3
 c008948:	000b883a 	mov	r5,zero
 c00894c:	8009883a 	mov	r4,r16
 c008950:	df003d15 	stw	fp,244(sp)
 c008954:	c00ce200 	call	c00ce20 <memchr>
 c008958:	da003d17 	ldw	r8,244(sp)
 c00895c:	10046826 	beq	r2,zero,c009b00 <___vfprintf_internal_r+0x1e68>
 c008960:	1405c83a 	sub	r2,r2,r16
 c008964:	d8802b15 	stw	r2,172(sp)
 c008968:	1003e016 	blt	r2,zero,c0098ec <___vfprintf_internal_r+0x1c54>
 c00896c:	df002783 	ldbu	fp,158(sp)
 c008970:	d8802915 	stw	r2,164(sp)
 c008974:	dcc02e15 	stw	r19,184(sp)
 c008978:	d8002a15 	stw	zero,168(sp)
 c00897c:	d8003215 	stw	zero,200(sp)
 c008980:	003ea206 	br	c00840c <__alt_data_end+0xfc00840c>
 c008984:	8025883a 	mov	r18,r16
 c008988:	dc002903 	ldbu	r16,164(sp)
 c00898c:	e011883a 	mov	r8,fp
 c008990:	84003fcc 	andi	r16,r16,255
 c008994:	803f8d26 	beq	r16,zero,c0087cc <__alt_data_end+0xfc0087cc>
 c008998:	d8c02b03 	ldbu	r3,172(sp)
 c00899c:	d8c02785 	stb	r3,158(sp)
 c0089a0:	003f8a06 	br	c0087cc <__alt_data_end+0xfc0087cc>
 c0089a4:	8025883a 	mov	r18,r16
 c0089a8:	dc002903 	ldbu	r16,164(sp)
 c0089ac:	e011883a 	mov	r8,fp
 c0089b0:	84003fcc 	andi	r16,r16,255
 c0089b4:	8005661e 	bne	r16,zero,c009f50 <___vfprintf_internal_r+0x22b8>
 c0089b8:	010300b4 	movhi	r4,3074
 c0089bc:	21228604 	addi	r4,r4,-30184
 c0089c0:	d9003915 	stw	r4,228(sp)
 c0089c4:	9080080c 	andi	r2,r18,32
 c0089c8:	103f9f1e 	bne	r2,zero,c008848 <__alt_data_end+0xfc008848>
 c0089cc:	9080040c 	andi	r2,r18,16
 c0089d0:	1002eb26 	beq	r2,zero,c009580 <___vfprintf_internal_r+0x18e8>
 c0089d4:	d8802e17 	ldw	r2,184(sp)
 c0089d8:	002d883a 	mov	r22,zero
 c0089dc:	14c00017 	ldw	r19,0(r2)
 c0089e0:	10800104 	addi	r2,r2,4
 c0089e4:	d8802e15 	stw	r2,184(sp)
 c0089e8:	003f9c06 	br	c00885c <__alt_data_end+0xfc00885c>
 c0089ec:	d8802b07 	ldb	r2,172(sp)
 c0089f0:	1002e11e 	bne	r2,zero,c009578 <___vfprintf_internal_r+0x18e0>
 c0089f4:	00c00044 	movi	r3,1
 c0089f8:	d8c02905 	stb	r3,164(sp)
 c0089fc:	00c00804 	movi	r3,32
 c008a00:	d8c02b05 	stb	r3,172(sp)
 c008a04:	ac400007 	ldb	r17,0(r21)
 c008a08:	003d0506 	br	c007e20 <__alt_data_end+0xfc007e20>
 c008a0c:	84000054 	ori	r16,r16,1
 c008a10:	ac400007 	ldb	r17,0(r21)
 c008a14:	003d0206 	br	c007e20 <__alt_data_end+0xfc007e20>
 c008a18:	8025883a 	mov	r18,r16
 c008a1c:	dc002903 	ldbu	r16,164(sp)
 c008a20:	e011883a 	mov	r8,fp
 c008a24:	84003fcc 	andi	r16,r16,255
 c008a28:	803de726 	beq	r16,zero,c0081c8 <__alt_data_end+0xfc0081c8>
 c008a2c:	d8c02b03 	ldbu	r3,172(sp)
 c008a30:	d8c02785 	stb	r3,158(sp)
 c008a34:	003de406 	br	c0081c8 <__alt_data_end+0xfc0081c8>
 c008a38:	84001014 	ori	r16,r16,64
 c008a3c:	ac400007 	ldb	r17,0(r21)
 c008a40:	003cf706 	br	c007e20 <__alt_data_end+0xfc007e20>
 c008a44:	ac400007 	ldb	r17,0(r21)
 c008a48:	00801b04 	movi	r2,108
 c008a4c:	88838f26 	beq	r17,r2,c00988c <___vfprintf_internal_r+0x1bf4>
 c008a50:	84000414 	ori	r16,r16,16
 c008a54:	003cf206 	br	c007e20 <__alt_data_end+0xfc007e20>
 c008a58:	8025883a 	mov	r18,r16
 c008a5c:	dc002903 	ldbu	r16,164(sp)
 c008a60:	e011883a 	mov	r8,fp
 c008a64:	84003fcc 	andi	r16,r16,255
 c008a68:	80053f1e 	bne	r16,zero,c009f68 <___vfprintf_internal_r+0x22d0>
 c008a6c:	9080080c 	andi	r2,r18,32
 c008a70:	1002d226 	beq	r2,zero,c0095bc <___vfprintf_internal_r+0x1924>
 c008a74:	d9002e17 	ldw	r4,184(sp)
 c008a78:	d9402f17 	ldw	r5,188(sp)
 c008a7c:	20800017 	ldw	r2,0(r4)
 c008a80:	2807d7fa 	srai	r3,r5,31
 c008a84:	21000104 	addi	r4,r4,4
 c008a88:	d9002e15 	stw	r4,184(sp)
 c008a8c:	11400015 	stw	r5,0(r2)
 c008a90:	10c00115 	stw	r3,4(r2)
 c008a94:	003cb806 	br	c007d78 <__alt_data_end+0xfc007d78>
 c008a98:	d8c02e17 	ldw	r3,184(sp)
 c008a9c:	d9002e17 	ldw	r4,184(sp)
 c008aa0:	8025883a 	mov	r18,r16
 c008aa4:	18800017 	ldw	r2,0(r3)
 c008aa8:	21000104 	addi	r4,r4,4
 c008aac:	00c00044 	movi	r3,1
 c008ab0:	e011883a 	mov	r8,fp
 c008ab4:	d8c02915 	stw	r3,164(sp)
 c008ab8:	d8002785 	stb	zero,158(sp)
 c008abc:	d8801405 	stb	r2,80(sp)
 c008ac0:	d9002e15 	stw	r4,184(sp)
 c008ac4:	d8c02b15 	stw	r3,172(sp)
 c008ac8:	d8002a15 	stw	zero,168(sp)
 c008acc:	d8003215 	stw	zero,200(sp)
 c008ad0:	dc001404 	addi	r16,sp,80
 c008ad4:	0039883a 	mov	fp,zero
 c008ad8:	003e5306 	br	c008428 <__alt_data_end+0xfc008428>
 c008adc:	010300b4 	movhi	r4,3074
 c008ae0:	21228604 	addi	r4,r4,-30184
 c008ae4:	0039883a 	mov	fp,zero
 c008ae8:	d9003915 	stw	r4,228(sp)
 c008aec:	04401e04 	movi	r17,120
 c008af0:	003f6906 	br	c008898 <__alt_data_end+0xfc008898>
 c008af4:	8025883a 	mov	r18,r16
 c008af8:	dc002903 	ldbu	r16,164(sp)
 c008afc:	e011883a 	mov	r8,fp
 c008b00:	84003fcc 	andi	r16,r16,255
 c008b04:	8005081e 	bne	r16,zero,c009f28 <___vfprintf_internal_r+0x2290>
 c008b08:	883d6126 	beq	r17,zero,c008090 <__alt_data_end+0xfc008090>
 c008b0c:	00c00044 	movi	r3,1
 c008b10:	d8c02915 	stw	r3,164(sp)
 c008b14:	dc401405 	stb	r17,80(sp)
 c008b18:	d8002785 	stb	zero,158(sp)
 c008b1c:	003fe906 	br	c008ac4 <__alt_data_end+0xfc008ac4>
 c008b20:	014300b4 	movhi	r5,3074
 c008b24:	29628604 	addi	r5,r5,-30184
 c008b28:	d9403915 	stw	r5,228(sp)
 c008b2c:	d8c02e15 	stw	r3,184(sp)
 c008b30:	1025883a 	mov	r18,r2
 c008b34:	04401e04 	movi	r17,120
 c008b38:	9d84b03a 	or	r2,r19,r22
 c008b3c:	1000fc1e 	bne	r2,zero,c008f30 <___vfprintf_internal_r+0x1298>
 c008b40:	0039883a 	mov	fp,zero
 c008b44:	00800084 	movi	r2,2
 c008b48:	10803fcc 	andi	r2,r2,255
 c008b4c:	00c00044 	movi	r3,1
 c008b50:	10c20f26 	beq	r2,r3,c009390 <___vfprintf_internal_r+0x16f8>
 c008b54:	00c00084 	movi	r3,2
 c008b58:	10fd3326 	beq	r2,r3,c008028 <__alt_data_end+0xfc008028>
 c008b5c:	003e0b06 	br	c00838c <__alt_data_end+0xfc00838c>
 c008b60:	d8c02017 	ldw	r3,128(sp)
 c008b64:	003e7106 	br	c00852c <__alt_data_end+0xfc00852c>
 c008b68:	00801944 	movi	r2,101
 c008b6c:	14407e0e 	bge	r2,r17,c008d68 <___vfprintf_internal_r+0x10d0>
 c008b70:	d9003617 	ldw	r4,216(sp)
 c008b74:	d9403817 	ldw	r5,224(sp)
 c008b78:	000d883a 	mov	r6,zero
 c008b7c:	000f883a 	mov	r7,zero
 c008b80:	d8c03c15 	stw	r3,240(sp)
 c008b84:	da003d15 	stw	r8,244(sp)
 c008b88:	c013f2c0 	call	c013f2c <__eqdf2>
 c008b8c:	d8c03c17 	ldw	r3,240(sp)
 c008b90:	da003d17 	ldw	r8,244(sp)
 c008b94:	1000f71e 	bne	r2,zero,c008f74 <___vfprintf_internal_r+0x12dc>
 c008b98:	d8801f17 	ldw	r2,124(sp)
 c008b9c:	010300b4 	movhi	r4,3074
 c008ba0:	21228d04 	addi	r4,r4,-30156
 c008ba4:	18c00044 	addi	r3,r3,1
 c008ba8:	10800044 	addi	r2,r2,1
 c008bac:	41000015 	stw	r4,0(r8)
 c008bb0:	01000044 	movi	r4,1
 c008bb4:	41000115 	stw	r4,4(r8)
 c008bb8:	d8c02015 	stw	r3,128(sp)
 c008bbc:	d8801f15 	stw	r2,124(sp)
 c008bc0:	010001c4 	movi	r4,7
 c008bc4:	2082b816 	blt	r4,r2,c0096a8 <___vfprintf_internal_r+0x1a10>
 c008bc8:	42000204 	addi	r8,r8,8
 c008bcc:	d8802617 	ldw	r2,152(sp)
 c008bd0:	d9403317 	ldw	r5,204(sp)
 c008bd4:	11400216 	blt	r2,r5,c008be0 <___vfprintf_internal_r+0xf48>
 c008bd8:	9080004c 	andi	r2,r18,1
 c008bdc:	103eb326 	beq	r2,zero,c0086ac <__alt_data_end+0xfc0086ac>
 c008be0:	d8803717 	ldw	r2,220(sp)
 c008be4:	d9003417 	ldw	r4,208(sp)
 c008be8:	d9403717 	ldw	r5,220(sp)
 c008bec:	1887883a 	add	r3,r3,r2
 c008bf0:	d8801f17 	ldw	r2,124(sp)
 c008bf4:	41000015 	stw	r4,0(r8)
 c008bf8:	41400115 	stw	r5,4(r8)
 c008bfc:	10800044 	addi	r2,r2,1
 c008c00:	d8c02015 	stw	r3,128(sp)
 c008c04:	d8801f15 	stw	r2,124(sp)
 c008c08:	010001c4 	movi	r4,7
 c008c0c:	20832916 	blt	r4,r2,c0098b4 <___vfprintf_internal_r+0x1c1c>
 c008c10:	42000204 	addi	r8,r8,8
 c008c14:	d8803317 	ldw	r2,204(sp)
 c008c18:	143fffc4 	addi	r16,r2,-1
 c008c1c:	043ea30e 	bge	zero,r16,c0086ac <__alt_data_end+0xfc0086ac>
 c008c20:	04400404 	movi	r17,16
 c008c24:	d8801f17 	ldw	r2,124(sp)
 c008c28:	8c00880e 	bge	r17,r16,c008e4c <___vfprintf_internal_r+0x11b4>
 c008c2c:	014300b4 	movhi	r5,3074
 c008c30:	29629584 	addi	r5,r5,-30122
 c008c34:	d9402c15 	stw	r5,176(sp)
 c008c38:	058001c4 	movi	r22,7
 c008c3c:	dcc02d17 	ldw	r19,180(sp)
 c008c40:	00000306 	br	c008c50 <___vfprintf_internal_r+0xfb8>
 c008c44:	42000204 	addi	r8,r8,8
 c008c48:	843ffc04 	addi	r16,r16,-16
 c008c4c:	8c00820e 	bge	r17,r16,c008e58 <___vfprintf_internal_r+0x11c0>
 c008c50:	18c00404 	addi	r3,r3,16
 c008c54:	10800044 	addi	r2,r2,1
 c008c58:	45000015 	stw	r20,0(r8)
 c008c5c:	44400115 	stw	r17,4(r8)
 c008c60:	d8c02015 	stw	r3,128(sp)
 c008c64:	d8801f15 	stw	r2,124(sp)
 c008c68:	b0bff60e 	bge	r22,r2,c008c44 <__alt_data_end+0xfc008c44>
 c008c6c:	d9801e04 	addi	r6,sp,120
 c008c70:	b80b883a 	mov	r5,r23
 c008c74:	9809883a 	mov	r4,r19
 c008c78:	c01009c0 	call	c01009c <__sprint_r>
 c008c7c:	103d0a1e 	bne	r2,zero,c0080a8 <__alt_data_end+0xfc0080a8>
 c008c80:	d8c02017 	ldw	r3,128(sp)
 c008c84:	d8801f17 	ldw	r2,124(sp)
 c008c88:	da000404 	addi	r8,sp,16
 c008c8c:	003fee06 	br	c008c48 <__alt_data_end+0xfc008c48>
 c008c90:	d9403117 	ldw	r5,196(sp)
 c008c94:	d8802917 	ldw	r2,164(sp)
 c008c98:	28adc83a 	sub	r22,r5,r2
 c008c9c:	05be410e 	bge	zero,r22,c0085a4 <__alt_data_end+0xfc0085a4>
 c008ca0:	07000404 	movi	fp,16
 c008ca4:	d8801f17 	ldw	r2,124(sp)
 c008ca8:	e5838f0e 	bge	fp,r22,c009ae8 <___vfprintf_internal_r+0x1e50>
 c008cac:	014300b4 	movhi	r5,3074
 c008cb0:	29629584 	addi	r5,r5,-30122
 c008cb4:	dc403015 	stw	r17,192(sp)
 c008cb8:	d9402c15 	stw	r5,176(sp)
 c008cbc:	b023883a 	mov	r17,r22
 c008cc0:	04c001c4 	movi	r19,7
 c008cc4:	a82d883a 	mov	r22,r21
 c008cc8:	902b883a 	mov	r21,r18
 c008ccc:	8025883a 	mov	r18,r16
 c008cd0:	dc002d17 	ldw	r16,180(sp)
 c008cd4:	00000306 	br	c008ce4 <___vfprintf_internal_r+0x104c>
 c008cd8:	8c7ffc04 	addi	r17,r17,-16
 c008cdc:	42000204 	addi	r8,r8,8
 c008ce0:	e440110e 	bge	fp,r17,c008d28 <___vfprintf_internal_r+0x1090>
 c008ce4:	18c00404 	addi	r3,r3,16
 c008ce8:	10800044 	addi	r2,r2,1
 c008cec:	45000015 	stw	r20,0(r8)
 c008cf0:	47000115 	stw	fp,4(r8)
 c008cf4:	d8c02015 	stw	r3,128(sp)
 c008cf8:	d8801f15 	stw	r2,124(sp)
 c008cfc:	98bff60e 	bge	r19,r2,c008cd8 <__alt_data_end+0xfc008cd8>
 c008d00:	d9801e04 	addi	r6,sp,120
 c008d04:	b80b883a 	mov	r5,r23
 c008d08:	8009883a 	mov	r4,r16
 c008d0c:	c01009c0 	call	c01009c <__sprint_r>
 c008d10:	103ce51e 	bne	r2,zero,c0080a8 <__alt_data_end+0xfc0080a8>
 c008d14:	8c7ffc04 	addi	r17,r17,-16
 c008d18:	d8c02017 	ldw	r3,128(sp)
 c008d1c:	d8801f17 	ldw	r2,124(sp)
 c008d20:	da000404 	addi	r8,sp,16
 c008d24:	e47fef16 	blt	fp,r17,c008ce4 <__alt_data_end+0xfc008ce4>
 c008d28:	9021883a 	mov	r16,r18
 c008d2c:	a825883a 	mov	r18,r21
 c008d30:	b02b883a 	mov	r21,r22
 c008d34:	882d883a 	mov	r22,r17
 c008d38:	dc403017 	ldw	r17,192(sp)
 c008d3c:	d9002c17 	ldw	r4,176(sp)
 c008d40:	1d87883a 	add	r3,r3,r22
 c008d44:	10800044 	addi	r2,r2,1
 c008d48:	41000015 	stw	r4,0(r8)
 c008d4c:	45800115 	stw	r22,4(r8)
 c008d50:	d8c02015 	stw	r3,128(sp)
 c008d54:	d8801f15 	stw	r2,124(sp)
 c008d58:	010001c4 	movi	r4,7
 c008d5c:	20818e16 	blt	r4,r2,c009398 <___vfprintf_internal_r+0x1700>
 c008d60:	42000204 	addi	r8,r8,8
 c008d64:	003e0f06 	br	c0085a4 <__alt_data_end+0xfc0085a4>
 c008d68:	d9403317 	ldw	r5,204(sp)
 c008d6c:	00800044 	movi	r2,1
 c008d70:	18c00044 	addi	r3,r3,1
 c008d74:	1141530e 	bge	r2,r5,c0092c4 <___vfprintf_internal_r+0x162c>
 c008d78:	dc401f17 	ldw	r17,124(sp)
 c008d7c:	00800044 	movi	r2,1
 c008d80:	40800115 	stw	r2,4(r8)
 c008d84:	8c400044 	addi	r17,r17,1
 c008d88:	44000015 	stw	r16,0(r8)
 c008d8c:	d8c02015 	stw	r3,128(sp)
 c008d90:	dc401f15 	stw	r17,124(sp)
 c008d94:	008001c4 	movi	r2,7
 c008d98:	14416b16 	blt	r2,r17,c009348 <___vfprintf_internal_r+0x16b0>
 c008d9c:	42000204 	addi	r8,r8,8
 c008da0:	d8803717 	ldw	r2,220(sp)
 c008da4:	d9003417 	ldw	r4,208(sp)
 c008da8:	8c400044 	addi	r17,r17,1
 c008dac:	10c7883a 	add	r3,r2,r3
 c008db0:	40800115 	stw	r2,4(r8)
 c008db4:	41000015 	stw	r4,0(r8)
 c008db8:	d8c02015 	stw	r3,128(sp)
 c008dbc:	dc401f15 	stw	r17,124(sp)
 c008dc0:	008001c4 	movi	r2,7
 c008dc4:	14416916 	blt	r2,r17,c00936c <___vfprintf_internal_r+0x16d4>
 c008dc8:	45800204 	addi	r22,r8,8
 c008dcc:	d9003617 	ldw	r4,216(sp)
 c008dd0:	d9403817 	ldw	r5,224(sp)
 c008dd4:	000d883a 	mov	r6,zero
 c008dd8:	000f883a 	mov	r7,zero
 c008ddc:	d8c03c15 	stw	r3,240(sp)
 c008de0:	c013f2c0 	call	c013f2c <__eqdf2>
 c008de4:	d8c03c17 	ldw	r3,240(sp)
 c008de8:	1000bc26 	beq	r2,zero,c0090dc <___vfprintf_internal_r+0x1444>
 c008dec:	d9403317 	ldw	r5,204(sp)
 c008df0:	84000044 	addi	r16,r16,1
 c008df4:	8c400044 	addi	r17,r17,1
 c008df8:	28bfffc4 	addi	r2,r5,-1
 c008dfc:	1887883a 	add	r3,r3,r2
 c008e00:	b0800115 	stw	r2,4(r22)
 c008e04:	b4000015 	stw	r16,0(r22)
 c008e08:	d8c02015 	stw	r3,128(sp)
 c008e0c:	dc401f15 	stw	r17,124(sp)
 c008e10:	008001c4 	movi	r2,7
 c008e14:	14414316 	blt	r2,r17,c009324 <___vfprintf_internal_r+0x168c>
 c008e18:	b5800204 	addi	r22,r22,8
 c008e1c:	d9003a17 	ldw	r4,232(sp)
 c008e20:	df0022c4 	addi	fp,sp,139
 c008e24:	8c400044 	addi	r17,r17,1
 c008e28:	20c7883a 	add	r3,r4,r3
 c008e2c:	b7000015 	stw	fp,0(r22)
 c008e30:	b1000115 	stw	r4,4(r22)
 c008e34:	d8c02015 	stw	r3,128(sp)
 c008e38:	dc401f15 	stw	r17,124(sp)
 c008e3c:	008001c4 	movi	r2,7
 c008e40:	14400e16 	blt	r2,r17,c008e7c <___vfprintf_internal_r+0x11e4>
 c008e44:	b2000204 	addi	r8,r22,8
 c008e48:	003e1806 	br	c0086ac <__alt_data_end+0xfc0086ac>
 c008e4c:	010300b4 	movhi	r4,3074
 c008e50:	21229584 	addi	r4,r4,-30122
 c008e54:	d9002c15 	stw	r4,176(sp)
 c008e58:	d9002c17 	ldw	r4,176(sp)
 c008e5c:	1c07883a 	add	r3,r3,r16
 c008e60:	44000115 	stw	r16,4(r8)
 c008e64:	41000015 	stw	r4,0(r8)
 c008e68:	10800044 	addi	r2,r2,1
 c008e6c:	d8c02015 	stw	r3,128(sp)
 c008e70:	d8801f15 	stw	r2,124(sp)
 c008e74:	010001c4 	movi	r4,7
 c008e78:	20be0b0e 	bge	r4,r2,c0086a8 <__alt_data_end+0xfc0086a8>
 c008e7c:	d9002d17 	ldw	r4,180(sp)
 c008e80:	d9801e04 	addi	r6,sp,120
 c008e84:	b80b883a 	mov	r5,r23
 c008e88:	c01009c0 	call	c01009c <__sprint_r>
 c008e8c:	103c861e 	bne	r2,zero,c0080a8 <__alt_data_end+0xfc0080a8>
 c008e90:	d8c02017 	ldw	r3,128(sp)
 c008e94:	da000404 	addi	r8,sp,16
 c008e98:	003e0406 	br	c0086ac <__alt_data_end+0xfc0086ac>
 c008e9c:	d9002d17 	ldw	r4,180(sp)
 c008ea0:	d9801e04 	addi	r6,sp,120
 c008ea4:	b80b883a 	mov	r5,r23
 c008ea8:	c01009c0 	call	c01009c <__sprint_r>
 c008eac:	103e3b26 	beq	r2,zero,c00879c <__alt_data_end+0xfc00879c>
 c008eb0:	003c7d06 	br	c0080a8 <__alt_data_end+0xfc0080a8>
 c008eb4:	d9002d17 	ldw	r4,180(sp)
 c008eb8:	d9801e04 	addi	r6,sp,120
 c008ebc:	b80b883a 	mov	r5,r23
 c008ec0:	c01009c0 	call	c01009c <__sprint_r>
 c008ec4:	103c781e 	bne	r2,zero,c0080a8 <__alt_data_end+0xfc0080a8>
 c008ec8:	d8c02017 	ldw	r3,128(sp)
 c008ecc:	da000404 	addi	r8,sp,16
 c008ed0:	003de906 	br	c008678 <__alt_data_end+0xfc008678>
 c008ed4:	d9002d17 	ldw	r4,180(sp)
 c008ed8:	d9801e04 	addi	r6,sp,120
 c008edc:	b80b883a 	mov	r5,r23
 c008ee0:	c01009c0 	call	c01009c <__sprint_r>
 c008ee4:	103c701e 	bne	r2,zero,c0080a8 <__alt_data_end+0xfc0080a8>
 c008ee8:	d8c02017 	ldw	r3,128(sp)
 c008eec:	da000404 	addi	r8,sp,16
 c008ef0:	003d9b06 	br	c008560 <__alt_data_end+0xfc008560>
 c008ef4:	d9002d17 	ldw	r4,180(sp)
 c008ef8:	d9801e04 	addi	r6,sp,120
 c008efc:	b80b883a 	mov	r5,r23
 c008f00:	c01009c0 	call	c01009c <__sprint_r>
 c008f04:	103c681e 	bne	r2,zero,c0080a8 <__alt_data_end+0xfc0080a8>
 c008f08:	d8c02017 	ldw	r3,128(sp)
 c008f0c:	da000404 	addi	r8,sp,16
 c008f10:	003da106 	br	c008598 <__alt_data_end+0xfc008598>
 c008f14:	d9402a17 	ldw	r5,168(sp)
 c008f18:	d8002785 	stb	zero,158(sp)
 c008f1c:	283f0616 	blt	r5,zero,c008b38 <__alt_data_end+0xfc008b38>
 c008f20:	00ffdfc4 	movi	r3,-129
 c008f24:	9d84b03a 	or	r2,r19,r22
 c008f28:	90e4703a 	and	r18,r18,r3
 c008f2c:	103c3b26 	beq	r2,zero,c00801c <__alt_data_end+0xfc00801c>
 c008f30:	0039883a 	mov	fp,zero
 c008f34:	003e5806 	br	c008898 <__alt_data_end+0xfc008898>
 c008f38:	9080040c 	andi	r2,r18,16
 c008f3c:	1001b326 	beq	r2,zero,c00960c <___vfprintf_internal_r+0x1974>
 c008f40:	d8c02e17 	ldw	r3,184(sp)
 c008f44:	d9002a17 	ldw	r4,168(sp)
 c008f48:	d8002785 	stb	zero,158(sp)
 c008f4c:	18800104 	addi	r2,r3,4
 c008f50:	1cc00017 	ldw	r19,0(r3)
 c008f54:	002d883a 	mov	r22,zero
 c008f58:	2001b516 	blt	r4,zero,c009630 <___vfprintf_internal_r+0x1998>
 c008f5c:	00ffdfc4 	movi	r3,-129
 c008f60:	d8802e15 	stw	r2,184(sp)
 c008f64:	90e4703a 	and	r18,r18,r3
 c008f68:	983d0526 	beq	r19,zero,c008380 <__alt_data_end+0xfc008380>
 c008f6c:	0039883a 	mov	fp,zero
 c008f70:	003d0806 	br	c008394 <__alt_data_end+0xfc008394>
 c008f74:	dc402617 	ldw	r17,152(sp)
 c008f78:	0441d30e 	bge	zero,r17,c0096c8 <___vfprintf_internal_r+0x1a30>
 c008f7c:	dc403217 	ldw	r17,200(sp)
 c008f80:	d8803317 	ldw	r2,204(sp)
 c008f84:	1440010e 	bge	r2,r17,c008f8c <___vfprintf_internal_r+0x12f4>
 c008f88:	1023883a 	mov	r17,r2
 c008f8c:	04400a0e 	bge	zero,r17,c008fb8 <___vfprintf_internal_r+0x1320>
 c008f90:	d8801f17 	ldw	r2,124(sp)
 c008f94:	1c47883a 	add	r3,r3,r17
 c008f98:	44000015 	stw	r16,0(r8)
 c008f9c:	10800044 	addi	r2,r2,1
 c008fa0:	44400115 	stw	r17,4(r8)
 c008fa4:	d8c02015 	stw	r3,128(sp)
 c008fa8:	d8801f15 	stw	r2,124(sp)
 c008fac:	010001c4 	movi	r4,7
 c008fb0:	20826516 	blt	r4,r2,c009948 <___vfprintf_internal_r+0x1cb0>
 c008fb4:	42000204 	addi	r8,r8,8
 c008fb8:	88026116 	blt	r17,zero,c009940 <___vfprintf_internal_r+0x1ca8>
 c008fbc:	d9003217 	ldw	r4,200(sp)
 c008fc0:	2463c83a 	sub	r17,r4,r17
 c008fc4:	04407b0e 	bge	zero,r17,c0091b4 <___vfprintf_internal_r+0x151c>
 c008fc8:	05800404 	movi	r22,16
 c008fcc:	d8801f17 	ldw	r2,124(sp)
 c008fd0:	b4419d0e 	bge	r22,r17,c009648 <___vfprintf_internal_r+0x19b0>
 c008fd4:	010300b4 	movhi	r4,3074
 c008fd8:	21229584 	addi	r4,r4,-30122
 c008fdc:	d9002c15 	stw	r4,176(sp)
 c008fe0:	070001c4 	movi	fp,7
 c008fe4:	dcc02d17 	ldw	r19,180(sp)
 c008fe8:	00000306 	br	c008ff8 <___vfprintf_internal_r+0x1360>
 c008fec:	42000204 	addi	r8,r8,8
 c008ff0:	8c7ffc04 	addi	r17,r17,-16
 c008ff4:	b441970e 	bge	r22,r17,c009654 <___vfprintf_internal_r+0x19bc>
 c008ff8:	18c00404 	addi	r3,r3,16
 c008ffc:	10800044 	addi	r2,r2,1
 c009000:	45000015 	stw	r20,0(r8)
 c009004:	45800115 	stw	r22,4(r8)
 c009008:	d8c02015 	stw	r3,128(sp)
 c00900c:	d8801f15 	stw	r2,124(sp)
 c009010:	e0bff60e 	bge	fp,r2,c008fec <__alt_data_end+0xfc008fec>
 c009014:	d9801e04 	addi	r6,sp,120
 c009018:	b80b883a 	mov	r5,r23
 c00901c:	9809883a 	mov	r4,r19
 c009020:	c01009c0 	call	c01009c <__sprint_r>
 c009024:	103c201e 	bne	r2,zero,c0080a8 <__alt_data_end+0xfc0080a8>
 c009028:	d8c02017 	ldw	r3,128(sp)
 c00902c:	d8801f17 	ldw	r2,124(sp)
 c009030:	da000404 	addi	r8,sp,16
 c009034:	003fee06 	br	c008ff0 <__alt_data_end+0xfc008ff0>
 c009038:	d9002d17 	ldw	r4,180(sp)
 c00903c:	d9801e04 	addi	r6,sp,120
 c009040:	b80b883a 	mov	r5,r23
 c009044:	c01009c0 	call	c01009c <__sprint_r>
 c009048:	103c171e 	bne	r2,zero,c0080a8 <__alt_data_end+0xfc0080a8>
 c00904c:	d8c02017 	ldw	r3,128(sp)
 c009050:	df002787 	ldb	fp,158(sp)
 c009054:	da000404 	addi	r8,sp,16
 c009058:	003d3406 	br	c00852c <__alt_data_end+0xfc00852c>
 c00905c:	9080040c 	andi	r2,r18,16
 c009060:	10016126 	beq	r2,zero,c0095e8 <___vfprintf_internal_r+0x1950>
 c009064:	d9402e17 	ldw	r5,184(sp)
 c009068:	2cc00017 	ldw	r19,0(r5)
 c00906c:	29400104 	addi	r5,r5,4
 c009070:	d9402e15 	stw	r5,184(sp)
 c009074:	982dd7fa 	srai	r22,r19,31
 c009078:	b005883a 	mov	r2,r22
 c00907c:	003c5a06 	br	c0081e8 <__alt_data_end+0xfc0081e8>
 c009080:	9080040c 	andi	r2,r18,16
 c009084:	10003526 	beq	r2,zero,c00915c <___vfprintf_internal_r+0x14c4>
 c009088:	d8c02e17 	ldw	r3,184(sp)
 c00908c:	d9002a17 	ldw	r4,168(sp)
 c009090:	d8002785 	stb	zero,158(sp)
 c009094:	18800104 	addi	r2,r3,4
 c009098:	1cc00017 	ldw	r19,0(r3)
 c00909c:	002d883a 	mov	r22,zero
 c0090a0:	20003716 	blt	r4,zero,c009180 <___vfprintf_internal_r+0x14e8>
 c0090a4:	00ffdfc4 	movi	r3,-129
 c0090a8:	d8802e15 	stw	r2,184(sp)
 c0090ac:	90e4703a 	and	r18,r18,r3
 c0090b0:	0039883a 	mov	fp,zero
 c0090b4:	983dd426 	beq	r19,zero,c008808 <__alt_data_end+0xfc008808>
 c0090b8:	00800244 	movi	r2,9
 c0090bc:	14fc5336 	bltu	r2,r19,c00820c <__alt_data_end+0xfc00820c>
 c0090c0:	d8c02817 	ldw	r3,160(sp)
 c0090c4:	dc001dc4 	addi	r16,sp,119
 c0090c8:	9cc00c04 	addi	r19,r19,48
 c0090cc:	1c07c83a 	sub	r3,r3,r16
 c0090d0:	dcc01dc5 	stb	r19,119(sp)
 c0090d4:	d8c02b15 	stw	r3,172(sp)
 c0090d8:	003cc606 	br	c0083f4 <__alt_data_end+0xfc0083f4>
 c0090dc:	d8803317 	ldw	r2,204(sp)
 c0090e0:	143fffc4 	addi	r16,r2,-1
 c0090e4:	043f4d0e 	bge	zero,r16,c008e1c <__alt_data_end+0xfc008e1c>
 c0090e8:	07000404 	movi	fp,16
 c0090ec:	e400810e 	bge	fp,r16,c0092f4 <___vfprintf_internal_r+0x165c>
 c0090f0:	014300b4 	movhi	r5,3074
 c0090f4:	29629584 	addi	r5,r5,-30122
 c0090f8:	d9402c15 	stw	r5,176(sp)
 c0090fc:	01c001c4 	movi	r7,7
 c009100:	dcc02d17 	ldw	r19,180(sp)
 c009104:	00000306 	br	c009114 <___vfprintf_internal_r+0x147c>
 c009108:	b5800204 	addi	r22,r22,8
 c00910c:	843ffc04 	addi	r16,r16,-16
 c009110:	e4007b0e 	bge	fp,r16,c009300 <___vfprintf_internal_r+0x1668>
 c009114:	18c00404 	addi	r3,r3,16
 c009118:	8c400044 	addi	r17,r17,1
 c00911c:	b5000015 	stw	r20,0(r22)
 c009120:	b7000115 	stw	fp,4(r22)
 c009124:	d8c02015 	stw	r3,128(sp)
 c009128:	dc401f15 	stw	r17,124(sp)
 c00912c:	3c7ff60e 	bge	r7,r17,c009108 <__alt_data_end+0xfc009108>
 c009130:	d9801e04 	addi	r6,sp,120
 c009134:	b80b883a 	mov	r5,r23
 c009138:	9809883a 	mov	r4,r19
 c00913c:	d9c03c15 	stw	r7,240(sp)
 c009140:	c01009c0 	call	c01009c <__sprint_r>
 c009144:	d9c03c17 	ldw	r7,240(sp)
 c009148:	103bd71e 	bne	r2,zero,c0080a8 <__alt_data_end+0xfc0080a8>
 c00914c:	d8c02017 	ldw	r3,128(sp)
 c009150:	dc401f17 	ldw	r17,124(sp)
 c009154:	dd800404 	addi	r22,sp,16
 c009158:	003fec06 	br	c00910c <__alt_data_end+0xfc00910c>
 c00915c:	9080100c 	andi	r2,r18,64
 c009160:	d8002785 	stb	zero,158(sp)
 c009164:	10010e26 	beq	r2,zero,c0095a0 <___vfprintf_internal_r+0x1908>
 c009168:	d9402e17 	ldw	r5,184(sp)
 c00916c:	d8c02a17 	ldw	r3,168(sp)
 c009170:	002d883a 	mov	r22,zero
 c009174:	28800104 	addi	r2,r5,4
 c009178:	2cc0000b 	ldhu	r19,0(r5)
 c00917c:	183fc90e 	bge	r3,zero,c0090a4 <__alt_data_end+0xfc0090a4>
 c009180:	d8802e15 	stw	r2,184(sp)
 c009184:	0039883a 	mov	fp,zero
 c009188:	9d84b03a 	or	r2,r19,r22
 c00918c:	103c1e1e 	bne	r2,zero,c008208 <__alt_data_end+0xfc008208>
 c009190:	00800044 	movi	r2,1
 c009194:	003e6c06 	br	c008b48 <__alt_data_end+0xfc008b48>
 c009198:	d9002d17 	ldw	r4,180(sp)
 c00919c:	d9801e04 	addi	r6,sp,120
 c0091a0:	b80b883a 	mov	r5,r23
 c0091a4:	c01009c0 	call	c01009c <__sprint_r>
 c0091a8:	103bbf1e 	bne	r2,zero,c0080a8 <__alt_data_end+0xfc0080a8>
 c0091ac:	d8c02017 	ldw	r3,128(sp)
 c0091b0:	da000404 	addi	r8,sp,16
 c0091b4:	d9003217 	ldw	r4,200(sp)
 c0091b8:	d8802617 	ldw	r2,152(sp)
 c0091bc:	d9403317 	ldw	r5,204(sp)
 c0091c0:	8123883a 	add	r17,r16,r4
 c0091c4:	11400216 	blt	r2,r5,c0091d0 <___vfprintf_internal_r+0x1538>
 c0091c8:	9100004c 	andi	r4,r18,1
 c0091cc:	20000d26 	beq	r4,zero,c009204 <___vfprintf_internal_r+0x156c>
 c0091d0:	d9003717 	ldw	r4,220(sp)
 c0091d4:	d9403417 	ldw	r5,208(sp)
 c0091d8:	1907883a 	add	r3,r3,r4
 c0091dc:	d9001f17 	ldw	r4,124(sp)
 c0091e0:	41400015 	stw	r5,0(r8)
 c0091e4:	d9403717 	ldw	r5,220(sp)
 c0091e8:	21000044 	addi	r4,r4,1
 c0091ec:	d8c02015 	stw	r3,128(sp)
 c0091f0:	41400115 	stw	r5,4(r8)
 c0091f4:	d9001f15 	stw	r4,124(sp)
 c0091f8:	014001c4 	movi	r5,7
 c0091fc:	2901e816 	blt	r5,r4,c0099a0 <___vfprintf_internal_r+0x1d08>
 c009200:	42000204 	addi	r8,r8,8
 c009204:	d9003317 	ldw	r4,204(sp)
 c009208:	8121883a 	add	r16,r16,r4
 c00920c:	2085c83a 	sub	r2,r4,r2
 c009210:	8461c83a 	sub	r16,r16,r17
 c009214:	1400010e 	bge	r2,r16,c00921c <___vfprintf_internal_r+0x1584>
 c009218:	1021883a 	mov	r16,r2
 c00921c:	04000a0e 	bge	zero,r16,c009248 <___vfprintf_internal_r+0x15b0>
 c009220:	d9001f17 	ldw	r4,124(sp)
 c009224:	1c07883a 	add	r3,r3,r16
 c009228:	44400015 	stw	r17,0(r8)
 c00922c:	21000044 	addi	r4,r4,1
 c009230:	44000115 	stw	r16,4(r8)
 c009234:	d8c02015 	stw	r3,128(sp)
 c009238:	d9001f15 	stw	r4,124(sp)
 c00923c:	014001c4 	movi	r5,7
 c009240:	2901fb16 	blt	r5,r4,c009a30 <___vfprintf_internal_r+0x1d98>
 c009244:	42000204 	addi	r8,r8,8
 c009248:	8001f716 	blt	r16,zero,c009a28 <___vfprintf_internal_r+0x1d90>
 c00924c:	1421c83a 	sub	r16,r2,r16
 c009250:	043d160e 	bge	zero,r16,c0086ac <__alt_data_end+0xfc0086ac>
 c009254:	04400404 	movi	r17,16
 c009258:	d8801f17 	ldw	r2,124(sp)
 c00925c:	8c3efb0e 	bge	r17,r16,c008e4c <__alt_data_end+0xfc008e4c>
 c009260:	014300b4 	movhi	r5,3074
 c009264:	29629584 	addi	r5,r5,-30122
 c009268:	d9402c15 	stw	r5,176(sp)
 c00926c:	058001c4 	movi	r22,7
 c009270:	dcc02d17 	ldw	r19,180(sp)
 c009274:	00000306 	br	c009284 <___vfprintf_internal_r+0x15ec>
 c009278:	42000204 	addi	r8,r8,8
 c00927c:	843ffc04 	addi	r16,r16,-16
 c009280:	8c3ef50e 	bge	r17,r16,c008e58 <__alt_data_end+0xfc008e58>
 c009284:	18c00404 	addi	r3,r3,16
 c009288:	10800044 	addi	r2,r2,1
 c00928c:	45000015 	stw	r20,0(r8)
 c009290:	44400115 	stw	r17,4(r8)
 c009294:	d8c02015 	stw	r3,128(sp)
 c009298:	d8801f15 	stw	r2,124(sp)
 c00929c:	b0bff60e 	bge	r22,r2,c009278 <__alt_data_end+0xfc009278>
 c0092a0:	d9801e04 	addi	r6,sp,120
 c0092a4:	b80b883a 	mov	r5,r23
 c0092a8:	9809883a 	mov	r4,r19
 c0092ac:	c01009c0 	call	c01009c <__sprint_r>
 c0092b0:	103b7d1e 	bne	r2,zero,c0080a8 <__alt_data_end+0xfc0080a8>
 c0092b4:	d8c02017 	ldw	r3,128(sp)
 c0092b8:	d8801f17 	ldw	r2,124(sp)
 c0092bc:	da000404 	addi	r8,sp,16
 c0092c0:	003fee06 	br	c00927c <__alt_data_end+0xfc00927c>
 c0092c4:	9088703a 	and	r4,r18,r2
 c0092c8:	203eab1e 	bne	r4,zero,c008d78 <__alt_data_end+0xfc008d78>
 c0092cc:	dc401f17 	ldw	r17,124(sp)
 c0092d0:	40800115 	stw	r2,4(r8)
 c0092d4:	44000015 	stw	r16,0(r8)
 c0092d8:	8c400044 	addi	r17,r17,1
 c0092dc:	d8c02015 	stw	r3,128(sp)
 c0092e0:	dc401f15 	stw	r17,124(sp)
 c0092e4:	008001c4 	movi	r2,7
 c0092e8:	14400e16 	blt	r2,r17,c009324 <___vfprintf_internal_r+0x168c>
 c0092ec:	45800204 	addi	r22,r8,8
 c0092f0:	003eca06 	br	c008e1c <__alt_data_end+0xfc008e1c>
 c0092f4:	010300b4 	movhi	r4,3074
 c0092f8:	21229584 	addi	r4,r4,-30122
 c0092fc:	d9002c15 	stw	r4,176(sp)
 c009300:	d8802c17 	ldw	r2,176(sp)
 c009304:	1c07883a 	add	r3,r3,r16
 c009308:	8c400044 	addi	r17,r17,1
 c00930c:	b0800015 	stw	r2,0(r22)
 c009310:	b4000115 	stw	r16,4(r22)
 c009314:	d8c02015 	stw	r3,128(sp)
 c009318:	dc401f15 	stw	r17,124(sp)
 c00931c:	008001c4 	movi	r2,7
 c009320:	147ebd0e 	bge	r2,r17,c008e18 <__alt_data_end+0xfc008e18>
 c009324:	d9002d17 	ldw	r4,180(sp)
 c009328:	d9801e04 	addi	r6,sp,120
 c00932c:	b80b883a 	mov	r5,r23
 c009330:	c01009c0 	call	c01009c <__sprint_r>
 c009334:	103b5c1e 	bne	r2,zero,c0080a8 <__alt_data_end+0xfc0080a8>
 c009338:	d8c02017 	ldw	r3,128(sp)
 c00933c:	dc401f17 	ldw	r17,124(sp)
 c009340:	dd800404 	addi	r22,sp,16
 c009344:	003eb506 	br	c008e1c <__alt_data_end+0xfc008e1c>
 c009348:	d9002d17 	ldw	r4,180(sp)
 c00934c:	d9801e04 	addi	r6,sp,120
 c009350:	b80b883a 	mov	r5,r23
 c009354:	c01009c0 	call	c01009c <__sprint_r>
 c009358:	103b531e 	bne	r2,zero,c0080a8 <__alt_data_end+0xfc0080a8>
 c00935c:	d8c02017 	ldw	r3,128(sp)
 c009360:	dc401f17 	ldw	r17,124(sp)
 c009364:	da000404 	addi	r8,sp,16
 c009368:	003e8d06 	br	c008da0 <__alt_data_end+0xfc008da0>
 c00936c:	d9002d17 	ldw	r4,180(sp)
 c009370:	d9801e04 	addi	r6,sp,120
 c009374:	b80b883a 	mov	r5,r23
 c009378:	c01009c0 	call	c01009c <__sprint_r>
 c00937c:	103b4a1e 	bne	r2,zero,c0080a8 <__alt_data_end+0xfc0080a8>
 c009380:	d8c02017 	ldw	r3,128(sp)
 c009384:	dc401f17 	ldw	r17,124(sp)
 c009388:	dd800404 	addi	r22,sp,16
 c00938c:	003e8f06 	br	c008dcc <__alt_data_end+0xfc008dcc>
 c009390:	0027883a 	mov	r19,zero
 c009394:	003f4a06 	br	c0090c0 <__alt_data_end+0xfc0090c0>
 c009398:	d9002d17 	ldw	r4,180(sp)
 c00939c:	d9801e04 	addi	r6,sp,120
 c0093a0:	b80b883a 	mov	r5,r23
 c0093a4:	c01009c0 	call	c01009c <__sprint_r>
 c0093a8:	103b3f1e 	bne	r2,zero,c0080a8 <__alt_data_end+0xfc0080a8>
 c0093ac:	d8c02017 	ldw	r3,128(sp)
 c0093b0:	da000404 	addi	r8,sp,16
 c0093b4:	003c7b06 	br	c0085a4 <__alt_data_end+0xfc0085a4>
 c0093b8:	d9402a17 	ldw	r5,168(sp)
 c0093bc:	04e7c83a 	sub	r19,zero,r19
 c0093c0:	07000b44 	movi	fp,45
 c0093c4:	9804c03a 	cmpne	r2,r19,zero
 c0093c8:	05adc83a 	sub	r22,zero,r22
 c0093cc:	df002785 	stb	fp,158(sp)
 c0093d0:	b0adc83a 	sub	r22,r22,r2
 c0093d4:	28017b16 	blt	r5,zero,c0099c4 <___vfprintf_internal_r+0x1d2c>
 c0093d8:	00bfdfc4 	movi	r2,-129
 c0093dc:	90a4703a 	and	r18,r18,r2
 c0093e0:	003b8906 	br	c008208 <__alt_data_end+0xfc008208>
 c0093e4:	d9003617 	ldw	r4,216(sp)
 c0093e8:	d9403817 	ldw	r5,224(sp)
 c0093ec:	da003d15 	stw	r8,244(sp)
 c0093f0:	c00e7a40 	call	c00e7a4 <__fpclassifyd>
 c0093f4:	da003d17 	ldw	r8,244(sp)
 c0093f8:	1000f026 	beq	r2,zero,c0097bc <___vfprintf_internal_r+0x1b24>
 c0093fc:	d9002a17 	ldw	r4,168(sp)
 c009400:	05bff7c4 	movi	r22,-33
 c009404:	00bfffc4 	movi	r2,-1
 c009408:	8dac703a 	and	r22,r17,r22
 c00940c:	20820026 	beq	r4,r2,c009c10 <___vfprintf_internal_r+0x1f78>
 c009410:	008011c4 	movi	r2,71
 c009414:	b081f726 	beq	r22,r2,c009bf4 <___vfprintf_internal_r+0x1f5c>
 c009418:	d9003817 	ldw	r4,224(sp)
 c00941c:	90c04014 	ori	r3,r18,256
 c009420:	d8c02c15 	stw	r3,176(sp)
 c009424:	20021516 	blt	r4,zero,c009c7c <___vfprintf_internal_r+0x1fe4>
 c009428:	dcc03817 	ldw	r19,224(sp)
 c00942c:	d8002905 	stb	zero,164(sp)
 c009430:	00801984 	movi	r2,102
 c009434:	8881f926 	beq	r17,r2,c009c1c <___vfprintf_internal_r+0x1f84>
 c009438:	00801184 	movi	r2,70
 c00943c:	88821c26 	beq	r17,r2,c009cb0 <___vfprintf_internal_r+0x2018>
 c009440:	00801144 	movi	r2,69
 c009444:	b081ef26 	beq	r22,r2,c009c04 <___vfprintf_internal_r+0x1f6c>
 c009448:	d8c02a17 	ldw	r3,168(sp)
 c00944c:	d8802104 	addi	r2,sp,132
 c009450:	d8800315 	stw	r2,12(sp)
 c009454:	d9403617 	ldw	r5,216(sp)
 c009458:	d8802504 	addi	r2,sp,148
 c00945c:	d9002d17 	ldw	r4,180(sp)
 c009460:	d8800215 	stw	r2,8(sp)
 c009464:	d8802604 	addi	r2,sp,152
 c009468:	d8c00015 	stw	r3,0(sp)
 c00946c:	d8800115 	stw	r2,4(sp)
 c009470:	01c00084 	movi	r7,2
 c009474:	980d883a 	mov	r6,r19
 c009478:	d8c03c15 	stw	r3,240(sp)
 c00947c:	da003d15 	stw	r8,244(sp)
 c009480:	c00a3c80 	call	c00a3c8 <_dtoa_r>
 c009484:	1021883a 	mov	r16,r2
 c009488:	008019c4 	movi	r2,103
 c00948c:	d8c03c17 	ldw	r3,240(sp)
 c009490:	da003d17 	ldw	r8,244(sp)
 c009494:	88817126 	beq	r17,r2,c009a5c <___vfprintf_internal_r+0x1dc4>
 c009498:	008011c4 	movi	r2,71
 c00949c:	88829126 	beq	r17,r2,c009ee4 <___vfprintf_internal_r+0x224c>
 c0094a0:	80f9883a 	add	fp,r16,r3
 c0094a4:	d9003617 	ldw	r4,216(sp)
 c0094a8:	000d883a 	mov	r6,zero
 c0094ac:	000f883a 	mov	r7,zero
 c0094b0:	980b883a 	mov	r5,r19
 c0094b4:	da003d15 	stw	r8,244(sp)
 c0094b8:	c013f2c0 	call	c013f2c <__eqdf2>
 c0094bc:	da003d17 	ldw	r8,244(sp)
 c0094c0:	10018d26 	beq	r2,zero,c009af8 <___vfprintf_internal_r+0x1e60>
 c0094c4:	d8802117 	ldw	r2,132(sp)
 c0094c8:	1700062e 	bgeu	r2,fp,c0094e4 <___vfprintf_internal_r+0x184c>
 c0094cc:	01000c04 	movi	r4,48
 c0094d0:	10c00044 	addi	r3,r2,1
 c0094d4:	d8c02115 	stw	r3,132(sp)
 c0094d8:	11000005 	stb	r4,0(r2)
 c0094dc:	d8802117 	ldw	r2,132(sp)
 c0094e0:	173ffb36 	bltu	r2,fp,c0094d0 <__alt_data_end+0xfc0094d0>
 c0094e4:	1405c83a 	sub	r2,r2,r16
 c0094e8:	d8803315 	stw	r2,204(sp)
 c0094ec:	008011c4 	movi	r2,71
 c0094f0:	b0817626 	beq	r22,r2,c009acc <___vfprintf_internal_r+0x1e34>
 c0094f4:	00801944 	movi	r2,101
 c0094f8:	1442800e 	bge	r2,r17,c009efc <___vfprintf_internal_r+0x2264>
 c0094fc:	d8c02617 	ldw	r3,152(sp)
 c009500:	00801984 	movi	r2,102
 c009504:	d8c03215 	stw	r3,200(sp)
 c009508:	8881fe26 	beq	r17,r2,c009d04 <___vfprintf_internal_r+0x206c>
 c00950c:	d8c03217 	ldw	r3,200(sp)
 c009510:	d9003317 	ldw	r4,204(sp)
 c009514:	1901dd16 	blt	r3,r4,c009c8c <___vfprintf_internal_r+0x1ff4>
 c009518:	9480004c 	andi	r18,r18,1
 c00951c:	90022b1e 	bne	r18,zero,c009dcc <___vfprintf_internal_r+0x2134>
 c009520:	1805883a 	mov	r2,r3
 c009524:	18028316 	blt	r3,zero,c009f34 <___vfprintf_internal_r+0x229c>
 c009528:	d8c03217 	ldw	r3,200(sp)
 c00952c:	044019c4 	movi	r17,103
 c009530:	d8c02b15 	stw	r3,172(sp)
 c009534:	df002907 	ldb	fp,164(sp)
 c009538:	e001531e 	bne	fp,zero,c009a88 <___vfprintf_internal_r+0x1df0>
 c00953c:	df002783 	ldbu	fp,158(sp)
 c009540:	d8802915 	stw	r2,164(sp)
 c009544:	dc802c17 	ldw	r18,176(sp)
 c009548:	d8002a15 	stw	zero,168(sp)
 c00954c:	003baf06 	br	c00840c <__alt_data_end+0xfc00840c>
 c009550:	d8c02e17 	ldw	r3,184(sp)
 c009554:	d9002e17 	ldw	r4,184(sp)
 c009558:	d9402e17 	ldw	r5,184(sp)
 c00955c:	18c00017 	ldw	r3,0(r3)
 c009560:	21000117 	ldw	r4,4(r4)
 c009564:	29400204 	addi	r5,r5,8
 c009568:	d8c03615 	stw	r3,216(sp)
 c00956c:	d9003815 	stw	r4,224(sp)
 c009570:	d9402e15 	stw	r5,184(sp)
 c009574:	003b5006 	br	c0082b8 <__alt_data_end+0xfc0082b8>
 c009578:	ac400007 	ldb	r17,0(r21)
 c00957c:	003a2806 	br	c007e20 <__alt_data_end+0xfc007e20>
 c009580:	9080100c 	andi	r2,r18,64
 c009584:	1000a826 	beq	r2,zero,c009828 <___vfprintf_internal_r+0x1b90>
 c009588:	d8c02e17 	ldw	r3,184(sp)
 c00958c:	002d883a 	mov	r22,zero
 c009590:	1cc0000b 	ldhu	r19,0(r3)
 c009594:	18c00104 	addi	r3,r3,4
 c009598:	d8c02e15 	stw	r3,184(sp)
 c00959c:	003caf06 	br	c00885c <__alt_data_end+0xfc00885c>
 c0095a0:	d9002e17 	ldw	r4,184(sp)
 c0095a4:	d9402a17 	ldw	r5,168(sp)
 c0095a8:	002d883a 	mov	r22,zero
 c0095ac:	20800104 	addi	r2,r4,4
 c0095b0:	24c00017 	ldw	r19,0(r4)
 c0095b4:	283ebb0e 	bge	r5,zero,c0090a4 <__alt_data_end+0xfc0090a4>
 c0095b8:	003ef106 	br	c009180 <__alt_data_end+0xfc009180>
 c0095bc:	9080040c 	andi	r2,r18,16
 c0095c0:	1000921e 	bne	r2,zero,c00980c <___vfprintf_internal_r+0x1b74>
 c0095c4:	9480100c 	andi	r18,r18,64
 c0095c8:	90013926 	beq	r18,zero,c009ab0 <___vfprintf_internal_r+0x1e18>
 c0095cc:	d9402e17 	ldw	r5,184(sp)
 c0095d0:	d8c02f17 	ldw	r3,188(sp)
 c0095d4:	28800017 	ldw	r2,0(r5)
 c0095d8:	29400104 	addi	r5,r5,4
 c0095dc:	d9402e15 	stw	r5,184(sp)
 c0095e0:	10c0000d 	sth	r3,0(r2)
 c0095e4:	0039e406 	br	c007d78 <__alt_data_end+0xfc007d78>
 c0095e8:	9080100c 	andi	r2,r18,64
 c0095ec:	10008026 	beq	r2,zero,c0097f0 <___vfprintf_internal_r+0x1b58>
 c0095f0:	d8802e17 	ldw	r2,184(sp)
 c0095f4:	14c0000f 	ldh	r19,0(r2)
 c0095f8:	10800104 	addi	r2,r2,4
 c0095fc:	d8802e15 	stw	r2,184(sp)
 c009600:	982dd7fa 	srai	r22,r19,31
 c009604:	b005883a 	mov	r2,r22
 c009608:	003af706 	br	c0081e8 <__alt_data_end+0xfc0081e8>
 c00960c:	9080100c 	andi	r2,r18,64
 c009610:	d8002785 	stb	zero,158(sp)
 c009614:	10008a1e 	bne	r2,zero,c009840 <___vfprintf_internal_r+0x1ba8>
 c009618:	d9002e17 	ldw	r4,184(sp)
 c00961c:	d9402a17 	ldw	r5,168(sp)
 c009620:	002d883a 	mov	r22,zero
 c009624:	20800104 	addi	r2,r4,4
 c009628:	24c00017 	ldw	r19,0(r4)
 c00962c:	283e4b0e 	bge	r5,zero,c008f5c <__alt_data_end+0xfc008f5c>
 c009630:	9d86b03a 	or	r3,r19,r22
 c009634:	d8802e15 	stw	r2,184(sp)
 c009638:	183e4c1e 	bne	r3,zero,c008f6c <__alt_data_end+0xfc008f6c>
 c00963c:	0039883a 	mov	fp,zero
 c009640:	0005883a 	mov	r2,zero
 c009644:	003d4006 	br	c008b48 <__alt_data_end+0xfc008b48>
 c009648:	014300b4 	movhi	r5,3074
 c00964c:	29629584 	addi	r5,r5,-30122
 c009650:	d9402c15 	stw	r5,176(sp)
 c009654:	d9402c17 	ldw	r5,176(sp)
 c009658:	1c47883a 	add	r3,r3,r17
 c00965c:	10800044 	addi	r2,r2,1
 c009660:	41400015 	stw	r5,0(r8)
 c009664:	44400115 	stw	r17,4(r8)
 c009668:	d8c02015 	stw	r3,128(sp)
 c00966c:	d8801f15 	stw	r2,124(sp)
 c009670:	010001c4 	movi	r4,7
 c009674:	20bec816 	blt	r4,r2,c009198 <__alt_data_end+0xfc009198>
 c009678:	42000204 	addi	r8,r8,8
 c00967c:	003ecd06 	br	c0091b4 <__alt_data_end+0xfc0091b4>
 c009680:	d9002a17 	ldw	r4,168(sp)
 c009684:	d8002785 	stb	zero,158(sp)
 c009688:	203d2d16 	blt	r4,zero,c008b40 <__alt_data_end+0xfc008b40>
 c00968c:	00bfdfc4 	movi	r2,-129
 c009690:	90a4703a 	and	r18,r18,r2
 c009694:	003a6106 	br	c00801c <__alt_data_end+0xfc00801c>
 c009698:	010300b4 	movhi	r4,3074
 c00969c:	21229584 	addi	r4,r4,-30122
 c0096a0:	d9002c15 	stw	r4,176(sp)
 c0096a4:	003bea06 	br	c008650 <__alt_data_end+0xfc008650>
 c0096a8:	d9002d17 	ldw	r4,180(sp)
 c0096ac:	d9801e04 	addi	r6,sp,120
 c0096b0:	b80b883a 	mov	r5,r23
 c0096b4:	c01009c0 	call	c01009c <__sprint_r>
 c0096b8:	103a7b1e 	bne	r2,zero,c0080a8 <__alt_data_end+0xfc0080a8>
 c0096bc:	d8c02017 	ldw	r3,128(sp)
 c0096c0:	da000404 	addi	r8,sp,16
 c0096c4:	003d4106 	br	c008bcc <__alt_data_end+0xfc008bcc>
 c0096c8:	d8801f17 	ldw	r2,124(sp)
 c0096cc:	014300b4 	movhi	r5,3074
 c0096d0:	01000044 	movi	r4,1
 c0096d4:	18c00044 	addi	r3,r3,1
 c0096d8:	10800044 	addi	r2,r2,1
 c0096dc:	29628d04 	addi	r5,r5,-30156
 c0096e0:	41000115 	stw	r4,4(r8)
 c0096e4:	41400015 	stw	r5,0(r8)
 c0096e8:	d8c02015 	stw	r3,128(sp)
 c0096ec:	d8801f15 	stw	r2,124(sp)
 c0096f0:	010001c4 	movi	r4,7
 c0096f4:	20805c16 	blt	r4,r2,c009868 <___vfprintf_internal_r+0x1bd0>
 c0096f8:	42000204 	addi	r8,r8,8
 c0096fc:	8800041e 	bne	r17,zero,c009710 <___vfprintf_internal_r+0x1a78>
 c009700:	d8803317 	ldw	r2,204(sp)
 c009704:	1000021e 	bne	r2,zero,c009710 <___vfprintf_internal_r+0x1a78>
 c009708:	9080004c 	andi	r2,r18,1
 c00970c:	103be726 	beq	r2,zero,c0086ac <__alt_data_end+0xfc0086ac>
 c009710:	d9003717 	ldw	r4,220(sp)
 c009714:	d8801f17 	ldw	r2,124(sp)
 c009718:	d9403417 	ldw	r5,208(sp)
 c00971c:	20c7883a 	add	r3,r4,r3
 c009720:	10800044 	addi	r2,r2,1
 c009724:	41000115 	stw	r4,4(r8)
 c009728:	41400015 	stw	r5,0(r8)
 c00972c:	d8c02015 	stw	r3,128(sp)
 c009730:	d8801f15 	stw	r2,124(sp)
 c009734:	010001c4 	movi	r4,7
 c009738:	20812116 	blt	r4,r2,c009bc0 <___vfprintf_internal_r+0x1f28>
 c00973c:	42000204 	addi	r8,r8,8
 c009740:	0463c83a 	sub	r17,zero,r17
 c009744:	0440730e 	bge	zero,r17,c009914 <___vfprintf_internal_r+0x1c7c>
 c009748:	05800404 	movi	r22,16
 c00974c:	b440860e 	bge	r22,r17,c009968 <___vfprintf_internal_r+0x1cd0>
 c009750:	014300b4 	movhi	r5,3074
 c009754:	29629584 	addi	r5,r5,-30122
 c009758:	d9402c15 	stw	r5,176(sp)
 c00975c:	070001c4 	movi	fp,7
 c009760:	dcc02d17 	ldw	r19,180(sp)
 c009764:	00000306 	br	c009774 <___vfprintf_internal_r+0x1adc>
 c009768:	42000204 	addi	r8,r8,8
 c00976c:	8c7ffc04 	addi	r17,r17,-16
 c009770:	b440800e 	bge	r22,r17,c009974 <___vfprintf_internal_r+0x1cdc>
 c009774:	18c00404 	addi	r3,r3,16
 c009778:	10800044 	addi	r2,r2,1
 c00977c:	45000015 	stw	r20,0(r8)
 c009780:	45800115 	stw	r22,4(r8)
 c009784:	d8c02015 	stw	r3,128(sp)
 c009788:	d8801f15 	stw	r2,124(sp)
 c00978c:	e0bff60e 	bge	fp,r2,c009768 <__alt_data_end+0xfc009768>
 c009790:	d9801e04 	addi	r6,sp,120
 c009794:	b80b883a 	mov	r5,r23
 c009798:	9809883a 	mov	r4,r19
 c00979c:	c01009c0 	call	c01009c <__sprint_r>
 c0097a0:	103a411e 	bne	r2,zero,c0080a8 <__alt_data_end+0xfc0080a8>
 c0097a4:	d8c02017 	ldw	r3,128(sp)
 c0097a8:	d8801f17 	ldw	r2,124(sp)
 c0097ac:	da000404 	addi	r8,sp,16
 c0097b0:	003fee06 	br	c00976c <__alt_data_end+0xfc00976c>
 c0097b4:	00bfffc4 	movi	r2,-1
 c0097b8:	003a3f06 	br	c0080b8 <__alt_data_end+0xfc0080b8>
 c0097bc:	008011c4 	movi	r2,71
 c0097c0:	1440b816 	blt	r2,r17,c009aa4 <___vfprintf_internal_r+0x1e0c>
 c0097c4:	040300b4 	movhi	r16,3074
 c0097c8:	84227f04 	addi	r16,r16,-30212
 c0097cc:	00c000c4 	movi	r3,3
 c0097d0:	00bfdfc4 	movi	r2,-129
 c0097d4:	d8c02915 	stw	r3,164(sp)
 c0097d8:	90a4703a 	and	r18,r18,r2
 c0097dc:	df002783 	ldbu	fp,158(sp)
 c0097e0:	d8c02b15 	stw	r3,172(sp)
 c0097e4:	d8002a15 	stw	zero,168(sp)
 c0097e8:	d8003215 	stw	zero,200(sp)
 c0097ec:	003b0706 	br	c00840c <__alt_data_end+0xfc00840c>
 c0097f0:	d8c02e17 	ldw	r3,184(sp)
 c0097f4:	1cc00017 	ldw	r19,0(r3)
 c0097f8:	18c00104 	addi	r3,r3,4
 c0097fc:	d8c02e15 	stw	r3,184(sp)
 c009800:	982dd7fa 	srai	r22,r19,31
 c009804:	b005883a 	mov	r2,r22
 c009808:	003a7706 	br	c0081e8 <__alt_data_end+0xfc0081e8>
 c00980c:	d8c02e17 	ldw	r3,184(sp)
 c009810:	d9002f17 	ldw	r4,188(sp)
 c009814:	18800017 	ldw	r2,0(r3)
 c009818:	18c00104 	addi	r3,r3,4
 c00981c:	d8c02e15 	stw	r3,184(sp)
 c009820:	11000015 	stw	r4,0(r2)
 c009824:	00395406 	br	c007d78 <__alt_data_end+0xfc007d78>
 c009828:	d9002e17 	ldw	r4,184(sp)
 c00982c:	002d883a 	mov	r22,zero
 c009830:	24c00017 	ldw	r19,0(r4)
 c009834:	21000104 	addi	r4,r4,4
 c009838:	d9002e15 	stw	r4,184(sp)
 c00983c:	003c0706 	br	c00885c <__alt_data_end+0xfc00885c>
 c009840:	d9402e17 	ldw	r5,184(sp)
 c009844:	d8c02a17 	ldw	r3,168(sp)
 c009848:	002d883a 	mov	r22,zero
 c00984c:	28800104 	addi	r2,r5,4
 c009850:	2cc0000b 	ldhu	r19,0(r5)
 c009854:	183dc10e 	bge	r3,zero,c008f5c <__alt_data_end+0xfc008f5c>
 c009858:	003f7506 	br	c009630 <__alt_data_end+0xfc009630>
 c00985c:	040300b4 	movhi	r16,3074
 c009860:	84227d04 	addi	r16,r16,-30220
 c009864:	003aa706 	br	c008304 <__alt_data_end+0xfc008304>
 c009868:	d9002d17 	ldw	r4,180(sp)
 c00986c:	d9801e04 	addi	r6,sp,120
 c009870:	b80b883a 	mov	r5,r23
 c009874:	c01009c0 	call	c01009c <__sprint_r>
 c009878:	103a0b1e 	bne	r2,zero,c0080a8 <__alt_data_end+0xfc0080a8>
 c00987c:	dc402617 	ldw	r17,152(sp)
 c009880:	d8c02017 	ldw	r3,128(sp)
 c009884:	da000404 	addi	r8,sp,16
 c009888:	003f9c06 	br	c0096fc <__alt_data_end+0xfc0096fc>
 c00988c:	ac400043 	ldbu	r17,1(r21)
 c009890:	84000814 	ori	r16,r16,32
 c009894:	ad400044 	addi	r21,r21,1
 c009898:	8c403fcc 	andi	r17,r17,255
 c00989c:	8c40201c 	xori	r17,r17,128
 c0098a0:	8c7fe004 	addi	r17,r17,-128
 c0098a4:	00395e06 	br	c007e20 <__alt_data_end+0xfc007e20>
 c0098a8:	d8c02e15 	stw	r3,184(sp)
 c0098ac:	0039883a 	mov	fp,zero
 c0098b0:	003e3506 	br	c009188 <__alt_data_end+0xfc009188>
 c0098b4:	d9002d17 	ldw	r4,180(sp)
 c0098b8:	d9801e04 	addi	r6,sp,120
 c0098bc:	b80b883a 	mov	r5,r23
 c0098c0:	c01009c0 	call	c01009c <__sprint_r>
 c0098c4:	1039f81e 	bne	r2,zero,c0080a8 <__alt_data_end+0xfc0080a8>
 c0098c8:	d8c02017 	ldw	r3,128(sp)
 c0098cc:	da000404 	addi	r8,sp,16
 c0098d0:	003cd006 	br	c008c14 <__alt_data_end+0xfc008c14>
 c0098d4:	8009883a 	mov	r4,r16
 c0098d8:	df003d15 	stw	fp,244(sp)
 c0098dc:	c0058f40 	call	c0058f4 <strlen>
 c0098e0:	d8802b15 	stw	r2,172(sp)
 c0098e4:	da003d17 	ldw	r8,244(sp)
 c0098e8:	103c200e 	bge	r2,zero,c00896c <__alt_data_end+0xfc00896c>
 c0098ec:	0005883a 	mov	r2,zero
 c0098f0:	003c1e06 	br	c00896c <__alt_data_end+0xfc00896c>
 c0098f4:	d9002d17 	ldw	r4,180(sp)
 c0098f8:	d9801e04 	addi	r6,sp,120
 c0098fc:	b80b883a 	mov	r5,r23
 c009900:	c01009c0 	call	c01009c <__sprint_r>
 c009904:	1039e81e 	bne	r2,zero,c0080a8 <__alt_data_end+0xfc0080a8>
 c009908:	d8c02017 	ldw	r3,128(sp)
 c00990c:	d8801f17 	ldw	r2,124(sp)
 c009910:	da000404 	addi	r8,sp,16
 c009914:	d9403317 	ldw	r5,204(sp)
 c009918:	10800044 	addi	r2,r2,1
 c00991c:	44000015 	stw	r16,0(r8)
 c009920:	28c7883a 	add	r3,r5,r3
 c009924:	003b5b06 	br	c008694 <__alt_data_end+0xfc008694>
 c009928:	010300b4 	movhi	r4,3074
 c00992c:	21229984 	addi	r4,r4,-30106
 c009930:	d9003515 	stw	r4,212(sp)
 c009934:	003af206 	br	c008500 <__alt_data_end+0xfc008500>
 c009938:	013fffc4 	movi	r4,-1
 c00993c:	003a0806 	br	c008160 <__alt_data_end+0xfc008160>
 c009940:	0023883a 	mov	r17,zero
 c009944:	003d9d06 	br	c008fbc <__alt_data_end+0xfc008fbc>
 c009948:	d9002d17 	ldw	r4,180(sp)
 c00994c:	d9801e04 	addi	r6,sp,120
 c009950:	b80b883a 	mov	r5,r23
 c009954:	c01009c0 	call	c01009c <__sprint_r>
 c009958:	1039d31e 	bne	r2,zero,c0080a8 <__alt_data_end+0xfc0080a8>
 c00995c:	d8c02017 	ldw	r3,128(sp)
 c009960:	da000404 	addi	r8,sp,16
 c009964:	003d9406 	br	c008fb8 <__alt_data_end+0xfc008fb8>
 c009968:	010300b4 	movhi	r4,3074
 c00996c:	21229584 	addi	r4,r4,-30122
 c009970:	d9002c15 	stw	r4,176(sp)
 c009974:	d9002c17 	ldw	r4,176(sp)
 c009978:	1c47883a 	add	r3,r3,r17
 c00997c:	10800044 	addi	r2,r2,1
 c009980:	41000015 	stw	r4,0(r8)
 c009984:	44400115 	stw	r17,4(r8)
 c009988:	d8c02015 	stw	r3,128(sp)
 c00998c:	d8801f15 	stw	r2,124(sp)
 c009990:	010001c4 	movi	r4,7
 c009994:	20bfd716 	blt	r4,r2,c0098f4 <__alt_data_end+0xfc0098f4>
 c009998:	42000204 	addi	r8,r8,8
 c00999c:	003fdd06 	br	c009914 <__alt_data_end+0xfc009914>
 c0099a0:	d9002d17 	ldw	r4,180(sp)
 c0099a4:	d9801e04 	addi	r6,sp,120
 c0099a8:	b80b883a 	mov	r5,r23
 c0099ac:	c01009c0 	call	c01009c <__sprint_r>
 c0099b0:	1039bd1e 	bne	r2,zero,c0080a8 <__alt_data_end+0xfc0080a8>
 c0099b4:	d8802617 	ldw	r2,152(sp)
 c0099b8:	d8c02017 	ldw	r3,128(sp)
 c0099bc:	da000404 	addi	r8,sp,16
 c0099c0:	003e1006 	br	c009204 <__alt_data_end+0xfc009204>
 c0099c4:	00800044 	movi	r2,1
 c0099c8:	10803fcc 	andi	r2,r2,255
 c0099cc:	00c00044 	movi	r3,1
 c0099d0:	10fa0d26 	beq	r2,r3,c008208 <__alt_data_end+0xfc008208>
 c0099d4:	00c00084 	movi	r3,2
 c0099d8:	10fbaf26 	beq	r2,r3,c008898 <__alt_data_end+0xfc008898>
 c0099dc:	003a6d06 	br	c008394 <__alt_data_end+0xfc008394>
 c0099e0:	010300b4 	movhi	r4,3074
 c0099e4:	21229984 	addi	r4,r4,-30106
 c0099e8:	d9003515 	stw	r4,212(sp)
 c0099ec:	003b5406 	br	c008740 <__alt_data_end+0xfc008740>
 c0099f0:	d8802a17 	ldw	r2,168(sp)
 c0099f4:	00c00184 	movi	r3,6
 c0099f8:	1880012e 	bgeu	r3,r2,c009a00 <___vfprintf_internal_r+0x1d68>
 c0099fc:	1805883a 	mov	r2,r3
 c009a00:	d8802b15 	stw	r2,172(sp)
 c009a04:	1000ef16 	blt	r2,zero,c009dc4 <___vfprintf_internal_r+0x212c>
 c009a08:	040300b4 	movhi	r16,3074
 c009a0c:	d8802915 	stw	r2,164(sp)
 c009a10:	dcc02e15 	stw	r19,184(sp)
 c009a14:	d8002a15 	stw	zero,168(sp)
 c009a18:	d8003215 	stw	zero,200(sp)
 c009a1c:	84228b04 	addi	r16,r16,-30164
 c009a20:	0039883a 	mov	fp,zero
 c009a24:	003a8006 	br	c008428 <__alt_data_end+0xfc008428>
 c009a28:	0021883a 	mov	r16,zero
 c009a2c:	003e0706 	br	c00924c <__alt_data_end+0xfc00924c>
 c009a30:	d9002d17 	ldw	r4,180(sp)
 c009a34:	d9801e04 	addi	r6,sp,120
 c009a38:	b80b883a 	mov	r5,r23
 c009a3c:	c01009c0 	call	c01009c <__sprint_r>
 c009a40:	1039991e 	bne	r2,zero,c0080a8 <__alt_data_end+0xfc0080a8>
 c009a44:	d8802617 	ldw	r2,152(sp)
 c009a48:	d9403317 	ldw	r5,204(sp)
 c009a4c:	d8c02017 	ldw	r3,128(sp)
 c009a50:	da000404 	addi	r8,sp,16
 c009a54:	2885c83a 	sub	r2,r5,r2
 c009a58:	003dfb06 	br	c009248 <__alt_data_end+0xfc009248>
 c009a5c:	9080004c 	andi	r2,r18,1
 c009a60:	103e8f1e 	bne	r2,zero,c0094a0 <__alt_data_end+0xfc0094a0>
 c009a64:	d8802117 	ldw	r2,132(sp)
 c009a68:	003e9e06 	br	c0094e4 <__alt_data_end+0xfc0094e4>
 c009a6c:	1025883a 	mov	r18,r2
 c009a70:	0039883a 	mov	fp,zero
 c009a74:	00800084 	movi	r2,2
 c009a78:	003fd306 	br	c0099c8 <__alt_data_end+0xfc0099c8>
 c009a7c:	07000b44 	movi	fp,45
 c009a80:	df002785 	stb	fp,158(sp)
 c009a84:	003a1b06 	br	c0082f4 <__alt_data_end+0xfc0082f4>
 c009a88:	00c00b44 	movi	r3,45
 c009a8c:	d8c02785 	stb	r3,158(sp)
 c009a90:	d8802915 	stw	r2,164(sp)
 c009a94:	dc802c17 	ldw	r18,176(sp)
 c009a98:	d8002a15 	stw	zero,168(sp)
 c009a9c:	07000b44 	movi	fp,45
 c009aa0:	003a5e06 	br	c00841c <__alt_data_end+0xfc00841c>
 c009aa4:	040300b4 	movhi	r16,3074
 c009aa8:	84228004 	addi	r16,r16,-30208
 c009aac:	003f4706 	br	c0097cc <__alt_data_end+0xfc0097cc>
 c009ab0:	d9002e17 	ldw	r4,184(sp)
 c009ab4:	d9402f17 	ldw	r5,188(sp)
 c009ab8:	20800017 	ldw	r2,0(r4)
 c009abc:	21000104 	addi	r4,r4,4
 c009ac0:	d9002e15 	stw	r4,184(sp)
 c009ac4:	11400015 	stw	r5,0(r2)
 c009ac8:	0038ab06 	br	c007d78 <__alt_data_end+0xfc007d78>
 c009acc:	dd802617 	ldw	r22,152(sp)
 c009ad0:	00bfff44 	movi	r2,-3
 c009ad4:	b0801c16 	blt	r22,r2,c009b48 <___vfprintf_internal_r+0x1eb0>
 c009ad8:	d9402a17 	ldw	r5,168(sp)
 c009adc:	2d801a16 	blt	r5,r22,c009b48 <___vfprintf_internal_r+0x1eb0>
 c009ae0:	dd803215 	stw	r22,200(sp)
 c009ae4:	003e8906 	br	c00950c <__alt_data_end+0xfc00950c>
 c009ae8:	010300b4 	movhi	r4,3074
 c009aec:	21229584 	addi	r4,r4,-30122
 c009af0:	d9002c15 	stw	r4,176(sp)
 c009af4:	003c9106 	br	c008d3c <__alt_data_end+0xfc008d3c>
 c009af8:	e005883a 	mov	r2,fp
 c009afc:	003e7906 	br	c0094e4 <__alt_data_end+0xfc0094e4>
 c009b00:	d9002a17 	ldw	r4,168(sp)
 c009b04:	df002783 	ldbu	fp,158(sp)
 c009b08:	dcc02e15 	stw	r19,184(sp)
 c009b0c:	d9002915 	stw	r4,164(sp)
 c009b10:	d9002b15 	stw	r4,172(sp)
 c009b14:	d8002a15 	stw	zero,168(sp)
 c009b18:	d8003215 	stw	zero,200(sp)
 c009b1c:	003a3b06 	br	c00840c <__alt_data_end+0xfc00840c>
 c009b20:	9080004c 	andi	r2,r18,1
 c009b24:	0039883a 	mov	fp,zero
 c009b28:	10000426 	beq	r2,zero,c009b3c <___vfprintf_internal_r+0x1ea4>
 c009b2c:	00800c04 	movi	r2,48
 c009b30:	dc001dc4 	addi	r16,sp,119
 c009b34:	d8801dc5 	stb	r2,119(sp)
 c009b38:	003b6406 	br	c0088cc <__alt_data_end+0xfc0088cc>
 c009b3c:	d8002b15 	stw	zero,172(sp)
 c009b40:	dc001e04 	addi	r16,sp,120
 c009b44:	003a2b06 	br	c0083f4 <__alt_data_end+0xfc0083f4>
 c009b48:	8c7fff84 	addi	r17,r17,-2
 c009b4c:	b5bfffc4 	addi	r22,r22,-1
 c009b50:	dd802615 	stw	r22,152(sp)
 c009b54:	dc4022c5 	stb	r17,139(sp)
 c009b58:	b000bf16 	blt	r22,zero,c009e58 <___vfprintf_internal_r+0x21c0>
 c009b5c:	00800ac4 	movi	r2,43
 c009b60:	d8802305 	stb	r2,140(sp)
 c009b64:	00800244 	movi	r2,9
 c009b68:	15807016 	blt	r2,r22,c009d2c <___vfprintf_internal_r+0x2094>
 c009b6c:	00800c04 	movi	r2,48
 c009b70:	b5800c04 	addi	r22,r22,48
 c009b74:	d8802345 	stb	r2,141(sp)
 c009b78:	dd802385 	stb	r22,142(sp)
 c009b7c:	d88023c4 	addi	r2,sp,143
 c009b80:	df0022c4 	addi	fp,sp,139
 c009b84:	d8c03317 	ldw	r3,204(sp)
 c009b88:	1739c83a 	sub	fp,r2,fp
 c009b8c:	d9003317 	ldw	r4,204(sp)
 c009b90:	e0c7883a 	add	r3,fp,r3
 c009b94:	df003a15 	stw	fp,232(sp)
 c009b98:	d8c02b15 	stw	r3,172(sp)
 c009b9c:	00800044 	movi	r2,1
 c009ba0:	1100b30e 	bge	r2,r4,c009e70 <___vfprintf_internal_r+0x21d8>
 c009ba4:	d8c02b17 	ldw	r3,172(sp)
 c009ba8:	18c00044 	addi	r3,r3,1
 c009bac:	d8c02b15 	stw	r3,172(sp)
 c009bb0:	1805883a 	mov	r2,r3
 c009bb4:	1800ac16 	blt	r3,zero,c009e68 <___vfprintf_internal_r+0x21d0>
 c009bb8:	d8003215 	stw	zero,200(sp)
 c009bbc:	003e5d06 	br	c009534 <__alt_data_end+0xfc009534>
 c009bc0:	d9002d17 	ldw	r4,180(sp)
 c009bc4:	d9801e04 	addi	r6,sp,120
 c009bc8:	b80b883a 	mov	r5,r23
 c009bcc:	c01009c0 	call	c01009c <__sprint_r>
 c009bd0:	1039351e 	bne	r2,zero,c0080a8 <__alt_data_end+0xfc0080a8>
 c009bd4:	dc402617 	ldw	r17,152(sp)
 c009bd8:	d8c02017 	ldw	r3,128(sp)
 c009bdc:	d8801f17 	ldw	r2,124(sp)
 c009be0:	da000404 	addi	r8,sp,16
 c009be4:	003ed606 	br	c009740 <__alt_data_end+0xfc009740>
 c009be8:	182b883a 	mov	r21,r3
 c009bec:	d8002a15 	stw	zero,168(sp)
 c009bf0:	00388c06 	br	c007e24 <__alt_data_end+0xfc007e24>
 c009bf4:	d8802a17 	ldw	r2,168(sp)
 c009bf8:	103e071e 	bne	r2,zero,c009418 <__alt_data_end+0xfc009418>
 c009bfc:	dc002a15 	stw	r16,168(sp)
 c009c00:	003e0506 	br	c009418 <__alt_data_end+0xfc009418>
 c009c04:	d9002a17 	ldw	r4,168(sp)
 c009c08:	20c00044 	addi	r3,r4,1
 c009c0c:	003e0f06 	br	c00944c <__alt_data_end+0xfc00944c>
 c009c10:	01400184 	movi	r5,6
 c009c14:	d9402a15 	stw	r5,168(sp)
 c009c18:	003dff06 	br	c009418 <__alt_data_end+0xfc009418>
 c009c1c:	d8802104 	addi	r2,sp,132
 c009c20:	d8800315 	stw	r2,12(sp)
 c009c24:	d8802504 	addi	r2,sp,148
 c009c28:	d8800215 	stw	r2,8(sp)
 c009c2c:	d8802604 	addi	r2,sp,152
 c009c30:	d8800115 	stw	r2,4(sp)
 c009c34:	d8802a17 	ldw	r2,168(sp)
 c009c38:	d9403617 	ldw	r5,216(sp)
 c009c3c:	d9002d17 	ldw	r4,180(sp)
 c009c40:	d8800015 	stw	r2,0(sp)
 c009c44:	01c000c4 	movi	r7,3
 c009c48:	980d883a 	mov	r6,r19
 c009c4c:	da003d15 	stw	r8,244(sp)
 c009c50:	c00a3c80 	call	c00a3c8 <_dtoa_r>
 c009c54:	d8c02a17 	ldw	r3,168(sp)
 c009c58:	da003d17 	ldw	r8,244(sp)
 c009c5c:	1021883a 	mov	r16,r2
 c009c60:	10f9883a 	add	fp,r2,r3
 c009c64:	81000007 	ldb	r4,0(r16)
 c009c68:	00800c04 	movi	r2,48
 c009c6c:	20805e26 	beq	r4,r2,c009de8 <___vfprintf_internal_r+0x2150>
 c009c70:	d8c02617 	ldw	r3,152(sp)
 c009c74:	e0f9883a 	add	fp,fp,r3
 c009c78:	003e0a06 	br	c0094a4 <__alt_data_end+0xfc0094a4>
 c009c7c:	00c00b44 	movi	r3,45
 c009c80:	24e0003c 	xorhi	r19,r4,32768
 c009c84:	d8c02905 	stb	r3,164(sp)
 c009c88:	003de906 	br	c009430 <__alt_data_end+0xfc009430>
 c009c8c:	d8c03217 	ldw	r3,200(sp)
 c009c90:	00c07a0e 	bge	zero,r3,c009e7c <___vfprintf_internal_r+0x21e4>
 c009c94:	00800044 	movi	r2,1
 c009c98:	d9003317 	ldw	r4,204(sp)
 c009c9c:	1105883a 	add	r2,r2,r4
 c009ca0:	d8802b15 	stw	r2,172(sp)
 c009ca4:	10004e16 	blt	r2,zero,c009de0 <___vfprintf_internal_r+0x2148>
 c009ca8:	044019c4 	movi	r17,103
 c009cac:	003e2106 	br	c009534 <__alt_data_end+0xfc009534>
 c009cb0:	d9002a17 	ldw	r4,168(sp)
 c009cb4:	d8802104 	addi	r2,sp,132
 c009cb8:	d8800315 	stw	r2,12(sp)
 c009cbc:	d9000015 	stw	r4,0(sp)
 c009cc0:	d8802504 	addi	r2,sp,148
 c009cc4:	d9403617 	ldw	r5,216(sp)
 c009cc8:	d9002d17 	ldw	r4,180(sp)
 c009ccc:	d8800215 	stw	r2,8(sp)
 c009cd0:	d8802604 	addi	r2,sp,152
 c009cd4:	d8800115 	stw	r2,4(sp)
 c009cd8:	01c000c4 	movi	r7,3
 c009cdc:	980d883a 	mov	r6,r19
 c009ce0:	da003d15 	stw	r8,244(sp)
 c009ce4:	c00a3c80 	call	c00a3c8 <_dtoa_r>
 c009ce8:	d8c02a17 	ldw	r3,168(sp)
 c009cec:	da003d17 	ldw	r8,244(sp)
 c009cf0:	1021883a 	mov	r16,r2
 c009cf4:	00801184 	movi	r2,70
 c009cf8:	80f9883a 	add	fp,r16,r3
 c009cfc:	88bfd926 	beq	r17,r2,c009c64 <__alt_data_end+0xfc009c64>
 c009d00:	003de806 	br	c0094a4 <__alt_data_end+0xfc0094a4>
 c009d04:	d9002a17 	ldw	r4,168(sp)
 c009d08:	00c04d0e 	bge	zero,r3,c009e40 <___vfprintf_internal_r+0x21a8>
 c009d0c:	2000441e 	bne	r4,zero,c009e20 <___vfprintf_internal_r+0x2188>
 c009d10:	9480004c 	andi	r18,r18,1
 c009d14:	9000421e 	bne	r18,zero,c009e20 <___vfprintf_internal_r+0x2188>
 c009d18:	1805883a 	mov	r2,r3
 c009d1c:	18006f16 	blt	r3,zero,c009edc <___vfprintf_internal_r+0x2244>
 c009d20:	d8c03217 	ldw	r3,200(sp)
 c009d24:	d8c02b15 	stw	r3,172(sp)
 c009d28:	003e0206 	br	c009534 <__alt_data_end+0xfc009534>
 c009d2c:	df0022c4 	addi	fp,sp,139
 c009d30:	dc002a15 	stw	r16,168(sp)
 c009d34:	4027883a 	mov	r19,r8
 c009d38:	e021883a 	mov	r16,fp
 c009d3c:	b009883a 	mov	r4,r22
 c009d40:	01400284 	movi	r5,10
 c009d44:	c004b4c0 	call	c004b4c <__modsi3>
 c009d48:	10800c04 	addi	r2,r2,48
 c009d4c:	843fffc4 	addi	r16,r16,-1
 c009d50:	b009883a 	mov	r4,r22
 c009d54:	01400284 	movi	r5,10
 c009d58:	80800005 	stb	r2,0(r16)
 c009d5c:	c004ac80 	call	c004ac8 <__divsi3>
 c009d60:	102d883a 	mov	r22,r2
 c009d64:	00800244 	movi	r2,9
 c009d68:	15bff416 	blt	r2,r22,c009d3c <__alt_data_end+0xfc009d3c>
 c009d6c:	9811883a 	mov	r8,r19
 c009d70:	b0800c04 	addi	r2,r22,48
 c009d74:	8027883a 	mov	r19,r16
 c009d78:	997fffc4 	addi	r5,r19,-1
 c009d7c:	98bfffc5 	stb	r2,-1(r19)
 c009d80:	dc002a17 	ldw	r16,168(sp)
 c009d84:	2f006d2e 	bgeu	r5,fp,c009f3c <___vfprintf_internal_r+0x22a4>
 c009d88:	d9c02384 	addi	r7,sp,142
 c009d8c:	3ccfc83a 	sub	r7,r7,r19
 c009d90:	d9002344 	addi	r4,sp,141
 c009d94:	e1cf883a 	add	r7,fp,r7
 c009d98:	00000106 	br	c009da0 <___vfprintf_internal_r+0x2108>
 c009d9c:	28800003 	ldbu	r2,0(r5)
 c009da0:	20800005 	stb	r2,0(r4)
 c009da4:	21000044 	addi	r4,r4,1
 c009da8:	29400044 	addi	r5,r5,1
 c009dac:	393ffb1e 	bne	r7,r4,c009d9c <__alt_data_end+0xfc009d9c>
 c009db0:	d8802304 	addi	r2,sp,140
 c009db4:	14c5c83a 	sub	r2,r2,r19
 c009db8:	d8c02344 	addi	r3,sp,141
 c009dbc:	1885883a 	add	r2,r3,r2
 c009dc0:	003f7006 	br	c009b84 <__alt_data_end+0xfc009b84>
 c009dc4:	0005883a 	mov	r2,zero
 c009dc8:	003f0f06 	br	c009a08 <__alt_data_end+0xfc009a08>
 c009dcc:	d8c03217 	ldw	r3,200(sp)
 c009dd0:	18c00044 	addi	r3,r3,1
 c009dd4:	d8c02b15 	stw	r3,172(sp)
 c009dd8:	1805883a 	mov	r2,r3
 c009ddc:	183fb20e 	bge	r3,zero,c009ca8 <__alt_data_end+0xfc009ca8>
 c009de0:	0005883a 	mov	r2,zero
 c009de4:	003fb006 	br	c009ca8 <__alt_data_end+0xfc009ca8>
 c009de8:	d9003617 	ldw	r4,216(sp)
 c009dec:	000d883a 	mov	r6,zero
 c009df0:	000f883a 	mov	r7,zero
 c009df4:	980b883a 	mov	r5,r19
 c009df8:	d8c03c15 	stw	r3,240(sp)
 c009dfc:	da003d15 	stw	r8,244(sp)
 c009e00:	c013f2c0 	call	c013f2c <__eqdf2>
 c009e04:	d8c03c17 	ldw	r3,240(sp)
 c009e08:	da003d17 	ldw	r8,244(sp)
 c009e0c:	103f9826 	beq	r2,zero,c009c70 <__alt_data_end+0xfc009c70>
 c009e10:	00800044 	movi	r2,1
 c009e14:	10c7c83a 	sub	r3,r2,r3
 c009e18:	d8c02615 	stw	r3,152(sp)
 c009e1c:	003f9506 	br	c009c74 <__alt_data_end+0xfc009c74>
 c009e20:	d9002a17 	ldw	r4,168(sp)
 c009e24:	d8c03217 	ldw	r3,200(sp)
 c009e28:	20800044 	addi	r2,r4,1
 c009e2c:	1885883a 	add	r2,r3,r2
 c009e30:	d8802b15 	stw	r2,172(sp)
 c009e34:	103dbf0e 	bge	r2,zero,c009534 <__alt_data_end+0xfc009534>
 c009e38:	0005883a 	mov	r2,zero
 c009e3c:	003dbd06 	br	c009534 <__alt_data_end+0xfc009534>
 c009e40:	2000201e 	bne	r4,zero,c009ec4 <___vfprintf_internal_r+0x222c>
 c009e44:	9480004c 	andi	r18,r18,1
 c009e48:	90001e1e 	bne	r18,zero,c009ec4 <___vfprintf_internal_r+0x222c>
 c009e4c:	00800044 	movi	r2,1
 c009e50:	d8802b15 	stw	r2,172(sp)
 c009e54:	003db706 	br	c009534 <__alt_data_end+0xfc009534>
 c009e58:	00800b44 	movi	r2,45
 c009e5c:	05adc83a 	sub	r22,zero,r22
 c009e60:	d8802305 	stb	r2,140(sp)
 c009e64:	003f3f06 	br	c009b64 <__alt_data_end+0xfc009b64>
 c009e68:	0005883a 	mov	r2,zero
 c009e6c:	003f5206 	br	c009bb8 <__alt_data_end+0xfc009bb8>
 c009e70:	90a4703a 	and	r18,r18,r2
 c009e74:	903f4e26 	beq	r18,zero,c009bb0 <__alt_data_end+0xfc009bb0>
 c009e78:	003f4a06 	br	c009ba4 <__alt_data_end+0xfc009ba4>
 c009e7c:	00800084 	movi	r2,2
 c009e80:	10c5c83a 	sub	r2,r2,r3
 c009e84:	003f8406 	br	c009c98 <__alt_data_end+0xfc009c98>
 c009e88:	d9402e17 	ldw	r5,184(sp)
 c009e8c:	d9002e17 	ldw	r4,184(sp)
 c009e90:	ac400043 	ldbu	r17,1(r21)
 c009e94:	29400017 	ldw	r5,0(r5)
 c009e98:	20800104 	addi	r2,r4,4
 c009e9c:	d8802e15 	stw	r2,184(sp)
 c009ea0:	d9402a15 	stw	r5,168(sp)
 c009ea4:	182b883a 	mov	r21,r3
 c009ea8:	283e7b0e 	bge	r5,zero,c009898 <__alt_data_end+0xfc009898>
 c009eac:	8c403fcc 	andi	r17,r17,255
 c009eb0:	017fffc4 	movi	r5,-1
 c009eb4:	8c40201c 	xori	r17,r17,128
 c009eb8:	d9402a15 	stw	r5,168(sp)
 c009ebc:	8c7fe004 	addi	r17,r17,-128
 c009ec0:	0037d706 	br	c007e20 <__alt_data_end+0xfc007e20>
 c009ec4:	d8c02a17 	ldw	r3,168(sp)
 c009ec8:	18c00084 	addi	r3,r3,2
 c009ecc:	d8c02b15 	stw	r3,172(sp)
 c009ed0:	1805883a 	mov	r2,r3
 c009ed4:	183d970e 	bge	r3,zero,c009534 <__alt_data_end+0xfc009534>
 c009ed8:	003fd706 	br	c009e38 <__alt_data_end+0xfc009e38>
 c009edc:	0005883a 	mov	r2,zero
 c009ee0:	003f8f06 	br	c009d20 <__alt_data_end+0xfc009d20>
 c009ee4:	9080004c 	andi	r2,r18,1
 c009ee8:	103f821e 	bne	r2,zero,c009cf4 <__alt_data_end+0xfc009cf4>
 c009eec:	d8802117 	ldw	r2,132(sp)
 c009ef0:	1405c83a 	sub	r2,r2,r16
 c009ef4:	d8803315 	stw	r2,204(sp)
 c009ef8:	b47ef426 	beq	r22,r17,c009acc <__alt_data_end+0xfc009acc>
 c009efc:	dd802617 	ldw	r22,152(sp)
 c009f00:	003f1206 	br	c009b4c <__alt_data_end+0xfc009b4c>
 c009f04:	d8c02b03 	ldbu	r3,172(sp)
 c009f08:	d8c02785 	stb	r3,158(sp)
 c009f0c:	0038df06 	br	c00828c <__alt_data_end+0xfc00828c>
 c009f10:	d8c02b03 	ldbu	r3,172(sp)
 c009f14:	d8c02785 	stb	r3,158(sp)
 c009f18:	0038aa06 	br	c0081c4 <__alt_data_end+0xfc0081c4>
 c009f1c:	d8c02b03 	ldbu	r3,172(sp)
 c009f20:	d8c02785 	stb	r3,158(sp)
 c009f24:	003a4306 	br	c008834 <__alt_data_end+0xfc008834>
 c009f28:	d8c02b03 	ldbu	r3,172(sp)
 c009f2c:	d8c02785 	stb	r3,158(sp)
 c009f30:	003af506 	br	c008b08 <__alt_data_end+0xfc008b08>
 c009f34:	0005883a 	mov	r2,zero
 c009f38:	003d7b06 	br	c009528 <__alt_data_end+0xfc009528>
 c009f3c:	d8802344 	addi	r2,sp,141
 c009f40:	003f1006 	br	c009b84 <__alt_data_end+0xfc009b84>
 c009f44:	d8c02b03 	ldbu	r3,172(sp)
 c009f48:	d8c02785 	stb	r3,158(sp)
 c009f4c:	0038fd06 	br	c008344 <__alt_data_end+0xfc008344>
 c009f50:	d8c02b03 	ldbu	r3,172(sp)
 c009f54:	d8c02785 	stb	r3,158(sp)
 c009f58:	003a9706 	br	c0089b8 <__alt_data_end+0xfc0089b8>
 c009f5c:	d8c02b03 	ldbu	r3,172(sp)
 c009f60:	d8c02785 	stb	r3,158(sp)
 c009f64:	003a1806 	br	c0087c8 <__alt_data_end+0xfc0087c8>
 c009f68:	d8c02b03 	ldbu	r3,172(sp)
 c009f6c:	d8c02785 	stb	r3,158(sp)
 c009f70:	003abe06 	br	c008a6c <__alt_data_end+0xfc008a6c>

0c009f74 <__vfprintf_internal>:
 c009f74:	008300b4 	movhi	r2,3074
 c009f78:	10aac804 	addi	r2,r2,-21728
 c009f7c:	300f883a 	mov	r7,r6
 c009f80:	280d883a 	mov	r6,r5
 c009f84:	200b883a 	mov	r5,r4
 c009f88:	11000017 	ldw	r4,0(r2)
 c009f8c:	c007c981 	jmpi	c007c98 <___vfprintf_internal_r>

0c009f90 <__sbprintf>:
 c009f90:	2880030b 	ldhu	r2,12(r5)
 c009f94:	2ac01917 	ldw	r11,100(r5)
 c009f98:	2a80038b 	ldhu	r10,14(r5)
 c009f9c:	2a400717 	ldw	r9,28(r5)
 c009fa0:	2a000917 	ldw	r8,36(r5)
 c009fa4:	defee204 	addi	sp,sp,-1144
 c009fa8:	00c10004 	movi	r3,1024
 c009fac:	dc011a15 	stw	r16,1128(sp)
 c009fb0:	10bfff4c 	andi	r2,r2,65533
 c009fb4:	2821883a 	mov	r16,r5
 c009fb8:	d8cb883a 	add	r5,sp,r3
 c009fbc:	dc811c15 	stw	r18,1136(sp)
 c009fc0:	dc411b15 	stw	r17,1132(sp)
 c009fc4:	dfc11d15 	stw	ra,1140(sp)
 c009fc8:	2025883a 	mov	r18,r4
 c009fcc:	d881030d 	sth	r2,1036(sp)
 c009fd0:	dac11915 	stw	r11,1124(sp)
 c009fd4:	da81038d 	sth	r10,1038(sp)
 c009fd8:	da410715 	stw	r9,1052(sp)
 c009fdc:	da010915 	stw	r8,1060(sp)
 c009fe0:	dec10015 	stw	sp,1024(sp)
 c009fe4:	dec10415 	stw	sp,1040(sp)
 c009fe8:	d8c10215 	stw	r3,1032(sp)
 c009fec:	d8c10515 	stw	r3,1044(sp)
 c009ff0:	d8010615 	stw	zero,1048(sp)
 c009ff4:	c007c980 	call	c007c98 <___vfprintf_internal_r>
 c009ff8:	1023883a 	mov	r17,r2
 c009ffc:	10000416 	blt	r2,zero,c00a010 <__sbprintf+0x80>
 c00a000:	d9410004 	addi	r5,sp,1024
 c00a004:	9009883a 	mov	r4,r18
 c00a008:	c00bc6c0 	call	c00bc6c <_fflush_r>
 c00a00c:	10000d1e 	bne	r2,zero,c00a044 <__sbprintf+0xb4>
 c00a010:	d881030b 	ldhu	r2,1036(sp)
 c00a014:	1080100c 	andi	r2,r2,64
 c00a018:	10000326 	beq	r2,zero,c00a028 <__sbprintf+0x98>
 c00a01c:	8080030b 	ldhu	r2,12(r16)
 c00a020:	10801014 	ori	r2,r2,64
 c00a024:	8080030d 	sth	r2,12(r16)
 c00a028:	8805883a 	mov	r2,r17
 c00a02c:	dfc11d17 	ldw	ra,1140(sp)
 c00a030:	dc811c17 	ldw	r18,1136(sp)
 c00a034:	dc411b17 	ldw	r17,1132(sp)
 c00a038:	dc011a17 	ldw	r16,1128(sp)
 c00a03c:	dec11e04 	addi	sp,sp,1144
 c00a040:	f800283a 	ret
 c00a044:	047fffc4 	movi	r17,-1
 c00a048:	003ff106 	br	c00a010 <__alt_data_end+0xfc00a010>

0c00a04c <__swsetup_r>:
 c00a04c:	008300b4 	movhi	r2,3074
 c00a050:	defffd04 	addi	sp,sp,-12
 c00a054:	10aac804 	addi	r2,r2,-21728
 c00a058:	dc400115 	stw	r17,4(sp)
 c00a05c:	2023883a 	mov	r17,r4
 c00a060:	11000017 	ldw	r4,0(r2)
 c00a064:	dc000015 	stw	r16,0(sp)
 c00a068:	dfc00215 	stw	ra,8(sp)
 c00a06c:	2821883a 	mov	r16,r5
 c00a070:	20000226 	beq	r4,zero,c00a07c <__swsetup_r+0x30>
 c00a074:	20800e17 	ldw	r2,56(r4)
 c00a078:	10003126 	beq	r2,zero,c00a140 <__swsetup_r+0xf4>
 c00a07c:	8080030b 	ldhu	r2,12(r16)
 c00a080:	10c0020c 	andi	r3,r2,8
 c00a084:	1009883a 	mov	r4,r2
 c00a088:	18000f26 	beq	r3,zero,c00a0c8 <__swsetup_r+0x7c>
 c00a08c:	80c00417 	ldw	r3,16(r16)
 c00a090:	18001526 	beq	r3,zero,c00a0e8 <__swsetup_r+0x9c>
 c00a094:	1100004c 	andi	r4,r2,1
 c00a098:	20001c1e 	bne	r4,zero,c00a10c <__swsetup_r+0xc0>
 c00a09c:	1080008c 	andi	r2,r2,2
 c00a0a0:	1000291e 	bne	r2,zero,c00a148 <__swsetup_r+0xfc>
 c00a0a4:	80800517 	ldw	r2,20(r16)
 c00a0a8:	80800215 	stw	r2,8(r16)
 c00a0ac:	18001c26 	beq	r3,zero,c00a120 <__swsetup_r+0xd4>
 c00a0b0:	0005883a 	mov	r2,zero
 c00a0b4:	dfc00217 	ldw	ra,8(sp)
 c00a0b8:	dc400117 	ldw	r17,4(sp)
 c00a0bc:	dc000017 	ldw	r16,0(sp)
 c00a0c0:	dec00304 	addi	sp,sp,12
 c00a0c4:	f800283a 	ret
 c00a0c8:	2080040c 	andi	r2,r4,16
 c00a0cc:	10002e26 	beq	r2,zero,c00a188 <__swsetup_r+0x13c>
 c00a0d0:	2080010c 	andi	r2,r4,4
 c00a0d4:	10001e1e 	bne	r2,zero,c00a150 <__swsetup_r+0x104>
 c00a0d8:	80c00417 	ldw	r3,16(r16)
 c00a0dc:	20800214 	ori	r2,r4,8
 c00a0e0:	8080030d 	sth	r2,12(r16)
 c00a0e4:	183feb1e 	bne	r3,zero,c00a094 <__alt_data_end+0xfc00a094>
 c00a0e8:	1100a00c 	andi	r4,r2,640
 c00a0ec:	01408004 	movi	r5,512
 c00a0f0:	217fe826 	beq	r4,r5,c00a094 <__alt_data_end+0xfc00a094>
 c00a0f4:	800b883a 	mov	r5,r16
 c00a0f8:	8809883a 	mov	r4,r17
 c00a0fc:	c00cc640 	call	c00cc64 <__smakebuf_r>
 c00a100:	8080030b 	ldhu	r2,12(r16)
 c00a104:	80c00417 	ldw	r3,16(r16)
 c00a108:	003fe206 	br	c00a094 <__alt_data_end+0xfc00a094>
 c00a10c:	80800517 	ldw	r2,20(r16)
 c00a110:	80000215 	stw	zero,8(r16)
 c00a114:	0085c83a 	sub	r2,zero,r2
 c00a118:	80800615 	stw	r2,24(r16)
 c00a11c:	183fe41e 	bne	r3,zero,c00a0b0 <__alt_data_end+0xfc00a0b0>
 c00a120:	80c0030b 	ldhu	r3,12(r16)
 c00a124:	0005883a 	mov	r2,zero
 c00a128:	1900200c 	andi	r4,r3,128
 c00a12c:	203fe126 	beq	r4,zero,c00a0b4 <__alt_data_end+0xfc00a0b4>
 c00a130:	18c01014 	ori	r3,r3,64
 c00a134:	80c0030d 	sth	r3,12(r16)
 c00a138:	00bfffc4 	movi	r2,-1
 c00a13c:	003fdd06 	br	c00a0b4 <__alt_data_end+0xfc00a0b4>
 c00a140:	c00c0580 	call	c00c058 <__sinit>
 c00a144:	003fcd06 	br	c00a07c <__alt_data_end+0xfc00a07c>
 c00a148:	0005883a 	mov	r2,zero
 c00a14c:	003fd606 	br	c00a0a8 <__alt_data_end+0xfc00a0a8>
 c00a150:	81400c17 	ldw	r5,48(r16)
 c00a154:	28000626 	beq	r5,zero,c00a170 <__swsetup_r+0x124>
 c00a158:	80801004 	addi	r2,r16,64
 c00a15c:	28800326 	beq	r5,r2,c00a16c <__swsetup_r+0x120>
 c00a160:	8809883a 	mov	r4,r17
 c00a164:	c00c1cc0 	call	c00c1cc <_free_r>
 c00a168:	8100030b 	ldhu	r4,12(r16)
 c00a16c:	80000c15 	stw	zero,48(r16)
 c00a170:	80c00417 	ldw	r3,16(r16)
 c00a174:	00bff6c4 	movi	r2,-37
 c00a178:	1108703a 	and	r4,r2,r4
 c00a17c:	80000115 	stw	zero,4(r16)
 c00a180:	80c00015 	stw	r3,0(r16)
 c00a184:	003fd506 	br	c00a0dc <__alt_data_end+0xfc00a0dc>
 c00a188:	00800244 	movi	r2,9
 c00a18c:	88800015 	stw	r2,0(r17)
 c00a190:	20801014 	ori	r2,r4,64
 c00a194:	8080030d 	sth	r2,12(r16)
 c00a198:	00bfffc4 	movi	r2,-1
 c00a19c:	003fc506 	br	c00a0b4 <__alt_data_end+0xfc00a0b4>

0c00a1a0 <quorem>:
 c00a1a0:	defff204 	addi	sp,sp,-56
 c00a1a4:	ddc00b15 	stw	r23,44(sp)
 c00a1a8:	20800417 	ldw	r2,16(r4)
 c00a1ac:	2dc00417 	ldw	r23,16(r5)
 c00a1b0:	dfc00d15 	stw	ra,52(sp)
 c00a1b4:	df000c15 	stw	fp,48(sp)
 c00a1b8:	dd800a15 	stw	r22,40(sp)
 c00a1bc:	dd400915 	stw	r21,36(sp)
 c00a1c0:	dd000815 	stw	r20,32(sp)
 c00a1c4:	dcc00715 	stw	r19,28(sp)
 c00a1c8:	dc800615 	stw	r18,24(sp)
 c00a1cc:	dc400515 	stw	r17,20(sp)
 c00a1d0:	dc000415 	stw	r16,16(sp)
 c00a1d4:	15c07a16 	blt	r2,r23,c00a3c0 <quorem+0x220>
 c00a1d8:	bdffffc4 	addi	r23,r23,-1
 c00a1dc:	bde9883a 	add	r20,r23,r23
 c00a1e0:	28c00504 	addi	r3,r5,20
 c00a1e4:	a529883a 	add	r20,r20,r20
 c00a1e8:	1d39883a 	add	fp,r3,r20
 c00a1ec:	24c00504 	addi	r19,r4,20
 c00a1f0:	d9400215 	stw	r5,8(sp)
 c00a1f4:	9d29883a 	add	r20,r19,r20
 c00a1f8:	e1400017 	ldw	r5,0(fp)
 c00a1fc:	d9000015 	stw	r4,0(sp)
 c00a200:	a1000017 	ldw	r4,0(r20)
 c00a204:	29400044 	addi	r5,r5,1
 c00a208:	d8c00115 	stw	r3,4(sp)
 c00a20c:	dd000315 	stw	r20,12(sp)
 c00a210:	c004bc00 	call	c004bc0 <__udivsi3>
 c00a214:	1025883a 	mov	r18,r2
 c00a218:	10003026 	beq	r2,zero,c00a2dc <quorem+0x13c>
 c00a21c:	dc400117 	ldw	r17,4(sp)
 c00a220:	9829883a 	mov	r20,r19
 c00a224:	002d883a 	mov	r22,zero
 c00a228:	0021883a 	mov	r16,zero
 c00a22c:	8d400017 	ldw	r21,0(r17)
 c00a230:	900b883a 	mov	r5,r18
 c00a234:	8c400104 	addi	r17,r17,4
 c00a238:	a93fffcc 	andi	r4,r21,65535
 c00a23c:	c004c7c0 	call	c004c7c <__mulsi3>
 c00a240:	a808d43a 	srli	r4,r21,16
 c00a244:	900b883a 	mov	r5,r18
 c00a248:	15ad883a 	add	r22,r2,r22
 c00a24c:	c004c7c0 	call	c004c7c <__mulsi3>
 c00a250:	a1000017 	ldw	r4,0(r20)
 c00a254:	b00cd43a 	srli	r6,r22,16
 c00a258:	b0ffffcc 	andi	r3,r22,65535
 c00a25c:	217fffcc 	andi	r5,r4,65535
 c00a260:	2c21883a 	add	r16,r5,r16
 c00a264:	80c7c83a 	sub	r3,r16,r3
 c00a268:	2008d43a 	srli	r4,r4,16
 c00a26c:	1185883a 	add	r2,r2,r6
 c00a270:	1821d43a 	srai	r16,r3,16
 c00a274:	117fffcc 	andi	r5,r2,65535
 c00a278:	2149c83a 	sub	r4,r4,r5
 c00a27c:	2421883a 	add	r16,r4,r16
 c00a280:	8008943a 	slli	r4,r16,16
 c00a284:	18ffffcc 	andi	r3,r3,65535
 c00a288:	102cd43a 	srli	r22,r2,16
 c00a28c:	20c8b03a 	or	r4,r4,r3
 c00a290:	a1000015 	stw	r4,0(r20)
 c00a294:	8021d43a 	srai	r16,r16,16
 c00a298:	a5000104 	addi	r20,r20,4
 c00a29c:	e47fe32e 	bgeu	fp,r17,c00a22c <__alt_data_end+0xfc00a22c>
 c00a2a0:	d8c00317 	ldw	r3,12(sp)
 c00a2a4:	18800017 	ldw	r2,0(r3)
 c00a2a8:	10000c1e 	bne	r2,zero,c00a2dc <quorem+0x13c>
 c00a2ac:	18bfff04 	addi	r2,r3,-4
 c00a2b0:	9880082e 	bgeu	r19,r2,c00a2d4 <quorem+0x134>
 c00a2b4:	18ffff17 	ldw	r3,-4(r3)
 c00a2b8:	18000326 	beq	r3,zero,c00a2c8 <quorem+0x128>
 c00a2bc:	00000506 	br	c00a2d4 <quorem+0x134>
 c00a2c0:	10c00017 	ldw	r3,0(r2)
 c00a2c4:	1800031e 	bne	r3,zero,c00a2d4 <quorem+0x134>
 c00a2c8:	10bfff04 	addi	r2,r2,-4
 c00a2cc:	bdffffc4 	addi	r23,r23,-1
 c00a2d0:	98bffb36 	bltu	r19,r2,c00a2c0 <__alt_data_end+0xfc00a2c0>
 c00a2d4:	d8c00017 	ldw	r3,0(sp)
 c00a2d8:	1dc00415 	stw	r23,16(r3)
 c00a2dc:	d9400217 	ldw	r5,8(sp)
 c00a2e0:	d9000017 	ldw	r4,0(sp)
 c00a2e4:	c00db0c0 	call	c00db0c <__mcmp>
 c00a2e8:	10002816 	blt	r2,zero,c00a38c <quorem+0x1ec>
 c00a2ec:	dc400117 	ldw	r17,4(sp)
 c00a2f0:	94800044 	addi	r18,r18,1
 c00a2f4:	980d883a 	mov	r6,r19
 c00a2f8:	0007883a 	mov	r3,zero
 c00a2fc:	31000017 	ldw	r4,0(r6)
 c00a300:	89400017 	ldw	r5,0(r17)
 c00a304:	31800104 	addi	r6,r6,4
 c00a308:	20bfffcc 	andi	r2,r4,65535
 c00a30c:	10c7883a 	add	r3,r2,r3
 c00a310:	28bfffcc 	andi	r2,r5,65535
 c00a314:	1885c83a 	sub	r2,r3,r2
 c00a318:	280ad43a 	srli	r5,r5,16
 c00a31c:	2008d43a 	srli	r4,r4,16
 c00a320:	1007d43a 	srai	r3,r2,16
 c00a324:	10bfffcc 	andi	r2,r2,65535
 c00a328:	2149c83a 	sub	r4,r4,r5
 c00a32c:	20c9883a 	add	r4,r4,r3
 c00a330:	200a943a 	slli	r5,r4,16
 c00a334:	8c400104 	addi	r17,r17,4
 c00a338:	2007d43a 	srai	r3,r4,16
 c00a33c:	2884b03a 	or	r2,r5,r2
 c00a340:	30bfff15 	stw	r2,-4(r6)
 c00a344:	e47fed2e 	bgeu	fp,r17,c00a2fc <__alt_data_end+0xfc00a2fc>
 c00a348:	bdc5883a 	add	r2,r23,r23
 c00a34c:	1085883a 	add	r2,r2,r2
 c00a350:	9887883a 	add	r3,r19,r2
 c00a354:	18800017 	ldw	r2,0(r3)
 c00a358:	10000c1e 	bne	r2,zero,c00a38c <quorem+0x1ec>
 c00a35c:	18bfff04 	addi	r2,r3,-4
 c00a360:	9880082e 	bgeu	r19,r2,c00a384 <quorem+0x1e4>
 c00a364:	18ffff17 	ldw	r3,-4(r3)
 c00a368:	18000326 	beq	r3,zero,c00a378 <quorem+0x1d8>
 c00a36c:	00000506 	br	c00a384 <quorem+0x1e4>
 c00a370:	10c00017 	ldw	r3,0(r2)
 c00a374:	1800031e 	bne	r3,zero,c00a384 <quorem+0x1e4>
 c00a378:	10bfff04 	addi	r2,r2,-4
 c00a37c:	bdffffc4 	addi	r23,r23,-1
 c00a380:	98bffb36 	bltu	r19,r2,c00a370 <__alt_data_end+0xfc00a370>
 c00a384:	d8c00017 	ldw	r3,0(sp)
 c00a388:	1dc00415 	stw	r23,16(r3)
 c00a38c:	9005883a 	mov	r2,r18
 c00a390:	dfc00d17 	ldw	ra,52(sp)
 c00a394:	df000c17 	ldw	fp,48(sp)
 c00a398:	ddc00b17 	ldw	r23,44(sp)
 c00a39c:	dd800a17 	ldw	r22,40(sp)
 c00a3a0:	dd400917 	ldw	r21,36(sp)
 c00a3a4:	dd000817 	ldw	r20,32(sp)
 c00a3a8:	dcc00717 	ldw	r19,28(sp)
 c00a3ac:	dc800617 	ldw	r18,24(sp)
 c00a3b0:	dc400517 	ldw	r17,20(sp)
 c00a3b4:	dc000417 	ldw	r16,16(sp)
 c00a3b8:	dec00e04 	addi	sp,sp,56
 c00a3bc:	f800283a 	ret
 c00a3c0:	0005883a 	mov	r2,zero
 c00a3c4:	003ff206 	br	c00a390 <__alt_data_end+0xfc00a390>

0c00a3c8 <_dtoa_r>:
 c00a3c8:	20801017 	ldw	r2,64(r4)
 c00a3cc:	deffde04 	addi	sp,sp,-136
 c00a3d0:	df002015 	stw	fp,128(sp)
 c00a3d4:	dcc01b15 	stw	r19,108(sp)
 c00a3d8:	dc801a15 	stw	r18,104(sp)
 c00a3dc:	dc401915 	stw	r17,100(sp)
 c00a3e0:	dc001815 	stw	r16,96(sp)
 c00a3e4:	dfc02115 	stw	ra,132(sp)
 c00a3e8:	ddc01f15 	stw	r23,124(sp)
 c00a3ec:	dd801e15 	stw	r22,120(sp)
 c00a3f0:	dd401d15 	stw	r21,116(sp)
 c00a3f4:	dd001c15 	stw	r20,112(sp)
 c00a3f8:	d9c00315 	stw	r7,12(sp)
 c00a3fc:	2039883a 	mov	fp,r4
 c00a400:	3023883a 	mov	r17,r6
 c00a404:	2825883a 	mov	r18,r5
 c00a408:	dc002417 	ldw	r16,144(sp)
 c00a40c:	3027883a 	mov	r19,r6
 c00a410:	10000826 	beq	r2,zero,c00a434 <_dtoa_r+0x6c>
 c00a414:	21801117 	ldw	r6,68(r4)
 c00a418:	00c00044 	movi	r3,1
 c00a41c:	100b883a 	mov	r5,r2
 c00a420:	1986983a 	sll	r3,r3,r6
 c00a424:	11800115 	stw	r6,4(r2)
 c00a428:	10c00215 	stw	r3,8(r2)
 c00a42c:	c00d2300 	call	c00d230 <_Bfree>
 c00a430:	e0001015 	stw	zero,64(fp)
 c00a434:	88002e16 	blt	r17,zero,c00a4f0 <_dtoa_r+0x128>
 c00a438:	80000015 	stw	zero,0(r16)
 c00a43c:	889ffc2c 	andhi	r2,r17,32752
 c00a440:	00dffc34 	movhi	r3,32752
 c00a444:	10c01c26 	beq	r2,r3,c00a4b8 <_dtoa_r+0xf0>
 c00a448:	000d883a 	mov	r6,zero
 c00a44c:	000f883a 	mov	r7,zero
 c00a450:	9009883a 	mov	r4,r18
 c00a454:	980b883a 	mov	r5,r19
 c00a458:	c013f2c0 	call	c013f2c <__eqdf2>
 c00a45c:	10002b1e 	bne	r2,zero,c00a50c <_dtoa_r+0x144>
 c00a460:	d9c02317 	ldw	r7,140(sp)
 c00a464:	00800044 	movi	r2,1
 c00a468:	38800015 	stw	r2,0(r7)
 c00a46c:	d8802517 	ldw	r2,148(sp)
 c00a470:	10019e26 	beq	r2,zero,c00aaec <_dtoa_r+0x724>
 c00a474:	d8c02517 	ldw	r3,148(sp)
 c00a478:	008300b4 	movhi	r2,3074
 c00a47c:	10a28d44 	addi	r2,r2,-30155
 c00a480:	18800015 	stw	r2,0(r3)
 c00a484:	10bfffc4 	addi	r2,r2,-1
 c00a488:	dfc02117 	ldw	ra,132(sp)
 c00a48c:	df002017 	ldw	fp,128(sp)
 c00a490:	ddc01f17 	ldw	r23,124(sp)
 c00a494:	dd801e17 	ldw	r22,120(sp)
 c00a498:	dd401d17 	ldw	r21,116(sp)
 c00a49c:	dd001c17 	ldw	r20,112(sp)
 c00a4a0:	dcc01b17 	ldw	r19,108(sp)
 c00a4a4:	dc801a17 	ldw	r18,104(sp)
 c00a4a8:	dc401917 	ldw	r17,100(sp)
 c00a4ac:	dc001817 	ldw	r16,96(sp)
 c00a4b0:	dec02204 	addi	sp,sp,136
 c00a4b4:	f800283a 	ret
 c00a4b8:	d8c02317 	ldw	r3,140(sp)
 c00a4bc:	0089c3c4 	movi	r2,9999
 c00a4c0:	18800015 	stw	r2,0(r3)
 c00a4c4:	90017726 	beq	r18,zero,c00aaa4 <_dtoa_r+0x6dc>
 c00a4c8:	008300b4 	movhi	r2,3074
 c00a4cc:	10a2a104 	addi	r2,r2,-30076
 c00a4d0:	d9002517 	ldw	r4,148(sp)
 c00a4d4:	203fec26 	beq	r4,zero,c00a488 <__alt_data_end+0xfc00a488>
 c00a4d8:	10c000c7 	ldb	r3,3(r2)
 c00a4dc:	1801781e 	bne	r3,zero,c00aac0 <_dtoa_r+0x6f8>
 c00a4e0:	10c000c4 	addi	r3,r2,3
 c00a4e4:	d9802517 	ldw	r6,148(sp)
 c00a4e8:	30c00015 	stw	r3,0(r6)
 c00a4ec:	003fe606 	br	c00a488 <__alt_data_end+0xfc00a488>
 c00a4f0:	04e00034 	movhi	r19,32768
 c00a4f4:	9cffffc4 	addi	r19,r19,-1
 c00a4f8:	00800044 	movi	r2,1
 c00a4fc:	8ce6703a 	and	r19,r17,r19
 c00a500:	80800015 	stw	r2,0(r16)
 c00a504:	9823883a 	mov	r17,r19
 c00a508:	003fcc06 	br	c00a43c <__alt_data_end+0xfc00a43c>
 c00a50c:	d8800204 	addi	r2,sp,8
 c00a510:	d8800015 	stw	r2,0(sp)
 c00a514:	d9c00104 	addi	r7,sp,4
 c00a518:	900b883a 	mov	r5,r18
 c00a51c:	980d883a 	mov	r6,r19
 c00a520:	e009883a 	mov	r4,fp
 c00a524:	8820d53a 	srli	r16,r17,20
 c00a528:	c00ded80 	call	c00ded8 <__d2b>
 c00a52c:	d8800915 	stw	r2,36(sp)
 c00a530:	8001651e 	bne	r16,zero,c00aac8 <_dtoa_r+0x700>
 c00a534:	dd800217 	ldw	r22,8(sp)
 c00a538:	dc000117 	ldw	r16,4(sp)
 c00a53c:	00800804 	movi	r2,32
 c00a540:	b421883a 	add	r16,r22,r16
 c00a544:	80c10c84 	addi	r3,r16,1074
 c00a548:	10c2d10e 	bge	r2,r3,c00b090 <_dtoa_r+0xcc8>
 c00a54c:	00801004 	movi	r2,64
 c00a550:	81010484 	addi	r4,r16,1042
 c00a554:	10c7c83a 	sub	r3,r2,r3
 c00a558:	9108d83a 	srl	r4,r18,r4
 c00a55c:	88e2983a 	sll	r17,r17,r3
 c00a560:	2448b03a 	or	r4,r4,r17
 c00a564:	c0154480 	call	c015448 <__floatunsidf>
 c00a568:	017f8434 	movhi	r5,65040
 c00a56c:	01800044 	movi	r6,1
 c00a570:	1009883a 	mov	r4,r2
 c00a574:	194b883a 	add	r5,r3,r5
 c00a578:	843fffc4 	addi	r16,r16,-1
 c00a57c:	d9801115 	stw	r6,68(sp)
 c00a580:	000d883a 	mov	r6,zero
 c00a584:	01cffe34 	movhi	r7,16376
 c00a588:	c0149f00 	call	c0149f0 <__subdf3>
 c00a58c:	0198dbf4 	movhi	r6,25455
 c00a590:	01cff4f4 	movhi	r7,16339
 c00a594:	3190d844 	addi	r6,r6,17249
 c00a598:	39e1e9c4 	addi	r7,r7,-30809
 c00a59c:	1009883a 	mov	r4,r2
 c00a5a0:	180b883a 	mov	r5,r3
 c00a5a4:	c0141840 	call	c014184 <__muldf3>
 c00a5a8:	01a2d874 	movhi	r6,35681
 c00a5ac:	01cff1f4 	movhi	r7,16327
 c00a5b0:	31b22cc4 	addi	r6,r6,-14157
 c00a5b4:	39e28a04 	addi	r7,r7,-30168
 c00a5b8:	180b883a 	mov	r5,r3
 c00a5bc:	1009883a 	mov	r4,r2
 c00a5c0:	c012cb00 	call	c012cb0 <__adddf3>
 c00a5c4:	8009883a 	mov	r4,r16
 c00a5c8:	1029883a 	mov	r20,r2
 c00a5cc:	1823883a 	mov	r17,r3
 c00a5d0:	c01536c0 	call	c01536c <__floatsidf>
 c00a5d4:	019427f4 	movhi	r6,20639
 c00a5d8:	01cff4f4 	movhi	r7,16339
 c00a5dc:	319e7ec4 	addi	r6,r6,31227
 c00a5e0:	39d104c4 	addi	r7,r7,17427
 c00a5e4:	1009883a 	mov	r4,r2
 c00a5e8:	180b883a 	mov	r5,r3
 c00a5ec:	c0141840 	call	c014184 <__muldf3>
 c00a5f0:	100d883a 	mov	r6,r2
 c00a5f4:	180f883a 	mov	r7,r3
 c00a5f8:	a009883a 	mov	r4,r20
 c00a5fc:	880b883a 	mov	r5,r17
 c00a600:	c012cb00 	call	c012cb0 <__adddf3>
 c00a604:	1009883a 	mov	r4,r2
 c00a608:	180b883a 	mov	r5,r3
 c00a60c:	1029883a 	mov	r20,r2
 c00a610:	1823883a 	mov	r17,r3
 c00a614:	c0152ec0 	call	c0152ec <__fixdfsi>
 c00a618:	000d883a 	mov	r6,zero
 c00a61c:	000f883a 	mov	r7,zero
 c00a620:	a009883a 	mov	r4,r20
 c00a624:	880b883a 	mov	r5,r17
 c00a628:	d8800515 	stw	r2,20(sp)
 c00a62c:	c0140900 	call	c014090 <__ledf2>
 c00a630:	10028716 	blt	r2,zero,c00b050 <_dtoa_r+0xc88>
 c00a634:	d8c00517 	ldw	r3,20(sp)
 c00a638:	00800584 	movi	r2,22
 c00a63c:	10c27536 	bltu	r2,r3,c00b014 <_dtoa_r+0xc4c>
 c00a640:	180490fa 	slli	r2,r3,3
 c00a644:	00c300b4 	movhi	r3,3074
 c00a648:	18e2bd04 	addi	r3,r3,-29964
 c00a64c:	1885883a 	add	r2,r3,r2
 c00a650:	11000017 	ldw	r4,0(r2)
 c00a654:	11400117 	ldw	r5,4(r2)
 c00a658:	900d883a 	mov	r6,r18
 c00a65c:	980f883a 	mov	r7,r19
 c00a660:	c013fb40 	call	c013fb4 <__gedf2>
 c00a664:	00828d0e 	bge	zero,r2,c00b09c <_dtoa_r+0xcd4>
 c00a668:	d9000517 	ldw	r4,20(sp)
 c00a66c:	d8000e15 	stw	zero,56(sp)
 c00a670:	213fffc4 	addi	r4,r4,-1
 c00a674:	d9000515 	stw	r4,20(sp)
 c00a678:	b42dc83a 	sub	r22,r22,r16
 c00a67c:	b5bfffc4 	addi	r22,r22,-1
 c00a680:	b0026f16 	blt	r22,zero,c00b040 <_dtoa_r+0xc78>
 c00a684:	d8000815 	stw	zero,32(sp)
 c00a688:	d9c00517 	ldw	r7,20(sp)
 c00a68c:	38026416 	blt	r7,zero,c00b020 <_dtoa_r+0xc58>
 c00a690:	b1ed883a 	add	r22,r22,r7
 c00a694:	d9c00d15 	stw	r7,52(sp)
 c00a698:	d8000a15 	stw	zero,40(sp)
 c00a69c:	d9800317 	ldw	r6,12(sp)
 c00a6a0:	00800244 	movi	r2,9
 c00a6a4:	11811436 	bltu	r2,r6,c00aaf8 <_dtoa_r+0x730>
 c00a6a8:	00800144 	movi	r2,5
 c00a6ac:	1184e10e 	bge	r2,r6,c00ba34 <_dtoa_r+0x166c>
 c00a6b0:	31bfff04 	addi	r6,r6,-4
 c00a6b4:	d9800315 	stw	r6,12(sp)
 c00a6b8:	0023883a 	mov	r17,zero
 c00a6bc:	d9800317 	ldw	r6,12(sp)
 c00a6c0:	008000c4 	movi	r2,3
 c00a6c4:	30836726 	beq	r6,r2,c00b464 <_dtoa_r+0x109c>
 c00a6c8:	1183410e 	bge	r2,r6,c00b3d0 <_dtoa_r+0x1008>
 c00a6cc:	d9c00317 	ldw	r7,12(sp)
 c00a6d0:	00800104 	movi	r2,4
 c00a6d4:	38827c26 	beq	r7,r2,c00b0c8 <_dtoa_r+0xd00>
 c00a6d8:	00800144 	movi	r2,5
 c00a6dc:	3884c41e 	bne	r7,r2,c00b9f0 <_dtoa_r+0x1628>
 c00a6e0:	00800044 	movi	r2,1
 c00a6e4:	d8800b15 	stw	r2,44(sp)
 c00a6e8:	d8c00517 	ldw	r3,20(sp)
 c00a6ec:	d9002217 	ldw	r4,136(sp)
 c00a6f0:	1907883a 	add	r3,r3,r4
 c00a6f4:	19800044 	addi	r6,r3,1
 c00a6f8:	d8c00c15 	stw	r3,48(sp)
 c00a6fc:	d9800615 	stw	r6,24(sp)
 c00a700:	0183a40e 	bge	zero,r6,c00b594 <_dtoa_r+0x11cc>
 c00a704:	d9800617 	ldw	r6,24(sp)
 c00a708:	3021883a 	mov	r16,r6
 c00a70c:	e0001115 	stw	zero,68(fp)
 c00a710:	008005c4 	movi	r2,23
 c00a714:	1184c92e 	bgeu	r2,r6,c00ba3c <_dtoa_r+0x1674>
 c00a718:	00c00044 	movi	r3,1
 c00a71c:	00800104 	movi	r2,4
 c00a720:	1085883a 	add	r2,r2,r2
 c00a724:	11000504 	addi	r4,r2,20
 c00a728:	180b883a 	mov	r5,r3
 c00a72c:	18c00044 	addi	r3,r3,1
 c00a730:	313ffb2e 	bgeu	r6,r4,c00a720 <__alt_data_end+0xfc00a720>
 c00a734:	e1401115 	stw	r5,68(fp)
 c00a738:	e009883a 	mov	r4,fp
 c00a73c:	c00d1880 	call	c00d188 <_Balloc>
 c00a740:	d8800715 	stw	r2,28(sp)
 c00a744:	e0801015 	stw	r2,64(fp)
 c00a748:	00800384 	movi	r2,14
 c00a74c:	1400f736 	bltu	r2,r16,c00ab2c <_dtoa_r+0x764>
 c00a750:	8800f626 	beq	r17,zero,c00ab2c <_dtoa_r+0x764>
 c00a754:	d9c00517 	ldw	r7,20(sp)
 c00a758:	01c39a0e 	bge	zero,r7,c00b5c4 <_dtoa_r+0x11fc>
 c00a75c:	388003cc 	andi	r2,r7,15
 c00a760:	100490fa 	slli	r2,r2,3
 c00a764:	382bd13a 	srai	r21,r7,4
 c00a768:	00c300b4 	movhi	r3,3074
 c00a76c:	18e2bd04 	addi	r3,r3,-29964
 c00a770:	1885883a 	add	r2,r3,r2
 c00a774:	a8c0040c 	andi	r3,r21,16
 c00a778:	12400017 	ldw	r9,0(r2)
 c00a77c:	12000117 	ldw	r8,4(r2)
 c00a780:	18037926 	beq	r3,zero,c00b568 <_dtoa_r+0x11a0>
 c00a784:	008300b4 	movhi	r2,3074
 c00a788:	10a2b304 	addi	r2,r2,-30004
 c00a78c:	11800817 	ldw	r6,32(r2)
 c00a790:	11c00917 	ldw	r7,36(r2)
 c00a794:	9009883a 	mov	r4,r18
 c00a798:	980b883a 	mov	r5,r19
 c00a79c:	da001715 	stw	r8,92(sp)
 c00a7a0:	da401615 	stw	r9,88(sp)
 c00a7a4:	c01355c0 	call	c01355c <__divdf3>
 c00a7a8:	da001717 	ldw	r8,92(sp)
 c00a7ac:	da401617 	ldw	r9,88(sp)
 c00a7b0:	ad4003cc 	andi	r21,r21,15
 c00a7b4:	040000c4 	movi	r16,3
 c00a7b8:	1023883a 	mov	r17,r2
 c00a7bc:	1829883a 	mov	r20,r3
 c00a7c0:	a8001126 	beq	r21,zero,c00a808 <_dtoa_r+0x440>
 c00a7c4:	05c300b4 	movhi	r23,3074
 c00a7c8:	bde2b304 	addi	r23,r23,-30004
 c00a7cc:	4805883a 	mov	r2,r9
 c00a7d0:	4007883a 	mov	r3,r8
 c00a7d4:	a980004c 	andi	r6,r21,1
 c00a7d8:	1009883a 	mov	r4,r2
 c00a7dc:	a82bd07a 	srai	r21,r21,1
 c00a7e0:	180b883a 	mov	r5,r3
 c00a7e4:	30000426 	beq	r6,zero,c00a7f8 <_dtoa_r+0x430>
 c00a7e8:	b9800017 	ldw	r6,0(r23)
 c00a7ec:	b9c00117 	ldw	r7,4(r23)
 c00a7f0:	84000044 	addi	r16,r16,1
 c00a7f4:	c0141840 	call	c014184 <__muldf3>
 c00a7f8:	bdc00204 	addi	r23,r23,8
 c00a7fc:	a83ff51e 	bne	r21,zero,c00a7d4 <__alt_data_end+0xfc00a7d4>
 c00a800:	1013883a 	mov	r9,r2
 c00a804:	1811883a 	mov	r8,r3
 c00a808:	480d883a 	mov	r6,r9
 c00a80c:	400f883a 	mov	r7,r8
 c00a810:	8809883a 	mov	r4,r17
 c00a814:	a00b883a 	mov	r5,r20
 c00a818:	c01355c0 	call	c01355c <__divdf3>
 c00a81c:	d8800f15 	stw	r2,60(sp)
 c00a820:	d8c01015 	stw	r3,64(sp)
 c00a824:	d8c00e17 	ldw	r3,56(sp)
 c00a828:	18000626 	beq	r3,zero,c00a844 <_dtoa_r+0x47c>
 c00a82c:	d9000f17 	ldw	r4,60(sp)
 c00a830:	d9401017 	ldw	r5,64(sp)
 c00a834:	000d883a 	mov	r6,zero
 c00a838:	01cffc34 	movhi	r7,16368
 c00a83c:	c0140900 	call	c014090 <__ledf2>
 c00a840:	10040b16 	blt	r2,zero,c00b870 <_dtoa_r+0x14a8>
 c00a844:	8009883a 	mov	r4,r16
 c00a848:	c01536c0 	call	c01536c <__floatsidf>
 c00a84c:	d9800f17 	ldw	r6,60(sp)
 c00a850:	d9c01017 	ldw	r7,64(sp)
 c00a854:	1009883a 	mov	r4,r2
 c00a858:	180b883a 	mov	r5,r3
 c00a85c:	c0141840 	call	c014184 <__muldf3>
 c00a860:	000d883a 	mov	r6,zero
 c00a864:	01d00734 	movhi	r7,16412
 c00a868:	1009883a 	mov	r4,r2
 c00a86c:	180b883a 	mov	r5,r3
 c00a870:	c012cb00 	call	c012cb0 <__adddf3>
 c00a874:	1021883a 	mov	r16,r2
 c00a878:	d8800617 	ldw	r2,24(sp)
 c00a87c:	047f3034 	movhi	r17,64704
 c00a880:	1c63883a 	add	r17,r3,r17
 c00a884:	10031826 	beq	r2,zero,c00b4e8 <_dtoa_r+0x1120>
 c00a888:	d8c00517 	ldw	r3,20(sp)
 c00a88c:	db000617 	ldw	r12,24(sp)
 c00a890:	d8c01315 	stw	r3,76(sp)
 c00a894:	d9000b17 	ldw	r4,44(sp)
 c00a898:	20038f26 	beq	r4,zero,c00b6d8 <_dtoa_r+0x1310>
 c00a89c:	60bfffc4 	addi	r2,r12,-1
 c00a8a0:	100490fa 	slli	r2,r2,3
 c00a8a4:	00c300b4 	movhi	r3,3074
 c00a8a8:	18e2bd04 	addi	r3,r3,-29964
 c00a8ac:	1885883a 	add	r2,r3,r2
 c00a8b0:	11800017 	ldw	r6,0(r2)
 c00a8b4:	11c00117 	ldw	r7,4(r2)
 c00a8b8:	d8800717 	ldw	r2,28(sp)
 c00a8bc:	0009883a 	mov	r4,zero
 c00a8c0:	014ff834 	movhi	r5,16352
 c00a8c4:	db001615 	stw	r12,88(sp)
 c00a8c8:	15c00044 	addi	r23,r2,1
 c00a8cc:	c01355c0 	call	c01355c <__divdf3>
 c00a8d0:	800d883a 	mov	r6,r16
 c00a8d4:	880f883a 	mov	r7,r17
 c00a8d8:	1009883a 	mov	r4,r2
 c00a8dc:	180b883a 	mov	r5,r3
 c00a8e0:	c0149f00 	call	c0149f0 <__subdf3>
 c00a8e4:	d9401017 	ldw	r5,64(sp)
 c00a8e8:	d9000f17 	ldw	r4,60(sp)
 c00a8ec:	102b883a 	mov	r21,r2
 c00a8f0:	d8c01215 	stw	r3,72(sp)
 c00a8f4:	c0152ec0 	call	c0152ec <__fixdfsi>
 c00a8f8:	1009883a 	mov	r4,r2
 c00a8fc:	1029883a 	mov	r20,r2
 c00a900:	c01536c0 	call	c01536c <__floatsidf>
 c00a904:	d9000f17 	ldw	r4,60(sp)
 c00a908:	d9401017 	ldw	r5,64(sp)
 c00a90c:	100d883a 	mov	r6,r2
 c00a910:	180f883a 	mov	r7,r3
 c00a914:	c0149f00 	call	c0149f0 <__subdf3>
 c00a918:	1823883a 	mov	r17,r3
 c00a91c:	d8c00717 	ldw	r3,28(sp)
 c00a920:	d9401217 	ldw	r5,72(sp)
 c00a924:	a2000c04 	addi	r8,r20,48
 c00a928:	1021883a 	mov	r16,r2
 c00a92c:	1a000005 	stb	r8,0(r3)
 c00a930:	800d883a 	mov	r6,r16
 c00a934:	880f883a 	mov	r7,r17
 c00a938:	a809883a 	mov	r4,r21
 c00a93c:	4029883a 	mov	r20,r8
 c00a940:	c013fb40 	call	c013fb4 <__gedf2>
 c00a944:	00841d16 	blt	zero,r2,c00b9bc <_dtoa_r+0x15f4>
 c00a948:	800d883a 	mov	r6,r16
 c00a94c:	880f883a 	mov	r7,r17
 c00a950:	0009883a 	mov	r4,zero
 c00a954:	014ffc34 	movhi	r5,16368
 c00a958:	c0149f00 	call	c0149f0 <__subdf3>
 c00a95c:	d9401217 	ldw	r5,72(sp)
 c00a960:	100d883a 	mov	r6,r2
 c00a964:	180f883a 	mov	r7,r3
 c00a968:	a809883a 	mov	r4,r21
 c00a96c:	c013fb40 	call	c013fb4 <__gedf2>
 c00a970:	db001617 	ldw	r12,88(sp)
 c00a974:	00840e16 	blt	zero,r2,c00b9b0 <_dtoa_r+0x15e8>
 c00a978:	00800044 	movi	r2,1
 c00a97c:	13006b0e 	bge	r2,r12,c00ab2c <_dtoa_r+0x764>
 c00a980:	d9000717 	ldw	r4,28(sp)
 c00a984:	dd800f15 	stw	r22,60(sp)
 c00a988:	dcc01015 	stw	r19,64(sp)
 c00a98c:	2319883a 	add	r12,r4,r12
 c00a990:	dcc01217 	ldw	r19,72(sp)
 c00a994:	602d883a 	mov	r22,r12
 c00a998:	dc801215 	stw	r18,72(sp)
 c00a99c:	b825883a 	mov	r18,r23
 c00a9a0:	00000906 	br	c00a9c8 <_dtoa_r+0x600>
 c00a9a4:	c0149f00 	call	c0149f0 <__subdf3>
 c00a9a8:	a80d883a 	mov	r6,r21
 c00a9ac:	980f883a 	mov	r7,r19
 c00a9b0:	1009883a 	mov	r4,r2
 c00a9b4:	180b883a 	mov	r5,r3
 c00a9b8:	c0140900 	call	c014090 <__ledf2>
 c00a9bc:	1003e816 	blt	r2,zero,c00b960 <_dtoa_r+0x1598>
 c00a9c0:	b825883a 	mov	r18,r23
 c00a9c4:	bd83e926 	beq	r23,r22,c00b96c <_dtoa_r+0x15a4>
 c00a9c8:	a809883a 	mov	r4,r21
 c00a9cc:	980b883a 	mov	r5,r19
 c00a9d0:	000d883a 	mov	r6,zero
 c00a9d4:	01d00934 	movhi	r7,16420
 c00a9d8:	c0141840 	call	c014184 <__muldf3>
 c00a9dc:	000d883a 	mov	r6,zero
 c00a9e0:	01d00934 	movhi	r7,16420
 c00a9e4:	8009883a 	mov	r4,r16
 c00a9e8:	880b883a 	mov	r5,r17
 c00a9ec:	102b883a 	mov	r21,r2
 c00a9f0:	1827883a 	mov	r19,r3
 c00a9f4:	c0141840 	call	c014184 <__muldf3>
 c00a9f8:	180b883a 	mov	r5,r3
 c00a9fc:	1009883a 	mov	r4,r2
 c00aa00:	1821883a 	mov	r16,r3
 c00aa04:	1023883a 	mov	r17,r2
 c00aa08:	c0152ec0 	call	c0152ec <__fixdfsi>
 c00aa0c:	1009883a 	mov	r4,r2
 c00aa10:	1029883a 	mov	r20,r2
 c00aa14:	c01536c0 	call	c01536c <__floatsidf>
 c00aa18:	8809883a 	mov	r4,r17
 c00aa1c:	800b883a 	mov	r5,r16
 c00aa20:	100d883a 	mov	r6,r2
 c00aa24:	180f883a 	mov	r7,r3
 c00aa28:	c0149f00 	call	c0149f0 <__subdf3>
 c00aa2c:	a5000c04 	addi	r20,r20,48
 c00aa30:	a80d883a 	mov	r6,r21
 c00aa34:	980f883a 	mov	r7,r19
 c00aa38:	1009883a 	mov	r4,r2
 c00aa3c:	180b883a 	mov	r5,r3
 c00aa40:	95000005 	stb	r20,0(r18)
 c00aa44:	1021883a 	mov	r16,r2
 c00aa48:	1823883a 	mov	r17,r3
 c00aa4c:	c0140900 	call	c014090 <__ledf2>
 c00aa50:	bdc00044 	addi	r23,r23,1
 c00aa54:	800d883a 	mov	r6,r16
 c00aa58:	880f883a 	mov	r7,r17
 c00aa5c:	0009883a 	mov	r4,zero
 c00aa60:	014ffc34 	movhi	r5,16368
 c00aa64:	103fcf0e 	bge	r2,zero,c00a9a4 <__alt_data_end+0xfc00a9a4>
 c00aa68:	d8c01317 	ldw	r3,76(sp)
 c00aa6c:	d8c00515 	stw	r3,20(sp)
 c00aa70:	d9400917 	ldw	r5,36(sp)
 c00aa74:	e009883a 	mov	r4,fp
 c00aa78:	c00d2300 	call	c00d230 <_Bfree>
 c00aa7c:	d9000517 	ldw	r4,20(sp)
 c00aa80:	d9802317 	ldw	r6,140(sp)
 c00aa84:	d9c02517 	ldw	r7,148(sp)
 c00aa88:	b8000005 	stb	zero,0(r23)
 c00aa8c:	20800044 	addi	r2,r4,1
 c00aa90:	30800015 	stw	r2,0(r6)
 c00aa94:	3802aa26 	beq	r7,zero,c00b540 <_dtoa_r+0x1178>
 c00aa98:	3dc00015 	stw	r23,0(r7)
 c00aa9c:	d8800717 	ldw	r2,28(sp)
 c00aaa0:	003e7906 	br	c00a488 <__alt_data_end+0xfc00a488>
 c00aaa4:	00800434 	movhi	r2,16
 c00aaa8:	10bfffc4 	addi	r2,r2,-1
 c00aaac:	88a2703a 	and	r17,r17,r2
 c00aab0:	883e851e 	bne	r17,zero,c00a4c8 <__alt_data_end+0xfc00a4c8>
 c00aab4:	008300b4 	movhi	r2,3074
 c00aab8:	10a29e04 	addi	r2,r2,-30088
 c00aabc:	003e8406 	br	c00a4d0 <__alt_data_end+0xfc00a4d0>
 c00aac0:	10c00204 	addi	r3,r2,8
 c00aac4:	003e8706 	br	c00a4e4 <__alt_data_end+0xfc00a4e4>
 c00aac8:	01400434 	movhi	r5,16
 c00aacc:	297fffc4 	addi	r5,r5,-1
 c00aad0:	994a703a 	and	r5,r19,r5
 c00aad4:	9009883a 	mov	r4,r18
 c00aad8:	843f0044 	addi	r16,r16,-1023
 c00aadc:	294ffc34 	orhi	r5,r5,16368
 c00aae0:	dd800217 	ldw	r22,8(sp)
 c00aae4:	d8001115 	stw	zero,68(sp)
 c00aae8:	003ea506 	br	c00a580 <__alt_data_end+0xfc00a580>
 c00aaec:	008300b4 	movhi	r2,3074
 c00aaf0:	10a28d04 	addi	r2,r2,-30156
 c00aaf4:	003e6406 	br	c00a488 <__alt_data_end+0xfc00a488>
 c00aaf8:	e0001115 	stw	zero,68(fp)
 c00aafc:	000b883a 	mov	r5,zero
 c00ab00:	e009883a 	mov	r4,fp
 c00ab04:	c00d1880 	call	c00d188 <_Balloc>
 c00ab08:	01bfffc4 	movi	r6,-1
 c00ab0c:	01c00044 	movi	r7,1
 c00ab10:	d8800715 	stw	r2,28(sp)
 c00ab14:	d9800c15 	stw	r6,48(sp)
 c00ab18:	e0801015 	stw	r2,64(fp)
 c00ab1c:	d8000315 	stw	zero,12(sp)
 c00ab20:	d9c00b15 	stw	r7,44(sp)
 c00ab24:	d9800615 	stw	r6,24(sp)
 c00ab28:	d8002215 	stw	zero,136(sp)
 c00ab2c:	d8800117 	ldw	r2,4(sp)
 c00ab30:	10008916 	blt	r2,zero,c00ad58 <_dtoa_r+0x990>
 c00ab34:	d9000517 	ldw	r4,20(sp)
 c00ab38:	00c00384 	movi	r3,14
 c00ab3c:	19008616 	blt	r3,r4,c00ad58 <_dtoa_r+0x990>
 c00ab40:	200490fa 	slli	r2,r4,3
 c00ab44:	00c300b4 	movhi	r3,3074
 c00ab48:	d9802217 	ldw	r6,136(sp)
 c00ab4c:	18e2bd04 	addi	r3,r3,-29964
 c00ab50:	1885883a 	add	r2,r3,r2
 c00ab54:	14000017 	ldw	r16,0(r2)
 c00ab58:	14400117 	ldw	r17,4(r2)
 c00ab5c:	30016316 	blt	r6,zero,c00b0ec <_dtoa_r+0xd24>
 c00ab60:	800d883a 	mov	r6,r16
 c00ab64:	880f883a 	mov	r7,r17
 c00ab68:	9009883a 	mov	r4,r18
 c00ab6c:	980b883a 	mov	r5,r19
 c00ab70:	c01355c0 	call	c01355c <__divdf3>
 c00ab74:	180b883a 	mov	r5,r3
 c00ab78:	1009883a 	mov	r4,r2
 c00ab7c:	c0152ec0 	call	c0152ec <__fixdfsi>
 c00ab80:	1009883a 	mov	r4,r2
 c00ab84:	102b883a 	mov	r21,r2
 c00ab88:	c01536c0 	call	c01536c <__floatsidf>
 c00ab8c:	800d883a 	mov	r6,r16
 c00ab90:	880f883a 	mov	r7,r17
 c00ab94:	1009883a 	mov	r4,r2
 c00ab98:	180b883a 	mov	r5,r3
 c00ab9c:	c0141840 	call	c014184 <__muldf3>
 c00aba0:	100d883a 	mov	r6,r2
 c00aba4:	180f883a 	mov	r7,r3
 c00aba8:	9009883a 	mov	r4,r18
 c00abac:	980b883a 	mov	r5,r19
 c00abb0:	c0149f00 	call	c0149f0 <__subdf3>
 c00abb4:	d9c00717 	ldw	r7,28(sp)
 c00abb8:	1009883a 	mov	r4,r2
 c00abbc:	a8800c04 	addi	r2,r21,48
 c00abc0:	38800005 	stb	r2,0(r7)
 c00abc4:	3dc00044 	addi	r23,r7,1
 c00abc8:	d9c00617 	ldw	r7,24(sp)
 c00abcc:	01800044 	movi	r6,1
 c00abd0:	180b883a 	mov	r5,r3
 c00abd4:	2005883a 	mov	r2,r4
 c00abd8:	39803826 	beq	r7,r6,c00acbc <_dtoa_r+0x8f4>
 c00abdc:	000d883a 	mov	r6,zero
 c00abe0:	01d00934 	movhi	r7,16420
 c00abe4:	c0141840 	call	c014184 <__muldf3>
 c00abe8:	000d883a 	mov	r6,zero
 c00abec:	000f883a 	mov	r7,zero
 c00abf0:	1009883a 	mov	r4,r2
 c00abf4:	180b883a 	mov	r5,r3
 c00abf8:	1025883a 	mov	r18,r2
 c00abfc:	1827883a 	mov	r19,r3
 c00ac00:	c013f2c0 	call	c013f2c <__eqdf2>
 c00ac04:	103f9a26 	beq	r2,zero,c00aa70 <__alt_data_end+0xfc00aa70>
 c00ac08:	d9c00617 	ldw	r7,24(sp)
 c00ac0c:	d8c00717 	ldw	r3,28(sp)
 c00ac10:	b829883a 	mov	r20,r23
 c00ac14:	38bfffc4 	addi	r2,r7,-1
 c00ac18:	18ad883a 	add	r22,r3,r2
 c00ac1c:	00000a06 	br	c00ac48 <_dtoa_r+0x880>
 c00ac20:	c0141840 	call	c014184 <__muldf3>
 c00ac24:	000d883a 	mov	r6,zero
 c00ac28:	000f883a 	mov	r7,zero
 c00ac2c:	1009883a 	mov	r4,r2
 c00ac30:	180b883a 	mov	r5,r3
 c00ac34:	1025883a 	mov	r18,r2
 c00ac38:	1827883a 	mov	r19,r3
 c00ac3c:	b829883a 	mov	r20,r23
 c00ac40:	c013f2c0 	call	c013f2c <__eqdf2>
 c00ac44:	103f8a26 	beq	r2,zero,c00aa70 <__alt_data_end+0xfc00aa70>
 c00ac48:	800d883a 	mov	r6,r16
 c00ac4c:	880f883a 	mov	r7,r17
 c00ac50:	9009883a 	mov	r4,r18
 c00ac54:	980b883a 	mov	r5,r19
 c00ac58:	c01355c0 	call	c01355c <__divdf3>
 c00ac5c:	180b883a 	mov	r5,r3
 c00ac60:	1009883a 	mov	r4,r2
 c00ac64:	c0152ec0 	call	c0152ec <__fixdfsi>
 c00ac68:	1009883a 	mov	r4,r2
 c00ac6c:	102b883a 	mov	r21,r2
 c00ac70:	c01536c0 	call	c01536c <__floatsidf>
 c00ac74:	800d883a 	mov	r6,r16
 c00ac78:	880f883a 	mov	r7,r17
 c00ac7c:	1009883a 	mov	r4,r2
 c00ac80:	180b883a 	mov	r5,r3
 c00ac84:	c0141840 	call	c014184 <__muldf3>
 c00ac88:	100d883a 	mov	r6,r2
 c00ac8c:	180f883a 	mov	r7,r3
 c00ac90:	9009883a 	mov	r4,r18
 c00ac94:	980b883a 	mov	r5,r19
 c00ac98:	c0149f00 	call	c0149f0 <__subdf3>
 c00ac9c:	aa000c04 	addi	r8,r21,48
 c00aca0:	a2000005 	stb	r8,0(r20)
 c00aca4:	000d883a 	mov	r6,zero
 c00aca8:	01d00934 	movhi	r7,16420
 c00acac:	1009883a 	mov	r4,r2
 c00acb0:	180b883a 	mov	r5,r3
 c00acb4:	a5c00044 	addi	r23,r20,1
 c00acb8:	b53fd91e 	bne	r22,r20,c00ac20 <__alt_data_end+0xfc00ac20>
 c00acbc:	100d883a 	mov	r6,r2
 c00acc0:	180f883a 	mov	r7,r3
 c00acc4:	1009883a 	mov	r4,r2
 c00acc8:	180b883a 	mov	r5,r3
 c00accc:	c012cb00 	call	c012cb0 <__adddf3>
 c00acd0:	100d883a 	mov	r6,r2
 c00acd4:	180f883a 	mov	r7,r3
 c00acd8:	8009883a 	mov	r4,r16
 c00acdc:	880b883a 	mov	r5,r17
 c00ace0:	1027883a 	mov	r19,r2
 c00ace4:	1825883a 	mov	r18,r3
 c00ace8:	c0140900 	call	c014090 <__ledf2>
 c00acec:	10000816 	blt	r2,zero,c00ad10 <_dtoa_r+0x948>
 c00acf0:	980d883a 	mov	r6,r19
 c00acf4:	900f883a 	mov	r7,r18
 c00acf8:	8009883a 	mov	r4,r16
 c00acfc:	880b883a 	mov	r5,r17
 c00ad00:	c013f2c0 	call	c013f2c <__eqdf2>
 c00ad04:	103f5a1e 	bne	r2,zero,c00aa70 <__alt_data_end+0xfc00aa70>
 c00ad08:	ad40004c 	andi	r21,r21,1
 c00ad0c:	a83f5826 	beq	r21,zero,c00aa70 <__alt_data_end+0xfc00aa70>
 c00ad10:	bd3fffc3 	ldbu	r20,-1(r23)
 c00ad14:	b8bfffc4 	addi	r2,r23,-1
 c00ad18:	1007883a 	mov	r3,r2
 c00ad1c:	01400e44 	movi	r5,57
 c00ad20:	d9800717 	ldw	r6,28(sp)
 c00ad24:	00000506 	br	c00ad3c <_dtoa_r+0x974>
 c00ad28:	18ffffc4 	addi	r3,r3,-1
 c00ad2c:	11824726 	beq	r2,r6,c00b64c <_dtoa_r+0x1284>
 c00ad30:	1d000003 	ldbu	r20,0(r3)
 c00ad34:	102f883a 	mov	r23,r2
 c00ad38:	10bfffc4 	addi	r2,r2,-1
 c00ad3c:	a1003fcc 	andi	r4,r20,255
 c00ad40:	2100201c 	xori	r4,r4,128
 c00ad44:	213fe004 	addi	r4,r4,-128
 c00ad48:	217ff726 	beq	r4,r5,c00ad28 <__alt_data_end+0xfc00ad28>
 c00ad4c:	a2000044 	addi	r8,r20,1
 c00ad50:	12000005 	stb	r8,0(r2)
 c00ad54:	003f4606 	br	c00aa70 <__alt_data_end+0xfc00aa70>
 c00ad58:	d9000b17 	ldw	r4,44(sp)
 c00ad5c:	2000c826 	beq	r4,zero,c00b080 <_dtoa_r+0xcb8>
 c00ad60:	d9800317 	ldw	r6,12(sp)
 c00ad64:	00c00044 	movi	r3,1
 c00ad68:	1980f90e 	bge	r3,r6,c00b150 <_dtoa_r+0xd88>
 c00ad6c:	d8800617 	ldw	r2,24(sp)
 c00ad70:	d8c00a17 	ldw	r3,40(sp)
 c00ad74:	157fffc4 	addi	r21,r2,-1
 c00ad78:	1d41f316 	blt	r3,r21,c00b548 <_dtoa_r+0x1180>
 c00ad7c:	1d6bc83a 	sub	r21,r3,r21
 c00ad80:	d9c00617 	ldw	r7,24(sp)
 c00ad84:	3802aa16 	blt	r7,zero,c00b830 <_dtoa_r+0x1468>
 c00ad88:	dd000817 	ldw	r20,32(sp)
 c00ad8c:	d8800617 	ldw	r2,24(sp)
 c00ad90:	d8c00817 	ldw	r3,32(sp)
 c00ad94:	01400044 	movi	r5,1
 c00ad98:	e009883a 	mov	r4,fp
 c00ad9c:	1887883a 	add	r3,r3,r2
 c00ada0:	d8c00815 	stw	r3,32(sp)
 c00ada4:	b0ad883a 	add	r22,r22,r2
 c00ada8:	c00d5bc0 	call	c00d5bc <__i2b>
 c00adac:	1023883a 	mov	r17,r2
 c00adb0:	a0000826 	beq	r20,zero,c00add4 <_dtoa_r+0xa0c>
 c00adb4:	0580070e 	bge	zero,r22,c00add4 <_dtoa_r+0xa0c>
 c00adb8:	a005883a 	mov	r2,r20
 c00adbc:	b500b916 	blt	r22,r20,c00b0a4 <_dtoa_r+0xcdc>
 c00adc0:	d9000817 	ldw	r4,32(sp)
 c00adc4:	a0a9c83a 	sub	r20,r20,r2
 c00adc8:	b0adc83a 	sub	r22,r22,r2
 c00adcc:	2089c83a 	sub	r4,r4,r2
 c00add0:	d9000815 	stw	r4,32(sp)
 c00add4:	d9800a17 	ldw	r6,40(sp)
 c00add8:	0181810e 	bge	zero,r6,c00b3e0 <_dtoa_r+0x1018>
 c00addc:	d9c00b17 	ldw	r7,44(sp)
 c00ade0:	3800b326 	beq	r7,zero,c00b0b0 <_dtoa_r+0xce8>
 c00ade4:	a800b226 	beq	r21,zero,c00b0b0 <_dtoa_r+0xce8>
 c00ade8:	880b883a 	mov	r5,r17
 c00adec:	a80d883a 	mov	r6,r21
 c00adf0:	e009883a 	mov	r4,fp
 c00adf4:	c00d8840 	call	c00d884 <__pow5mult>
 c00adf8:	d9800917 	ldw	r6,36(sp)
 c00adfc:	100b883a 	mov	r5,r2
 c00ae00:	e009883a 	mov	r4,fp
 c00ae04:	1023883a 	mov	r17,r2
 c00ae08:	c00d5f80 	call	c00d5f8 <__multiply>
 c00ae0c:	1021883a 	mov	r16,r2
 c00ae10:	d8800a17 	ldw	r2,40(sp)
 c00ae14:	d9400917 	ldw	r5,36(sp)
 c00ae18:	e009883a 	mov	r4,fp
 c00ae1c:	1545c83a 	sub	r2,r2,r21
 c00ae20:	d8800a15 	stw	r2,40(sp)
 c00ae24:	c00d2300 	call	c00d230 <_Bfree>
 c00ae28:	d8c00a17 	ldw	r3,40(sp)
 c00ae2c:	18009f1e 	bne	r3,zero,c00b0ac <_dtoa_r+0xce4>
 c00ae30:	05c00044 	movi	r23,1
 c00ae34:	e009883a 	mov	r4,fp
 c00ae38:	b80b883a 	mov	r5,r23
 c00ae3c:	c00d5bc0 	call	c00d5bc <__i2b>
 c00ae40:	d9000d17 	ldw	r4,52(sp)
 c00ae44:	102b883a 	mov	r21,r2
 c00ae48:	2000ce26 	beq	r4,zero,c00b184 <_dtoa_r+0xdbc>
 c00ae4c:	200d883a 	mov	r6,r4
 c00ae50:	100b883a 	mov	r5,r2
 c00ae54:	e009883a 	mov	r4,fp
 c00ae58:	c00d8840 	call	c00d884 <__pow5mult>
 c00ae5c:	d9800317 	ldw	r6,12(sp)
 c00ae60:	102b883a 	mov	r21,r2
 c00ae64:	b981810e 	bge	r23,r6,c00b46c <_dtoa_r+0x10a4>
 c00ae68:	0027883a 	mov	r19,zero
 c00ae6c:	a8800417 	ldw	r2,16(r21)
 c00ae70:	05c00804 	movi	r23,32
 c00ae74:	10800104 	addi	r2,r2,4
 c00ae78:	1085883a 	add	r2,r2,r2
 c00ae7c:	1085883a 	add	r2,r2,r2
 c00ae80:	a885883a 	add	r2,r21,r2
 c00ae84:	11000017 	ldw	r4,0(r2)
 c00ae88:	c00d4a40 	call	c00d4a4 <__hi0bits>
 c00ae8c:	b885c83a 	sub	r2,r23,r2
 c00ae90:	1585883a 	add	r2,r2,r22
 c00ae94:	108007cc 	andi	r2,r2,31
 c00ae98:	1000b326 	beq	r2,zero,c00b168 <_dtoa_r+0xda0>
 c00ae9c:	00c00804 	movi	r3,32
 c00aea0:	1887c83a 	sub	r3,r3,r2
 c00aea4:	01000104 	movi	r4,4
 c00aea8:	20c2cd0e 	bge	r4,r3,c00b9e0 <_dtoa_r+0x1618>
 c00aeac:	00c00704 	movi	r3,28
 c00aeb0:	1885c83a 	sub	r2,r3,r2
 c00aeb4:	d8c00817 	ldw	r3,32(sp)
 c00aeb8:	a0a9883a 	add	r20,r20,r2
 c00aebc:	b0ad883a 	add	r22,r22,r2
 c00aec0:	1887883a 	add	r3,r3,r2
 c00aec4:	d8c00815 	stw	r3,32(sp)
 c00aec8:	d9800817 	ldw	r6,32(sp)
 c00aecc:	0180040e 	bge	zero,r6,c00aee0 <_dtoa_r+0xb18>
 c00aed0:	800b883a 	mov	r5,r16
 c00aed4:	e009883a 	mov	r4,fp
 c00aed8:	c00d9c40 	call	c00d9c4 <__lshift>
 c00aedc:	1021883a 	mov	r16,r2
 c00aee0:	0580050e 	bge	zero,r22,c00aef8 <_dtoa_r+0xb30>
 c00aee4:	a80b883a 	mov	r5,r21
 c00aee8:	b00d883a 	mov	r6,r22
 c00aeec:	e009883a 	mov	r4,fp
 c00aef0:	c00d9c40 	call	c00d9c4 <__lshift>
 c00aef4:	102b883a 	mov	r21,r2
 c00aef8:	d9c00e17 	ldw	r7,56(sp)
 c00aefc:	3801211e 	bne	r7,zero,c00b384 <_dtoa_r+0xfbc>
 c00af00:	d9800617 	ldw	r6,24(sp)
 c00af04:	0181380e 	bge	zero,r6,c00b3e8 <_dtoa_r+0x1020>
 c00af08:	d8c00b17 	ldw	r3,44(sp)
 c00af0c:	1800ab1e 	bne	r3,zero,c00b1bc <_dtoa_r+0xdf4>
 c00af10:	dc800717 	ldw	r18,28(sp)
 c00af14:	dcc00617 	ldw	r19,24(sp)
 c00af18:	9029883a 	mov	r20,r18
 c00af1c:	00000206 	br	c00af28 <_dtoa_r+0xb60>
 c00af20:	c00d2580 	call	c00d258 <__multadd>
 c00af24:	1021883a 	mov	r16,r2
 c00af28:	a80b883a 	mov	r5,r21
 c00af2c:	8009883a 	mov	r4,r16
 c00af30:	c00a1a00 	call	c00a1a0 <quorem>
 c00af34:	10800c04 	addi	r2,r2,48
 c00af38:	90800005 	stb	r2,0(r18)
 c00af3c:	94800044 	addi	r18,r18,1
 c00af40:	9507c83a 	sub	r3,r18,r20
 c00af44:	000f883a 	mov	r7,zero
 c00af48:	01800284 	movi	r6,10
 c00af4c:	800b883a 	mov	r5,r16
 c00af50:	e009883a 	mov	r4,fp
 c00af54:	1cfff216 	blt	r3,r19,c00af20 <__alt_data_end+0xfc00af20>
 c00af58:	1011883a 	mov	r8,r2
 c00af5c:	d8800617 	ldw	r2,24(sp)
 c00af60:	0082370e 	bge	zero,r2,c00b840 <_dtoa_r+0x1478>
 c00af64:	d9000717 	ldw	r4,28(sp)
 c00af68:	0025883a 	mov	r18,zero
 c00af6c:	20af883a 	add	r23,r4,r2
 c00af70:	01800044 	movi	r6,1
 c00af74:	800b883a 	mov	r5,r16
 c00af78:	e009883a 	mov	r4,fp
 c00af7c:	da001715 	stw	r8,92(sp)
 c00af80:	c00d9c40 	call	c00d9c4 <__lshift>
 c00af84:	a80b883a 	mov	r5,r21
 c00af88:	1009883a 	mov	r4,r2
 c00af8c:	d8800915 	stw	r2,36(sp)
 c00af90:	c00db0c0 	call	c00db0c <__mcmp>
 c00af94:	da001717 	ldw	r8,92(sp)
 c00af98:	0081800e 	bge	zero,r2,c00b59c <_dtoa_r+0x11d4>
 c00af9c:	b93fffc3 	ldbu	r4,-1(r23)
 c00afa0:	b8bfffc4 	addi	r2,r23,-1
 c00afa4:	1007883a 	mov	r3,r2
 c00afa8:	01800e44 	movi	r6,57
 c00afac:	d9c00717 	ldw	r7,28(sp)
 c00afb0:	00000506 	br	c00afc8 <_dtoa_r+0xc00>
 c00afb4:	18ffffc4 	addi	r3,r3,-1
 c00afb8:	11c12326 	beq	r2,r7,c00b448 <_dtoa_r+0x1080>
 c00afbc:	19000003 	ldbu	r4,0(r3)
 c00afc0:	102f883a 	mov	r23,r2
 c00afc4:	10bfffc4 	addi	r2,r2,-1
 c00afc8:	21403fcc 	andi	r5,r4,255
 c00afcc:	2940201c 	xori	r5,r5,128
 c00afd0:	297fe004 	addi	r5,r5,-128
 c00afd4:	29bff726 	beq	r5,r6,c00afb4 <__alt_data_end+0xfc00afb4>
 c00afd8:	21000044 	addi	r4,r4,1
 c00afdc:	11000005 	stb	r4,0(r2)
 c00afe0:	a80b883a 	mov	r5,r21
 c00afe4:	e009883a 	mov	r4,fp
 c00afe8:	c00d2300 	call	c00d230 <_Bfree>
 c00afec:	883ea026 	beq	r17,zero,c00aa70 <__alt_data_end+0xfc00aa70>
 c00aff0:	90000426 	beq	r18,zero,c00b004 <_dtoa_r+0xc3c>
 c00aff4:	94400326 	beq	r18,r17,c00b004 <_dtoa_r+0xc3c>
 c00aff8:	900b883a 	mov	r5,r18
 c00affc:	e009883a 	mov	r4,fp
 c00b000:	c00d2300 	call	c00d230 <_Bfree>
 c00b004:	880b883a 	mov	r5,r17
 c00b008:	e009883a 	mov	r4,fp
 c00b00c:	c00d2300 	call	c00d230 <_Bfree>
 c00b010:	003e9706 	br	c00aa70 <__alt_data_end+0xfc00aa70>
 c00b014:	01800044 	movi	r6,1
 c00b018:	d9800e15 	stw	r6,56(sp)
 c00b01c:	003d9606 	br	c00a678 <__alt_data_end+0xfc00a678>
 c00b020:	d8800817 	ldw	r2,32(sp)
 c00b024:	d8c00517 	ldw	r3,20(sp)
 c00b028:	d8000d15 	stw	zero,52(sp)
 c00b02c:	10c5c83a 	sub	r2,r2,r3
 c00b030:	00c9c83a 	sub	r4,zero,r3
 c00b034:	d8800815 	stw	r2,32(sp)
 c00b038:	d9000a15 	stw	r4,40(sp)
 c00b03c:	003d9706 	br	c00a69c <__alt_data_end+0xfc00a69c>
 c00b040:	05adc83a 	sub	r22,zero,r22
 c00b044:	dd800815 	stw	r22,32(sp)
 c00b048:	002d883a 	mov	r22,zero
 c00b04c:	003d8e06 	br	c00a688 <__alt_data_end+0xfc00a688>
 c00b050:	d9000517 	ldw	r4,20(sp)
 c00b054:	c01536c0 	call	c01536c <__floatsidf>
 c00b058:	100d883a 	mov	r6,r2
 c00b05c:	180f883a 	mov	r7,r3
 c00b060:	a009883a 	mov	r4,r20
 c00b064:	880b883a 	mov	r5,r17
 c00b068:	c013f2c0 	call	c013f2c <__eqdf2>
 c00b06c:	103d7126 	beq	r2,zero,c00a634 <__alt_data_end+0xfc00a634>
 c00b070:	d9c00517 	ldw	r7,20(sp)
 c00b074:	39ffffc4 	addi	r7,r7,-1
 c00b078:	d9c00515 	stw	r7,20(sp)
 c00b07c:	003d6d06 	br	c00a634 <__alt_data_end+0xfc00a634>
 c00b080:	dd400a17 	ldw	r21,40(sp)
 c00b084:	dd000817 	ldw	r20,32(sp)
 c00b088:	0023883a 	mov	r17,zero
 c00b08c:	003f4806 	br	c00adb0 <__alt_data_end+0xfc00adb0>
 c00b090:	10e3c83a 	sub	r17,r2,r3
 c00b094:	9448983a 	sll	r4,r18,r17
 c00b098:	003d3206 	br	c00a564 <__alt_data_end+0xfc00a564>
 c00b09c:	d8000e15 	stw	zero,56(sp)
 c00b0a0:	003d7506 	br	c00a678 <__alt_data_end+0xfc00a678>
 c00b0a4:	b005883a 	mov	r2,r22
 c00b0a8:	003f4506 	br	c00adc0 <__alt_data_end+0xfc00adc0>
 c00b0ac:	dc000915 	stw	r16,36(sp)
 c00b0b0:	d9800a17 	ldw	r6,40(sp)
 c00b0b4:	d9400917 	ldw	r5,36(sp)
 c00b0b8:	e009883a 	mov	r4,fp
 c00b0bc:	c00d8840 	call	c00d884 <__pow5mult>
 c00b0c0:	1021883a 	mov	r16,r2
 c00b0c4:	003f5a06 	br	c00ae30 <__alt_data_end+0xfc00ae30>
 c00b0c8:	01c00044 	movi	r7,1
 c00b0cc:	d9c00b15 	stw	r7,44(sp)
 c00b0d0:	d8802217 	ldw	r2,136(sp)
 c00b0d4:	0081280e 	bge	zero,r2,c00b578 <_dtoa_r+0x11b0>
 c00b0d8:	100d883a 	mov	r6,r2
 c00b0dc:	1021883a 	mov	r16,r2
 c00b0e0:	d8800c15 	stw	r2,48(sp)
 c00b0e4:	d8800615 	stw	r2,24(sp)
 c00b0e8:	003d8806 	br	c00a70c <__alt_data_end+0xfc00a70c>
 c00b0ec:	d8800617 	ldw	r2,24(sp)
 c00b0f0:	00be9b16 	blt	zero,r2,c00ab60 <__alt_data_end+0xfc00ab60>
 c00b0f4:	10010f1e 	bne	r2,zero,c00b534 <_dtoa_r+0x116c>
 c00b0f8:	880b883a 	mov	r5,r17
 c00b0fc:	000d883a 	mov	r6,zero
 c00b100:	01d00534 	movhi	r7,16404
 c00b104:	8009883a 	mov	r4,r16
 c00b108:	c0141840 	call	c014184 <__muldf3>
 c00b10c:	900d883a 	mov	r6,r18
 c00b110:	980f883a 	mov	r7,r19
 c00b114:	1009883a 	mov	r4,r2
 c00b118:	180b883a 	mov	r5,r3
 c00b11c:	c013fb40 	call	c013fb4 <__gedf2>
 c00b120:	002b883a 	mov	r21,zero
 c00b124:	0023883a 	mov	r17,zero
 c00b128:	1000bf16 	blt	r2,zero,c00b428 <_dtoa_r+0x1060>
 c00b12c:	d9802217 	ldw	r6,136(sp)
 c00b130:	ddc00717 	ldw	r23,28(sp)
 c00b134:	018c303a 	nor	r6,zero,r6
 c00b138:	d9800515 	stw	r6,20(sp)
 c00b13c:	a80b883a 	mov	r5,r21
 c00b140:	e009883a 	mov	r4,fp
 c00b144:	c00d2300 	call	c00d230 <_Bfree>
 c00b148:	883e4926 	beq	r17,zero,c00aa70 <__alt_data_end+0xfc00aa70>
 c00b14c:	003fad06 	br	c00b004 <__alt_data_end+0xfc00b004>
 c00b150:	d9c01117 	ldw	r7,68(sp)
 c00b154:	3801bc26 	beq	r7,zero,c00b848 <_dtoa_r+0x1480>
 c00b158:	10810cc4 	addi	r2,r2,1075
 c00b15c:	dd400a17 	ldw	r21,40(sp)
 c00b160:	dd000817 	ldw	r20,32(sp)
 c00b164:	003f0a06 	br	c00ad90 <__alt_data_end+0xfc00ad90>
 c00b168:	00800704 	movi	r2,28
 c00b16c:	d9000817 	ldw	r4,32(sp)
 c00b170:	a0a9883a 	add	r20,r20,r2
 c00b174:	b0ad883a 	add	r22,r22,r2
 c00b178:	2089883a 	add	r4,r4,r2
 c00b17c:	d9000815 	stw	r4,32(sp)
 c00b180:	003f5106 	br	c00aec8 <__alt_data_end+0xfc00aec8>
 c00b184:	d8c00317 	ldw	r3,12(sp)
 c00b188:	b8c1fc0e 	bge	r23,r3,c00b97c <_dtoa_r+0x15b4>
 c00b18c:	0027883a 	mov	r19,zero
 c00b190:	b805883a 	mov	r2,r23
 c00b194:	003f3e06 	br	c00ae90 <__alt_data_end+0xfc00ae90>
 c00b198:	880b883a 	mov	r5,r17
 c00b19c:	e009883a 	mov	r4,fp
 c00b1a0:	000f883a 	mov	r7,zero
 c00b1a4:	01800284 	movi	r6,10
 c00b1a8:	c00d2580 	call	c00d258 <__multadd>
 c00b1ac:	d9000c17 	ldw	r4,48(sp)
 c00b1b0:	1023883a 	mov	r17,r2
 c00b1b4:	0102040e 	bge	zero,r4,c00b9c8 <_dtoa_r+0x1600>
 c00b1b8:	d9000615 	stw	r4,24(sp)
 c00b1bc:	0500050e 	bge	zero,r20,c00b1d4 <_dtoa_r+0xe0c>
 c00b1c0:	880b883a 	mov	r5,r17
 c00b1c4:	a00d883a 	mov	r6,r20
 c00b1c8:	e009883a 	mov	r4,fp
 c00b1cc:	c00d9c40 	call	c00d9c4 <__lshift>
 c00b1d0:	1023883a 	mov	r17,r2
 c00b1d4:	9801241e 	bne	r19,zero,c00b668 <_dtoa_r+0x12a0>
 c00b1d8:	8829883a 	mov	r20,r17
 c00b1dc:	d9000617 	ldw	r4,24(sp)
 c00b1e0:	dcc00717 	ldw	r19,28(sp)
 c00b1e4:	9480004c 	andi	r18,r18,1
 c00b1e8:	20bfffc4 	addi	r2,r4,-1
 c00b1ec:	9885883a 	add	r2,r19,r2
 c00b1f0:	d8800415 	stw	r2,16(sp)
 c00b1f4:	dc800615 	stw	r18,24(sp)
 c00b1f8:	a80b883a 	mov	r5,r21
 c00b1fc:	8009883a 	mov	r4,r16
 c00b200:	c00a1a00 	call	c00a1a0 <quorem>
 c00b204:	880b883a 	mov	r5,r17
 c00b208:	8009883a 	mov	r4,r16
 c00b20c:	102f883a 	mov	r23,r2
 c00b210:	c00db0c0 	call	c00db0c <__mcmp>
 c00b214:	a80b883a 	mov	r5,r21
 c00b218:	a00d883a 	mov	r6,r20
 c00b21c:	e009883a 	mov	r4,fp
 c00b220:	102d883a 	mov	r22,r2
 c00b224:	c00db6c0 	call	c00db6c <__mdiff>
 c00b228:	1007883a 	mov	r3,r2
 c00b22c:	10800317 	ldw	r2,12(r2)
 c00b230:	bc800c04 	addi	r18,r23,48
 c00b234:	180b883a 	mov	r5,r3
 c00b238:	10004e1e 	bne	r2,zero,c00b374 <_dtoa_r+0xfac>
 c00b23c:	8009883a 	mov	r4,r16
 c00b240:	d8c01615 	stw	r3,88(sp)
 c00b244:	c00db0c0 	call	c00db0c <__mcmp>
 c00b248:	d8c01617 	ldw	r3,88(sp)
 c00b24c:	e009883a 	mov	r4,fp
 c00b250:	d8801615 	stw	r2,88(sp)
 c00b254:	180b883a 	mov	r5,r3
 c00b258:	c00d2300 	call	c00d230 <_Bfree>
 c00b25c:	d8801617 	ldw	r2,88(sp)
 c00b260:	1000041e 	bne	r2,zero,c00b274 <_dtoa_r+0xeac>
 c00b264:	d9800317 	ldw	r6,12(sp)
 c00b268:	3000021e 	bne	r6,zero,c00b274 <_dtoa_r+0xeac>
 c00b26c:	d8c00617 	ldw	r3,24(sp)
 c00b270:	18003726 	beq	r3,zero,c00b350 <_dtoa_r+0xf88>
 c00b274:	b0002016 	blt	r22,zero,c00b2f8 <_dtoa_r+0xf30>
 c00b278:	b000041e 	bne	r22,zero,c00b28c <_dtoa_r+0xec4>
 c00b27c:	d9000317 	ldw	r4,12(sp)
 c00b280:	2000021e 	bne	r4,zero,c00b28c <_dtoa_r+0xec4>
 c00b284:	d8c00617 	ldw	r3,24(sp)
 c00b288:	18001b26 	beq	r3,zero,c00b2f8 <_dtoa_r+0xf30>
 c00b28c:	00810716 	blt	zero,r2,c00b6ac <_dtoa_r+0x12e4>
 c00b290:	d8c00417 	ldw	r3,16(sp)
 c00b294:	9d800044 	addi	r22,r19,1
 c00b298:	9c800005 	stb	r18,0(r19)
 c00b29c:	b02f883a 	mov	r23,r22
 c00b2a0:	98c10626 	beq	r19,r3,c00b6bc <_dtoa_r+0x12f4>
 c00b2a4:	800b883a 	mov	r5,r16
 c00b2a8:	000f883a 	mov	r7,zero
 c00b2ac:	01800284 	movi	r6,10
 c00b2b0:	e009883a 	mov	r4,fp
 c00b2b4:	c00d2580 	call	c00d258 <__multadd>
 c00b2b8:	1021883a 	mov	r16,r2
 c00b2bc:	000f883a 	mov	r7,zero
 c00b2c0:	01800284 	movi	r6,10
 c00b2c4:	880b883a 	mov	r5,r17
 c00b2c8:	e009883a 	mov	r4,fp
 c00b2cc:	8d002526 	beq	r17,r20,c00b364 <_dtoa_r+0xf9c>
 c00b2d0:	c00d2580 	call	c00d258 <__multadd>
 c00b2d4:	a00b883a 	mov	r5,r20
 c00b2d8:	000f883a 	mov	r7,zero
 c00b2dc:	01800284 	movi	r6,10
 c00b2e0:	e009883a 	mov	r4,fp
 c00b2e4:	1023883a 	mov	r17,r2
 c00b2e8:	c00d2580 	call	c00d258 <__multadd>
 c00b2ec:	1029883a 	mov	r20,r2
 c00b2f0:	b027883a 	mov	r19,r22
 c00b2f4:	003fc006 	br	c00b1f8 <__alt_data_end+0xfc00b1f8>
 c00b2f8:	9011883a 	mov	r8,r18
 c00b2fc:	00800e0e 	bge	zero,r2,c00b338 <_dtoa_r+0xf70>
 c00b300:	800b883a 	mov	r5,r16
 c00b304:	01800044 	movi	r6,1
 c00b308:	e009883a 	mov	r4,fp
 c00b30c:	da001715 	stw	r8,92(sp)
 c00b310:	c00d9c40 	call	c00d9c4 <__lshift>
 c00b314:	a80b883a 	mov	r5,r21
 c00b318:	1009883a 	mov	r4,r2
 c00b31c:	1021883a 	mov	r16,r2
 c00b320:	c00db0c0 	call	c00db0c <__mcmp>
 c00b324:	da001717 	ldw	r8,92(sp)
 c00b328:	0081960e 	bge	zero,r2,c00b984 <_dtoa_r+0x15bc>
 c00b32c:	00800e44 	movi	r2,57
 c00b330:	40817026 	beq	r8,r2,c00b8f4 <_dtoa_r+0x152c>
 c00b334:	ba000c44 	addi	r8,r23,49
 c00b338:	8825883a 	mov	r18,r17
 c00b33c:	9dc00044 	addi	r23,r19,1
 c00b340:	9a000005 	stb	r8,0(r19)
 c00b344:	a023883a 	mov	r17,r20
 c00b348:	dc000915 	stw	r16,36(sp)
 c00b34c:	003f2406 	br	c00afe0 <__alt_data_end+0xfc00afe0>
 c00b350:	00800e44 	movi	r2,57
 c00b354:	9011883a 	mov	r8,r18
 c00b358:	90816626 	beq	r18,r2,c00b8f4 <_dtoa_r+0x152c>
 c00b35c:	05bff516 	blt	zero,r22,c00b334 <__alt_data_end+0xfc00b334>
 c00b360:	003ff506 	br	c00b338 <__alt_data_end+0xfc00b338>
 c00b364:	c00d2580 	call	c00d258 <__multadd>
 c00b368:	1023883a 	mov	r17,r2
 c00b36c:	1029883a 	mov	r20,r2
 c00b370:	003fdf06 	br	c00b2f0 <__alt_data_end+0xfc00b2f0>
 c00b374:	e009883a 	mov	r4,fp
 c00b378:	c00d2300 	call	c00d230 <_Bfree>
 c00b37c:	00800044 	movi	r2,1
 c00b380:	003fbc06 	br	c00b274 <__alt_data_end+0xfc00b274>
 c00b384:	a80b883a 	mov	r5,r21
 c00b388:	8009883a 	mov	r4,r16
 c00b38c:	c00db0c0 	call	c00db0c <__mcmp>
 c00b390:	103edb0e 	bge	r2,zero,c00af00 <__alt_data_end+0xfc00af00>
 c00b394:	800b883a 	mov	r5,r16
 c00b398:	000f883a 	mov	r7,zero
 c00b39c:	01800284 	movi	r6,10
 c00b3a0:	e009883a 	mov	r4,fp
 c00b3a4:	c00d2580 	call	c00d258 <__multadd>
 c00b3a8:	1021883a 	mov	r16,r2
 c00b3ac:	d8800517 	ldw	r2,20(sp)
 c00b3b0:	d8c00b17 	ldw	r3,44(sp)
 c00b3b4:	10bfffc4 	addi	r2,r2,-1
 c00b3b8:	d8800515 	stw	r2,20(sp)
 c00b3bc:	183f761e 	bne	r3,zero,c00b198 <__alt_data_end+0xfc00b198>
 c00b3c0:	d9000c17 	ldw	r4,48(sp)
 c00b3c4:	0101730e 	bge	zero,r4,c00b994 <_dtoa_r+0x15cc>
 c00b3c8:	d9000615 	stw	r4,24(sp)
 c00b3cc:	003ed006 	br	c00af10 <__alt_data_end+0xfc00af10>
 c00b3d0:	00800084 	movi	r2,2
 c00b3d4:	3081861e 	bne	r6,r2,c00b9f0 <_dtoa_r+0x1628>
 c00b3d8:	d8000b15 	stw	zero,44(sp)
 c00b3dc:	003f3c06 	br	c00b0d0 <__alt_data_end+0xfc00b0d0>
 c00b3e0:	dc000917 	ldw	r16,36(sp)
 c00b3e4:	003e9206 	br	c00ae30 <__alt_data_end+0xfc00ae30>
 c00b3e8:	d9c00317 	ldw	r7,12(sp)
 c00b3ec:	00800084 	movi	r2,2
 c00b3f0:	11fec50e 	bge	r2,r7,c00af08 <__alt_data_end+0xfc00af08>
 c00b3f4:	d9000617 	ldw	r4,24(sp)
 c00b3f8:	20013c1e 	bne	r4,zero,c00b8ec <_dtoa_r+0x1524>
 c00b3fc:	a80b883a 	mov	r5,r21
 c00b400:	000f883a 	mov	r7,zero
 c00b404:	01800144 	movi	r6,5
 c00b408:	e009883a 	mov	r4,fp
 c00b40c:	c00d2580 	call	c00d258 <__multadd>
 c00b410:	100b883a 	mov	r5,r2
 c00b414:	8009883a 	mov	r4,r16
 c00b418:	102b883a 	mov	r21,r2
 c00b41c:	c00db0c0 	call	c00db0c <__mcmp>
 c00b420:	dc000915 	stw	r16,36(sp)
 c00b424:	00bf410e 	bge	zero,r2,c00b12c <__alt_data_end+0xfc00b12c>
 c00b428:	d9c00717 	ldw	r7,28(sp)
 c00b42c:	00800c44 	movi	r2,49
 c00b430:	38800005 	stb	r2,0(r7)
 c00b434:	d8800517 	ldw	r2,20(sp)
 c00b438:	3dc00044 	addi	r23,r7,1
 c00b43c:	10800044 	addi	r2,r2,1
 c00b440:	d8800515 	stw	r2,20(sp)
 c00b444:	003f3d06 	br	c00b13c <__alt_data_end+0xfc00b13c>
 c00b448:	d9800517 	ldw	r6,20(sp)
 c00b44c:	d9c00717 	ldw	r7,28(sp)
 c00b450:	00800c44 	movi	r2,49
 c00b454:	31800044 	addi	r6,r6,1
 c00b458:	d9800515 	stw	r6,20(sp)
 c00b45c:	38800005 	stb	r2,0(r7)
 c00b460:	003edf06 	br	c00afe0 <__alt_data_end+0xfc00afe0>
 c00b464:	d8000b15 	stw	zero,44(sp)
 c00b468:	003c9f06 	br	c00a6e8 <__alt_data_end+0xfc00a6e8>
 c00b46c:	903e7e1e 	bne	r18,zero,c00ae68 <__alt_data_end+0xfc00ae68>
 c00b470:	00800434 	movhi	r2,16
 c00b474:	10bfffc4 	addi	r2,r2,-1
 c00b478:	9884703a 	and	r2,r19,r2
 c00b47c:	1000ea1e 	bne	r2,zero,c00b828 <_dtoa_r+0x1460>
 c00b480:	9cdffc2c 	andhi	r19,r19,32752
 c00b484:	9800e826 	beq	r19,zero,c00b828 <_dtoa_r+0x1460>
 c00b488:	d9c00817 	ldw	r7,32(sp)
 c00b48c:	b5800044 	addi	r22,r22,1
 c00b490:	04c00044 	movi	r19,1
 c00b494:	39c00044 	addi	r7,r7,1
 c00b498:	d9c00815 	stw	r7,32(sp)
 c00b49c:	d8800d17 	ldw	r2,52(sp)
 c00b4a0:	103e721e 	bne	r2,zero,c00ae6c <__alt_data_end+0xfc00ae6c>
 c00b4a4:	00800044 	movi	r2,1
 c00b4a8:	003e7906 	br	c00ae90 <__alt_data_end+0xfc00ae90>
 c00b4ac:	8009883a 	mov	r4,r16
 c00b4b0:	c01536c0 	call	c01536c <__floatsidf>
 c00b4b4:	d9800f17 	ldw	r6,60(sp)
 c00b4b8:	d9c01017 	ldw	r7,64(sp)
 c00b4bc:	1009883a 	mov	r4,r2
 c00b4c0:	180b883a 	mov	r5,r3
 c00b4c4:	c0141840 	call	c014184 <__muldf3>
 c00b4c8:	000d883a 	mov	r6,zero
 c00b4cc:	01d00734 	movhi	r7,16412
 c00b4d0:	1009883a 	mov	r4,r2
 c00b4d4:	180b883a 	mov	r5,r3
 c00b4d8:	c012cb00 	call	c012cb0 <__adddf3>
 c00b4dc:	047f3034 	movhi	r17,64704
 c00b4e0:	1021883a 	mov	r16,r2
 c00b4e4:	1c63883a 	add	r17,r3,r17
 c00b4e8:	d9000f17 	ldw	r4,60(sp)
 c00b4ec:	d9401017 	ldw	r5,64(sp)
 c00b4f0:	000d883a 	mov	r6,zero
 c00b4f4:	01d00534 	movhi	r7,16404
 c00b4f8:	c0149f00 	call	c0149f0 <__subdf3>
 c00b4fc:	800d883a 	mov	r6,r16
 c00b500:	880f883a 	mov	r7,r17
 c00b504:	1009883a 	mov	r4,r2
 c00b508:	180b883a 	mov	r5,r3
 c00b50c:	102b883a 	mov	r21,r2
 c00b510:	1829883a 	mov	r20,r3
 c00b514:	c013fb40 	call	c013fb4 <__gedf2>
 c00b518:	00806c16 	blt	zero,r2,c00b6cc <_dtoa_r+0x1304>
 c00b51c:	89e0003c 	xorhi	r7,r17,32768
 c00b520:	800d883a 	mov	r6,r16
 c00b524:	a809883a 	mov	r4,r21
 c00b528:	a00b883a 	mov	r5,r20
 c00b52c:	c0140900 	call	c014090 <__ledf2>
 c00b530:	103d7e0e 	bge	r2,zero,c00ab2c <__alt_data_end+0xfc00ab2c>
 c00b534:	002b883a 	mov	r21,zero
 c00b538:	0023883a 	mov	r17,zero
 c00b53c:	003efb06 	br	c00b12c <__alt_data_end+0xfc00b12c>
 c00b540:	d8800717 	ldw	r2,28(sp)
 c00b544:	003bd006 	br	c00a488 <__alt_data_end+0xfc00a488>
 c00b548:	d9000a17 	ldw	r4,40(sp)
 c00b54c:	d9800d17 	ldw	r6,52(sp)
 c00b550:	dd400a15 	stw	r21,40(sp)
 c00b554:	a905c83a 	sub	r2,r21,r4
 c00b558:	308d883a 	add	r6,r6,r2
 c00b55c:	d9800d15 	stw	r6,52(sp)
 c00b560:	002b883a 	mov	r21,zero
 c00b564:	003e0606 	br	c00ad80 <__alt_data_end+0xfc00ad80>
 c00b568:	9023883a 	mov	r17,r18
 c00b56c:	9829883a 	mov	r20,r19
 c00b570:	04000084 	movi	r16,2
 c00b574:	003c9206 	br	c00a7c0 <__alt_data_end+0xfc00a7c0>
 c00b578:	04000044 	movi	r16,1
 c00b57c:	dc000c15 	stw	r16,48(sp)
 c00b580:	dc000615 	stw	r16,24(sp)
 c00b584:	dc002215 	stw	r16,136(sp)
 c00b588:	e0001115 	stw	zero,68(fp)
 c00b58c:	000b883a 	mov	r5,zero
 c00b590:	003c6906 	br	c00a738 <__alt_data_end+0xfc00a738>
 c00b594:	3021883a 	mov	r16,r6
 c00b598:	003ffb06 	br	c00b588 <__alt_data_end+0xfc00b588>
 c00b59c:	1000021e 	bne	r2,zero,c00b5a8 <_dtoa_r+0x11e0>
 c00b5a0:	4200004c 	andi	r8,r8,1
 c00b5a4:	403e7d1e 	bne	r8,zero,c00af9c <__alt_data_end+0xfc00af9c>
 c00b5a8:	01000c04 	movi	r4,48
 c00b5ac:	00000106 	br	c00b5b4 <_dtoa_r+0x11ec>
 c00b5b0:	102f883a 	mov	r23,r2
 c00b5b4:	b8bfffc4 	addi	r2,r23,-1
 c00b5b8:	10c00007 	ldb	r3,0(r2)
 c00b5bc:	193ffc26 	beq	r3,r4,c00b5b0 <__alt_data_end+0xfc00b5b0>
 c00b5c0:	003e8706 	br	c00afe0 <__alt_data_end+0xfc00afe0>
 c00b5c4:	d8800517 	ldw	r2,20(sp)
 c00b5c8:	00a3c83a 	sub	r17,zero,r2
 c00b5cc:	8800a426 	beq	r17,zero,c00b860 <_dtoa_r+0x1498>
 c00b5d0:	888003cc 	andi	r2,r17,15
 c00b5d4:	100490fa 	slli	r2,r2,3
 c00b5d8:	00c300b4 	movhi	r3,3074
 c00b5dc:	18e2bd04 	addi	r3,r3,-29964
 c00b5e0:	1885883a 	add	r2,r3,r2
 c00b5e4:	11800017 	ldw	r6,0(r2)
 c00b5e8:	11c00117 	ldw	r7,4(r2)
 c00b5ec:	9009883a 	mov	r4,r18
 c00b5f0:	980b883a 	mov	r5,r19
 c00b5f4:	8823d13a 	srai	r17,r17,4
 c00b5f8:	c0141840 	call	c014184 <__muldf3>
 c00b5fc:	d8800f15 	stw	r2,60(sp)
 c00b600:	d8c01015 	stw	r3,64(sp)
 c00b604:	8800e826 	beq	r17,zero,c00b9a8 <_dtoa_r+0x15e0>
 c00b608:	050300b4 	movhi	r20,3074
 c00b60c:	a522b304 	addi	r20,r20,-30004
 c00b610:	04000084 	movi	r16,2
 c00b614:	8980004c 	andi	r6,r17,1
 c00b618:	1009883a 	mov	r4,r2
 c00b61c:	8823d07a 	srai	r17,r17,1
 c00b620:	180b883a 	mov	r5,r3
 c00b624:	30000426 	beq	r6,zero,c00b638 <_dtoa_r+0x1270>
 c00b628:	a1800017 	ldw	r6,0(r20)
 c00b62c:	a1c00117 	ldw	r7,4(r20)
 c00b630:	84000044 	addi	r16,r16,1
 c00b634:	c0141840 	call	c014184 <__muldf3>
 c00b638:	a5000204 	addi	r20,r20,8
 c00b63c:	883ff51e 	bne	r17,zero,c00b614 <__alt_data_end+0xfc00b614>
 c00b640:	d8800f15 	stw	r2,60(sp)
 c00b644:	d8c01015 	stw	r3,64(sp)
 c00b648:	003c7606 	br	c00a824 <__alt_data_end+0xfc00a824>
 c00b64c:	00c00c04 	movi	r3,48
 c00b650:	10c00005 	stb	r3,0(r2)
 c00b654:	d8c00517 	ldw	r3,20(sp)
 c00b658:	bd3fffc3 	ldbu	r20,-1(r23)
 c00b65c:	18c00044 	addi	r3,r3,1
 c00b660:	d8c00515 	stw	r3,20(sp)
 c00b664:	003db906 	br	c00ad4c <__alt_data_end+0xfc00ad4c>
 c00b668:	89400117 	ldw	r5,4(r17)
 c00b66c:	e009883a 	mov	r4,fp
 c00b670:	c00d1880 	call	c00d188 <_Balloc>
 c00b674:	89800417 	ldw	r6,16(r17)
 c00b678:	89400304 	addi	r5,r17,12
 c00b67c:	11000304 	addi	r4,r2,12
 c00b680:	31800084 	addi	r6,r6,2
 c00b684:	318d883a 	add	r6,r6,r6
 c00b688:	318d883a 	add	r6,r6,r6
 c00b68c:	1027883a 	mov	r19,r2
 c00b690:	c0054d80 	call	c0054d8 <memcpy>
 c00b694:	01800044 	movi	r6,1
 c00b698:	980b883a 	mov	r5,r19
 c00b69c:	e009883a 	mov	r4,fp
 c00b6a0:	c00d9c40 	call	c00d9c4 <__lshift>
 c00b6a4:	1029883a 	mov	r20,r2
 c00b6a8:	003ecc06 	br	c00b1dc <__alt_data_end+0xfc00b1dc>
 c00b6ac:	00800e44 	movi	r2,57
 c00b6b0:	90809026 	beq	r18,r2,c00b8f4 <_dtoa_r+0x152c>
 c00b6b4:	92000044 	addi	r8,r18,1
 c00b6b8:	003f1f06 	br	c00b338 <__alt_data_end+0xfc00b338>
 c00b6bc:	9011883a 	mov	r8,r18
 c00b6c0:	8825883a 	mov	r18,r17
 c00b6c4:	a023883a 	mov	r17,r20
 c00b6c8:	003e2906 	br	c00af70 <__alt_data_end+0xfc00af70>
 c00b6cc:	002b883a 	mov	r21,zero
 c00b6d0:	0023883a 	mov	r17,zero
 c00b6d4:	003f5406 	br	c00b428 <__alt_data_end+0xfc00b428>
 c00b6d8:	61bfffc4 	addi	r6,r12,-1
 c00b6dc:	300490fa 	slli	r2,r6,3
 c00b6e0:	00c300b4 	movhi	r3,3074
 c00b6e4:	18e2bd04 	addi	r3,r3,-29964
 c00b6e8:	1885883a 	add	r2,r3,r2
 c00b6ec:	11000017 	ldw	r4,0(r2)
 c00b6f0:	11400117 	ldw	r5,4(r2)
 c00b6f4:	d8800717 	ldw	r2,28(sp)
 c00b6f8:	880f883a 	mov	r7,r17
 c00b6fc:	d9801215 	stw	r6,72(sp)
 c00b700:	800d883a 	mov	r6,r16
 c00b704:	db001615 	stw	r12,88(sp)
 c00b708:	15c00044 	addi	r23,r2,1
 c00b70c:	c0141840 	call	c014184 <__muldf3>
 c00b710:	d9401017 	ldw	r5,64(sp)
 c00b714:	d9000f17 	ldw	r4,60(sp)
 c00b718:	d8c01515 	stw	r3,84(sp)
 c00b71c:	d8801415 	stw	r2,80(sp)
 c00b720:	c0152ec0 	call	c0152ec <__fixdfsi>
 c00b724:	1009883a 	mov	r4,r2
 c00b728:	1021883a 	mov	r16,r2
 c00b72c:	c01536c0 	call	c01536c <__floatsidf>
 c00b730:	d9000f17 	ldw	r4,60(sp)
 c00b734:	d9401017 	ldw	r5,64(sp)
 c00b738:	100d883a 	mov	r6,r2
 c00b73c:	180f883a 	mov	r7,r3
 c00b740:	c0149f00 	call	c0149f0 <__subdf3>
 c00b744:	1829883a 	mov	r20,r3
 c00b748:	d8c00717 	ldw	r3,28(sp)
 c00b74c:	84000c04 	addi	r16,r16,48
 c00b750:	1023883a 	mov	r17,r2
 c00b754:	1c000005 	stb	r16,0(r3)
 c00b758:	db001617 	ldw	r12,88(sp)
 c00b75c:	00800044 	movi	r2,1
 c00b760:	60802226 	beq	r12,r2,c00b7ec <_dtoa_r+0x1424>
 c00b764:	d9c00717 	ldw	r7,28(sp)
 c00b768:	8805883a 	mov	r2,r17
 c00b76c:	b82b883a 	mov	r21,r23
 c00b770:	3b19883a 	add	r12,r7,r12
 c00b774:	6023883a 	mov	r17,r12
 c00b778:	a007883a 	mov	r3,r20
 c00b77c:	dc800f15 	stw	r18,60(sp)
 c00b780:	000d883a 	mov	r6,zero
 c00b784:	01d00934 	movhi	r7,16420
 c00b788:	1009883a 	mov	r4,r2
 c00b78c:	180b883a 	mov	r5,r3
 c00b790:	c0141840 	call	c014184 <__muldf3>
 c00b794:	180b883a 	mov	r5,r3
 c00b798:	1009883a 	mov	r4,r2
 c00b79c:	1829883a 	mov	r20,r3
 c00b7a0:	1025883a 	mov	r18,r2
 c00b7a4:	c0152ec0 	call	c0152ec <__fixdfsi>
 c00b7a8:	1009883a 	mov	r4,r2
 c00b7ac:	1021883a 	mov	r16,r2
 c00b7b0:	c01536c0 	call	c01536c <__floatsidf>
 c00b7b4:	100d883a 	mov	r6,r2
 c00b7b8:	180f883a 	mov	r7,r3
 c00b7bc:	9009883a 	mov	r4,r18
 c00b7c0:	a00b883a 	mov	r5,r20
 c00b7c4:	84000c04 	addi	r16,r16,48
 c00b7c8:	c0149f00 	call	c0149f0 <__subdf3>
 c00b7cc:	ad400044 	addi	r21,r21,1
 c00b7d0:	ac3fffc5 	stb	r16,-1(r21)
 c00b7d4:	ac7fea1e 	bne	r21,r17,c00b780 <__alt_data_end+0xfc00b780>
 c00b7d8:	1023883a 	mov	r17,r2
 c00b7dc:	d8801217 	ldw	r2,72(sp)
 c00b7e0:	dc800f17 	ldw	r18,60(sp)
 c00b7e4:	1829883a 	mov	r20,r3
 c00b7e8:	b8af883a 	add	r23,r23,r2
 c00b7ec:	d9001417 	ldw	r4,80(sp)
 c00b7f0:	d9401517 	ldw	r5,84(sp)
 c00b7f4:	000d883a 	mov	r6,zero
 c00b7f8:	01cff834 	movhi	r7,16352
 c00b7fc:	c012cb00 	call	c012cb0 <__adddf3>
 c00b800:	880d883a 	mov	r6,r17
 c00b804:	a00f883a 	mov	r7,r20
 c00b808:	1009883a 	mov	r4,r2
 c00b80c:	180b883a 	mov	r5,r3
 c00b810:	c0140900 	call	c014090 <__ledf2>
 c00b814:	10003e0e 	bge	r2,zero,c00b910 <_dtoa_r+0x1548>
 c00b818:	d9001317 	ldw	r4,76(sp)
 c00b81c:	bd3fffc3 	ldbu	r20,-1(r23)
 c00b820:	d9000515 	stw	r4,20(sp)
 c00b824:	003d3b06 	br	c00ad14 <__alt_data_end+0xfc00ad14>
 c00b828:	0027883a 	mov	r19,zero
 c00b82c:	003f1b06 	br	c00b49c <__alt_data_end+0xfc00b49c>
 c00b830:	d8800817 	ldw	r2,32(sp)
 c00b834:	11e9c83a 	sub	r20,r2,r7
 c00b838:	0005883a 	mov	r2,zero
 c00b83c:	003d5406 	br	c00ad90 <__alt_data_end+0xfc00ad90>
 c00b840:	00800044 	movi	r2,1
 c00b844:	003dc706 	br	c00af64 <__alt_data_end+0xfc00af64>
 c00b848:	d8c00217 	ldw	r3,8(sp)
 c00b84c:	00800d84 	movi	r2,54
 c00b850:	dd400a17 	ldw	r21,40(sp)
 c00b854:	10c5c83a 	sub	r2,r2,r3
 c00b858:	dd000817 	ldw	r20,32(sp)
 c00b85c:	003d4c06 	br	c00ad90 <__alt_data_end+0xfc00ad90>
 c00b860:	dc800f15 	stw	r18,60(sp)
 c00b864:	dcc01015 	stw	r19,64(sp)
 c00b868:	04000084 	movi	r16,2
 c00b86c:	003bed06 	br	c00a824 <__alt_data_end+0xfc00a824>
 c00b870:	d9000617 	ldw	r4,24(sp)
 c00b874:	203f0d26 	beq	r4,zero,c00b4ac <__alt_data_end+0xfc00b4ac>
 c00b878:	d9800c17 	ldw	r6,48(sp)
 c00b87c:	01bcab0e 	bge	zero,r6,c00ab2c <__alt_data_end+0xfc00ab2c>
 c00b880:	d9401017 	ldw	r5,64(sp)
 c00b884:	d9000f17 	ldw	r4,60(sp)
 c00b888:	000d883a 	mov	r6,zero
 c00b88c:	01d00934 	movhi	r7,16420
 c00b890:	c0141840 	call	c014184 <__muldf3>
 c00b894:	81000044 	addi	r4,r16,1
 c00b898:	d8800f15 	stw	r2,60(sp)
 c00b89c:	d8c01015 	stw	r3,64(sp)
 c00b8a0:	c01536c0 	call	c01536c <__floatsidf>
 c00b8a4:	d9800f17 	ldw	r6,60(sp)
 c00b8a8:	d9c01017 	ldw	r7,64(sp)
 c00b8ac:	1009883a 	mov	r4,r2
 c00b8b0:	180b883a 	mov	r5,r3
 c00b8b4:	c0141840 	call	c014184 <__muldf3>
 c00b8b8:	01d00734 	movhi	r7,16412
 c00b8bc:	000d883a 	mov	r6,zero
 c00b8c0:	1009883a 	mov	r4,r2
 c00b8c4:	180b883a 	mov	r5,r3
 c00b8c8:	c012cb00 	call	c012cb0 <__adddf3>
 c00b8cc:	d9c00517 	ldw	r7,20(sp)
 c00b8d0:	047f3034 	movhi	r17,64704
 c00b8d4:	1021883a 	mov	r16,r2
 c00b8d8:	39ffffc4 	addi	r7,r7,-1
 c00b8dc:	d9c01315 	stw	r7,76(sp)
 c00b8e0:	1c63883a 	add	r17,r3,r17
 c00b8e4:	db000c17 	ldw	r12,48(sp)
 c00b8e8:	003bea06 	br	c00a894 <__alt_data_end+0xfc00a894>
 c00b8ec:	dc000915 	stw	r16,36(sp)
 c00b8f0:	003e0e06 	br	c00b12c <__alt_data_end+0xfc00b12c>
 c00b8f4:	01000e44 	movi	r4,57
 c00b8f8:	8825883a 	mov	r18,r17
 c00b8fc:	9dc00044 	addi	r23,r19,1
 c00b900:	99000005 	stb	r4,0(r19)
 c00b904:	a023883a 	mov	r17,r20
 c00b908:	dc000915 	stw	r16,36(sp)
 c00b90c:	003da406 	br	c00afa0 <__alt_data_end+0xfc00afa0>
 c00b910:	d9801417 	ldw	r6,80(sp)
 c00b914:	d9c01517 	ldw	r7,84(sp)
 c00b918:	0009883a 	mov	r4,zero
 c00b91c:	014ff834 	movhi	r5,16352
 c00b920:	c0149f00 	call	c0149f0 <__subdf3>
 c00b924:	880d883a 	mov	r6,r17
 c00b928:	a00f883a 	mov	r7,r20
 c00b92c:	1009883a 	mov	r4,r2
 c00b930:	180b883a 	mov	r5,r3
 c00b934:	c013fb40 	call	c013fb4 <__gedf2>
 c00b938:	00bc7c0e 	bge	zero,r2,c00ab2c <__alt_data_end+0xfc00ab2c>
 c00b93c:	01000c04 	movi	r4,48
 c00b940:	00000106 	br	c00b948 <_dtoa_r+0x1580>
 c00b944:	102f883a 	mov	r23,r2
 c00b948:	b8bfffc4 	addi	r2,r23,-1
 c00b94c:	10c00007 	ldb	r3,0(r2)
 c00b950:	193ffc26 	beq	r3,r4,c00b944 <__alt_data_end+0xfc00b944>
 c00b954:	d9801317 	ldw	r6,76(sp)
 c00b958:	d9800515 	stw	r6,20(sp)
 c00b95c:	003c4406 	br	c00aa70 <__alt_data_end+0xfc00aa70>
 c00b960:	d9801317 	ldw	r6,76(sp)
 c00b964:	d9800515 	stw	r6,20(sp)
 c00b968:	003cea06 	br	c00ad14 <__alt_data_end+0xfc00ad14>
 c00b96c:	dd800f17 	ldw	r22,60(sp)
 c00b970:	dcc01017 	ldw	r19,64(sp)
 c00b974:	dc801217 	ldw	r18,72(sp)
 c00b978:	003c6c06 	br	c00ab2c <__alt_data_end+0xfc00ab2c>
 c00b97c:	903e031e 	bne	r18,zero,c00b18c <__alt_data_end+0xfc00b18c>
 c00b980:	003ebb06 	br	c00b470 <__alt_data_end+0xfc00b470>
 c00b984:	103e6c1e 	bne	r2,zero,c00b338 <__alt_data_end+0xfc00b338>
 c00b988:	4080004c 	andi	r2,r8,1
 c00b98c:	103e6a26 	beq	r2,zero,c00b338 <__alt_data_end+0xfc00b338>
 c00b990:	003e6606 	br	c00b32c <__alt_data_end+0xfc00b32c>
 c00b994:	d8c00317 	ldw	r3,12(sp)
 c00b998:	00800084 	movi	r2,2
 c00b99c:	10c02916 	blt	r2,r3,c00ba44 <_dtoa_r+0x167c>
 c00b9a0:	d9000c17 	ldw	r4,48(sp)
 c00b9a4:	003e8806 	br	c00b3c8 <__alt_data_end+0xfc00b3c8>
 c00b9a8:	04000084 	movi	r16,2
 c00b9ac:	003b9d06 	br	c00a824 <__alt_data_end+0xfc00a824>
 c00b9b0:	d9001317 	ldw	r4,76(sp)
 c00b9b4:	d9000515 	stw	r4,20(sp)
 c00b9b8:	003cd606 	br	c00ad14 <__alt_data_end+0xfc00ad14>
 c00b9bc:	d8801317 	ldw	r2,76(sp)
 c00b9c0:	d8800515 	stw	r2,20(sp)
 c00b9c4:	003c2a06 	br	c00aa70 <__alt_data_end+0xfc00aa70>
 c00b9c8:	d9800317 	ldw	r6,12(sp)
 c00b9cc:	00800084 	movi	r2,2
 c00b9d0:	11801516 	blt	r2,r6,c00ba28 <_dtoa_r+0x1660>
 c00b9d4:	d9c00c17 	ldw	r7,48(sp)
 c00b9d8:	d9c00615 	stw	r7,24(sp)
 c00b9dc:	003df706 	br	c00b1bc <__alt_data_end+0xfc00b1bc>
 c00b9e0:	193d3926 	beq	r3,r4,c00aec8 <__alt_data_end+0xfc00aec8>
 c00b9e4:	00c00f04 	movi	r3,60
 c00b9e8:	1885c83a 	sub	r2,r3,r2
 c00b9ec:	003ddf06 	br	c00b16c <__alt_data_end+0xfc00b16c>
 c00b9f0:	e009883a 	mov	r4,fp
 c00b9f4:	e0001115 	stw	zero,68(fp)
 c00b9f8:	000b883a 	mov	r5,zero
 c00b9fc:	c00d1880 	call	c00d188 <_Balloc>
 c00ba00:	d8800715 	stw	r2,28(sp)
 c00ba04:	d8c00717 	ldw	r3,28(sp)
 c00ba08:	00bfffc4 	movi	r2,-1
 c00ba0c:	01000044 	movi	r4,1
 c00ba10:	d8800c15 	stw	r2,48(sp)
 c00ba14:	e0c01015 	stw	r3,64(fp)
 c00ba18:	d9000b15 	stw	r4,44(sp)
 c00ba1c:	d8800615 	stw	r2,24(sp)
 c00ba20:	d8002215 	stw	zero,136(sp)
 c00ba24:	003c4106 	br	c00ab2c <__alt_data_end+0xfc00ab2c>
 c00ba28:	d8c00c17 	ldw	r3,48(sp)
 c00ba2c:	d8c00615 	stw	r3,24(sp)
 c00ba30:	003e7006 	br	c00b3f4 <__alt_data_end+0xfc00b3f4>
 c00ba34:	04400044 	movi	r17,1
 c00ba38:	003b2006 	br	c00a6bc <__alt_data_end+0xfc00a6bc>
 c00ba3c:	000b883a 	mov	r5,zero
 c00ba40:	003b3d06 	br	c00a738 <__alt_data_end+0xfc00a738>
 c00ba44:	d8800c17 	ldw	r2,48(sp)
 c00ba48:	d8800615 	stw	r2,24(sp)
 c00ba4c:	003e6906 	br	c00b3f4 <__alt_data_end+0xfc00b3f4>

0c00ba50 <__sflush_r>:
 c00ba50:	2880030b 	ldhu	r2,12(r5)
 c00ba54:	defffb04 	addi	sp,sp,-20
 c00ba58:	dcc00315 	stw	r19,12(sp)
 c00ba5c:	dc400115 	stw	r17,4(sp)
 c00ba60:	dfc00415 	stw	ra,16(sp)
 c00ba64:	dc800215 	stw	r18,8(sp)
 c00ba68:	dc000015 	stw	r16,0(sp)
 c00ba6c:	10c0020c 	andi	r3,r2,8
 c00ba70:	2823883a 	mov	r17,r5
 c00ba74:	2027883a 	mov	r19,r4
 c00ba78:	1800311e 	bne	r3,zero,c00bb40 <__sflush_r+0xf0>
 c00ba7c:	28c00117 	ldw	r3,4(r5)
 c00ba80:	10820014 	ori	r2,r2,2048
 c00ba84:	2880030d 	sth	r2,12(r5)
 c00ba88:	00c04b0e 	bge	zero,r3,c00bbb8 <__sflush_r+0x168>
 c00ba8c:	8a000a17 	ldw	r8,40(r17)
 c00ba90:	40002326 	beq	r8,zero,c00bb20 <__sflush_r+0xd0>
 c00ba94:	9c000017 	ldw	r16,0(r19)
 c00ba98:	10c4000c 	andi	r3,r2,4096
 c00ba9c:	98000015 	stw	zero,0(r19)
 c00baa0:	18004826 	beq	r3,zero,c00bbc4 <__sflush_r+0x174>
 c00baa4:	89801417 	ldw	r6,80(r17)
 c00baa8:	10c0010c 	andi	r3,r2,4
 c00baac:	18000626 	beq	r3,zero,c00bac8 <__sflush_r+0x78>
 c00bab0:	88c00117 	ldw	r3,4(r17)
 c00bab4:	88800c17 	ldw	r2,48(r17)
 c00bab8:	30cdc83a 	sub	r6,r6,r3
 c00babc:	10000226 	beq	r2,zero,c00bac8 <__sflush_r+0x78>
 c00bac0:	88800f17 	ldw	r2,60(r17)
 c00bac4:	308dc83a 	sub	r6,r6,r2
 c00bac8:	89400717 	ldw	r5,28(r17)
 c00bacc:	000f883a 	mov	r7,zero
 c00bad0:	9809883a 	mov	r4,r19
 c00bad4:	403ee83a 	callr	r8
 c00bad8:	00ffffc4 	movi	r3,-1
 c00badc:	10c04426 	beq	r2,r3,c00bbf0 <__sflush_r+0x1a0>
 c00bae0:	88c0030b 	ldhu	r3,12(r17)
 c00bae4:	89000417 	ldw	r4,16(r17)
 c00bae8:	88000115 	stw	zero,4(r17)
 c00baec:	197dffcc 	andi	r5,r3,63487
 c00baf0:	8940030d 	sth	r5,12(r17)
 c00baf4:	89000015 	stw	r4,0(r17)
 c00baf8:	18c4000c 	andi	r3,r3,4096
 c00bafc:	18002c1e 	bne	r3,zero,c00bbb0 <__sflush_r+0x160>
 c00bb00:	89400c17 	ldw	r5,48(r17)
 c00bb04:	9c000015 	stw	r16,0(r19)
 c00bb08:	28000526 	beq	r5,zero,c00bb20 <__sflush_r+0xd0>
 c00bb0c:	88801004 	addi	r2,r17,64
 c00bb10:	28800226 	beq	r5,r2,c00bb1c <__sflush_r+0xcc>
 c00bb14:	9809883a 	mov	r4,r19
 c00bb18:	c00c1cc0 	call	c00c1cc <_free_r>
 c00bb1c:	88000c15 	stw	zero,48(r17)
 c00bb20:	0005883a 	mov	r2,zero
 c00bb24:	dfc00417 	ldw	ra,16(sp)
 c00bb28:	dcc00317 	ldw	r19,12(sp)
 c00bb2c:	dc800217 	ldw	r18,8(sp)
 c00bb30:	dc400117 	ldw	r17,4(sp)
 c00bb34:	dc000017 	ldw	r16,0(sp)
 c00bb38:	dec00504 	addi	sp,sp,20
 c00bb3c:	f800283a 	ret
 c00bb40:	2c800417 	ldw	r18,16(r5)
 c00bb44:	903ff626 	beq	r18,zero,c00bb20 <__alt_data_end+0xfc00bb20>
 c00bb48:	2c000017 	ldw	r16,0(r5)
 c00bb4c:	108000cc 	andi	r2,r2,3
 c00bb50:	2c800015 	stw	r18,0(r5)
 c00bb54:	84a1c83a 	sub	r16,r16,r18
 c00bb58:	1000131e 	bne	r2,zero,c00bba8 <__sflush_r+0x158>
 c00bb5c:	28800517 	ldw	r2,20(r5)
 c00bb60:	88800215 	stw	r2,8(r17)
 c00bb64:	04000316 	blt	zero,r16,c00bb74 <__sflush_r+0x124>
 c00bb68:	003fed06 	br	c00bb20 <__alt_data_end+0xfc00bb20>
 c00bb6c:	90a5883a 	add	r18,r18,r2
 c00bb70:	043feb0e 	bge	zero,r16,c00bb20 <__alt_data_end+0xfc00bb20>
 c00bb74:	88800917 	ldw	r2,36(r17)
 c00bb78:	89400717 	ldw	r5,28(r17)
 c00bb7c:	800f883a 	mov	r7,r16
 c00bb80:	900d883a 	mov	r6,r18
 c00bb84:	9809883a 	mov	r4,r19
 c00bb88:	103ee83a 	callr	r2
 c00bb8c:	80a1c83a 	sub	r16,r16,r2
 c00bb90:	00bff616 	blt	zero,r2,c00bb6c <__alt_data_end+0xfc00bb6c>
 c00bb94:	88c0030b 	ldhu	r3,12(r17)
 c00bb98:	00bfffc4 	movi	r2,-1
 c00bb9c:	18c01014 	ori	r3,r3,64
 c00bba0:	88c0030d 	sth	r3,12(r17)
 c00bba4:	003fdf06 	br	c00bb24 <__alt_data_end+0xfc00bb24>
 c00bba8:	0005883a 	mov	r2,zero
 c00bbac:	003fec06 	br	c00bb60 <__alt_data_end+0xfc00bb60>
 c00bbb0:	88801415 	stw	r2,80(r17)
 c00bbb4:	003fd206 	br	c00bb00 <__alt_data_end+0xfc00bb00>
 c00bbb8:	28c00f17 	ldw	r3,60(r5)
 c00bbbc:	00ffb316 	blt	zero,r3,c00ba8c <__alt_data_end+0xfc00ba8c>
 c00bbc0:	003fd706 	br	c00bb20 <__alt_data_end+0xfc00bb20>
 c00bbc4:	89400717 	ldw	r5,28(r17)
 c00bbc8:	000d883a 	mov	r6,zero
 c00bbcc:	01c00044 	movi	r7,1
 c00bbd0:	9809883a 	mov	r4,r19
 c00bbd4:	403ee83a 	callr	r8
 c00bbd8:	100d883a 	mov	r6,r2
 c00bbdc:	00bfffc4 	movi	r2,-1
 c00bbe0:	30801426 	beq	r6,r2,c00bc34 <__sflush_r+0x1e4>
 c00bbe4:	8880030b 	ldhu	r2,12(r17)
 c00bbe8:	8a000a17 	ldw	r8,40(r17)
 c00bbec:	003fae06 	br	c00baa8 <__alt_data_end+0xfc00baa8>
 c00bbf0:	98c00017 	ldw	r3,0(r19)
 c00bbf4:	183fba26 	beq	r3,zero,c00bae0 <__alt_data_end+0xfc00bae0>
 c00bbf8:	01000744 	movi	r4,29
 c00bbfc:	19000626 	beq	r3,r4,c00bc18 <__sflush_r+0x1c8>
 c00bc00:	01000584 	movi	r4,22
 c00bc04:	19000426 	beq	r3,r4,c00bc18 <__sflush_r+0x1c8>
 c00bc08:	88c0030b 	ldhu	r3,12(r17)
 c00bc0c:	18c01014 	ori	r3,r3,64
 c00bc10:	88c0030d 	sth	r3,12(r17)
 c00bc14:	003fc306 	br	c00bb24 <__alt_data_end+0xfc00bb24>
 c00bc18:	8880030b 	ldhu	r2,12(r17)
 c00bc1c:	88c00417 	ldw	r3,16(r17)
 c00bc20:	88000115 	stw	zero,4(r17)
 c00bc24:	10bdffcc 	andi	r2,r2,63487
 c00bc28:	8880030d 	sth	r2,12(r17)
 c00bc2c:	88c00015 	stw	r3,0(r17)
 c00bc30:	003fb306 	br	c00bb00 <__alt_data_end+0xfc00bb00>
 c00bc34:	98800017 	ldw	r2,0(r19)
 c00bc38:	103fea26 	beq	r2,zero,c00bbe4 <__alt_data_end+0xfc00bbe4>
 c00bc3c:	00c00744 	movi	r3,29
 c00bc40:	10c00226 	beq	r2,r3,c00bc4c <__sflush_r+0x1fc>
 c00bc44:	00c00584 	movi	r3,22
 c00bc48:	10c0031e 	bne	r2,r3,c00bc58 <__sflush_r+0x208>
 c00bc4c:	9c000015 	stw	r16,0(r19)
 c00bc50:	0005883a 	mov	r2,zero
 c00bc54:	003fb306 	br	c00bb24 <__alt_data_end+0xfc00bb24>
 c00bc58:	88c0030b 	ldhu	r3,12(r17)
 c00bc5c:	3005883a 	mov	r2,r6
 c00bc60:	18c01014 	ori	r3,r3,64
 c00bc64:	88c0030d 	sth	r3,12(r17)
 c00bc68:	003fae06 	br	c00bb24 <__alt_data_end+0xfc00bb24>

0c00bc6c <_fflush_r>:
 c00bc6c:	defffd04 	addi	sp,sp,-12
 c00bc70:	dc000115 	stw	r16,4(sp)
 c00bc74:	dfc00215 	stw	ra,8(sp)
 c00bc78:	2021883a 	mov	r16,r4
 c00bc7c:	20000226 	beq	r4,zero,c00bc88 <_fflush_r+0x1c>
 c00bc80:	20800e17 	ldw	r2,56(r4)
 c00bc84:	10000c26 	beq	r2,zero,c00bcb8 <_fflush_r+0x4c>
 c00bc88:	2880030f 	ldh	r2,12(r5)
 c00bc8c:	1000051e 	bne	r2,zero,c00bca4 <_fflush_r+0x38>
 c00bc90:	0005883a 	mov	r2,zero
 c00bc94:	dfc00217 	ldw	ra,8(sp)
 c00bc98:	dc000117 	ldw	r16,4(sp)
 c00bc9c:	dec00304 	addi	sp,sp,12
 c00bca0:	f800283a 	ret
 c00bca4:	8009883a 	mov	r4,r16
 c00bca8:	dfc00217 	ldw	ra,8(sp)
 c00bcac:	dc000117 	ldw	r16,4(sp)
 c00bcb0:	dec00304 	addi	sp,sp,12
 c00bcb4:	c00ba501 	jmpi	c00ba50 <__sflush_r>
 c00bcb8:	d9400015 	stw	r5,0(sp)
 c00bcbc:	c00c0580 	call	c00c058 <__sinit>
 c00bcc0:	d9400017 	ldw	r5,0(sp)
 c00bcc4:	003ff006 	br	c00bc88 <__alt_data_end+0xfc00bc88>

0c00bcc8 <fflush>:
 c00bcc8:	20000526 	beq	r4,zero,c00bce0 <fflush+0x18>
 c00bccc:	008300b4 	movhi	r2,3074
 c00bcd0:	10aac804 	addi	r2,r2,-21728
 c00bcd4:	200b883a 	mov	r5,r4
 c00bcd8:	11000017 	ldw	r4,0(r2)
 c00bcdc:	c00bc6c1 	jmpi	c00bc6c <_fflush_r>
 c00bce0:	008300b4 	movhi	r2,3074
 c00bce4:	10aac704 	addi	r2,r2,-21732
 c00bce8:	11000017 	ldw	r4,0(r2)
 c00bcec:	01430074 	movhi	r5,3073
 c00bcf0:	296f1b04 	addi	r5,r5,-17300
 c00bcf4:	c00ca681 	jmpi	c00ca68 <_fwalk_reent>

0c00bcf8 <__fp_unlock>:
 c00bcf8:	0005883a 	mov	r2,zero
 c00bcfc:	f800283a 	ret

0c00bd00 <_cleanup_r>:
 c00bd00:	01430074 	movhi	r5,3073
 c00bd04:	29460a04 	addi	r5,r5,6184
 c00bd08:	c00ca681 	jmpi	c00ca68 <_fwalk_reent>

0c00bd0c <__sinit.part.1>:
 c00bd0c:	defff704 	addi	sp,sp,-36
 c00bd10:	00c30074 	movhi	r3,3073
 c00bd14:	dfc00815 	stw	ra,32(sp)
 c00bd18:	ddc00715 	stw	r23,28(sp)
 c00bd1c:	dd800615 	stw	r22,24(sp)
 c00bd20:	dd400515 	stw	r21,20(sp)
 c00bd24:	dd000415 	stw	r20,16(sp)
 c00bd28:	dcc00315 	stw	r19,12(sp)
 c00bd2c:	dc800215 	stw	r18,8(sp)
 c00bd30:	dc400115 	stw	r17,4(sp)
 c00bd34:	dc000015 	stw	r16,0(sp)
 c00bd38:	18ef4004 	addi	r3,r3,-17152
 c00bd3c:	24000117 	ldw	r16,4(r4)
 c00bd40:	20c00f15 	stw	r3,60(r4)
 c00bd44:	2080bb04 	addi	r2,r4,748
 c00bd48:	00c000c4 	movi	r3,3
 c00bd4c:	20c0b915 	stw	r3,740(r4)
 c00bd50:	2080ba15 	stw	r2,744(r4)
 c00bd54:	2000b815 	stw	zero,736(r4)
 c00bd58:	05c00204 	movi	r23,8
 c00bd5c:	00800104 	movi	r2,4
 c00bd60:	2025883a 	mov	r18,r4
 c00bd64:	b80d883a 	mov	r6,r23
 c00bd68:	81001704 	addi	r4,r16,92
 c00bd6c:	000b883a 	mov	r5,zero
 c00bd70:	80000015 	stw	zero,0(r16)
 c00bd74:	80000115 	stw	zero,4(r16)
 c00bd78:	80000215 	stw	zero,8(r16)
 c00bd7c:	8080030d 	sth	r2,12(r16)
 c00bd80:	80001915 	stw	zero,100(r16)
 c00bd84:	8000038d 	sth	zero,14(r16)
 c00bd88:	80000415 	stw	zero,16(r16)
 c00bd8c:	80000515 	stw	zero,20(r16)
 c00bd90:	80000615 	stw	zero,24(r16)
 c00bd94:	c00d0600 	call	c00d060 <memset>
 c00bd98:	05830074 	movhi	r22,3073
 c00bd9c:	94400217 	ldw	r17,8(r18)
 c00bda0:	05430074 	movhi	r21,3073
 c00bda4:	05030074 	movhi	r20,3073
 c00bda8:	04c30074 	movhi	r19,3073
 c00bdac:	b5ba0604 	addi	r22,r22,-6120
 c00bdb0:	ad7a1d04 	addi	r21,r21,-6028
 c00bdb4:	a53a3c04 	addi	r20,r20,-5904
 c00bdb8:	9cfa5304 	addi	r19,r19,-5812
 c00bdbc:	85800815 	stw	r22,32(r16)
 c00bdc0:	85400915 	stw	r21,36(r16)
 c00bdc4:	85000a15 	stw	r20,40(r16)
 c00bdc8:	84c00b15 	stw	r19,44(r16)
 c00bdcc:	84000715 	stw	r16,28(r16)
 c00bdd0:	00800284 	movi	r2,10
 c00bdd4:	8880030d 	sth	r2,12(r17)
 c00bdd8:	00800044 	movi	r2,1
 c00bddc:	b80d883a 	mov	r6,r23
 c00bde0:	89001704 	addi	r4,r17,92
 c00bde4:	000b883a 	mov	r5,zero
 c00bde8:	88000015 	stw	zero,0(r17)
 c00bdec:	88000115 	stw	zero,4(r17)
 c00bdf0:	88000215 	stw	zero,8(r17)
 c00bdf4:	88001915 	stw	zero,100(r17)
 c00bdf8:	8880038d 	sth	r2,14(r17)
 c00bdfc:	88000415 	stw	zero,16(r17)
 c00be00:	88000515 	stw	zero,20(r17)
 c00be04:	88000615 	stw	zero,24(r17)
 c00be08:	c00d0600 	call	c00d060 <memset>
 c00be0c:	94000317 	ldw	r16,12(r18)
 c00be10:	00800484 	movi	r2,18
 c00be14:	8c400715 	stw	r17,28(r17)
 c00be18:	8d800815 	stw	r22,32(r17)
 c00be1c:	8d400915 	stw	r21,36(r17)
 c00be20:	8d000a15 	stw	r20,40(r17)
 c00be24:	8cc00b15 	stw	r19,44(r17)
 c00be28:	8080030d 	sth	r2,12(r16)
 c00be2c:	00800084 	movi	r2,2
 c00be30:	80000015 	stw	zero,0(r16)
 c00be34:	80000115 	stw	zero,4(r16)
 c00be38:	80000215 	stw	zero,8(r16)
 c00be3c:	80001915 	stw	zero,100(r16)
 c00be40:	8080038d 	sth	r2,14(r16)
 c00be44:	80000415 	stw	zero,16(r16)
 c00be48:	80000515 	stw	zero,20(r16)
 c00be4c:	80000615 	stw	zero,24(r16)
 c00be50:	b80d883a 	mov	r6,r23
 c00be54:	000b883a 	mov	r5,zero
 c00be58:	81001704 	addi	r4,r16,92
 c00be5c:	c00d0600 	call	c00d060 <memset>
 c00be60:	00800044 	movi	r2,1
 c00be64:	84000715 	stw	r16,28(r16)
 c00be68:	85800815 	stw	r22,32(r16)
 c00be6c:	85400915 	stw	r21,36(r16)
 c00be70:	85000a15 	stw	r20,40(r16)
 c00be74:	84c00b15 	stw	r19,44(r16)
 c00be78:	90800e15 	stw	r2,56(r18)
 c00be7c:	dfc00817 	ldw	ra,32(sp)
 c00be80:	ddc00717 	ldw	r23,28(sp)
 c00be84:	dd800617 	ldw	r22,24(sp)
 c00be88:	dd400517 	ldw	r21,20(sp)
 c00be8c:	dd000417 	ldw	r20,16(sp)
 c00be90:	dcc00317 	ldw	r19,12(sp)
 c00be94:	dc800217 	ldw	r18,8(sp)
 c00be98:	dc400117 	ldw	r17,4(sp)
 c00be9c:	dc000017 	ldw	r16,0(sp)
 c00bea0:	dec00904 	addi	sp,sp,36
 c00bea4:	f800283a 	ret

0c00bea8 <__fp_lock>:
 c00bea8:	0005883a 	mov	r2,zero
 c00beac:	f800283a 	ret

0c00beb0 <__sfmoreglue>:
 c00beb0:	defffc04 	addi	sp,sp,-16
 c00beb4:	dc800215 	stw	r18,8(sp)
 c00beb8:	2825883a 	mov	r18,r5
 c00bebc:	dc000015 	stw	r16,0(sp)
 c00bec0:	01401a04 	movi	r5,104
 c00bec4:	2021883a 	mov	r16,r4
 c00bec8:	913fffc4 	addi	r4,r18,-1
 c00becc:	dfc00315 	stw	ra,12(sp)
 c00bed0:	dc400115 	stw	r17,4(sp)
 c00bed4:	c004c7c0 	call	c004c7c <__mulsi3>
 c00bed8:	8009883a 	mov	r4,r16
 c00bedc:	11401d04 	addi	r5,r2,116
 c00bee0:	1023883a 	mov	r17,r2
 c00bee4:	c004ccc0 	call	c004ccc <_malloc_r>
 c00bee8:	1021883a 	mov	r16,r2
 c00beec:	10000726 	beq	r2,zero,c00bf0c <__sfmoreglue+0x5c>
 c00bef0:	11000304 	addi	r4,r2,12
 c00bef4:	10000015 	stw	zero,0(r2)
 c00bef8:	14800115 	stw	r18,4(r2)
 c00befc:	11000215 	stw	r4,8(r2)
 c00bf00:	89801a04 	addi	r6,r17,104
 c00bf04:	000b883a 	mov	r5,zero
 c00bf08:	c00d0600 	call	c00d060 <memset>
 c00bf0c:	8005883a 	mov	r2,r16
 c00bf10:	dfc00317 	ldw	ra,12(sp)
 c00bf14:	dc800217 	ldw	r18,8(sp)
 c00bf18:	dc400117 	ldw	r17,4(sp)
 c00bf1c:	dc000017 	ldw	r16,0(sp)
 c00bf20:	dec00404 	addi	sp,sp,16
 c00bf24:	f800283a 	ret

0c00bf28 <__sfp>:
 c00bf28:	defffb04 	addi	sp,sp,-20
 c00bf2c:	dc000015 	stw	r16,0(sp)
 c00bf30:	040300b4 	movhi	r16,3074
 c00bf34:	842ac704 	addi	r16,r16,-21732
 c00bf38:	dcc00315 	stw	r19,12(sp)
 c00bf3c:	2027883a 	mov	r19,r4
 c00bf40:	81000017 	ldw	r4,0(r16)
 c00bf44:	dfc00415 	stw	ra,16(sp)
 c00bf48:	dc800215 	stw	r18,8(sp)
 c00bf4c:	20800e17 	ldw	r2,56(r4)
 c00bf50:	dc400115 	stw	r17,4(sp)
 c00bf54:	1000021e 	bne	r2,zero,c00bf60 <__sfp+0x38>
 c00bf58:	c00bd0c0 	call	c00bd0c <__sinit.part.1>
 c00bf5c:	81000017 	ldw	r4,0(r16)
 c00bf60:	2480b804 	addi	r18,r4,736
 c00bf64:	047fffc4 	movi	r17,-1
 c00bf68:	91000117 	ldw	r4,4(r18)
 c00bf6c:	94000217 	ldw	r16,8(r18)
 c00bf70:	213fffc4 	addi	r4,r4,-1
 c00bf74:	20000a16 	blt	r4,zero,c00bfa0 <__sfp+0x78>
 c00bf78:	8080030f 	ldh	r2,12(r16)
 c00bf7c:	10000c26 	beq	r2,zero,c00bfb0 <__sfp+0x88>
 c00bf80:	80c01d04 	addi	r3,r16,116
 c00bf84:	00000206 	br	c00bf90 <__sfp+0x68>
 c00bf88:	18bfe60f 	ldh	r2,-104(r3)
 c00bf8c:	10000826 	beq	r2,zero,c00bfb0 <__sfp+0x88>
 c00bf90:	213fffc4 	addi	r4,r4,-1
 c00bf94:	1c3ffd04 	addi	r16,r3,-12
 c00bf98:	18c01a04 	addi	r3,r3,104
 c00bf9c:	247ffa1e 	bne	r4,r17,c00bf88 <__alt_data_end+0xfc00bf88>
 c00bfa0:	90800017 	ldw	r2,0(r18)
 c00bfa4:	10001d26 	beq	r2,zero,c00c01c <__sfp+0xf4>
 c00bfa8:	1025883a 	mov	r18,r2
 c00bfac:	003fee06 	br	c00bf68 <__alt_data_end+0xfc00bf68>
 c00bfb0:	00bfffc4 	movi	r2,-1
 c00bfb4:	8080038d 	sth	r2,14(r16)
 c00bfb8:	00800044 	movi	r2,1
 c00bfbc:	8080030d 	sth	r2,12(r16)
 c00bfc0:	80001915 	stw	zero,100(r16)
 c00bfc4:	80000015 	stw	zero,0(r16)
 c00bfc8:	80000215 	stw	zero,8(r16)
 c00bfcc:	80000115 	stw	zero,4(r16)
 c00bfd0:	80000415 	stw	zero,16(r16)
 c00bfd4:	80000515 	stw	zero,20(r16)
 c00bfd8:	80000615 	stw	zero,24(r16)
 c00bfdc:	01800204 	movi	r6,8
 c00bfe0:	000b883a 	mov	r5,zero
 c00bfe4:	81001704 	addi	r4,r16,92
 c00bfe8:	c00d0600 	call	c00d060 <memset>
 c00bfec:	8005883a 	mov	r2,r16
 c00bff0:	80000c15 	stw	zero,48(r16)
 c00bff4:	80000d15 	stw	zero,52(r16)
 c00bff8:	80001115 	stw	zero,68(r16)
 c00bffc:	80001215 	stw	zero,72(r16)
 c00c000:	dfc00417 	ldw	ra,16(sp)
 c00c004:	dcc00317 	ldw	r19,12(sp)
 c00c008:	dc800217 	ldw	r18,8(sp)
 c00c00c:	dc400117 	ldw	r17,4(sp)
 c00c010:	dc000017 	ldw	r16,0(sp)
 c00c014:	dec00504 	addi	sp,sp,20
 c00c018:	f800283a 	ret
 c00c01c:	01400104 	movi	r5,4
 c00c020:	9809883a 	mov	r4,r19
 c00c024:	c00beb00 	call	c00beb0 <__sfmoreglue>
 c00c028:	90800015 	stw	r2,0(r18)
 c00c02c:	103fde1e 	bne	r2,zero,c00bfa8 <__alt_data_end+0xfc00bfa8>
 c00c030:	00800304 	movi	r2,12
 c00c034:	98800015 	stw	r2,0(r19)
 c00c038:	0005883a 	mov	r2,zero
 c00c03c:	003ff006 	br	c00c000 <__alt_data_end+0xfc00c000>

0c00c040 <_cleanup>:
 c00c040:	008300b4 	movhi	r2,3074
 c00c044:	10aac704 	addi	r2,r2,-21732
 c00c048:	11000017 	ldw	r4,0(r2)
 c00c04c:	01430074 	movhi	r5,3073
 c00c050:	29460a04 	addi	r5,r5,6184
 c00c054:	c00ca681 	jmpi	c00ca68 <_fwalk_reent>

0c00c058 <__sinit>:
 c00c058:	20800e17 	ldw	r2,56(r4)
 c00c05c:	10000126 	beq	r2,zero,c00c064 <__sinit+0xc>
 c00c060:	f800283a 	ret
 c00c064:	c00bd0c1 	jmpi	c00bd0c <__sinit.part.1>

0c00c068 <__sfp_lock_acquire>:
 c00c068:	f800283a 	ret

0c00c06c <__sfp_lock_release>:
 c00c06c:	f800283a 	ret

0c00c070 <__sinit_lock_acquire>:
 c00c070:	f800283a 	ret

0c00c074 <__sinit_lock_release>:
 c00c074:	f800283a 	ret

0c00c078 <__fp_lock_all>:
 c00c078:	008300b4 	movhi	r2,3074
 c00c07c:	10aac804 	addi	r2,r2,-21728
 c00c080:	11000017 	ldw	r4,0(r2)
 c00c084:	01430074 	movhi	r5,3073
 c00c088:	296faa04 	addi	r5,r5,-16728
 c00c08c:	c00c9a41 	jmpi	c00c9a4 <_fwalk>

0c00c090 <__fp_unlock_all>:
 c00c090:	008300b4 	movhi	r2,3074
 c00c094:	10aac804 	addi	r2,r2,-21728
 c00c098:	11000017 	ldw	r4,0(r2)
 c00c09c:	01430074 	movhi	r5,3073
 c00c0a0:	296f3e04 	addi	r5,r5,-17160
 c00c0a4:	c00c9a41 	jmpi	c00c9a4 <_fwalk>

0c00c0a8 <_malloc_trim_r>:
 c00c0a8:	defffb04 	addi	sp,sp,-20
 c00c0ac:	dcc00315 	stw	r19,12(sp)
 c00c0b0:	04c300b4 	movhi	r19,3074
 c00c0b4:	dc800215 	stw	r18,8(sp)
 c00c0b8:	dc400115 	stw	r17,4(sp)
 c00c0bc:	dc000015 	stw	r16,0(sp)
 c00c0c0:	dfc00415 	stw	ra,16(sp)
 c00c0c4:	2821883a 	mov	r16,r5
 c00c0c8:	9ce41004 	addi	r19,r19,-28608
 c00c0cc:	2025883a 	mov	r18,r4
 c00c0d0:	c015ce40 	call	c015ce4 <__malloc_lock>
 c00c0d4:	98800217 	ldw	r2,8(r19)
 c00c0d8:	14400117 	ldw	r17,4(r2)
 c00c0dc:	00bfff04 	movi	r2,-4
 c00c0e0:	88a2703a 	and	r17,r17,r2
 c00c0e4:	8c21c83a 	sub	r16,r17,r16
 c00c0e8:	8403fbc4 	addi	r16,r16,4079
 c00c0ec:	8020d33a 	srli	r16,r16,12
 c00c0f0:	0083ffc4 	movi	r2,4095
 c00c0f4:	843fffc4 	addi	r16,r16,-1
 c00c0f8:	8020933a 	slli	r16,r16,12
 c00c0fc:	1400060e 	bge	r2,r16,c00c118 <_malloc_trim_r+0x70>
 c00c100:	000b883a 	mov	r5,zero
 c00c104:	9009883a 	mov	r4,r18
 c00c108:	c0057dc0 	call	c0057dc <_sbrk_r>
 c00c10c:	98c00217 	ldw	r3,8(r19)
 c00c110:	1c47883a 	add	r3,r3,r17
 c00c114:	10c00a26 	beq	r2,r3,c00c140 <_malloc_trim_r+0x98>
 c00c118:	9009883a 	mov	r4,r18
 c00c11c:	c015d080 	call	c015d08 <__malloc_unlock>
 c00c120:	0005883a 	mov	r2,zero
 c00c124:	dfc00417 	ldw	ra,16(sp)
 c00c128:	dcc00317 	ldw	r19,12(sp)
 c00c12c:	dc800217 	ldw	r18,8(sp)
 c00c130:	dc400117 	ldw	r17,4(sp)
 c00c134:	dc000017 	ldw	r16,0(sp)
 c00c138:	dec00504 	addi	sp,sp,20
 c00c13c:	f800283a 	ret
 c00c140:	040bc83a 	sub	r5,zero,r16
 c00c144:	9009883a 	mov	r4,r18
 c00c148:	c0057dc0 	call	c0057dc <_sbrk_r>
 c00c14c:	00ffffc4 	movi	r3,-1
 c00c150:	10c00d26 	beq	r2,r3,c00c188 <_malloc_trim_r+0xe0>
 c00c154:	00c300b4 	movhi	r3,3074
 c00c158:	18f28404 	addi	r3,r3,-13808
 c00c15c:	18800017 	ldw	r2,0(r3)
 c00c160:	99000217 	ldw	r4,8(r19)
 c00c164:	8c23c83a 	sub	r17,r17,r16
 c00c168:	8c400054 	ori	r17,r17,1
 c00c16c:	1421c83a 	sub	r16,r2,r16
 c00c170:	24400115 	stw	r17,4(r4)
 c00c174:	9009883a 	mov	r4,r18
 c00c178:	1c000015 	stw	r16,0(r3)
 c00c17c:	c015d080 	call	c015d08 <__malloc_unlock>
 c00c180:	00800044 	movi	r2,1
 c00c184:	003fe706 	br	c00c124 <__alt_data_end+0xfc00c124>
 c00c188:	000b883a 	mov	r5,zero
 c00c18c:	9009883a 	mov	r4,r18
 c00c190:	c0057dc0 	call	c0057dc <_sbrk_r>
 c00c194:	99000217 	ldw	r4,8(r19)
 c00c198:	014003c4 	movi	r5,15
 c00c19c:	1107c83a 	sub	r3,r2,r4
 c00c1a0:	28ffdd0e 	bge	r5,r3,c00c118 <__alt_data_end+0xfc00c118>
 c00c1a4:	014300b4 	movhi	r5,3074
 c00c1a8:	296ac504 	addi	r5,r5,-21740
 c00c1ac:	29400017 	ldw	r5,0(r5)
 c00c1b0:	18c00054 	ori	r3,r3,1
 c00c1b4:	20c00115 	stw	r3,4(r4)
 c00c1b8:	00c300b4 	movhi	r3,3074
 c00c1bc:	1145c83a 	sub	r2,r2,r5
 c00c1c0:	18f28404 	addi	r3,r3,-13808
 c00c1c4:	18800015 	stw	r2,0(r3)
 c00c1c8:	003fd306 	br	c00c118 <__alt_data_end+0xfc00c118>

0c00c1cc <_free_r>:
 c00c1cc:	28004126 	beq	r5,zero,c00c2d4 <_free_r+0x108>
 c00c1d0:	defffd04 	addi	sp,sp,-12
 c00c1d4:	dc400115 	stw	r17,4(sp)
 c00c1d8:	dc000015 	stw	r16,0(sp)
 c00c1dc:	2023883a 	mov	r17,r4
 c00c1e0:	2821883a 	mov	r16,r5
 c00c1e4:	dfc00215 	stw	ra,8(sp)
 c00c1e8:	c015ce40 	call	c015ce4 <__malloc_lock>
 c00c1ec:	81ffff17 	ldw	r7,-4(r16)
 c00c1f0:	00bfff84 	movi	r2,-2
 c00c1f4:	010300b4 	movhi	r4,3074
 c00c1f8:	81bffe04 	addi	r6,r16,-8
 c00c1fc:	3884703a 	and	r2,r7,r2
 c00c200:	21241004 	addi	r4,r4,-28608
 c00c204:	308b883a 	add	r5,r6,r2
 c00c208:	2a400117 	ldw	r9,4(r5)
 c00c20c:	22000217 	ldw	r8,8(r4)
 c00c210:	00ffff04 	movi	r3,-4
 c00c214:	48c6703a 	and	r3,r9,r3
 c00c218:	2a005726 	beq	r5,r8,c00c378 <_free_r+0x1ac>
 c00c21c:	28c00115 	stw	r3,4(r5)
 c00c220:	39c0004c 	andi	r7,r7,1
 c00c224:	3800091e 	bne	r7,zero,c00c24c <_free_r+0x80>
 c00c228:	823ffe17 	ldw	r8,-8(r16)
 c00c22c:	22400204 	addi	r9,r4,8
 c00c230:	320dc83a 	sub	r6,r6,r8
 c00c234:	31c00217 	ldw	r7,8(r6)
 c00c238:	1205883a 	add	r2,r2,r8
 c00c23c:	3a406526 	beq	r7,r9,c00c3d4 <_free_r+0x208>
 c00c240:	32000317 	ldw	r8,12(r6)
 c00c244:	3a000315 	stw	r8,12(r7)
 c00c248:	41c00215 	stw	r7,8(r8)
 c00c24c:	28cf883a 	add	r7,r5,r3
 c00c250:	39c00117 	ldw	r7,4(r7)
 c00c254:	39c0004c 	andi	r7,r7,1
 c00c258:	38003a26 	beq	r7,zero,c00c344 <_free_r+0x178>
 c00c25c:	10c00054 	ori	r3,r2,1
 c00c260:	30c00115 	stw	r3,4(r6)
 c00c264:	3087883a 	add	r3,r6,r2
 c00c268:	18800015 	stw	r2,0(r3)
 c00c26c:	00c07fc4 	movi	r3,511
 c00c270:	18801936 	bltu	r3,r2,c00c2d8 <_free_r+0x10c>
 c00c274:	1004d0fa 	srli	r2,r2,3
 c00c278:	01c00044 	movi	r7,1
 c00c27c:	21400117 	ldw	r5,4(r4)
 c00c280:	10c00044 	addi	r3,r2,1
 c00c284:	18c7883a 	add	r3,r3,r3
 c00c288:	1005d0ba 	srai	r2,r2,2
 c00c28c:	18c7883a 	add	r3,r3,r3
 c00c290:	18c7883a 	add	r3,r3,r3
 c00c294:	1907883a 	add	r3,r3,r4
 c00c298:	3884983a 	sll	r2,r7,r2
 c00c29c:	19c00017 	ldw	r7,0(r3)
 c00c2a0:	1a3ffe04 	addi	r8,r3,-8
 c00c2a4:	1144b03a 	or	r2,r2,r5
 c00c2a8:	32000315 	stw	r8,12(r6)
 c00c2ac:	31c00215 	stw	r7,8(r6)
 c00c2b0:	20800115 	stw	r2,4(r4)
 c00c2b4:	19800015 	stw	r6,0(r3)
 c00c2b8:	39800315 	stw	r6,12(r7)
 c00c2bc:	8809883a 	mov	r4,r17
 c00c2c0:	dfc00217 	ldw	ra,8(sp)
 c00c2c4:	dc400117 	ldw	r17,4(sp)
 c00c2c8:	dc000017 	ldw	r16,0(sp)
 c00c2cc:	dec00304 	addi	sp,sp,12
 c00c2d0:	c015d081 	jmpi	c015d08 <__malloc_unlock>
 c00c2d4:	f800283a 	ret
 c00c2d8:	100ad27a 	srli	r5,r2,9
 c00c2dc:	00c00104 	movi	r3,4
 c00c2e0:	19404a36 	bltu	r3,r5,c00c40c <_free_r+0x240>
 c00c2e4:	100ad1ba 	srli	r5,r2,6
 c00c2e8:	28c00e44 	addi	r3,r5,57
 c00c2ec:	18c7883a 	add	r3,r3,r3
 c00c2f0:	29400e04 	addi	r5,r5,56
 c00c2f4:	18c7883a 	add	r3,r3,r3
 c00c2f8:	18c7883a 	add	r3,r3,r3
 c00c2fc:	1909883a 	add	r4,r3,r4
 c00c300:	20c00017 	ldw	r3,0(r4)
 c00c304:	01c300b4 	movhi	r7,3074
 c00c308:	213ffe04 	addi	r4,r4,-8
 c00c30c:	39e41004 	addi	r7,r7,-28608
 c00c310:	20c04426 	beq	r4,r3,c00c424 <_free_r+0x258>
 c00c314:	01ffff04 	movi	r7,-4
 c00c318:	19400117 	ldw	r5,4(r3)
 c00c31c:	29ca703a 	and	r5,r5,r7
 c00c320:	1140022e 	bgeu	r2,r5,c00c32c <_free_r+0x160>
 c00c324:	18c00217 	ldw	r3,8(r3)
 c00c328:	20fffb1e 	bne	r4,r3,c00c318 <__alt_data_end+0xfc00c318>
 c00c32c:	19000317 	ldw	r4,12(r3)
 c00c330:	31000315 	stw	r4,12(r6)
 c00c334:	30c00215 	stw	r3,8(r6)
 c00c338:	21800215 	stw	r6,8(r4)
 c00c33c:	19800315 	stw	r6,12(r3)
 c00c340:	003fde06 	br	c00c2bc <__alt_data_end+0xfc00c2bc>
 c00c344:	29c00217 	ldw	r7,8(r5)
 c00c348:	10c5883a 	add	r2,r2,r3
 c00c34c:	00c300b4 	movhi	r3,3074
 c00c350:	18e41204 	addi	r3,r3,-28600
 c00c354:	38c03b26 	beq	r7,r3,c00c444 <_free_r+0x278>
 c00c358:	2a000317 	ldw	r8,12(r5)
 c00c35c:	11400054 	ori	r5,r2,1
 c00c360:	3087883a 	add	r3,r6,r2
 c00c364:	3a000315 	stw	r8,12(r7)
 c00c368:	41c00215 	stw	r7,8(r8)
 c00c36c:	31400115 	stw	r5,4(r6)
 c00c370:	18800015 	stw	r2,0(r3)
 c00c374:	003fbd06 	br	c00c26c <__alt_data_end+0xfc00c26c>
 c00c378:	39c0004c 	andi	r7,r7,1
 c00c37c:	10c5883a 	add	r2,r2,r3
 c00c380:	3800071e 	bne	r7,zero,c00c3a0 <_free_r+0x1d4>
 c00c384:	81fffe17 	ldw	r7,-8(r16)
 c00c388:	31cdc83a 	sub	r6,r6,r7
 c00c38c:	30c00317 	ldw	r3,12(r6)
 c00c390:	31400217 	ldw	r5,8(r6)
 c00c394:	11c5883a 	add	r2,r2,r7
 c00c398:	28c00315 	stw	r3,12(r5)
 c00c39c:	19400215 	stw	r5,8(r3)
 c00c3a0:	10c00054 	ori	r3,r2,1
 c00c3a4:	30c00115 	stw	r3,4(r6)
 c00c3a8:	00c300b4 	movhi	r3,3074
 c00c3ac:	18eac604 	addi	r3,r3,-21736
 c00c3b0:	18c00017 	ldw	r3,0(r3)
 c00c3b4:	21800215 	stw	r6,8(r4)
 c00c3b8:	10ffc036 	bltu	r2,r3,c00c2bc <__alt_data_end+0xfc00c2bc>
 c00c3bc:	008300b4 	movhi	r2,3074
 c00c3c0:	10b26a04 	addi	r2,r2,-13912
 c00c3c4:	11400017 	ldw	r5,0(r2)
 c00c3c8:	8809883a 	mov	r4,r17
 c00c3cc:	c00c0a80 	call	c00c0a8 <_malloc_trim_r>
 c00c3d0:	003fba06 	br	c00c2bc <__alt_data_end+0xfc00c2bc>
 c00c3d4:	28c9883a 	add	r4,r5,r3
 c00c3d8:	21000117 	ldw	r4,4(r4)
 c00c3dc:	2100004c 	andi	r4,r4,1
 c00c3e0:	2000391e 	bne	r4,zero,c00c4c8 <_free_r+0x2fc>
 c00c3e4:	29c00217 	ldw	r7,8(r5)
 c00c3e8:	29000317 	ldw	r4,12(r5)
 c00c3ec:	1885883a 	add	r2,r3,r2
 c00c3f0:	10c00054 	ori	r3,r2,1
 c00c3f4:	39000315 	stw	r4,12(r7)
 c00c3f8:	21c00215 	stw	r7,8(r4)
 c00c3fc:	30c00115 	stw	r3,4(r6)
 c00c400:	308d883a 	add	r6,r6,r2
 c00c404:	30800015 	stw	r2,0(r6)
 c00c408:	003fac06 	br	c00c2bc <__alt_data_end+0xfc00c2bc>
 c00c40c:	00c00504 	movi	r3,20
 c00c410:	19401536 	bltu	r3,r5,c00c468 <_free_r+0x29c>
 c00c414:	28c01704 	addi	r3,r5,92
 c00c418:	18c7883a 	add	r3,r3,r3
 c00c41c:	294016c4 	addi	r5,r5,91
 c00c420:	003fb406 	br	c00c2f4 <__alt_data_end+0xfc00c2f4>
 c00c424:	280bd0ba 	srai	r5,r5,2
 c00c428:	00c00044 	movi	r3,1
 c00c42c:	38800117 	ldw	r2,4(r7)
 c00c430:	194a983a 	sll	r5,r3,r5
 c00c434:	2007883a 	mov	r3,r4
 c00c438:	2884b03a 	or	r2,r5,r2
 c00c43c:	38800115 	stw	r2,4(r7)
 c00c440:	003fbb06 	br	c00c330 <__alt_data_end+0xfc00c330>
 c00c444:	21800515 	stw	r6,20(r4)
 c00c448:	21800415 	stw	r6,16(r4)
 c00c44c:	10c00054 	ori	r3,r2,1
 c00c450:	31c00315 	stw	r7,12(r6)
 c00c454:	31c00215 	stw	r7,8(r6)
 c00c458:	30c00115 	stw	r3,4(r6)
 c00c45c:	308d883a 	add	r6,r6,r2
 c00c460:	30800015 	stw	r2,0(r6)
 c00c464:	003f9506 	br	c00c2bc <__alt_data_end+0xfc00c2bc>
 c00c468:	00c01504 	movi	r3,84
 c00c46c:	19400536 	bltu	r3,r5,c00c484 <_free_r+0x2b8>
 c00c470:	100ad33a 	srli	r5,r2,12
 c00c474:	28c01bc4 	addi	r3,r5,111
 c00c478:	18c7883a 	add	r3,r3,r3
 c00c47c:	29401b84 	addi	r5,r5,110
 c00c480:	003f9c06 	br	c00c2f4 <__alt_data_end+0xfc00c2f4>
 c00c484:	00c05504 	movi	r3,340
 c00c488:	19400536 	bltu	r3,r5,c00c4a0 <_free_r+0x2d4>
 c00c48c:	100ad3fa 	srli	r5,r2,15
 c00c490:	28c01e04 	addi	r3,r5,120
 c00c494:	18c7883a 	add	r3,r3,r3
 c00c498:	29401dc4 	addi	r5,r5,119
 c00c49c:	003f9506 	br	c00c2f4 <__alt_data_end+0xfc00c2f4>
 c00c4a0:	00c15504 	movi	r3,1364
 c00c4a4:	19400536 	bltu	r3,r5,c00c4bc <_free_r+0x2f0>
 c00c4a8:	100ad4ba 	srli	r5,r2,18
 c00c4ac:	28c01f44 	addi	r3,r5,125
 c00c4b0:	18c7883a 	add	r3,r3,r3
 c00c4b4:	29401f04 	addi	r5,r5,124
 c00c4b8:	003f8e06 	br	c00c2f4 <__alt_data_end+0xfc00c2f4>
 c00c4bc:	00c03f84 	movi	r3,254
 c00c4c0:	01401f84 	movi	r5,126
 c00c4c4:	003f8b06 	br	c00c2f4 <__alt_data_end+0xfc00c2f4>
 c00c4c8:	10c00054 	ori	r3,r2,1
 c00c4cc:	30c00115 	stw	r3,4(r6)
 c00c4d0:	308d883a 	add	r6,r6,r2
 c00c4d4:	30800015 	stw	r2,0(r6)
 c00c4d8:	003f7806 	br	c00c2bc <__alt_data_end+0xfc00c2bc>

0c00c4dc <__sfvwrite_r>:
 c00c4dc:	30800217 	ldw	r2,8(r6)
 c00c4e0:	10006726 	beq	r2,zero,c00c680 <__sfvwrite_r+0x1a4>
 c00c4e4:	28c0030b 	ldhu	r3,12(r5)
 c00c4e8:	defff404 	addi	sp,sp,-48
 c00c4ec:	dd400715 	stw	r21,28(sp)
 c00c4f0:	dd000615 	stw	r20,24(sp)
 c00c4f4:	dc000215 	stw	r16,8(sp)
 c00c4f8:	dfc00b15 	stw	ra,44(sp)
 c00c4fc:	df000a15 	stw	fp,40(sp)
 c00c500:	ddc00915 	stw	r23,36(sp)
 c00c504:	dd800815 	stw	r22,32(sp)
 c00c508:	dcc00515 	stw	r19,20(sp)
 c00c50c:	dc800415 	stw	r18,16(sp)
 c00c510:	dc400315 	stw	r17,12(sp)
 c00c514:	1880020c 	andi	r2,r3,8
 c00c518:	2821883a 	mov	r16,r5
 c00c51c:	202b883a 	mov	r21,r4
 c00c520:	3029883a 	mov	r20,r6
 c00c524:	10002726 	beq	r2,zero,c00c5c4 <__sfvwrite_r+0xe8>
 c00c528:	28800417 	ldw	r2,16(r5)
 c00c52c:	10002526 	beq	r2,zero,c00c5c4 <__sfvwrite_r+0xe8>
 c00c530:	1880008c 	andi	r2,r3,2
 c00c534:	a4400017 	ldw	r17,0(r20)
 c00c538:	10002a26 	beq	r2,zero,c00c5e4 <__sfvwrite_r+0x108>
 c00c53c:	05a00034 	movhi	r22,32768
 c00c540:	0027883a 	mov	r19,zero
 c00c544:	0025883a 	mov	r18,zero
 c00c548:	b5bf0004 	addi	r22,r22,-1024
 c00c54c:	980d883a 	mov	r6,r19
 c00c550:	a809883a 	mov	r4,r21
 c00c554:	90004626 	beq	r18,zero,c00c670 <__sfvwrite_r+0x194>
 c00c558:	900f883a 	mov	r7,r18
 c00c55c:	b480022e 	bgeu	r22,r18,c00c568 <__sfvwrite_r+0x8c>
 c00c560:	01e00034 	movhi	r7,32768
 c00c564:	39ff0004 	addi	r7,r7,-1024
 c00c568:	80800917 	ldw	r2,36(r16)
 c00c56c:	81400717 	ldw	r5,28(r16)
 c00c570:	103ee83a 	callr	r2
 c00c574:	00805a0e 	bge	zero,r2,c00c6e0 <__sfvwrite_r+0x204>
 c00c578:	a0c00217 	ldw	r3,8(r20)
 c00c57c:	98a7883a 	add	r19,r19,r2
 c00c580:	90a5c83a 	sub	r18,r18,r2
 c00c584:	1885c83a 	sub	r2,r3,r2
 c00c588:	a0800215 	stw	r2,8(r20)
 c00c58c:	103fef1e 	bne	r2,zero,c00c54c <__alt_data_end+0xfc00c54c>
 c00c590:	0005883a 	mov	r2,zero
 c00c594:	dfc00b17 	ldw	ra,44(sp)
 c00c598:	df000a17 	ldw	fp,40(sp)
 c00c59c:	ddc00917 	ldw	r23,36(sp)
 c00c5a0:	dd800817 	ldw	r22,32(sp)
 c00c5a4:	dd400717 	ldw	r21,28(sp)
 c00c5a8:	dd000617 	ldw	r20,24(sp)
 c00c5ac:	dcc00517 	ldw	r19,20(sp)
 c00c5b0:	dc800417 	ldw	r18,16(sp)
 c00c5b4:	dc400317 	ldw	r17,12(sp)
 c00c5b8:	dc000217 	ldw	r16,8(sp)
 c00c5bc:	dec00c04 	addi	sp,sp,48
 c00c5c0:	f800283a 	ret
 c00c5c4:	800b883a 	mov	r5,r16
 c00c5c8:	a809883a 	mov	r4,r21
 c00c5cc:	c00a04c0 	call	c00a04c <__swsetup_r>
 c00c5d0:	1000ee1e 	bne	r2,zero,c00c98c <__sfvwrite_r+0x4b0>
 c00c5d4:	80c0030b 	ldhu	r3,12(r16)
 c00c5d8:	a4400017 	ldw	r17,0(r20)
 c00c5dc:	1880008c 	andi	r2,r3,2
 c00c5e0:	103fd61e 	bne	r2,zero,c00c53c <__alt_data_end+0xfc00c53c>
 c00c5e4:	1880004c 	andi	r2,r3,1
 c00c5e8:	1000421e 	bne	r2,zero,c00c6f4 <__sfvwrite_r+0x218>
 c00c5ec:	0039883a 	mov	fp,zero
 c00c5f0:	0025883a 	mov	r18,zero
 c00c5f4:	90001a26 	beq	r18,zero,c00c660 <__sfvwrite_r+0x184>
 c00c5f8:	1880800c 	andi	r2,r3,512
 c00c5fc:	84c00217 	ldw	r19,8(r16)
 c00c600:	10002126 	beq	r2,zero,c00c688 <__sfvwrite_r+0x1ac>
 c00c604:	982f883a 	mov	r23,r19
 c00c608:	94c09636 	bltu	r18,r19,c00c864 <__sfvwrite_r+0x388>
 c00c60c:	1881200c 	andi	r2,r3,1152
 c00c610:	1000a11e 	bne	r2,zero,c00c898 <__sfvwrite_r+0x3bc>
 c00c614:	81000017 	ldw	r4,0(r16)
 c00c618:	b80d883a 	mov	r6,r23
 c00c61c:	e00b883a 	mov	r5,fp
 c00c620:	c00cf040 	call	c00cf04 <memmove>
 c00c624:	80c00217 	ldw	r3,8(r16)
 c00c628:	81000017 	ldw	r4,0(r16)
 c00c62c:	9005883a 	mov	r2,r18
 c00c630:	1ce7c83a 	sub	r19,r3,r19
 c00c634:	25cf883a 	add	r7,r4,r23
 c00c638:	84c00215 	stw	r19,8(r16)
 c00c63c:	81c00015 	stw	r7,0(r16)
 c00c640:	a0c00217 	ldw	r3,8(r20)
 c00c644:	e0b9883a 	add	fp,fp,r2
 c00c648:	90a5c83a 	sub	r18,r18,r2
 c00c64c:	18a7c83a 	sub	r19,r3,r2
 c00c650:	a4c00215 	stw	r19,8(r20)
 c00c654:	983fce26 	beq	r19,zero,c00c590 <__alt_data_end+0xfc00c590>
 c00c658:	80c0030b 	ldhu	r3,12(r16)
 c00c65c:	903fe61e 	bne	r18,zero,c00c5f8 <__alt_data_end+0xfc00c5f8>
 c00c660:	8f000017 	ldw	fp,0(r17)
 c00c664:	8c800117 	ldw	r18,4(r17)
 c00c668:	8c400204 	addi	r17,r17,8
 c00c66c:	003fe106 	br	c00c5f4 <__alt_data_end+0xfc00c5f4>
 c00c670:	8cc00017 	ldw	r19,0(r17)
 c00c674:	8c800117 	ldw	r18,4(r17)
 c00c678:	8c400204 	addi	r17,r17,8
 c00c67c:	003fb306 	br	c00c54c <__alt_data_end+0xfc00c54c>
 c00c680:	0005883a 	mov	r2,zero
 c00c684:	f800283a 	ret
 c00c688:	81000017 	ldw	r4,0(r16)
 c00c68c:	80800417 	ldw	r2,16(r16)
 c00c690:	11005a36 	bltu	r2,r4,c00c7fc <__sfvwrite_r+0x320>
 c00c694:	85c00517 	ldw	r23,20(r16)
 c00c698:	95c05836 	bltu	r18,r23,c00c7fc <__sfvwrite_r+0x320>
 c00c69c:	00a00034 	movhi	r2,32768
 c00c6a0:	10bfffc4 	addi	r2,r2,-1
 c00c6a4:	9009883a 	mov	r4,r18
 c00c6a8:	1480012e 	bgeu	r2,r18,c00c6b0 <__sfvwrite_r+0x1d4>
 c00c6ac:	1009883a 	mov	r4,r2
 c00c6b0:	b80b883a 	mov	r5,r23
 c00c6b4:	c004ac80 	call	c004ac8 <__divsi3>
 c00c6b8:	b80b883a 	mov	r5,r23
 c00c6bc:	1009883a 	mov	r4,r2
 c00c6c0:	c004c7c0 	call	c004c7c <__mulsi3>
 c00c6c4:	81400717 	ldw	r5,28(r16)
 c00c6c8:	80c00917 	ldw	r3,36(r16)
 c00c6cc:	100f883a 	mov	r7,r2
 c00c6d0:	e00d883a 	mov	r6,fp
 c00c6d4:	a809883a 	mov	r4,r21
 c00c6d8:	183ee83a 	callr	r3
 c00c6dc:	00bfd816 	blt	zero,r2,c00c640 <__alt_data_end+0xfc00c640>
 c00c6e0:	8080030b 	ldhu	r2,12(r16)
 c00c6e4:	10801014 	ori	r2,r2,64
 c00c6e8:	8080030d 	sth	r2,12(r16)
 c00c6ec:	00bfffc4 	movi	r2,-1
 c00c6f0:	003fa806 	br	c00c594 <__alt_data_end+0xfc00c594>
 c00c6f4:	0027883a 	mov	r19,zero
 c00c6f8:	0011883a 	mov	r8,zero
 c00c6fc:	0039883a 	mov	fp,zero
 c00c700:	0025883a 	mov	r18,zero
 c00c704:	90001f26 	beq	r18,zero,c00c784 <__sfvwrite_r+0x2a8>
 c00c708:	40005a26 	beq	r8,zero,c00c874 <__sfvwrite_r+0x398>
 c00c70c:	982d883a 	mov	r22,r19
 c00c710:	94c0012e 	bgeu	r18,r19,c00c718 <__sfvwrite_r+0x23c>
 c00c714:	902d883a 	mov	r22,r18
 c00c718:	81000017 	ldw	r4,0(r16)
 c00c71c:	80800417 	ldw	r2,16(r16)
 c00c720:	b02f883a 	mov	r23,r22
 c00c724:	81c00517 	ldw	r7,20(r16)
 c00c728:	1100032e 	bgeu	r2,r4,c00c738 <__sfvwrite_r+0x25c>
 c00c72c:	80c00217 	ldw	r3,8(r16)
 c00c730:	38c7883a 	add	r3,r7,r3
 c00c734:	1d801816 	blt	r3,r22,c00c798 <__sfvwrite_r+0x2bc>
 c00c738:	b1c03e16 	blt	r22,r7,c00c834 <__sfvwrite_r+0x358>
 c00c73c:	80800917 	ldw	r2,36(r16)
 c00c740:	81400717 	ldw	r5,28(r16)
 c00c744:	e00d883a 	mov	r6,fp
 c00c748:	da000115 	stw	r8,4(sp)
 c00c74c:	a809883a 	mov	r4,r21
 c00c750:	103ee83a 	callr	r2
 c00c754:	102f883a 	mov	r23,r2
 c00c758:	da000117 	ldw	r8,4(sp)
 c00c75c:	00bfe00e 	bge	zero,r2,c00c6e0 <__alt_data_end+0xfc00c6e0>
 c00c760:	9de7c83a 	sub	r19,r19,r23
 c00c764:	98001f26 	beq	r19,zero,c00c7e4 <__sfvwrite_r+0x308>
 c00c768:	a0800217 	ldw	r2,8(r20)
 c00c76c:	e5f9883a 	add	fp,fp,r23
 c00c770:	95e5c83a 	sub	r18,r18,r23
 c00c774:	15efc83a 	sub	r23,r2,r23
 c00c778:	a5c00215 	stw	r23,8(r20)
 c00c77c:	b83f8426 	beq	r23,zero,c00c590 <__alt_data_end+0xfc00c590>
 c00c780:	903fe11e 	bne	r18,zero,c00c708 <__alt_data_end+0xfc00c708>
 c00c784:	8f000017 	ldw	fp,0(r17)
 c00c788:	8c800117 	ldw	r18,4(r17)
 c00c78c:	0011883a 	mov	r8,zero
 c00c790:	8c400204 	addi	r17,r17,8
 c00c794:	003fdb06 	br	c00c704 <__alt_data_end+0xfc00c704>
 c00c798:	180d883a 	mov	r6,r3
 c00c79c:	e00b883a 	mov	r5,fp
 c00c7a0:	da000115 	stw	r8,4(sp)
 c00c7a4:	d8c00015 	stw	r3,0(sp)
 c00c7a8:	c00cf040 	call	c00cf04 <memmove>
 c00c7ac:	d8c00017 	ldw	r3,0(sp)
 c00c7b0:	80800017 	ldw	r2,0(r16)
 c00c7b4:	800b883a 	mov	r5,r16
 c00c7b8:	a809883a 	mov	r4,r21
 c00c7bc:	10c5883a 	add	r2,r2,r3
 c00c7c0:	80800015 	stw	r2,0(r16)
 c00c7c4:	d8c00015 	stw	r3,0(sp)
 c00c7c8:	c00bc6c0 	call	c00bc6c <_fflush_r>
 c00c7cc:	d8c00017 	ldw	r3,0(sp)
 c00c7d0:	da000117 	ldw	r8,4(sp)
 c00c7d4:	103fc21e 	bne	r2,zero,c00c6e0 <__alt_data_end+0xfc00c6e0>
 c00c7d8:	182f883a 	mov	r23,r3
 c00c7dc:	9de7c83a 	sub	r19,r19,r23
 c00c7e0:	983fe11e 	bne	r19,zero,c00c768 <__alt_data_end+0xfc00c768>
 c00c7e4:	800b883a 	mov	r5,r16
 c00c7e8:	a809883a 	mov	r4,r21
 c00c7ec:	c00bc6c0 	call	c00bc6c <_fflush_r>
 c00c7f0:	103fbb1e 	bne	r2,zero,c00c6e0 <__alt_data_end+0xfc00c6e0>
 c00c7f4:	0011883a 	mov	r8,zero
 c00c7f8:	003fdb06 	br	c00c768 <__alt_data_end+0xfc00c768>
 c00c7fc:	94c0012e 	bgeu	r18,r19,c00c804 <__sfvwrite_r+0x328>
 c00c800:	9027883a 	mov	r19,r18
 c00c804:	980d883a 	mov	r6,r19
 c00c808:	e00b883a 	mov	r5,fp
 c00c80c:	c00cf040 	call	c00cf04 <memmove>
 c00c810:	80800217 	ldw	r2,8(r16)
 c00c814:	80c00017 	ldw	r3,0(r16)
 c00c818:	14c5c83a 	sub	r2,r2,r19
 c00c81c:	1cc7883a 	add	r3,r3,r19
 c00c820:	80800215 	stw	r2,8(r16)
 c00c824:	80c00015 	stw	r3,0(r16)
 c00c828:	10004326 	beq	r2,zero,c00c938 <__sfvwrite_r+0x45c>
 c00c82c:	9805883a 	mov	r2,r19
 c00c830:	003f8306 	br	c00c640 <__alt_data_end+0xfc00c640>
 c00c834:	b00d883a 	mov	r6,r22
 c00c838:	e00b883a 	mov	r5,fp
 c00c83c:	da000115 	stw	r8,4(sp)
 c00c840:	c00cf040 	call	c00cf04 <memmove>
 c00c844:	80800217 	ldw	r2,8(r16)
 c00c848:	80c00017 	ldw	r3,0(r16)
 c00c84c:	da000117 	ldw	r8,4(sp)
 c00c850:	1585c83a 	sub	r2,r2,r22
 c00c854:	1dad883a 	add	r22,r3,r22
 c00c858:	80800215 	stw	r2,8(r16)
 c00c85c:	85800015 	stw	r22,0(r16)
 c00c860:	003fbf06 	br	c00c760 <__alt_data_end+0xfc00c760>
 c00c864:	81000017 	ldw	r4,0(r16)
 c00c868:	9027883a 	mov	r19,r18
 c00c86c:	902f883a 	mov	r23,r18
 c00c870:	003f6906 	br	c00c618 <__alt_data_end+0xfc00c618>
 c00c874:	900d883a 	mov	r6,r18
 c00c878:	01400284 	movi	r5,10
 c00c87c:	e009883a 	mov	r4,fp
 c00c880:	c00ce200 	call	c00ce20 <memchr>
 c00c884:	10003e26 	beq	r2,zero,c00c980 <__sfvwrite_r+0x4a4>
 c00c888:	10800044 	addi	r2,r2,1
 c00c88c:	1727c83a 	sub	r19,r2,fp
 c00c890:	02000044 	movi	r8,1
 c00c894:	003f9d06 	br	c00c70c <__alt_data_end+0xfc00c70c>
 c00c898:	80800517 	ldw	r2,20(r16)
 c00c89c:	81400417 	ldw	r5,16(r16)
 c00c8a0:	81c00017 	ldw	r7,0(r16)
 c00c8a4:	10a7883a 	add	r19,r2,r2
 c00c8a8:	9885883a 	add	r2,r19,r2
 c00c8ac:	1026d7fa 	srli	r19,r2,31
 c00c8b0:	396dc83a 	sub	r22,r7,r5
 c00c8b4:	b1000044 	addi	r4,r22,1
 c00c8b8:	9885883a 	add	r2,r19,r2
 c00c8bc:	1027d07a 	srai	r19,r2,1
 c00c8c0:	2485883a 	add	r2,r4,r18
 c00c8c4:	980d883a 	mov	r6,r19
 c00c8c8:	9880022e 	bgeu	r19,r2,c00c8d4 <__sfvwrite_r+0x3f8>
 c00c8cc:	1027883a 	mov	r19,r2
 c00c8d0:	100d883a 	mov	r6,r2
 c00c8d4:	18c1000c 	andi	r3,r3,1024
 c00c8d8:	18001c26 	beq	r3,zero,c00c94c <__sfvwrite_r+0x470>
 c00c8dc:	300b883a 	mov	r5,r6
 c00c8e0:	a809883a 	mov	r4,r21
 c00c8e4:	c004ccc0 	call	c004ccc <_malloc_r>
 c00c8e8:	102f883a 	mov	r23,r2
 c00c8ec:	10002926 	beq	r2,zero,c00c994 <__sfvwrite_r+0x4b8>
 c00c8f0:	81400417 	ldw	r5,16(r16)
 c00c8f4:	b00d883a 	mov	r6,r22
 c00c8f8:	1009883a 	mov	r4,r2
 c00c8fc:	c0054d80 	call	c0054d8 <memcpy>
 c00c900:	8080030b 	ldhu	r2,12(r16)
 c00c904:	00fedfc4 	movi	r3,-1153
 c00c908:	10c4703a 	and	r2,r2,r3
 c00c90c:	10802014 	ori	r2,r2,128
 c00c910:	8080030d 	sth	r2,12(r16)
 c00c914:	bd89883a 	add	r4,r23,r22
 c00c918:	9d8fc83a 	sub	r7,r19,r22
 c00c91c:	85c00415 	stw	r23,16(r16)
 c00c920:	84c00515 	stw	r19,20(r16)
 c00c924:	81000015 	stw	r4,0(r16)
 c00c928:	9027883a 	mov	r19,r18
 c00c92c:	81c00215 	stw	r7,8(r16)
 c00c930:	902f883a 	mov	r23,r18
 c00c934:	003f3806 	br	c00c618 <__alt_data_end+0xfc00c618>
 c00c938:	800b883a 	mov	r5,r16
 c00c93c:	a809883a 	mov	r4,r21
 c00c940:	c00bc6c0 	call	c00bc6c <_fflush_r>
 c00c944:	103fb926 	beq	r2,zero,c00c82c <__alt_data_end+0xfc00c82c>
 c00c948:	003f6506 	br	c00c6e0 <__alt_data_end+0xfc00c6e0>
 c00c94c:	a809883a 	mov	r4,r21
 c00c950:	c00e2400 	call	c00e240 <_realloc_r>
 c00c954:	102f883a 	mov	r23,r2
 c00c958:	103fee1e 	bne	r2,zero,c00c914 <__alt_data_end+0xfc00c914>
 c00c95c:	81400417 	ldw	r5,16(r16)
 c00c960:	a809883a 	mov	r4,r21
 c00c964:	c00c1cc0 	call	c00c1cc <_free_r>
 c00c968:	8080030b 	ldhu	r2,12(r16)
 c00c96c:	00ffdfc4 	movi	r3,-129
 c00c970:	1884703a 	and	r2,r3,r2
 c00c974:	00c00304 	movi	r3,12
 c00c978:	a8c00015 	stw	r3,0(r21)
 c00c97c:	003f5906 	br	c00c6e4 <__alt_data_end+0xfc00c6e4>
 c00c980:	94c00044 	addi	r19,r18,1
 c00c984:	02000044 	movi	r8,1
 c00c988:	003f6006 	br	c00c70c <__alt_data_end+0xfc00c70c>
 c00c98c:	00bfffc4 	movi	r2,-1
 c00c990:	003f0006 	br	c00c594 <__alt_data_end+0xfc00c594>
 c00c994:	00800304 	movi	r2,12
 c00c998:	a8800015 	stw	r2,0(r21)
 c00c99c:	8080030b 	ldhu	r2,12(r16)
 c00c9a0:	003f5006 	br	c00c6e4 <__alt_data_end+0xfc00c6e4>

0c00c9a4 <_fwalk>:
 c00c9a4:	defff704 	addi	sp,sp,-36
 c00c9a8:	dd000415 	stw	r20,16(sp)
 c00c9ac:	dfc00815 	stw	ra,32(sp)
 c00c9b0:	ddc00715 	stw	r23,28(sp)
 c00c9b4:	dd800615 	stw	r22,24(sp)
 c00c9b8:	dd400515 	stw	r21,20(sp)
 c00c9bc:	dcc00315 	stw	r19,12(sp)
 c00c9c0:	dc800215 	stw	r18,8(sp)
 c00c9c4:	dc400115 	stw	r17,4(sp)
 c00c9c8:	dc000015 	stw	r16,0(sp)
 c00c9cc:	2500b804 	addi	r20,r4,736
 c00c9d0:	a0002326 	beq	r20,zero,c00ca60 <_fwalk+0xbc>
 c00c9d4:	282b883a 	mov	r21,r5
 c00c9d8:	002f883a 	mov	r23,zero
 c00c9dc:	05800044 	movi	r22,1
 c00c9e0:	04ffffc4 	movi	r19,-1
 c00c9e4:	a4400117 	ldw	r17,4(r20)
 c00c9e8:	a4800217 	ldw	r18,8(r20)
 c00c9ec:	8c7fffc4 	addi	r17,r17,-1
 c00c9f0:	88000d16 	blt	r17,zero,c00ca28 <_fwalk+0x84>
 c00c9f4:	94000304 	addi	r16,r18,12
 c00c9f8:	94800384 	addi	r18,r18,14
 c00c9fc:	8080000b 	ldhu	r2,0(r16)
 c00ca00:	8c7fffc4 	addi	r17,r17,-1
 c00ca04:	813ffd04 	addi	r4,r16,-12
 c00ca08:	b080042e 	bgeu	r22,r2,c00ca1c <_fwalk+0x78>
 c00ca0c:	9080000f 	ldh	r2,0(r18)
 c00ca10:	14c00226 	beq	r2,r19,c00ca1c <_fwalk+0x78>
 c00ca14:	a83ee83a 	callr	r21
 c00ca18:	b8aeb03a 	or	r23,r23,r2
 c00ca1c:	84001a04 	addi	r16,r16,104
 c00ca20:	94801a04 	addi	r18,r18,104
 c00ca24:	8cfff51e 	bne	r17,r19,c00c9fc <__alt_data_end+0xfc00c9fc>
 c00ca28:	a5000017 	ldw	r20,0(r20)
 c00ca2c:	a03fed1e 	bne	r20,zero,c00c9e4 <__alt_data_end+0xfc00c9e4>
 c00ca30:	b805883a 	mov	r2,r23
 c00ca34:	dfc00817 	ldw	ra,32(sp)
 c00ca38:	ddc00717 	ldw	r23,28(sp)
 c00ca3c:	dd800617 	ldw	r22,24(sp)
 c00ca40:	dd400517 	ldw	r21,20(sp)
 c00ca44:	dd000417 	ldw	r20,16(sp)
 c00ca48:	dcc00317 	ldw	r19,12(sp)
 c00ca4c:	dc800217 	ldw	r18,8(sp)
 c00ca50:	dc400117 	ldw	r17,4(sp)
 c00ca54:	dc000017 	ldw	r16,0(sp)
 c00ca58:	dec00904 	addi	sp,sp,36
 c00ca5c:	f800283a 	ret
 c00ca60:	002f883a 	mov	r23,zero
 c00ca64:	003ff206 	br	c00ca30 <__alt_data_end+0xfc00ca30>

0c00ca68 <_fwalk_reent>:
 c00ca68:	defff704 	addi	sp,sp,-36
 c00ca6c:	dd000415 	stw	r20,16(sp)
 c00ca70:	dfc00815 	stw	ra,32(sp)
 c00ca74:	ddc00715 	stw	r23,28(sp)
 c00ca78:	dd800615 	stw	r22,24(sp)
 c00ca7c:	dd400515 	stw	r21,20(sp)
 c00ca80:	dcc00315 	stw	r19,12(sp)
 c00ca84:	dc800215 	stw	r18,8(sp)
 c00ca88:	dc400115 	stw	r17,4(sp)
 c00ca8c:	dc000015 	stw	r16,0(sp)
 c00ca90:	2500b804 	addi	r20,r4,736
 c00ca94:	a0002326 	beq	r20,zero,c00cb24 <_fwalk_reent+0xbc>
 c00ca98:	282b883a 	mov	r21,r5
 c00ca9c:	2027883a 	mov	r19,r4
 c00caa0:	002f883a 	mov	r23,zero
 c00caa4:	05800044 	movi	r22,1
 c00caa8:	04bfffc4 	movi	r18,-1
 c00caac:	a4400117 	ldw	r17,4(r20)
 c00cab0:	a4000217 	ldw	r16,8(r20)
 c00cab4:	8c7fffc4 	addi	r17,r17,-1
 c00cab8:	88000c16 	blt	r17,zero,c00caec <_fwalk_reent+0x84>
 c00cabc:	84000304 	addi	r16,r16,12
 c00cac0:	8080000b 	ldhu	r2,0(r16)
 c00cac4:	8c7fffc4 	addi	r17,r17,-1
 c00cac8:	817ffd04 	addi	r5,r16,-12
 c00cacc:	b080052e 	bgeu	r22,r2,c00cae4 <_fwalk_reent+0x7c>
 c00cad0:	8080008f 	ldh	r2,2(r16)
 c00cad4:	9809883a 	mov	r4,r19
 c00cad8:	14800226 	beq	r2,r18,c00cae4 <_fwalk_reent+0x7c>
 c00cadc:	a83ee83a 	callr	r21
 c00cae0:	b8aeb03a 	or	r23,r23,r2
 c00cae4:	84001a04 	addi	r16,r16,104
 c00cae8:	8cbff51e 	bne	r17,r18,c00cac0 <__alt_data_end+0xfc00cac0>
 c00caec:	a5000017 	ldw	r20,0(r20)
 c00caf0:	a03fee1e 	bne	r20,zero,c00caac <__alt_data_end+0xfc00caac>
 c00caf4:	b805883a 	mov	r2,r23
 c00caf8:	dfc00817 	ldw	ra,32(sp)
 c00cafc:	ddc00717 	ldw	r23,28(sp)
 c00cb00:	dd800617 	ldw	r22,24(sp)
 c00cb04:	dd400517 	ldw	r21,20(sp)
 c00cb08:	dd000417 	ldw	r20,16(sp)
 c00cb0c:	dcc00317 	ldw	r19,12(sp)
 c00cb10:	dc800217 	ldw	r18,8(sp)
 c00cb14:	dc400117 	ldw	r17,4(sp)
 c00cb18:	dc000017 	ldw	r16,0(sp)
 c00cb1c:	dec00904 	addi	sp,sp,36
 c00cb20:	f800283a 	ret
 c00cb24:	002f883a 	mov	r23,zero
 c00cb28:	003ff206 	br	c00caf4 <__alt_data_end+0xfc00caf4>

0c00cb2c <_gettimeofday_r>:
 c00cb2c:	defffd04 	addi	sp,sp,-12
 c00cb30:	2805883a 	mov	r2,r5
 c00cb34:	dc000015 	stw	r16,0(sp)
 c00cb38:	040300b4 	movhi	r16,3074
 c00cb3c:	dc400115 	stw	r17,4(sp)
 c00cb40:	84326b04 	addi	r16,r16,-13908
 c00cb44:	2023883a 	mov	r17,r4
 c00cb48:	300b883a 	mov	r5,r6
 c00cb4c:	1009883a 	mov	r4,r2
 c00cb50:	dfc00215 	stw	ra,8(sp)
 c00cb54:	80000015 	stw	zero,0(r16)
 c00cb58:	c0157880 	call	c015788 <gettimeofday>
 c00cb5c:	00ffffc4 	movi	r3,-1
 c00cb60:	10c00526 	beq	r2,r3,c00cb78 <_gettimeofday_r+0x4c>
 c00cb64:	dfc00217 	ldw	ra,8(sp)
 c00cb68:	dc400117 	ldw	r17,4(sp)
 c00cb6c:	dc000017 	ldw	r16,0(sp)
 c00cb70:	dec00304 	addi	sp,sp,12
 c00cb74:	f800283a 	ret
 c00cb78:	80c00017 	ldw	r3,0(r16)
 c00cb7c:	183ff926 	beq	r3,zero,c00cb64 <__alt_data_end+0xfc00cb64>
 c00cb80:	88c00015 	stw	r3,0(r17)
 c00cb84:	003ff706 	br	c00cb64 <__alt_data_end+0xfc00cb64>

0c00cb88 <_setlocale_r>:
 c00cb88:	30001b26 	beq	r6,zero,c00cbf8 <_setlocale_r+0x70>
 c00cb8c:	014300b4 	movhi	r5,3074
 c00cb90:	defffe04 	addi	sp,sp,-8
 c00cb94:	2962a304 	addi	r5,r5,-30068
 c00cb98:	3009883a 	mov	r4,r6
 c00cb9c:	dc000015 	stw	r16,0(sp)
 c00cba0:	dfc00115 	stw	ra,4(sp)
 c00cba4:	3021883a 	mov	r16,r6
 c00cba8:	c00e9540 	call	c00e954 <strcmp>
 c00cbac:	1000061e 	bne	r2,zero,c00cbc8 <_setlocale_r+0x40>
 c00cbb0:	008300b4 	movhi	r2,3074
 c00cbb4:	10a2a204 	addi	r2,r2,-30072
 c00cbb8:	dfc00117 	ldw	ra,4(sp)
 c00cbbc:	dc000017 	ldw	r16,0(sp)
 c00cbc0:	dec00204 	addi	sp,sp,8
 c00cbc4:	f800283a 	ret
 c00cbc8:	014300b4 	movhi	r5,3074
 c00cbcc:	2962a204 	addi	r5,r5,-30072
 c00cbd0:	8009883a 	mov	r4,r16
 c00cbd4:	c00e9540 	call	c00e954 <strcmp>
 c00cbd8:	103ff526 	beq	r2,zero,c00cbb0 <__alt_data_end+0xfc00cbb0>
 c00cbdc:	014300b4 	movhi	r5,3074
 c00cbe0:	29628504 	addi	r5,r5,-30188
 c00cbe4:	8009883a 	mov	r4,r16
 c00cbe8:	c00e9540 	call	c00e954 <strcmp>
 c00cbec:	103ff026 	beq	r2,zero,c00cbb0 <__alt_data_end+0xfc00cbb0>
 c00cbf0:	0005883a 	mov	r2,zero
 c00cbf4:	003ff006 	br	c00cbb8 <__alt_data_end+0xfc00cbb8>
 c00cbf8:	008300b4 	movhi	r2,3074
 c00cbfc:	10a2a204 	addi	r2,r2,-30072
 c00cc00:	f800283a 	ret

0c00cc04 <__locale_charset>:
 c00cc04:	008300b4 	movhi	r2,3074
 c00cc08:	10a62304 	addi	r2,r2,-26484
 c00cc0c:	f800283a 	ret

0c00cc10 <__locale_mb_cur_max>:
 c00cc10:	008300b4 	movhi	r2,3074
 c00cc14:	10aac904 	addi	r2,r2,-21724
 c00cc18:	10800017 	ldw	r2,0(r2)
 c00cc1c:	f800283a 	ret

0c00cc20 <__locale_msgcharset>:
 c00cc20:	008300b4 	movhi	r2,3074
 c00cc24:	10a61b04 	addi	r2,r2,-26516
 c00cc28:	f800283a 	ret

0c00cc2c <__locale_cjk_lang>:
 c00cc2c:	0005883a 	mov	r2,zero
 c00cc30:	f800283a 	ret

0c00cc34 <_localeconv_r>:
 c00cc34:	008300b4 	movhi	r2,3074
 c00cc38:	10a62b04 	addi	r2,r2,-26452
 c00cc3c:	f800283a 	ret

0c00cc40 <setlocale>:
 c00cc40:	008300b4 	movhi	r2,3074
 c00cc44:	10aac804 	addi	r2,r2,-21728
 c00cc48:	280d883a 	mov	r6,r5
 c00cc4c:	200b883a 	mov	r5,r4
 c00cc50:	11000017 	ldw	r4,0(r2)
 c00cc54:	c00cb881 	jmpi	c00cb88 <_setlocale_r>

0c00cc58 <localeconv>:
 c00cc58:	008300b4 	movhi	r2,3074
 c00cc5c:	10a62b04 	addi	r2,r2,-26452
 c00cc60:	f800283a 	ret

0c00cc64 <__smakebuf_r>:
 c00cc64:	2880030b 	ldhu	r2,12(r5)
 c00cc68:	10c0008c 	andi	r3,r2,2
 c00cc6c:	1800411e 	bne	r3,zero,c00cd74 <__smakebuf_r+0x110>
 c00cc70:	deffec04 	addi	sp,sp,-80
 c00cc74:	dc000f15 	stw	r16,60(sp)
 c00cc78:	2821883a 	mov	r16,r5
 c00cc7c:	2940038f 	ldh	r5,14(r5)
 c00cc80:	dc401015 	stw	r17,64(sp)
 c00cc84:	dfc01315 	stw	ra,76(sp)
 c00cc88:	dcc01215 	stw	r19,72(sp)
 c00cc8c:	dc801115 	stw	r18,68(sp)
 c00cc90:	2023883a 	mov	r17,r4
 c00cc94:	28001c16 	blt	r5,zero,c00cd08 <__smakebuf_r+0xa4>
 c00cc98:	d80d883a 	mov	r6,sp
 c00cc9c:	c011b340 	call	c011b34 <_fstat_r>
 c00cca0:	10001816 	blt	r2,zero,c00cd04 <__smakebuf_r+0xa0>
 c00cca4:	d8800117 	ldw	r2,4(sp)
 c00cca8:	00e00014 	movui	r3,32768
 c00ccac:	10bc000c 	andi	r2,r2,61440
 c00ccb0:	14c80020 	cmpeqi	r19,r2,8192
 c00ccb4:	10c03726 	beq	r2,r3,c00cd94 <__smakebuf_r+0x130>
 c00ccb8:	80c0030b 	ldhu	r3,12(r16)
 c00ccbc:	18c20014 	ori	r3,r3,2048
 c00ccc0:	80c0030d 	sth	r3,12(r16)
 c00ccc4:	00c80004 	movi	r3,8192
 c00ccc8:	10c0521e 	bne	r2,r3,c00ce14 <__smakebuf_r+0x1b0>
 c00cccc:	8140038f 	ldh	r5,14(r16)
 c00ccd0:	8809883a 	mov	r4,r17
 c00ccd4:	c011b900 	call	c011b90 <_isatty_r>
 c00ccd8:	10004c26 	beq	r2,zero,c00ce0c <__smakebuf_r+0x1a8>
 c00ccdc:	8080030b 	ldhu	r2,12(r16)
 c00cce0:	80c010c4 	addi	r3,r16,67
 c00cce4:	80c00015 	stw	r3,0(r16)
 c00cce8:	10800054 	ori	r2,r2,1
 c00ccec:	8080030d 	sth	r2,12(r16)
 c00ccf0:	00800044 	movi	r2,1
 c00ccf4:	80c00415 	stw	r3,16(r16)
 c00ccf8:	80800515 	stw	r2,20(r16)
 c00ccfc:	04810004 	movi	r18,1024
 c00cd00:	00000706 	br	c00cd20 <__smakebuf_r+0xbc>
 c00cd04:	8080030b 	ldhu	r2,12(r16)
 c00cd08:	10c0200c 	andi	r3,r2,128
 c00cd0c:	18001f1e 	bne	r3,zero,c00cd8c <__smakebuf_r+0x128>
 c00cd10:	04810004 	movi	r18,1024
 c00cd14:	10820014 	ori	r2,r2,2048
 c00cd18:	8080030d 	sth	r2,12(r16)
 c00cd1c:	0027883a 	mov	r19,zero
 c00cd20:	900b883a 	mov	r5,r18
 c00cd24:	8809883a 	mov	r4,r17
 c00cd28:	c004ccc0 	call	c004ccc <_malloc_r>
 c00cd2c:	10002c26 	beq	r2,zero,c00cde0 <__smakebuf_r+0x17c>
 c00cd30:	80c0030b 	ldhu	r3,12(r16)
 c00cd34:	01030074 	movhi	r4,3073
 c00cd38:	212f4004 	addi	r4,r4,-17152
 c00cd3c:	89000f15 	stw	r4,60(r17)
 c00cd40:	18c02014 	ori	r3,r3,128
 c00cd44:	80c0030d 	sth	r3,12(r16)
 c00cd48:	80800015 	stw	r2,0(r16)
 c00cd4c:	80800415 	stw	r2,16(r16)
 c00cd50:	84800515 	stw	r18,20(r16)
 c00cd54:	98001a1e 	bne	r19,zero,c00cdc0 <__smakebuf_r+0x15c>
 c00cd58:	dfc01317 	ldw	ra,76(sp)
 c00cd5c:	dcc01217 	ldw	r19,72(sp)
 c00cd60:	dc801117 	ldw	r18,68(sp)
 c00cd64:	dc401017 	ldw	r17,64(sp)
 c00cd68:	dc000f17 	ldw	r16,60(sp)
 c00cd6c:	dec01404 	addi	sp,sp,80
 c00cd70:	f800283a 	ret
 c00cd74:	288010c4 	addi	r2,r5,67
 c00cd78:	28800015 	stw	r2,0(r5)
 c00cd7c:	28800415 	stw	r2,16(r5)
 c00cd80:	00800044 	movi	r2,1
 c00cd84:	28800515 	stw	r2,20(r5)
 c00cd88:	f800283a 	ret
 c00cd8c:	04801004 	movi	r18,64
 c00cd90:	003fe006 	br	c00cd14 <__alt_data_end+0xfc00cd14>
 c00cd94:	81000a17 	ldw	r4,40(r16)
 c00cd98:	00c30074 	movhi	r3,3073
 c00cd9c:	18fa3c04 	addi	r3,r3,-5904
 c00cda0:	20ffc51e 	bne	r4,r3,c00ccb8 <__alt_data_end+0xfc00ccb8>
 c00cda4:	8080030b 	ldhu	r2,12(r16)
 c00cda8:	04810004 	movi	r18,1024
 c00cdac:	84801315 	stw	r18,76(r16)
 c00cdb0:	1484b03a 	or	r2,r2,r18
 c00cdb4:	8080030d 	sth	r2,12(r16)
 c00cdb8:	0027883a 	mov	r19,zero
 c00cdbc:	003fd806 	br	c00cd20 <__alt_data_end+0xfc00cd20>
 c00cdc0:	8140038f 	ldh	r5,14(r16)
 c00cdc4:	8809883a 	mov	r4,r17
 c00cdc8:	c011b900 	call	c011b90 <_isatty_r>
 c00cdcc:	103fe226 	beq	r2,zero,c00cd58 <__alt_data_end+0xfc00cd58>
 c00cdd0:	8080030b 	ldhu	r2,12(r16)
 c00cdd4:	10800054 	ori	r2,r2,1
 c00cdd8:	8080030d 	sth	r2,12(r16)
 c00cddc:	003fde06 	br	c00cd58 <__alt_data_end+0xfc00cd58>
 c00cde0:	8080030b 	ldhu	r2,12(r16)
 c00cde4:	10c0800c 	andi	r3,r2,512
 c00cde8:	183fdb1e 	bne	r3,zero,c00cd58 <__alt_data_end+0xfc00cd58>
 c00cdec:	10800094 	ori	r2,r2,2
 c00cdf0:	80c010c4 	addi	r3,r16,67
 c00cdf4:	8080030d 	sth	r2,12(r16)
 c00cdf8:	00800044 	movi	r2,1
 c00cdfc:	80c00015 	stw	r3,0(r16)
 c00ce00:	80c00415 	stw	r3,16(r16)
 c00ce04:	80800515 	stw	r2,20(r16)
 c00ce08:	003fd306 	br	c00cd58 <__alt_data_end+0xfc00cd58>
 c00ce0c:	04810004 	movi	r18,1024
 c00ce10:	003fc306 	br	c00cd20 <__alt_data_end+0xfc00cd20>
 c00ce14:	0027883a 	mov	r19,zero
 c00ce18:	04810004 	movi	r18,1024
 c00ce1c:	003fc006 	br	c00cd20 <__alt_data_end+0xfc00cd20>

0c00ce20 <memchr>:
 c00ce20:	208000cc 	andi	r2,r4,3
 c00ce24:	280f883a 	mov	r7,r5
 c00ce28:	10003426 	beq	r2,zero,c00cefc <memchr+0xdc>
 c00ce2c:	30bfffc4 	addi	r2,r6,-1
 c00ce30:	30001a26 	beq	r6,zero,c00ce9c <memchr+0x7c>
 c00ce34:	20c00003 	ldbu	r3,0(r4)
 c00ce38:	29803fcc 	andi	r6,r5,255
 c00ce3c:	30c0051e 	bne	r6,r3,c00ce54 <memchr+0x34>
 c00ce40:	00001806 	br	c00cea4 <memchr+0x84>
 c00ce44:	10001526 	beq	r2,zero,c00ce9c <memchr+0x7c>
 c00ce48:	20c00003 	ldbu	r3,0(r4)
 c00ce4c:	10bfffc4 	addi	r2,r2,-1
 c00ce50:	30c01426 	beq	r6,r3,c00cea4 <memchr+0x84>
 c00ce54:	21000044 	addi	r4,r4,1
 c00ce58:	20c000cc 	andi	r3,r4,3
 c00ce5c:	183ff91e 	bne	r3,zero,c00ce44 <__alt_data_end+0xfc00ce44>
 c00ce60:	020000c4 	movi	r8,3
 c00ce64:	40801136 	bltu	r8,r2,c00ceac <memchr+0x8c>
 c00ce68:	10000c26 	beq	r2,zero,c00ce9c <memchr+0x7c>
 c00ce6c:	20c00003 	ldbu	r3,0(r4)
 c00ce70:	29403fcc 	andi	r5,r5,255
 c00ce74:	28c00b26 	beq	r5,r3,c00cea4 <memchr+0x84>
 c00ce78:	20c00044 	addi	r3,r4,1
 c00ce7c:	39803fcc 	andi	r6,r7,255
 c00ce80:	2089883a 	add	r4,r4,r2
 c00ce84:	00000306 	br	c00ce94 <memchr+0x74>
 c00ce88:	18c00044 	addi	r3,r3,1
 c00ce8c:	197fffc3 	ldbu	r5,-1(r3)
 c00ce90:	31400526 	beq	r6,r5,c00cea8 <memchr+0x88>
 c00ce94:	1805883a 	mov	r2,r3
 c00ce98:	20fffb1e 	bne	r4,r3,c00ce88 <__alt_data_end+0xfc00ce88>
 c00ce9c:	0005883a 	mov	r2,zero
 c00cea0:	f800283a 	ret
 c00cea4:	2005883a 	mov	r2,r4
 c00cea8:	f800283a 	ret
 c00ceac:	28c03fcc 	andi	r3,r5,255
 c00ceb0:	1812923a 	slli	r9,r3,8
 c00ceb4:	02ffbff4 	movhi	r11,65279
 c00ceb8:	02a02074 	movhi	r10,32897
 c00cebc:	48d2b03a 	or	r9,r9,r3
 c00cec0:	4806943a 	slli	r3,r9,16
 c00cec4:	5affbfc4 	addi	r11,r11,-257
 c00cec8:	52a02004 	addi	r10,r10,-32640
 c00cecc:	48d2b03a 	or	r9,r9,r3
 c00ced0:	20c00017 	ldw	r3,0(r4)
 c00ced4:	48c6f03a 	xor	r3,r9,r3
 c00ced8:	1acd883a 	add	r6,r3,r11
 c00cedc:	00c6303a 	nor	r3,zero,r3
 c00cee0:	30c6703a 	and	r3,r6,r3
 c00cee4:	1a86703a 	and	r3,r3,r10
 c00cee8:	183fe01e 	bne	r3,zero,c00ce6c <__alt_data_end+0xfc00ce6c>
 c00ceec:	10bfff04 	addi	r2,r2,-4
 c00cef0:	21000104 	addi	r4,r4,4
 c00cef4:	40bff636 	bltu	r8,r2,c00ced0 <__alt_data_end+0xfc00ced0>
 c00cef8:	003fdb06 	br	c00ce68 <__alt_data_end+0xfc00ce68>
 c00cefc:	3005883a 	mov	r2,r6
 c00cf00:	003fd706 	br	c00ce60 <__alt_data_end+0xfc00ce60>

0c00cf04 <memmove>:
 c00cf04:	2005883a 	mov	r2,r4
 c00cf08:	29000b2e 	bgeu	r5,r4,c00cf38 <memmove+0x34>
 c00cf0c:	298f883a 	add	r7,r5,r6
 c00cf10:	21c0092e 	bgeu	r4,r7,c00cf38 <memmove+0x34>
 c00cf14:	2187883a 	add	r3,r4,r6
 c00cf18:	198bc83a 	sub	r5,r3,r6
 c00cf1c:	30004826 	beq	r6,zero,c00d040 <memmove+0x13c>
 c00cf20:	39ffffc4 	addi	r7,r7,-1
 c00cf24:	39000003 	ldbu	r4,0(r7)
 c00cf28:	18ffffc4 	addi	r3,r3,-1
 c00cf2c:	19000005 	stb	r4,0(r3)
 c00cf30:	28fffb1e 	bne	r5,r3,c00cf20 <__alt_data_end+0xfc00cf20>
 c00cf34:	f800283a 	ret
 c00cf38:	00c003c4 	movi	r3,15
 c00cf3c:	1980412e 	bgeu	r3,r6,c00d044 <memmove+0x140>
 c00cf40:	2886b03a 	or	r3,r5,r2
 c00cf44:	18c000cc 	andi	r3,r3,3
 c00cf48:	1800401e 	bne	r3,zero,c00d04c <memmove+0x148>
 c00cf4c:	33fffc04 	addi	r15,r6,-16
 c00cf50:	781ed13a 	srli	r15,r15,4
 c00cf54:	28c00104 	addi	r3,r5,4
 c00cf58:	13400104 	addi	r13,r2,4
 c00cf5c:	781c913a 	slli	r14,r15,4
 c00cf60:	2b000204 	addi	r12,r5,8
 c00cf64:	12c00204 	addi	r11,r2,8
 c00cf68:	73800504 	addi	r14,r14,20
 c00cf6c:	2a800304 	addi	r10,r5,12
 c00cf70:	12400304 	addi	r9,r2,12
 c00cf74:	2b9d883a 	add	r14,r5,r14
 c00cf78:	2811883a 	mov	r8,r5
 c00cf7c:	100f883a 	mov	r7,r2
 c00cf80:	41000017 	ldw	r4,0(r8)
 c00cf84:	39c00404 	addi	r7,r7,16
 c00cf88:	18c00404 	addi	r3,r3,16
 c00cf8c:	393ffc15 	stw	r4,-16(r7)
 c00cf90:	193ffc17 	ldw	r4,-16(r3)
 c00cf94:	6b400404 	addi	r13,r13,16
 c00cf98:	5ac00404 	addi	r11,r11,16
 c00cf9c:	693ffc15 	stw	r4,-16(r13)
 c00cfa0:	61000017 	ldw	r4,0(r12)
 c00cfa4:	4a400404 	addi	r9,r9,16
 c00cfa8:	42000404 	addi	r8,r8,16
 c00cfac:	593ffc15 	stw	r4,-16(r11)
 c00cfb0:	51000017 	ldw	r4,0(r10)
 c00cfb4:	63000404 	addi	r12,r12,16
 c00cfb8:	52800404 	addi	r10,r10,16
 c00cfbc:	493ffc15 	stw	r4,-16(r9)
 c00cfc0:	1bbfef1e 	bne	r3,r14,c00cf80 <__alt_data_end+0xfc00cf80>
 c00cfc4:	79000044 	addi	r4,r15,1
 c00cfc8:	2008913a 	slli	r4,r4,4
 c00cfcc:	328003cc 	andi	r10,r6,15
 c00cfd0:	02c000c4 	movi	r11,3
 c00cfd4:	1107883a 	add	r3,r2,r4
 c00cfd8:	290b883a 	add	r5,r5,r4
 c00cfdc:	5a801e2e 	bgeu	r11,r10,c00d058 <memmove+0x154>
 c00cfe0:	1813883a 	mov	r9,r3
 c00cfe4:	2811883a 	mov	r8,r5
 c00cfe8:	500f883a 	mov	r7,r10
 c00cfec:	41000017 	ldw	r4,0(r8)
 c00cff0:	4a400104 	addi	r9,r9,4
 c00cff4:	39ffff04 	addi	r7,r7,-4
 c00cff8:	493fff15 	stw	r4,-4(r9)
 c00cffc:	42000104 	addi	r8,r8,4
 c00d000:	59fffa36 	bltu	r11,r7,c00cfec <__alt_data_end+0xfc00cfec>
 c00d004:	513fff04 	addi	r4,r10,-4
 c00d008:	2008d0ba 	srli	r4,r4,2
 c00d00c:	318000cc 	andi	r6,r6,3
 c00d010:	21000044 	addi	r4,r4,1
 c00d014:	2109883a 	add	r4,r4,r4
 c00d018:	2109883a 	add	r4,r4,r4
 c00d01c:	1907883a 	add	r3,r3,r4
 c00d020:	290b883a 	add	r5,r5,r4
 c00d024:	30000b26 	beq	r6,zero,c00d054 <memmove+0x150>
 c00d028:	198d883a 	add	r6,r3,r6
 c00d02c:	29c00003 	ldbu	r7,0(r5)
 c00d030:	18c00044 	addi	r3,r3,1
 c00d034:	29400044 	addi	r5,r5,1
 c00d038:	19ffffc5 	stb	r7,-1(r3)
 c00d03c:	19bffb1e 	bne	r3,r6,c00d02c <__alt_data_end+0xfc00d02c>
 c00d040:	f800283a 	ret
 c00d044:	1007883a 	mov	r3,r2
 c00d048:	003ff606 	br	c00d024 <__alt_data_end+0xfc00d024>
 c00d04c:	1007883a 	mov	r3,r2
 c00d050:	003ff506 	br	c00d028 <__alt_data_end+0xfc00d028>
 c00d054:	f800283a 	ret
 c00d058:	500d883a 	mov	r6,r10
 c00d05c:	003ff106 	br	c00d024 <__alt_data_end+0xfc00d024>

0c00d060 <memset>:
 c00d060:	20c000cc 	andi	r3,r4,3
 c00d064:	2005883a 	mov	r2,r4
 c00d068:	18004426 	beq	r3,zero,c00d17c <memset+0x11c>
 c00d06c:	31ffffc4 	addi	r7,r6,-1
 c00d070:	30004026 	beq	r6,zero,c00d174 <memset+0x114>
 c00d074:	2813883a 	mov	r9,r5
 c00d078:	200d883a 	mov	r6,r4
 c00d07c:	2007883a 	mov	r3,r4
 c00d080:	00000406 	br	c00d094 <memset+0x34>
 c00d084:	3a3fffc4 	addi	r8,r7,-1
 c00d088:	31800044 	addi	r6,r6,1
 c00d08c:	38003926 	beq	r7,zero,c00d174 <memset+0x114>
 c00d090:	400f883a 	mov	r7,r8
 c00d094:	18c00044 	addi	r3,r3,1
 c00d098:	32400005 	stb	r9,0(r6)
 c00d09c:	1a0000cc 	andi	r8,r3,3
 c00d0a0:	403ff81e 	bne	r8,zero,c00d084 <__alt_data_end+0xfc00d084>
 c00d0a4:	010000c4 	movi	r4,3
 c00d0a8:	21c02d2e 	bgeu	r4,r7,c00d160 <memset+0x100>
 c00d0ac:	29003fcc 	andi	r4,r5,255
 c00d0b0:	200c923a 	slli	r6,r4,8
 c00d0b4:	3108b03a 	or	r4,r6,r4
 c00d0b8:	200c943a 	slli	r6,r4,16
 c00d0bc:	218cb03a 	or	r6,r4,r6
 c00d0c0:	010003c4 	movi	r4,15
 c00d0c4:	21c0182e 	bgeu	r4,r7,c00d128 <memset+0xc8>
 c00d0c8:	3b3ffc04 	addi	r12,r7,-16
 c00d0cc:	6018d13a 	srli	r12,r12,4
 c00d0d0:	1a000104 	addi	r8,r3,4
 c00d0d4:	1ac00204 	addi	r11,r3,8
 c00d0d8:	6008913a 	slli	r4,r12,4
 c00d0dc:	1a800304 	addi	r10,r3,12
 c00d0e0:	1813883a 	mov	r9,r3
 c00d0e4:	21000504 	addi	r4,r4,20
 c00d0e8:	1909883a 	add	r4,r3,r4
 c00d0ec:	49800015 	stw	r6,0(r9)
 c00d0f0:	41800015 	stw	r6,0(r8)
 c00d0f4:	59800015 	stw	r6,0(r11)
 c00d0f8:	51800015 	stw	r6,0(r10)
 c00d0fc:	42000404 	addi	r8,r8,16
 c00d100:	4a400404 	addi	r9,r9,16
 c00d104:	5ac00404 	addi	r11,r11,16
 c00d108:	52800404 	addi	r10,r10,16
 c00d10c:	413ff71e 	bne	r8,r4,c00d0ec <__alt_data_end+0xfc00d0ec>
 c00d110:	63000044 	addi	r12,r12,1
 c00d114:	6018913a 	slli	r12,r12,4
 c00d118:	39c003cc 	andi	r7,r7,15
 c00d11c:	010000c4 	movi	r4,3
 c00d120:	1b07883a 	add	r3,r3,r12
 c00d124:	21c00e2e 	bgeu	r4,r7,c00d160 <memset+0x100>
 c00d128:	1813883a 	mov	r9,r3
 c00d12c:	3811883a 	mov	r8,r7
 c00d130:	010000c4 	movi	r4,3
 c00d134:	49800015 	stw	r6,0(r9)
 c00d138:	423fff04 	addi	r8,r8,-4
 c00d13c:	4a400104 	addi	r9,r9,4
 c00d140:	223ffc36 	bltu	r4,r8,c00d134 <__alt_data_end+0xfc00d134>
 c00d144:	393fff04 	addi	r4,r7,-4
 c00d148:	2008d0ba 	srli	r4,r4,2
 c00d14c:	39c000cc 	andi	r7,r7,3
 c00d150:	21000044 	addi	r4,r4,1
 c00d154:	2109883a 	add	r4,r4,r4
 c00d158:	2109883a 	add	r4,r4,r4
 c00d15c:	1907883a 	add	r3,r3,r4
 c00d160:	38000526 	beq	r7,zero,c00d178 <memset+0x118>
 c00d164:	19cf883a 	add	r7,r3,r7
 c00d168:	19400005 	stb	r5,0(r3)
 c00d16c:	18c00044 	addi	r3,r3,1
 c00d170:	38fffd1e 	bne	r7,r3,c00d168 <__alt_data_end+0xfc00d168>
 c00d174:	f800283a 	ret
 c00d178:	f800283a 	ret
 c00d17c:	2007883a 	mov	r3,r4
 c00d180:	300f883a 	mov	r7,r6
 c00d184:	003fc706 	br	c00d0a4 <__alt_data_end+0xfc00d0a4>

0c00d188 <_Balloc>:
 c00d188:	20801317 	ldw	r2,76(r4)
 c00d18c:	defffc04 	addi	sp,sp,-16
 c00d190:	dc400115 	stw	r17,4(sp)
 c00d194:	dc000015 	stw	r16,0(sp)
 c00d198:	dfc00315 	stw	ra,12(sp)
 c00d19c:	dc800215 	stw	r18,8(sp)
 c00d1a0:	2023883a 	mov	r17,r4
 c00d1a4:	2821883a 	mov	r16,r5
 c00d1a8:	10000f26 	beq	r2,zero,c00d1e8 <_Balloc+0x60>
 c00d1ac:	8407883a 	add	r3,r16,r16
 c00d1b0:	18c7883a 	add	r3,r3,r3
 c00d1b4:	10c7883a 	add	r3,r2,r3
 c00d1b8:	18800017 	ldw	r2,0(r3)
 c00d1bc:	10001126 	beq	r2,zero,c00d204 <_Balloc+0x7c>
 c00d1c0:	11000017 	ldw	r4,0(r2)
 c00d1c4:	19000015 	stw	r4,0(r3)
 c00d1c8:	10000415 	stw	zero,16(r2)
 c00d1cc:	10000315 	stw	zero,12(r2)
 c00d1d0:	dfc00317 	ldw	ra,12(sp)
 c00d1d4:	dc800217 	ldw	r18,8(sp)
 c00d1d8:	dc400117 	ldw	r17,4(sp)
 c00d1dc:	dc000017 	ldw	r16,0(sp)
 c00d1e0:	dec00404 	addi	sp,sp,16
 c00d1e4:	f800283a 	ret
 c00d1e8:	01800844 	movi	r6,33
 c00d1ec:	01400104 	movi	r5,4
 c00d1f0:	c01174c0 	call	c01174c <_calloc_r>
 c00d1f4:	88801315 	stw	r2,76(r17)
 c00d1f8:	103fec1e 	bne	r2,zero,c00d1ac <__alt_data_end+0xfc00d1ac>
 c00d1fc:	0005883a 	mov	r2,zero
 c00d200:	003ff306 	br	c00d1d0 <__alt_data_end+0xfc00d1d0>
 c00d204:	01400044 	movi	r5,1
 c00d208:	2c24983a 	sll	r18,r5,r16
 c00d20c:	8809883a 	mov	r4,r17
 c00d210:	91800144 	addi	r6,r18,5
 c00d214:	318d883a 	add	r6,r6,r6
 c00d218:	318d883a 	add	r6,r6,r6
 c00d21c:	c01174c0 	call	c01174c <_calloc_r>
 c00d220:	103ff626 	beq	r2,zero,c00d1fc <__alt_data_end+0xfc00d1fc>
 c00d224:	14000115 	stw	r16,4(r2)
 c00d228:	14800215 	stw	r18,8(r2)
 c00d22c:	003fe606 	br	c00d1c8 <__alt_data_end+0xfc00d1c8>

0c00d230 <_Bfree>:
 c00d230:	28000826 	beq	r5,zero,c00d254 <_Bfree+0x24>
 c00d234:	28c00117 	ldw	r3,4(r5)
 c00d238:	20801317 	ldw	r2,76(r4)
 c00d23c:	18c7883a 	add	r3,r3,r3
 c00d240:	18c7883a 	add	r3,r3,r3
 c00d244:	10c5883a 	add	r2,r2,r3
 c00d248:	10c00017 	ldw	r3,0(r2)
 c00d24c:	28c00015 	stw	r3,0(r5)
 c00d250:	11400015 	stw	r5,0(r2)
 c00d254:	f800283a 	ret

0c00d258 <__multadd>:
 c00d258:	defff704 	addi	sp,sp,-36
 c00d25c:	dc800215 	stw	r18,8(sp)
 c00d260:	2c800417 	ldw	r18,16(r5)
 c00d264:	dd800615 	stw	r22,24(sp)
 c00d268:	dd400515 	stw	r21,20(sp)
 c00d26c:	dd000415 	stw	r20,16(sp)
 c00d270:	dcc00315 	stw	r19,12(sp)
 c00d274:	dc400115 	stw	r17,4(sp)
 c00d278:	dc000015 	stw	r16,0(sp)
 c00d27c:	dfc00815 	stw	ra,32(sp)
 c00d280:	ddc00715 	stw	r23,28(sp)
 c00d284:	2827883a 	mov	r19,r5
 c00d288:	2029883a 	mov	r20,r4
 c00d28c:	3023883a 	mov	r17,r6
 c00d290:	3821883a 	mov	r16,r7
 c00d294:	2d400504 	addi	r21,r5,20
 c00d298:	002d883a 	mov	r22,zero
 c00d29c:	adc00017 	ldw	r23,0(r21)
 c00d2a0:	880b883a 	mov	r5,r17
 c00d2a4:	ad400104 	addi	r21,r21,4
 c00d2a8:	b93fffcc 	andi	r4,r23,65535
 c00d2ac:	c004c7c0 	call	c004c7c <__mulsi3>
 c00d2b0:	b808d43a 	srli	r4,r23,16
 c00d2b4:	880b883a 	mov	r5,r17
 c00d2b8:	1421883a 	add	r16,r2,r16
 c00d2bc:	c004c7c0 	call	c004c7c <__mulsi3>
 c00d2c0:	800ed43a 	srli	r7,r16,16
 c00d2c4:	80ffffcc 	andi	r3,r16,65535
 c00d2c8:	b5800044 	addi	r22,r22,1
 c00d2cc:	11c5883a 	add	r2,r2,r7
 c00d2d0:	100e943a 	slli	r7,r2,16
 c00d2d4:	1020d43a 	srli	r16,r2,16
 c00d2d8:	38c7883a 	add	r3,r7,r3
 c00d2dc:	a8ffff15 	stw	r3,-4(r21)
 c00d2e0:	b4bfee16 	blt	r22,r18,c00d29c <__alt_data_end+0xfc00d29c>
 c00d2e4:	80000926 	beq	r16,zero,c00d30c <__multadd+0xb4>
 c00d2e8:	98800217 	ldw	r2,8(r19)
 c00d2ec:	9080130e 	bge	r18,r2,c00d33c <__multadd+0xe4>
 c00d2f0:	90800144 	addi	r2,r18,5
 c00d2f4:	1085883a 	add	r2,r2,r2
 c00d2f8:	1085883a 	add	r2,r2,r2
 c00d2fc:	9885883a 	add	r2,r19,r2
 c00d300:	14000015 	stw	r16,0(r2)
 c00d304:	94800044 	addi	r18,r18,1
 c00d308:	9c800415 	stw	r18,16(r19)
 c00d30c:	9805883a 	mov	r2,r19
 c00d310:	dfc00817 	ldw	ra,32(sp)
 c00d314:	ddc00717 	ldw	r23,28(sp)
 c00d318:	dd800617 	ldw	r22,24(sp)
 c00d31c:	dd400517 	ldw	r21,20(sp)
 c00d320:	dd000417 	ldw	r20,16(sp)
 c00d324:	dcc00317 	ldw	r19,12(sp)
 c00d328:	dc800217 	ldw	r18,8(sp)
 c00d32c:	dc400117 	ldw	r17,4(sp)
 c00d330:	dc000017 	ldw	r16,0(sp)
 c00d334:	dec00904 	addi	sp,sp,36
 c00d338:	f800283a 	ret
 c00d33c:	99400117 	ldw	r5,4(r19)
 c00d340:	a009883a 	mov	r4,r20
 c00d344:	29400044 	addi	r5,r5,1
 c00d348:	c00d1880 	call	c00d188 <_Balloc>
 c00d34c:	99800417 	ldw	r6,16(r19)
 c00d350:	99400304 	addi	r5,r19,12
 c00d354:	11000304 	addi	r4,r2,12
 c00d358:	31800084 	addi	r6,r6,2
 c00d35c:	318d883a 	add	r6,r6,r6
 c00d360:	318d883a 	add	r6,r6,r6
 c00d364:	1023883a 	mov	r17,r2
 c00d368:	c0054d80 	call	c0054d8 <memcpy>
 c00d36c:	98000a26 	beq	r19,zero,c00d398 <__multadd+0x140>
 c00d370:	98c00117 	ldw	r3,4(r19)
 c00d374:	a0801317 	ldw	r2,76(r20)
 c00d378:	18c7883a 	add	r3,r3,r3
 c00d37c:	18c7883a 	add	r3,r3,r3
 c00d380:	10c5883a 	add	r2,r2,r3
 c00d384:	10c00017 	ldw	r3,0(r2)
 c00d388:	98c00015 	stw	r3,0(r19)
 c00d38c:	14c00015 	stw	r19,0(r2)
 c00d390:	8827883a 	mov	r19,r17
 c00d394:	003fd606 	br	c00d2f0 <__alt_data_end+0xfc00d2f0>
 c00d398:	8827883a 	mov	r19,r17
 c00d39c:	003fd406 	br	c00d2f0 <__alt_data_end+0xfc00d2f0>

0c00d3a0 <__s2b>:
 c00d3a0:	defff904 	addi	sp,sp,-28
 c00d3a4:	dc400115 	stw	r17,4(sp)
 c00d3a8:	dc000015 	stw	r16,0(sp)
 c00d3ac:	2023883a 	mov	r17,r4
 c00d3b0:	2821883a 	mov	r16,r5
 c00d3b4:	39000204 	addi	r4,r7,8
 c00d3b8:	01400244 	movi	r5,9
 c00d3bc:	dcc00315 	stw	r19,12(sp)
 c00d3c0:	dc800215 	stw	r18,8(sp)
 c00d3c4:	dfc00615 	stw	ra,24(sp)
 c00d3c8:	dd400515 	stw	r21,20(sp)
 c00d3cc:	dd000415 	stw	r20,16(sp)
 c00d3d0:	3825883a 	mov	r18,r7
 c00d3d4:	3027883a 	mov	r19,r6
 c00d3d8:	c004ac80 	call	c004ac8 <__divsi3>
 c00d3dc:	00c00044 	movi	r3,1
 c00d3e0:	000b883a 	mov	r5,zero
 c00d3e4:	1880030e 	bge	r3,r2,c00d3f4 <__s2b+0x54>
 c00d3e8:	18c7883a 	add	r3,r3,r3
 c00d3ec:	29400044 	addi	r5,r5,1
 c00d3f0:	18bffd16 	blt	r3,r2,c00d3e8 <__alt_data_end+0xfc00d3e8>
 c00d3f4:	8809883a 	mov	r4,r17
 c00d3f8:	c00d1880 	call	c00d188 <_Balloc>
 c00d3fc:	d8c00717 	ldw	r3,28(sp)
 c00d400:	10c00515 	stw	r3,20(r2)
 c00d404:	00c00044 	movi	r3,1
 c00d408:	10c00415 	stw	r3,16(r2)
 c00d40c:	00c00244 	movi	r3,9
 c00d410:	1cc0210e 	bge	r3,r19,c00d498 <__s2b+0xf8>
 c00d414:	80eb883a 	add	r21,r16,r3
 c00d418:	a829883a 	mov	r20,r21
 c00d41c:	84e1883a 	add	r16,r16,r19
 c00d420:	a1c00007 	ldb	r7,0(r20)
 c00d424:	01800284 	movi	r6,10
 c00d428:	a5000044 	addi	r20,r20,1
 c00d42c:	100b883a 	mov	r5,r2
 c00d430:	39fff404 	addi	r7,r7,-48
 c00d434:	8809883a 	mov	r4,r17
 c00d438:	c00d2580 	call	c00d258 <__multadd>
 c00d43c:	a43ff81e 	bne	r20,r16,c00d420 <__alt_data_end+0xfc00d420>
 c00d440:	ace1883a 	add	r16,r21,r19
 c00d444:	843ffe04 	addi	r16,r16,-8
 c00d448:	9c800a0e 	bge	r19,r18,c00d474 <__s2b+0xd4>
 c00d44c:	94e5c83a 	sub	r18,r18,r19
 c00d450:	84a5883a 	add	r18,r16,r18
 c00d454:	81c00007 	ldb	r7,0(r16)
 c00d458:	01800284 	movi	r6,10
 c00d45c:	84000044 	addi	r16,r16,1
 c00d460:	100b883a 	mov	r5,r2
 c00d464:	39fff404 	addi	r7,r7,-48
 c00d468:	8809883a 	mov	r4,r17
 c00d46c:	c00d2580 	call	c00d258 <__multadd>
 c00d470:	84bff81e 	bne	r16,r18,c00d454 <__alt_data_end+0xfc00d454>
 c00d474:	dfc00617 	ldw	ra,24(sp)
 c00d478:	dd400517 	ldw	r21,20(sp)
 c00d47c:	dd000417 	ldw	r20,16(sp)
 c00d480:	dcc00317 	ldw	r19,12(sp)
 c00d484:	dc800217 	ldw	r18,8(sp)
 c00d488:	dc400117 	ldw	r17,4(sp)
 c00d48c:	dc000017 	ldw	r16,0(sp)
 c00d490:	dec00704 	addi	sp,sp,28
 c00d494:	f800283a 	ret
 c00d498:	84000284 	addi	r16,r16,10
 c00d49c:	1827883a 	mov	r19,r3
 c00d4a0:	003fe906 	br	c00d448 <__alt_data_end+0xfc00d448>

0c00d4a4 <__hi0bits>:
 c00d4a4:	20bfffec 	andhi	r2,r4,65535
 c00d4a8:	1000141e 	bne	r2,zero,c00d4fc <__hi0bits+0x58>
 c00d4ac:	2008943a 	slli	r4,r4,16
 c00d4b0:	00800404 	movi	r2,16
 c00d4b4:	20ffc02c 	andhi	r3,r4,65280
 c00d4b8:	1800021e 	bne	r3,zero,c00d4c4 <__hi0bits+0x20>
 c00d4bc:	2008923a 	slli	r4,r4,8
 c00d4c0:	10800204 	addi	r2,r2,8
 c00d4c4:	20fc002c 	andhi	r3,r4,61440
 c00d4c8:	1800021e 	bne	r3,zero,c00d4d4 <__hi0bits+0x30>
 c00d4cc:	2008913a 	slli	r4,r4,4
 c00d4d0:	10800104 	addi	r2,r2,4
 c00d4d4:	20f0002c 	andhi	r3,r4,49152
 c00d4d8:	1800031e 	bne	r3,zero,c00d4e8 <__hi0bits+0x44>
 c00d4dc:	2109883a 	add	r4,r4,r4
 c00d4e0:	10800084 	addi	r2,r2,2
 c00d4e4:	2109883a 	add	r4,r4,r4
 c00d4e8:	20000316 	blt	r4,zero,c00d4f8 <__hi0bits+0x54>
 c00d4ec:	2110002c 	andhi	r4,r4,16384
 c00d4f0:	2000041e 	bne	r4,zero,c00d504 <__hi0bits+0x60>
 c00d4f4:	00800804 	movi	r2,32
 c00d4f8:	f800283a 	ret
 c00d4fc:	0005883a 	mov	r2,zero
 c00d500:	003fec06 	br	c00d4b4 <__alt_data_end+0xfc00d4b4>
 c00d504:	10800044 	addi	r2,r2,1
 c00d508:	f800283a 	ret

0c00d50c <__lo0bits>:
 c00d50c:	20c00017 	ldw	r3,0(r4)
 c00d510:	188001cc 	andi	r2,r3,7
 c00d514:	10000826 	beq	r2,zero,c00d538 <__lo0bits+0x2c>
 c00d518:	1880004c 	andi	r2,r3,1
 c00d51c:	1000211e 	bne	r2,zero,c00d5a4 <__lo0bits+0x98>
 c00d520:	1880008c 	andi	r2,r3,2
 c00d524:	1000211e 	bne	r2,zero,c00d5ac <__lo0bits+0xa0>
 c00d528:	1806d0ba 	srli	r3,r3,2
 c00d52c:	00800084 	movi	r2,2
 c00d530:	20c00015 	stw	r3,0(r4)
 c00d534:	f800283a 	ret
 c00d538:	18bfffcc 	andi	r2,r3,65535
 c00d53c:	10001326 	beq	r2,zero,c00d58c <__lo0bits+0x80>
 c00d540:	0005883a 	mov	r2,zero
 c00d544:	19403fcc 	andi	r5,r3,255
 c00d548:	2800021e 	bne	r5,zero,c00d554 <__lo0bits+0x48>
 c00d54c:	1806d23a 	srli	r3,r3,8
 c00d550:	10800204 	addi	r2,r2,8
 c00d554:	194003cc 	andi	r5,r3,15
 c00d558:	2800021e 	bne	r5,zero,c00d564 <__lo0bits+0x58>
 c00d55c:	1806d13a 	srli	r3,r3,4
 c00d560:	10800104 	addi	r2,r2,4
 c00d564:	194000cc 	andi	r5,r3,3
 c00d568:	2800021e 	bne	r5,zero,c00d574 <__lo0bits+0x68>
 c00d56c:	1806d0ba 	srli	r3,r3,2
 c00d570:	10800084 	addi	r2,r2,2
 c00d574:	1940004c 	andi	r5,r3,1
 c00d578:	2800081e 	bne	r5,zero,c00d59c <__lo0bits+0x90>
 c00d57c:	1806d07a 	srli	r3,r3,1
 c00d580:	1800051e 	bne	r3,zero,c00d598 <__lo0bits+0x8c>
 c00d584:	00800804 	movi	r2,32
 c00d588:	f800283a 	ret
 c00d58c:	1806d43a 	srli	r3,r3,16
 c00d590:	00800404 	movi	r2,16
 c00d594:	003feb06 	br	c00d544 <__alt_data_end+0xfc00d544>
 c00d598:	10800044 	addi	r2,r2,1
 c00d59c:	20c00015 	stw	r3,0(r4)
 c00d5a0:	f800283a 	ret
 c00d5a4:	0005883a 	mov	r2,zero
 c00d5a8:	f800283a 	ret
 c00d5ac:	1806d07a 	srli	r3,r3,1
 c00d5b0:	00800044 	movi	r2,1
 c00d5b4:	20c00015 	stw	r3,0(r4)
 c00d5b8:	f800283a 	ret

0c00d5bc <__i2b>:
 c00d5bc:	defffd04 	addi	sp,sp,-12
 c00d5c0:	dc000015 	stw	r16,0(sp)
 c00d5c4:	04000044 	movi	r16,1
 c00d5c8:	dc400115 	stw	r17,4(sp)
 c00d5cc:	2823883a 	mov	r17,r5
 c00d5d0:	800b883a 	mov	r5,r16
 c00d5d4:	dfc00215 	stw	ra,8(sp)
 c00d5d8:	c00d1880 	call	c00d188 <_Balloc>
 c00d5dc:	14400515 	stw	r17,20(r2)
 c00d5e0:	14000415 	stw	r16,16(r2)
 c00d5e4:	dfc00217 	ldw	ra,8(sp)
 c00d5e8:	dc400117 	ldw	r17,4(sp)
 c00d5ec:	dc000017 	ldw	r16,0(sp)
 c00d5f0:	dec00304 	addi	sp,sp,12
 c00d5f4:	f800283a 	ret

0c00d5f8 <__multiply>:
 c00d5f8:	deffef04 	addi	sp,sp,-68
 c00d5fc:	dc400815 	stw	r17,32(sp)
 c00d600:	dc000715 	stw	r16,28(sp)
 c00d604:	34400417 	ldw	r17,16(r6)
 c00d608:	2c000417 	ldw	r16,16(r5)
 c00d60c:	dd800d15 	stw	r22,52(sp)
 c00d610:	dc800915 	stw	r18,36(sp)
 c00d614:	dfc01015 	stw	ra,64(sp)
 c00d618:	df000f15 	stw	fp,60(sp)
 c00d61c:	ddc00e15 	stw	r23,56(sp)
 c00d620:	dd400c15 	stw	r21,48(sp)
 c00d624:	dd000b15 	stw	r20,44(sp)
 c00d628:	dcc00a15 	stw	r19,40(sp)
 c00d62c:	2825883a 	mov	r18,r5
 c00d630:	302d883a 	mov	r22,r6
 c00d634:	8440050e 	bge	r16,r17,c00d64c <__multiply+0x54>
 c00d638:	8007883a 	mov	r3,r16
 c00d63c:	3025883a 	mov	r18,r6
 c00d640:	8821883a 	mov	r16,r17
 c00d644:	282d883a 	mov	r22,r5
 c00d648:	1823883a 	mov	r17,r3
 c00d64c:	90800217 	ldw	r2,8(r18)
 c00d650:	8447883a 	add	r3,r16,r17
 c00d654:	d8c00215 	stw	r3,8(sp)
 c00d658:	91400117 	ldw	r5,4(r18)
 c00d65c:	10c0010e 	bge	r2,r3,c00d664 <__multiply+0x6c>
 c00d660:	29400044 	addi	r5,r5,1
 c00d664:	c00d1880 	call	c00d188 <_Balloc>
 c00d668:	d8c00217 	ldw	r3,8(sp)
 c00d66c:	d8800615 	stw	r2,24(sp)
 c00d670:	18eb883a 	add	r21,r3,r3
 c00d674:	ad6b883a 	add	r21,r21,r21
 c00d678:	10c00504 	addi	r3,r2,20
 c00d67c:	1d6b883a 	add	r21,r3,r21
 c00d680:	d8c00115 	stw	r3,4(sp)
 c00d684:	dd400315 	stw	r21,12(sp)
 c00d688:	1805883a 	mov	r2,r3
 c00d68c:	1d40042e 	bgeu	r3,r21,c00d6a0 <__multiply+0xa8>
 c00d690:	d8c00317 	ldw	r3,12(sp)
 c00d694:	10000015 	stw	zero,0(r2)
 c00d698:	10800104 	addi	r2,r2,4
 c00d69c:	10fffc36 	bltu	r2,r3,c00d690 <__alt_data_end+0xfc00d690>
 c00d6a0:	8c63883a 	add	r17,r17,r17
 c00d6a4:	b5800504 	addi	r22,r22,20
 c00d6a8:	8c63883a 	add	r17,r17,r17
 c00d6ac:	94800504 	addi	r18,r18,20
 c00d6b0:	8421883a 	add	r16,r16,r16
 c00d6b4:	b463883a 	add	r17,r22,r17
 c00d6b8:	8421883a 	add	r16,r16,r16
 c00d6bc:	dd800015 	stw	r22,0(sp)
 c00d6c0:	dc800415 	stw	r18,16(sp)
 c00d6c4:	dc400515 	stw	r17,20(sp)
 c00d6c8:	9429883a 	add	r20,r18,r16
 c00d6cc:	b4404f2e 	bgeu	r22,r17,c00d80c <__multiply+0x214>
 c00d6d0:	d8c00017 	ldw	r3,0(sp)
 c00d6d4:	1c800017 	ldw	r18,0(r3)
 c00d6d8:	947fffcc 	andi	r17,r18,65535
 c00d6dc:	88001e26 	beq	r17,zero,c00d758 <__multiply+0x160>
 c00d6e0:	dd800117 	ldw	r22,4(sp)
 c00d6e4:	dd400417 	ldw	r21,16(sp)
 c00d6e8:	0027883a 	mov	r19,zero
 c00d6ec:	ac800017 	ldw	r18,0(r21)
 c00d6f0:	b4000017 	ldw	r16,0(r22)
 c00d6f4:	880b883a 	mov	r5,r17
 c00d6f8:	913fffcc 	andi	r4,r18,65535
 c00d6fc:	c004c7c0 	call	c004c7c <__mulsi3>
 c00d700:	9008d43a 	srli	r4,r18,16
 c00d704:	84bfffcc 	andi	r18,r16,65535
 c00d708:	1485883a 	add	r2,r2,r18
 c00d70c:	14e5883a 	add	r18,r2,r19
 c00d710:	8020d43a 	srli	r16,r16,16
 c00d714:	9026d43a 	srli	r19,r18,16
 c00d718:	880b883a 	mov	r5,r17
 c00d71c:	c004c7c0 	call	c004c7c <__mulsi3>
 c00d720:	1405883a 	add	r2,r2,r16
 c00d724:	14e1883a 	add	r16,r2,r19
 c00d728:	90ffffcc 	andi	r3,r18,65535
 c00d72c:	8024943a 	slli	r18,r16,16
 c00d730:	ad400104 	addi	r21,r21,4
 c00d734:	b005883a 	mov	r2,r22
 c00d738:	90c6b03a 	or	r3,r18,r3
 c00d73c:	b0c00015 	stw	r3,0(r22)
 c00d740:	8026d43a 	srli	r19,r16,16
 c00d744:	b5800104 	addi	r22,r22,4
 c00d748:	ad3fe836 	bltu	r21,r20,c00d6ec <__alt_data_end+0xfc00d6ec>
 c00d74c:	d8c00017 	ldw	r3,0(sp)
 c00d750:	14c00115 	stw	r19,4(r2)
 c00d754:	1c800017 	ldw	r18,0(r3)
 c00d758:	9024d43a 	srli	r18,r18,16
 c00d75c:	90002226 	beq	r18,zero,c00d7e8 <__multiply+0x1f0>
 c00d760:	d8c00117 	ldw	r3,4(sp)
 c00d764:	dd800417 	ldw	r22,16(sp)
 c00d768:	002f883a 	mov	r23,zero
 c00d76c:	1f000017 	ldw	fp,0(r3)
 c00d770:	1823883a 	mov	r17,r3
 c00d774:	182b883a 	mov	r21,r3
 c00d778:	e021883a 	mov	r16,fp
 c00d77c:	00000106 	br	c00d784 <__multiply+0x18c>
 c00d780:	982b883a 	mov	r21,r19
 c00d784:	b100000b 	ldhu	r4,0(r22)
 c00d788:	8020d43a 	srli	r16,r16,16
 c00d78c:	900b883a 	mov	r5,r18
 c00d790:	c004c7c0 	call	c004c7c <__mulsi3>
 c00d794:	1405883a 	add	r2,r2,r16
 c00d798:	15ef883a 	add	r23,r2,r23
 c00d79c:	b804943a 	slli	r2,r23,16
 c00d7a0:	e0ffffcc 	andi	r3,fp,65535
 c00d7a4:	8c400104 	addi	r17,r17,4
 c00d7a8:	10c6b03a 	or	r3,r2,r3
 c00d7ac:	88ffff15 	stw	r3,-4(r17)
 c00d7b0:	b5800104 	addi	r22,r22,4
 c00d7b4:	b13fff17 	ldw	r4,-4(r22)
 c00d7b8:	acc00104 	addi	r19,r21,4
 c00d7bc:	900b883a 	mov	r5,r18
 c00d7c0:	2008d43a 	srli	r4,r4,16
 c00d7c4:	9c000017 	ldw	r16,0(r19)
 c00d7c8:	c004c7c0 	call	c004c7c <__mulsi3>
 c00d7cc:	b806d43a 	srli	r3,r23,16
 c00d7d0:	813fffcc 	andi	r4,r16,65535
 c00d7d4:	1105883a 	add	r2,r2,r4
 c00d7d8:	10f9883a 	add	fp,r2,r3
 c00d7dc:	e02ed43a 	srli	r23,fp,16
 c00d7e0:	b53fe736 	bltu	r22,r20,c00d780 <__alt_data_end+0xfc00d780>
 c00d7e4:	af000115 	stw	fp,4(r21)
 c00d7e8:	d8c00017 	ldw	r3,0(sp)
 c00d7ec:	d9000517 	ldw	r4,20(sp)
 c00d7f0:	18c00104 	addi	r3,r3,4
 c00d7f4:	d8c00015 	stw	r3,0(sp)
 c00d7f8:	d8c00117 	ldw	r3,4(sp)
 c00d7fc:	18c00104 	addi	r3,r3,4
 c00d800:	d8c00115 	stw	r3,4(sp)
 c00d804:	d8c00017 	ldw	r3,0(sp)
 c00d808:	193fb136 	bltu	r3,r4,c00d6d0 <__alt_data_end+0xfc00d6d0>
 c00d80c:	d8c00217 	ldw	r3,8(sp)
 c00d810:	00c00c0e 	bge	zero,r3,c00d844 <__multiply+0x24c>
 c00d814:	d8c00317 	ldw	r3,12(sp)
 c00d818:	18bfff17 	ldw	r2,-4(r3)
 c00d81c:	1d7fff04 	addi	r21,r3,-4
 c00d820:	10000326 	beq	r2,zero,c00d830 <__multiply+0x238>
 c00d824:	00000706 	br	c00d844 <__multiply+0x24c>
 c00d828:	a8800017 	ldw	r2,0(r21)
 c00d82c:	1000051e 	bne	r2,zero,c00d844 <__multiply+0x24c>
 c00d830:	d8c00217 	ldw	r3,8(sp)
 c00d834:	ad7fff04 	addi	r21,r21,-4
 c00d838:	18ffffc4 	addi	r3,r3,-1
 c00d83c:	d8c00215 	stw	r3,8(sp)
 c00d840:	183ff91e 	bne	r3,zero,c00d828 <__alt_data_end+0xfc00d828>
 c00d844:	d8c00617 	ldw	r3,24(sp)
 c00d848:	d9000217 	ldw	r4,8(sp)
 c00d84c:	1805883a 	mov	r2,r3
 c00d850:	19000415 	stw	r4,16(r3)
 c00d854:	dfc01017 	ldw	ra,64(sp)
 c00d858:	df000f17 	ldw	fp,60(sp)
 c00d85c:	ddc00e17 	ldw	r23,56(sp)
 c00d860:	dd800d17 	ldw	r22,52(sp)
 c00d864:	dd400c17 	ldw	r21,48(sp)
 c00d868:	dd000b17 	ldw	r20,44(sp)
 c00d86c:	dcc00a17 	ldw	r19,40(sp)
 c00d870:	dc800917 	ldw	r18,36(sp)
 c00d874:	dc400817 	ldw	r17,32(sp)
 c00d878:	dc000717 	ldw	r16,28(sp)
 c00d87c:	dec01104 	addi	sp,sp,68
 c00d880:	f800283a 	ret

0c00d884 <__pow5mult>:
 c00d884:	defffa04 	addi	sp,sp,-24
 c00d888:	dcc00315 	stw	r19,12(sp)
 c00d88c:	dc000015 	stw	r16,0(sp)
 c00d890:	dfc00515 	stw	ra,20(sp)
 c00d894:	dd000415 	stw	r20,16(sp)
 c00d898:	dc800215 	stw	r18,8(sp)
 c00d89c:	dc400115 	stw	r17,4(sp)
 c00d8a0:	308000cc 	andi	r2,r6,3
 c00d8a4:	3021883a 	mov	r16,r6
 c00d8a8:	2027883a 	mov	r19,r4
 c00d8ac:	10002f1e 	bne	r2,zero,c00d96c <__pow5mult+0xe8>
 c00d8b0:	2825883a 	mov	r18,r5
 c00d8b4:	8021d0ba 	srai	r16,r16,2
 c00d8b8:	80001a26 	beq	r16,zero,c00d924 <__pow5mult+0xa0>
 c00d8bc:	9c401217 	ldw	r17,72(r19)
 c00d8c0:	8800061e 	bne	r17,zero,c00d8dc <__pow5mult+0x58>
 c00d8c4:	00003406 	br	c00d998 <__pow5mult+0x114>
 c00d8c8:	8021d07a 	srai	r16,r16,1
 c00d8cc:	80001526 	beq	r16,zero,c00d924 <__pow5mult+0xa0>
 c00d8d0:	88800017 	ldw	r2,0(r17)
 c00d8d4:	10001c26 	beq	r2,zero,c00d948 <__pow5mult+0xc4>
 c00d8d8:	1023883a 	mov	r17,r2
 c00d8dc:	8080004c 	andi	r2,r16,1
 c00d8e0:	103ff926 	beq	r2,zero,c00d8c8 <__alt_data_end+0xfc00d8c8>
 c00d8e4:	880d883a 	mov	r6,r17
 c00d8e8:	900b883a 	mov	r5,r18
 c00d8ec:	9809883a 	mov	r4,r19
 c00d8f0:	c00d5f80 	call	c00d5f8 <__multiply>
 c00d8f4:	90001b26 	beq	r18,zero,c00d964 <__pow5mult+0xe0>
 c00d8f8:	91000117 	ldw	r4,4(r18)
 c00d8fc:	98c01317 	ldw	r3,76(r19)
 c00d900:	8021d07a 	srai	r16,r16,1
 c00d904:	2109883a 	add	r4,r4,r4
 c00d908:	2109883a 	add	r4,r4,r4
 c00d90c:	1907883a 	add	r3,r3,r4
 c00d910:	19000017 	ldw	r4,0(r3)
 c00d914:	91000015 	stw	r4,0(r18)
 c00d918:	1c800015 	stw	r18,0(r3)
 c00d91c:	1025883a 	mov	r18,r2
 c00d920:	803feb1e 	bne	r16,zero,c00d8d0 <__alt_data_end+0xfc00d8d0>
 c00d924:	9005883a 	mov	r2,r18
 c00d928:	dfc00517 	ldw	ra,20(sp)
 c00d92c:	dd000417 	ldw	r20,16(sp)
 c00d930:	dcc00317 	ldw	r19,12(sp)
 c00d934:	dc800217 	ldw	r18,8(sp)
 c00d938:	dc400117 	ldw	r17,4(sp)
 c00d93c:	dc000017 	ldw	r16,0(sp)
 c00d940:	dec00604 	addi	sp,sp,24
 c00d944:	f800283a 	ret
 c00d948:	880d883a 	mov	r6,r17
 c00d94c:	880b883a 	mov	r5,r17
 c00d950:	9809883a 	mov	r4,r19
 c00d954:	c00d5f80 	call	c00d5f8 <__multiply>
 c00d958:	88800015 	stw	r2,0(r17)
 c00d95c:	10000015 	stw	zero,0(r2)
 c00d960:	003fdd06 	br	c00d8d8 <__alt_data_end+0xfc00d8d8>
 c00d964:	1025883a 	mov	r18,r2
 c00d968:	003fd706 	br	c00d8c8 <__alt_data_end+0xfc00d8c8>
 c00d96c:	10bfffc4 	addi	r2,r2,-1
 c00d970:	1085883a 	add	r2,r2,r2
 c00d974:	00c300b4 	movhi	r3,3074
 c00d978:	18e2a604 	addi	r3,r3,-30056
 c00d97c:	1085883a 	add	r2,r2,r2
 c00d980:	1885883a 	add	r2,r3,r2
 c00d984:	11800017 	ldw	r6,0(r2)
 c00d988:	000f883a 	mov	r7,zero
 c00d98c:	c00d2580 	call	c00d258 <__multadd>
 c00d990:	1025883a 	mov	r18,r2
 c00d994:	003fc706 	br	c00d8b4 <__alt_data_end+0xfc00d8b4>
 c00d998:	05000044 	movi	r20,1
 c00d99c:	a00b883a 	mov	r5,r20
 c00d9a0:	9809883a 	mov	r4,r19
 c00d9a4:	c00d1880 	call	c00d188 <_Balloc>
 c00d9a8:	1023883a 	mov	r17,r2
 c00d9ac:	00809c44 	movi	r2,625
 c00d9b0:	88800515 	stw	r2,20(r17)
 c00d9b4:	8d000415 	stw	r20,16(r17)
 c00d9b8:	9c401215 	stw	r17,72(r19)
 c00d9bc:	88000015 	stw	zero,0(r17)
 c00d9c0:	003fc606 	br	c00d8dc <__alt_data_end+0xfc00d8dc>

0c00d9c4 <__lshift>:
 c00d9c4:	defff904 	addi	sp,sp,-28
 c00d9c8:	dd400515 	stw	r21,20(sp)
 c00d9cc:	dcc00315 	stw	r19,12(sp)
 c00d9d0:	302bd17a 	srai	r21,r6,5
 c00d9d4:	2cc00417 	ldw	r19,16(r5)
 c00d9d8:	28800217 	ldw	r2,8(r5)
 c00d9dc:	dd000415 	stw	r20,16(sp)
 c00d9e0:	ace7883a 	add	r19,r21,r19
 c00d9e4:	dc800215 	stw	r18,8(sp)
 c00d9e8:	dc400115 	stw	r17,4(sp)
 c00d9ec:	dc000015 	stw	r16,0(sp)
 c00d9f0:	dfc00615 	stw	ra,24(sp)
 c00d9f4:	9c000044 	addi	r16,r19,1
 c00d9f8:	2823883a 	mov	r17,r5
 c00d9fc:	3029883a 	mov	r20,r6
 c00da00:	2025883a 	mov	r18,r4
 c00da04:	29400117 	ldw	r5,4(r5)
 c00da08:	1400030e 	bge	r2,r16,c00da18 <__lshift+0x54>
 c00da0c:	1085883a 	add	r2,r2,r2
 c00da10:	29400044 	addi	r5,r5,1
 c00da14:	143ffd16 	blt	r2,r16,c00da0c <__alt_data_end+0xfc00da0c>
 c00da18:	9009883a 	mov	r4,r18
 c00da1c:	c00d1880 	call	c00d188 <_Balloc>
 c00da20:	10c00504 	addi	r3,r2,20
 c00da24:	0540070e 	bge	zero,r21,c00da44 <__lshift+0x80>
 c00da28:	ad6b883a 	add	r21,r21,r21
 c00da2c:	ad6b883a 	add	r21,r21,r21
 c00da30:	1809883a 	mov	r4,r3
 c00da34:	1d47883a 	add	r3,r3,r21
 c00da38:	20000015 	stw	zero,0(r4)
 c00da3c:	21000104 	addi	r4,r4,4
 c00da40:	193ffd1e 	bne	r3,r4,c00da38 <__alt_data_end+0xfc00da38>
 c00da44:	8a000417 	ldw	r8,16(r17)
 c00da48:	89000504 	addi	r4,r17,20
 c00da4c:	a18007cc 	andi	r6,r20,31
 c00da50:	4211883a 	add	r8,r8,r8
 c00da54:	4211883a 	add	r8,r8,r8
 c00da58:	2211883a 	add	r8,r4,r8
 c00da5c:	30002326 	beq	r6,zero,c00daec <__lshift+0x128>
 c00da60:	02400804 	movi	r9,32
 c00da64:	4993c83a 	sub	r9,r9,r6
 c00da68:	000b883a 	mov	r5,zero
 c00da6c:	21c00017 	ldw	r7,0(r4)
 c00da70:	1815883a 	mov	r10,r3
 c00da74:	18c00104 	addi	r3,r3,4
 c00da78:	398e983a 	sll	r7,r7,r6
 c00da7c:	21000104 	addi	r4,r4,4
 c00da80:	394ab03a 	or	r5,r7,r5
 c00da84:	197fff15 	stw	r5,-4(r3)
 c00da88:	217fff17 	ldw	r5,-4(r4)
 c00da8c:	2a4ad83a 	srl	r5,r5,r9
 c00da90:	223ff636 	bltu	r4,r8,c00da6c <__alt_data_end+0xfc00da6c>
 c00da94:	51400115 	stw	r5,4(r10)
 c00da98:	28001a1e 	bne	r5,zero,c00db04 <__lshift+0x140>
 c00da9c:	843fffc4 	addi	r16,r16,-1
 c00daa0:	14000415 	stw	r16,16(r2)
 c00daa4:	88000826 	beq	r17,zero,c00dac8 <__lshift+0x104>
 c00daa8:	89000117 	ldw	r4,4(r17)
 c00daac:	90c01317 	ldw	r3,76(r18)
 c00dab0:	2109883a 	add	r4,r4,r4
 c00dab4:	2109883a 	add	r4,r4,r4
 c00dab8:	1907883a 	add	r3,r3,r4
 c00dabc:	19000017 	ldw	r4,0(r3)
 c00dac0:	89000015 	stw	r4,0(r17)
 c00dac4:	1c400015 	stw	r17,0(r3)
 c00dac8:	dfc00617 	ldw	ra,24(sp)
 c00dacc:	dd400517 	ldw	r21,20(sp)
 c00dad0:	dd000417 	ldw	r20,16(sp)
 c00dad4:	dcc00317 	ldw	r19,12(sp)
 c00dad8:	dc800217 	ldw	r18,8(sp)
 c00dadc:	dc400117 	ldw	r17,4(sp)
 c00dae0:	dc000017 	ldw	r16,0(sp)
 c00dae4:	dec00704 	addi	sp,sp,28
 c00dae8:	f800283a 	ret
 c00daec:	21400017 	ldw	r5,0(r4)
 c00daf0:	18c00104 	addi	r3,r3,4
 c00daf4:	21000104 	addi	r4,r4,4
 c00daf8:	197fff15 	stw	r5,-4(r3)
 c00dafc:	223ffb36 	bltu	r4,r8,c00daec <__alt_data_end+0xfc00daec>
 c00db00:	003fe606 	br	c00da9c <__alt_data_end+0xfc00da9c>
 c00db04:	9c000084 	addi	r16,r19,2
 c00db08:	003fe406 	br	c00da9c <__alt_data_end+0xfc00da9c>

0c00db0c <__mcmp>:
 c00db0c:	20800417 	ldw	r2,16(r4)
 c00db10:	28c00417 	ldw	r3,16(r5)
 c00db14:	10c5c83a 	sub	r2,r2,r3
 c00db18:	1000111e 	bne	r2,zero,c00db60 <__mcmp+0x54>
 c00db1c:	18c7883a 	add	r3,r3,r3
 c00db20:	18c7883a 	add	r3,r3,r3
 c00db24:	21000504 	addi	r4,r4,20
 c00db28:	29400504 	addi	r5,r5,20
 c00db2c:	20c5883a 	add	r2,r4,r3
 c00db30:	28cb883a 	add	r5,r5,r3
 c00db34:	00000106 	br	c00db3c <__mcmp+0x30>
 c00db38:	20800a2e 	bgeu	r4,r2,c00db64 <__mcmp+0x58>
 c00db3c:	10bfff04 	addi	r2,r2,-4
 c00db40:	297fff04 	addi	r5,r5,-4
 c00db44:	11800017 	ldw	r6,0(r2)
 c00db48:	28c00017 	ldw	r3,0(r5)
 c00db4c:	30fffa26 	beq	r6,r3,c00db38 <__alt_data_end+0xfc00db38>
 c00db50:	30c00236 	bltu	r6,r3,c00db5c <__mcmp+0x50>
 c00db54:	00800044 	movi	r2,1
 c00db58:	f800283a 	ret
 c00db5c:	00bfffc4 	movi	r2,-1
 c00db60:	f800283a 	ret
 c00db64:	0005883a 	mov	r2,zero
 c00db68:	f800283a 	ret

0c00db6c <__mdiff>:
 c00db6c:	28c00417 	ldw	r3,16(r5)
 c00db70:	30800417 	ldw	r2,16(r6)
 c00db74:	defffa04 	addi	sp,sp,-24
 c00db78:	dcc00315 	stw	r19,12(sp)
 c00db7c:	dc800215 	stw	r18,8(sp)
 c00db80:	dfc00515 	stw	ra,20(sp)
 c00db84:	dd000415 	stw	r20,16(sp)
 c00db88:	dc400115 	stw	r17,4(sp)
 c00db8c:	dc000015 	stw	r16,0(sp)
 c00db90:	1887c83a 	sub	r3,r3,r2
 c00db94:	2825883a 	mov	r18,r5
 c00db98:	3027883a 	mov	r19,r6
 c00db9c:	1800141e 	bne	r3,zero,c00dbf0 <__mdiff+0x84>
 c00dba0:	1085883a 	add	r2,r2,r2
 c00dba4:	1085883a 	add	r2,r2,r2
 c00dba8:	2a000504 	addi	r8,r5,20
 c00dbac:	34000504 	addi	r16,r6,20
 c00dbb0:	4087883a 	add	r3,r8,r2
 c00dbb4:	8085883a 	add	r2,r16,r2
 c00dbb8:	00000106 	br	c00dbc0 <__mdiff+0x54>
 c00dbbc:	40c0592e 	bgeu	r8,r3,c00dd24 <__mdiff+0x1b8>
 c00dbc0:	18ffff04 	addi	r3,r3,-4
 c00dbc4:	10bfff04 	addi	r2,r2,-4
 c00dbc8:	19c00017 	ldw	r7,0(r3)
 c00dbcc:	11400017 	ldw	r5,0(r2)
 c00dbd0:	397ffa26 	beq	r7,r5,c00dbbc <__alt_data_end+0xfc00dbbc>
 c00dbd4:	3940592e 	bgeu	r7,r5,c00dd3c <__mdiff+0x1d0>
 c00dbd8:	9005883a 	mov	r2,r18
 c00dbdc:	4023883a 	mov	r17,r8
 c00dbe0:	9825883a 	mov	r18,r19
 c00dbe4:	05000044 	movi	r20,1
 c00dbe8:	1027883a 	mov	r19,r2
 c00dbec:	00000406 	br	c00dc00 <__mdiff+0x94>
 c00dbf0:	18005616 	blt	r3,zero,c00dd4c <__mdiff+0x1e0>
 c00dbf4:	34400504 	addi	r17,r6,20
 c00dbf8:	2c000504 	addi	r16,r5,20
 c00dbfc:	0029883a 	mov	r20,zero
 c00dc00:	91400117 	ldw	r5,4(r18)
 c00dc04:	c00d1880 	call	c00d188 <_Balloc>
 c00dc08:	92400417 	ldw	r9,16(r18)
 c00dc0c:	9b000417 	ldw	r12,16(r19)
 c00dc10:	12c00504 	addi	r11,r2,20
 c00dc14:	4a51883a 	add	r8,r9,r9
 c00dc18:	6319883a 	add	r12,r12,r12
 c00dc1c:	4211883a 	add	r8,r8,r8
 c00dc20:	6319883a 	add	r12,r12,r12
 c00dc24:	15000315 	stw	r20,12(r2)
 c00dc28:	8211883a 	add	r8,r16,r8
 c00dc2c:	8b19883a 	add	r12,r17,r12
 c00dc30:	0007883a 	mov	r3,zero
 c00dc34:	81400017 	ldw	r5,0(r16)
 c00dc38:	89c00017 	ldw	r7,0(r17)
 c00dc3c:	59800104 	addi	r6,r11,4
 c00dc40:	293fffcc 	andi	r4,r5,65535
 c00dc44:	20c7883a 	add	r3,r4,r3
 c00dc48:	393fffcc 	andi	r4,r7,65535
 c00dc4c:	1909c83a 	sub	r4,r3,r4
 c00dc50:	280ad43a 	srli	r5,r5,16
 c00dc54:	380ed43a 	srli	r7,r7,16
 c00dc58:	2007d43a 	srai	r3,r4,16
 c00dc5c:	213fffcc 	andi	r4,r4,65535
 c00dc60:	29cbc83a 	sub	r5,r5,r7
 c00dc64:	28c7883a 	add	r3,r5,r3
 c00dc68:	180a943a 	slli	r5,r3,16
 c00dc6c:	8c400104 	addi	r17,r17,4
 c00dc70:	84000104 	addi	r16,r16,4
 c00dc74:	2908b03a 	or	r4,r5,r4
 c00dc78:	59000015 	stw	r4,0(r11)
 c00dc7c:	1807d43a 	srai	r3,r3,16
 c00dc80:	3015883a 	mov	r10,r6
 c00dc84:	3017883a 	mov	r11,r6
 c00dc88:	8b3fea36 	bltu	r17,r12,c00dc34 <__alt_data_end+0xfc00dc34>
 c00dc8c:	8200162e 	bgeu	r16,r8,c00dce8 <__mdiff+0x17c>
 c00dc90:	8017883a 	mov	r11,r16
 c00dc94:	59400017 	ldw	r5,0(r11)
 c00dc98:	31800104 	addi	r6,r6,4
 c00dc9c:	5ac00104 	addi	r11,r11,4
 c00dca0:	293fffcc 	andi	r4,r5,65535
 c00dca4:	20c7883a 	add	r3,r4,r3
 c00dca8:	280ed43a 	srli	r7,r5,16
 c00dcac:	180bd43a 	srai	r5,r3,16
 c00dcb0:	193fffcc 	andi	r4,r3,65535
 c00dcb4:	3947883a 	add	r3,r7,r5
 c00dcb8:	180a943a 	slli	r5,r3,16
 c00dcbc:	1807d43a 	srai	r3,r3,16
 c00dcc0:	2908b03a 	or	r4,r5,r4
 c00dcc4:	313fff15 	stw	r4,-4(r6)
 c00dcc8:	5a3ff236 	bltu	r11,r8,c00dc94 <__alt_data_end+0xfc00dc94>
 c00dccc:	0406303a 	nor	r3,zero,r16
 c00dcd0:	1a07883a 	add	r3,r3,r8
 c00dcd4:	1806d0ba 	srli	r3,r3,2
 c00dcd8:	18c00044 	addi	r3,r3,1
 c00dcdc:	18c7883a 	add	r3,r3,r3
 c00dce0:	18c7883a 	add	r3,r3,r3
 c00dce4:	50d5883a 	add	r10,r10,r3
 c00dce8:	50ffff04 	addi	r3,r10,-4
 c00dcec:	2000041e 	bne	r4,zero,c00dd00 <__mdiff+0x194>
 c00dcf0:	18ffff04 	addi	r3,r3,-4
 c00dcf4:	19000017 	ldw	r4,0(r3)
 c00dcf8:	4a7fffc4 	addi	r9,r9,-1
 c00dcfc:	203ffc26 	beq	r4,zero,c00dcf0 <__alt_data_end+0xfc00dcf0>
 c00dd00:	12400415 	stw	r9,16(r2)
 c00dd04:	dfc00517 	ldw	ra,20(sp)
 c00dd08:	dd000417 	ldw	r20,16(sp)
 c00dd0c:	dcc00317 	ldw	r19,12(sp)
 c00dd10:	dc800217 	ldw	r18,8(sp)
 c00dd14:	dc400117 	ldw	r17,4(sp)
 c00dd18:	dc000017 	ldw	r16,0(sp)
 c00dd1c:	dec00604 	addi	sp,sp,24
 c00dd20:	f800283a 	ret
 c00dd24:	000b883a 	mov	r5,zero
 c00dd28:	c00d1880 	call	c00d188 <_Balloc>
 c00dd2c:	00c00044 	movi	r3,1
 c00dd30:	10c00415 	stw	r3,16(r2)
 c00dd34:	10000515 	stw	zero,20(r2)
 c00dd38:	003ff206 	br	c00dd04 <__alt_data_end+0xfc00dd04>
 c00dd3c:	8023883a 	mov	r17,r16
 c00dd40:	0029883a 	mov	r20,zero
 c00dd44:	4021883a 	mov	r16,r8
 c00dd48:	003fad06 	br	c00dc00 <__alt_data_end+0xfc00dc00>
 c00dd4c:	9005883a 	mov	r2,r18
 c00dd50:	94400504 	addi	r17,r18,20
 c00dd54:	9c000504 	addi	r16,r19,20
 c00dd58:	9825883a 	mov	r18,r19
 c00dd5c:	05000044 	movi	r20,1
 c00dd60:	1027883a 	mov	r19,r2
 c00dd64:	003fa606 	br	c00dc00 <__alt_data_end+0xfc00dc00>

0c00dd68 <__ulp>:
 c00dd68:	295ffc2c 	andhi	r5,r5,32752
 c00dd6c:	00bf3034 	movhi	r2,64704
 c00dd70:	2887883a 	add	r3,r5,r2
 c00dd74:	00c0020e 	bge	zero,r3,c00dd80 <__ulp+0x18>
 c00dd78:	0005883a 	mov	r2,zero
 c00dd7c:	f800283a 	ret
 c00dd80:	00c7c83a 	sub	r3,zero,r3
 c00dd84:	1807d53a 	srai	r3,r3,20
 c00dd88:	008004c4 	movi	r2,19
 c00dd8c:	10c00b0e 	bge	r2,r3,c00ddbc <__ulp+0x54>
 c00dd90:	18bffb04 	addi	r2,r3,-20
 c00dd94:	01000784 	movi	r4,30
 c00dd98:	0007883a 	mov	r3,zero
 c00dd9c:	20800516 	blt	r4,r2,c00ddb4 <__ulp+0x4c>
 c00dda0:	010007c4 	movi	r4,31
 c00dda4:	2089c83a 	sub	r4,r4,r2
 c00dda8:	00800044 	movi	r2,1
 c00ddac:	1104983a 	sll	r2,r2,r4
 c00ddb0:	f800283a 	ret
 c00ddb4:	00800044 	movi	r2,1
 c00ddb8:	f800283a 	ret
 c00ddbc:	01400234 	movhi	r5,8
 c00ddc0:	28c7d83a 	sra	r3,r5,r3
 c00ddc4:	0005883a 	mov	r2,zero
 c00ddc8:	f800283a 	ret

0c00ddcc <__b2d>:
 c00ddcc:	defffa04 	addi	sp,sp,-24
 c00ddd0:	dc000015 	stw	r16,0(sp)
 c00ddd4:	24000417 	ldw	r16,16(r4)
 c00ddd8:	dc400115 	stw	r17,4(sp)
 c00dddc:	24400504 	addi	r17,r4,20
 c00dde0:	8421883a 	add	r16,r16,r16
 c00dde4:	8421883a 	add	r16,r16,r16
 c00dde8:	8c21883a 	add	r16,r17,r16
 c00ddec:	dc800215 	stw	r18,8(sp)
 c00ddf0:	84bfff17 	ldw	r18,-4(r16)
 c00ddf4:	dd000415 	stw	r20,16(sp)
 c00ddf8:	dcc00315 	stw	r19,12(sp)
 c00ddfc:	9009883a 	mov	r4,r18
 c00de00:	2829883a 	mov	r20,r5
 c00de04:	dfc00515 	stw	ra,20(sp)
 c00de08:	c00d4a40 	call	c00d4a4 <__hi0bits>
 c00de0c:	00c00804 	movi	r3,32
 c00de10:	1889c83a 	sub	r4,r3,r2
 c00de14:	a1000015 	stw	r4,0(r20)
 c00de18:	01000284 	movi	r4,10
 c00de1c:	84ffff04 	addi	r19,r16,-4
 c00de20:	20801216 	blt	r4,r2,c00de6c <__b2d+0xa0>
 c00de24:	018002c4 	movi	r6,11
 c00de28:	308dc83a 	sub	r6,r6,r2
 c00de2c:	9186d83a 	srl	r3,r18,r6
 c00de30:	18cffc34 	orhi	r3,r3,16368
 c00de34:	8cc0212e 	bgeu	r17,r19,c00debc <__b2d+0xf0>
 c00de38:	813ffe17 	ldw	r4,-8(r16)
 c00de3c:	218cd83a 	srl	r6,r4,r6
 c00de40:	10800544 	addi	r2,r2,21
 c00de44:	9084983a 	sll	r2,r18,r2
 c00de48:	1184b03a 	or	r2,r2,r6
 c00de4c:	dfc00517 	ldw	ra,20(sp)
 c00de50:	dd000417 	ldw	r20,16(sp)
 c00de54:	dcc00317 	ldw	r19,12(sp)
 c00de58:	dc800217 	ldw	r18,8(sp)
 c00de5c:	dc400117 	ldw	r17,4(sp)
 c00de60:	dc000017 	ldw	r16,0(sp)
 c00de64:	dec00604 	addi	sp,sp,24
 c00de68:	f800283a 	ret
 c00de6c:	8cc00f2e 	bgeu	r17,r19,c00deac <__b2d+0xe0>
 c00de70:	117ffd44 	addi	r5,r2,-11
 c00de74:	80bffe17 	ldw	r2,-8(r16)
 c00de78:	28000e26 	beq	r5,zero,c00deb4 <__b2d+0xe8>
 c00de7c:	1949c83a 	sub	r4,r3,r5
 c00de80:	9164983a 	sll	r18,r18,r5
 c00de84:	1106d83a 	srl	r3,r2,r4
 c00de88:	81bffe04 	addi	r6,r16,-8
 c00de8c:	948ffc34 	orhi	r18,r18,16368
 c00de90:	90c6b03a 	or	r3,r18,r3
 c00de94:	89800e2e 	bgeu	r17,r6,c00ded0 <__b2d+0x104>
 c00de98:	81bffd17 	ldw	r6,-12(r16)
 c00de9c:	1144983a 	sll	r2,r2,r5
 c00dea0:	310ad83a 	srl	r5,r6,r4
 c00dea4:	2884b03a 	or	r2,r5,r2
 c00dea8:	003fe806 	br	c00de4c <__alt_data_end+0xfc00de4c>
 c00deac:	10bffd44 	addi	r2,r2,-11
 c00deb0:	1000041e 	bne	r2,zero,c00dec4 <__b2d+0xf8>
 c00deb4:	90cffc34 	orhi	r3,r18,16368
 c00deb8:	003fe406 	br	c00de4c <__alt_data_end+0xfc00de4c>
 c00debc:	000d883a 	mov	r6,zero
 c00dec0:	003fdf06 	br	c00de40 <__alt_data_end+0xfc00de40>
 c00dec4:	90a4983a 	sll	r18,r18,r2
 c00dec8:	0005883a 	mov	r2,zero
 c00decc:	003ff906 	br	c00deb4 <__alt_data_end+0xfc00deb4>
 c00ded0:	1144983a 	sll	r2,r2,r5
 c00ded4:	003fdd06 	br	c00de4c <__alt_data_end+0xfc00de4c>

0c00ded8 <__d2b>:
 c00ded8:	defff804 	addi	sp,sp,-32
 c00dedc:	dc000215 	stw	r16,8(sp)
 c00dee0:	3021883a 	mov	r16,r6
 c00dee4:	dc400315 	stw	r17,12(sp)
 c00dee8:	8022907a 	slli	r17,r16,1
 c00deec:	dd000615 	stw	r20,24(sp)
 c00def0:	2829883a 	mov	r20,r5
 c00def4:	01400044 	movi	r5,1
 c00def8:	dcc00515 	stw	r19,20(sp)
 c00defc:	dc800415 	stw	r18,16(sp)
 c00df00:	dfc00715 	stw	ra,28(sp)
 c00df04:	3825883a 	mov	r18,r7
 c00df08:	8822d57a 	srli	r17,r17,21
 c00df0c:	c00d1880 	call	c00d188 <_Balloc>
 c00df10:	1027883a 	mov	r19,r2
 c00df14:	00800434 	movhi	r2,16
 c00df18:	10bfffc4 	addi	r2,r2,-1
 c00df1c:	808c703a 	and	r6,r16,r2
 c00df20:	88000126 	beq	r17,zero,c00df28 <__d2b+0x50>
 c00df24:	31800434 	orhi	r6,r6,16
 c00df28:	d9800015 	stw	r6,0(sp)
 c00df2c:	a0002426 	beq	r20,zero,c00dfc0 <__d2b+0xe8>
 c00df30:	d9000104 	addi	r4,sp,4
 c00df34:	dd000115 	stw	r20,4(sp)
 c00df38:	c00d50c0 	call	c00d50c <__lo0bits>
 c00df3c:	d8c00017 	ldw	r3,0(sp)
 c00df40:	10002f1e 	bne	r2,zero,c00e000 <__d2b+0x128>
 c00df44:	d9000117 	ldw	r4,4(sp)
 c00df48:	99000515 	stw	r4,20(r19)
 c00df4c:	1821003a 	cmpeq	r16,r3,zero
 c00df50:	01000084 	movi	r4,2
 c00df54:	2421c83a 	sub	r16,r4,r16
 c00df58:	98c00615 	stw	r3,24(r19)
 c00df5c:	9c000415 	stw	r16,16(r19)
 c00df60:	88001f1e 	bne	r17,zero,c00dfe0 <__d2b+0x108>
 c00df64:	10bef384 	addi	r2,r2,-1074
 c00df68:	90800015 	stw	r2,0(r18)
 c00df6c:	00900034 	movhi	r2,16384
 c00df70:	10bfffc4 	addi	r2,r2,-1
 c00df74:	8085883a 	add	r2,r16,r2
 c00df78:	1085883a 	add	r2,r2,r2
 c00df7c:	1085883a 	add	r2,r2,r2
 c00df80:	9885883a 	add	r2,r19,r2
 c00df84:	11000517 	ldw	r4,20(r2)
 c00df88:	8020917a 	slli	r16,r16,5
 c00df8c:	c00d4a40 	call	c00d4a4 <__hi0bits>
 c00df90:	d8c00817 	ldw	r3,32(sp)
 c00df94:	8085c83a 	sub	r2,r16,r2
 c00df98:	18800015 	stw	r2,0(r3)
 c00df9c:	9805883a 	mov	r2,r19
 c00dfa0:	dfc00717 	ldw	ra,28(sp)
 c00dfa4:	dd000617 	ldw	r20,24(sp)
 c00dfa8:	dcc00517 	ldw	r19,20(sp)
 c00dfac:	dc800417 	ldw	r18,16(sp)
 c00dfb0:	dc400317 	ldw	r17,12(sp)
 c00dfb4:	dc000217 	ldw	r16,8(sp)
 c00dfb8:	dec00804 	addi	sp,sp,32
 c00dfbc:	f800283a 	ret
 c00dfc0:	d809883a 	mov	r4,sp
 c00dfc4:	c00d50c0 	call	c00d50c <__lo0bits>
 c00dfc8:	d8c00017 	ldw	r3,0(sp)
 c00dfcc:	04000044 	movi	r16,1
 c00dfd0:	9c000415 	stw	r16,16(r19)
 c00dfd4:	98c00515 	stw	r3,20(r19)
 c00dfd8:	10800804 	addi	r2,r2,32
 c00dfdc:	883fe126 	beq	r17,zero,c00df64 <__alt_data_end+0xfc00df64>
 c00dfe0:	00c00d44 	movi	r3,53
 c00dfe4:	8c7ef344 	addi	r17,r17,-1075
 c00dfe8:	88a3883a 	add	r17,r17,r2
 c00dfec:	1885c83a 	sub	r2,r3,r2
 c00dff0:	d8c00817 	ldw	r3,32(sp)
 c00dff4:	94400015 	stw	r17,0(r18)
 c00dff8:	18800015 	stw	r2,0(r3)
 c00dffc:	003fe706 	br	c00df9c <__alt_data_end+0xfc00df9c>
 c00e000:	01000804 	movi	r4,32
 c00e004:	2089c83a 	sub	r4,r4,r2
 c00e008:	1908983a 	sll	r4,r3,r4
 c00e00c:	d9400117 	ldw	r5,4(sp)
 c00e010:	1886d83a 	srl	r3,r3,r2
 c00e014:	2148b03a 	or	r4,r4,r5
 c00e018:	99000515 	stw	r4,20(r19)
 c00e01c:	d8c00015 	stw	r3,0(sp)
 c00e020:	003fca06 	br	c00df4c <__alt_data_end+0xfc00df4c>

0c00e024 <__ratio>:
 c00e024:	defff904 	addi	sp,sp,-28
 c00e028:	dc400315 	stw	r17,12(sp)
 c00e02c:	2823883a 	mov	r17,r5
 c00e030:	d9400104 	addi	r5,sp,4
 c00e034:	dfc00615 	stw	ra,24(sp)
 c00e038:	dcc00515 	stw	r19,20(sp)
 c00e03c:	dc800415 	stw	r18,16(sp)
 c00e040:	2027883a 	mov	r19,r4
 c00e044:	dc000215 	stw	r16,8(sp)
 c00e048:	c00ddcc0 	call	c00ddcc <__b2d>
 c00e04c:	d80b883a 	mov	r5,sp
 c00e050:	8809883a 	mov	r4,r17
 c00e054:	1025883a 	mov	r18,r2
 c00e058:	1821883a 	mov	r16,r3
 c00e05c:	c00ddcc0 	call	c00ddcc <__b2d>
 c00e060:	8a000417 	ldw	r8,16(r17)
 c00e064:	99000417 	ldw	r4,16(r19)
 c00e068:	d9400117 	ldw	r5,4(sp)
 c00e06c:	2209c83a 	sub	r4,r4,r8
 c00e070:	2010917a 	slli	r8,r4,5
 c00e074:	d9000017 	ldw	r4,0(sp)
 c00e078:	2909c83a 	sub	r4,r5,r4
 c00e07c:	4109883a 	add	r4,r8,r4
 c00e080:	01000e0e 	bge	zero,r4,c00e0bc <__ratio+0x98>
 c00e084:	2008953a 	slli	r4,r4,20
 c00e088:	2421883a 	add	r16,r4,r16
 c00e08c:	100d883a 	mov	r6,r2
 c00e090:	180f883a 	mov	r7,r3
 c00e094:	9009883a 	mov	r4,r18
 c00e098:	800b883a 	mov	r5,r16
 c00e09c:	c01355c0 	call	c01355c <__divdf3>
 c00e0a0:	dfc00617 	ldw	ra,24(sp)
 c00e0a4:	dcc00517 	ldw	r19,20(sp)
 c00e0a8:	dc800417 	ldw	r18,16(sp)
 c00e0ac:	dc400317 	ldw	r17,12(sp)
 c00e0b0:	dc000217 	ldw	r16,8(sp)
 c00e0b4:	dec00704 	addi	sp,sp,28
 c00e0b8:	f800283a 	ret
 c00e0bc:	2008953a 	slli	r4,r4,20
 c00e0c0:	1907c83a 	sub	r3,r3,r4
 c00e0c4:	003ff106 	br	c00e08c <__alt_data_end+0xfc00e08c>

0c00e0c8 <_mprec_log10>:
 c00e0c8:	defffe04 	addi	sp,sp,-8
 c00e0cc:	dc000015 	stw	r16,0(sp)
 c00e0d0:	dfc00115 	stw	ra,4(sp)
 c00e0d4:	008005c4 	movi	r2,23
 c00e0d8:	2021883a 	mov	r16,r4
 c00e0dc:	11000d0e 	bge	r2,r4,c00e114 <_mprec_log10+0x4c>
 c00e0e0:	0005883a 	mov	r2,zero
 c00e0e4:	00cffc34 	movhi	r3,16368
 c00e0e8:	843fffc4 	addi	r16,r16,-1
 c00e0ec:	000d883a 	mov	r6,zero
 c00e0f0:	01d00934 	movhi	r7,16420
 c00e0f4:	1009883a 	mov	r4,r2
 c00e0f8:	180b883a 	mov	r5,r3
 c00e0fc:	c0141840 	call	c014184 <__muldf3>
 c00e100:	803ff91e 	bne	r16,zero,c00e0e8 <__alt_data_end+0xfc00e0e8>
 c00e104:	dfc00117 	ldw	ra,4(sp)
 c00e108:	dc000017 	ldw	r16,0(sp)
 c00e10c:	dec00204 	addi	sp,sp,8
 c00e110:	f800283a 	ret
 c00e114:	202090fa 	slli	r16,r4,3
 c00e118:	008300b4 	movhi	r2,3074
 c00e11c:	10a2bd04 	addi	r2,r2,-29964
 c00e120:	1421883a 	add	r16,r2,r16
 c00e124:	80800017 	ldw	r2,0(r16)
 c00e128:	80c00117 	ldw	r3,4(r16)
 c00e12c:	dfc00117 	ldw	ra,4(sp)
 c00e130:	dc000017 	ldw	r16,0(sp)
 c00e134:	dec00204 	addi	sp,sp,8
 c00e138:	f800283a 	ret

0c00e13c <__copybits>:
 c00e13c:	297fffc4 	addi	r5,r5,-1
 c00e140:	280fd17a 	srai	r7,r5,5
 c00e144:	30c00417 	ldw	r3,16(r6)
 c00e148:	30800504 	addi	r2,r6,20
 c00e14c:	39c00044 	addi	r7,r7,1
 c00e150:	18c7883a 	add	r3,r3,r3
 c00e154:	39cf883a 	add	r7,r7,r7
 c00e158:	18c7883a 	add	r3,r3,r3
 c00e15c:	39cf883a 	add	r7,r7,r7
 c00e160:	10c7883a 	add	r3,r2,r3
 c00e164:	21cf883a 	add	r7,r4,r7
 c00e168:	10c00d2e 	bgeu	r2,r3,c00e1a0 <__copybits+0x64>
 c00e16c:	200b883a 	mov	r5,r4
 c00e170:	12000017 	ldw	r8,0(r2)
 c00e174:	29400104 	addi	r5,r5,4
 c00e178:	10800104 	addi	r2,r2,4
 c00e17c:	2a3fff15 	stw	r8,-4(r5)
 c00e180:	10fffb36 	bltu	r2,r3,c00e170 <__alt_data_end+0xfc00e170>
 c00e184:	1985c83a 	sub	r2,r3,r6
 c00e188:	10bffac4 	addi	r2,r2,-21
 c00e18c:	1004d0ba 	srli	r2,r2,2
 c00e190:	10800044 	addi	r2,r2,1
 c00e194:	1085883a 	add	r2,r2,r2
 c00e198:	1085883a 	add	r2,r2,r2
 c00e19c:	2089883a 	add	r4,r4,r2
 c00e1a0:	21c0032e 	bgeu	r4,r7,c00e1b0 <__copybits+0x74>
 c00e1a4:	20000015 	stw	zero,0(r4)
 c00e1a8:	21000104 	addi	r4,r4,4
 c00e1ac:	21fffd36 	bltu	r4,r7,c00e1a4 <__alt_data_end+0xfc00e1a4>
 c00e1b0:	f800283a 	ret

0c00e1b4 <__any_on>:
 c00e1b4:	20c00417 	ldw	r3,16(r4)
 c00e1b8:	2805d17a 	srai	r2,r5,5
 c00e1bc:	21000504 	addi	r4,r4,20
 c00e1c0:	18800d0e 	bge	r3,r2,c00e1f8 <__any_on+0x44>
 c00e1c4:	18c7883a 	add	r3,r3,r3
 c00e1c8:	18c7883a 	add	r3,r3,r3
 c00e1cc:	20c7883a 	add	r3,r4,r3
 c00e1d0:	20c0192e 	bgeu	r4,r3,c00e238 <__any_on+0x84>
 c00e1d4:	18bfff17 	ldw	r2,-4(r3)
 c00e1d8:	18ffff04 	addi	r3,r3,-4
 c00e1dc:	1000041e 	bne	r2,zero,c00e1f0 <__any_on+0x3c>
 c00e1e0:	20c0142e 	bgeu	r4,r3,c00e234 <__any_on+0x80>
 c00e1e4:	18ffff04 	addi	r3,r3,-4
 c00e1e8:	19400017 	ldw	r5,0(r3)
 c00e1ec:	283ffc26 	beq	r5,zero,c00e1e0 <__alt_data_end+0xfc00e1e0>
 c00e1f0:	00800044 	movi	r2,1
 c00e1f4:	f800283a 	ret
 c00e1f8:	10c00a0e 	bge	r2,r3,c00e224 <__any_on+0x70>
 c00e1fc:	1085883a 	add	r2,r2,r2
 c00e200:	1085883a 	add	r2,r2,r2
 c00e204:	294007cc 	andi	r5,r5,31
 c00e208:	2087883a 	add	r3,r4,r2
 c00e20c:	283ff026 	beq	r5,zero,c00e1d0 <__alt_data_end+0xfc00e1d0>
 c00e210:	19800017 	ldw	r6,0(r3)
 c00e214:	3144d83a 	srl	r2,r6,r5
 c00e218:	114a983a 	sll	r5,r2,r5
 c00e21c:	317ff41e 	bne	r6,r5,c00e1f0 <__alt_data_end+0xfc00e1f0>
 c00e220:	003feb06 	br	c00e1d0 <__alt_data_end+0xfc00e1d0>
 c00e224:	1085883a 	add	r2,r2,r2
 c00e228:	1085883a 	add	r2,r2,r2
 c00e22c:	2087883a 	add	r3,r4,r2
 c00e230:	003fe706 	br	c00e1d0 <__alt_data_end+0xfc00e1d0>
 c00e234:	f800283a 	ret
 c00e238:	0005883a 	mov	r2,zero
 c00e23c:	f800283a 	ret

0c00e240 <_realloc_r>:
 c00e240:	defff604 	addi	sp,sp,-40
 c00e244:	dc800215 	stw	r18,8(sp)
 c00e248:	dfc00915 	stw	ra,36(sp)
 c00e24c:	df000815 	stw	fp,32(sp)
 c00e250:	ddc00715 	stw	r23,28(sp)
 c00e254:	dd800615 	stw	r22,24(sp)
 c00e258:	dd400515 	stw	r21,20(sp)
 c00e25c:	dd000415 	stw	r20,16(sp)
 c00e260:	dcc00315 	stw	r19,12(sp)
 c00e264:	dc400115 	stw	r17,4(sp)
 c00e268:	dc000015 	stw	r16,0(sp)
 c00e26c:	3025883a 	mov	r18,r6
 c00e270:	2800b726 	beq	r5,zero,c00e550 <_realloc_r+0x310>
 c00e274:	282b883a 	mov	r21,r5
 c00e278:	2029883a 	mov	r20,r4
 c00e27c:	c015ce40 	call	c015ce4 <__malloc_lock>
 c00e280:	a8bfff17 	ldw	r2,-4(r21)
 c00e284:	043fff04 	movi	r16,-4
 c00e288:	90c002c4 	addi	r3,r18,11
 c00e28c:	01000584 	movi	r4,22
 c00e290:	acfffe04 	addi	r19,r21,-8
 c00e294:	1420703a 	and	r16,r2,r16
 c00e298:	20c0332e 	bgeu	r4,r3,c00e368 <_realloc_r+0x128>
 c00e29c:	047ffe04 	movi	r17,-8
 c00e2a0:	1c62703a 	and	r17,r3,r17
 c00e2a4:	8807883a 	mov	r3,r17
 c00e2a8:	88005816 	blt	r17,zero,c00e40c <_realloc_r+0x1cc>
 c00e2ac:	8c805736 	bltu	r17,r18,c00e40c <_realloc_r+0x1cc>
 c00e2b0:	80c0300e 	bge	r16,r3,c00e374 <_realloc_r+0x134>
 c00e2b4:	070300b4 	movhi	fp,3074
 c00e2b8:	e7241004 	addi	fp,fp,-28608
 c00e2bc:	e1c00217 	ldw	r7,8(fp)
 c00e2c0:	9c09883a 	add	r4,r19,r16
 c00e2c4:	22000117 	ldw	r8,4(r4)
 c00e2c8:	21c06326 	beq	r4,r7,c00e458 <_realloc_r+0x218>
 c00e2cc:	017fff84 	movi	r5,-2
 c00e2d0:	414a703a 	and	r5,r8,r5
 c00e2d4:	214b883a 	add	r5,r4,r5
 c00e2d8:	29800117 	ldw	r6,4(r5)
 c00e2dc:	3180004c 	andi	r6,r6,1
 c00e2e0:	30003f26 	beq	r6,zero,c00e3e0 <_realloc_r+0x1a0>
 c00e2e4:	1080004c 	andi	r2,r2,1
 c00e2e8:	10008326 	beq	r2,zero,c00e4f8 <_realloc_r+0x2b8>
 c00e2ec:	900b883a 	mov	r5,r18
 c00e2f0:	a009883a 	mov	r4,r20
 c00e2f4:	c004ccc0 	call	c004ccc <_malloc_r>
 c00e2f8:	1025883a 	mov	r18,r2
 c00e2fc:	10011e26 	beq	r2,zero,c00e778 <_realloc_r+0x538>
 c00e300:	a93fff17 	ldw	r4,-4(r21)
 c00e304:	10fffe04 	addi	r3,r2,-8
 c00e308:	00bfff84 	movi	r2,-2
 c00e30c:	2084703a 	and	r2,r4,r2
 c00e310:	9885883a 	add	r2,r19,r2
 c00e314:	1880ee26 	beq	r3,r2,c00e6d0 <_realloc_r+0x490>
 c00e318:	81bfff04 	addi	r6,r16,-4
 c00e31c:	00800904 	movi	r2,36
 c00e320:	1180b836 	bltu	r2,r6,c00e604 <_realloc_r+0x3c4>
 c00e324:	00c004c4 	movi	r3,19
 c00e328:	19809636 	bltu	r3,r6,c00e584 <_realloc_r+0x344>
 c00e32c:	9005883a 	mov	r2,r18
 c00e330:	a807883a 	mov	r3,r21
 c00e334:	19000017 	ldw	r4,0(r3)
 c00e338:	11000015 	stw	r4,0(r2)
 c00e33c:	19000117 	ldw	r4,4(r3)
 c00e340:	11000115 	stw	r4,4(r2)
 c00e344:	18c00217 	ldw	r3,8(r3)
 c00e348:	10c00215 	stw	r3,8(r2)
 c00e34c:	a80b883a 	mov	r5,r21
 c00e350:	a009883a 	mov	r4,r20
 c00e354:	c00c1cc0 	call	c00c1cc <_free_r>
 c00e358:	a009883a 	mov	r4,r20
 c00e35c:	c015d080 	call	c015d08 <__malloc_unlock>
 c00e360:	9005883a 	mov	r2,r18
 c00e364:	00001206 	br	c00e3b0 <_realloc_r+0x170>
 c00e368:	00c00404 	movi	r3,16
 c00e36c:	1823883a 	mov	r17,r3
 c00e370:	003fce06 	br	c00e2ac <__alt_data_end+0xfc00e2ac>
 c00e374:	a825883a 	mov	r18,r21
 c00e378:	8445c83a 	sub	r2,r16,r17
 c00e37c:	00c003c4 	movi	r3,15
 c00e380:	18802636 	bltu	r3,r2,c00e41c <_realloc_r+0x1dc>
 c00e384:	99800117 	ldw	r6,4(r19)
 c00e388:	9c07883a 	add	r3,r19,r16
 c00e38c:	3180004c 	andi	r6,r6,1
 c00e390:	3420b03a 	or	r16,r6,r16
 c00e394:	9c000115 	stw	r16,4(r19)
 c00e398:	18800117 	ldw	r2,4(r3)
 c00e39c:	10800054 	ori	r2,r2,1
 c00e3a0:	18800115 	stw	r2,4(r3)
 c00e3a4:	a009883a 	mov	r4,r20
 c00e3a8:	c015d080 	call	c015d08 <__malloc_unlock>
 c00e3ac:	9005883a 	mov	r2,r18
 c00e3b0:	dfc00917 	ldw	ra,36(sp)
 c00e3b4:	df000817 	ldw	fp,32(sp)
 c00e3b8:	ddc00717 	ldw	r23,28(sp)
 c00e3bc:	dd800617 	ldw	r22,24(sp)
 c00e3c0:	dd400517 	ldw	r21,20(sp)
 c00e3c4:	dd000417 	ldw	r20,16(sp)
 c00e3c8:	dcc00317 	ldw	r19,12(sp)
 c00e3cc:	dc800217 	ldw	r18,8(sp)
 c00e3d0:	dc400117 	ldw	r17,4(sp)
 c00e3d4:	dc000017 	ldw	r16,0(sp)
 c00e3d8:	dec00a04 	addi	sp,sp,40
 c00e3dc:	f800283a 	ret
 c00e3e0:	017fff04 	movi	r5,-4
 c00e3e4:	414a703a 	and	r5,r8,r5
 c00e3e8:	814d883a 	add	r6,r16,r5
 c00e3ec:	30c01f16 	blt	r6,r3,c00e46c <_realloc_r+0x22c>
 c00e3f0:	20800317 	ldw	r2,12(r4)
 c00e3f4:	20c00217 	ldw	r3,8(r4)
 c00e3f8:	a825883a 	mov	r18,r21
 c00e3fc:	3021883a 	mov	r16,r6
 c00e400:	18800315 	stw	r2,12(r3)
 c00e404:	10c00215 	stw	r3,8(r2)
 c00e408:	003fdb06 	br	c00e378 <__alt_data_end+0xfc00e378>
 c00e40c:	00800304 	movi	r2,12
 c00e410:	a0800015 	stw	r2,0(r20)
 c00e414:	0005883a 	mov	r2,zero
 c00e418:	003fe506 	br	c00e3b0 <__alt_data_end+0xfc00e3b0>
 c00e41c:	98c00117 	ldw	r3,4(r19)
 c00e420:	9c4b883a 	add	r5,r19,r17
 c00e424:	11000054 	ori	r4,r2,1
 c00e428:	18c0004c 	andi	r3,r3,1
 c00e42c:	1c62b03a 	or	r17,r3,r17
 c00e430:	9c400115 	stw	r17,4(r19)
 c00e434:	29000115 	stw	r4,4(r5)
 c00e438:	2885883a 	add	r2,r5,r2
 c00e43c:	10c00117 	ldw	r3,4(r2)
 c00e440:	29400204 	addi	r5,r5,8
 c00e444:	a009883a 	mov	r4,r20
 c00e448:	18c00054 	ori	r3,r3,1
 c00e44c:	10c00115 	stw	r3,4(r2)
 c00e450:	c00c1cc0 	call	c00c1cc <_free_r>
 c00e454:	003fd306 	br	c00e3a4 <__alt_data_end+0xfc00e3a4>
 c00e458:	017fff04 	movi	r5,-4
 c00e45c:	414a703a 	and	r5,r8,r5
 c00e460:	89800404 	addi	r6,r17,16
 c00e464:	8151883a 	add	r8,r16,r5
 c00e468:	4180590e 	bge	r8,r6,c00e5d0 <_realloc_r+0x390>
 c00e46c:	1080004c 	andi	r2,r2,1
 c00e470:	103f9e1e 	bne	r2,zero,c00e2ec <__alt_data_end+0xfc00e2ec>
 c00e474:	adbffe17 	ldw	r22,-8(r21)
 c00e478:	00bfff04 	movi	r2,-4
 c00e47c:	9dadc83a 	sub	r22,r19,r22
 c00e480:	b1800117 	ldw	r6,4(r22)
 c00e484:	3084703a 	and	r2,r6,r2
 c00e488:	20002026 	beq	r4,zero,c00e50c <_realloc_r+0x2cc>
 c00e48c:	80af883a 	add	r23,r16,r2
 c00e490:	b96f883a 	add	r23,r23,r5
 c00e494:	21c05f26 	beq	r4,r7,c00e614 <_realloc_r+0x3d4>
 c00e498:	b8c01c16 	blt	r23,r3,c00e50c <_realloc_r+0x2cc>
 c00e49c:	20800317 	ldw	r2,12(r4)
 c00e4a0:	20c00217 	ldw	r3,8(r4)
 c00e4a4:	81bfff04 	addi	r6,r16,-4
 c00e4a8:	01000904 	movi	r4,36
 c00e4ac:	18800315 	stw	r2,12(r3)
 c00e4b0:	10c00215 	stw	r3,8(r2)
 c00e4b4:	b0c00217 	ldw	r3,8(r22)
 c00e4b8:	b0800317 	ldw	r2,12(r22)
 c00e4bc:	b4800204 	addi	r18,r22,8
 c00e4c0:	18800315 	stw	r2,12(r3)
 c00e4c4:	10c00215 	stw	r3,8(r2)
 c00e4c8:	21801b36 	bltu	r4,r6,c00e538 <_realloc_r+0x2f8>
 c00e4cc:	008004c4 	movi	r2,19
 c00e4d0:	1180352e 	bgeu	r2,r6,c00e5a8 <_realloc_r+0x368>
 c00e4d4:	a8800017 	ldw	r2,0(r21)
 c00e4d8:	b0800215 	stw	r2,8(r22)
 c00e4dc:	a8800117 	ldw	r2,4(r21)
 c00e4e0:	b0800315 	stw	r2,12(r22)
 c00e4e4:	008006c4 	movi	r2,27
 c00e4e8:	11807f36 	bltu	r2,r6,c00e6e8 <_realloc_r+0x4a8>
 c00e4ec:	b0800404 	addi	r2,r22,16
 c00e4f0:	ad400204 	addi	r21,r21,8
 c00e4f4:	00002d06 	br	c00e5ac <_realloc_r+0x36c>
 c00e4f8:	adbffe17 	ldw	r22,-8(r21)
 c00e4fc:	00bfff04 	movi	r2,-4
 c00e500:	9dadc83a 	sub	r22,r19,r22
 c00e504:	b1000117 	ldw	r4,4(r22)
 c00e508:	2084703a 	and	r2,r4,r2
 c00e50c:	b03f7726 	beq	r22,zero,c00e2ec <__alt_data_end+0xfc00e2ec>
 c00e510:	80af883a 	add	r23,r16,r2
 c00e514:	b8ff7516 	blt	r23,r3,c00e2ec <__alt_data_end+0xfc00e2ec>
 c00e518:	b0800317 	ldw	r2,12(r22)
 c00e51c:	b0c00217 	ldw	r3,8(r22)
 c00e520:	81bfff04 	addi	r6,r16,-4
 c00e524:	01000904 	movi	r4,36
 c00e528:	18800315 	stw	r2,12(r3)
 c00e52c:	10c00215 	stw	r3,8(r2)
 c00e530:	b4800204 	addi	r18,r22,8
 c00e534:	21bfe52e 	bgeu	r4,r6,c00e4cc <__alt_data_end+0xfc00e4cc>
 c00e538:	a80b883a 	mov	r5,r21
 c00e53c:	9009883a 	mov	r4,r18
 c00e540:	c00cf040 	call	c00cf04 <memmove>
 c00e544:	b821883a 	mov	r16,r23
 c00e548:	b027883a 	mov	r19,r22
 c00e54c:	003f8a06 	br	c00e378 <__alt_data_end+0xfc00e378>
 c00e550:	300b883a 	mov	r5,r6
 c00e554:	dfc00917 	ldw	ra,36(sp)
 c00e558:	df000817 	ldw	fp,32(sp)
 c00e55c:	ddc00717 	ldw	r23,28(sp)
 c00e560:	dd800617 	ldw	r22,24(sp)
 c00e564:	dd400517 	ldw	r21,20(sp)
 c00e568:	dd000417 	ldw	r20,16(sp)
 c00e56c:	dcc00317 	ldw	r19,12(sp)
 c00e570:	dc800217 	ldw	r18,8(sp)
 c00e574:	dc400117 	ldw	r17,4(sp)
 c00e578:	dc000017 	ldw	r16,0(sp)
 c00e57c:	dec00a04 	addi	sp,sp,40
 c00e580:	c004ccc1 	jmpi	c004ccc <_malloc_r>
 c00e584:	a8c00017 	ldw	r3,0(r21)
 c00e588:	90c00015 	stw	r3,0(r18)
 c00e58c:	a8c00117 	ldw	r3,4(r21)
 c00e590:	90c00115 	stw	r3,4(r18)
 c00e594:	00c006c4 	movi	r3,27
 c00e598:	19804536 	bltu	r3,r6,c00e6b0 <_realloc_r+0x470>
 c00e59c:	90800204 	addi	r2,r18,8
 c00e5a0:	a8c00204 	addi	r3,r21,8
 c00e5a4:	003f6306 	br	c00e334 <__alt_data_end+0xfc00e334>
 c00e5a8:	9005883a 	mov	r2,r18
 c00e5ac:	a8c00017 	ldw	r3,0(r21)
 c00e5b0:	b821883a 	mov	r16,r23
 c00e5b4:	b027883a 	mov	r19,r22
 c00e5b8:	10c00015 	stw	r3,0(r2)
 c00e5bc:	a8c00117 	ldw	r3,4(r21)
 c00e5c0:	10c00115 	stw	r3,4(r2)
 c00e5c4:	a8c00217 	ldw	r3,8(r21)
 c00e5c8:	10c00215 	stw	r3,8(r2)
 c00e5cc:	003f6a06 	br	c00e378 <__alt_data_end+0xfc00e378>
 c00e5d0:	9c67883a 	add	r19,r19,r17
 c00e5d4:	4445c83a 	sub	r2,r8,r17
 c00e5d8:	e4c00215 	stw	r19,8(fp)
 c00e5dc:	10800054 	ori	r2,r2,1
 c00e5e0:	98800115 	stw	r2,4(r19)
 c00e5e4:	a8bfff17 	ldw	r2,-4(r21)
 c00e5e8:	a009883a 	mov	r4,r20
 c00e5ec:	1080004c 	andi	r2,r2,1
 c00e5f0:	1462b03a 	or	r17,r2,r17
 c00e5f4:	ac7fff15 	stw	r17,-4(r21)
 c00e5f8:	c015d080 	call	c015d08 <__malloc_unlock>
 c00e5fc:	a805883a 	mov	r2,r21
 c00e600:	003f6b06 	br	c00e3b0 <__alt_data_end+0xfc00e3b0>
 c00e604:	a80b883a 	mov	r5,r21
 c00e608:	9009883a 	mov	r4,r18
 c00e60c:	c00cf040 	call	c00cf04 <memmove>
 c00e610:	003f4e06 	br	c00e34c <__alt_data_end+0xfc00e34c>
 c00e614:	89000404 	addi	r4,r17,16
 c00e618:	b93fbc16 	blt	r23,r4,c00e50c <__alt_data_end+0xfc00e50c>
 c00e61c:	b0800317 	ldw	r2,12(r22)
 c00e620:	b0c00217 	ldw	r3,8(r22)
 c00e624:	81bfff04 	addi	r6,r16,-4
 c00e628:	01000904 	movi	r4,36
 c00e62c:	18800315 	stw	r2,12(r3)
 c00e630:	10c00215 	stw	r3,8(r2)
 c00e634:	b4800204 	addi	r18,r22,8
 c00e638:	21804336 	bltu	r4,r6,c00e748 <_realloc_r+0x508>
 c00e63c:	008004c4 	movi	r2,19
 c00e640:	11803f2e 	bgeu	r2,r6,c00e740 <_realloc_r+0x500>
 c00e644:	a8800017 	ldw	r2,0(r21)
 c00e648:	b0800215 	stw	r2,8(r22)
 c00e64c:	a8800117 	ldw	r2,4(r21)
 c00e650:	b0800315 	stw	r2,12(r22)
 c00e654:	008006c4 	movi	r2,27
 c00e658:	11803f36 	bltu	r2,r6,c00e758 <_realloc_r+0x518>
 c00e65c:	b0800404 	addi	r2,r22,16
 c00e660:	ad400204 	addi	r21,r21,8
 c00e664:	a8c00017 	ldw	r3,0(r21)
 c00e668:	10c00015 	stw	r3,0(r2)
 c00e66c:	a8c00117 	ldw	r3,4(r21)
 c00e670:	10c00115 	stw	r3,4(r2)
 c00e674:	a8c00217 	ldw	r3,8(r21)
 c00e678:	10c00215 	stw	r3,8(r2)
 c00e67c:	b447883a 	add	r3,r22,r17
 c00e680:	bc45c83a 	sub	r2,r23,r17
 c00e684:	e0c00215 	stw	r3,8(fp)
 c00e688:	10800054 	ori	r2,r2,1
 c00e68c:	18800115 	stw	r2,4(r3)
 c00e690:	b0800117 	ldw	r2,4(r22)
 c00e694:	a009883a 	mov	r4,r20
 c00e698:	1080004c 	andi	r2,r2,1
 c00e69c:	1462b03a 	or	r17,r2,r17
 c00e6a0:	b4400115 	stw	r17,4(r22)
 c00e6a4:	c015d080 	call	c015d08 <__malloc_unlock>
 c00e6a8:	9005883a 	mov	r2,r18
 c00e6ac:	003f4006 	br	c00e3b0 <__alt_data_end+0xfc00e3b0>
 c00e6b0:	a8c00217 	ldw	r3,8(r21)
 c00e6b4:	90c00215 	stw	r3,8(r18)
 c00e6b8:	a8c00317 	ldw	r3,12(r21)
 c00e6bc:	90c00315 	stw	r3,12(r18)
 c00e6c0:	30801126 	beq	r6,r2,c00e708 <_realloc_r+0x4c8>
 c00e6c4:	90800404 	addi	r2,r18,16
 c00e6c8:	a8c00404 	addi	r3,r21,16
 c00e6cc:	003f1906 	br	c00e334 <__alt_data_end+0xfc00e334>
 c00e6d0:	90ffff17 	ldw	r3,-4(r18)
 c00e6d4:	00bfff04 	movi	r2,-4
 c00e6d8:	a825883a 	mov	r18,r21
 c00e6dc:	1884703a 	and	r2,r3,r2
 c00e6e0:	80a1883a 	add	r16,r16,r2
 c00e6e4:	003f2406 	br	c00e378 <__alt_data_end+0xfc00e378>
 c00e6e8:	a8800217 	ldw	r2,8(r21)
 c00e6ec:	b0800415 	stw	r2,16(r22)
 c00e6f0:	a8800317 	ldw	r2,12(r21)
 c00e6f4:	b0800515 	stw	r2,20(r22)
 c00e6f8:	31000a26 	beq	r6,r4,c00e724 <_realloc_r+0x4e4>
 c00e6fc:	b0800604 	addi	r2,r22,24
 c00e700:	ad400404 	addi	r21,r21,16
 c00e704:	003fa906 	br	c00e5ac <__alt_data_end+0xfc00e5ac>
 c00e708:	a9000417 	ldw	r4,16(r21)
 c00e70c:	90800604 	addi	r2,r18,24
 c00e710:	a8c00604 	addi	r3,r21,24
 c00e714:	91000415 	stw	r4,16(r18)
 c00e718:	a9000517 	ldw	r4,20(r21)
 c00e71c:	91000515 	stw	r4,20(r18)
 c00e720:	003f0406 	br	c00e334 <__alt_data_end+0xfc00e334>
 c00e724:	a8c00417 	ldw	r3,16(r21)
 c00e728:	ad400604 	addi	r21,r21,24
 c00e72c:	b0800804 	addi	r2,r22,32
 c00e730:	b0c00615 	stw	r3,24(r22)
 c00e734:	a8ffff17 	ldw	r3,-4(r21)
 c00e738:	b0c00715 	stw	r3,28(r22)
 c00e73c:	003f9b06 	br	c00e5ac <__alt_data_end+0xfc00e5ac>
 c00e740:	9005883a 	mov	r2,r18
 c00e744:	003fc706 	br	c00e664 <__alt_data_end+0xfc00e664>
 c00e748:	a80b883a 	mov	r5,r21
 c00e74c:	9009883a 	mov	r4,r18
 c00e750:	c00cf040 	call	c00cf04 <memmove>
 c00e754:	003fc906 	br	c00e67c <__alt_data_end+0xfc00e67c>
 c00e758:	a8800217 	ldw	r2,8(r21)
 c00e75c:	b0800415 	stw	r2,16(r22)
 c00e760:	a8800317 	ldw	r2,12(r21)
 c00e764:	b0800515 	stw	r2,20(r22)
 c00e768:	31000726 	beq	r6,r4,c00e788 <_realloc_r+0x548>
 c00e76c:	b0800604 	addi	r2,r22,24
 c00e770:	ad400404 	addi	r21,r21,16
 c00e774:	003fbb06 	br	c00e664 <__alt_data_end+0xfc00e664>
 c00e778:	a009883a 	mov	r4,r20
 c00e77c:	c015d080 	call	c015d08 <__malloc_unlock>
 c00e780:	0005883a 	mov	r2,zero
 c00e784:	003f0a06 	br	c00e3b0 <__alt_data_end+0xfc00e3b0>
 c00e788:	a8c00417 	ldw	r3,16(r21)
 c00e78c:	ad400604 	addi	r21,r21,24
 c00e790:	b0800804 	addi	r2,r22,32
 c00e794:	b0c00615 	stw	r3,24(r22)
 c00e798:	a8ffff17 	ldw	r3,-4(r21)
 c00e79c:	b0c00715 	stw	r3,28(r22)
 c00e7a0:	003fb006 	br	c00e664 <__alt_data_end+0xfc00e664>

0c00e7a4 <__fpclassifyd>:
 c00e7a4:	00a00034 	movhi	r2,32768
 c00e7a8:	10bfffc4 	addi	r2,r2,-1
 c00e7ac:	2884703a 	and	r2,r5,r2
 c00e7b0:	10000726 	beq	r2,zero,c00e7d0 <__fpclassifyd+0x2c>
 c00e7b4:	00fffc34 	movhi	r3,65520
 c00e7b8:	019ff834 	movhi	r6,32736
 c00e7bc:	28c7883a 	add	r3,r5,r3
 c00e7c0:	31bfffc4 	addi	r6,r6,-1
 c00e7c4:	30c00536 	bltu	r6,r3,c00e7dc <__fpclassifyd+0x38>
 c00e7c8:	00800104 	movi	r2,4
 c00e7cc:	f800283a 	ret
 c00e7d0:	2000021e 	bne	r4,zero,c00e7dc <__fpclassifyd+0x38>
 c00e7d4:	00800084 	movi	r2,2
 c00e7d8:	f800283a 	ret
 c00e7dc:	00dffc34 	movhi	r3,32752
 c00e7e0:	019ff834 	movhi	r6,32736
 c00e7e4:	28cb883a 	add	r5,r5,r3
 c00e7e8:	31bfffc4 	addi	r6,r6,-1
 c00e7ec:	317ff62e 	bgeu	r6,r5,c00e7c8 <__alt_data_end+0xfc00e7c8>
 c00e7f0:	01400434 	movhi	r5,16
 c00e7f4:	297fffc4 	addi	r5,r5,-1
 c00e7f8:	28800236 	bltu	r5,r2,c00e804 <__fpclassifyd+0x60>
 c00e7fc:	008000c4 	movi	r2,3
 c00e800:	f800283a 	ret
 c00e804:	10c00226 	beq	r2,r3,c00e810 <__fpclassifyd+0x6c>
 c00e808:	0005883a 	mov	r2,zero
 c00e80c:	f800283a 	ret
 c00e810:	2005003a 	cmpeq	r2,r4,zero
 c00e814:	f800283a 	ret

0c00e818 <__sread>:
 c00e818:	defffe04 	addi	sp,sp,-8
 c00e81c:	dc000015 	stw	r16,0(sp)
 c00e820:	2821883a 	mov	r16,r5
 c00e824:	2940038f 	ldh	r5,14(r5)
 c00e828:	dfc00115 	stw	ra,4(sp)
 c00e82c:	c011c440 	call	c011c44 <_read_r>
 c00e830:	10000716 	blt	r2,zero,c00e850 <__sread+0x38>
 c00e834:	80c01417 	ldw	r3,80(r16)
 c00e838:	1887883a 	add	r3,r3,r2
 c00e83c:	80c01415 	stw	r3,80(r16)
 c00e840:	dfc00117 	ldw	ra,4(sp)
 c00e844:	dc000017 	ldw	r16,0(sp)
 c00e848:	dec00204 	addi	sp,sp,8
 c00e84c:	f800283a 	ret
 c00e850:	80c0030b 	ldhu	r3,12(r16)
 c00e854:	18fbffcc 	andi	r3,r3,61439
 c00e858:	80c0030d 	sth	r3,12(r16)
 c00e85c:	dfc00117 	ldw	ra,4(sp)
 c00e860:	dc000017 	ldw	r16,0(sp)
 c00e864:	dec00204 	addi	sp,sp,8
 c00e868:	f800283a 	ret

0c00e86c <__seofread>:
 c00e86c:	0005883a 	mov	r2,zero
 c00e870:	f800283a 	ret

0c00e874 <__swrite>:
 c00e874:	2880030b 	ldhu	r2,12(r5)
 c00e878:	defffb04 	addi	sp,sp,-20
 c00e87c:	dcc00315 	stw	r19,12(sp)
 c00e880:	dc800215 	stw	r18,8(sp)
 c00e884:	dc400115 	stw	r17,4(sp)
 c00e888:	dc000015 	stw	r16,0(sp)
 c00e88c:	dfc00415 	stw	ra,16(sp)
 c00e890:	10c0400c 	andi	r3,r2,256
 c00e894:	2821883a 	mov	r16,r5
 c00e898:	2023883a 	mov	r17,r4
 c00e89c:	3025883a 	mov	r18,r6
 c00e8a0:	3827883a 	mov	r19,r7
 c00e8a4:	18000526 	beq	r3,zero,c00e8bc <__swrite+0x48>
 c00e8a8:	2940038f 	ldh	r5,14(r5)
 c00e8ac:	01c00084 	movi	r7,2
 c00e8b0:	000d883a 	mov	r6,zero
 c00e8b4:	c011be40 	call	c011be4 <_lseek_r>
 c00e8b8:	8080030b 	ldhu	r2,12(r16)
 c00e8bc:	8140038f 	ldh	r5,14(r16)
 c00e8c0:	10bbffcc 	andi	r2,r2,61439
 c00e8c4:	980f883a 	mov	r7,r19
 c00e8c8:	900d883a 	mov	r6,r18
 c00e8cc:	8809883a 	mov	r4,r17
 c00e8d0:	8080030d 	sth	r2,12(r16)
 c00e8d4:	dfc00417 	ldw	ra,16(sp)
 c00e8d8:	dcc00317 	ldw	r19,12(sp)
 c00e8dc:	dc800217 	ldw	r18,8(sp)
 c00e8e0:	dc400117 	ldw	r17,4(sp)
 c00e8e4:	dc000017 	ldw	r16,0(sp)
 c00e8e8:	dec00504 	addi	sp,sp,20
 c00e8ec:	c0116981 	jmpi	c011698 <_write_r>

0c00e8f0 <__sseek>:
 c00e8f0:	defffe04 	addi	sp,sp,-8
 c00e8f4:	dc000015 	stw	r16,0(sp)
 c00e8f8:	2821883a 	mov	r16,r5
 c00e8fc:	2940038f 	ldh	r5,14(r5)
 c00e900:	dfc00115 	stw	ra,4(sp)
 c00e904:	c011be40 	call	c011be4 <_lseek_r>
 c00e908:	00ffffc4 	movi	r3,-1
 c00e90c:	10c00826 	beq	r2,r3,c00e930 <__sseek+0x40>
 c00e910:	80c0030b 	ldhu	r3,12(r16)
 c00e914:	80801415 	stw	r2,80(r16)
 c00e918:	18c40014 	ori	r3,r3,4096
 c00e91c:	80c0030d 	sth	r3,12(r16)
 c00e920:	dfc00117 	ldw	ra,4(sp)
 c00e924:	dc000017 	ldw	r16,0(sp)
 c00e928:	dec00204 	addi	sp,sp,8
 c00e92c:	f800283a 	ret
 c00e930:	80c0030b 	ldhu	r3,12(r16)
 c00e934:	18fbffcc 	andi	r3,r3,61439
 c00e938:	80c0030d 	sth	r3,12(r16)
 c00e93c:	dfc00117 	ldw	ra,4(sp)
 c00e940:	dc000017 	ldw	r16,0(sp)
 c00e944:	dec00204 	addi	sp,sp,8
 c00e948:	f800283a 	ret

0c00e94c <__sclose>:
 c00e94c:	2940038f 	ldh	r5,14(r5)
 c00e950:	c0116f81 	jmpi	c0116f8 <_close_r>

0c00e954 <strcmp>:
 c00e954:	2144b03a 	or	r2,r4,r5
 c00e958:	108000cc 	andi	r2,r2,3
 c00e95c:	1000171e 	bne	r2,zero,c00e9bc <strcmp+0x68>
 c00e960:	20800017 	ldw	r2,0(r4)
 c00e964:	28c00017 	ldw	r3,0(r5)
 c00e968:	10c0141e 	bne	r2,r3,c00e9bc <strcmp+0x68>
 c00e96c:	027fbff4 	movhi	r9,65279
 c00e970:	4a7fbfc4 	addi	r9,r9,-257
 c00e974:	0086303a 	nor	r3,zero,r2
 c00e978:	02202074 	movhi	r8,32897
 c00e97c:	1245883a 	add	r2,r2,r9
 c00e980:	42202004 	addi	r8,r8,-32640
 c00e984:	10c4703a 	and	r2,r2,r3
 c00e988:	1204703a 	and	r2,r2,r8
 c00e98c:	10000226 	beq	r2,zero,c00e998 <strcmp+0x44>
 c00e990:	00002306 	br	c00ea20 <strcmp+0xcc>
 c00e994:	1000221e 	bne	r2,zero,c00ea20 <strcmp+0xcc>
 c00e998:	21000104 	addi	r4,r4,4
 c00e99c:	20c00017 	ldw	r3,0(r4)
 c00e9a0:	29400104 	addi	r5,r5,4
 c00e9a4:	29800017 	ldw	r6,0(r5)
 c00e9a8:	1a4f883a 	add	r7,r3,r9
 c00e9ac:	00c4303a 	nor	r2,zero,r3
 c00e9b0:	3884703a 	and	r2,r7,r2
 c00e9b4:	1204703a 	and	r2,r2,r8
 c00e9b8:	19bff626 	beq	r3,r6,c00e994 <__alt_data_end+0xfc00e994>
 c00e9bc:	20800003 	ldbu	r2,0(r4)
 c00e9c0:	10c03fcc 	andi	r3,r2,255
 c00e9c4:	18c0201c 	xori	r3,r3,128
 c00e9c8:	18ffe004 	addi	r3,r3,-128
 c00e9cc:	18000c26 	beq	r3,zero,c00ea00 <strcmp+0xac>
 c00e9d0:	29800007 	ldb	r6,0(r5)
 c00e9d4:	19800326 	beq	r3,r6,c00e9e4 <strcmp+0x90>
 c00e9d8:	00001306 	br	c00ea28 <strcmp+0xd4>
 c00e9dc:	29800007 	ldb	r6,0(r5)
 c00e9e0:	11800b1e 	bne	r2,r6,c00ea10 <strcmp+0xbc>
 c00e9e4:	21000044 	addi	r4,r4,1
 c00e9e8:	20c00003 	ldbu	r3,0(r4)
 c00e9ec:	29400044 	addi	r5,r5,1
 c00e9f0:	18803fcc 	andi	r2,r3,255
 c00e9f4:	1080201c 	xori	r2,r2,128
 c00e9f8:	10bfe004 	addi	r2,r2,-128
 c00e9fc:	103ff71e 	bne	r2,zero,c00e9dc <__alt_data_end+0xfc00e9dc>
 c00ea00:	0007883a 	mov	r3,zero
 c00ea04:	28800003 	ldbu	r2,0(r5)
 c00ea08:	1885c83a 	sub	r2,r3,r2
 c00ea0c:	f800283a 	ret
 c00ea10:	28800003 	ldbu	r2,0(r5)
 c00ea14:	18c03fcc 	andi	r3,r3,255
 c00ea18:	1885c83a 	sub	r2,r3,r2
 c00ea1c:	f800283a 	ret
 c00ea20:	0005883a 	mov	r2,zero
 c00ea24:	f800283a 	ret
 c00ea28:	10c03fcc 	andi	r3,r2,255
 c00ea2c:	003ff506 	br	c00ea04 <__alt_data_end+0xfc00ea04>

0c00ea30 <__ssprint_r>:
 c00ea30:	30800217 	ldw	r2,8(r6)
 c00ea34:	defff604 	addi	sp,sp,-40
 c00ea38:	dc800215 	stw	r18,8(sp)
 c00ea3c:	dfc00915 	stw	ra,36(sp)
 c00ea40:	df000815 	stw	fp,32(sp)
 c00ea44:	ddc00715 	stw	r23,28(sp)
 c00ea48:	dd800615 	stw	r22,24(sp)
 c00ea4c:	dd400515 	stw	r21,20(sp)
 c00ea50:	dd000415 	stw	r20,16(sp)
 c00ea54:	dcc00315 	stw	r19,12(sp)
 c00ea58:	dc400115 	stw	r17,4(sp)
 c00ea5c:	dc000015 	stw	r16,0(sp)
 c00ea60:	3025883a 	mov	r18,r6
 c00ea64:	10005826 	beq	r2,zero,c00ebc8 <__ssprint_r+0x198>
 c00ea68:	2027883a 	mov	r19,r4
 c00ea6c:	35c00017 	ldw	r23,0(r6)
 c00ea70:	29000017 	ldw	r4,0(r5)
 c00ea74:	28800217 	ldw	r2,8(r5)
 c00ea78:	2823883a 	mov	r17,r5
 c00ea7c:	0039883a 	mov	fp,zero
 c00ea80:	0021883a 	mov	r16,zero
 c00ea84:	80003926 	beq	r16,zero,c00eb6c <__ssprint_r+0x13c>
 c00ea88:	102b883a 	mov	r21,r2
 c00ea8c:	102d883a 	mov	r22,r2
 c00ea90:	80803a36 	bltu	r16,r2,c00eb7c <__ssprint_r+0x14c>
 c00ea94:	88c0030b 	ldhu	r3,12(r17)
 c00ea98:	1881200c 	andi	r2,r3,1152
 c00ea9c:	10002626 	beq	r2,zero,c00eb38 <__ssprint_r+0x108>
 c00eaa0:	88800517 	ldw	r2,20(r17)
 c00eaa4:	89400417 	ldw	r5,16(r17)
 c00eaa8:	81800044 	addi	r6,r16,1
 c00eaac:	108f883a 	add	r7,r2,r2
 c00eab0:	3885883a 	add	r2,r7,r2
 c00eab4:	100ed7fa 	srli	r7,r2,31
 c00eab8:	216dc83a 	sub	r22,r4,r5
 c00eabc:	3589883a 	add	r4,r6,r22
 c00eac0:	3885883a 	add	r2,r7,r2
 c00eac4:	102bd07a 	srai	r21,r2,1
 c00eac8:	a80d883a 	mov	r6,r21
 c00eacc:	a900022e 	bgeu	r21,r4,c00ead8 <__ssprint_r+0xa8>
 c00ead0:	202b883a 	mov	r21,r4
 c00ead4:	200d883a 	mov	r6,r4
 c00ead8:	18c1000c 	andi	r3,r3,1024
 c00eadc:	18002a26 	beq	r3,zero,c00eb88 <__ssprint_r+0x158>
 c00eae0:	300b883a 	mov	r5,r6
 c00eae4:	9809883a 	mov	r4,r19
 c00eae8:	c004ccc0 	call	c004ccc <_malloc_r>
 c00eaec:	1029883a 	mov	r20,r2
 c00eaf0:	10002c26 	beq	r2,zero,c00eba4 <__ssprint_r+0x174>
 c00eaf4:	89400417 	ldw	r5,16(r17)
 c00eaf8:	b00d883a 	mov	r6,r22
 c00eafc:	1009883a 	mov	r4,r2
 c00eb00:	c0054d80 	call	c0054d8 <memcpy>
 c00eb04:	8880030b 	ldhu	r2,12(r17)
 c00eb08:	00fedfc4 	movi	r3,-1153
 c00eb0c:	10c4703a 	and	r2,r2,r3
 c00eb10:	10802014 	ori	r2,r2,128
 c00eb14:	8880030d 	sth	r2,12(r17)
 c00eb18:	a589883a 	add	r4,r20,r22
 c00eb1c:	adadc83a 	sub	r22,r21,r22
 c00eb20:	8d400515 	stw	r21,20(r17)
 c00eb24:	8d800215 	stw	r22,8(r17)
 c00eb28:	8d000415 	stw	r20,16(r17)
 c00eb2c:	89000015 	stw	r4,0(r17)
 c00eb30:	802b883a 	mov	r21,r16
 c00eb34:	802d883a 	mov	r22,r16
 c00eb38:	b00d883a 	mov	r6,r22
 c00eb3c:	e00b883a 	mov	r5,fp
 c00eb40:	c00cf040 	call	c00cf04 <memmove>
 c00eb44:	88800217 	ldw	r2,8(r17)
 c00eb48:	89000017 	ldw	r4,0(r17)
 c00eb4c:	90c00217 	ldw	r3,8(r18)
 c00eb50:	1545c83a 	sub	r2,r2,r21
 c00eb54:	2589883a 	add	r4,r4,r22
 c00eb58:	88800215 	stw	r2,8(r17)
 c00eb5c:	89000015 	stw	r4,0(r17)
 c00eb60:	1c21c83a 	sub	r16,r3,r16
 c00eb64:	94000215 	stw	r16,8(r18)
 c00eb68:	80001726 	beq	r16,zero,c00ebc8 <__ssprint_r+0x198>
 c00eb6c:	bf000017 	ldw	fp,0(r23)
 c00eb70:	bc000117 	ldw	r16,4(r23)
 c00eb74:	bdc00204 	addi	r23,r23,8
 c00eb78:	003fc206 	br	c00ea84 <__alt_data_end+0xfc00ea84>
 c00eb7c:	802b883a 	mov	r21,r16
 c00eb80:	802d883a 	mov	r22,r16
 c00eb84:	003fec06 	br	c00eb38 <__alt_data_end+0xfc00eb38>
 c00eb88:	9809883a 	mov	r4,r19
 c00eb8c:	c00e2400 	call	c00e240 <_realloc_r>
 c00eb90:	1029883a 	mov	r20,r2
 c00eb94:	103fe01e 	bne	r2,zero,c00eb18 <__alt_data_end+0xfc00eb18>
 c00eb98:	89400417 	ldw	r5,16(r17)
 c00eb9c:	9809883a 	mov	r4,r19
 c00eba0:	c00c1cc0 	call	c00c1cc <_free_r>
 c00eba4:	88c0030b 	ldhu	r3,12(r17)
 c00eba8:	00800304 	movi	r2,12
 c00ebac:	98800015 	stw	r2,0(r19)
 c00ebb0:	18c01014 	ori	r3,r3,64
 c00ebb4:	88c0030d 	sth	r3,12(r17)
 c00ebb8:	00bfffc4 	movi	r2,-1
 c00ebbc:	90000215 	stw	zero,8(r18)
 c00ebc0:	90000115 	stw	zero,4(r18)
 c00ebc4:	00000206 	br	c00ebd0 <__ssprint_r+0x1a0>
 c00ebc8:	90000115 	stw	zero,4(r18)
 c00ebcc:	0005883a 	mov	r2,zero
 c00ebd0:	dfc00917 	ldw	ra,36(sp)
 c00ebd4:	df000817 	ldw	fp,32(sp)
 c00ebd8:	ddc00717 	ldw	r23,28(sp)
 c00ebdc:	dd800617 	ldw	r22,24(sp)
 c00ebe0:	dd400517 	ldw	r21,20(sp)
 c00ebe4:	dd000417 	ldw	r20,16(sp)
 c00ebe8:	dcc00317 	ldw	r19,12(sp)
 c00ebec:	dc800217 	ldw	r18,8(sp)
 c00ebf0:	dc400117 	ldw	r17,4(sp)
 c00ebf4:	dc000017 	ldw	r16,0(sp)
 c00ebf8:	dec00a04 	addi	sp,sp,40
 c00ebfc:	f800283a 	ret

0c00ec00 <___svfiprintf_internal_r>:
 c00ec00:	2880030b 	ldhu	r2,12(r5)
 c00ec04:	deffc804 	addi	sp,sp,-224
 c00ec08:	dcc03115 	stw	r19,196(sp)
 c00ec0c:	dfc03715 	stw	ra,220(sp)
 c00ec10:	df003615 	stw	fp,216(sp)
 c00ec14:	ddc03515 	stw	r23,212(sp)
 c00ec18:	dd803415 	stw	r22,208(sp)
 c00ec1c:	dd403315 	stw	r21,204(sp)
 c00ec20:	dd003215 	stw	r20,200(sp)
 c00ec24:	dc803015 	stw	r18,192(sp)
 c00ec28:	dc402f15 	stw	r17,188(sp)
 c00ec2c:	dc002e15 	stw	r16,184(sp)
 c00ec30:	d9402315 	stw	r5,140(sp)
 c00ec34:	d9002715 	stw	r4,156(sp)
 c00ec38:	1080200c 	andi	r2,r2,128
 c00ec3c:	d9c02415 	stw	r7,144(sp)
 c00ec40:	3027883a 	mov	r19,r6
 c00ec44:	10000226 	beq	r2,zero,c00ec50 <___svfiprintf_internal_r+0x50>
 c00ec48:	28800417 	ldw	r2,16(r5)
 c00ec4c:	10046d26 	beq	r2,zero,c00fe04 <___svfiprintf_internal_r+0x1204>
 c00ec50:	d8801a04 	addi	r2,sp,104
 c00ec54:	d8c019c4 	addi	r3,sp,103
 c00ec58:	058300b4 	movhi	r22,3074
 c00ec5c:	10c9c83a 	sub	r4,r2,r3
 c00ec60:	b5a2ef04 	addi	r22,r22,-29764
 c00ec64:	d8801e15 	stw	r2,120(sp)
 c00ec68:	d8c01f15 	stw	r3,124(sp)
 c00ec6c:	dec01a15 	stw	sp,104(sp)
 c00ec70:	d8001c15 	stw	zero,112(sp)
 c00ec74:	d8001b15 	stw	zero,108(sp)
 c00ec78:	d811883a 	mov	r8,sp
 c00ec7c:	d8002915 	stw	zero,164(sp)
 c00ec80:	d8002615 	stw	zero,152(sp)
 c00ec84:	d9002c15 	stw	r4,176(sp)
 c00ec88:	98800007 	ldb	r2,0(r19)
 c00ec8c:	10031426 	beq	r2,zero,c00f8e0 <___svfiprintf_internal_r+0xce0>
 c00ec90:	00c00944 	movi	r3,37
 c00ec94:	9825883a 	mov	r18,r19
 c00ec98:	10c0021e 	bne	r2,r3,c00eca4 <___svfiprintf_internal_r+0xa4>
 c00ec9c:	00001406 	br	c00ecf0 <___svfiprintf_internal_r+0xf0>
 c00eca0:	10c00326 	beq	r2,r3,c00ecb0 <___svfiprintf_internal_r+0xb0>
 c00eca4:	94800044 	addi	r18,r18,1
 c00eca8:	90800007 	ldb	r2,0(r18)
 c00ecac:	103ffc1e 	bne	r2,zero,c00eca0 <__alt_data_end+0xfc00eca0>
 c00ecb0:	94e1c83a 	sub	r16,r18,r19
 c00ecb4:	80000e26 	beq	r16,zero,c00ecf0 <___svfiprintf_internal_r+0xf0>
 c00ecb8:	d8c01c17 	ldw	r3,112(sp)
 c00ecbc:	d8801b17 	ldw	r2,108(sp)
 c00ecc0:	44c00015 	stw	r19,0(r8)
 c00ecc4:	1c07883a 	add	r3,r3,r16
 c00ecc8:	10800044 	addi	r2,r2,1
 c00eccc:	d8c01c15 	stw	r3,112(sp)
 c00ecd0:	44000115 	stw	r16,4(r8)
 c00ecd4:	d8801b15 	stw	r2,108(sp)
 c00ecd8:	00c001c4 	movi	r3,7
 c00ecdc:	18835c16 	blt	r3,r2,c00fa50 <___svfiprintf_internal_r+0xe50>
 c00ece0:	42000204 	addi	r8,r8,8
 c00ece4:	d9402617 	ldw	r5,152(sp)
 c00ece8:	2c0b883a 	add	r5,r5,r16
 c00ecec:	d9402615 	stw	r5,152(sp)
 c00ecf0:	90800007 	ldb	r2,0(r18)
 c00ecf4:	1002fc26 	beq	r2,zero,c00f8e8 <___svfiprintf_internal_r+0xce8>
 c00ecf8:	0023883a 	mov	r17,zero
 c00ecfc:	00bfffc4 	movi	r2,-1
 c00ed00:	0021883a 	mov	r16,zero
 c00ed04:	94c00044 	addi	r19,r18,1
 c00ed08:	90c00047 	ldb	r3,1(r18)
 c00ed0c:	dc402105 	stb	r17,132(sp)
 c00ed10:	d8001d85 	stb	zero,118(sp)
 c00ed14:	002b883a 	mov	r21,zero
 c00ed18:	d8802015 	stw	r2,128(sp)
 c00ed1c:	d8002515 	stw	zero,148(sp)
 c00ed20:	04801604 	movi	r18,88
 c00ed24:	05000244 	movi	r20,9
 c00ed28:	402f883a 	mov	r23,r8
 c00ed2c:	8023883a 	mov	r17,r16
 c00ed30:	9cc00044 	addi	r19,r19,1
 c00ed34:	18bff804 	addi	r2,r3,-32
 c00ed38:	9081fb36 	bltu	r18,r2,c00f528 <___svfiprintf_internal_r+0x928>
 c00ed3c:	100490ba 	slli	r2,r2,2
 c00ed40:	01030074 	movhi	r4,3073
 c00ed44:	213b5504 	addi	r4,r4,-4780
 c00ed48:	1105883a 	add	r2,r2,r4
 c00ed4c:	10800017 	ldw	r2,0(r2)
 c00ed50:	1000683a 	jmp	r2
 c00ed54:	0c00ef54 	ori	r16,at,957
 c00ed58:	0c00f528 	cmpgeui	r16,at,980
 c00ed5c:	0c00f528 	cmpgeui	r16,at,980
 c00ed60:	0c00ef48 	cmpgei	r16,at,957
 c00ed64:	0c00f528 	cmpgeui	r16,at,980
 c00ed68:	0c00f528 	cmpgeui	r16,at,980
 c00ed6c:	0c00f528 	cmpgeui	r16,at,980
 c00ed70:	0c00f528 	cmpgeui	r16,at,980
 c00ed74:	0c00f528 	cmpgeui	r16,at,980
 c00ed78:	0c00f528 	cmpgeui	r16,at,980
 c00ed7c:	0c00eeb8 	rdprs	r16,at,954
 c00ed80:	0c00f0b4 	orhi	r16,at,962
 c00ed84:	0c00f528 	cmpgeui	r16,at,980
 c00ed88:	0c00eee0 	cmpeqi	r16,at,955
 c00ed8c:	0c00f564 	muli	r16,at,981
 c00ed90:	0c00f528 	cmpgeui	r16,at,980
 c00ed94:	0c00f558 	cmpnei	r16,at,981
 c00ed98:	0c00f4ec 	andhi	r16,at,979
 c00ed9c:	0c00f4ec 	andhi	r16,at,979
 c00eda0:	0c00f4ec 	andhi	r16,at,979
 c00eda4:	0c00f4ec 	andhi	r16,at,979
 c00eda8:	0c00f4ec 	andhi	r16,at,979
 c00edac:	0c00f4ec 	andhi	r16,at,979
 c00edb0:	0c00f4ec 	andhi	r16,at,979
 c00edb4:	0c00f4ec 	andhi	r16,at,979
 c00edb8:	0c00f4ec 	andhi	r16,at,979
 c00edbc:	0c00f528 	cmpgeui	r16,at,980
 c00edc0:	0c00f528 	cmpgeui	r16,at,980
 c00edc4:	0c00f528 	cmpgeui	r16,at,980
 c00edc8:	0c00f528 	cmpgeui	r16,at,980
 c00edcc:	0c00f528 	cmpgeui	r16,at,980
 c00edd0:	0c00f528 	cmpgeui	r16,at,980
 c00edd4:	0c00f528 	cmpgeui	r16,at,980
 c00edd8:	0c00f528 	cmpgeui	r16,at,980
 c00eddc:	0c00f528 	cmpgeui	r16,at,980
 c00ede0:	0c00f528 	cmpgeui	r16,at,980
 c00ede4:	0c00f470 	cmpltui	r16,at,977
 c00ede8:	0c00f528 	cmpgeui	r16,at,980
 c00edec:	0c00f528 	cmpgeui	r16,at,980
 c00edf0:	0c00f528 	cmpgeui	r16,at,980
 c00edf4:	0c00f528 	cmpgeui	r16,at,980
 c00edf8:	0c00f528 	cmpgeui	r16,at,980
 c00edfc:	0c00f528 	cmpgeui	r16,at,980
 c00ee00:	0c00f528 	cmpgeui	r16,at,980
 c00ee04:	0c00f528 	cmpgeui	r16,at,980
 c00ee08:	0c00f528 	cmpgeui	r16,at,980
 c00ee0c:	0c00f528 	cmpgeui	r16,at,980
 c00ee10:	0c00f620 	cmpeqi	r16,at,984
 c00ee14:	0c00f528 	cmpgeui	r16,at,980
 c00ee18:	0c00f528 	cmpgeui	r16,at,980
 c00ee1c:	0c00f528 	cmpgeui	r16,at,980
 c00ee20:	0c00f528 	cmpgeui	r16,at,980
 c00ee24:	0c00f528 	cmpgeui	r16,at,980
 c00ee28:	0c00f5ac 	andhi	r16,at,982
 c00ee2c:	0c00f528 	cmpgeui	r16,at,980
 c00ee30:	0c00f528 	cmpgeui	r16,at,980
 c00ee34:	0c00f2ac 	andhi	r16,at,970
 c00ee38:	0c00f528 	cmpgeui	r16,at,980
 c00ee3c:	0c00f528 	cmpgeui	r16,at,980
 c00ee40:	0c00f528 	cmpgeui	r16,at,980
 c00ee44:	0c00f528 	cmpgeui	r16,at,980
 c00ee48:	0c00f528 	cmpgeui	r16,at,980
 c00ee4c:	0c00f528 	cmpgeui	r16,at,980
 c00ee50:	0c00f528 	cmpgeui	r16,at,980
 c00ee54:	0c00f528 	cmpgeui	r16,at,980
 c00ee58:	0c00f528 	cmpgeui	r16,at,980
 c00ee5c:	0c00f528 	cmpgeui	r16,at,980
 c00ee60:	0c00f178 	rdprs	r16,at,965
 c00ee64:	0c00f35c 	xori	r16,at,973
 c00ee68:	0c00f528 	cmpgeui	r16,at,980
 c00ee6c:	0c00f528 	cmpgeui	r16,at,980
 c00ee70:	0c00f528 	cmpgeui	r16,at,980
 c00ee74:	0c00f350 	cmplti	r16,at,973
 c00ee78:	0c00f35c 	xori	r16,at,973
 c00ee7c:	0c00f528 	cmpgeui	r16,at,980
 c00ee80:	0c00f528 	cmpgeui	r16,at,980
 c00ee84:	0c00f33c 	xorhi	r16,at,972
 c00ee88:	0c00f528 	cmpgeui	r16,at,980
 c00ee8c:	0c00f2fc 	xorhi	r16,at,971
 c00ee90:	0c00f0c8 	cmpgei	r16,at,963
 c00ee94:	0c00eeec 	andhi	r16,at,955
 c00ee98:	0c00f464 	muli	r16,at,977
 c00ee9c:	0c00f528 	cmpgeui	r16,at,980
 c00eea0:	0c00f410 	cmplti	r16,at,976
 c00eea4:	0c00f528 	cmpgeui	r16,at,980
 c00eea8:	0c00f02c 	andhi	r16,at,960
 c00eeac:	0c00f528 	cmpgeui	r16,at,980
 c00eeb0:	0c00f528 	cmpgeui	r16,at,980
 c00eeb4:	0c00ef78 	rdprs	r16,at,957
 c00eeb8:	d9002417 	ldw	r4,144(sp)
 c00eebc:	d9402417 	ldw	r5,144(sp)
 c00eec0:	21000017 	ldw	r4,0(r4)
 c00eec4:	28800104 	addi	r2,r5,4
 c00eec8:	d9002515 	stw	r4,148(sp)
 c00eecc:	20032b0e 	bge	r4,zero,c00fb7c <___svfiprintf_internal_r+0xf7c>
 c00eed0:	d8c02517 	ldw	r3,148(sp)
 c00eed4:	d8802415 	stw	r2,144(sp)
 c00eed8:	00c7c83a 	sub	r3,zero,r3
 c00eedc:	d8c02515 	stw	r3,148(sp)
 c00eee0:	8c400114 	ori	r17,r17,4
 c00eee4:	98c00007 	ldb	r3,0(r19)
 c00eee8:	003f9106 	br	c00ed30 <__alt_data_end+0xfc00ed30>
 c00eeec:	00800c04 	movi	r2,48
 c00eef0:	d9402417 	ldw	r5,144(sp)
 c00eef4:	d9002017 	ldw	r4,128(sp)
 c00eef8:	d8801d05 	stb	r2,116(sp)
 c00eefc:	00801e04 	movi	r2,120
 c00ef00:	d8801d45 	stb	r2,117(sp)
 c00ef04:	d8001d85 	stb	zero,118(sp)
 c00ef08:	b811883a 	mov	r8,r23
 c00ef0c:	28c00104 	addi	r3,r5,4
 c00ef10:	2c800017 	ldw	r18,0(r5)
 c00ef14:	0029883a 	mov	r20,zero
 c00ef18:	88800094 	ori	r2,r17,2
 c00ef1c:	20036316 	blt	r4,zero,c00fcac <___svfiprintf_internal_r+0x10ac>
 c00ef20:	00bfdfc4 	movi	r2,-129
 c00ef24:	88a0703a 	and	r16,r17,r2
 c00ef28:	d8c02415 	stw	r3,144(sp)
 c00ef2c:	84000094 	ori	r16,r16,2
 c00ef30:	90031c26 	beq	r18,zero,c00fba4 <___svfiprintf_internal_r+0xfa4>
 c00ef34:	014300b4 	movhi	r5,3074
 c00ef38:	29628604 	addi	r5,r5,-30184
 c00ef3c:	002b883a 	mov	r21,zero
 c00ef40:	d9402915 	stw	r5,164(sp)
 c00ef44:	00002906 	br	c00efec <___svfiprintf_internal_r+0x3ec>
 c00ef48:	8c400054 	ori	r17,r17,1
 c00ef4c:	98c00007 	ldb	r3,0(r19)
 c00ef50:	003f7706 	br	c00ed30 <__alt_data_end+0xfc00ed30>
 c00ef54:	a8803fcc 	andi	r2,r21,255
 c00ef58:	1080201c 	xori	r2,r2,128
 c00ef5c:	10bfe004 	addi	r2,r2,-128
 c00ef60:	10032a1e 	bne	r2,zero,c00fc0c <___svfiprintf_internal_r+0x100c>
 c00ef64:	00c00044 	movi	r3,1
 c00ef68:	d8c02105 	stb	r3,132(sp)
 c00ef6c:	05400804 	movi	r21,32
 c00ef70:	98c00007 	ldb	r3,0(r19)
 c00ef74:	003f6e06 	br	c00ed30 <__alt_data_end+0xfc00ed30>
 c00ef78:	8821883a 	mov	r16,r17
 c00ef7c:	dc402103 	ldbu	r17,132(sp)
 c00ef80:	b811883a 	mov	r8,r23
 c00ef84:	8c403fcc 	andi	r17,r17,255
 c00ef88:	8803f01e 	bne	r17,zero,c00ff4c <___svfiprintf_internal_r+0x134c>
 c00ef8c:	008300b4 	movhi	r2,3074
 c00ef90:	10a28604 	addi	r2,r2,-30184
 c00ef94:	d8802915 	stw	r2,164(sp)
 c00ef98:	8080080c 	andi	r2,r16,32
 c00ef9c:	1000cd26 	beq	r2,zero,c00f2d4 <___svfiprintf_internal_r+0x6d4>
 c00efa0:	d9002417 	ldw	r4,144(sp)
 c00efa4:	24800017 	ldw	r18,0(r4)
 c00efa8:	25000117 	ldw	r20,4(r4)
 c00efac:	21000204 	addi	r4,r4,8
 c00efb0:	d9002415 	stw	r4,144(sp)
 c00efb4:	8080004c 	andi	r2,r16,1
 c00efb8:	1002c726 	beq	r2,zero,c00fad8 <___svfiprintf_internal_r+0xed8>
 c00efbc:	9504b03a 	or	r2,r18,r20
 c00efc0:	1003061e 	bne	r2,zero,c00fbdc <___svfiprintf_internal_r+0xfdc>
 c00efc4:	d9002017 	ldw	r4,128(sp)
 c00efc8:	d8001d85 	stb	zero,118(sp)
 c00efcc:	20033e16 	blt	r4,zero,c00fcc8 <___svfiprintf_internal_r+0x10c8>
 c00efd0:	00bfdfc4 	movi	r2,-129
 c00efd4:	80a0703a 	and	r16,r16,r2
 c00efd8:	d9402017 	ldw	r5,128(sp)
 c00efdc:	002b883a 	mov	r21,zero
 c00efe0:	28002826 	beq	r5,zero,c00f084 <___svfiprintf_internal_r+0x484>
 c00efe4:	0025883a 	mov	r18,zero
 c00efe8:	0029883a 	mov	r20,zero
 c00efec:	d9002917 	ldw	r4,164(sp)
 c00eff0:	dc401a04 	addi	r17,sp,104
 c00eff4:	908003cc 	andi	r2,r18,15
 c00eff8:	a006973a 	slli	r3,r20,28
 c00effc:	2085883a 	add	r2,r4,r2
 c00f000:	9024d13a 	srli	r18,r18,4
 c00f004:	10800003 	ldbu	r2,0(r2)
 c00f008:	a028d13a 	srli	r20,r20,4
 c00f00c:	8c7fffc4 	addi	r17,r17,-1
 c00f010:	1ca4b03a 	or	r18,r3,r18
 c00f014:	88800005 	stb	r2,0(r17)
 c00f018:	9504b03a 	or	r2,r18,r20
 c00f01c:	103ff51e 	bne	r2,zero,c00eff4 <__alt_data_end+0xfc00eff4>
 c00f020:	d8801e17 	ldw	r2,120(sp)
 c00f024:	1469c83a 	sub	r20,r2,r17
 c00f028:	00001906 	br	c00f090 <___svfiprintf_internal_r+0x490>
 c00f02c:	8821883a 	mov	r16,r17
 c00f030:	dc402103 	ldbu	r17,132(sp)
 c00f034:	b811883a 	mov	r8,r23
 c00f038:	8c403fcc 	andi	r17,r17,255
 c00f03c:	8803d01e 	bne	r17,zero,c00ff80 <___svfiprintf_internal_r+0x1380>
 c00f040:	8080080c 	andi	r2,r16,32
 c00f044:	10016126 	beq	r2,zero,c00f5cc <___svfiprintf_internal_r+0x9cc>
 c00f048:	d9002417 	ldw	r4,144(sp)
 c00f04c:	d9402017 	ldw	r5,128(sp)
 c00f050:	d8001d85 	stb	zero,118(sp)
 c00f054:	20c00204 	addi	r3,r4,8
 c00f058:	24800017 	ldw	r18,0(r4)
 c00f05c:	25000117 	ldw	r20,4(r4)
 c00f060:	28030f16 	blt	r5,zero,c00fca0 <___svfiprintf_internal_r+0x10a0>
 c00f064:	013fdfc4 	movi	r4,-129
 c00f068:	9504b03a 	or	r2,r18,r20
 c00f06c:	d8c02415 	stw	r3,144(sp)
 c00f070:	8120703a 	and	r16,r16,r4
 c00f074:	002b883a 	mov	r21,zero
 c00f078:	1000cd1e 	bne	r2,zero,c00f3b0 <___svfiprintf_internal_r+0x7b0>
 c00f07c:	d8c02017 	ldw	r3,128(sp)
 c00f080:	1803141e 	bne	r3,zero,c00fcd4 <___svfiprintf_internal_r+0x10d4>
 c00f084:	d8002015 	stw	zero,128(sp)
 c00f088:	0029883a 	mov	r20,zero
 c00f08c:	dc401a04 	addi	r17,sp,104
 c00f090:	dc802017 	ldw	r18,128(sp)
 c00f094:	9500010e 	bge	r18,r20,c00f09c <___svfiprintf_internal_r+0x49c>
 c00f098:	a025883a 	mov	r18,r20
 c00f09c:	ad403fcc 	andi	r21,r21,255
 c00f0a0:	ad40201c 	xori	r21,r21,128
 c00f0a4:	ad7fe004 	addi	r21,r21,-128
 c00f0a8:	a8003f26 	beq	r21,zero,c00f1a8 <___svfiprintf_internal_r+0x5a8>
 c00f0ac:	94800044 	addi	r18,r18,1
 c00f0b0:	00003d06 	br	c00f1a8 <___svfiprintf_internal_r+0x5a8>
 c00f0b4:	00c00044 	movi	r3,1
 c00f0b8:	d8c02105 	stb	r3,132(sp)
 c00f0bc:	05400ac4 	movi	r21,43
 c00f0c0:	98c00007 	ldb	r3,0(r19)
 c00f0c4:	003f1a06 	br	c00ed30 <__alt_data_end+0xfc00ed30>
 c00f0c8:	8821883a 	mov	r16,r17
 c00f0cc:	dc402103 	ldbu	r17,132(sp)
 c00f0d0:	b811883a 	mov	r8,r23
 c00f0d4:	8c403fcc 	andi	r17,r17,255
 c00f0d8:	8803a71e 	bne	r17,zero,c00ff78 <___svfiprintf_internal_r+0x1378>
 c00f0dc:	8080080c 	andi	r2,r16,32
 c00f0e0:	10015726 	beq	r2,zero,c00f640 <___svfiprintf_internal_r+0xa40>
 c00f0e4:	d8c02417 	ldw	r3,144(sp)
 c00f0e8:	d9002017 	ldw	r4,128(sp)
 c00f0ec:	d8001d85 	stb	zero,118(sp)
 c00f0f0:	18800204 	addi	r2,r3,8
 c00f0f4:	1c800017 	ldw	r18,0(r3)
 c00f0f8:	1d000117 	ldw	r20,4(r3)
 c00f0fc:	2002db16 	blt	r4,zero,c00fc6c <___svfiprintf_internal_r+0x106c>
 c00f100:	013fdfc4 	movi	r4,-129
 c00f104:	9506b03a 	or	r3,r18,r20
 c00f108:	d8802415 	stw	r2,144(sp)
 c00f10c:	8120703a 	and	r16,r16,r4
 c00f110:	18015826 	beq	r3,zero,c00f674 <___svfiprintf_internal_r+0xa74>
 c00f114:	002b883a 	mov	r21,zero
 c00f118:	dc401a04 	addi	r17,sp,104
 c00f11c:	9006d0fa 	srli	r3,r18,3
 c00f120:	a008977a 	slli	r4,r20,29
 c00f124:	a028d0fa 	srli	r20,r20,3
 c00f128:	948001cc 	andi	r18,r18,7
 c00f12c:	90800c04 	addi	r2,r18,48
 c00f130:	8c7fffc4 	addi	r17,r17,-1
 c00f134:	20e4b03a 	or	r18,r4,r3
 c00f138:	88800005 	stb	r2,0(r17)
 c00f13c:	9506b03a 	or	r3,r18,r20
 c00f140:	183ff61e 	bne	r3,zero,c00f11c <__alt_data_end+0xfc00f11c>
 c00f144:	80c0004c 	andi	r3,r16,1
 c00f148:	18028926 	beq	r3,zero,c00fb70 <___svfiprintf_internal_r+0xf70>
 c00f14c:	10803fcc 	andi	r2,r2,255
 c00f150:	1080201c 	xori	r2,r2,128
 c00f154:	10bfe004 	addi	r2,r2,-128
 c00f158:	00c00c04 	movi	r3,48
 c00f15c:	10ffb026 	beq	r2,r3,c00f020 <__alt_data_end+0xfc00f020>
 c00f160:	88ffffc5 	stb	r3,-1(r17)
 c00f164:	d8c01e17 	ldw	r3,120(sp)
 c00f168:	88bfffc4 	addi	r2,r17,-1
 c00f16c:	1023883a 	mov	r17,r2
 c00f170:	18a9c83a 	sub	r20,r3,r2
 c00f174:	003fc606 	br	c00f090 <__alt_data_end+0xfc00f090>
 c00f178:	d8c02417 	ldw	r3,144(sp)
 c00f17c:	04800044 	movi	r18,1
 c00f180:	8821883a 	mov	r16,r17
 c00f184:	18800017 	ldw	r2,0(r3)
 c00f188:	18c00104 	addi	r3,r3,4
 c00f18c:	b811883a 	mov	r8,r23
 c00f190:	d8001d85 	stb	zero,118(sp)
 c00f194:	d8801005 	stb	r2,64(sp)
 c00f198:	d8c02415 	stw	r3,144(sp)
 c00f19c:	9029883a 	mov	r20,r18
 c00f1a0:	dc401004 	addi	r17,sp,64
 c00f1a4:	d8002015 	stw	zero,128(sp)
 c00f1a8:	80c0008c 	andi	r3,r16,2
 c00f1ac:	d8c02115 	stw	r3,132(sp)
 c00f1b0:	18000126 	beq	r3,zero,c00f1b8 <___svfiprintf_internal_r+0x5b8>
 c00f1b4:	94800084 	addi	r18,r18,2
 c00f1b8:	80c0210c 	andi	r3,r16,132
 c00f1bc:	d8c02215 	stw	r3,136(sp)
 c00f1c0:	1801321e 	bne	r3,zero,c00f68c <___svfiprintf_internal_r+0xa8c>
 c00f1c4:	d9002517 	ldw	r4,148(sp)
 c00f1c8:	24b9c83a 	sub	fp,r4,r18
 c00f1cc:	07012f0e 	bge	zero,fp,c00f68c <___svfiprintf_internal_r+0xa8c>
 c00f1d0:	02400404 	movi	r9,16
 c00f1d4:	d8c01c17 	ldw	r3,112(sp)
 c00f1d8:	d8801b17 	ldw	r2,108(sp)
 c00f1dc:	4f03250e 	bge	r9,fp,c00fe74 <___svfiprintf_internal_r+0x1274>
 c00f1e0:	010300b4 	movhi	r4,3074
 c00f1e4:	2122f304 	addi	r4,r4,-29748
 c00f1e8:	dc002a15 	stw	r16,168(sp)
 c00f1ec:	dc402b15 	stw	r17,172(sp)
 c00f1f0:	d9002815 	stw	r4,160(sp)
 c00f1f4:	e023883a 	mov	r17,fp
 c00f1f8:	482f883a 	mov	r23,r9
 c00f1fc:	9839883a 	mov	fp,r19
 c00f200:	054001c4 	movi	r21,7
 c00f204:	9027883a 	mov	r19,r18
 c00f208:	dc002717 	ldw	r16,156(sp)
 c00f20c:	dc802317 	ldw	r18,140(sp)
 c00f210:	00000306 	br	c00f220 <___svfiprintf_internal_r+0x620>
 c00f214:	8c7ffc04 	addi	r17,r17,-16
 c00f218:	42000204 	addi	r8,r8,8
 c00f21c:	bc40130e 	bge	r23,r17,c00f26c <___svfiprintf_internal_r+0x66c>
 c00f220:	014300b4 	movhi	r5,3074
 c00f224:	18c00404 	addi	r3,r3,16
 c00f228:	10800044 	addi	r2,r2,1
 c00f22c:	2962f304 	addi	r5,r5,-29748
 c00f230:	41400015 	stw	r5,0(r8)
 c00f234:	45c00115 	stw	r23,4(r8)
 c00f238:	d8c01c15 	stw	r3,112(sp)
 c00f23c:	d8801b15 	stw	r2,108(sp)
 c00f240:	a8bff40e 	bge	r21,r2,c00f214 <__alt_data_end+0xfc00f214>
 c00f244:	d9801a04 	addi	r6,sp,104
 c00f248:	900b883a 	mov	r5,r18
 c00f24c:	8009883a 	mov	r4,r16
 c00f250:	c00ea300 	call	c00ea30 <__ssprint_r>
 c00f254:	1001aa1e 	bne	r2,zero,c00f900 <___svfiprintf_internal_r+0xd00>
 c00f258:	8c7ffc04 	addi	r17,r17,-16
 c00f25c:	d8c01c17 	ldw	r3,112(sp)
 c00f260:	d8801b17 	ldw	r2,108(sp)
 c00f264:	d811883a 	mov	r8,sp
 c00f268:	bc7fed16 	blt	r23,r17,c00f220 <__alt_data_end+0xfc00f220>
 c00f26c:	9825883a 	mov	r18,r19
 c00f270:	dc002a17 	ldw	r16,168(sp)
 c00f274:	e027883a 	mov	r19,fp
 c00f278:	8839883a 	mov	fp,r17
 c00f27c:	dc402b17 	ldw	r17,172(sp)
 c00f280:	d9002817 	ldw	r4,160(sp)
 c00f284:	e0c7883a 	add	r3,fp,r3
 c00f288:	10800044 	addi	r2,r2,1
 c00f28c:	41000015 	stw	r4,0(r8)
 c00f290:	47000115 	stw	fp,4(r8)
 c00f294:	d8c01c15 	stw	r3,112(sp)
 c00f298:	d8801b15 	stw	r2,108(sp)
 c00f29c:	010001c4 	movi	r4,7
 c00f2a0:	20821616 	blt	r4,r2,c00fafc <___svfiprintf_internal_r+0xefc>
 c00f2a4:	42000204 	addi	r8,r8,8
 c00f2a8:	0000fa06 	br	c00f694 <___svfiprintf_internal_r+0xa94>
 c00f2ac:	8821883a 	mov	r16,r17
 c00f2b0:	dc402103 	ldbu	r17,132(sp)
 c00f2b4:	b811883a 	mov	r8,r23
 c00f2b8:	8c403fcc 	andi	r17,r17,255
 c00f2bc:	8803361e 	bne	r17,zero,c00ff98 <___svfiprintf_internal_r+0x1398>
 c00f2c0:	014300b4 	movhi	r5,3074
 c00f2c4:	29628104 	addi	r5,r5,-30204
 c00f2c8:	d9402915 	stw	r5,164(sp)
 c00f2cc:	8080080c 	andi	r2,r16,32
 c00f2d0:	103f331e 	bne	r2,zero,c00efa0 <__alt_data_end+0xfc00efa0>
 c00f2d4:	8080040c 	andi	r2,r16,16
 c00f2d8:	1002551e 	bne	r2,zero,c00fc30 <___svfiprintf_internal_r+0x1030>
 c00f2dc:	8080100c 	andi	r2,r16,64
 c00f2e0:	1002a626 	beq	r2,zero,c00fd7c <___svfiprintf_internal_r+0x117c>
 c00f2e4:	d8802417 	ldw	r2,144(sp)
 c00f2e8:	0029883a 	mov	r20,zero
 c00f2ec:	1480000b 	ldhu	r18,0(r2)
 c00f2f0:	10800104 	addi	r2,r2,4
 c00f2f4:	d8802415 	stw	r2,144(sp)
 c00f2f8:	003f2e06 	br	c00efb4 <__alt_data_end+0xfc00efb4>
 c00f2fc:	8821883a 	mov	r16,r17
 c00f300:	dc402103 	ldbu	r17,132(sp)
 c00f304:	b811883a 	mov	r8,r23
 c00f308:	8c403fcc 	andi	r17,r17,255
 c00f30c:	88030b1e 	bne	r17,zero,c00ff3c <___svfiprintf_internal_r+0x133c>
 c00f310:	8080080c 	andi	r2,r16,32
 c00f314:	1002271e 	bne	r2,zero,c00fbb4 <___svfiprintf_internal_r+0xfb4>
 c00f318:	8080040c 	andi	r2,r16,16
 c00f31c:	10028e26 	beq	r2,zero,c00fd58 <___svfiprintf_internal_r+0x1158>
 c00f320:	d8c02417 	ldw	r3,144(sp)
 c00f324:	d9002617 	ldw	r4,152(sp)
 c00f328:	18800017 	ldw	r2,0(r3)
 c00f32c:	18c00104 	addi	r3,r3,4
 c00f330:	d8c02415 	stw	r3,144(sp)
 c00f334:	11000015 	stw	r4,0(r2)
 c00f338:	003e5306 	br	c00ec88 <__alt_data_end+0xfc00ec88>
 c00f33c:	98c00007 	ldb	r3,0(r19)
 c00f340:	01401b04 	movi	r5,108
 c00f344:	19424f26 	beq	r3,r5,c00fc84 <___svfiprintf_internal_r+0x1084>
 c00f348:	8c400414 	ori	r17,r17,16
 c00f34c:	003e7806 	br	c00ed30 <__alt_data_end+0xfc00ed30>
 c00f350:	8c401014 	ori	r17,r17,64
 c00f354:	98c00007 	ldb	r3,0(r19)
 c00f358:	003e7506 	br	c00ed30 <__alt_data_end+0xfc00ed30>
 c00f35c:	8821883a 	mov	r16,r17
 c00f360:	dc402103 	ldbu	r17,132(sp)
 c00f364:	b811883a 	mov	r8,r23
 c00f368:	8c403fcc 	andi	r17,r17,255
 c00f36c:	8802fe1e 	bne	r17,zero,c00ff68 <___svfiprintf_internal_r+0x1368>
 c00f370:	8080080c 	andi	r2,r16,32
 c00f374:	10004626 	beq	r2,zero,c00f490 <___svfiprintf_internal_r+0x890>
 c00f378:	d9002417 	ldw	r4,144(sp)
 c00f37c:	20800117 	ldw	r2,4(r4)
 c00f380:	24800017 	ldw	r18,0(r4)
 c00f384:	21000204 	addi	r4,r4,8
 c00f388:	d9002415 	stw	r4,144(sp)
 c00f38c:	1029883a 	mov	r20,r2
 c00f390:	10004a16 	blt	r2,zero,c00f4bc <___svfiprintf_internal_r+0x8bc>
 c00f394:	d9002017 	ldw	r4,128(sp)
 c00f398:	dd401d83 	ldbu	r21,118(sp)
 c00f39c:	2001eb16 	blt	r4,zero,c00fb4c <___svfiprintf_internal_r+0xf4c>
 c00f3a0:	00ffdfc4 	movi	r3,-129
 c00f3a4:	9504b03a 	or	r2,r18,r20
 c00f3a8:	80e0703a 	and	r16,r16,r3
 c00f3ac:	103f3326 	beq	r2,zero,c00f07c <__alt_data_end+0xfc00f07c>
 c00f3b0:	a0009426 	beq	r20,zero,c00f604 <___svfiprintf_internal_r+0xa04>
 c00f3b4:	dc401a04 	addi	r17,sp,104
 c00f3b8:	402f883a 	mov	r23,r8
 c00f3bc:	9009883a 	mov	r4,r18
 c00f3c0:	a00b883a 	mov	r5,r20
 c00f3c4:	01800284 	movi	r6,10
 c00f3c8:	000f883a 	mov	r7,zero
 c00f3cc:	c0126ec0 	call	c0126ec <__umoddi3>
 c00f3d0:	10800c04 	addi	r2,r2,48
 c00f3d4:	8c7fffc4 	addi	r17,r17,-1
 c00f3d8:	9009883a 	mov	r4,r18
 c00f3dc:	a00b883a 	mov	r5,r20
 c00f3e0:	88800005 	stb	r2,0(r17)
 c00f3e4:	01800284 	movi	r6,10
 c00f3e8:	000f883a 	mov	r7,zero
 c00f3ec:	c0120f00 	call	c0120f0 <__udivdi3>
 c00f3f0:	1025883a 	mov	r18,r2
 c00f3f4:	10c4b03a 	or	r2,r2,r3
 c00f3f8:	1829883a 	mov	r20,r3
 c00f3fc:	103fef1e 	bne	r2,zero,c00f3bc <__alt_data_end+0xfc00f3bc>
 c00f400:	d9001e17 	ldw	r4,120(sp)
 c00f404:	b811883a 	mov	r8,r23
 c00f408:	2469c83a 	sub	r20,r4,r17
 c00f40c:	003f2006 	br	c00f090 <__alt_data_end+0xfc00f090>
 c00f410:	d8802417 	ldw	r2,144(sp)
 c00f414:	8821883a 	mov	r16,r17
 c00f418:	d8001d85 	stb	zero,118(sp)
 c00f41c:	14400017 	ldw	r17,0(r2)
 c00f420:	b811883a 	mov	r8,r23
 c00f424:	15c00104 	addi	r23,r2,4
 c00f428:	88026c26 	beq	r17,zero,c00fddc <___svfiprintf_internal_r+0x11dc>
 c00f42c:	d8c02017 	ldw	r3,128(sp)
 c00f430:	18025f16 	blt	r3,zero,c00fdb0 <___svfiprintf_internal_r+0x11b0>
 c00f434:	180d883a 	mov	r6,r3
 c00f438:	000b883a 	mov	r5,zero
 c00f43c:	8809883a 	mov	r4,r17
 c00f440:	da002d15 	stw	r8,180(sp)
 c00f444:	c00ce200 	call	c00ce20 <memchr>
 c00f448:	da002d17 	ldw	r8,180(sp)
 c00f44c:	1002a526 	beq	r2,zero,c00fee4 <___svfiprintf_internal_r+0x12e4>
 c00f450:	1469c83a 	sub	r20,r2,r17
 c00f454:	dd401d83 	ldbu	r21,118(sp)
 c00f458:	ddc02415 	stw	r23,144(sp)
 c00f45c:	d8002015 	stw	zero,128(sp)
 c00f460:	003f0b06 	br	c00f090 <__alt_data_end+0xfc00f090>
 c00f464:	8c400814 	ori	r17,r17,32
 c00f468:	98c00007 	ldb	r3,0(r19)
 c00f46c:	003e3006 	br	c00ed30 <__alt_data_end+0xfc00ed30>
 c00f470:	8821883a 	mov	r16,r17
 c00f474:	dc402103 	ldbu	r17,132(sp)
 c00f478:	b811883a 	mov	r8,r23
 c00f47c:	8c403fcc 	andi	r17,r17,255
 c00f480:	8802b01e 	bne	r17,zero,c00ff44 <___svfiprintf_internal_r+0x1344>
 c00f484:	84000414 	ori	r16,r16,16
 c00f488:	8080080c 	andi	r2,r16,32
 c00f48c:	103fba1e 	bne	r2,zero,c00f378 <__alt_data_end+0xfc00f378>
 c00f490:	8080040c 	andi	r2,r16,16
 c00f494:	1001df1e 	bne	r2,zero,c00fc14 <___svfiprintf_internal_r+0x1014>
 c00f498:	8080100c 	andi	r2,r16,64
 c00f49c:	10023d26 	beq	r2,zero,c00fd94 <___svfiprintf_internal_r+0x1194>
 c00f4a0:	d8802417 	ldw	r2,144(sp)
 c00f4a4:	1480000f 	ldh	r18,0(r2)
 c00f4a8:	10800104 	addi	r2,r2,4
 c00f4ac:	d8802415 	stw	r2,144(sp)
 c00f4b0:	9029d7fa 	srai	r20,r18,31
 c00f4b4:	a005883a 	mov	r2,r20
 c00f4b8:	103fb60e 	bge	r2,zero,c00f394 <__alt_data_end+0xfc00f394>
 c00f4bc:	d9402017 	ldw	r5,128(sp)
 c00f4c0:	04a5c83a 	sub	r18,zero,r18
 c00f4c4:	05400b44 	movi	r21,45
 c00f4c8:	9004c03a 	cmpne	r2,r18,zero
 c00f4cc:	0529c83a 	sub	r20,zero,r20
 c00f4d0:	dd401d85 	stb	r21,118(sp)
 c00f4d4:	a0a9c83a 	sub	r20,r20,r2
 c00f4d8:	28026c16 	blt	r5,zero,c00fe8c <___svfiprintf_internal_r+0x128c>
 c00f4dc:	00bfdfc4 	movi	r2,-129
 c00f4e0:	80a0703a 	and	r16,r16,r2
 c00f4e4:	a03fb31e 	bne	r20,zero,c00f3b4 <__alt_data_end+0xfc00f3b4>
 c00f4e8:	00004606 	br	c00f604 <___svfiprintf_internal_r+0xa04>
 c00f4ec:	9839883a 	mov	fp,r19
 c00f4f0:	d8002515 	stw	zero,148(sp)
 c00f4f4:	1c3ff404 	addi	r16,r3,-48
 c00f4f8:	0009883a 	mov	r4,zero
 c00f4fc:	01400284 	movi	r5,10
 c00f500:	c004c7c0 	call	c004c7c <__mulsi3>
 c00f504:	e0c00007 	ldb	r3,0(fp)
 c00f508:	8089883a 	add	r4,r16,r2
 c00f50c:	9cc00044 	addi	r19,r19,1
 c00f510:	1c3ff404 	addi	r16,r3,-48
 c00f514:	9839883a 	mov	fp,r19
 c00f518:	a43ff82e 	bgeu	r20,r16,c00f4fc <__alt_data_end+0xfc00f4fc>
 c00f51c:	d9002515 	stw	r4,148(sp)
 c00f520:	18bff804 	addi	r2,r3,-32
 c00f524:	90be052e 	bgeu	r18,r2,c00ed3c <__alt_data_end+0xfc00ed3c>
 c00f528:	8821883a 	mov	r16,r17
 c00f52c:	dc402103 	ldbu	r17,132(sp)
 c00f530:	b811883a 	mov	r8,r23
 c00f534:	8c403fcc 	andi	r17,r17,255
 c00f538:	88028d1e 	bne	r17,zero,c00ff70 <___svfiprintf_internal_r+0x1370>
 c00f53c:	1800ea26 	beq	r3,zero,c00f8e8 <___svfiprintf_internal_r+0xce8>
 c00f540:	04800044 	movi	r18,1
 c00f544:	d8c01005 	stb	r3,64(sp)
 c00f548:	d8001d85 	stb	zero,118(sp)
 c00f54c:	9029883a 	mov	r20,r18
 c00f550:	dc401004 	addi	r17,sp,64
 c00f554:	003f1306 	br	c00f1a4 <__alt_data_end+0xfc00f1a4>
 c00f558:	8c402014 	ori	r17,r17,128
 c00f55c:	98c00007 	ldb	r3,0(r19)
 c00f560:	003df306 	br	c00ed30 <__alt_data_end+0xfc00ed30>
 c00f564:	98c00007 	ldb	r3,0(r19)
 c00f568:	01000a84 	movi	r4,42
 c00f56c:	9f000044 	addi	fp,r19,1
 c00f570:	19026326 	beq	r3,r4,c00ff00 <___svfiprintf_internal_r+0x1300>
 c00f574:	1c3ff404 	addi	r16,r3,-48
 c00f578:	0009883a 	mov	r4,zero
 c00f57c:	a4025636 	bltu	r20,r16,c00fed8 <___svfiprintf_internal_r+0x12d8>
 c00f580:	01400284 	movi	r5,10
 c00f584:	c004c7c0 	call	c004c7c <__mulsi3>
 c00f588:	e0c00007 	ldb	r3,0(fp)
 c00f58c:	1409883a 	add	r4,r2,r16
 c00f590:	e4c00044 	addi	r19,fp,1
 c00f594:	1c3ff404 	addi	r16,r3,-48
 c00f598:	9839883a 	mov	fp,r19
 c00f59c:	a43ff82e 	bgeu	r20,r16,c00f580 <__alt_data_end+0xfc00f580>
 c00f5a0:	20020c16 	blt	r4,zero,c00fdd4 <___svfiprintf_internal_r+0x11d4>
 c00f5a4:	d9002015 	stw	r4,128(sp)
 c00f5a8:	003de206 	br	c00ed34 <__alt_data_end+0xfc00ed34>
 c00f5ac:	8821883a 	mov	r16,r17
 c00f5b0:	dc402103 	ldbu	r17,132(sp)
 c00f5b4:	b811883a 	mov	r8,r23
 c00f5b8:	8c403fcc 	andi	r17,r17,255
 c00f5bc:	8802721e 	bne	r17,zero,c00ff88 <___svfiprintf_internal_r+0x1388>
 c00f5c0:	84000414 	ori	r16,r16,16
 c00f5c4:	8080080c 	andi	r2,r16,32
 c00f5c8:	103e9f1e 	bne	r2,zero,c00f048 <__alt_data_end+0xfc00f048>
 c00f5cc:	8080040c 	andi	r2,r16,16
 c00f5d0:	10015326 	beq	r2,zero,c00fb20 <___svfiprintf_internal_r+0xf20>
 c00f5d4:	d8c02417 	ldw	r3,144(sp)
 c00f5d8:	d9002017 	ldw	r4,128(sp)
 c00f5dc:	d8001d85 	stb	zero,118(sp)
 c00f5e0:	18800104 	addi	r2,r3,4
 c00f5e4:	1c800017 	ldw	r18,0(r3)
 c00f5e8:	0029883a 	mov	r20,zero
 c00f5ec:	20015516 	blt	r4,zero,c00fb44 <___svfiprintf_internal_r+0xf44>
 c00f5f0:	00ffdfc4 	movi	r3,-129
 c00f5f4:	d8802415 	stw	r2,144(sp)
 c00f5f8:	80e0703a 	and	r16,r16,r3
 c00f5fc:	002b883a 	mov	r21,zero
 c00f600:	903e9e26 	beq	r18,zero,c00f07c <__alt_data_end+0xfc00f07c>
 c00f604:	00800244 	movi	r2,9
 c00f608:	14bf6a36 	bltu	r2,r18,c00f3b4 <__alt_data_end+0xfc00f3b4>
 c00f60c:	94800c04 	addi	r18,r18,48
 c00f610:	dc8019c5 	stb	r18,103(sp)
 c00f614:	dd002c17 	ldw	r20,176(sp)
 c00f618:	dc4019c4 	addi	r17,sp,103
 c00f61c:	003e9c06 	br	c00f090 <__alt_data_end+0xfc00f090>
 c00f620:	8821883a 	mov	r16,r17
 c00f624:	dc402103 	ldbu	r17,132(sp)
 c00f628:	b811883a 	mov	r8,r23
 c00f62c:	8c403fcc 	andi	r17,r17,255
 c00f630:	8802571e 	bne	r17,zero,c00ff90 <___svfiprintf_internal_r+0x1390>
 c00f634:	84000414 	ori	r16,r16,16
 c00f638:	8080080c 	andi	r2,r16,32
 c00f63c:	103ea91e 	bne	r2,zero,c00f0e4 <__alt_data_end+0xfc00f0e4>
 c00f640:	8080040c 	andi	r2,r16,16
 c00f644:	10018026 	beq	r2,zero,c00fc48 <___svfiprintf_internal_r+0x1048>
 c00f648:	d9402417 	ldw	r5,144(sp)
 c00f64c:	d8c02017 	ldw	r3,128(sp)
 c00f650:	d8001d85 	stb	zero,118(sp)
 c00f654:	28800104 	addi	r2,r5,4
 c00f658:	2c800017 	ldw	r18,0(r5)
 c00f65c:	0029883a 	mov	r20,zero
 c00f660:	18018216 	blt	r3,zero,c00fc6c <___svfiprintf_internal_r+0x106c>
 c00f664:	00ffdfc4 	movi	r3,-129
 c00f668:	d8802415 	stw	r2,144(sp)
 c00f66c:	80e0703a 	and	r16,r16,r3
 c00f670:	903ea81e 	bne	r18,zero,c00f114 <__alt_data_end+0xfc00f114>
 c00f674:	d8802017 	ldw	r2,128(sp)
 c00f678:	002b883a 	mov	r21,zero
 c00f67c:	1001f226 	beq	r2,zero,c00fe48 <___svfiprintf_internal_r+0x1248>
 c00f680:	0025883a 	mov	r18,zero
 c00f684:	0029883a 	mov	r20,zero
 c00f688:	003ea306 	br	c00f118 <__alt_data_end+0xfc00f118>
 c00f68c:	d8c01c17 	ldw	r3,112(sp)
 c00f690:	d8801b17 	ldw	r2,108(sp)
 c00f694:	d9001d87 	ldb	r4,118(sp)
 c00f698:	20000b26 	beq	r4,zero,c00f6c8 <___svfiprintf_internal_r+0xac8>
 c00f69c:	d9001d84 	addi	r4,sp,118
 c00f6a0:	18c00044 	addi	r3,r3,1
 c00f6a4:	10800044 	addi	r2,r2,1
 c00f6a8:	41000015 	stw	r4,0(r8)
 c00f6ac:	01000044 	movi	r4,1
 c00f6b0:	41000115 	stw	r4,4(r8)
 c00f6b4:	d8c01c15 	stw	r3,112(sp)
 c00f6b8:	d8801b15 	stw	r2,108(sp)
 c00f6bc:	010001c4 	movi	r4,7
 c00f6c0:	2080f316 	blt	r4,r2,c00fa90 <___svfiprintf_internal_r+0xe90>
 c00f6c4:	42000204 	addi	r8,r8,8
 c00f6c8:	d9402117 	ldw	r5,132(sp)
 c00f6cc:	28000b26 	beq	r5,zero,c00f6fc <___svfiprintf_internal_r+0xafc>
 c00f6d0:	d9001d04 	addi	r4,sp,116
 c00f6d4:	18c00084 	addi	r3,r3,2
 c00f6d8:	10800044 	addi	r2,r2,1
 c00f6dc:	41000015 	stw	r4,0(r8)
 c00f6e0:	01000084 	movi	r4,2
 c00f6e4:	41000115 	stw	r4,4(r8)
 c00f6e8:	d8c01c15 	stw	r3,112(sp)
 c00f6ec:	d8801b15 	stw	r2,108(sp)
 c00f6f0:	010001c4 	movi	r4,7
 c00f6f4:	2080ef16 	blt	r4,r2,c00fab4 <___svfiprintf_internal_r+0xeb4>
 c00f6f8:	42000204 	addi	r8,r8,8
 c00f6fc:	d9402217 	ldw	r5,136(sp)
 c00f700:	01002004 	movi	r4,128
 c00f704:	29008f26 	beq	r5,r4,c00f944 <___svfiprintf_internal_r+0xd44>
 c00f708:	d9002017 	ldw	r4,128(sp)
 c00f70c:	252fc83a 	sub	r23,r4,r20
 c00f710:	05c0310e 	bge	zero,r23,c00f7d8 <___svfiprintf_internal_r+0xbd8>
 c00f714:	07000404 	movi	fp,16
 c00f718:	e5c17d0e 	bge	fp,r23,c00fd10 <___svfiprintf_internal_r+0x1110>
 c00f71c:	010300b4 	movhi	r4,3074
 c00f720:	2122ef04 	addi	r4,r4,-29764
 c00f724:	dc002015 	stw	r16,128(sp)
 c00f728:	dc402215 	stw	r17,136(sp)
 c00f72c:	d9002115 	stw	r4,132(sp)
 c00f730:	b823883a 	mov	r17,r23
 c00f734:	054001c4 	movi	r21,7
 c00f738:	982f883a 	mov	r23,r19
 c00f73c:	dc002717 	ldw	r16,156(sp)
 c00f740:	9027883a 	mov	r19,r18
 c00f744:	dc802317 	ldw	r18,140(sp)
 c00f748:	00000306 	br	c00f758 <___svfiprintf_internal_r+0xb58>
 c00f74c:	8c7ffc04 	addi	r17,r17,-16
 c00f750:	42000204 	addi	r8,r8,8
 c00f754:	e440110e 	bge	fp,r17,c00f79c <___svfiprintf_internal_r+0xb9c>
 c00f758:	18c00404 	addi	r3,r3,16
 c00f75c:	10800044 	addi	r2,r2,1
 c00f760:	45800015 	stw	r22,0(r8)
 c00f764:	47000115 	stw	fp,4(r8)
 c00f768:	d8c01c15 	stw	r3,112(sp)
 c00f76c:	d8801b15 	stw	r2,108(sp)
 c00f770:	a8bff60e 	bge	r21,r2,c00f74c <__alt_data_end+0xfc00f74c>
 c00f774:	d9801a04 	addi	r6,sp,104
 c00f778:	900b883a 	mov	r5,r18
 c00f77c:	8009883a 	mov	r4,r16
 c00f780:	c00ea300 	call	c00ea30 <__ssprint_r>
 c00f784:	10005e1e 	bne	r2,zero,c00f900 <___svfiprintf_internal_r+0xd00>
 c00f788:	8c7ffc04 	addi	r17,r17,-16
 c00f78c:	d8c01c17 	ldw	r3,112(sp)
 c00f790:	d8801b17 	ldw	r2,108(sp)
 c00f794:	d811883a 	mov	r8,sp
 c00f798:	e47fef16 	blt	fp,r17,c00f758 <__alt_data_end+0xfc00f758>
 c00f79c:	9825883a 	mov	r18,r19
 c00f7a0:	dc002017 	ldw	r16,128(sp)
 c00f7a4:	b827883a 	mov	r19,r23
 c00f7a8:	882f883a 	mov	r23,r17
 c00f7ac:	dc402217 	ldw	r17,136(sp)
 c00f7b0:	d9402117 	ldw	r5,132(sp)
 c00f7b4:	1dc7883a 	add	r3,r3,r23
 c00f7b8:	10800044 	addi	r2,r2,1
 c00f7bc:	41400015 	stw	r5,0(r8)
 c00f7c0:	45c00115 	stw	r23,4(r8)
 c00f7c4:	d8c01c15 	stw	r3,112(sp)
 c00f7c8:	d8801b15 	stw	r2,108(sp)
 c00f7cc:	010001c4 	movi	r4,7
 c00f7d0:	2080a616 	blt	r4,r2,c00fa6c <___svfiprintf_internal_r+0xe6c>
 c00f7d4:	42000204 	addi	r8,r8,8
 c00f7d8:	a0c7883a 	add	r3,r20,r3
 c00f7dc:	10800044 	addi	r2,r2,1
 c00f7e0:	44400015 	stw	r17,0(r8)
 c00f7e4:	45000115 	stw	r20,4(r8)
 c00f7e8:	d8c01c15 	stw	r3,112(sp)
 c00f7ec:	d8801b15 	stw	r2,108(sp)
 c00f7f0:	010001c4 	movi	r4,7
 c00f7f4:	20808816 	blt	r4,r2,c00fa18 <___svfiprintf_internal_r+0xe18>
 c00f7f8:	42000204 	addi	r8,r8,8
 c00f7fc:	8400010c 	andi	r16,r16,4
 c00f800:	80002c26 	beq	r16,zero,c00f8b4 <___svfiprintf_internal_r+0xcb4>
 c00f804:	d8802517 	ldw	r2,148(sp)
 c00f808:	14a1c83a 	sub	r16,r2,r18
 c00f80c:	0400290e 	bge	zero,r16,c00f8b4 <___svfiprintf_internal_r+0xcb4>
 c00f810:	04400404 	movi	r17,16
 c00f814:	d8801b17 	ldw	r2,108(sp)
 c00f818:	8c01a70e 	bge	r17,r16,c00feb8 <___svfiprintf_internal_r+0x12b8>
 c00f81c:	014300b4 	movhi	r5,3074
 c00f820:	2962f304 	addi	r5,r5,-29748
 c00f824:	d9402815 	stw	r5,160(sp)
 c00f828:	050001c4 	movi	r20,7
 c00f82c:	dd402717 	ldw	r21,156(sp)
 c00f830:	ddc02317 	ldw	r23,140(sp)
 c00f834:	00000306 	br	c00f844 <___svfiprintf_internal_r+0xc44>
 c00f838:	843ffc04 	addi	r16,r16,-16
 c00f83c:	42000204 	addi	r8,r8,8
 c00f840:	8c00130e 	bge	r17,r16,c00f890 <___svfiprintf_internal_r+0xc90>
 c00f844:	010300b4 	movhi	r4,3074
 c00f848:	18c00404 	addi	r3,r3,16
 c00f84c:	10800044 	addi	r2,r2,1
 c00f850:	2122f304 	addi	r4,r4,-29748
 c00f854:	41000015 	stw	r4,0(r8)
 c00f858:	44400115 	stw	r17,4(r8)
 c00f85c:	d8c01c15 	stw	r3,112(sp)
 c00f860:	d8801b15 	stw	r2,108(sp)
 c00f864:	a0bff40e 	bge	r20,r2,c00f838 <__alt_data_end+0xfc00f838>
 c00f868:	d9801a04 	addi	r6,sp,104
 c00f86c:	b80b883a 	mov	r5,r23
 c00f870:	a809883a 	mov	r4,r21
 c00f874:	c00ea300 	call	c00ea30 <__ssprint_r>
 c00f878:	1000211e 	bne	r2,zero,c00f900 <___svfiprintf_internal_r+0xd00>
 c00f87c:	843ffc04 	addi	r16,r16,-16
 c00f880:	d8c01c17 	ldw	r3,112(sp)
 c00f884:	d8801b17 	ldw	r2,108(sp)
 c00f888:	d811883a 	mov	r8,sp
 c00f88c:	8c3fed16 	blt	r17,r16,c00f844 <__alt_data_end+0xfc00f844>
 c00f890:	d9402817 	ldw	r5,160(sp)
 c00f894:	1c07883a 	add	r3,r3,r16
 c00f898:	10800044 	addi	r2,r2,1
 c00f89c:	41400015 	stw	r5,0(r8)
 c00f8a0:	44000115 	stw	r16,4(r8)
 c00f8a4:	d8c01c15 	stw	r3,112(sp)
 c00f8a8:	d8801b15 	stw	r2,108(sp)
 c00f8ac:	010001c4 	movi	r4,7
 c00f8b0:	2080b516 	blt	r4,r2,c00fb88 <___svfiprintf_internal_r+0xf88>
 c00f8b4:	d8802517 	ldw	r2,148(sp)
 c00f8b8:	1480010e 	bge	r2,r18,c00f8c0 <___svfiprintf_internal_r+0xcc0>
 c00f8bc:	9005883a 	mov	r2,r18
 c00f8c0:	d9002617 	ldw	r4,152(sp)
 c00f8c4:	2089883a 	add	r4,r4,r2
 c00f8c8:	d9002615 	stw	r4,152(sp)
 c00f8cc:	18005a1e 	bne	r3,zero,c00fa38 <___svfiprintf_internal_r+0xe38>
 c00f8d0:	98800007 	ldb	r2,0(r19)
 c00f8d4:	d8001b15 	stw	zero,108(sp)
 c00f8d8:	d811883a 	mov	r8,sp
 c00f8dc:	103cec1e 	bne	r2,zero,c00ec90 <__alt_data_end+0xfc00ec90>
 c00f8e0:	9825883a 	mov	r18,r19
 c00f8e4:	003d0206 	br	c00ecf0 <__alt_data_end+0xfc00ecf0>
 c00f8e8:	d8801c17 	ldw	r2,112(sp)
 c00f8ec:	10000426 	beq	r2,zero,c00f900 <___svfiprintf_internal_r+0xd00>
 c00f8f0:	d9402317 	ldw	r5,140(sp)
 c00f8f4:	d9002717 	ldw	r4,156(sp)
 c00f8f8:	d9801a04 	addi	r6,sp,104
 c00f8fc:	c00ea300 	call	c00ea30 <__ssprint_r>
 c00f900:	d9402317 	ldw	r5,140(sp)
 c00f904:	d8802617 	ldw	r2,152(sp)
 c00f908:	28c0030b 	ldhu	r3,12(r5)
 c00f90c:	18c0100c 	andi	r3,r3,64
 c00f910:	18015c1e 	bne	r3,zero,c00fe84 <___svfiprintf_internal_r+0x1284>
 c00f914:	dfc03717 	ldw	ra,220(sp)
 c00f918:	df003617 	ldw	fp,216(sp)
 c00f91c:	ddc03517 	ldw	r23,212(sp)
 c00f920:	dd803417 	ldw	r22,208(sp)
 c00f924:	dd403317 	ldw	r21,204(sp)
 c00f928:	dd003217 	ldw	r20,200(sp)
 c00f92c:	dcc03117 	ldw	r19,196(sp)
 c00f930:	dc803017 	ldw	r18,192(sp)
 c00f934:	dc402f17 	ldw	r17,188(sp)
 c00f938:	dc002e17 	ldw	r16,184(sp)
 c00f93c:	dec03804 	addi	sp,sp,224
 c00f940:	f800283a 	ret
 c00f944:	d9002517 	ldw	r4,148(sp)
 c00f948:	24afc83a 	sub	r23,r4,r18
 c00f94c:	05ff6e0e 	bge	zero,r23,c00f708 <__alt_data_end+0xfc00f708>
 c00f950:	07000404 	movi	fp,16
 c00f954:	e5c15c0e 	bge	fp,r23,c00fec8 <___svfiprintf_internal_r+0x12c8>
 c00f958:	010300b4 	movhi	r4,3074
 c00f95c:	2122ef04 	addi	r4,r4,-29764
 c00f960:	dc002215 	stw	r16,136(sp)
 c00f964:	dc402815 	stw	r17,160(sp)
 c00f968:	d9002115 	stw	r4,132(sp)
 c00f96c:	b823883a 	mov	r17,r23
 c00f970:	054001c4 	movi	r21,7
 c00f974:	982f883a 	mov	r23,r19
 c00f978:	dc002717 	ldw	r16,156(sp)
 c00f97c:	9027883a 	mov	r19,r18
 c00f980:	dc802317 	ldw	r18,140(sp)
 c00f984:	00000306 	br	c00f994 <___svfiprintf_internal_r+0xd94>
 c00f988:	8c7ffc04 	addi	r17,r17,-16
 c00f98c:	42000204 	addi	r8,r8,8
 c00f990:	e440110e 	bge	fp,r17,c00f9d8 <___svfiprintf_internal_r+0xdd8>
 c00f994:	18c00404 	addi	r3,r3,16
 c00f998:	10800044 	addi	r2,r2,1
 c00f99c:	45800015 	stw	r22,0(r8)
 c00f9a0:	47000115 	stw	fp,4(r8)
 c00f9a4:	d8c01c15 	stw	r3,112(sp)
 c00f9a8:	d8801b15 	stw	r2,108(sp)
 c00f9ac:	a8bff60e 	bge	r21,r2,c00f988 <__alt_data_end+0xfc00f988>
 c00f9b0:	d9801a04 	addi	r6,sp,104
 c00f9b4:	900b883a 	mov	r5,r18
 c00f9b8:	8009883a 	mov	r4,r16
 c00f9bc:	c00ea300 	call	c00ea30 <__ssprint_r>
 c00f9c0:	103fcf1e 	bne	r2,zero,c00f900 <__alt_data_end+0xfc00f900>
 c00f9c4:	8c7ffc04 	addi	r17,r17,-16
 c00f9c8:	d8c01c17 	ldw	r3,112(sp)
 c00f9cc:	d8801b17 	ldw	r2,108(sp)
 c00f9d0:	d811883a 	mov	r8,sp
 c00f9d4:	e47fef16 	blt	fp,r17,c00f994 <__alt_data_end+0xfc00f994>
 c00f9d8:	9825883a 	mov	r18,r19
 c00f9dc:	dc002217 	ldw	r16,136(sp)
 c00f9e0:	b827883a 	mov	r19,r23
 c00f9e4:	882f883a 	mov	r23,r17
 c00f9e8:	dc402817 	ldw	r17,160(sp)
 c00f9ec:	d9402117 	ldw	r5,132(sp)
 c00f9f0:	1dc7883a 	add	r3,r3,r23
 c00f9f4:	10800044 	addi	r2,r2,1
 c00f9f8:	41400015 	stw	r5,0(r8)
 c00f9fc:	45c00115 	stw	r23,4(r8)
 c00fa00:	d8c01c15 	stw	r3,112(sp)
 c00fa04:	d8801b15 	stw	r2,108(sp)
 c00fa08:	010001c4 	movi	r4,7
 c00fa0c:	2080b716 	blt	r4,r2,c00fcec <___svfiprintf_internal_r+0x10ec>
 c00fa10:	42000204 	addi	r8,r8,8
 c00fa14:	003f3c06 	br	c00f708 <__alt_data_end+0xfc00f708>
 c00fa18:	d9402317 	ldw	r5,140(sp)
 c00fa1c:	d9002717 	ldw	r4,156(sp)
 c00fa20:	d9801a04 	addi	r6,sp,104
 c00fa24:	c00ea300 	call	c00ea30 <__ssprint_r>
 c00fa28:	103fb51e 	bne	r2,zero,c00f900 <__alt_data_end+0xfc00f900>
 c00fa2c:	d8c01c17 	ldw	r3,112(sp)
 c00fa30:	d811883a 	mov	r8,sp
 c00fa34:	003f7106 	br	c00f7fc <__alt_data_end+0xfc00f7fc>
 c00fa38:	d9402317 	ldw	r5,140(sp)
 c00fa3c:	d9002717 	ldw	r4,156(sp)
 c00fa40:	d9801a04 	addi	r6,sp,104
 c00fa44:	c00ea300 	call	c00ea30 <__ssprint_r>
 c00fa48:	103fa126 	beq	r2,zero,c00f8d0 <__alt_data_end+0xfc00f8d0>
 c00fa4c:	003fac06 	br	c00f900 <__alt_data_end+0xfc00f900>
 c00fa50:	d9402317 	ldw	r5,140(sp)
 c00fa54:	d9002717 	ldw	r4,156(sp)
 c00fa58:	d9801a04 	addi	r6,sp,104
 c00fa5c:	c00ea300 	call	c00ea30 <__ssprint_r>
 c00fa60:	103fa71e 	bne	r2,zero,c00f900 <__alt_data_end+0xfc00f900>
 c00fa64:	d811883a 	mov	r8,sp
 c00fa68:	003c9e06 	br	c00ece4 <__alt_data_end+0xfc00ece4>
 c00fa6c:	d9402317 	ldw	r5,140(sp)
 c00fa70:	d9002717 	ldw	r4,156(sp)
 c00fa74:	d9801a04 	addi	r6,sp,104
 c00fa78:	c00ea300 	call	c00ea30 <__ssprint_r>
 c00fa7c:	103fa01e 	bne	r2,zero,c00f900 <__alt_data_end+0xfc00f900>
 c00fa80:	d8c01c17 	ldw	r3,112(sp)
 c00fa84:	d8801b17 	ldw	r2,108(sp)
 c00fa88:	d811883a 	mov	r8,sp
 c00fa8c:	003f5206 	br	c00f7d8 <__alt_data_end+0xfc00f7d8>
 c00fa90:	d9402317 	ldw	r5,140(sp)
 c00fa94:	d9002717 	ldw	r4,156(sp)
 c00fa98:	d9801a04 	addi	r6,sp,104
 c00fa9c:	c00ea300 	call	c00ea30 <__ssprint_r>
 c00faa0:	103f971e 	bne	r2,zero,c00f900 <__alt_data_end+0xfc00f900>
 c00faa4:	d8c01c17 	ldw	r3,112(sp)
 c00faa8:	d8801b17 	ldw	r2,108(sp)
 c00faac:	d811883a 	mov	r8,sp
 c00fab0:	003f0506 	br	c00f6c8 <__alt_data_end+0xfc00f6c8>
 c00fab4:	d9402317 	ldw	r5,140(sp)
 c00fab8:	d9002717 	ldw	r4,156(sp)
 c00fabc:	d9801a04 	addi	r6,sp,104
 c00fac0:	c00ea300 	call	c00ea30 <__ssprint_r>
 c00fac4:	103f8e1e 	bne	r2,zero,c00f900 <__alt_data_end+0xfc00f900>
 c00fac8:	d8c01c17 	ldw	r3,112(sp)
 c00facc:	d8801b17 	ldw	r2,108(sp)
 c00fad0:	d811883a 	mov	r8,sp
 c00fad4:	003f0906 	br	c00f6fc <__alt_data_end+0xfc00f6fc>
 c00fad8:	d9402017 	ldw	r5,128(sp)
 c00fadc:	d8001d85 	stb	zero,118(sp)
 c00fae0:	28007716 	blt	r5,zero,c00fcc0 <___svfiprintf_internal_r+0x10c0>
 c00fae4:	00ffdfc4 	movi	r3,-129
 c00fae8:	9504b03a 	or	r2,r18,r20
 c00faec:	80e0703a 	and	r16,r16,r3
 c00faf0:	103d3926 	beq	r2,zero,c00efd8 <__alt_data_end+0xfc00efd8>
 c00faf4:	002b883a 	mov	r21,zero
 c00faf8:	003d3c06 	br	c00efec <__alt_data_end+0xfc00efec>
 c00fafc:	d9402317 	ldw	r5,140(sp)
 c00fb00:	d9002717 	ldw	r4,156(sp)
 c00fb04:	d9801a04 	addi	r6,sp,104
 c00fb08:	c00ea300 	call	c00ea30 <__ssprint_r>
 c00fb0c:	103f7c1e 	bne	r2,zero,c00f900 <__alt_data_end+0xfc00f900>
 c00fb10:	d8c01c17 	ldw	r3,112(sp)
 c00fb14:	d8801b17 	ldw	r2,108(sp)
 c00fb18:	d811883a 	mov	r8,sp
 c00fb1c:	003edd06 	br	c00f694 <__alt_data_end+0xfc00f694>
 c00fb20:	8080100c 	andi	r2,r16,64
 c00fb24:	d8001d85 	stb	zero,118(sp)
 c00fb28:	10008426 	beq	r2,zero,c00fd3c <___svfiprintf_internal_r+0x113c>
 c00fb2c:	d9402417 	ldw	r5,144(sp)
 c00fb30:	d8c02017 	ldw	r3,128(sp)
 c00fb34:	0029883a 	mov	r20,zero
 c00fb38:	28800104 	addi	r2,r5,4
 c00fb3c:	2c80000b 	ldhu	r18,0(r5)
 c00fb40:	183eab0e 	bge	r3,zero,c00f5f0 <__alt_data_end+0xfc00f5f0>
 c00fb44:	d8802415 	stw	r2,144(sp)
 c00fb48:	002b883a 	mov	r21,zero
 c00fb4c:	9504b03a 	or	r2,r18,r20
 c00fb50:	103e171e 	bne	r2,zero,c00f3b0 <__alt_data_end+0xfc00f3b0>
 c00fb54:	00800044 	movi	r2,1
 c00fb58:	10803fcc 	andi	r2,r2,255
 c00fb5c:	00c00044 	movi	r3,1
 c00fb60:	10c05c26 	beq	r2,r3,c00fcd4 <___svfiprintf_internal_r+0x10d4>
 c00fb64:	00c00084 	movi	r3,2
 c00fb68:	10fd1e26 	beq	r2,r3,c00efe4 <__alt_data_end+0xfc00efe4>
 c00fb6c:	003ec406 	br	c00f680 <__alt_data_end+0xfc00f680>
 c00fb70:	d9401e17 	ldw	r5,120(sp)
 c00fb74:	2c69c83a 	sub	r20,r5,r17
 c00fb78:	003d4506 	br	c00f090 <__alt_data_end+0xfc00f090>
 c00fb7c:	d8802415 	stw	r2,144(sp)
 c00fb80:	98c00007 	ldb	r3,0(r19)
 c00fb84:	003c6a06 	br	c00ed30 <__alt_data_end+0xfc00ed30>
 c00fb88:	d9402317 	ldw	r5,140(sp)
 c00fb8c:	d9002717 	ldw	r4,156(sp)
 c00fb90:	d9801a04 	addi	r6,sp,104
 c00fb94:	c00ea300 	call	c00ea30 <__ssprint_r>
 c00fb98:	103f591e 	bne	r2,zero,c00f900 <__alt_data_end+0xfc00f900>
 c00fb9c:	d8c01c17 	ldw	r3,112(sp)
 c00fba0:	003f4406 	br	c00f8b4 <__alt_data_end+0xfc00f8b4>
 c00fba4:	014300b4 	movhi	r5,3074
 c00fba8:	29628604 	addi	r5,r5,-30184
 c00fbac:	d9402915 	stw	r5,164(sp)
 c00fbb0:	003d0906 	br	c00efd8 <__alt_data_end+0xfc00efd8>
 c00fbb4:	d8c02417 	ldw	r3,144(sp)
 c00fbb8:	d9002617 	ldw	r4,152(sp)
 c00fbbc:	d9402417 	ldw	r5,144(sp)
 c00fbc0:	18800017 	ldw	r2,0(r3)
 c00fbc4:	2007d7fa 	srai	r3,r4,31
 c00fbc8:	29400104 	addi	r5,r5,4
 c00fbcc:	d9402415 	stw	r5,144(sp)
 c00fbd0:	11000015 	stw	r4,0(r2)
 c00fbd4:	10c00115 	stw	r3,4(r2)
 c00fbd8:	003c2b06 	br	c00ec88 <__alt_data_end+0xfc00ec88>
 c00fbdc:	d8c01d45 	stb	r3,117(sp)
 c00fbe0:	d8c02017 	ldw	r3,128(sp)
 c00fbe4:	00800c04 	movi	r2,48
 c00fbe8:	d8801d05 	stb	r2,116(sp)
 c00fbec:	d8001d85 	stb	zero,118(sp)
 c00fbf0:	80800094 	ori	r2,r16,2
 c00fbf4:	1800ac16 	blt	r3,zero,c00fea8 <___svfiprintf_internal_r+0x12a8>
 c00fbf8:	00bfdfc4 	movi	r2,-129
 c00fbfc:	80a0703a 	and	r16,r16,r2
 c00fc00:	84000094 	ori	r16,r16,2
 c00fc04:	002b883a 	mov	r21,zero
 c00fc08:	003cf806 	br	c00efec <__alt_data_end+0xfc00efec>
 c00fc0c:	98c00007 	ldb	r3,0(r19)
 c00fc10:	003c4706 	br	c00ed30 <__alt_data_end+0xfc00ed30>
 c00fc14:	d9402417 	ldw	r5,144(sp)
 c00fc18:	2c800017 	ldw	r18,0(r5)
 c00fc1c:	29400104 	addi	r5,r5,4
 c00fc20:	d9402415 	stw	r5,144(sp)
 c00fc24:	9029d7fa 	srai	r20,r18,31
 c00fc28:	a005883a 	mov	r2,r20
 c00fc2c:	003dd806 	br	c00f390 <__alt_data_end+0xfc00f390>
 c00fc30:	d9402417 	ldw	r5,144(sp)
 c00fc34:	0029883a 	mov	r20,zero
 c00fc38:	2c800017 	ldw	r18,0(r5)
 c00fc3c:	29400104 	addi	r5,r5,4
 c00fc40:	d9402415 	stw	r5,144(sp)
 c00fc44:	003cdb06 	br	c00efb4 <__alt_data_end+0xfc00efb4>
 c00fc48:	8080100c 	andi	r2,r16,64
 c00fc4c:	d8001d85 	stb	zero,118(sp)
 c00fc50:	10003326 	beq	r2,zero,c00fd20 <___svfiprintf_internal_r+0x1120>
 c00fc54:	d9002417 	ldw	r4,144(sp)
 c00fc58:	d9402017 	ldw	r5,128(sp)
 c00fc5c:	0029883a 	mov	r20,zero
 c00fc60:	20800104 	addi	r2,r4,4
 c00fc64:	2480000b 	ldhu	r18,0(r4)
 c00fc68:	283e7e0e 	bge	r5,zero,c00f664 <__alt_data_end+0xfc00f664>
 c00fc6c:	9506b03a 	or	r3,r18,r20
 c00fc70:	d8802415 	stw	r2,144(sp)
 c00fc74:	183d271e 	bne	r3,zero,c00f114 <__alt_data_end+0xfc00f114>
 c00fc78:	002b883a 	mov	r21,zero
 c00fc7c:	0005883a 	mov	r2,zero
 c00fc80:	003fb506 	br	c00fb58 <__alt_data_end+0xfc00fb58>
 c00fc84:	98c00043 	ldbu	r3,1(r19)
 c00fc88:	8c400814 	ori	r17,r17,32
 c00fc8c:	9cc00044 	addi	r19,r19,1
 c00fc90:	18c03fcc 	andi	r3,r3,255
 c00fc94:	18c0201c 	xori	r3,r3,128
 c00fc98:	18ffe004 	addi	r3,r3,-128
 c00fc9c:	003c2406 	br	c00ed30 <__alt_data_end+0xfc00ed30>
 c00fca0:	d8c02415 	stw	r3,144(sp)
 c00fca4:	002b883a 	mov	r21,zero
 c00fca8:	003fa806 	br	c00fb4c <__alt_data_end+0xfc00fb4c>
 c00fcac:	010300b4 	movhi	r4,3074
 c00fcb0:	21228604 	addi	r4,r4,-30184
 c00fcb4:	d9002915 	stw	r4,164(sp)
 c00fcb8:	d8c02415 	stw	r3,144(sp)
 c00fcbc:	1021883a 	mov	r16,r2
 c00fcc0:	9504b03a 	or	r2,r18,r20
 c00fcc4:	103f8b1e 	bne	r2,zero,c00faf4 <__alt_data_end+0xfc00faf4>
 c00fcc8:	002b883a 	mov	r21,zero
 c00fccc:	00800084 	movi	r2,2
 c00fcd0:	003fa106 	br	c00fb58 <__alt_data_end+0xfc00fb58>
 c00fcd4:	0025883a 	mov	r18,zero
 c00fcd8:	94800c04 	addi	r18,r18,48
 c00fcdc:	dc8019c5 	stb	r18,103(sp)
 c00fce0:	dd002c17 	ldw	r20,176(sp)
 c00fce4:	dc4019c4 	addi	r17,sp,103
 c00fce8:	003ce906 	br	c00f090 <__alt_data_end+0xfc00f090>
 c00fcec:	d9402317 	ldw	r5,140(sp)
 c00fcf0:	d9002717 	ldw	r4,156(sp)
 c00fcf4:	d9801a04 	addi	r6,sp,104
 c00fcf8:	c00ea300 	call	c00ea30 <__ssprint_r>
 c00fcfc:	103f001e 	bne	r2,zero,c00f900 <__alt_data_end+0xfc00f900>
 c00fd00:	d8c01c17 	ldw	r3,112(sp)
 c00fd04:	d8801b17 	ldw	r2,108(sp)
 c00fd08:	d811883a 	mov	r8,sp
 c00fd0c:	003e7e06 	br	c00f708 <__alt_data_end+0xfc00f708>
 c00fd10:	014300b4 	movhi	r5,3074
 c00fd14:	2962ef04 	addi	r5,r5,-29764
 c00fd18:	d9402115 	stw	r5,132(sp)
 c00fd1c:	003ea406 	br	c00f7b0 <__alt_data_end+0xfc00f7b0>
 c00fd20:	d8c02417 	ldw	r3,144(sp)
 c00fd24:	d9002017 	ldw	r4,128(sp)
 c00fd28:	0029883a 	mov	r20,zero
 c00fd2c:	18800104 	addi	r2,r3,4
 c00fd30:	1c800017 	ldw	r18,0(r3)
 c00fd34:	203e4b0e 	bge	r4,zero,c00f664 <__alt_data_end+0xfc00f664>
 c00fd38:	003fcc06 	br	c00fc6c <__alt_data_end+0xfc00fc6c>
 c00fd3c:	d9002417 	ldw	r4,144(sp)
 c00fd40:	d9402017 	ldw	r5,128(sp)
 c00fd44:	0029883a 	mov	r20,zero
 c00fd48:	20800104 	addi	r2,r4,4
 c00fd4c:	24800017 	ldw	r18,0(r4)
 c00fd50:	283e270e 	bge	r5,zero,c00f5f0 <__alt_data_end+0xfc00f5f0>
 c00fd54:	003f7b06 	br	c00fb44 <__alt_data_end+0xfc00fb44>
 c00fd58:	8400100c 	andi	r16,r16,64
 c00fd5c:	80003326 	beq	r16,zero,c00fe2c <___svfiprintf_internal_r+0x122c>
 c00fd60:	d9402417 	ldw	r5,144(sp)
 c00fd64:	d8c02617 	ldw	r3,152(sp)
 c00fd68:	28800017 	ldw	r2,0(r5)
 c00fd6c:	29400104 	addi	r5,r5,4
 c00fd70:	d9402415 	stw	r5,144(sp)
 c00fd74:	10c0000d 	sth	r3,0(r2)
 c00fd78:	003bc306 	br	c00ec88 <__alt_data_end+0xfc00ec88>
 c00fd7c:	d9002417 	ldw	r4,144(sp)
 c00fd80:	0029883a 	mov	r20,zero
 c00fd84:	24800017 	ldw	r18,0(r4)
 c00fd88:	21000104 	addi	r4,r4,4
 c00fd8c:	d9002415 	stw	r4,144(sp)
 c00fd90:	003c8806 	br	c00efb4 <__alt_data_end+0xfc00efb4>
 c00fd94:	d8c02417 	ldw	r3,144(sp)
 c00fd98:	1c800017 	ldw	r18,0(r3)
 c00fd9c:	18c00104 	addi	r3,r3,4
 c00fda0:	d8c02415 	stw	r3,144(sp)
 c00fda4:	9029d7fa 	srai	r20,r18,31
 c00fda8:	a005883a 	mov	r2,r20
 c00fdac:	003d7806 	br	c00f390 <__alt_data_end+0xfc00f390>
 c00fdb0:	8809883a 	mov	r4,r17
 c00fdb4:	da002d15 	stw	r8,180(sp)
 c00fdb8:	c0058f40 	call	c0058f4 <strlen>
 c00fdbc:	1029883a 	mov	r20,r2
 c00fdc0:	dd401d83 	ldbu	r21,118(sp)
 c00fdc4:	ddc02415 	stw	r23,144(sp)
 c00fdc8:	d8002015 	stw	zero,128(sp)
 c00fdcc:	da002d17 	ldw	r8,180(sp)
 c00fdd0:	003caf06 	br	c00f090 <__alt_data_end+0xfc00f090>
 c00fdd4:	013fffc4 	movi	r4,-1
 c00fdd8:	003df206 	br	c00f5a4 <__alt_data_end+0xfc00f5a4>
 c00fddc:	dd002017 	ldw	r20,128(sp)
 c00fde0:	00800184 	movi	r2,6
 c00fde4:	1500012e 	bgeu	r2,r20,c00fdec <___svfiprintf_internal_r+0x11ec>
 c00fde8:	1029883a 	mov	r20,r2
 c00fdec:	a025883a 	mov	r18,r20
 c00fdf0:	a0004116 	blt	r20,zero,c00fef8 <___svfiprintf_internal_r+0x12f8>
 c00fdf4:	044300b4 	movhi	r17,3074
 c00fdf8:	ddc02415 	stw	r23,144(sp)
 c00fdfc:	8c628b04 	addi	r17,r17,-30164
 c00fe00:	003ce806 	br	c00f1a4 <__alt_data_end+0xfc00f1a4>
 c00fe04:	04001004 	movi	r16,64
 c00fe08:	800b883a 	mov	r5,r16
 c00fe0c:	c004ccc0 	call	c004ccc <_malloc_r>
 c00fe10:	d8c02317 	ldw	r3,140(sp)
 c00fe14:	18800015 	stw	r2,0(r3)
 c00fe18:	18800415 	stw	r2,16(r3)
 c00fe1c:	10004d26 	beq	r2,zero,c00ff54 <___svfiprintf_internal_r+0x1354>
 c00fe20:	d9402317 	ldw	r5,140(sp)
 c00fe24:	2c000515 	stw	r16,20(r5)
 c00fe28:	003b8906 	br	c00ec50 <__alt_data_end+0xfc00ec50>
 c00fe2c:	d9002417 	ldw	r4,144(sp)
 c00fe30:	d9402617 	ldw	r5,152(sp)
 c00fe34:	20800017 	ldw	r2,0(r4)
 c00fe38:	21000104 	addi	r4,r4,4
 c00fe3c:	d9002415 	stw	r4,144(sp)
 c00fe40:	11400015 	stw	r5,0(r2)
 c00fe44:	003b9006 	br	c00ec88 <__alt_data_end+0xfc00ec88>
 c00fe48:	8080004c 	andi	r2,r16,1
 c00fe4c:	002b883a 	mov	r21,zero
 c00fe50:	10000526 	beq	r2,zero,c00fe68 <___svfiprintf_internal_r+0x1268>
 c00fe54:	00800c04 	movi	r2,48
 c00fe58:	d88019c5 	stb	r2,103(sp)
 c00fe5c:	dd002c17 	ldw	r20,176(sp)
 c00fe60:	dc4019c4 	addi	r17,sp,103
 c00fe64:	003c8a06 	br	c00f090 <__alt_data_end+0xfc00f090>
 c00fe68:	0029883a 	mov	r20,zero
 c00fe6c:	dc401a04 	addi	r17,sp,104
 c00fe70:	003c8706 	br	c00f090 <__alt_data_end+0xfc00f090>
 c00fe74:	014300b4 	movhi	r5,3074
 c00fe78:	2962f304 	addi	r5,r5,-29748
 c00fe7c:	d9402815 	stw	r5,160(sp)
 c00fe80:	003cff06 	br	c00f280 <__alt_data_end+0xfc00f280>
 c00fe84:	00bfffc4 	movi	r2,-1
 c00fe88:	003ea206 	br	c00f914 <__alt_data_end+0xfc00f914>
 c00fe8c:	00800044 	movi	r2,1
 c00fe90:	10803fcc 	andi	r2,r2,255
 c00fe94:	00c00044 	movi	r3,1
 c00fe98:	10fd4526 	beq	r2,r3,c00f3b0 <__alt_data_end+0xfc00f3b0>
 c00fe9c:	00c00084 	movi	r3,2
 c00fea0:	10fc5226 	beq	r2,r3,c00efec <__alt_data_end+0xfc00efec>
 c00fea4:	003c9c06 	br	c00f118 <__alt_data_end+0xfc00f118>
 c00fea8:	1021883a 	mov	r16,r2
 c00feac:	002b883a 	mov	r21,zero
 c00feb0:	00800084 	movi	r2,2
 c00feb4:	003ff606 	br	c00fe90 <__alt_data_end+0xfc00fe90>
 c00feb8:	010300b4 	movhi	r4,3074
 c00febc:	2122f304 	addi	r4,r4,-29748
 c00fec0:	d9002815 	stw	r4,160(sp)
 c00fec4:	003e7206 	br	c00f890 <__alt_data_end+0xfc00f890>
 c00fec8:	014300b4 	movhi	r5,3074
 c00fecc:	2962ef04 	addi	r5,r5,-29764
 c00fed0:	d9402115 	stw	r5,132(sp)
 c00fed4:	003ec506 	br	c00f9ec <__alt_data_end+0xfc00f9ec>
 c00fed8:	e027883a 	mov	r19,fp
 c00fedc:	d8002015 	stw	zero,128(sp)
 c00fee0:	003b9406 	br	c00ed34 <__alt_data_end+0xfc00ed34>
 c00fee4:	dd002017 	ldw	r20,128(sp)
 c00fee8:	dd401d83 	ldbu	r21,118(sp)
 c00feec:	ddc02415 	stw	r23,144(sp)
 c00fef0:	d8002015 	stw	zero,128(sp)
 c00fef4:	003c6606 	br	c00f090 <__alt_data_end+0xfc00f090>
 c00fef8:	0025883a 	mov	r18,zero
 c00fefc:	003fbd06 	br	c00fdf4 <__alt_data_end+0xfc00fdf4>
 c00ff00:	d9402417 	ldw	r5,144(sp)
 c00ff04:	d8c02417 	ldw	r3,144(sp)
 c00ff08:	29400017 	ldw	r5,0(r5)
 c00ff0c:	19000104 	addi	r4,r3,4
 c00ff10:	d9002415 	stw	r4,144(sp)
 c00ff14:	d9402015 	stw	r5,128(sp)
 c00ff18:	98c00043 	ldbu	r3,1(r19)
 c00ff1c:	e027883a 	mov	r19,fp
 c00ff20:	283f5b0e 	bge	r5,zero,c00fc90 <__alt_data_end+0xfc00fc90>
 c00ff24:	18c03fcc 	andi	r3,r3,255
 c00ff28:	013fffc4 	movi	r4,-1
 c00ff2c:	18c0201c 	xori	r3,r3,128
 c00ff30:	d9002015 	stw	r4,128(sp)
 c00ff34:	18ffe004 	addi	r3,r3,-128
 c00ff38:	003b7d06 	br	c00ed30 <__alt_data_end+0xfc00ed30>
 c00ff3c:	dd401d85 	stb	r21,118(sp)
 c00ff40:	003cf306 	br	c00f310 <__alt_data_end+0xfc00f310>
 c00ff44:	dd401d85 	stb	r21,118(sp)
 c00ff48:	003d4e06 	br	c00f484 <__alt_data_end+0xfc00f484>
 c00ff4c:	dd401d85 	stb	r21,118(sp)
 c00ff50:	003c0e06 	br	c00ef8c <__alt_data_end+0xfc00ef8c>
 c00ff54:	d9002717 	ldw	r4,156(sp)
 c00ff58:	00800304 	movi	r2,12
 c00ff5c:	20800015 	stw	r2,0(r4)
 c00ff60:	00bfffc4 	movi	r2,-1
 c00ff64:	003e6b06 	br	c00f914 <__alt_data_end+0xfc00f914>
 c00ff68:	dd401d85 	stb	r21,118(sp)
 c00ff6c:	003d0006 	br	c00f370 <__alt_data_end+0xfc00f370>
 c00ff70:	dd401d85 	stb	r21,118(sp)
 c00ff74:	003d7106 	br	c00f53c <__alt_data_end+0xfc00f53c>
 c00ff78:	dd401d85 	stb	r21,118(sp)
 c00ff7c:	003c5706 	br	c00f0dc <__alt_data_end+0xfc00f0dc>
 c00ff80:	dd401d85 	stb	r21,118(sp)
 c00ff84:	003c2e06 	br	c00f040 <__alt_data_end+0xfc00f040>
 c00ff88:	dd401d85 	stb	r21,118(sp)
 c00ff8c:	003d8c06 	br	c00f5c0 <__alt_data_end+0xfc00f5c0>
 c00ff90:	dd401d85 	stb	r21,118(sp)
 c00ff94:	003da706 	br	c00f634 <__alt_data_end+0xfc00f634>
 c00ff98:	dd401d85 	stb	r21,118(sp)
 c00ff9c:	003cc806 	br	c00f2c0 <__alt_data_end+0xfc00f2c0>

0c00ffa0 <__sprint_r.part.0>:
 c00ffa0:	28801917 	ldw	r2,100(r5)
 c00ffa4:	defff604 	addi	sp,sp,-40
 c00ffa8:	dd400515 	stw	r21,20(sp)
 c00ffac:	dfc00915 	stw	ra,36(sp)
 c00ffb0:	df000815 	stw	fp,32(sp)
 c00ffb4:	ddc00715 	stw	r23,28(sp)
 c00ffb8:	dd800615 	stw	r22,24(sp)
 c00ffbc:	dd000415 	stw	r20,16(sp)
 c00ffc0:	dcc00315 	stw	r19,12(sp)
 c00ffc4:	dc800215 	stw	r18,8(sp)
 c00ffc8:	dc400115 	stw	r17,4(sp)
 c00ffcc:	dc000015 	stw	r16,0(sp)
 c00ffd0:	1088000c 	andi	r2,r2,8192
 c00ffd4:	302b883a 	mov	r21,r6
 c00ffd8:	10002e26 	beq	r2,zero,c010094 <__sprint_r.part.0+0xf4>
 c00ffdc:	30800217 	ldw	r2,8(r6)
 c00ffe0:	35800017 	ldw	r22,0(r6)
 c00ffe4:	10002926 	beq	r2,zero,c01008c <__sprint_r.part.0+0xec>
 c00ffe8:	2827883a 	mov	r19,r5
 c00ffec:	2029883a 	mov	r20,r4
 c00fff0:	b5c00104 	addi	r23,r22,4
 c00fff4:	04bfffc4 	movi	r18,-1
 c00fff8:	bc400017 	ldw	r17,0(r23)
 c00fffc:	b4000017 	ldw	r16,0(r22)
 c010000:	0039883a 	mov	fp,zero
 c010004:	8822d0ba 	srli	r17,r17,2
 c010008:	8800031e 	bne	r17,zero,c010018 <__sprint_r.part.0+0x78>
 c01000c:	00001806 	br	c010070 <__sprint_r.part.0+0xd0>
 c010010:	84000104 	addi	r16,r16,4
 c010014:	8f001526 	beq	r17,fp,c01006c <__sprint_r.part.0+0xcc>
 c010018:	81400017 	ldw	r5,0(r16)
 c01001c:	980d883a 	mov	r6,r19
 c010020:	a009883a 	mov	r4,r20
 c010024:	c011a900 	call	c011a90 <_fputwc_r>
 c010028:	e7000044 	addi	fp,fp,1
 c01002c:	14bff81e 	bne	r2,r18,c010010 <__alt_data_end+0xfc010010>
 c010030:	9005883a 	mov	r2,r18
 c010034:	a8000215 	stw	zero,8(r21)
 c010038:	a8000115 	stw	zero,4(r21)
 c01003c:	dfc00917 	ldw	ra,36(sp)
 c010040:	df000817 	ldw	fp,32(sp)
 c010044:	ddc00717 	ldw	r23,28(sp)
 c010048:	dd800617 	ldw	r22,24(sp)
 c01004c:	dd400517 	ldw	r21,20(sp)
 c010050:	dd000417 	ldw	r20,16(sp)
 c010054:	dcc00317 	ldw	r19,12(sp)
 c010058:	dc800217 	ldw	r18,8(sp)
 c01005c:	dc400117 	ldw	r17,4(sp)
 c010060:	dc000017 	ldw	r16,0(sp)
 c010064:	dec00a04 	addi	sp,sp,40
 c010068:	f800283a 	ret
 c01006c:	a8800217 	ldw	r2,8(r21)
 c010070:	8c63883a 	add	r17,r17,r17
 c010074:	8c63883a 	add	r17,r17,r17
 c010078:	1445c83a 	sub	r2,r2,r17
 c01007c:	a8800215 	stw	r2,8(r21)
 c010080:	b5800204 	addi	r22,r22,8
 c010084:	bdc00204 	addi	r23,r23,8
 c010088:	103fdb1e 	bne	r2,zero,c00fff8 <__alt_data_end+0xfc00fff8>
 c01008c:	0005883a 	mov	r2,zero
 c010090:	003fe806 	br	c010034 <__alt_data_end+0xfc010034>
 c010094:	c00c4dc0 	call	c00c4dc <__sfvwrite_r>
 c010098:	003fe606 	br	c010034 <__alt_data_end+0xfc010034>

0c01009c <__sprint_r>:
 c01009c:	30c00217 	ldw	r3,8(r6)
 c0100a0:	18000126 	beq	r3,zero,c0100a8 <__sprint_r+0xc>
 c0100a4:	c00ffa01 	jmpi	c00ffa0 <__sprint_r.part.0>
 c0100a8:	30000115 	stw	zero,4(r6)
 c0100ac:	0005883a 	mov	r2,zero
 c0100b0:	f800283a 	ret

0c0100b4 <___vfiprintf_internal_r>:
 c0100b4:	deffca04 	addi	sp,sp,-216
 c0100b8:	dd403115 	stw	r21,196(sp)
 c0100bc:	dfc03515 	stw	ra,212(sp)
 c0100c0:	df003415 	stw	fp,208(sp)
 c0100c4:	ddc03315 	stw	r23,204(sp)
 c0100c8:	dd803215 	stw	r22,200(sp)
 c0100cc:	dd003015 	stw	r20,192(sp)
 c0100d0:	dcc02f15 	stw	r19,188(sp)
 c0100d4:	dc802e15 	stw	r18,184(sp)
 c0100d8:	dc402d15 	stw	r17,180(sp)
 c0100dc:	dc002c15 	stw	r16,176(sp)
 c0100e0:	d9002115 	stw	r4,132(sp)
 c0100e4:	d9402015 	stw	r5,128(sp)
 c0100e8:	d9c02215 	stw	r7,136(sp)
 c0100ec:	302b883a 	mov	r21,r6
 c0100f0:	20000226 	beq	r4,zero,c0100fc <___vfiprintf_internal_r+0x48>
 c0100f4:	20800e17 	ldw	r2,56(r4)
 c0100f8:	1000cf26 	beq	r2,zero,c010438 <___vfiprintf_internal_r+0x384>
 c0100fc:	d8c02017 	ldw	r3,128(sp)
 c010100:	1880030b 	ldhu	r2,12(r3)
 c010104:	10c8000c 	andi	r3,r2,8192
 c010108:	1800071e 	bne	r3,zero,c010128 <___vfiprintf_internal_r+0x74>
 c01010c:	d9402017 	ldw	r5,128(sp)
 c010110:	00f7ffc4 	movi	r3,-8193
 c010114:	10880014 	ori	r2,r2,8192
 c010118:	29001917 	ldw	r4,100(r5)
 c01011c:	2880030d 	sth	r2,12(r5)
 c010120:	20c6703a 	and	r3,r4,r3
 c010124:	28c01915 	stw	r3,100(r5)
 c010128:	10c0020c 	andi	r3,r2,8
 c01012c:	1800a526 	beq	r3,zero,c0103c4 <___vfiprintf_internal_r+0x310>
 c010130:	d9002017 	ldw	r4,128(sp)
 c010134:	20c00417 	ldw	r3,16(r4)
 c010138:	1800a226 	beq	r3,zero,c0103c4 <___vfiprintf_internal_r+0x310>
 c01013c:	1080068c 	andi	r2,r2,26
 c010140:	00c00284 	movi	r3,10
 c010144:	10c0a826 	beq	r2,r3,c0103e8 <___vfiprintf_internal_r+0x334>
 c010148:	d9001a04 	addi	r4,sp,104
 c01014c:	d94019c4 	addi	r5,sp,103
 c010150:	048300b4 	movhi	r18,3074
 c010154:	2145c83a 	sub	r2,r4,r5
 c010158:	94a2f704 	addi	r18,r18,-29732
 c01015c:	d9001e15 	stw	r4,120(sp)
 c010160:	d9401f15 	stw	r5,124(sp)
 c010164:	dec01a15 	stw	sp,104(sp)
 c010168:	d8001c15 	stw	zero,112(sp)
 c01016c:	d8001b15 	stw	zero,108(sp)
 c010170:	d811883a 	mov	r8,sp
 c010174:	d8002615 	stw	zero,152(sp)
 c010178:	d8002415 	stw	zero,144(sp)
 c01017c:	d8802815 	stw	r2,160(sp)
 c010180:	a82d883a 	mov	r22,r21
 c010184:	b0800007 	ldb	r2,0(r22)
 c010188:	10040d26 	beq	r2,zero,c0111c0 <___vfiprintf_internal_r+0x110c>
 c01018c:	00c00944 	movi	r3,37
 c010190:	b029883a 	mov	r20,r22
 c010194:	10c0021e 	bne	r2,r3,c0101a0 <___vfiprintf_internal_r+0xec>
 c010198:	00001606 	br	c0101f4 <___vfiprintf_internal_r+0x140>
 c01019c:	10c00326 	beq	r2,r3,c0101ac <___vfiprintf_internal_r+0xf8>
 c0101a0:	a5000044 	addi	r20,r20,1
 c0101a4:	a0800007 	ldb	r2,0(r20)
 c0101a8:	103ffc1e 	bne	r2,zero,c01019c <__alt_data_end+0xfc01019c>
 c0101ac:	a5a1c83a 	sub	r16,r20,r22
 c0101b0:	80001026 	beq	r16,zero,c0101f4 <___vfiprintf_internal_r+0x140>
 c0101b4:	d8c01c17 	ldw	r3,112(sp)
 c0101b8:	d8801b17 	ldw	r2,108(sp)
 c0101bc:	45800015 	stw	r22,0(r8)
 c0101c0:	80c7883a 	add	r3,r16,r3
 c0101c4:	10800044 	addi	r2,r2,1
 c0101c8:	44000115 	stw	r16,4(r8)
 c0101cc:	d8c01c15 	stw	r3,112(sp)
 c0101d0:	d8801b15 	stw	r2,108(sp)
 c0101d4:	010001c4 	movi	r4,7
 c0101d8:	2080750e 	bge	r4,r2,c0103b0 <___vfiprintf_internal_r+0x2fc>
 c0101dc:	1803951e 	bne	r3,zero,c011034 <___vfiprintf_internal_r+0xf80>
 c0101e0:	d8c02417 	ldw	r3,144(sp)
 c0101e4:	d8001b15 	stw	zero,108(sp)
 c0101e8:	d811883a 	mov	r8,sp
 c0101ec:	1c07883a 	add	r3,r3,r16
 c0101f0:	d8c02415 	stw	r3,144(sp)
 c0101f4:	a0800007 	ldb	r2,0(r20)
 c0101f8:	1002e026 	beq	r2,zero,c010d7c <___vfiprintf_internal_r+0xcc8>
 c0101fc:	a5800044 	addi	r22,r20,1
 c010200:	a0c00047 	ldb	r3,1(r20)
 c010204:	d8001d85 	stb	zero,118(sp)
 c010208:	0027883a 	mov	r19,zero
 c01020c:	d8002305 	stb	zero,140(sp)
 c010210:	043fffc4 	movi	r16,-1
 c010214:	d8002515 	stw	zero,148(sp)
 c010218:	0023883a 	mov	r17,zero
 c01021c:	05001604 	movi	r20,88
 c010220:	05400244 	movi	r21,9
 c010224:	402f883a 	mov	r23,r8
 c010228:	b5800044 	addi	r22,r22,1
 c01022c:	18bff804 	addi	r2,r3,-32
 c010230:	a0827736 	bltu	r20,r2,c010c10 <___vfiprintf_internal_r+0xb5c>
 c010234:	100490ba 	slli	r2,r2,2
 c010238:	01030074 	movhi	r4,3073
 c01023c:	21009304 	addi	r4,r4,588
 c010240:	1105883a 	add	r2,r2,r4
 c010244:	10800017 	ldw	r2,0(r2)
 c010248:	1000683a 	jmp	r2
 c01024c:	0c010910 	cmplti	r16,at,1060
 c010250:	0c010c10 	cmplti	r16,at,1072
 c010254:	0c010c10 	cmplti	r16,at,1072
 c010258:	0c01092c 	andhi	r16,at,1060
 c01025c:	0c010c10 	cmplti	r16,at,1072
 c010260:	0c010c10 	cmplti	r16,at,1072
 c010264:	0c010c10 	cmplti	r16,at,1072
 c010268:	0c010c10 	cmplti	r16,at,1072
 c01026c:	0c010c10 	cmplti	r16,at,1072
 c010270:	0c010c10 	cmplti	r16,at,1072
 c010274:	0c010b34 	orhi	r16,at,1068
 c010278:	0c010b58 	cmpnei	r16,at,1069
 c01027c:	0c010c10 	cmplti	r16,at,1072
 c010280:	0c010450 	cmplti	r16,at,1041
 c010284:	0c010b6c 	andhi	r16,at,1069
 c010288:	0c010c10 	cmplti	r16,at,1072
 c01028c:	0c010938 	rdprs	r16,at,1060
 c010290:	0c010944 	addi	r16,at,1061
 c010294:	0c010944 	addi	r16,at,1061
 c010298:	0c010944 	addi	r16,at,1061
 c01029c:	0c010944 	addi	r16,at,1061
 c0102a0:	0c010944 	addi	r16,at,1061
 c0102a4:	0c010944 	addi	r16,at,1061
 c0102a8:	0c010944 	addi	r16,at,1061
 c0102ac:	0c010944 	addi	r16,at,1061
 c0102b0:	0c010944 	addi	r16,at,1061
 c0102b4:	0c010c10 	cmplti	r16,at,1072
 c0102b8:	0c010c10 	cmplti	r16,at,1072
 c0102bc:	0c010c10 	cmplti	r16,at,1072
 c0102c0:	0c010c10 	cmplti	r16,at,1072
 c0102c4:	0c010c10 	cmplti	r16,at,1072
 c0102c8:	0c010c10 	cmplti	r16,at,1072
 c0102cc:	0c010c10 	cmplti	r16,at,1072
 c0102d0:	0c010c10 	cmplti	r16,at,1072
 c0102d4:	0c010c10 	cmplti	r16,at,1072
 c0102d8:	0c010c10 	cmplti	r16,at,1072
 c0102dc:	0c010984 	addi	r16,at,1062
 c0102e0:	0c010c10 	cmplti	r16,at,1072
 c0102e4:	0c010c10 	cmplti	r16,at,1072
 c0102e8:	0c010c10 	cmplti	r16,at,1072
 c0102ec:	0c010c10 	cmplti	r16,at,1072
 c0102f0:	0c010c10 	cmplti	r16,at,1072
 c0102f4:	0c010c10 	cmplti	r16,at,1072
 c0102f8:	0c010c10 	cmplti	r16,at,1072
 c0102fc:	0c010c10 	cmplti	r16,at,1072
 c010300:	0c010c10 	cmplti	r16,at,1072
 c010304:	0c010c10 	cmplti	r16,at,1072
 c010308:	0c0109c0 	call	c0109c <__alt_mem_onchip_memory2_0+0xc0109c>
 c01030c:	0c010c10 	cmplti	r16,at,1072
 c010310:	0c010c10 	cmplti	r16,at,1072
 c010314:	0c010c10 	cmplti	r16,at,1072
 c010318:	0c010c10 	cmplti	r16,at,1072
 c01031c:	0c010c10 	cmplti	r16,at,1072
 c010320:	0c010a1c 	xori	r16,at,1064
 c010324:	0c010c10 	cmplti	r16,at,1072
 c010328:	0c010c10 	cmplti	r16,at,1072
 c01032c:	0c010a90 	cmplti	r16,at,1066
 c010330:	0c010c10 	cmplti	r16,at,1072
 c010334:	0c010c10 	cmplti	r16,at,1072
 c010338:	0c010c10 	cmplti	r16,at,1072
 c01033c:	0c010c10 	cmplti	r16,at,1072
 c010340:	0c010c10 	cmplti	r16,at,1072
 c010344:	0c010c10 	cmplti	r16,at,1072
 c010348:	0c010c10 	cmplti	r16,at,1072
 c01034c:	0c010c10 	cmplti	r16,at,1072
 c010350:	0c010c10 	cmplti	r16,at,1072
 c010354:	0c010c10 	cmplti	r16,at,1072
 c010358:	0c010838 	rdprs	r16,at,1056
 c01035c:	0c010868 	cmpgeui	r16,at,1057
 c010360:	0c010c10 	cmplti	r16,at,1072
 c010364:	0c010c10 	cmplti	r16,at,1072
 c010368:	0c010c10 	cmplti	r16,at,1072
 c01036c:	0c010bb8 	rdprs	r16,at,1070
 c010370:	0c010868 	cmpgeui	r16,at,1057
 c010374:	0c010c10 	cmplti	r16,at,1072
 c010378:	0c010c10 	cmplti	r16,at,1072
 c01037c:	0c010710 	cmplti	r16,at,1052
 c010380:	0c010c10 	cmplti	r16,at,1072
 c010384:	0c010724 	muli	r16,at,1052
 c010388:	0c01075c 	xori	r16,at,1053
 c01038c:	0c01045c 	xori	r16,at,1041
 c010390:	0c010704 	addi	r16,at,1052
 c010394:	0c010c10 	cmplti	r16,at,1072
 c010398:	0c010ad0 	cmplti	r16,at,1067
 c01039c:	0c010c10 	cmplti	r16,at,1072
 c0103a0:	0c010b1c 	xori	r16,at,1068
 c0103a4:	0c010c10 	cmplti	r16,at,1072
 c0103a8:	0c010c10 	cmplti	r16,at,1072
 c0103ac:	0c0107e0 	cmpeqi	r16,at,1055
 c0103b0:	42000204 	addi	r8,r8,8
 c0103b4:	d8c02417 	ldw	r3,144(sp)
 c0103b8:	1c07883a 	add	r3,r3,r16
 c0103bc:	d8c02415 	stw	r3,144(sp)
 c0103c0:	003f8c06 	br	c0101f4 <__alt_data_end+0xfc0101f4>
 c0103c4:	d9402017 	ldw	r5,128(sp)
 c0103c8:	d9002117 	ldw	r4,132(sp)
 c0103cc:	c00a04c0 	call	c00a04c <__swsetup_r>
 c0103d0:	1003c11e 	bne	r2,zero,c0112d8 <___vfiprintf_internal_r+0x1224>
 c0103d4:	d9402017 	ldw	r5,128(sp)
 c0103d8:	00c00284 	movi	r3,10
 c0103dc:	2880030b 	ldhu	r2,12(r5)
 c0103e0:	1080068c 	andi	r2,r2,26
 c0103e4:	10ff581e 	bne	r2,r3,c010148 <__alt_data_end+0xfc010148>
 c0103e8:	d8c02017 	ldw	r3,128(sp)
 c0103ec:	1880038f 	ldh	r2,14(r3)
 c0103f0:	103f5516 	blt	r2,zero,c010148 <__alt_data_end+0xfc010148>
 c0103f4:	d9c02217 	ldw	r7,136(sp)
 c0103f8:	d9002117 	ldw	r4,132(sp)
 c0103fc:	a80d883a 	mov	r6,r21
 c010400:	180b883a 	mov	r5,r3
 c010404:	c0115dc0 	call	c0115dc <__sbprintf>
 c010408:	dfc03517 	ldw	ra,212(sp)
 c01040c:	df003417 	ldw	fp,208(sp)
 c010410:	ddc03317 	ldw	r23,204(sp)
 c010414:	dd803217 	ldw	r22,200(sp)
 c010418:	dd403117 	ldw	r21,196(sp)
 c01041c:	dd003017 	ldw	r20,192(sp)
 c010420:	dcc02f17 	ldw	r19,188(sp)
 c010424:	dc802e17 	ldw	r18,184(sp)
 c010428:	dc402d17 	ldw	r17,180(sp)
 c01042c:	dc002c17 	ldw	r16,176(sp)
 c010430:	dec03604 	addi	sp,sp,216
 c010434:	f800283a 	ret
 c010438:	c00c0580 	call	c00c058 <__sinit>
 c01043c:	003f2f06 	br	c0100fc <__alt_data_end+0xfc0100fc>
 c010440:	d8c02517 	ldw	r3,148(sp)
 c010444:	d8802215 	stw	r2,136(sp)
 c010448:	00c7c83a 	sub	r3,zero,r3
 c01044c:	d8c02515 	stw	r3,148(sp)
 c010450:	8c400114 	ori	r17,r17,4
 c010454:	b0c00007 	ldb	r3,0(r22)
 c010458:	003f7306 	br	c010228 <__alt_data_end+0xfc010228>
 c01045c:	00800c04 	movi	r2,48
 c010460:	d9402217 	ldw	r5,136(sp)
 c010464:	d8801d05 	stb	r2,116(sp)
 c010468:	00801e04 	movi	r2,120
 c01046c:	d8801d45 	stb	r2,117(sp)
 c010470:	d8001d85 	stb	zero,118(sp)
 c010474:	b811883a 	mov	r8,r23
 c010478:	28c00104 	addi	r3,r5,4
 c01047c:	2cc00017 	ldw	r19,0(r5)
 c010480:	0029883a 	mov	r20,zero
 c010484:	88800094 	ori	r2,r17,2
 c010488:	80032516 	blt	r16,zero,c011120 <___vfiprintf_internal_r+0x106c>
 c01048c:	00bfdfc4 	movi	r2,-129
 c010490:	88a2703a 	and	r17,r17,r2
 c010494:	d8c02215 	stw	r3,136(sp)
 c010498:	8c400094 	ori	r17,r17,2
 c01049c:	98032a1e 	bne	r19,zero,c011148 <___vfiprintf_internal_r+0x1094>
 c0104a0:	008300b4 	movhi	r2,3074
 c0104a4:	10a28604 	addi	r2,r2,-30184
 c0104a8:	d8802615 	stw	r2,152(sp)
 c0104ac:	002b883a 	mov	r21,zero
 c0104b0:	8001741e 	bne	r16,zero,c010a84 <___vfiprintf_internal_r+0x9d0>
 c0104b4:	0021883a 	mov	r16,zero
 c0104b8:	0029883a 	mov	r20,zero
 c0104bc:	ddc01a04 	addi	r23,sp,104
 c0104c0:	8027883a 	mov	r19,r16
 c0104c4:	8500010e 	bge	r16,r20,c0104cc <___vfiprintf_internal_r+0x418>
 c0104c8:	a027883a 	mov	r19,r20
 c0104cc:	ad403fcc 	andi	r21,r21,255
 c0104d0:	ad40201c 	xori	r21,r21,128
 c0104d4:	ad7fe004 	addi	r21,r21,-128
 c0104d8:	a8000126 	beq	r21,zero,c0104e0 <___vfiprintf_internal_r+0x42c>
 c0104dc:	9cc00044 	addi	r19,r19,1
 c0104e0:	89c0008c 	andi	r7,r17,2
 c0104e4:	38000126 	beq	r7,zero,c0104ec <___vfiprintf_internal_r+0x438>
 c0104e8:	9cc00084 	addi	r19,r19,2
 c0104ec:	88c0210c 	andi	r3,r17,132
 c0104f0:	1801dd1e 	bne	r3,zero,c010c68 <___vfiprintf_internal_r+0xbb4>
 c0104f4:	d9402517 	ldw	r5,148(sp)
 c0104f8:	2cebc83a 	sub	r21,r5,r19
 c0104fc:	0541da0e 	bge	zero,r21,c010c68 <___vfiprintf_internal_r+0xbb4>
 c010500:	07000404 	movi	fp,16
 c010504:	d8801c17 	ldw	r2,112(sp)
 c010508:	e543be0e 	bge	fp,r21,c011404 <___vfiprintf_internal_r+0x1350>
 c01050c:	014300b4 	movhi	r5,3074
 c010510:	2962fb04 	addi	r5,r5,-29716
 c010514:	dc002715 	stw	r16,156(sp)
 c010518:	d9801b17 	ldw	r6,108(sp)
 c01051c:	a821883a 	mov	r16,r21
 c010520:	d9402315 	stw	r5,140(sp)
 c010524:	028001c4 	movi	r10,7
 c010528:	d9c02915 	stw	r7,164(sp)
 c01052c:	182b883a 	mov	r21,r3
 c010530:	00000506 	br	c010548 <___vfiprintf_internal_r+0x494>
 c010534:	31000084 	addi	r4,r6,2
 c010538:	42000204 	addi	r8,r8,8
 c01053c:	180d883a 	mov	r6,r3
 c010540:	843ffc04 	addi	r16,r16,-16
 c010544:	e4000f0e 	bge	fp,r16,c010584 <___vfiprintf_internal_r+0x4d0>
 c010548:	010300b4 	movhi	r4,3074
 c01054c:	10800404 	addi	r2,r2,16
 c010550:	30c00044 	addi	r3,r6,1
 c010554:	2122fb04 	addi	r4,r4,-29716
 c010558:	41000015 	stw	r4,0(r8)
 c01055c:	47000115 	stw	fp,4(r8)
 c010560:	d8801c15 	stw	r2,112(sp)
 c010564:	d8c01b15 	stw	r3,108(sp)
 c010568:	50fff20e 	bge	r10,r3,c010534 <__alt_data_end+0xfc010534>
 c01056c:	1001b21e 	bne	r2,zero,c010c38 <___vfiprintf_internal_r+0xb84>
 c010570:	843ffc04 	addi	r16,r16,-16
 c010574:	000d883a 	mov	r6,zero
 c010578:	01000044 	movi	r4,1
 c01057c:	d811883a 	mov	r8,sp
 c010580:	e43ff116 	blt	fp,r16,c010548 <__alt_data_end+0xfc010548>
 c010584:	a807883a 	mov	r3,r21
 c010588:	d9c02917 	ldw	r7,164(sp)
 c01058c:	802b883a 	mov	r21,r16
 c010590:	dc002717 	ldw	r16,156(sp)
 c010594:	d9402317 	ldw	r5,140(sp)
 c010598:	a885883a 	add	r2,r21,r2
 c01059c:	45400115 	stw	r21,4(r8)
 c0105a0:	41400015 	stw	r5,0(r8)
 c0105a4:	d8801c15 	stw	r2,112(sp)
 c0105a8:	d9001b15 	stw	r4,108(sp)
 c0105ac:	014001c4 	movi	r5,7
 c0105b0:	29026216 	blt	r5,r4,c010f3c <___vfiprintf_internal_r+0xe88>
 c0105b4:	d9801d87 	ldb	r6,118(sp)
 c0105b8:	42000204 	addi	r8,r8,8
 c0105bc:	21400044 	addi	r5,r4,1
 c0105c0:	3001ae1e 	bne	r6,zero,c010c7c <___vfiprintf_internal_r+0xbc8>
 c0105c4:	3801bb26 	beq	r7,zero,c010cb4 <___vfiprintf_internal_r+0xc00>
 c0105c8:	d9001d04 	addi	r4,sp,116
 c0105cc:	10800084 	addi	r2,r2,2
 c0105d0:	41000015 	stw	r4,0(r8)
 c0105d4:	01000084 	movi	r4,2
 c0105d8:	41000115 	stw	r4,4(r8)
 c0105dc:	d8801c15 	stw	r2,112(sp)
 c0105e0:	d9401b15 	stw	r5,108(sp)
 c0105e4:	010001c4 	movi	r4,7
 c0105e8:	2142680e 	bge	r4,r5,c010f8c <___vfiprintf_internal_r+0xed8>
 c0105ec:	1002b11e 	bne	r2,zero,c0110b4 <___vfiprintf_internal_r+0x1000>
 c0105f0:	01802004 	movi	r6,128
 c0105f4:	01400044 	movi	r5,1
 c0105f8:	0009883a 	mov	r4,zero
 c0105fc:	d811883a 	mov	r8,sp
 c010600:	1981ae1e 	bne	r3,r6,c010cbc <___vfiprintf_internal_r+0xc08>
 c010604:	d8c02517 	ldw	r3,148(sp)
 c010608:	1cf9c83a 	sub	fp,r3,r19
 c01060c:	0701ab0e 	bge	zero,fp,c010cbc <___vfiprintf_internal_r+0xc08>
 c010610:	05400404 	movi	r21,16
 c010614:	af03a90e 	bge	r21,fp,c0114bc <___vfiprintf_internal_r+0x1408>
 c010618:	014300b4 	movhi	r5,3074
 c01061c:	2962f704 	addi	r5,r5,-29732
 c010620:	d9402315 	stw	r5,140(sp)
 c010624:	01c001c4 	movi	r7,7
 c010628:	00000506 	br	c010640 <___vfiprintf_internal_r+0x58c>
 c01062c:	21800084 	addi	r6,r4,2
 c010630:	42000204 	addi	r8,r8,8
 c010634:	1809883a 	mov	r4,r3
 c010638:	e73ffc04 	addi	fp,fp,-16
 c01063c:	af000d0e 	bge	r21,fp,c010674 <___vfiprintf_internal_r+0x5c0>
 c010640:	10800404 	addi	r2,r2,16
 c010644:	20c00044 	addi	r3,r4,1
 c010648:	44800015 	stw	r18,0(r8)
 c01064c:	45400115 	stw	r21,4(r8)
 c010650:	d8801c15 	stw	r2,112(sp)
 c010654:	d8c01b15 	stw	r3,108(sp)
 c010658:	38fff40e 	bge	r7,r3,c01062c <__alt_data_end+0xfc01062c>
 c01065c:	10022b1e 	bne	r2,zero,c010f0c <___vfiprintf_internal_r+0xe58>
 c010660:	e73ffc04 	addi	fp,fp,-16
 c010664:	01800044 	movi	r6,1
 c010668:	0009883a 	mov	r4,zero
 c01066c:	d811883a 	mov	r8,sp
 c010670:	af3ff316 	blt	r21,fp,c010640 <__alt_data_end+0xfc010640>
 c010674:	d8c02317 	ldw	r3,140(sp)
 c010678:	1705883a 	add	r2,r2,fp
 c01067c:	47000115 	stw	fp,4(r8)
 c010680:	40c00015 	stw	r3,0(r8)
 c010684:	d8801c15 	stw	r2,112(sp)
 c010688:	d9801b15 	stw	r6,108(sp)
 c01068c:	00c001c4 	movi	r3,7
 c010690:	19829416 	blt	r3,r6,c0110e4 <___vfiprintf_internal_r+0x1030>
 c010694:	8521c83a 	sub	r16,r16,r20
 c010698:	42000204 	addi	r8,r8,8
 c01069c:	31400044 	addi	r5,r6,1
 c0106a0:	3009883a 	mov	r4,r6
 c0106a4:	04018716 	blt	zero,r16,c010cc4 <___vfiprintf_internal_r+0xc10>
 c0106a8:	a085883a 	add	r2,r20,r2
 c0106ac:	45c00015 	stw	r23,0(r8)
 c0106b0:	45000115 	stw	r20,4(r8)
 c0106b4:	d8801c15 	stw	r2,112(sp)
 c0106b8:	d9401b15 	stw	r5,108(sp)
 c0106bc:	00c001c4 	movi	r3,7
 c0106c0:	1941c20e 	bge	r3,r5,c010dcc <___vfiprintf_internal_r+0xd18>
 c0106c4:	1002531e 	bne	r2,zero,c011014 <___vfiprintf_internal_r+0xf60>
 c0106c8:	d8001b15 	stw	zero,108(sp)
 c0106cc:	8c40010c 	andi	r17,r17,4
 c0106d0:	88023226 	beq	r17,zero,c010f9c <___vfiprintf_internal_r+0xee8>
 c0106d4:	d9002517 	ldw	r4,148(sp)
 c0106d8:	24e3c83a 	sub	r17,r4,r19
 c0106dc:	04432916 	blt	zero,r17,c011384 <___vfiprintf_internal_r+0x12d0>
 c0106e0:	d8802517 	ldw	r2,148(sp)
 c0106e4:	14c0010e 	bge	r2,r19,c0106ec <___vfiprintf_internal_r+0x638>
 c0106e8:	9805883a 	mov	r2,r19
 c0106ec:	d8c02417 	ldw	r3,144(sp)
 c0106f0:	1887883a 	add	r3,r3,r2
 c0106f4:	d8c02415 	stw	r3,144(sp)
 c0106f8:	d8001b15 	stw	zero,108(sp)
 c0106fc:	d811883a 	mov	r8,sp
 c010700:	003ea006 	br	c010184 <__alt_data_end+0xfc010184>
 c010704:	8c400814 	ori	r17,r17,32
 c010708:	b0c00007 	ldb	r3,0(r22)
 c01070c:	003ec606 	br	c010228 <__alt_data_end+0xfc010228>
 c010710:	b0c00007 	ldb	r3,0(r22)
 c010714:	00801b04 	movi	r2,108
 c010718:	18832026 	beq	r3,r2,c01139c <___vfiprintf_internal_r+0x12e8>
 c01071c:	8c400414 	ori	r17,r17,16
 c010720:	003ec106 	br	c010228 <__alt_data_end+0xfc010228>
 c010724:	9cc03fcc 	andi	r19,r19,255
 c010728:	b811883a 	mov	r8,r23
 c01072c:	9803981e 	bne	r19,zero,c011590 <___vfiprintf_internal_r+0x14dc>
 c010730:	8880080c 	andi	r2,r17,32
 c010734:	1002be26 	beq	r2,zero,c011230 <___vfiprintf_internal_r+0x117c>
 c010738:	d9002217 	ldw	r4,136(sp)
 c01073c:	d9402417 	ldw	r5,144(sp)
 c010740:	20800017 	ldw	r2,0(r4)
 c010744:	2807d7fa 	srai	r3,r5,31
 c010748:	21000104 	addi	r4,r4,4
 c01074c:	d9002215 	stw	r4,136(sp)
 c010750:	11400015 	stw	r5,0(r2)
 c010754:	10c00115 	stw	r3,4(r2)
 c010758:	003e8a06 	br	c010184 <__alt_data_end+0xfc010184>
 c01075c:	9cc03fcc 	andi	r19,r19,255
 c010760:	b811883a 	mov	r8,r23
 c010764:	9803871e 	bne	r19,zero,c011584 <___vfiprintf_internal_r+0x14d0>
 c010768:	8880080c 	andi	r2,r17,32
 c01076c:	10009a26 	beq	r2,zero,c0109d8 <___vfiprintf_internal_r+0x924>
 c010770:	d9002217 	ldw	r4,136(sp)
 c010774:	d8001d85 	stb	zero,118(sp)
 c010778:	20800204 	addi	r2,r4,8
 c01077c:	24c00017 	ldw	r19,0(r4)
 c010780:	25000117 	ldw	r20,4(r4)
 c010784:	8002a416 	blt	r16,zero,c011218 <___vfiprintf_internal_r+0x1164>
 c010788:	013fdfc4 	movi	r4,-129
 c01078c:	9d06b03a 	or	r3,r19,r20
 c010790:	d8802215 	stw	r2,136(sp)
 c010794:	8922703a 	and	r17,r17,r4
 c010798:	18009b26 	beq	r3,zero,c010a08 <___vfiprintf_internal_r+0x954>
 c01079c:	002b883a 	mov	r21,zero
 c0107a0:	ddc01a04 	addi	r23,sp,104
 c0107a4:	9806d0fa 	srli	r3,r19,3
 c0107a8:	a008977a 	slli	r4,r20,29
 c0107ac:	a028d0fa 	srli	r20,r20,3
 c0107b0:	9cc001cc 	andi	r19,r19,7
 c0107b4:	98800c04 	addi	r2,r19,48
 c0107b8:	bdffffc4 	addi	r23,r23,-1
 c0107bc:	20e6b03a 	or	r19,r4,r3
 c0107c0:	b8800005 	stb	r2,0(r23)
 c0107c4:	9d06b03a 	or	r3,r19,r20
 c0107c8:	183ff61e 	bne	r3,zero,c0107a4 <__alt_data_end+0xfc0107a4>
 c0107cc:	88c0004c 	andi	r3,r17,1
 c0107d0:	18021f1e 	bne	r3,zero,c011050 <___vfiprintf_internal_r+0xf9c>
 c0107d4:	d9401e17 	ldw	r5,120(sp)
 c0107d8:	2de9c83a 	sub	r20,r5,r23
 c0107dc:	003f3806 	br	c0104c0 <__alt_data_end+0xfc0104c0>
 c0107e0:	9cc03fcc 	andi	r19,r19,255
 c0107e4:	b811883a 	mov	r8,r23
 c0107e8:	98034f1e 	bne	r19,zero,c011528 <___vfiprintf_internal_r+0x1474>
 c0107ec:	008300b4 	movhi	r2,3074
 c0107f0:	10a28604 	addi	r2,r2,-30184
 c0107f4:	d8802615 	stw	r2,152(sp)
 c0107f8:	8880080c 	andi	r2,r17,32
 c0107fc:	1000ac26 	beq	r2,zero,c010ab0 <___vfiprintf_internal_r+0x9fc>
 c010800:	d9002217 	ldw	r4,136(sp)
 c010804:	24c00017 	ldw	r19,0(r4)
 c010808:	25000117 	ldw	r20,4(r4)
 c01080c:	21000204 	addi	r4,r4,8
 c010810:	d9002215 	stw	r4,136(sp)
 c010814:	8880004c 	andi	r2,r17,1
 c010818:	1001e726 	beq	r2,zero,c010fb8 <___vfiprintf_internal_r+0xf04>
 c01081c:	9d04b03a 	or	r2,r19,r20
 c010820:	10025c1e 	bne	r2,zero,c011194 <___vfiprintf_internal_r+0x10e0>
 c010824:	d8001d85 	stb	zero,118(sp)
 c010828:	80024416 	blt	r16,zero,c01113c <___vfiprintf_internal_r+0x1088>
 c01082c:	00bfdfc4 	movi	r2,-129
 c010830:	88a2703a 	and	r17,r17,r2
 c010834:	003f1d06 	br	c0104ac <__alt_data_end+0xfc0104ac>
 c010838:	d8c02217 	ldw	r3,136(sp)
 c01083c:	04c00044 	movi	r19,1
 c010840:	b811883a 	mov	r8,r23
 c010844:	18800017 	ldw	r2,0(r3)
 c010848:	18c00104 	addi	r3,r3,4
 c01084c:	d8001d85 	stb	zero,118(sp)
 c010850:	d8801005 	stb	r2,64(sp)
 c010854:	d8c02215 	stw	r3,136(sp)
 c010858:	9829883a 	mov	r20,r19
 c01085c:	ddc01004 	addi	r23,sp,64
 c010860:	0021883a 	mov	r16,zero
 c010864:	003f1e06 	br	c0104e0 <__alt_data_end+0xfc0104e0>
 c010868:	9cc03fcc 	andi	r19,r19,255
 c01086c:	b811883a 	mov	r8,r23
 c010870:	9803331e 	bne	r19,zero,c011540 <___vfiprintf_internal_r+0x148c>
 c010874:	8880080c 	andi	r2,r17,32
 c010878:	10004826 	beq	r2,zero,c01099c <___vfiprintf_internal_r+0x8e8>
 c01087c:	d9002217 	ldw	r4,136(sp)
 c010880:	20800117 	ldw	r2,4(r4)
 c010884:	24c00017 	ldw	r19,0(r4)
 c010888:	21000204 	addi	r4,r4,8
 c01088c:	d9002215 	stw	r4,136(sp)
 c010890:	1029883a 	mov	r20,r2
 c010894:	10024c16 	blt	r2,zero,c0111c8 <___vfiprintf_internal_r+0x1114>
 c010898:	dd401d83 	ldbu	r21,118(sp)
 c01089c:	80007116 	blt	r16,zero,c010a64 <___vfiprintf_internal_r+0x9b0>
 c0108a0:	00ffdfc4 	movi	r3,-129
 c0108a4:	9d04b03a 	or	r2,r19,r20
 c0108a8:	88e2703a 	and	r17,r17,r3
 c0108ac:	1000d126 	beq	r2,zero,c010bf4 <___vfiprintf_internal_r+0xb40>
 c0108b0:	a0023526 	beq	r20,zero,c011188 <___vfiprintf_internal_r+0x10d4>
 c0108b4:	ddc01a04 	addi	r23,sp,104
 c0108b8:	4039883a 	mov	fp,r8
 c0108bc:	9809883a 	mov	r4,r19
 c0108c0:	a00b883a 	mov	r5,r20
 c0108c4:	01800284 	movi	r6,10
 c0108c8:	000f883a 	mov	r7,zero
 c0108cc:	c0126ec0 	call	c0126ec <__umoddi3>
 c0108d0:	10800c04 	addi	r2,r2,48
 c0108d4:	bdffffc4 	addi	r23,r23,-1
 c0108d8:	9809883a 	mov	r4,r19
 c0108dc:	a00b883a 	mov	r5,r20
 c0108e0:	b8800005 	stb	r2,0(r23)
 c0108e4:	01800284 	movi	r6,10
 c0108e8:	000f883a 	mov	r7,zero
 c0108ec:	c0120f00 	call	c0120f0 <__udivdi3>
 c0108f0:	1027883a 	mov	r19,r2
 c0108f4:	10c4b03a 	or	r2,r2,r3
 c0108f8:	1829883a 	mov	r20,r3
 c0108fc:	103fef1e 	bne	r2,zero,c0108bc <__alt_data_end+0xfc0108bc>
 c010900:	d9001e17 	ldw	r4,120(sp)
 c010904:	e011883a 	mov	r8,fp
 c010908:	25e9c83a 	sub	r20,r4,r23
 c01090c:	003eec06 	br	c0104c0 <__alt_data_end+0xfc0104c0>
 c010910:	d8802307 	ldb	r2,140(sp)
 c010914:	1002361e 	bne	r2,zero,c0111f0 <___vfiprintf_internal_r+0x113c>
 c010918:	00c00804 	movi	r3,32
 c01091c:	d8c02305 	stb	r3,140(sp)
 c010920:	04c00044 	movi	r19,1
 c010924:	b0c00007 	ldb	r3,0(r22)
 c010928:	003e3f06 	br	c010228 <__alt_data_end+0xfc010228>
 c01092c:	8c400054 	ori	r17,r17,1
 c010930:	b0c00007 	ldb	r3,0(r22)
 c010934:	003e3c06 	br	c010228 <__alt_data_end+0xfc010228>
 c010938:	8c402014 	ori	r17,r17,128
 c01093c:	b0c00007 	ldb	r3,0(r22)
 c010940:	003e3906 	br	c010228 <__alt_data_end+0xfc010228>
 c010944:	dc002715 	stw	r16,156(sp)
 c010948:	d8002515 	stw	zero,148(sp)
 c01094c:	1f3ff404 	addi	fp,r3,-48
 c010950:	0009883a 	mov	r4,zero
 c010954:	b021883a 	mov	r16,r22
 c010958:	01400284 	movi	r5,10
 c01095c:	c004c7c0 	call	c004c7c <__mulsi3>
 c010960:	80c00007 	ldb	r3,0(r16)
 c010964:	e089883a 	add	r4,fp,r2
 c010968:	b5800044 	addi	r22,r22,1
 c01096c:	1f3ff404 	addi	fp,r3,-48
 c010970:	b021883a 	mov	r16,r22
 c010974:	af3ff82e 	bgeu	r21,fp,c010958 <__alt_data_end+0xfc010958>
 c010978:	d9002515 	stw	r4,148(sp)
 c01097c:	dc002717 	ldw	r16,156(sp)
 c010980:	003e2a06 	br	c01022c <__alt_data_end+0xfc01022c>
 c010984:	9cc03fcc 	andi	r19,r19,255
 c010988:	b811883a 	mov	r8,r23
 c01098c:	9802e91e 	bne	r19,zero,c011534 <___vfiprintf_internal_r+0x1480>
 c010990:	8c400414 	ori	r17,r17,16
 c010994:	8880080c 	andi	r2,r17,32
 c010998:	103fb81e 	bne	r2,zero,c01087c <__alt_data_end+0xfc01087c>
 c01099c:	8880040c 	andi	r2,r17,16
 c0109a0:	10022e26 	beq	r2,zero,c01125c <___vfiprintf_internal_r+0x11a8>
 c0109a4:	d9402217 	ldw	r5,136(sp)
 c0109a8:	2cc00017 	ldw	r19,0(r5)
 c0109ac:	29400104 	addi	r5,r5,4
 c0109b0:	d9402215 	stw	r5,136(sp)
 c0109b4:	9829d7fa 	srai	r20,r19,31
 c0109b8:	a005883a 	mov	r2,r20
 c0109bc:	003fb506 	br	c010894 <__alt_data_end+0xfc010894>
 c0109c0:	9cc03fcc 	andi	r19,r19,255
 c0109c4:	b811883a 	mov	r8,r23
 c0109c8:	9802fa1e 	bne	r19,zero,c0115b4 <___vfiprintf_internal_r+0x1500>
 c0109cc:	8c400414 	ori	r17,r17,16
 c0109d0:	8880080c 	andi	r2,r17,32
 c0109d4:	103f661e 	bne	r2,zero,c010770 <__alt_data_end+0xfc010770>
 c0109d8:	8880040c 	andi	r2,r17,16
 c0109dc:	10020626 	beq	r2,zero,c0111f8 <___vfiprintf_internal_r+0x1144>
 c0109e0:	d9402217 	ldw	r5,136(sp)
 c0109e4:	d8001d85 	stb	zero,118(sp)
 c0109e8:	0029883a 	mov	r20,zero
 c0109ec:	28800104 	addi	r2,r5,4
 c0109f0:	2cc00017 	ldw	r19,0(r5)
 c0109f4:	80020816 	blt	r16,zero,c011218 <___vfiprintf_internal_r+0x1164>
 c0109f8:	00ffdfc4 	movi	r3,-129
 c0109fc:	d8802215 	stw	r2,136(sp)
 c010a00:	88e2703a 	and	r17,r17,r3
 c010a04:	983f651e 	bne	r19,zero,c01079c <__alt_data_end+0xfc01079c>
 c010a08:	002b883a 	mov	r21,zero
 c010a0c:	8002cf26 	beq	r16,zero,c01154c <___vfiprintf_internal_r+0x1498>
 c010a10:	0027883a 	mov	r19,zero
 c010a14:	0029883a 	mov	r20,zero
 c010a18:	003f6106 	br	c0107a0 <__alt_data_end+0xfc0107a0>
 c010a1c:	9cc03fcc 	andi	r19,r19,255
 c010a20:	b811883a 	mov	r8,r23
 c010a24:	9802e01e 	bne	r19,zero,c0115a8 <___vfiprintf_internal_r+0x14f4>
 c010a28:	8c400414 	ori	r17,r17,16
 c010a2c:	8880080c 	andi	r2,r17,32
 c010a30:	1000641e 	bne	r2,zero,c010bc4 <___vfiprintf_internal_r+0xb10>
 c010a34:	8880040c 	andi	r2,r17,16
 c010a38:	1001c81e 	bne	r2,zero,c01115c <___vfiprintf_internal_r+0x10a8>
 c010a3c:	8880100c 	andi	r2,r17,64
 c010a40:	d8001d85 	stb	zero,118(sp)
 c010a44:	1002281e 	bne	r2,zero,c0112e8 <___vfiprintf_internal_r+0x1234>
 c010a48:	d9002217 	ldw	r4,136(sp)
 c010a4c:	0029883a 	mov	r20,zero
 c010a50:	20800104 	addi	r2,r4,4
 c010a54:	24c00017 	ldw	r19,0(r4)
 c010a58:	8001c60e 	bge	r16,zero,c011174 <___vfiprintf_internal_r+0x10c0>
 c010a5c:	d8802215 	stw	r2,136(sp)
 c010a60:	002b883a 	mov	r21,zero
 c010a64:	9d04b03a 	or	r2,r19,r20
 c010a68:	103f911e 	bne	r2,zero,c0108b0 <__alt_data_end+0xfc0108b0>
 c010a6c:	00800044 	movi	r2,1
 c010a70:	10803fcc 	andi	r2,r2,255
 c010a74:	00c00044 	movi	r3,1
 c010a78:	10c05f26 	beq	r2,r3,c010bf8 <___vfiprintf_internal_r+0xb44>
 c010a7c:	00c00084 	movi	r3,2
 c010a80:	10ffe31e 	bne	r2,r3,c010a10 <__alt_data_end+0xfc010a10>
 c010a84:	0027883a 	mov	r19,zero
 c010a88:	0029883a 	mov	r20,zero
 c010a8c:	00015106 	br	c010fd4 <___vfiprintf_internal_r+0xf20>
 c010a90:	9cc03fcc 	andi	r19,r19,255
 c010a94:	b811883a 	mov	r8,r23
 c010a98:	9802c01e 	bne	r19,zero,c01159c <___vfiprintf_internal_r+0x14e8>
 c010a9c:	014300b4 	movhi	r5,3074
 c010aa0:	29628104 	addi	r5,r5,-30204
 c010aa4:	d9402615 	stw	r5,152(sp)
 c010aa8:	8880080c 	andi	r2,r17,32
 c010aac:	103f541e 	bne	r2,zero,c010800 <__alt_data_end+0xfc010800>
 c010ab0:	8880040c 	andi	r2,r17,16
 c010ab4:	1001f226 	beq	r2,zero,c011280 <___vfiprintf_internal_r+0x11cc>
 c010ab8:	d9402217 	ldw	r5,136(sp)
 c010abc:	0029883a 	mov	r20,zero
 c010ac0:	2cc00017 	ldw	r19,0(r5)
 c010ac4:	29400104 	addi	r5,r5,4
 c010ac8:	d9402215 	stw	r5,136(sp)
 c010acc:	003f5106 	br	c010814 <__alt_data_end+0xfc010814>
 c010ad0:	d8c02217 	ldw	r3,136(sp)
 c010ad4:	b811883a 	mov	r8,r23
 c010ad8:	d8001d85 	stb	zero,118(sp)
 c010adc:	1dc00017 	ldw	r23,0(r3)
 c010ae0:	1f000104 	addi	fp,r3,4
 c010ae4:	b8025926 	beq	r23,zero,c01144c <___vfiprintf_internal_r+0x1398>
 c010ae8:	80023316 	blt	r16,zero,c0113b8 <___vfiprintf_internal_r+0x1304>
 c010aec:	800d883a 	mov	r6,r16
 c010af0:	000b883a 	mov	r5,zero
 c010af4:	b809883a 	mov	r4,r23
 c010af8:	da002a15 	stw	r8,168(sp)
 c010afc:	c00ce200 	call	c00ce20 <memchr>
 c010b00:	da002a17 	ldw	r8,168(sp)
 c010b04:	10026826 	beq	r2,zero,c0114a8 <___vfiprintf_internal_r+0x13f4>
 c010b08:	15e9c83a 	sub	r20,r2,r23
 c010b0c:	dd401d83 	ldbu	r21,118(sp)
 c010b10:	df002215 	stw	fp,136(sp)
 c010b14:	0021883a 	mov	r16,zero
 c010b18:	003e6906 	br	c0104c0 <__alt_data_end+0xfc0104c0>
 c010b1c:	9cc03fcc 	andi	r19,r19,255
 c010b20:	b811883a 	mov	r8,r23
 c010b24:	983fc126 	beq	r19,zero,c010a2c <__alt_data_end+0xfc010a2c>
 c010b28:	d8c02303 	ldbu	r3,140(sp)
 c010b2c:	d8c01d85 	stb	r3,118(sp)
 c010b30:	003fbe06 	br	c010a2c <__alt_data_end+0xfc010a2c>
 c010b34:	d9002217 	ldw	r4,136(sp)
 c010b38:	d9402217 	ldw	r5,136(sp)
 c010b3c:	21000017 	ldw	r4,0(r4)
 c010b40:	28800104 	addi	r2,r5,4
 c010b44:	d9002515 	stw	r4,148(sp)
 c010b48:	203e3d16 	blt	r4,zero,c010440 <__alt_data_end+0xfc010440>
 c010b4c:	d8802215 	stw	r2,136(sp)
 c010b50:	b0c00007 	ldb	r3,0(r22)
 c010b54:	003db406 	br	c010228 <__alt_data_end+0xfc010228>
 c010b58:	00c00ac4 	movi	r3,43
 c010b5c:	d8c02305 	stb	r3,140(sp)
 c010b60:	04c00044 	movi	r19,1
 c010b64:	b0c00007 	ldb	r3,0(r22)
 c010b68:	003daf06 	br	c010228 <__alt_data_end+0xfc010228>
 c010b6c:	b0c00007 	ldb	r3,0(r22)
 c010b70:	01000a84 	movi	r4,42
 c010b74:	b4000044 	addi	r16,r22,1
 c010b78:	19025e26 	beq	r3,r4,c0114f4 <___vfiprintf_internal_r+0x1440>
 c010b7c:	1f3ff404 	addi	fp,r3,-48
 c010b80:	0009883a 	mov	r4,zero
 c010b84:	af025236 	bltu	r21,fp,c0114d0 <___vfiprintf_internal_r+0x141c>
 c010b88:	01400284 	movi	r5,10
 c010b8c:	c004c7c0 	call	c004c7c <__mulsi3>
 c010b90:	80c00007 	ldb	r3,0(r16)
 c010b94:	1709883a 	add	r4,r2,fp
 c010b98:	85800044 	addi	r22,r16,1
 c010b9c:	1f3ff404 	addi	fp,r3,-48
 c010ba0:	b021883a 	mov	r16,r22
 c010ba4:	af3ff82e 	bgeu	r21,fp,c010b88 <__alt_data_end+0xfc010b88>
 c010ba8:	2021883a 	mov	r16,r4
 c010bac:	203d9f0e 	bge	r4,zero,c01022c <__alt_data_end+0xfc01022c>
 c010bb0:	043fffc4 	movi	r16,-1
 c010bb4:	003d9d06 	br	c01022c <__alt_data_end+0xfc01022c>
 c010bb8:	8c401014 	ori	r17,r17,64
 c010bbc:	b0c00007 	ldb	r3,0(r22)
 c010bc0:	003d9906 	br	c010228 <__alt_data_end+0xfc010228>
 c010bc4:	d9002217 	ldw	r4,136(sp)
 c010bc8:	d8001d85 	stb	zero,118(sp)
 c010bcc:	20c00204 	addi	r3,r4,8
 c010bd0:	24c00017 	ldw	r19,0(r4)
 c010bd4:	25000117 	ldw	r20,4(r4)
 c010bd8:	8001e716 	blt	r16,zero,c011378 <___vfiprintf_internal_r+0x12c4>
 c010bdc:	013fdfc4 	movi	r4,-129
 c010be0:	9d04b03a 	or	r2,r19,r20
 c010be4:	d8c02215 	stw	r3,136(sp)
 c010be8:	8922703a 	and	r17,r17,r4
 c010bec:	002b883a 	mov	r21,zero
 c010bf0:	103f2f1e 	bne	r2,zero,c0108b0 <__alt_data_end+0xfc0108b0>
 c010bf4:	803e2f26 	beq	r16,zero,c0104b4 <__alt_data_end+0xfc0104b4>
 c010bf8:	0027883a 	mov	r19,zero
 c010bfc:	9cc00c04 	addi	r19,r19,48
 c010c00:	dcc019c5 	stb	r19,103(sp)
 c010c04:	dd002817 	ldw	r20,160(sp)
 c010c08:	ddc019c4 	addi	r23,sp,103
 c010c0c:	003e2c06 	br	c0104c0 <__alt_data_end+0xfc0104c0>
 c010c10:	9cc03fcc 	andi	r19,r19,255
 c010c14:	b811883a 	mov	r8,r23
 c010c18:	9802571e 	bne	r19,zero,c011578 <___vfiprintf_internal_r+0x14c4>
 c010c1c:	18005726 	beq	r3,zero,c010d7c <___vfiprintf_internal_r+0xcc8>
 c010c20:	04c00044 	movi	r19,1
 c010c24:	d8c01005 	stb	r3,64(sp)
 c010c28:	d8001d85 	stb	zero,118(sp)
 c010c2c:	9829883a 	mov	r20,r19
 c010c30:	ddc01004 	addi	r23,sp,64
 c010c34:	003f0a06 	br	c010860 <__alt_data_end+0xfc010860>
 c010c38:	d9402017 	ldw	r5,128(sp)
 c010c3c:	d9002117 	ldw	r4,132(sp)
 c010c40:	d9801a04 	addi	r6,sp,104
 c010c44:	da802a15 	stw	r10,168(sp)
 c010c48:	c00ffa00 	call	c00ffa0 <__sprint_r.part.0>
 c010c4c:	da802a17 	ldw	r10,168(sp)
 c010c50:	1000501e 	bne	r2,zero,c010d94 <___vfiprintf_internal_r+0xce0>
 c010c54:	d9801b17 	ldw	r6,108(sp)
 c010c58:	d8801c17 	ldw	r2,112(sp)
 c010c5c:	d811883a 	mov	r8,sp
 c010c60:	31000044 	addi	r4,r6,1
 c010c64:	003e3606 	br	c010540 <__alt_data_end+0xfc010540>
 c010c68:	d9001b17 	ldw	r4,108(sp)
 c010c6c:	d8801c17 	ldw	r2,112(sp)
 c010c70:	21400044 	addi	r5,r4,1
 c010c74:	d9801d87 	ldb	r6,118(sp)
 c010c78:	303e5226 	beq	r6,zero,c0105c4 <__alt_data_end+0xfc0105c4>
 c010c7c:	01800044 	movi	r6,1
 c010c80:	d9001d84 	addi	r4,sp,118
 c010c84:	1185883a 	add	r2,r2,r6
 c010c88:	41000015 	stw	r4,0(r8)
 c010c8c:	41800115 	stw	r6,4(r8)
 c010c90:	d8801c15 	stw	r2,112(sp)
 c010c94:	d9401b15 	stw	r5,108(sp)
 c010c98:	010001c4 	movi	r4,7
 c010c9c:	2140b00e 	bge	r4,r5,c010f60 <___vfiprintf_internal_r+0xeac>
 c010ca0:	1000f61e 	bne	r2,zero,c01107c <___vfiprintf_internal_r+0xfc8>
 c010ca4:	3800b31e 	bne	r7,zero,c010f74 <___vfiprintf_internal_r+0xec0>
 c010ca8:	0009883a 	mov	r4,zero
 c010cac:	300b883a 	mov	r5,r6
 c010cb0:	d811883a 	mov	r8,sp
 c010cb4:	01802004 	movi	r6,128
 c010cb8:	19be5226 	beq	r3,r6,c010604 <__alt_data_end+0xfc010604>
 c010cbc:	8521c83a 	sub	r16,r16,r20
 c010cc0:	043e790e 	bge	zero,r16,c0106a8 <__alt_data_end+0xfc0106a8>
 c010cc4:	05400404 	movi	r21,16
 c010cc8:	ac01b00e 	bge	r21,r16,c01138c <___vfiprintf_internal_r+0x12d8>
 c010ccc:	014300b4 	movhi	r5,3074
 c010cd0:	2962f704 	addi	r5,r5,-29732
 c010cd4:	d9402315 	stw	r5,140(sp)
 c010cd8:	070001c4 	movi	fp,7
 c010cdc:	00000506 	br	c010cf4 <___vfiprintf_internal_r+0xc40>
 c010ce0:	21400084 	addi	r5,r4,2
 c010ce4:	42000204 	addi	r8,r8,8
 c010ce8:	1809883a 	mov	r4,r3
 c010cec:	843ffc04 	addi	r16,r16,-16
 c010cf0:	ac000d0e 	bge	r21,r16,c010d28 <___vfiprintf_internal_r+0xc74>
 c010cf4:	10800404 	addi	r2,r2,16
 c010cf8:	20c00044 	addi	r3,r4,1
 c010cfc:	44800015 	stw	r18,0(r8)
 c010d00:	45400115 	stw	r21,4(r8)
 c010d04:	d8801c15 	stw	r2,112(sp)
 c010d08:	d8c01b15 	stw	r3,108(sp)
 c010d0c:	e0fff40e 	bge	fp,r3,c010ce0 <__alt_data_end+0xfc010ce0>
 c010d10:	1000101e 	bne	r2,zero,c010d54 <___vfiprintf_internal_r+0xca0>
 c010d14:	843ffc04 	addi	r16,r16,-16
 c010d18:	01400044 	movi	r5,1
 c010d1c:	0009883a 	mov	r4,zero
 c010d20:	d811883a 	mov	r8,sp
 c010d24:	ac3ff316 	blt	r21,r16,c010cf4 <__alt_data_end+0xfc010cf4>
 c010d28:	d8c02317 	ldw	r3,140(sp)
 c010d2c:	1405883a 	add	r2,r2,r16
 c010d30:	44000115 	stw	r16,4(r8)
 c010d34:	40c00015 	stw	r3,0(r8)
 c010d38:	d8801c15 	stw	r2,112(sp)
 c010d3c:	d9401b15 	stw	r5,108(sp)
 c010d40:	00c001c4 	movi	r3,7
 c010d44:	19401916 	blt	r3,r5,c010dac <___vfiprintf_internal_r+0xcf8>
 c010d48:	42000204 	addi	r8,r8,8
 c010d4c:	29400044 	addi	r5,r5,1
 c010d50:	003e5506 	br	c0106a8 <__alt_data_end+0xfc0106a8>
 c010d54:	d9402017 	ldw	r5,128(sp)
 c010d58:	d9002117 	ldw	r4,132(sp)
 c010d5c:	d9801a04 	addi	r6,sp,104
 c010d60:	c00ffa00 	call	c00ffa0 <__sprint_r.part.0>
 c010d64:	10000b1e 	bne	r2,zero,c010d94 <___vfiprintf_internal_r+0xce0>
 c010d68:	d9001b17 	ldw	r4,108(sp)
 c010d6c:	d8801c17 	ldw	r2,112(sp)
 c010d70:	d811883a 	mov	r8,sp
 c010d74:	21400044 	addi	r5,r4,1
 c010d78:	003fdc06 	br	c010cec <__alt_data_end+0xfc010cec>
 c010d7c:	d8801c17 	ldw	r2,112(sp)
 c010d80:	10000426 	beq	r2,zero,c010d94 <___vfiprintf_internal_r+0xce0>
 c010d84:	d9402017 	ldw	r5,128(sp)
 c010d88:	d9002117 	ldw	r4,132(sp)
 c010d8c:	d9801a04 	addi	r6,sp,104
 c010d90:	c00ffa00 	call	c00ffa0 <__sprint_r.part.0>
 c010d94:	d9402017 	ldw	r5,128(sp)
 c010d98:	2880030b 	ldhu	r2,12(r5)
 c010d9c:	1080100c 	andi	r2,r2,64
 c010da0:	10014d1e 	bne	r2,zero,c0112d8 <___vfiprintf_internal_r+0x1224>
 c010da4:	d8802417 	ldw	r2,144(sp)
 c010da8:	003d9706 	br	c010408 <__alt_data_end+0xfc010408>
 c010dac:	1000d21e 	bne	r2,zero,c0110f8 <___vfiprintf_internal_r+0x1044>
 c010db0:	00c00044 	movi	r3,1
 c010db4:	a005883a 	mov	r2,r20
 c010db8:	ddc00015 	stw	r23,0(sp)
 c010dbc:	dd000115 	stw	r20,4(sp)
 c010dc0:	dd001c15 	stw	r20,112(sp)
 c010dc4:	d8c01b15 	stw	r3,108(sp)
 c010dc8:	d811883a 	mov	r8,sp
 c010dcc:	42000204 	addi	r8,r8,8
 c010dd0:	8c40010c 	andi	r17,r17,4
 c010dd4:	88004026 	beq	r17,zero,c010ed8 <___vfiprintf_internal_r+0xe24>
 c010dd8:	d9002517 	ldw	r4,148(sp)
 c010ddc:	24e3c83a 	sub	r17,r4,r19
 c010de0:	04403d0e 	bge	zero,r17,c010ed8 <___vfiprintf_internal_r+0xe24>
 c010de4:	04000404 	movi	r16,16
 c010de8:	8441a90e 	bge	r16,r17,c011490 <___vfiprintf_internal_r+0x13dc>
 c010dec:	00c300b4 	movhi	r3,3074
 c010df0:	18e2fb04 	addi	r3,r3,-29716
 c010df4:	d9001b17 	ldw	r4,108(sp)
 c010df8:	d8c02315 	stw	r3,140(sp)
 c010dfc:	050001c4 	movi	r20,7
 c010e00:	dd402117 	ldw	r21,132(sp)
 c010e04:	ddc02017 	ldw	r23,128(sp)
 c010e08:	00000506 	br	c010e20 <___vfiprintf_internal_r+0xd6c>
 c010e0c:	21400084 	addi	r5,r4,2
 c010e10:	42000204 	addi	r8,r8,8
 c010e14:	1809883a 	mov	r4,r3
 c010e18:	8c7ffc04 	addi	r17,r17,-16
 c010e1c:	84400f0e 	bge	r16,r17,c010e5c <___vfiprintf_internal_r+0xda8>
 c010e20:	014300b4 	movhi	r5,3074
 c010e24:	10800404 	addi	r2,r2,16
 c010e28:	20c00044 	addi	r3,r4,1
 c010e2c:	2962fb04 	addi	r5,r5,-29716
 c010e30:	41400015 	stw	r5,0(r8)
 c010e34:	44000115 	stw	r16,4(r8)
 c010e38:	d8801c15 	stw	r2,112(sp)
 c010e3c:	d8c01b15 	stw	r3,108(sp)
 c010e40:	a0fff20e 	bge	r20,r3,c010e0c <__alt_data_end+0xfc010e0c>
 c010e44:	1000141e 	bne	r2,zero,c010e98 <___vfiprintf_internal_r+0xde4>
 c010e48:	8c7ffc04 	addi	r17,r17,-16
 c010e4c:	01400044 	movi	r5,1
 c010e50:	0009883a 	mov	r4,zero
 c010e54:	d811883a 	mov	r8,sp
 c010e58:	847ff116 	blt	r16,r17,c010e20 <__alt_data_end+0xfc010e20>
 c010e5c:	d8c02317 	ldw	r3,140(sp)
 c010e60:	1445883a 	add	r2,r2,r17
 c010e64:	44400115 	stw	r17,4(r8)
 c010e68:	40c00015 	stw	r3,0(r8)
 c010e6c:	d8801c15 	stw	r2,112(sp)
 c010e70:	d9401b15 	stw	r5,108(sp)
 c010e74:	00c001c4 	movi	r3,7
 c010e78:	1940170e 	bge	r3,r5,c010ed8 <___vfiprintf_internal_r+0xe24>
 c010e7c:	1000101e 	bne	r2,zero,c010ec0 <___vfiprintf_internal_r+0xe0c>
 c010e80:	d8802517 	ldw	r2,148(sp)
 c010e84:	14c11616 	blt	r2,r19,c0112e0 <___vfiprintf_internal_r+0x122c>
 c010e88:	d9002417 	ldw	r4,144(sp)
 c010e8c:	2089883a 	add	r4,r4,r2
 c010e90:	d9002415 	stw	r4,144(sp)
 c010e94:	003e1806 	br	c0106f8 <__alt_data_end+0xfc0106f8>
 c010e98:	d9801a04 	addi	r6,sp,104
 c010e9c:	b80b883a 	mov	r5,r23
 c010ea0:	a809883a 	mov	r4,r21
 c010ea4:	c00ffa00 	call	c00ffa0 <__sprint_r.part.0>
 c010ea8:	103fba1e 	bne	r2,zero,c010d94 <__alt_data_end+0xfc010d94>
 c010eac:	d9001b17 	ldw	r4,108(sp)
 c010eb0:	d8801c17 	ldw	r2,112(sp)
 c010eb4:	d811883a 	mov	r8,sp
 c010eb8:	21400044 	addi	r5,r4,1
 c010ebc:	003fd606 	br	c010e18 <__alt_data_end+0xfc010e18>
 c010ec0:	d9402017 	ldw	r5,128(sp)
 c010ec4:	d9002117 	ldw	r4,132(sp)
 c010ec8:	d9801a04 	addi	r6,sp,104
 c010ecc:	c00ffa00 	call	c00ffa0 <__sprint_r.part.0>
 c010ed0:	103fb01e 	bne	r2,zero,c010d94 <__alt_data_end+0xfc010d94>
 c010ed4:	d8801c17 	ldw	r2,112(sp)
 c010ed8:	d8c02517 	ldw	r3,148(sp)
 c010edc:	1cc0010e 	bge	r3,r19,c010ee4 <___vfiprintf_internal_r+0xe30>
 c010ee0:	9807883a 	mov	r3,r19
 c010ee4:	d9002417 	ldw	r4,144(sp)
 c010ee8:	20c9883a 	add	r4,r4,r3
 c010eec:	d9002415 	stw	r4,144(sp)
 c010ef0:	103e0126 	beq	r2,zero,c0106f8 <__alt_data_end+0xfc0106f8>
 c010ef4:	d9402017 	ldw	r5,128(sp)
 c010ef8:	d9002117 	ldw	r4,132(sp)
 c010efc:	d9801a04 	addi	r6,sp,104
 c010f00:	c00ffa00 	call	c00ffa0 <__sprint_r.part.0>
 c010f04:	103dfc26 	beq	r2,zero,c0106f8 <__alt_data_end+0xfc0106f8>
 c010f08:	003fa206 	br	c010d94 <__alt_data_end+0xfc010d94>
 c010f0c:	d9402017 	ldw	r5,128(sp)
 c010f10:	d9002117 	ldw	r4,132(sp)
 c010f14:	d9801a04 	addi	r6,sp,104
 c010f18:	d9c02b15 	stw	r7,172(sp)
 c010f1c:	c00ffa00 	call	c00ffa0 <__sprint_r.part.0>
 c010f20:	d9c02b17 	ldw	r7,172(sp)
 c010f24:	103f9b1e 	bne	r2,zero,c010d94 <__alt_data_end+0xfc010d94>
 c010f28:	d9001b17 	ldw	r4,108(sp)
 c010f2c:	d8801c17 	ldw	r2,112(sp)
 c010f30:	d811883a 	mov	r8,sp
 c010f34:	21800044 	addi	r6,r4,1
 c010f38:	003dbf06 	br	c010638 <__alt_data_end+0xfc010638>
 c010f3c:	1000d81e 	bne	r2,zero,c0112a0 <___vfiprintf_internal_r+0x11ec>
 c010f40:	d9001d87 	ldb	r4,118(sp)
 c010f44:	20000a26 	beq	r4,zero,c010f70 <___vfiprintf_internal_r+0xebc>
 c010f48:	00800044 	movi	r2,1
 c010f4c:	d9001d84 	addi	r4,sp,118
 c010f50:	100b883a 	mov	r5,r2
 c010f54:	d9000015 	stw	r4,0(sp)
 c010f58:	d8800115 	stw	r2,4(sp)
 c010f5c:	d811883a 	mov	r8,sp
 c010f60:	2809883a 	mov	r4,r5
 c010f64:	42000204 	addi	r8,r8,8
 c010f68:	29400044 	addi	r5,r5,1
 c010f6c:	003d9506 	br	c0105c4 <__alt_data_end+0xfc0105c4>
 c010f70:	3800fd26 	beq	r7,zero,c011368 <___vfiprintf_internal_r+0x12b4>
 c010f74:	00800084 	movi	r2,2
 c010f78:	d9001d04 	addi	r4,sp,116
 c010f7c:	d9000015 	stw	r4,0(sp)
 c010f80:	d8800115 	stw	r2,4(sp)
 c010f84:	01400044 	movi	r5,1
 c010f88:	d811883a 	mov	r8,sp
 c010f8c:	2809883a 	mov	r4,r5
 c010f90:	42000204 	addi	r8,r8,8
 c010f94:	29400044 	addi	r5,r5,1
 c010f98:	003f4606 	br	c010cb4 <__alt_data_end+0xfc010cb4>
 c010f9c:	d8802517 	ldw	r2,148(sp)
 c010fa0:	14c0010e 	bge	r2,r19,c010fa8 <___vfiprintf_internal_r+0xef4>
 c010fa4:	9805883a 	mov	r2,r19
 c010fa8:	d9402417 	ldw	r5,144(sp)
 c010fac:	288b883a 	add	r5,r5,r2
 c010fb0:	d9402415 	stw	r5,144(sp)
 c010fb4:	003dd006 	br	c0106f8 <__alt_data_end+0xfc0106f8>
 c010fb8:	d8001d85 	stb	zero,118(sp)
 c010fbc:	80005d16 	blt	r16,zero,c011134 <___vfiprintf_internal_r+0x1080>
 c010fc0:	00ffdfc4 	movi	r3,-129
 c010fc4:	9d04b03a 	or	r2,r19,r20
 c010fc8:	88e2703a 	and	r17,r17,r3
 c010fcc:	103d3726 	beq	r2,zero,c0104ac <__alt_data_end+0xfc0104ac>
 c010fd0:	002b883a 	mov	r21,zero
 c010fd4:	d9002617 	ldw	r4,152(sp)
 c010fd8:	ddc01a04 	addi	r23,sp,104
 c010fdc:	988003cc 	andi	r2,r19,15
 c010fe0:	a006973a 	slli	r3,r20,28
 c010fe4:	2085883a 	add	r2,r4,r2
 c010fe8:	9826d13a 	srli	r19,r19,4
 c010fec:	10800003 	ldbu	r2,0(r2)
 c010ff0:	a028d13a 	srli	r20,r20,4
 c010ff4:	bdffffc4 	addi	r23,r23,-1
 c010ff8:	1ce6b03a 	or	r19,r3,r19
 c010ffc:	b8800005 	stb	r2,0(r23)
 c011000:	9d04b03a 	or	r2,r19,r20
 c011004:	103ff51e 	bne	r2,zero,c010fdc <__alt_data_end+0xfc010fdc>
 c011008:	d8801e17 	ldw	r2,120(sp)
 c01100c:	15e9c83a 	sub	r20,r2,r23
 c011010:	003d2b06 	br	c0104c0 <__alt_data_end+0xfc0104c0>
 c011014:	d9402017 	ldw	r5,128(sp)
 c011018:	d9002117 	ldw	r4,132(sp)
 c01101c:	d9801a04 	addi	r6,sp,104
 c011020:	c00ffa00 	call	c00ffa0 <__sprint_r.part.0>
 c011024:	103f5b1e 	bne	r2,zero,c010d94 <__alt_data_end+0xfc010d94>
 c011028:	d8801c17 	ldw	r2,112(sp)
 c01102c:	d811883a 	mov	r8,sp
 c011030:	003f6706 	br	c010dd0 <__alt_data_end+0xfc010dd0>
 c011034:	d9402017 	ldw	r5,128(sp)
 c011038:	d9002117 	ldw	r4,132(sp)
 c01103c:	d9801a04 	addi	r6,sp,104
 c011040:	c00ffa00 	call	c00ffa0 <__sprint_r.part.0>
 c011044:	103f531e 	bne	r2,zero,c010d94 <__alt_data_end+0xfc010d94>
 c011048:	d811883a 	mov	r8,sp
 c01104c:	003cd906 	br	c0103b4 <__alt_data_end+0xfc0103b4>
 c011050:	10803fcc 	andi	r2,r2,255
 c011054:	1080201c 	xori	r2,r2,128
 c011058:	10bfe004 	addi	r2,r2,-128
 c01105c:	00c00c04 	movi	r3,48
 c011060:	10ffe926 	beq	r2,r3,c011008 <__alt_data_end+0xfc011008>
 c011064:	b8ffffc5 	stb	r3,-1(r23)
 c011068:	d8c01e17 	ldw	r3,120(sp)
 c01106c:	b8bfffc4 	addi	r2,r23,-1
 c011070:	102f883a 	mov	r23,r2
 c011074:	18a9c83a 	sub	r20,r3,r2
 c011078:	003d1106 	br	c0104c0 <__alt_data_end+0xfc0104c0>
 c01107c:	d9402017 	ldw	r5,128(sp)
 c011080:	d9002117 	ldw	r4,132(sp)
 c011084:	d9801a04 	addi	r6,sp,104
 c011088:	d8c02a15 	stw	r3,168(sp)
 c01108c:	d9c02b15 	stw	r7,172(sp)
 c011090:	c00ffa00 	call	c00ffa0 <__sprint_r.part.0>
 c011094:	d8c02a17 	ldw	r3,168(sp)
 c011098:	d9c02b17 	ldw	r7,172(sp)
 c01109c:	103f3d1e 	bne	r2,zero,c010d94 <__alt_data_end+0xfc010d94>
 c0110a0:	d9001b17 	ldw	r4,108(sp)
 c0110a4:	d8801c17 	ldw	r2,112(sp)
 c0110a8:	d811883a 	mov	r8,sp
 c0110ac:	21400044 	addi	r5,r4,1
 c0110b0:	003d4406 	br	c0105c4 <__alt_data_end+0xfc0105c4>
 c0110b4:	d9402017 	ldw	r5,128(sp)
 c0110b8:	d9002117 	ldw	r4,132(sp)
 c0110bc:	d9801a04 	addi	r6,sp,104
 c0110c0:	d8c02a15 	stw	r3,168(sp)
 c0110c4:	c00ffa00 	call	c00ffa0 <__sprint_r.part.0>
 c0110c8:	d8c02a17 	ldw	r3,168(sp)
 c0110cc:	103f311e 	bne	r2,zero,c010d94 <__alt_data_end+0xfc010d94>
 c0110d0:	d9001b17 	ldw	r4,108(sp)
 c0110d4:	d8801c17 	ldw	r2,112(sp)
 c0110d8:	d811883a 	mov	r8,sp
 c0110dc:	21400044 	addi	r5,r4,1
 c0110e0:	003ef406 	br	c010cb4 <__alt_data_end+0xfc010cb4>
 c0110e4:	1000bd1e 	bne	r2,zero,c0113dc <___vfiprintf_internal_r+0x1328>
 c0110e8:	01400044 	movi	r5,1
 c0110ec:	0009883a 	mov	r4,zero
 c0110f0:	d811883a 	mov	r8,sp
 c0110f4:	003ef106 	br	c010cbc <__alt_data_end+0xfc010cbc>
 c0110f8:	d9402017 	ldw	r5,128(sp)
 c0110fc:	d9002117 	ldw	r4,132(sp)
 c011100:	d9801a04 	addi	r6,sp,104
 c011104:	c00ffa00 	call	c00ffa0 <__sprint_r.part.0>
 c011108:	103f221e 	bne	r2,zero,c010d94 <__alt_data_end+0xfc010d94>
 c01110c:	d9401b17 	ldw	r5,108(sp)
 c011110:	d8801c17 	ldw	r2,112(sp)
 c011114:	d811883a 	mov	r8,sp
 c011118:	29400044 	addi	r5,r5,1
 c01111c:	003d6206 	br	c0106a8 <__alt_data_end+0xfc0106a8>
 c011120:	014300b4 	movhi	r5,3074
 c011124:	29628604 	addi	r5,r5,-30184
 c011128:	d9402615 	stw	r5,152(sp)
 c01112c:	d8c02215 	stw	r3,136(sp)
 c011130:	1023883a 	mov	r17,r2
 c011134:	9d04b03a 	or	r2,r19,r20
 c011138:	103fa51e 	bne	r2,zero,c010fd0 <__alt_data_end+0xfc010fd0>
 c01113c:	002b883a 	mov	r21,zero
 c011140:	00800084 	movi	r2,2
 c011144:	003e4a06 	br	c010a70 <__alt_data_end+0xfc010a70>
 c011148:	014300b4 	movhi	r5,3074
 c01114c:	29628604 	addi	r5,r5,-30184
 c011150:	002b883a 	mov	r21,zero
 c011154:	d9402615 	stw	r5,152(sp)
 c011158:	003f9e06 	br	c010fd4 <__alt_data_end+0xfc010fd4>
 c01115c:	d9402217 	ldw	r5,136(sp)
 c011160:	d8001d85 	stb	zero,118(sp)
 c011164:	0029883a 	mov	r20,zero
 c011168:	28800104 	addi	r2,r5,4
 c01116c:	2cc00017 	ldw	r19,0(r5)
 c011170:	803e3a16 	blt	r16,zero,c010a5c <__alt_data_end+0xfc010a5c>
 c011174:	00ffdfc4 	movi	r3,-129
 c011178:	d8802215 	stw	r2,136(sp)
 c01117c:	88e2703a 	and	r17,r17,r3
 c011180:	002b883a 	mov	r21,zero
 c011184:	983e9b26 	beq	r19,zero,c010bf4 <__alt_data_end+0xfc010bf4>
 c011188:	00800244 	movi	r2,9
 c01118c:	14fdc936 	bltu	r2,r19,c0108b4 <__alt_data_end+0xfc0108b4>
 c011190:	003e9a06 	br	c010bfc <__alt_data_end+0xfc010bfc>
 c011194:	00800c04 	movi	r2,48
 c011198:	d8c01d45 	stb	r3,117(sp)
 c01119c:	d8801d05 	stb	r2,116(sp)
 c0111a0:	d8001d85 	stb	zero,118(sp)
 c0111a4:	88c00094 	ori	r3,r17,2
 c0111a8:	80009c16 	blt	r16,zero,c01141c <___vfiprintf_internal_r+0x1368>
 c0111ac:	00bfdfc4 	movi	r2,-129
 c0111b0:	88a2703a 	and	r17,r17,r2
 c0111b4:	8c400094 	ori	r17,r17,2
 c0111b8:	002b883a 	mov	r21,zero
 c0111bc:	003f8506 	br	c010fd4 <__alt_data_end+0xfc010fd4>
 c0111c0:	b029883a 	mov	r20,r22
 c0111c4:	003c0b06 	br	c0101f4 <__alt_data_end+0xfc0101f4>
 c0111c8:	04e7c83a 	sub	r19,zero,r19
 c0111cc:	05400b44 	movi	r21,45
 c0111d0:	9804c03a 	cmpne	r2,r19,zero
 c0111d4:	0529c83a 	sub	r20,zero,r20
 c0111d8:	dd401d85 	stb	r21,118(sp)
 c0111dc:	a0a9c83a 	sub	r20,r20,r2
 c0111e0:	80009716 	blt	r16,zero,c011440 <___vfiprintf_internal_r+0x138c>
 c0111e4:	00bfdfc4 	movi	r2,-129
 c0111e8:	88a2703a 	and	r17,r17,r2
 c0111ec:	003db006 	br	c0108b0 <__alt_data_end+0xfc0108b0>
 c0111f0:	b0c00007 	ldb	r3,0(r22)
 c0111f4:	003c0c06 	br	c010228 <__alt_data_end+0xfc010228>
 c0111f8:	8880100c 	andi	r2,r17,64
 c0111fc:	d8001d85 	stb	zero,118(sp)
 c011200:	1000461e 	bne	r2,zero,c01131c <___vfiprintf_internal_r+0x1268>
 c011204:	d9002217 	ldw	r4,136(sp)
 c011208:	0029883a 	mov	r20,zero
 c01120c:	20800104 	addi	r2,r4,4
 c011210:	24c00017 	ldw	r19,0(r4)
 c011214:	803df80e 	bge	r16,zero,c0109f8 <__alt_data_end+0xfc0109f8>
 c011218:	9d06b03a 	or	r3,r19,r20
 c01121c:	d8802215 	stw	r2,136(sp)
 c011220:	183d5e1e 	bne	r3,zero,c01079c <__alt_data_end+0xfc01079c>
 c011224:	002b883a 	mov	r21,zero
 c011228:	0005883a 	mov	r2,zero
 c01122c:	003e1006 	br	c010a70 <__alt_data_end+0xfc010a70>
 c011230:	8880040c 	andi	r2,r17,16
 c011234:	1000321e 	bne	r2,zero,c011300 <___vfiprintf_internal_r+0x124c>
 c011238:	8c40100c 	andi	r17,r17,64
 c01123c:	88008d26 	beq	r17,zero,c011474 <___vfiprintf_internal_r+0x13c0>
 c011240:	d9402217 	ldw	r5,136(sp)
 c011244:	d8c02417 	ldw	r3,144(sp)
 c011248:	28800017 	ldw	r2,0(r5)
 c01124c:	29400104 	addi	r5,r5,4
 c011250:	d9402215 	stw	r5,136(sp)
 c011254:	10c0000d 	sth	r3,0(r2)
 c011258:	003bca06 	br	c010184 <__alt_data_end+0xfc010184>
 c01125c:	8880100c 	andi	r2,r17,64
 c011260:	10003a26 	beq	r2,zero,c01134c <___vfiprintf_internal_r+0x1298>
 c011264:	d8802217 	ldw	r2,136(sp)
 c011268:	14c0000f 	ldh	r19,0(r2)
 c01126c:	10800104 	addi	r2,r2,4
 c011270:	d8802215 	stw	r2,136(sp)
 c011274:	9829d7fa 	srai	r20,r19,31
 c011278:	a005883a 	mov	r2,r20
 c01127c:	003d8506 	br	c010894 <__alt_data_end+0xfc010894>
 c011280:	8880100c 	andi	r2,r17,64
 c011284:	10002b26 	beq	r2,zero,c011334 <___vfiprintf_internal_r+0x1280>
 c011288:	d8802217 	ldw	r2,136(sp)
 c01128c:	0029883a 	mov	r20,zero
 c011290:	14c0000b 	ldhu	r19,0(r2)
 c011294:	10800104 	addi	r2,r2,4
 c011298:	d8802215 	stw	r2,136(sp)
 c01129c:	003d5d06 	br	c010814 <__alt_data_end+0xfc010814>
 c0112a0:	d9402017 	ldw	r5,128(sp)
 c0112a4:	d9002117 	ldw	r4,132(sp)
 c0112a8:	d9801a04 	addi	r6,sp,104
 c0112ac:	d8c02a15 	stw	r3,168(sp)
 c0112b0:	d9c02b15 	stw	r7,172(sp)
 c0112b4:	c00ffa00 	call	c00ffa0 <__sprint_r.part.0>
 c0112b8:	d8c02a17 	ldw	r3,168(sp)
 c0112bc:	d9c02b17 	ldw	r7,172(sp)
 c0112c0:	103eb41e 	bne	r2,zero,c010d94 <__alt_data_end+0xfc010d94>
 c0112c4:	d9001b17 	ldw	r4,108(sp)
 c0112c8:	d8801c17 	ldw	r2,112(sp)
 c0112cc:	d811883a 	mov	r8,sp
 c0112d0:	21400044 	addi	r5,r4,1
 c0112d4:	003e6706 	br	c010c74 <__alt_data_end+0xfc010c74>
 c0112d8:	00bfffc4 	movi	r2,-1
 c0112dc:	003c4a06 	br	c010408 <__alt_data_end+0xfc010408>
 c0112e0:	9805883a 	mov	r2,r19
 c0112e4:	003ee806 	br	c010e88 <__alt_data_end+0xfc010e88>
 c0112e8:	d8c02217 	ldw	r3,136(sp)
 c0112ec:	0029883a 	mov	r20,zero
 c0112f0:	18800104 	addi	r2,r3,4
 c0112f4:	1cc0000b 	ldhu	r19,0(r3)
 c0112f8:	803f9e0e 	bge	r16,zero,c011174 <__alt_data_end+0xfc011174>
 c0112fc:	003dd706 	br	c010a5c <__alt_data_end+0xfc010a5c>
 c011300:	d8c02217 	ldw	r3,136(sp)
 c011304:	d9002417 	ldw	r4,144(sp)
 c011308:	18800017 	ldw	r2,0(r3)
 c01130c:	18c00104 	addi	r3,r3,4
 c011310:	d8c02215 	stw	r3,136(sp)
 c011314:	11000015 	stw	r4,0(r2)
 c011318:	003b9a06 	br	c010184 <__alt_data_end+0xfc010184>
 c01131c:	d8c02217 	ldw	r3,136(sp)
 c011320:	0029883a 	mov	r20,zero
 c011324:	18800104 	addi	r2,r3,4
 c011328:	1cc0000b 	ldhu	r19,0(r3)
 c01132c:	803db20e 	bge	r16,zero,c0109f8 <__alt_data_end+0xfc0109f8>
 c011330:	003fb906 	br	c011218 <__alt_data_end+0xfc011218>
 c011334:	d9002217 	ldw	r4,136(sp)
 c011338:	0029883a 	mov	r20,zero
 c01133c:	24c00017 	ldw	r19,0(r4)
 c011340:	21000104 	addi	r4,r4,4
 c011344:	d9002215 	stw	r4,136(sp)
 c011348:	003d3206 	br	c010814 <__alt_data_end+0xfc010814>
 c01134c:	d8c02217 	ldw	r3,136(sp)
 c011350:	1cc00017 	ldw	r19,0(r3)
 c011354:	18c00104 	addi	r3,r3,4
 c011358:	d8c02215 	stw	r3,136(sp)
 c01135c:	9829d7fa 	srai	r20,r19,31
 c011360:	a005883a 	mov	r2,r20
 c011364:	003d4b06 	br	c010894 <__alt_data_end+0xfc010894>
 c011368:	0009883a 	mov	r4,zero
 c01136c:	01400044 	movi	r5,1
 c011370:	d811883a 	mov	r8,sp
 c011374:	003e4f06 	br	c010cb4 <__alt_data_end+0xfc010cb4>
 c011378:	d8c02215 	stw	r3,136(sp)
 c01137c:	002b883a 	mov	r21,zero
 c011380:	003db806 	br	c010a64 <__alt_data_end+0xfc010a64>
 c011384:	d811883a 	mov	r8,sp
 c011388:	003e9606 	br	c010de4 <__alt_data_end+0xfc010de4>
 c01138c:	010300b4 	movhi	r4,3074
 c011390:	2122f704 	addi	r4,r4,-29732
 c011394:	d9002315 	stw	r4,140(sp)
 c011398:	003e6306 	br	c010d28 <__alt_data_end+0xfc010d28>
 c01139c:	b0c00043 	ldbu	r3,1(r22)
 c0113a0:	8c400814 	ori	r17,r17,32
 c0113a4:	b5800044 	addi	r22,r22,1
 c0113a8:	18c03fcc 	andi	r3,r3,255
 c0113ac:	18c0201c 	xori	r3,r3,128
 c0113b0:	18ffe004 	addi	r3,r3,-128
 c0113b4:	003b9c06 	br	c010228 <__alt_data_end+0xfc010228>
 c0113b8:	b809883a 	mov	r4,r23
 c0113bc:	da002a15 	stw	r8,168(sp)
 c0113c0:	c0058f40 	call	c0058f4 <strlen>
 c0113c4:	1029883a 	mov	r20,r2
 c0113c8:	dd401d83 	ldbu	r21,118(sp)
 c0113cc:	df002215 	stw	fp,136(sp)
 c0113d0:	0021883a 	mov	r16,zero
 c0113d4:	da002a17 	ldw	r8,168(sp)
 c0113d8:	003c3906 	br	c0104c0 <__alt_data_end+0xfc0104c0>
 c0113dc:	d9402017 	ldw	r5,128(sp)
 c0113e0:	d9002117 	ldw	r4,132(sp)
 c0113e4:	d9801a04 	addi	r6,sp,104
 c0113e8:	c00ffa00 	call	c00ffa0 <__sprint_r.part.0>
 c0113ec:	103e691e 	bne	r2,zero,c010d94 <__alt_data_end+0xfc010d94>
 c0113f0:	d9001b17 	ldw	r4,108(sp)
 c0113f4:	d8801c17 	ldw	r2,112(sp)
 c0113f8:	d811883a 	mov	r8,sp
 c0113fc:	21400044 	addi	r5,r4,1
 c011400:	003e2e06 	br	c010cbc <__alt_data_end+0xfc010cbc>
 c011404:	010300b4 	movhi	r4,3074
 c011408:	2122fb04 	addi	r4,r4,-29716
 c01140c:	d9002315 	stw	r4,140(sp)
 c011410:	d9001b17 	ldw	r4,108(sp)
 c011414:	21000044 	addi	r4,r4,1
 c011418:	003c5e06 	br	c010594 <__alt_data_end+0xfc010594>
 c01141c:	002b883a 	mov	r21,zero
 c011420:	00800084 	movi	r2,2
 c011424:	10803fcc 	andi	r2,r2,255
 c011428:	01000044 	movi	r4,1
 c01142c:	11002b26 	beq	r2,r4,c0114dc <___vfiprintf_internal_r+0x1428>
 c011430:	01000084 	movi	r4,2
 c011434:	11002b1e 	bne	r2,r4,c0114e4 <___vfiprintf_internal_r+0x1430>
 c011438:	1823883a 	mov	r17,r3
 c01143c:	003ee506 	br	c010fd4 <__alt_data_end+0xfc010fd4>
 c011440:	8807883a 	mov	r3,r17
 c011444:	00800044 	movi	r2,1
 c011448:	003ff606 	br	c011424 <__alt_data_end+0xfc011424>
 c01144c:	00800184 	movi	r2,6
 c011450:	1400012e 	bgeu	r2,r16,c011458 <___vfiprintf_internal_r+0x13a4>
 c011454:	1021883a 	mov	r16,r2
 c011458:	8029883a 	mov	r20,r16
 c01145c:	8027883a 	mov	r19,r16
 c011460:	80002216 	blt	r16,zero,c0114ec <___vfiprintf_internal_r+0x1438>
 c011464:	05c300b4 	movhi	r23,3074
 c011468:	df002215 	stw	fp,136(sp)
 c01146c:	bde28b04 	addi	r23,r23,-30164
 c011470:	003cfb06 	br	c010860 <__alt_data_end+0xfc010860>
 c011474:	d9002217 	ldw	r4,136(sp)
 c011478:	d9402417 	ldw	r5,144(sp)
 c01147c:	20800017 	ldw	r2,0(r4)
 c011480:	21000104 	addi	r4,r4,4
 c011484:	d9002215 	stw	r4,136(sp)
 c011488:	11400015 	stw	r5,0(r2)
 c01148c:	003b3d06 	br	c010184 <__alt_data_end+0xfc010184>
 c011490:	014300b4 	movhi	r5,3074
 c011494:	2962fb04 	addi	r5,r5,-29716
 c011498:	d9402315 	stw	r5,140(sp)
 c01149c:	d9401b17 	ldw	r5,108(sp)
 c0114a0:	29400044 	addi	r5,r5,1
 c0114a4:	003e6d06 	br	c010e5c <__alt_data_end+0xfc010e5c>
 c0114a8:	8029883a 	mov	r20,r16
 c0114ac:	dd401d83 	ldbu	r21,118(sp)
 c0114b0:	df002215 	stw	fp,136(sp)
 c0114b4:	0021883a 	mov	r16,zero
 c0114b8:	003c0106 	br	c0104c0 <__alt_data_end+0xfc0104c0>
 c0114bc:	00c300b4 	movhi	r3,3074
 c0114c0:	18e2f704 	addi	r3,r3,-29732
 c0114c4:	d8c02315 	stw	r3,140(sp)
 c0114c8:	280d883a 	mov	r6,r5
 c0114cc:	003c6906 	br	c010674 <__alt_data_end+0xfc010674>
 c0114d0:	802d883a 	mov	r22,r16
 c0114d4:	0021883a 	mov	r16,zero
 c0114d8:	003b5406 	br	c01022c <__alt_data_end+0xfc01022c>
 c0114dc:	1823883a 	mov	r17,r3
 c0114e0:	003cf306 	br	c0108b0 <__alt_data_end+0xfc0108b0>
 c0114e4:	1823883a 	mov	r17,r3
 c0114e8:	003cad06 	br	c0107a0 <__alt_data_end+0xfc0107a0>
 c0114ec:	0027883a 	mov	r19,zero
 c0114f0:	003fdc06 	br	c011464 <__alt_data_end+0xfc011464>
 c0114f4:	d9402217 	ldw	r5,136(sp)
 c0114f8:	8005883a 	mov	r2,r16
 c0114fc:	b0c00043 	ldbu	r3,1(r22)
 c011500:	2c000017 	ldw	r16,0(r5)
 c011504:	29000104 	addi	r4,r5,4
 c011508:	d9002215 	stw	r4,136(sp)
 c01150c:	102d883a 	mov	r22,r2
 c011510:	803fa50e 	bge	r16,zero,c0113a8 <__alt_data_end+0xfc0113a8>
 c011514:	18c03fcc 	andi	r3,r3,255
 c011518:	18c0201c 	xori	r3,r3,128
 c01151c:	043fffc4 	movi	r16,-1
 c011520:	18ffe004 	addi	r3,r3,-128
 c011524:	003b4006 	br	c010228 <__alt_data_end+0xfc010228>
 c011528:	d9402303 	ldbu	r5,140(sp)
 c01152c:	d9401d85 	stb	r5,118(sp)
 c011530:	003cae06 	br	c0107ec <__alt_data_end+0xfc0107ec>
 c011534:	d8c02303 	ldbu	r3,140(sp)
 c011538:	d8c01d85 	stb	r3,118(sp)
 c01153c:	003d1406 	br	c010990 <__alt_data_end+0xfc010990>
 c011540:	d8c02303 	ldbu	r3,140(sp)
 c011544:	d8c01d85 	stb	r3,118(sp)
 c011548:	003cca06 	br	c010874 <__alt_data_end+0xfc010874>
 c01154c:	8880004c 	andi	r2,r17,1
 c011550:	002b883a 	mov	r21,zero
 c011554:	10000526 	beq	r2,zero,c01156c <___vfiprintf_internal_r+0x14b8>
 c011558:	00800c04 	movi	r2,48
 c01155c:	d88019c5 	stb	r2,103(sp)
 c011560:	dd002817 	ldw	r20,160(sp)
 c011564:	ddc019c4 	addi	r23,sp,103
 c011568:	003bd506 	br	c0104c0 <__alt_data_end+0xfc0104c0>
 c01156c:	0029883a 	mov	r20,zero
 c011570:	ddc01a04 	addi	r23,sp,104
 c011574:	003bd206 	br	c0104c0 <__alt_data_end+0xfc0104c0>
 c011578:	d9002303 	ldbu	r4,140(sp)
 c01157c:	d9001d85 	stb	r4,118(sp)
 c011580:	003da606 	br	c010c1c <__alt_data_end+0xfc010c1c>
 c011584:	d8c02303 	ldbu	r3,140(sp)
 c011588:	d8c01d85 	stb	r3,118(sp)
 c01158c:	003c7606 	br	c010768 <__alt_data_end+0xfc010768>
 c011590:	d8c02303 	ldbu	r3,140(sp)
 c011594:	d8c01d85 	stb	r3,118(sp)
 c011598:	003c6506 	br	c010730 <__alt_data_end+0xfc010730>
 c01159c:	d9002303 	ldbu	r4,140(sp)
 c0115a0:	d9001d85 	stb	r4,118(sp)
 c0115a4:	003d3d06 	br	c010a9c <__alt_data_end+0xfc010a9c>
 c0115a8:	d8c02303 	ldbu	r3,140(sp)
 c0115ac:	d8c01d85 	stb	r3,118(sp)
 c0115b0:	003d1d06 	br	c010a28 <__alt_data_end+0xfc010a28>
 c0115b4:	d8c02303 	ldbu	r3,140(sp)
 c0115b8:	d8c01d85 	stb	r3,118(sp)
 c0115bc:	003d0306 	br	c0109cc <__alt_data_end+0xfc0109cc>

0c0115c0 <__vfiprintf_internal>:
 c0115c0:	008300b4 	movhi	r2,3074
 c0115c4:	10aac804 	addi	r2,r2,-21728
 c0115c8:	300f883a 	mov	r7,r6
 c0115cc:	280d883a 	mov	r6,r5
 c0115d0:	200b883a 	mov	r5,r4
 c0115d4:	11000017 	ldw	r4,0(r2)
 c0115d8:	c0100b41 	jmpi	c0100b4 <___vfiprintf_internal_r>

0c0115dc <__sbprintf>:
 c0115dc:	2880030b 	ldhu	r2,12(r5)
 c0115e0:	2ac01917 	ldw	r11,100(r5)
 c0115e4:	2a80038b 	ldhu	r10,14(r5)
 c0115e8:	2a400717 	ldw	r9,28(r5)
 c0115ec:	2a000917 	ldw	r8,36(r5)
 c0115f0:	defee204 	addi	sp,sp,-1144
 c0115f4:	00c10004 	movi	r3,1024
 c0115f8:	dc011a15 	stw	r16,1128(sp)
 c0115fc:	10bfff4c 	andi	r2,r2,65533
 c011600:	2821883a 	mov	r16,r5
 c011604:	d8cb883a 	add	r5,sp,r3
 c011608:	dc811c15 	stw	r18,1136(sp)
 c01160c:	dc411b15 	stw	r17,1132(sp)
 c011610:	dfc11d15 	stw	ra,1140(sp)
 c011614:	2025883a 	mov	r18,r4
 c011618:	d881030d 	sth	r2,1036(sp)
 c01161c:	dac11915 	stw	r11,1124(sp)
 c011620:	da81038d 	sth	r10,1038(sp)
 c011624:	da410715 	stw	r9,1052(sp)
 c011628:	da010915 	stw	r8,1060(sp)
 c01162c:	dec10015 	stw	sp,1024(sp)
 c011630:	dec10415 	stw	sp,1040(sp)
 c011634:	d8c10215 	stw	r3,1032(sp)
 c011638:	d8c10515 	stw	r3,1044(sp)
 c01163c:	d8010615 	stw	zero,1048(sp)
 c011640:	c0100b40 	call	c0100b4 <___vfiprintf_internal_r>
 c011644:	1023883a 	mov	r17,r2
 c011648:	10000416 	blt	r2,zero,c01165c <__sbprintf+0x80>
 c01164c:	d9410004 	addi	r5,sp,1024
 c011650:	9009883a 	mov	r4,r18
 c011654:	c00bc6c0 	call	c00bc6c <_fflush_r>
 c011658:	10000d1e 	bne	r2,zero,c011690 <__sbprintf+0xb4>
 c01165c:	d881030b 	ldhu	r2,1036(sp)
 c011660:	1080100c 	andi	r2,r2,64
 c011664:	10000326 	beq	r2,zero,c011674 <__sbprintf+0x98>
 c011668:	8080030b 	ldhu	r2,12(r16)
 c01166c:	10801014 	ori	r2,r2,64
 c011670:	8080030d 	sth	r2,12(r16)
 c011674:	8805883a 	mov	r2,r17
 c011678:	dfc11d17 	ldw	ra,1140(sp)
 c01167c:	dc811c17 	ldw	r18,1136(sp)
 c011680:	dc411b17 	ldw	r17,1132(sp)
 c011684:	dc011a17 	ldw	r16,1128(sp)
 c011688:	dec11e04 	addi	sp,sp,1144
 c01168c:	f800283a 	ret
 c011690:	047fffc4 	movi	r17,-1
 c011694:	003ff106 	br	c01165c <__alt_data_end+0xfc01165c>

0c011698 <_write_r>:
 c011698:	defffd04 	addi	sp,sp,-12
 c01169c:	2805883a 	mov	r2,r5
 c0116a0:	dc000015 	stw	r16,0(sp)
 c0116a4:	040300b4 	movhi	r16,3074
 c0116a8:	dc400115 	stw	r17,4(sp)
 c0116ac:	300b883a 	mov	r5,r6
 c0116b0:	84326b04 	addi	r16,r16,-13908
 c0116b4:	2023883a 	mov	r17,r4
 c0116b8:	380d883a 	mov	r6,r7
 c0116bc:	1009883a 	mov	r4,r2
 c0116c0:	dfc00215 	stw	ra,8(sp)
 c0116c4:	80000015 	stw	zero,0(r16)
 c0116c8:	c0164180 	call	c016418 <write>
 c0116cc:	00ffffc4 	movi	r3,-1
 c0116d0:	10c00526 	beq	r2,r3,c0116e8 <_write_r+0x50>
 c0116d4:	dfc00217 	ldw	ra,8(sp)
 c0116d8:	dc400117 	ldw	r17,4(sp)
 c0116dc:	dc000017 	ldw	r16,0(sp)
 c0116e0:	dec00304 	addi	sp,sp,12
 c0116e4:	f800283a 	ret
 c0116e8:	80c00017 	ldw	r3,0(r16)
 c0116ec:	183ff926 	beq	r3,zero,c0116d4 <__alt_data_end+0xfc0116d4>
 c0116f0:	88c00015 	stw	r3,0(r17)
 c0116f4:	003ff706 	br	c0116d4 <__alt_data_end+0xfc0116d4>

0c0116f8 <_close_r>:
 c0116f8:	defffd04 	addi	sp,sp,-12
 c0116fc:	dc000015 	stw	r16,0(sp)
 c011700:	040300b4 	movhi	r16,3074
 c011704:	dc400115 	stw	r17,4(sp)
 c011708:	84326b04 	addi	r16,r16,-13908
 c01170c:	2023883a 	mov	r17,r4
 c011710:	2809883a 	mov	r4,r5
 c011714:	dfc00215 	stw	ra,8(sp)
 c011718:	80000015 	stw	zero,0(r16)
 c01171c:	c0155900 	call	c015590 <close>
 c011720:	00ffffc4 	movi	r3,-1
 c011724:	10c00526 	beq	r2,r3,c01173c <_close_r+0x44>
 c011728:	dfc00217 	ldw	ra,8(sp)
 c01172c:	dc400117 	ldw	r17,4(sp)
 c011730:	dc000017 	ldw	r16,0(sp)
 c011734:	dec00304 	addi	sp,sp,12
 c011738:	f800283a 	ret
 c01173c:	80c00017 	ldw	r3,0(r16)
 c011740:	183ff926 	beq	r3,zero,c011728 <__alt_data_end+0xfc011728>
 c011744:	88c00015 	stw	r3,0(r17)
 c011748:	003ff706 	br	c011728 <__alt_data_end+0xfc011728>

0c01174c <_calloc_r>:
 c01174c:	defffe04 	addi	sp,sp,-8
 c011750:	2805883a 	mov	r2,r5
 c011754:	dc000015 	stw	r16,0(sp)
 c011758:	300b883a 	mov	r5,r6
 c01175c:	2021883a 	mov	r16,r4
 c011760:	1009883a 	mov	r4,r2
 c011764:	dfc00115 	stw	ra,4(sp)
 c011768:	c004c7c0 	call	c004c7c <__mulsi3>
 c01176c:	100b883a 	mov	r5,r2
 c011770:	8009883a 	mov	r4,r16
 c011774:	c004ccc0 	call	c004ccc <_malloc_r>
 c011778:	10002926 	beq	r2,zero,c011820 <_calloc_r+0xd4>
 c01177c:	11bfff17 	ldw	r6,-4(r2)
 c011780:	1021883a 	mov	r16,r2
 c011784:	00bfff04 	movi	r2,-4
 c011788:	308c703a 	and	r6,r6,r2
 c01178c:	00c00904 	movi	r3,36
 c011790:	308d883a 	add	r6,r6,r2
 c011794:	19801636 	bltu	r3,r6,c0117f0 <_calloc_r+0xa4>
 c011798:	008004c4 	movi	r2,19
 c01179c:	11800b2e 	bgeu	r2,r6,c0117cc <_calloc_r+0x80>
 c0117a0:	80000015 	stw	zero,0(r16)
 c0117a4:	80000115 	stw	zero,4(r16)
 c0117a8:	008006c4 	movi	r2,27
 c0117ac:	11801a2e 	bgeu	r2,r6,c011818 <_calloc_r+0xcc>
 c0117b0:	80000215 	stw	zero,8(r16)
 c0117b4:	80000315 	stw	zero,12(r16)
 c0117b8:	30c0151e 	bne	r6,r3,c011810 <_calloc_r+0xc4>
 c0117bc:	80000415 	stw	zero,16(r16)
 c0117c0:	80800604 	addi	r2,r16,24
 c0117c4:	80000515 	stw	zero,20(r16)
 c0117c8:	00000106 	br	c0117d0 <_calloc_r+0x84>
 c0117cc:	8005883a 	mov	r2,r16
 c0117d0:	10000015 	stw	zero,0(r2)
 c0117d4:	10000115 	stw	zero,4(r2)
 c0117d8:	10000215 	stw	zero,8(r2)
 c0117dc:	8005883a 	mov	r2,r16
 c0117e0:	dfc00117 	ldw	ra,4(sp)
 c0117e4:	dc000017 	ldw	r16,0(sp)
 c0117e8:	dec00204 	addi	sp,sp,8
 c0117ec:	f800283a 	ret
 c0117f0:	000b883a 	mov	r5,zero
 c0117f4:	8009883a 	mov	r4,r16
 c0117f8:	c00d0600 	call	c00d060 <memset>
 c0117fc:	8005883a 	mov	r2,r16
 c011800:	dfc00117 	ldw	ra,4(sp)
 c011804:	dc000017 	ldw	r16,0(sp)
 c011808:	dec00204 	addi	sp,sp,8
 c01180c:	f800283a 	ret
 c011810:	80800404 	addi	r2,r16,16
 c011814:	003fee06 	br	c0117d0 <__alt_data_end+0xfc0117d0>
 c011818:	80800204 	addi	r2,r16,8
 c01181c:	003fec06 	br	c0117d0 <__alt_data_end+0xfc0117d0>
 c011820:	0005883a 	mov	r2,zero
 c011824:	003fee06 	br	c0117e0 <__alt_data_end+0xfc0117e0>

0c011828 <_fclose_r>:
 c011828:	28003926 	beq	r5,zero,c011910 <_fclose_r+0xe8>
 c01182c:	defffc04 	addi	sp,sp,-16
 c011830:	dc400115 	stw	r17,4(sp)
 c011834:	dc000015 	stw	r16,0(sp)
 c011838:	dfc00315 	stw	ra,12(sp)
 c01183c:	dc800215 	stw	r18,8(sp)
 c011840:	2023883a 	mov	r17,r4
 c011844:	2821883a 	mov	r16,r5
 c011848:	20000226 	beq	r4,zero,c011854 <_fclose_r+0x2c>
 c01184c:	20800e17 	ldw	r2,56(r4)
 c011850:	10002726 	beq	r2,zero,c0118f0 <_fclose_r+0xc8>
 c011854:	8080030f 	ldh	r2,12(r16)
 c011858:	1000071e 	bne	r2,zero,c011878 <_fclose_r+0x50>
 c01185c:	0005883a 	mov	r2,zero
 c011860:	dfc00317 	ldw	ra,12(sp)
 c011864:	dc800217 	ldw	r18,8(sp)
 c011868:	dc400117 	ldw	r17,4(sp)
 c01186c:	dc000017 	ldw	r16,0(sp)
 c011870:	dec00404 	addi	sp,sp,16
 c011874:	f800283a 	ret
 c011878:	800b883a 	mov	r5,r16
 c01187c:	8809883a 	mov	r4,r17
 c011880:	c00ba500 	call	c00ba50 <__sflush_r>
 c011884:	1025883a 	mov	r18,r2
 c011888:	80800b17 	ldw	r2,44(r16)
 c01188c:	10000426 	beq	r2,zero,c0118a0 <_fclose_r+0x78>
 c011890:	81400717 	ldw	r5,28(r16)
 c011894:	8809883a 	mov	r4,r17
 c011898:	103ee83a 	callr	r2
 c01189c:	10001616 	blt	r2,zero,c0118f8 <_fclose_r+0xd0>
 c0118a0:	8080030b 	ldhu	r2,12(r16)
 c0118a4:	1080200c 	andi	r2,r2,128
 c0118a8:	1000151e 	bne	r2,zero,c011900 <_fclose_r+0xd8>
 c0118ac:	81400c17 	ldw	r5,48(r16)
 c0118b0:	28000526 	beq	r5,zero,c0118c8 <_fclose_r+0xa0>
 c0118b4:	80801004 	addi	r2,r16,64
 c0118b8:	28800226 	beq	r5,r2,c0118c4 <_fclose_r+0x9c>
 c0118bc:	8809883a 	mov	r4,r17
 c0118c0:	c00c1cc0 	call	c00c1cc <_free_r>
 c0118c4:	80000c15 	stw	zero,48(r16)
 c0118c8:	81401117 	ldw	r5,68(r16)
 c0118cc:	28000326 	beq	r5,zero,c0118dc <_fclose_r+0xb4>
 c0118d0:	8809883a 	mov	r4,r17
 c0118d4:	c00c1cc0 	call	c00c1cc <_free_r>
 c0118d8:	80001115 	stw	zero,68(r16)
 c0118dc:	c00c0680 	call	c00c068 <__sfp_lock_acquire>
 c0118e0:	8000030d 	sth	zero,12(r16)
 c0118e4:	c00c06c0 	call	c00c06c <__sfp_lock_release>
 c0118e8:	9005883a 	mov	r2,r18
 c0118ec:	003fdc06 	br	c011860 <__alt_data_end+0xfc011860>
 c0118f0:	c00c0580 	call	c00c058 <__sinit>
 c0118f4:	003fd706 	br	c011854 <__alt_data_end+0xfc011854>
 c0118f8:	04bfffc4 	movi	r18,-1
 c0118fc:	003fe806 	br	c0118a0 <__alt_data_end+0xfc0118a0>
 c011900:	81400417 	ldw	r5,16(r16)
 c011904:	8809883a 	mov	r4,r17
 c011908:	c00c1cc0 	call	c00c1cc <_free_r>
 c01190c:	003fe706 	br	c0118ac <__alt_data_end+0xfc0118ac>
 c011910:	0005883a 	mov	r2,zero
 c011914:	f800283a 	ret

0c011918 <fclose>:
 c011918:	008300b4 	movhi	r2,3074
 c01191c:	10aac804 	addi	r2,r2,-21728
 c011920:	200b883a 	mov	r5,r4
 c011924:	11000017 	ldw	r4,0(r2)
 c011928:	c0118281 	jmpi	c011828 <_fclose_r>

0c01192c <__fputwc>:
 c01192c:	defff804 	addi	sp,sp,-32
 c011930:	dcc00415 	stw	r19,16(sp)
 c011934:	dc800315 	stw	r18,12(sp)
 c011938:	dc000115 	stw	r16,4(sp)
 c01193c:	dfc00715 	stw	ra,28(sp)
 c011940:	dd400615 	stw	r21,24(sp)
 c011944:	dd000515 	stw	r20,20(sp)
 c011948:	dc400215 	stw	r17,8(sp)
 c01194c:	2027883a 	mov	r19,r4
 c011950:	2825883a 	mov	r18,r5
 c011954:	3021883a 	mov	r16,r6
 c011958:	c00cc100 	call	c00cc10 <__locale_mb_cur_max>
 c01195c:	00c00044 	movi	r3,1
 c011960:	10c03e26 	beq	r2,r3,c011a5c <__fputwc+0x130>
 c011964:	81c01704 	addi	r7,r16,92
 c011968:	900d883a 	mov	r6,r18
 c01196c:	d80b883a 	mov	r5,sp
 c011970:	9809883a 	mov	r4,r19
 c011974:	c011dfc0 	call	c011dfc <_wcrtomb_r>
 c011978:	1029883a 	mov	r20,r2
 c01197c:	00bfffc4 	movi	r2,-1
 c011980:	a0802026 	beq	r20,r2,c011a04 <__fputwc+0xd8>
 c011984:	d9400003 	ldbu	r5,0(sp)
 c011988:	a0001c26 	beq	r20,zero,c0119fc <__fputwc+0xd0>
 c01198c:	0023883a 	mov	r17,zero
 c011990:	05400284 	movi	r21,10
 c011994:	00000906 	br	c0119bc <__fputwc+0x90>
 c011998:	80800017 	ldw	r2,0(r16)
 c01199c:	11400005 	stb	r5,0(r2)
 c0119a0:	80c00017 	ldw	r3,0(r16)
 c0119a4:	18c00044 	addi	r3,r3,1
 c0119a8:	80c00015 	stw	r3,0(r16)
 c0119ac:	8c400044 	addi	r17,r17,1
 c0119b0:	dc45883a 	add	r2,sp,r17
 c0119b4:	8d00112e 	bgeu	r17,r20,c0119fc <__fputwc+0xd0>
 c0119b8:	11400003 	ldbu	r5,0(r2)
 c0119bc:	80c00217 	ldw	r3,8(r16)
 c0119c0:	18ffffc4 	addi	r3,r3,-1
 c0119c4:	80c00215 	stw	r3,8(r16)
 c0119c8:	183ff30e 	bge	r3,zero,c011998 <__alt_data_end+0xfc011998>
 c0119cc:	80800617 	ldw	r2,24(r16)
 c0119d0:	18801916 	blt	r3,r2,c011a38 <__fputwc+0x10c>
 c0119d4:	80800017 	ldw	r2,0(r16)
 c0119d8:	11400005 	stb	r5,0(r2)
 c0119dc:	80800017 	ldw	r2,0(r16)
 c0119e0:	10c00003 	ldbu	r3,0(r2)
 c0119e4:	10800044 	addi	r2,r2,1
 c0119e8:	1d402326 	beq	r3,r21,c011a78 <__fputwc+0x14c>
 c0119ec:	80800015 	stw	r2,0(r16)
 c0119f0:	8c400044 	addi	r17,r17,1
 c0119f4:	dc45883a 	add	r2,sp,r17
 c0119f8:	8d3fef36 	bltu	r17,r20,c0119b8 <__alt_data_end+0xfc0119b8>
 c0119fc:	9005883a 	mov	r2,r18
 c011a00:	00000406 	br	c011a14 <__fputwc+0xe8>
 c011a04:	80c0030b 	ldhu	r3,12(r16)
 c011a08:	a005883a 	mov	r2,r20
 c011a0c:	18c01014 	ori	r3,r3,64
 c011a10:	80c0030d 	sth	r3,12(r16)
 c011a14:	dfc00717 	ldw	ra,28(sp)
 c011a18:	dd400617 	ldw	r21,24(sp)
 c011a1c:	dd000517 	ldw	r20,20(sp)
 c011a20:	dcc00417 	ldw	r19,16(sp)
 c011a24:	dc800317 	ldw	r18,12(sp)
 c011a28:	dc400217 	ldw	r17,8(sp)
 c011a2c:	dc000117 	ldw	r16,4(sp)
 c011a30:	dec00804 	addi	sp,sp,32
 c011a34:	f800283a 	ret
 c011a38:	800d883a 	mov	r6,r16
 c011a3c:	29403fcc 	andi	r5,r5,255
 c011a40:	9809883a 	mov	r4,r19
 c011a44:	c011ca40 	call	c011ca4 <__swbuf_r>
 c011a48:	10bfffe0 	cmpeqi	r2,r2,-1
 c011a4c:	10803fcc 	andi	r2,r2,255
 c011a50:	103fd626 	beq	r2,zero,c0119ac <__alt_data_end+0xfc0119ac>
 c011a54:	00bfffc4 	movi	r2,-1
 c011a58:	003fee06 	br	c011a14 <__alt_data_end+0xfc011a14>
 c011a5c:	90ffffc4 	addi	r3,r18,-1
 c011a60:	01003f84 	movi	r4,254
 c011a64:	20ffbf36 	bltu	r4,r3,c011964 <__alt_data_end+0xfc011964>
 c011a68:	900b883a 	mov	r5,r18
 c011a6c:	dc800005 	stb	r18,0(sp)
 c011a70:	1029883a 	mov	r20,r2
 c011a74:	003fc506 	br	c01198c <__alt_data_end+0xfc01198c>
 c011a78:	800d883a 	mov	r6,r16
 c011a7c:	a80b883a 	mov	r5,r21
 c011a80:	9809883a 	mov	r4,r19
 c011a84:	c011ca40 	call	c011ca4 <__swbuf_r>
 c011a88:	10bfffe0 	cmpeqi	r2,r2,-1
 c011a8c:	003fef06 	br	c011a4c <__alt_data_end+0xfc011a4c>

0c011a90 <_fputwc_r>:
 c011a90:	3080030b 	ldhu	r2,12(r6)
 c011a94:	10c8000c 	andi	r3,r2,8192
 c011a98:	1800051e 	bne	r3,zero,c011ab0 <_fputwc_r+0x20>
 c011a9c:	30c01917 	ldw	r3,100(r6)
 c011aa0:	10880014 	ori	r2,r2,8192
 c011aa4:	3080030d 	sth	r2,12(r6)
 c011aa8:	18880014 	ori	r2,r3,8192
 c011aac:	30801915 	stw	r2,100(r6)
 c011ab0:	c01192c1 	jmpi	c01192c <__fputwc>

0c011ab4 <fputwc>:
 c011ab4:	008300b4 	movhi	r2,3074
 c011ab8:	defffc04 	addi	sp,sp,-16
 c011abc:	10aac804 	addi	r2,r2,-21728
 c011ac0:	dc000115 	stw	r16,4(sp)
 c011ac4:	14000017 	ldw	r16,0(r2)
 c011ac8:	dc400215 	stw	r17,8(sp)
 c011acc:	dfc00315 	stw	ra,12(sp)
 c011ad0:	2023883a 	mov	r17,r4
 c011ad4:	80000226 	beq	r16,zero,c011ae0 <fputwc+0x2c>
 c011ad8:	80800e17 	ldw	r2,56(r16)
 c011adc:	10001026 	beq	r2,zero,c011b20 <fputwc+0x6c>
 c011ae0:	2880030b 	ldhu	r2,12(r5)
 c011ae4:	10c8000c 	andi	r3,r2,8192
 c011ae8:	1800051e 	bne	r3,zero,c011b00 <fputwc+0x4c>
 c011aec:	28c01917 	ldw	r3,100(r5)
 c011af0:	10880014 	ori	r2,r2,8192
 c011af4:	2880030d 	sth	r2,12(r5)
 c011af8:	18880014 	ori	r2,r3,8192
 c011afc:	28801915 	stw	r2,100(r5)
 c011b00:	280d883a 	mov	r6,r5
 c011b04:	8009883a 	mov	r4,r16
 c011b08:	880b883a 	mov	r5,r17
 c011b0c:	dfc00317 	ldw	ra,12(sp)
 c011b10:	dc400217 	ldw	r17,8(sp)
 c011b14:	dc000117 	ldw	r16,4(sp)
 c011b18:	dec00404 	addi	sp,sp,16
 c011b1c:	c01192c1 	jmpi	c01192c <__fputwc>
 c011b20:	8009883a 	mov	r4,r16
 c011b24:	d9400015 	stw	r5,0(sp)
 c011b28:	c00c0580 	call	c00c058 <__sinit>
 c011b2c:	d9400017 	ldw	r5,0(sp)
 c011b30:	003feb06 	br	c011ae0 <__alt_data_end+0xfc011ae0>

0c011b34 <_fstat_r>:
 c011b34:	defffd04 	addi	sp,sp,-12
 c011b38:	2805883a 	mov	r2,r5
 c011b3c:	dc000015 	stw	r16,0(sp)
 c011b40:	040300b4 	movhi	r16,3074
 c011b44:	dc400115 	stw	r17,4(sp)
 c011b48:	84326b04 	addi	r16,r16,-13908
 c011b4c:	2023883a 	mov	r17,r4
 c011b50:	300b883a 	mov	r5,r6
 c011b54:	1009883a 	mov	r4,r2
 c011b58:	dfc00215 	stw	ra,8(sp)
 c011b5c:	80000015 	stw	zero,0(r16)
 c011b60:	c0156d00 	call	c0156d0 <fstat>
 c011b64:	00ffffc4 	movi	r3,-1
 c011b68:	10c00526 	beq	r2,r3,c011b80 <_fstat_r+0x4c>
 c011b6c:	dfc00217 	ldw	ra,8(sp)
 c011b70:	dc400117 	ldw	r17,4(sp)
 c011b74:	dc000017 	ldw	r16,0(sp)
 c011b78:	dec00304 	addi	sp,sp,12
 c011b7c:	f800283a 	ret
 c011b80:	80c00017 	ldw	r3,0(r16)
 c011b84:	183ff926 	beq	r3,zero,c011b6c <__alt_data_end+0xfc011b6c>
 c011b88:	88c00015 	stw	r3,0(r17)
 c011b8c:	003ff706 	br	c011b6c <__alt_data_end+0xfc011b6c>

0c011b90 <_isatty_r>:
 c011b90:	defffd04 	addi	sp,sp,-12
 c011b94:	dc000015 	stw	r16,0(sp)
 c011b98:	040300b4 	movhi	r16,3074
 c011b9c:	dc400115 	stw	r17,4(sp)
 c011ba0:	84326b04 	addi	r16,r16,-13908
 c011ba4:	2023883a 	mov	r17,r4
 c011ba8:	2809883a 	mov	r4,r5
 c011bac:	dfc00215 	stw	ra,8(sp)
 c011bb0:	80000015 	stw	zero,0(r16)
 c011bb4:	c0159b80 	call	c0159b8 <isatty>
 c011bb8:	00ffffc4 	movi	r3,-1
 c011bbc:	10c00526 	beq	r2,r3,c011bd4 <_isatty_r+0x44>
 c011bc0:	dfc00217 	ldw	ra,8(sp)
 c011bc4:	dc400117 	ldw	r17,4(sp)
 c011bc8:	dc000017 	ldw	r16,0(sp)
 c011bcc:	dec00304 	addi	sp,sp,12
 c011bd0:	f800283a 	ret
 c011bd4:	80c00017 	ldw	r3,0(r16)
 c011bd8:	183ff926 	beq	r3,zero,c011bc0 <__alt_data_end+0xfc011bc0>
 c011bdc:	88c00015 	stw	r3,0(r17)
 c011be0:	003ff706 	br	c011bc0 <__alt_data_end+0xfc011bc0>

0c011be4 <_lseek_r>:
 c011be4:	defffd04 	addi	sp,sp,-12
 c011be8:	2805883a 	mov	r2,r5
 c011bec:	dc000015 	stw	r16,0(sp)
 c011bf0:	040300b4 	movhi	r16,3074
 c011bf4:	dc400115 	stw	r17,4(sp)
 c011bf8:	300b883a 	mov	r5,r6
 c011bfc:	84326b04 	addi	r16,r16,-13908
 c011c00:	2023883a 	mov	r17,r4
 c011c04:	380d883a 	mov	r6,r7
 c011c08:	1009883a 	mov	r4,r2
 c011c0c:	dfc00215 	stw	ra,8(sp)
 c011c10:	80000015 	stw	zero,0(r16)
 c011c14:	c015b8c0 	call	c015b8c <lseek>
 c011c18:	00ffffc4 	movi	r3,-1
 c011c1c:	10c00526 	beq	r2,r3,c011c34 <_lseek_r+0x50>
 c011c20:	dfc00217 	ldw	ra,8(sp)
 c011c24:	dc400117 	ldw	r17,4(sp)
 c011c28:	dc000017 	ldw	r16,0(sp)
 c011c2c:	dec00304 	addi	sp,sp,12
 c011c30:	f800283a 	ret
 c011c34:	80c00017 	ldw	r3,0(r16)
 c011c38:	183ff926 	beq	r3,zero,c011c20 <__alt_data_end+0xfc011c20>
 c011c3c:	88c00015 	stw	r3,0(r17)
 c011c40:	003ff706 	br	c011c20 <__alt_data_end+0xfc011c20>

0c011c44 <_read_r>:
 c011c44:	defffd04 	addi	sp,sp,-12
 c011c48:	2805883a 	mov	r2,r5
 c011c4c:	dc000015 	stw	r16,0(sp)
 c011c50:	040300b4 	movhi	r16,3074
 c011c54:	dc400115 	stw	r17,4(sp)
 c011c58:	300b883a 	mov	r5,r6
 c011c5c:	84326b04 	addi	r16,r16,-13908
 c011c60:	2023883a 	mov	r17,r4
 c011c64:	380d883a 	mov	r6,r7
 c011c68:	1009883a 	mov	r4,r2
 c011c6c:	dfc00215 	stw	ra,8(sp)
 c011c70:	80000015 	stw	zero,0(r16)
 c011c74:	c015fd00 	call	c015fd0 <read>
 c011c78:	00ffffc4 	movi	r3,-1
 c011c7c:	10c00526 	beq	r2,r3,c011c94 <_read_r+0x50>
 c011c80:	dfc00217 	ldw	ra,8(sp)
 c011c84:	dc400117 	ldw	r17,4(sp)
 c011c88:	dc000017 	ldw	r16,0(sp)
 c011c8c:	dec00304 	addi	sp,sp,12
 c011c90:	f800283a 	ret
 c011c94:	80c00017 	ldw	r3,0(r16)
 c011c98:	183ff926 	beq	r3,zero,c011c80 <__alt_data_end+0xfc011c80>
 c011c9c:	88c00015 	stw	r3,0(r17)
 c011ca0:	003ff706 	br	c011c80 <__alt_data_end+0xfc011c80>

0c011ca4 <__swbuf_r>:
 c011ca4:	defffb04 	addi	sp,sp,-20
 c011ca8:	dcc00315 	stw	r19,12(sp)
 c011cac:	dc800215 	stw	r18,8(sp)
 c011cb0:	dc000015 	stw	r16,0(sp)
 c011cb4:	dfc00415 	stw	ra,16(sp)
 c011cb8:	dc400115 	stw	r17,4(sp)
 c011cbc:	2025883a 	mov	r18,r4
 c011cc0:	2827883a 	mov	r19,r5
 c011cc4:	3021883a 	mov	r16,r6
 c011cc8:	20000226 	beq	r4,zero,c011cd4 <__swbuf_r+0x30>
 c011ccc:	20800e17 	ldw	r2,56(r4)
 c011cd0:	10004226 	beq	r2,zero,c011ddc <__swbuf_r+0x138>
 c011cd4:	80800617 	ldw	r2,24(r16)
 c011cd8:	8100030b 	ldhu	r4,12(r16)
 c011cdc:	80800215 	stw	r2,8(r16)
 c011ce0:	2080020c 	andi	r2,r4,8
 c011ce4:	10003626 	beq	r2,zero,c011dc0 <__swbuf_r+0x11c>
 c011ce8:	80c00417 	ldw	r3,16(r16)
 c011cec:	18003426 	beq	r3,zero,c011dc0 <__swbuf_r+0x11c>
 c011cf0:	2088000c 	andi	r2,r4,8192
 c011cf4:	9c403fcc 	andi	r17,r19,255
 c011cf8:	10001a26 	beq	r2,zero,c011d64 <__swbuf_r+0xc0>
 c011cfc:	80800017 	ldw	r2,0(r16)
 c011d00:	81000517 	ldw	r4,20(r16)
 c011d04:	10c7c83a 	sub	r3,r2,r3
 c011d08:	1900200e 	bge	r3,r4,c011d8c <__swbuf_r+0xe8>
 c011d0c:	18c00044 	addi	r3,r3,1
 c011d10:	81000217 	ldw	r4,8(r16)
 c011d14:	11400044 	addi	r5,r2,1
 c011d18:	81400015 	stw	r5,0(r16)
 c011d1c:	213fffc4 	addi	r4,r4,-1
 c011d20:	81000215 	stw	r4,8(r16)
 c011d24:	14c00005 	stb	r19,0(r2)
 c011d28:	80800517 	ldw	r2,20(r16)
 c011d2c:	10c01e26 	beq	r2,r3,c011da8 <__swbuf_r+0x104>
 c011d30:	8080030b 	ldhu	r2,12(r16)
 c011d34:	1080004c 	andi	r2,r2,1
 c011d38:	10000226 	beq	r2,zero,c011d44 <__swbuf_r+0xa0>
 c011d3c:	00800284 	movi	r2,10
 c011d40:	88801926 	beq	r17,r2,c011da8 <__swbuf_r+0x104>
 c011d44:	8805883a 	mov	r2,r17
 c011d48:	dfc00417 	ldw	ra,16(sp)
 c011d4c:	dcc00317 	ldw	r19,12(sp)
 c011d50:	dc800217 	ldw	r18,8(sp)
 c011d54:	dc400117 	ldw	r17,4(sp)
 c011d58:	dc000017 	ldw	r16,0(sp)
 c011d5c:	dec00504 	addi	sp,sp,20
 c011d60:	f800283a 	ret
 c011d64:	81401917 	ldw	r5,100(r16)
 c011d68:	00b7ffc4 	movi	r2,-8193
 c011d6c:	21080014 	ori	r4,r4,8192
 c011d70:	2884703a 	and	r2,r5,r2
 c011d74:	80801915 	stw	r2,100(r16)
 c011d78:	80800017 	ldw	r2,0(r16)
 c011d7c:	8100030d 	sth	r4,12(r16)
 c011d80:	81000517 	ldw	r4,20(r16)
 c011d84:	10c7c83a 	sub	r3,r2,r3
 c011d88:	193fe016 	blt	r3,r4,c011d0c <__alt_data_end+0xfc011d0c>
 c011d8c:	800b883a 	mov	r5,r16
 c011d90:	9009883a 	mov	r4,r18
 c011d94:	c00bc6c0 	call	c00bc6c <_fflush_r>
 c011d98:	1000071e 	bne	r2,zero,c011db8 <__swbuf_r+0x114>
 c011d9c:	80800017 	ldw	r2,0(r16)
 c011da0:	00c00044 	movi	r3,1
 c011da4:	003fda06 	br	c011d10 <__alt_data_end+0xfc011d10>
 c011da8:	800b883a 	mov	r5,r16
 c011dac:	9009883a 	mov	r4,r18
 c011db0:	c00bc6c0 	call	c00bc6c <_fflush_r>
 c011db4:	103fe326 	beq	r2,zero,c011d44 <__alt_data_end+0xfc011d44>
 c011db8:	00bfffc4 	movi	r2,-1
 c011dbc:	003fe206 	br	c011d48 <__alt_data_end+0xfc011d48>
 c011dc0:	800b883a 	mov	r5,r16
 c011dc4:	9009883a 	mov	r4,r18
 c011dc8:	c00a04c0 	call	c00a04c <__swsetup_r>
 c011dcc:	103ffa1e 	bne	r2,zero,c011db8 <__alt_data_end+0xfc011db8>
 c011dd0:	8100030b 	ldhu	r4,12(r16)
 c011dd4:	80c00417 	ldw	r3,16(r16)
 c011dd8:	003fc506 	br	c011cf0 <__alt_data_end+0xfc011cf0>
 c011ddc:	c00c0580 	call	c00c058 <__sinit>
 c011de0:	003fbc06 	br	c011cd4 <__alt_data_end+0xfc011cd4>

0c011de4 <__swbuf>:
 c011de4:	008300b4 	movhi	r2,3074
 c011de8:	10aac804 	addi	r2,r2,-21728
 c011dec:	280d883a 	mov	r6,r5
 c011df0:	200b883a 	mov	r5,r4
 c011df4:	11000017 	ldw	r4,0(r2)
 c011df8:	c011ca41 	jmpi	c011ca4 <__swbuf_r>

0c011dfc <_wcrtomb_r>:
 c011dfc:	defff604 	addi	sp,sp,-40
 c011e00:	008300b4 	movhi	r2,3074
 c011e04:	dc800815 	stw	r18,32(sp)
 c011e08:	dc400715 	stw	r17,28(sp)
 c011e0c:	dc000615 	stw	r16,24(sp)
 c011e10:	10aaca04 	addi	r2,r2,-21720
 c011e14:	dfc00915 	stw	ra,36(sp)
 c011e18:	2021883a 	mov	r16,r4
 c011e1c:	3823883a 	mov	r17,r7
 c011e20:	14800017 	ldw	r18,0(r2)
 c011e24:	28001426 	beq	r5,zero,c011e78 <_wcrtomb_r+0x7c>
 c011e28:	d9400415 	stw	r5,16(sp)
 c011e2c:	d9800515 	stw	r6,20(sp)
 c011e30:	c00cc040 	call	c00cc04 <__locale_charset>
 c011e34:	d9800517 	ldw	r6,20(sp)
 c011e38:	d9400417 	ldw	r5,16(sp)
 c011e3c:	100f883a 	mov	r7,r2
 c011e40:	dc400015 	stw	r17,0(sp)
 c011e44:	8009883a 	mov	r4,r16
 c011e48:	903ee83a 	callr	r18
 c011e4c:	00ffffc4 	movi	r3,-1
 c011e50:	10c0031e 	bne	r2,r3,c011e60 <_wcrtomb_r+0x64>
 c011e54:	88000015 	stw	zero,0(r17)
 c011e58:	00c02284 	movi	r3,138
 c011e5c:	80c00015 	stw	r3,0(r16)
 c011e60:	dfc00917 	ldw	ra,36(sp)
 c011e64:	dc800817 	ldw	r18,32(sp)
 c011e68:	dc400717 	ldw	r17,28(sp)
 c011e6c:	dc000617 	ldw	r16,24(sp)
 c011e70:	dec00a04 	addi	sp,sp,40
 c011e74:	f800283a 	ret
 c011e78:	c00cc040 	call	c00cc04 <__locale_charset>
 c011e7c:	100f883a 	mov	r7,r2
 c011e80:	dc400015 	stw	r17,0(sp)
 c011e84:	000d883a 	mov	r6,zero
 c011e88:	d9400104 	addi	r5,sp,4
 c011e8c:	8009883a 	mov	r4,r16
 c011e90:	903ee83a 	callr	r18
 c011e94:	003fed06 	br	c011e4c <__alt_data_end+0xfc011e4c>

0c011e98 <wcrtomb>:
 c011e98:	defff604 	addi	sp,sp,-40
 c011e9c:	008300b4 	movhi	r2,3074
 c011ea0:	dc800615 	stw	r18,24(sp)
 c011ea4:	dc400515 	stw	r17,20(sp)
 c011ea8:	10aac804 	addi	r2,r2,-21728
 c011eac:	dfc00915 	stw	ra,36(sp)
 c011eb0:	dd000815 	stw	r20,32(sp)
 c011eb4:	dcc00715 	stw	r19,28(sp)
 c011eb8:	dc000415 	stw	r16,16(sp)
 c011ebc:	3025883a 	mov	r18,r6
 c011ec0:	14400017 	ldw	r17,0(r2)
 c011ec4:	20001926 	beq	r4,zero,c011f2c <wcrtomb+0x94>
 c011ec8:	008300b4 	movhi	r2,3074
 c011ecc:	10aaca04 	addi	r2,r2,-21720
 c011ed0:	15000017 	ldw	r20,0(r2)
 c011ed4:	2021883a 	mov	r16,r4
 c011ed8:	2827883a 	mov	r19,r5
 c011edc:	c00cc040 	call	c00cc04 <__locale_charset>
 c011ee0:	100f883a 	mov	r7,r2
 c011ee4:	dc800015 	stw	r18,0(sp)
 c011ee8:	980d883a 	mov	r6,r19
 c011eec:	800b883a 	mov	r5,r16
 c011ef0:	8809883a 	mov	r4,r17
 c011ef4:	a03ee83a 	callr	r20
 c011ef8:	00ffffc4 	movi	r3,-1
 c011efc:	10c0031e 	bne	r2,r3,c011f0c <wcrtomb+0x74>
 c011f00:	90000015 	stw	zero,0(r18)
 c011f04:	00c02284 	movi	r3,138
 c011f08:	88c00015 	stw	r3,0(r17)
 c011f0c:	dfc00917 	ldw	ra,36(sp)
 c011f10:	dd000817 	ldw	r20,32(sp)
 c011f14:	dcc00717 	ldw	r19,28(sp)
 c011f18:	dc800617 	ldw	r18,24(sp)
 c011f1c:	dc400517 	ldw	r17,20(sp)
 c011f20:	dc000417 	ldw	r16,16(sp)
 c011f24:	dec00a04 	addi	sp,sp,40
 c011f28:	f800283a 	ret
 c011f2c:	008300b4 	movhi	r2,3074
 c011f30:	10aaca04 	addi	r2,r2,-21720
 c011f34:	14000017 	ldw	r16,0(r2)
 c011f38:	c00cc040 	call	c00cc04 <__locale_charset>
 c011f3c:	100f883a 	mov	r7,r2
 c011f40:	dc800015 	stw	r18,0(sp)
 c011f44:	000d883a 	mov	r6,zero
 c011f48:	d9400104 	addi	r5,sp,4
 c011f4c:	8809883a 	mov	r4,r17
 c011f50:	803ee83a 	callr	r16
 c011f54:	003fe806 	br	c011ef8 <__alt_data_end+0xfc011ef8>

0c011f58 <__ascii_wctomb>:
 c011f58:	28000526 	beq	r5,zero,c011f70 <__ascii_wctomb+0x18>
 c011f5c:	00803fc4 	movi	r2,255
 c011f60:	11800536 	bltu	r2,r6,c011f78 <__ascii_wctomb+0x20>
 c011f64:	29800005 	stb	r6,0(r5)
 c011f68:	00800044 	movi	r2,1
 c011f6c:	f800283a 	ret
 c011f70:	0005883a 	mov	r2,zero
 c011f74:	f800283a 	ret
 c011f78:	00802284 	movi	r2,138
 c011f7c:	20800015 	stw	r2,0(r4)
 c011f80:	00bfffc4 	movi	r2,-1
 c011f84:	f800283a 	ret

0c011f88 <_wctomb_r>:
 c011f88:	008300b4 	movhi	r2,3074
 c011f8c:	defff904 	addi	sp,sp,-28
 c011f90:	10aaca04 	addi	r2,r2,-21720
 c011f94:	dfc00615 	stw	ra,24(sp)
 c011f98:	dc400515 	stw	r17,20(sp)
 c011f9c:	dc000415 	stw	r16,16(sp)
 c011fa0:	3823883a 	mov	r17,r7
 c011fa4:	14000017 	ldw	r16,0(r2)
 c011fa8:	d9000115 	stw	r4,4(sp)
 c011fac:	d9400215 	stw	r5,8(sp)
 c011fb0:	d9800315 	stw	r6,12(sp)
 c011fb4:	c00cc040 	call	c00cc04 <__locale_charset>
 c011fb8:	d9800317 	ldw	r6,12(sp)
 c011fbc:	d9400217 	ldw	r5,8(sp)
 c011fc0:	d9000117 	ldw	r4,4(sp)
 c011fc4:	100f883a 	mov	r7,r2
 c011fc8:	dc400015 	stw	r17,0(sp)
 c011fcc:	803ee83a 	callr	r16
 c011fd0:	dfc00617 	ldw	ra,24(sp)
 c011fd4:	dc400517 	ldw	r17,20(sp)
 c011fd8:	dc000417 	ldw	r16,16(sp)
 c011fdc:	dec00704 	addi	sp,sp,28
 c011fe0:	f800283a 	ret

0c011fe4 <__muldi3>:
 c011fe4:	defff604 	addi	sp,sp,-40
 c011fe8:	dd800615 	stw	r22,24(sp)
 c011fec:	dd400515 	stw	r21,20(sp)
 c011ff0:	dc400115 	stw	r17,4(sp)
 c011ff4:	357fffcc 	andi	r21,r6,65535
 c011ff8:	2022d43a 	srli	r17,r4,16
 c011ffc:	25bfffcc 	andi	r22,r4,65535
 c012000:	dcc00315 	stw	r19,12(sp)
 c012004:	dc800215 	stw	r18,8(sp)
 c012008:	2027883a 	mov	r19,r4
 c01200c:	2825883a 	mov	r18,r5
 c012010:	b009883a 	mov	r4,r22
 c012014:	a80b883a 	mov	r5,r21
 c012018:	dfc00915 	stw	ra,36(sp)
 c01201c:	df000815 	stw	fp,32(sp)
 c012020:	ddc00715 	stw	r23,28(sp)
 c012024:	3839883a 	mov	fp,r7
 c012028:	302ed43a 	srli	r23,r6,16
 c01202c:	dd000415 	stw	r20,16(sp)
 c012030:	dc000015 	stw	r16,0(sp)
 c012034:	3029883a 	mov	r20,r6
 c012038:	c004c7c0 	call	c004c7c <__mulsi3>
 c01203c:	a80b883a 	mov	r5,r21
 c012040:	8809883a 	mov	r4,r17
 c012044:	1021883a 	mov	r16,r2
 c012048:	c004c7c0 	call	c004c7c <__mulsi3>
 c01204c:	8809883a 	mov	r4,r17
 c012050:	b80b883a 	mov	r5,r23
 c012054:	102b883a 	mov	r21,r2
 c012058:	c004c7c0 	call	c004c7c <__mulsi3>
 c01205c:	b80b883a 	mov	r5,r23
 c012060:	b009883a 	mov	r4,r22
 c012064:	1023883a 	mov	r17,r2
 c012068:	c004c7c0 	call	c004c7c <__mulsi3>
 c01206c:	8006d43a 	srli	r3,r16,16
 c012070:	1545883a 	add	r2,r2,r21
 c012074:	1885883a 	add	r2,r3,r2
 c012078:	1540022e 	bgeu	r2,r21,c012084 <__muldi3+0xa0>
 c01207c:	00c00074 	movhi	r3,1
 c012080:	88e3883a 	add	r17,r17,r3
 c012084:	1006d43a 	srli	r3,r2,16
 c012088:	1004943a 	slli	r2,r2,16
 c01208c:	e00b883a 	mov	r5,fp
 c012090:	9809883a 	mov	r4,r19
 c012094:	843fffcc 	andi	r16,r16,65535
 c012098:	1c63883a 	add	r17,r3,r17
 c01209c:	1421883a 	add	r16,r2,r16
 c0120a0:	c004c7c0 	call	c004c7c <__mulsi3>
 c0120a4:	900b883a 	mov	r5,r18
 c0120a8:	a009883a 	mov	r4,r20
 c0120ac:	1027883a 	mov	r19,r2
 c0120b0:	c004c7c0 	call	c004c7c <__mulsi3>
 c0120b4:	9885883a 	add	r2,r19,r2
 c0120b8:	1447883a 	add	r3,r2,r17
 c0120bc:	8005883a 	mov	r2,r16
 c0120c0:	dfc00917 	ldw	ra,36(sp)
 c0120c4:	df000817 	ldw	fp,32(sp)
 c0120c8:	ddc00717 	ldw	r23,28(sp)
 c0120cc:	dd800617 	ldw	r22,24(sp)
 c0120d0:	dd400517 	ldw	r21,20(sp)
 c0120d4:	dd000417 	ldw	r20,16(sp)
 c0120d8:	dcc00317 	ldw	r19,12(sp)
 c0120dc:	dc800217 	ldw	r18,8(sp)
 c0120e0:	dc400117 	ldw	r17,4(sp)
 c0120e4:	dc000017 	ldw	r16,0(sp)
 c0120e8:	dec00a04 	addi	sp,sp,40
 c0120ec:	f800283a 	ret

0c0120f0 <__udivdi3>:
 c0120f0:	defff404 	addi	sp,sp,-48
 c0120f4:	dcc00515 	stw	r19,20(sp)
 c0120f8:	dc000215 	stw	r16,8(sp)
 c0120fc:	dfc00b15 	stw	ra,44(sp)
 c012100:	df000a15 	stw	fp,40(sp)
 c012104:	ddc00915 	stw	r23,36(sp)
 c012108:	dd800815 	stw	r22,32(sp)
 c01210c:	dd400715 	stw	r21,28(sp)
 c012110:	dd000615 	stw	r20,24(sp)
 c012114:	dc800415 	stw	r18,16(sp)
 c012118:	dc400315 	stw	r17,12(sp)
 c01211c:	2027883a 	mov	r19,r4
 c012120:	2821883a 	mov	r16,r5
 c012124:	3800461e 	bne	r7,zero,c012240 <__udivdi3+0x150>
 c012128:	3023883a 	mov	r17,r6
 c01212c:	2025883a 	mov	r18,r4
 c012130:	2980572e 	bgeu	r5,r6,c012290 <__udivdi3+0x1a0>
 c012134:	00bfffd4 	movui	r2,65535
 c012138:	282d883a 	mov	r22,r5
 c01213c:	1180b236 	bltu	r2,r6,c012408 <__udivdi3+0x318>
 c012140:	00803fc4 	movi	r2,255
 c012144:	1185803a 	cmpltu	r2,r2,r6
 c012148:	100490fa 	slli	r2,r2,3
 c01214c:	3086d83a 	srl	r3,r6,r2
 c012150:	010300b4 	movhi	r4,3074
 c012154:	2122ff04 	addi	r4,r4,-29700
 c012158:	20c7883a 	add	r3,r4,r3
 c01215c:	18c00003 	ldbu	r3,0(r3)
 c012160:	1885883a 	add	r2,r3,r2
 c012164:	00c00804 	movi	r3,32
 c012168:	1887c83a 	sub	r3,r3,r2
 c01216c:	18000526 	beq	r3,zero,c012184 <__udivdi3+0x94>
 c012170:	80e0983a 	sll	r16,r16,r3
 c012174:	9884d83a 	srl	r2,r19,r2
 c012178:	30e2983a 	sll	r17,r6,r3
 c01217c:	98e4983a 	sll	r18,r19,r3
 c012180:	142cb03a 	or	r22,r2,r16
 c012184:	882ad43a 	srli	r21,r17,16
 c012188:	b009883a 	mov	r4,r22
 c01218c:	8d3fffcc 	andi	r20,r17,65535
 c012190:	a80b883a 	mov	r5,r21
 c012194:	c004c240 	call	c004c24 <__umodsi3>
 c012198:	b009883a 	mov	r4,r22
 c01219c:	a80b883a 	mov	r5,r21
 c0121a0:	1027883a 	mov	r19,r2
 c0121a4:	c004bc00 	call	c004bc0 <__udivsi3>
 c0121a8:	100b883a 	mov	r5,r2
 c0121ac:	a009883a 	mov	r4,r20
 c0121b0:	102d883a 	mov	r22,r2
 c0121b4:	c004c7c0 	call	c004c7c <__mulsi3>
 c0121b8:	9826943a 	slli	r19,r19,16
 c0121bc:	9006d43a 	srli	r3,r18,16
 c0121c0:	1cc6b03a 	or	r3,r3,r19
 c0121c4:	1880052e 	bgeu	r3,r2,c0121dc <__udivdi3+0xec>
 c0121c8:	1c47883a 	add	r3,r3,r17
 c0121cc:	b13fffc4 	addi	r4,r22,-1
 c0121d0:	1c400136 	bltu	r3,r17,c0121d8 <__udivdi3+0xe8>
 c0121d4:	18814236 	bltu	r3,r2,c0126e0 <__udivdi3+0x5f0>
 c0121d8:	202d883a 	mov	r22,r4
 c0121dc:	18a1c83a 	sub	r16,r3,r2
 c0121e0:	8009883a 	mov	r4,r16
 c0121e4:	a80b883a 	mov	r5,r21
 c0121e8:	c004c240 	call	c004c24 <__umodsi3>
 c0121ec:	1027883a 	mov	r19,r2
 c0121f0:	8009883a 	mov	r4,r16
 c0121f4:	a80b883a 	mov	r5,r21
 c0121f8:	9826943a 	slli	r19,r19,16
 c0121fc:	c004bc00 	call	c004bc0 <__udivsi3>
 c012200:	100b883a 	mov	r5,r2
 c012204:	a009883a 	mov	r4,r20
 c012208:	94bfffcc 	andi	r18,r18,65535
 c01220c:	1021883a 	mov	r16,r2
 c012210:	94e4b03a 	or	r18,r18,r19
 c012214:	c004c7c0 	call	c004c7c <__mulsi3>
 c012218:	9080052e 	bgeu	r18,r2,c012230 <__udivdi3+0x140>
 c01221c:	8ca5883a 	add	r18,r17,r18
 c012220:	80ffffc4 	addi	r3,r16,-1
 c012224:	94410c36 	bltu	r18,r17,c012658 <__udivdi3+0x568>
 c012228:	90810b2e 	bgeu	r18,r2,c012658 <__udivdi3+0x568>
 c01222c:	843fff84 	addi	r16,r16,-2
 c012230:	b004943a 	slli	r2,r22,16
 c012234:	0007883a 	mov	r3,zero
 c012238:	1404b03a 	or	r2,r2,r16
 c01223c:	00005e06 	br	c0123b8 <__udivdi3+0x2c8>
 c012240:	29c05b36 	bltu	r5,r7,c0123b0 <__udivdi3+0x2c0>
 c012244:	00bfffd4 	movui	r2,65535
 c012248:	11c0672e 	bgeu	r2,r7,c0123e8 <__udivdi3+0x2f8>
 c01224c:	00804034 	movhi	r2,256
 c012250:	10bfffc4 	addi	r2,r2,-1
 c012254:	11c10a36 	bltu	r2,r7,c012680 <__udivdi3+0x590>
 c012258:	00800404 	movi	r2,16
 c01225c:	3886d83a 	srl	r3,r7,r2
 c012260:	010300b4 	movhi	r4,3074
 c012264:	2122ff04 	addi	r4,r4,-29700
 c012268:	20c7883a 	add	r3,r4,r3
 c01226c:	18c00003 	ldbu	r3,0(r3)
 c012270:	05c00804 	movi	r23,32
 c012274:	1885883a 	add	r2,r3,r2
 c012278:	b8afc83a 	sub	r23,r23,r2
 c01227c:	b800671e 	bne	r23,zero,c01241c <__udivdi3+0x32c>
 c012280:	3c010536 	bltu	r7,r16,c012698 <__udivdi3+0x5a8>
 c012284:	9985403a 	cmpgeu	r2,r19,r6
 c012288:	0007883a 	mov	r3,zero
 c01228c:	00004a06 	br	c0123b8 <__udivdi3+0x2c8>
 c012290:	3000041e 	bne	r6,zero,c0122a4 <__udivdi3+0x1b4>
 c012294:	000b883a 	mov	r5,zero
 c012298:	01000044 	movi	r4,1
 c01229c:	c004bc00 	call	c004bc0 <__udivsi3>
 c0122a0:	1023883a 	mov	r17,r2
 c0122a4:	00bfffd4 	movui	r2,65535
 c0122a8:	1440532e 	bgeu	r2,r17,c0123f8 <__udivdi3+0x308>
 c0122ac:	00804034 	movhi	r2,256
 c0122b0:	10bfffc4 	addi	r2,r2,-1
 c0122b4:	1440f436 	bltu	r2,r17,c012688 <__udivdi3+0x598>
 c0122b8:	00800404 	movi	r2,16
 c0122bc:	8886d83a 	srl	r3,r17,r2
 c0122c0:	010300b4 	movhi	r4,3074
 c0122c4:	2122ff04 	addi	r4,r4,-29700
 c0122c8:	20c7883a 	add	r3,r4,r3
 c0122cc:	18c00003 	ldbu	r3,0(r3)
 c0122d0:	1885883a 	add	r2,r3,r2
 c0122d4:	00c00804 	movi	r3,32
 c0122d8:	1887c83a 	sub	r3,r3,r2
 c0122dc:	1800a51e 	bne	r3,zero,c012574 <__udivdi3+0x484>
 c0122e0:	882ad43a 	srli	r21,r17,16
 c0122e4:	8461c83a 	sub	r16,r16,r17
 c0122e8:	8d3fffcc 	andi	r20,r17,65535
 c0122ec:	00c00044 	movi	r3,1
 c0122f0:	a80b883a 	mov	r5,r21
 c0122f4:	8009883a 	mov	r4,r16
 c0122f8:	d8c00115 	stw	r3,4(sp)
 c0122fc:	c004c240 	call	c004c24 <__umodsi3>
 c012300:	a80b883a 	mov	r5,r21
 c012304:	8009883a 	mov	r4,r16
 c012308:	1027883a 	mov	r19,r2
 c01230c:	c004bc00 	call	c004bc0 <__udivsi3>
 c012310:	a00b883a 	mov	r5,r20
 c012314:	1009883a 	mov	r4,r2
 c012318:	102d883a 	mov	r22,r2
 c01231c:	c004c7c0 	call	c004c7c <__mulsi3>
 c012320:	9826943a 	slli	r19,r19,16
 c012324:	900ed43a 	srli	r7,r18,16
 c012328:	d8c00117 	ldw	r3,4(sp)
 c01232c:	3cceb03a 	or	r7,r7,r19
 c012330:	3880052e 	bgeu	r7,r2,c012348 <__udivdi3+0x258>
 c012334:	3c4f883a 	add	r7,r7,r17
 c012338:	b13fffc4 	addi	r4,r22,-1
 c01233c:	3c400136 	bltu	r7,r17,c012344 <__udivdi3+0x254>
 c012340:	3880e436 	bltu	r7,r2,c0126d4 <__udivdi3+0x5e4>
 c012344:	202d883a 	mov	r22,r4
 c012348:	38a1c83a 	sub	r16,r7,r2
 c01234c:	8009883a 	mov	r4,r16
 c012350:	a80b883a 	mov	r5,r21
 c012354:	d8c00115 	stw	r3,4(sp)
 c012358:	c004c240 	call	c004c24 <__umodsi3>
 c01235c:	1027883a 	mov	r19,r2
 c012360:	8009883a 	mov	r4,r16
 c012364:	a80b883a 	mov	r5,r21
 c012368:	9826943a 	slli	r19,r19,16
 c01236c:	c004bc00 	call	c004bc0 <__udivsi3>
 c012370:	a00b883a 	mov	r5,r20
 c012374:	1009883a 	mov	r4,r2
 c012378:	94bfffcc 	andi	r18,r18,65535
 c01237c:	1021883a 	mov	r16,r2
 c012380:	94e4b03a 	or	r18,r18,r19
 c012384:	c004c7c0 	call	c004c7c <__mulsi3>
 c012388:	d8c00117 	ldw	r3,4(sp)
 c01238c:	9080052e 	bgeu	r18,r2,c0123a4 <__udivdi3+0x2b4>
 c012390:	8ca5883a 	add	r18,r17,r18
 c012394:	813fffc4 	addi	r4,r16,-1
 c012398:	9440ad36 	bltu	r18,r17,c012650 <__udivdi3+0x560>
 c01239c:	9080ac2e 	bgeu	r18,r2,c012650 <__udivdi3+0x560>
 c0123a0:	843fff84 	addi	r16,r16,-2
 c0123a4:	b004943a 	slli	r2,r22,16
 c0123a8:	1404b03a 	or	r2,r2,r16
 c0123ac:	00000206 	br	c0123b8 <__udivdi3+0x2c8>
 c0123b0:	0007883a 	mov	r3,zero
 c0123b4:	0005883a 	mov	r2,zero
 c0123b8:	dfc00b17 	ldw	ra,44(sp)
 c0123bc:	df000a17 	ldw	fp,40(sp)
 c0123c0:	ddc00917 	ldw	r23,36(sp)
 c0123c4:	dd800817 	ldw	r22,32(sp)
 c0123c8:	dd400717 	ldw	r21,28(sp)
 c0123cc:	dd000617 	ldw	r20,24(sp)
 c0123d0:	dcc00517 	ldw	r19,20(sp)
 c0123d4:	dc800417 	ldw	r18,16(sp)
 c0123d8:	dc400317 	ldw	r17,12(sp)
 c0123dc:	dc000217 	ldw	r16,8(sp)
 c0123e0:	dec00c04 	addi	sp,sp,48
 c0123e4:	f800283a 	ret
 c0123e8:	00803fc4 	movi	r2,255
 c0123ec:	11c5803a 	cmpltu	r2,r2,r7
 c0123f0:	100490fa 	slli	r2,r2,3
 c0123f4:	003f9906 	br	c01225c <__alt_data_end+0xfc01225c>
 c0123f8:	00803fc4 	movi	r2,255
 c0123fc:	1445803a 	cmpltu	r2,r2,r17
 c012400:	100490fa 	slli	r2,r2,3
 c012404:	003fad06 	br	c0122bc <__alt_data_end+0xfc0122bc>
 c012408:	00804034 	movhi	r2,256
 c01240c:	10bfffc4 	addi	r2,r2,-1
 c012410:	11809f36 	bltu	r2,r6,c012690 <__udivdi3+0x5a0>
 c012414:	00800404 	movi	r2,16
 c012418:	003f4c06 	br	c01214c <__alt_data_end+0xfc01214c>
 c01241c:	3dce983a 	sll	r7,r7,r23
 c012420:	30b8d83a 	srl	fp,r6,r2
 c012424:	80a2d83a 	srl	r17,r16,r2
 c012428:	35cc983a 	sll	r6,r6,r23
 c01242c:	3f38b03a 	or	fp,r7,fp
 c012430:	e024d43a 	srli	r18,fp,16
 c012434:	9884d83a 	srl	r2,r19,r2
 c012438:	85e0983a 	sll	r16,r16,r23
 c01243c:	8809883a 	mov	r4,r17
 c012440:	900b883a 	mov	r5,r18
 c012444:	d9800015 	stw	r6,0(sp)
 c012448:	1420b03a 	or	r16,r2,r16
 c01244c:	c004c240 	call	c004c24 <__umodsi3>
 c012450:	900b883a 	mov	r5,r18
 c012454:	8809883a 	mov	r4,r17
 c012458:	1029883a 	mov	r20,r2
 c01245c:	e5bfffcc 	andi	r22,fp,65535
 c012460:	c004bc00 	call	c004bc0 <__udivsi3>
 c012464:	100b883a 	mov	r5,r2
 c012468:	b009883a 	mov	r4,r22
 c01246c:	102b883a 	mov	r21,r2
 c012470:	c004c7c0 	call	c004c7c <__mulsi3>
 c012474:	a028943a 	slli	r20,r20,16
 c012478:	8006d43a 	srli	r3,r16,16
 c01247c:	1d06b03a 	or	r3,r3,r20
 c012480:	1880042e 	bgeu	r3,r2,c012494 <__udivdi3+0x3a4>
 c012484:	1f07883a 	add	r3,r3,fp
 c012488:	a93fffc4 	addi	r4,r21,-1
 c01248c:	1f00892e 	bgeu	r3,fp,c0126b4 <__udivdi3+0x5c4>
 c012490:	202b883a 	mov	r21,r4
 c012494:	18a3c83a 	sub	r17,r3,r2
 c012498:	8809883a 	mov	r4,r17
 c01249c:	900b883a 	mov	r5,r18
 c0124a0:	c004c240 	call	c004c24 <__umodsi3>
 c0124a4:	1029883a 	mov	r20,r2
 c0124a8:	8809883a 	mov	r4,r17
 c0124ac:	900b883a 	mov	r5,r18
 c0124b0:	a028943a 	slli	r20,r20,16
 c0124b4:	c004bc00 	call	c004bc0 <__udivsi3>
 c0124b8:	100b883a 	mov	r5,r2
 c0124bc:	b009883a 	mov	r4,r22
 c0124c0:	843fffcc 	andi	r16,r16,65535
 c0124c4:	1023883a 	mov	r17,r2
 c0124c8:	8520b03a 	or	r16,r16,r20
 c0124cc:	c004c7c0 	call	c004c7c <__mulsi3>
 c0124d0:	8080042e 	bgeu	r16,r2,c0124e4 <__udivdi3+0x3f4>
 c0124d4:	8721883a 	add	r16,r16,fp
 c0124d8:	88ffffc4 	addi	r3,r17,-1
 c0124dc:	8700712e 	bgeu	r16,fp,c0126a4 <__udivdi3+0x5b4>
 c0124e0:	1823883a 	mov	r17,r3
 c0124e4:	a80e943a 	slli	r7,r21,16
 c0124e8:	d8c00017 	ldw	r3,0(sp)
 c0124ec:	80a1c83a 	sub	r16,r16,r2
 c0124f0:	3c64b03a 	or	r18,r7,r17
 c0124f4:	1d3fffcc 	andi	r20,r3,65535
 c0124f8:	9022d43a 	srli	r17,r18,16
 c0124fc:	95bfffcc 	andi	r22,r18,65535
 c012500:	a00b883a 	mov	r5,r20
 c012504:	b009883a 	mov	r4,r22
 c012508:	182ad43a 	srli	r21,r3,16
 c01250c:	c004c7c0 	call	c004c7c <__mulsi3>
 c012510:	a00b883a 	mov	r5,r20
 c012514:	8809883a 	mov	r4,r17
 c012518:	1039883a 	mov	fp,r2
 c01251c:	c004c7c0 	call	c004c7c <__mulsi3>
 c012520:	8809883a 	mov	r4,r17
 c012524:	a80b883a 	mov	r5,r21
 c012528:	1029883a 	mov	r20,r2
 c01252c:	c004c7c0 	call	c004c7c <__mulsi3>
 c012530:	a80b883a 	mov	r5,r21
 c012534:	b009883a 	mov	r4,r22
 c012538:	1023883a 	mov	r17,r2
 c01253c:	c004c7c0 	call	c004c7c <__mulsi3>
 c012540:	e006d43a 	srli	r3,fp,16
 c012544:	1505883a 	add	r2,r2,r20
 c012548:	1887883a 	add	r3,r3,r2
 c01254c:	1d00022e 	bgeu	r3,r20,c012558 <__udivdi3+0x468>
 c012550:	00800074 	movhi	r2,1
 c012554:	88a3883a 	add	r17,r17,r2
 c012558:	1804d43a 	srli	r2,r3,16
 c01255c:	1463883a 	add	r17,r2,r17
 c012560:	84404436 	bltu	r16,r17,c012674 <__udivdi3+0x584>
 c012564:	84403e26 	beq	r16,r17,c012660 <__udivdi3+0x570>
 c012568:	9005883a 	mov	r2,r18
 c01256c:	0007883a 	mov	r3,zero
 c012570:	003f9106 	br	c0123b8 <__alt_data_end+0xfc0123b8>
 c012574:	88e2983a 	sll	r17,r17,r3
 c012578:	80aed83a 	srl	r23,r16,r2
 c01257c:	80e0983a 	sll	r16,r16,r3
 c012580:	882ad43a 	srli	r21,r17,16
 c012584:	9884d83a 	srl	r2,r19,r2
 c012588:	b809883a 	mov	r4,r23
 c01258c:	a80b883a 	mov	r5,r21
 c012590:	98e4983a 	sll	r18,r19,r3
 c012594:	142cb03a 	or	r22,r2,r16
 c012598:	c004c240 	call	c004c24 <__umodsi3>
 c01259c:	b809883a 	mov	r4,r23
 c0125a0:	a80b883a 	mov	r5,r21
 c0125a4:	1027883a 	mov	r19,r2
 c0125a8:	8d3fffcc 	andi	r20,r17,65535
 c0125ac:	c004bc00 	call	c004bc0 <__udivsi3>
 c0125b0:	a009883a 	mov	r4,r20
 c0125b4:	100b883a 	mov	r5,r2
 c0125b8:	102f883a 	mov	r23,r2
 c0125bc:	c004c7c0 	call	c004c7c <__mulsi3>
 c0125c0:	9826943a 	slli	r19,r19,16
 c0125c4:	b008d43a 	srli	r4,r22,16
 c0125c8:	24c8b03a 	or	r4,r4,r19
 c0125cc:	2080062e 	bgeu	r4,r2,c0125e8 <__udivdi3+0x4f8>
 c0125d0:	2449883a 	add	r4,r4,r17
 c0125d4:	b8ffffc4 	addi	r3,r23,-1
 c0125d8:	24403c36 	bltu	r4,r17,c0126cc <__udivdi3+0x5dc>
 c0125dc:	20803b2e 	bgeu	r4,r2,c0126cc <__udivdi3+0x5dc>
 c0125e0:	bdffff84 	addi	r23,r23,-2
 c0125e4:	2449883a 	add	r4,r4,r17
 c0125e8:	20a1c83a 	sub	r16,r4,r2
 c0125ec:	a80b883a 	mov	r5,r21
 c0125f0:	8009883a 	mov	r4,r16
 c0125f4:	c004c240 	call	c004c24 <__umodsi3>
 c0125f8:	a80b883a 	mov	r5,r21
 c0125fc:	8009883a 	mov	r4,r16
 c012600:	1027883a 	mov	r19,r2
 c012604:	c004bc00 	call	c004bc0 <__udivsi3>
 c012608:	a009883a 	mov	r4,r20
 c01260c:	100b883a 	mov	r5,r2
 c012610:	9826943a 	slli	r19,r19,16
 c012614:	1039883a 	mov	fp,r2
 c012618:	c004c7c0 	call	c004c7c <__mulsi3>
 c01261c:	b13fffcc 	andi	r4,r22,65535
 c012620:	24c8b03a 	or	r4,r4,r19
 c012624:	2080062e 	bgeu	r4,r2,c012640 <__udivdi3+0x550>
 c012628:	2449883a 	add	r4,r4,r17
 c01262c:	e0ffffc4 	addi	r3,fp,-1
 c012630:	24402436 	bltu	r4,r17,c0126c4 <__udivdi3+0x5d4>
 c012634:	2080232e 	bgeu	r4,r2,c0126c4 <__udivdi3+0x5d4>
 c012638:	e73fff84 	addi	fp,fp,-2
 c01263c:	2449883a 	add	r4,r4,r17
 c012640:	b82e943a 	slli	r23,r23,16
 c012644:	20a1c83a 	sub	r16,r4,r2
 c012648:	bf06b03a 	or	r3,r23,fp
 c01264c:	003f2806 	br	c0122f0 <__alt_data_end+0xfc0122f0>
 c012650:	2021883a 	mov	r16,r4
 c012654:	003f5306 	br	c0123a4 <__alt_data_end+0xfc0123a4>
 c012658:	1821883a 	mov	r16,r3
 c01265c:	003ef406 	br	c012230 <__alt_data_end+0xfc012230>
 c012660:	1806943a 	slli	r3,r3,16
 c012664:	9de6983a 	sll	r19,r19,r23
 c012668:	e73fffcc 	andi	fp,fp,65535
 c01266c:	1f07883a 	add	r3,r3,fp
 c012670:	98ffbd2e 	bgeu	r19,r3,c012568 <__alt_data_end+0xfc012568>
 c012674:	90bfffc4 	addi	r2,r18,-1
 c012678:	0007883a 	mov	r3,zero
 c01267c:	003f4e06 	br	c0123b8 <__alt_data_end+0xfc0123b8>
 c012680:	00800604 	movi	r2,24
 c012684:	003ef506 	br	c01225c <__alt_data_end+0xfc01225c>
 c012688:	00800604 	movi	r2,24
 c01268c:	003f0b06 	br	c0122bc <__alt_data_end+0xfc0122bc>
 c012690:	00800604 	movi	r2,24
 c012694:	003ead06 	br	c01214c <__alt_data_end+0xfc01214c>
 c012698:	0007883a 	mov	r3,zero
 c01269c:	00800044 	movi	r2,1
 c0126a0:	003f4506 	br	c0123b8 <__alt_data_end+0xfc0123b8>
 c0126a4:	80bf8e2e 	bgeu	r16,r2,c0124e0 <__alt_data_end+0xfc0124e0>
 c0126a8:	8c7fff84 	addi	r17,r17,-2
 c0126ac:	8721883a 	add	r16,r16,fp
 c0126b0:	003f8c06 	br	c0124e4 <__alt_data_end+0xfc0124e4>
 c0126b4:	18bf762e 	bgeu	r3,r2,c012490 <__alt_data_end+0xfc012490>
 c0126b8:	ad7fff84 	addi	r21,r21,-2
 c0126bc:	1f07883a 	add	r3,r3,fp
 c0126c0:	003f7406 	br	c012494 <__alt_data_end+0xfc012494>
 c0126c4:	1839883a 	mov	fp,r3
 c0126c8:	003fdd06 	br	c012640 <__alt_data_end+0xfc012640>
 c0126cc:	182f883a 	mov	r23,r3
 c0126d0:	003fc506 	br	c0125e8 <__alt_data_end+0xfc0125e8>
 c0126d4:	b5bfff84 	addi	r22,r22,-2
 c0126d8:	3c4f883a 	add	r7,r7,r17
 c0126dc:	003f1a06 	br	c012348 <__alt_data_end+0xfc012348>
 c0126e0:	b5bfff84 	addi	r22,r22,-2
 c0126e4:	1c47883a 	add	r3,r3,r17
 c0126e8:	003ebc06 	br	c0121dc <__alt_data_end+0xfc0121dc>

0c0126ec <__umoddi3>:
 c0126ec:	defff304 	addi	sp,sp,-52
 c0126f0:	df000b15 	stw	fp,44(sp)
 c0126f4:	dc400415 	stw	r17,16(sp)
 c0126f8:	dc000315 	stw	r16,12(sp)
 c0126fc:	dfc00c15 	stw	ra,48(sp)
 c012700:	ddc00a15 	stw	r23,40(sp)
 c012704:	dd800915 	stw	r22,36(sp)
 c012708:	dd400815 	stw	r21,32(sp)
 c01270c:	dd000715 	stw	r20,28(sp)
 c012710:	dcc00615 	stw	r19,24(sp)
 c012714:	dc800515 	stw	r18,20(sp)
 c012718:	2021883a 	mov	r16,r4
 c01271c:	2823883a 	mov	r17,r5
 c012720:	2839883a 	mov	fp,r5
 c012724:	3800401e 	bne	r7,zero,c012828 <__umoddi3+0x13c>
 c012728:	3027883a 	mov	r19,r6
 c01272c:	2029883a 	mov	r20,r4
 c012730:	2980552e 	bgeu	r5,r6,c012888 <__umoddi3+0x19c>
 c012734:	00bfffd4 	movui	r2,65535
 c012738:	1180a236 	bltu	r2,r6,c0129c4 <__umoddi3+0x2d8>
 c01273c:	01003fc4 	movi	r4,255
 c012740:	2189803a 	cmpltu	r4,r4,r6
 c012744:	200890fa 	slli	r4,r4,3
 c012748:	3104d83a 	srl	r2,r6,r4
 c01274c:	00c300b4 	movhi	r3,3074
 c012750:	18e2ff04 	addi	r3,r3,-29700
 c012754:	1885883a 	add	r2,r3,r2
 c012758:	10c00003 	ldbu	r3,0(r2)
 c01275c:	00800804 	movi	r2,32
 c012760:	1909883a 	add	r4,r3,r4
 c012764:	1125c83a 	sub	r18,r2,r4
 c012768:	90000526 	beq	r18,zero,c012780 <__umoddi3+0x94>
 c01276c:	8ca2983a 	sll	r17,r17,r18
 c012770:	8108d83a 	srl	r4,r16,r4
 c012774:	34a6983a 	sll	r19,r6,r18
 c012778:	84a8983a 	sll	r20,r16,r18
 c01277c:	2478b03a 	or	fp,r4,r17
 c012780:	982cd43a 	srli	r22,r19,16
 c012784:	e009883a 	mov	r4,fp
 c012788:	9dffffcc 	andi	r23,r19,65535
 c01278c:	b00b883a 	mov	r5,r22
 c012790:	c004c240 	call	c004c24 <__umodsi3>
 c012794:	b00b883a 	mov	r5,r22
 c012798:	e009883a 	mov	r4,fp
 c01279c:	102b883a 	mov	r21,r2
 c0127a0:	c004bc00 	call	c004bc0 <__udivsi3>
 c0127a4:	100b883a 	mov	r5,r2
 c0127a8:	b809883a 	mov	r4,r23
 c0127ac:	c004c7c0 	call	c004c7c <__mulsi3>
 c0127b0:	a82a943a 	slli	r21,r21,16
 c0127b4:	a006d43a 	srli	r3,r20,16
 c0127b8:	1d46b03a 	or	r3,r3,r21
 c0127bc:	1880032e 	bgeu	r3,r2,c0127cc <__umoddi3+0xe0>
 c0127c0:	1cc7883a 	add	r3,r3,r19
 c0127c4:	1cc00136 	bltu	r3,r19,c0127cc <__umoddi3+0xe0>
 c0127c8:	18813136 	bltu	r3,r2,c012c90 <__umoddi3+0x5a4>
 c0127cc:	18a1c83a 	sub	r16,r3,r2
 c0127d0:	b00b883a 	mov	r5,r22
 c0127d4:	8009883a 	mov	r4,r16
 c0127d8:	c004c240 	call	c004c24 <__umodsi3>
 c0127dc:	b00b883a 	mov	r5,r22
 c0127e0:	8009883a 	mov	r4,r16
 c0127e4:	1023883a 	mov	r17,r2
 c0127e8:	c004bc00 	call	c004bc0 <__udivsi3>
 c0127ec:	100b883a 	mov	r5,r2
 c0127f0:	b809883a 	mov	r4,r23
 c0127f4:	8822943a 	slli	r17,r17,16
 c0127f8:	c004c7c0 	call	c004c7c <__mulsi3>
 c0127fc:	a0ffffcc 	andi	r3,r20,65535
 c012800:	1c46b03a 	or	r3,r3,r17
 c012804:	1880042e 	bgeu	r3,r2,c012818 <__umoddi3+0x12c>
 c012808:	1cc7883a 	add	r3,r3,r19
 c01280c:	1cc00236 	bltu	r3,r19,c012818 <__umoddi3+0x12c>
 c012810:	1880012e 	bgeu	r3,r2,c012818 <__umoddi3+0x12c>
 c012814:	1cc7883a 	add	r3,r3,r19
 c012818:	1885c83a 	sub	r2,r3,r2
 c01281c:	1484d83a 	srl	r2,r2,r18
 c012820:	0007883a 	mov	r3,zero
 c012824:	00005306 	br	c012974 <__umoddi3+0x288>
 c012828:	29c05036 	bltu	r5,r7,c01296c <__umoddi3+0x280>
 c01282c:	00bfffd4 	movui	r2,65535
 c012830:	11c05c2e 	bgeu	r2,r7,c0129a4 <__umoddi3+0x2b8>
 c012834:	00804034 	movhi	r2,256
 c012838:	10bfffc4 	addi	r2,r2,-1
 c01283c:	11c10636 	bltu	r2,r7,c012c58 <__umoddi3+0x56c>
 c012840:	01000404 	movi	r4,16
 c012844:	3904d83a 	srl	r2,r7,r4
 c012848:	00c300b4 	movhi	r3,3074
 c01284c:	18e2ff04 	addi	r3,r3,-29700
 c012850:	1885883a 	add	r2,r3,r2
 c012854:	14c00003 	ldbu	r19,0(r2)
 c012858:	00c00804 	movi	r3,32
 c01285c:	9927883a 	add	r19,r19,r4
 c012860:	1ce9c83a 	sub	r20,r3,r19
 c012864:	a0005c1e 	bne	r20,zero,c0129d8 <__umoddi3+0x2ec>
 c012868:	3c400136 	bltu	r7,r17,c012870 <__umoddi3+0x184>
 c01286c:	81810a36 	bltu	r16,r6,c012c98 <__umoddi3+0x5ac>
 c012870:	8185c83a 	sub	r2,r16,r6
 c012874:	89e3c83a 	sub	r17,r17,r7
 c012878:	8089803a 	cmpltu	r4,r16,r2
 c01287c:	8939c83a 	sub	fp,r17,r4
 c012880:	e007883a 	mov	r3,fp
 c012884:	00003b06 	br	c012974 <__umoddi3+0x288>
 c012888:	3000041e 	bne	r6,zero,c01289c <__umoddi3+0x1b0>
 c01288c:	000b883a 	mov	r5,zero
 c012890:	01000044 	movi	r4,1
 c012894:	c004bc00 	call	c004bc0 <__udivsi3>
 c012898:	1027883a 	mov	r19,r2
 c01289c:	00bfffd4 	movui	r2,65535
 c0128a0:	14c0442e 	bgeu	r2,r19,c0129b4 <__umoddi3+0x2c8>
 c0128a4:	00804034 	movhi	r2,256
 c0128a8:	10bfffc4 	addi	r2,r2,-1
 c0128ac:	14c0ec36 	bltu	r2,r19,c012c60 <__umoddi3+0x574>
 c0128b0:	00800404 	movi	r2,16
 c0128b4:	9886d83a 	srl	r3,r19,r2
 c0128b8:	010300b4 	movhi	r4,3074
 c0128bc:	2122ff04 	addi	r4,r4,-29700
 c0128c0:	20c7883a 	add	r3,r4,r3
 c0128c4:	18c00003 	ldbu	r3,0(r3)
 c0128c8:	1887883a 	add	r3,r3,r2
 c0128cc:	00800804 	movi	r2,32
 c0128d0:	10e5c83a 	sub	r18,r2,r3
 c0128d4:	9000ab1e 	bne	r18,zero,c012b84 <__umoddi3+0x498>
 c0128d8:	982cd43a 	srli	r22,r19,16
 c0128dc:	8ce3c83a 	sub	r17,r17,r19
 c0128e0:	9dffffcc 	andi	r23,r19,65535
 c0128e4:	b00b883a 	mov	r5,r22
 c0128e8:	8809883a 	mov	r4,r17
 c0128ec:	c004c240 	call	c004c24 <__umodsi3>
 c0128f0:	b00b883a 	mov	r5,r22
 c0128f4:	8809883a 	mov	r4,r17
 c0128f8:	102b883a 	mov	r21,r2
 c0128fc:	c004bc00 	call	c004bc0 <__udivsi3>
 c012900:	b80b883a 	mov	r5,r23
 c012904:	1009883a 	mov	r4,r2
 c012908:	c004c7c0 	call	c004c7c <__mulsi3>
 c01290c:	a82a943a 	slli	r21,r21,16
 c012910:	a006d43a 	srli	r3,r20,16
 c012914:	1d46b03a 	or	r3,r3,r21
 c012918:	1880042e 	bgeu	r3,r2,c01292c <__umoddi3+0x240>
 c01291c:	1cc7883a 	add	r3,r3,r19
 c012920:	1cc00236 	bltu	r3,r19,c01292c <__umoddi3+0x240>
 c012924:	1880012e 	bgeu	r3,r2,c01292c <__umoddi3+0x240>
 c012928:	1cc7883a 	add	r3,r3,r19
 c01292c:	18a1c83a 	sub	r16,r3,r2
 c012930:	b00b883a 	mov	r5,r22
 c012934:	8009883a 	mov	r4,r16
 c012938:	c004c240 	call	c004c24 <__umodsi3>
 c01293c:	1023883a 	mov	r17,r2
 c012940:	b00b883a 	mov	r5,r22
 c012944:	8009883a 	mov	r4,r16
 c012948:	c004bc00 	call	c004bc0 <__udivsi3>
 c01294c:	8822943a 	slli	r17,r17,16
 c012950:	b80b883a 	mov	r5,r23
 c012954:	1009883a 	mov	r4,r2
 c012958:	c004c7c0 	call	c004c7c <__mulsi3>
 c01295c:	a53fffcc 	andi	r20,r20,65535
 c012960:	a446b03a 	or	r3,r20,r17
 c012964:	18bfac2e 	bgeu	r3,r2,c012818 <__alt_data_end+0xfc012818>
 c012968:	003fa706 	br	c012808 <__alt_data_end+0xfc012808>
 c01296c:	2005883a 	mov	r2,r4
 c012970:	2807883a 	mov	r3,r5
 c012974:	dfc00c17 	ldw	ra,48(sp)
 c012978:	df000b17 	ldw	fp,44(sp)
 c01297c:	ddc00a17 	ldw	r23,40(sp)
 c012980:	dd800917 	ldw	r22,36(sp)
 c012984:	dd400817 	ldw	r21,32(sp)
 c012988:	dd000717 	ldw	r20,28(sp)
 c01298c:	dcc00617 	ldw	r19,24(sp)
 c012990:	dc800517 	ldw	r18,20(sp)
 c012994:	dc400417 	ldw	r17,16(sp)
 c012998:	dc000317 	ldw	r16,12(sp)
 c01299c:	dec00d04 	addi	sp,sp,52
 c0129a0:	f800283a 	ret
 c0129a4:	04c03fc4 	movi	r19,255
 c0129a8:	99c9803a 	cmpltu	r4,r19,r7
 c0129ac:	200890fa 	slli	r4,r4,3
 c0129b0:	003fa406 	br	c012844 <__alt_data_end+0xfc012844>
 c0129b4:	00803fc4 	movi	r2,255
 c0129b8:	14c5803a 	cmpltu	r2,r2,r19
 c0129bc:	100490fa 	slli	r2,r2,3
 c0129c0:	003fbc06 	br	c0128b4 <__alt_data_end+0xfc0128b4>
 c0129c4:	00804034 	movhi	r2,256
 c0129c8:	10bfffc4 	addi	r2,r2,-1
 c0129cc:	1180a636 	bltu	r2,r6,c012c68 <__umoddi3+0x57c>
 c0129d0:	01000404 	movi	r4,16
 c0129d4:	003f5c06 	br	c012748 <__alt_data_end+0xfc012748>
 c0129d8:	3d0e983a 	sll	r7,r7,r20
 c0129dc:	34ead83a 	srl	r21,r6,r19
 c0129e0:	8cc6d83a 	srl	r3,r17,r19
 c0129e4:	8d10983a 	sll	r8,r17,r20
 c0129e8:	3d6ab03a 	or	r21,r7,r21
 c0129ec:	a82cd43a 	srli	r22,r21,16
 c0129f0:	84e2d83a 	srl	r17,r16,r19
 c0129f4:	1809883a 	mov	r4,r3
 c0129f8:	b00b883a 	mov	r5,r22
 c0129fc:	8a22b03a 	or	r17,r17,r8
 c012a00:	3524983a 	sll	r18,r6,r20
 c012a04:	dc400015 	stw	r17,0(sp)
 c012a08:	d8c00115 	stw	r3,4(sp)
 c012a0c:	c004c240 	call	c004c24 <__umodsi3>
 c012a10:	d8c00117 	ldw	r3,4(sp)
 c012a14:	b00b883a 	mov	r5,r22
 c012a18:	1039883a 	mov	fp,r2
 c012a1c:	1809883a 	mov	r4,r3
 c012a20:	c004bc00 	call	c004bc0 <__udivsi3>
 c012a24:	adffffcc 	andi	r23,r21,65535
 c012a28:	100b883a 	mov	r5,r2
 c012a2c:	b809883a 	mov	r4,r23
 c012a30:	1023883a 	mov	r17,r2
 c012a34:	c004c7c0 	call	c004c7c <__mulsi3>
 c012a38:	d9400017 	ldw	r5,0(sp)
 c012a3c:	e008943a 	slli	r4,fp,16
 c012a40:	8520983a 	sll	r16,r16,r20
 c012a44:	2806d43a 	srli	r3,r5,16
 c012a48:	1906b03a 	or	r3,r3,r4
 c012a4c:	1880042e 	bgeu	r3,r2,c012a60 <__umoddi3+0x374>
 c012a50:	1d47883a 	add	r3,r3,r21
 c012a54:	893fffc4 	addi	r4,r17,-1
 c012a58:	1d40892e 	bgeu	r3,r21,c012c80 <__umoddi3+0x594>
 c012a5c:	2023883a 	mov	r17,r4
 c012a60:	18b9c83a 	sub	fp,r3,r2
 c012a64:	b00b883a 	mov	r5,r22
 c012a68:	e009883a 	mov	r4,fp
 c012a6c:	c004c240 	call	c004c24 <__umodsi3>
 c012a70:	b00b883a 	mov	r5,r22
 c012a74:	e009883a 	mov	r4,fp
 c012a78:	d8800215 	stw	r2,8(sp)
 c012a7c:	c004bc00 	call	c004bc0 <__udivsi3>
 c012a80:	100b883a 	mov	r5,r2
 c012a84:	b809883a 	mov	r4,r23
 c012a88:	102d883a 	mov	r22,r2
 c012a8c:	c004c7c0 	call	c004c7c <__mulsi3>
 c012a90:	d9800217 	ldw	r6,8(sp)
 c012a94:	d8c00017 	ldw	r3,0(sp)
 c012a98:	300c943a 	slli	r6,r6,16
 c012a9c:	1a3fffcc 	andi	r8,r3,65535
 c012aa0:	4190b03a 	or	r8,r8,r6
 c012aa4:	4080042e 	bgeu	r8,r2,c012ab8 <__umoddi3+0x3cc>
 c012aa8:	4551883a 	add	r8,r8,r21
 c012aac:	b0ffffc4 	addi	r3,r22,-1
 c012ab0:	45406f2e 	bgeu	r8,r21,c012c70 <__umoddi3+0x584>
 c012ab4:	182d883a 	mov	r22,r3
 c012ab8:	880e943a 	slli	r7,r17,16
 c012abc:	9006d43a 	srli	r3,r18,16
 c012ac0:	91bfffcc 	andi	r6,r18,65535
 c012ac4:	3dacb03a 	or	r22,r7,r22
 c012ac8:	b02ed43a 	srli	r23,r22,16
 c012acc:	b5bfffcc 	andi	r22,r22,65535
 c012ad0:	300b883a 	mov	r5,r6
 c012ad4:	b009883a 	mov	r4,r22
 c012ad8:	40a3c83a 	sub	r17,r8,r2
 c012adc:	d8c00115 	stw	r3,4(sp)
 c012ae0:	d9800215 	stw	r6,8(sp)
 c012ae4:	c004c7c0 	call	c004c7c <__mulsi3>
 c012ae8:	d9800217 	ldw	r6,8(sp)
 c012aec:	b809883a 	mov	r4,r23
 c012af0:	1039883a 	mov	fp,r2
 c012af4:	300b883a 	mov	r5,r6
 c012af8:	c004c7c0 	call	c004c7c <__mulsi3>
 c012afc:	d8c00117 	ldw	r3,4(sp)
 c012b00:	b809883a 	mov	r4,r23
 c012b04:	d8800215 	stw	r2,8(sp)
 c012b08:	180b883a 	mov	r5,r3
 c012b0c:	c004c7c0 	call	c004c7c <__mulsi3>
 c012b10:	d8c00117 	ldw	r3,4(sp)
 c012b14:	b009883a 	mov	r4,r22
 c012b18:	102f883a 	mov	r23,r2
 c012b1c:	180b883a 	mov	r5,r3
 c012b20:	c004c7c0 	call	c004c7c <__mulsi3>
 c012b24:	d9800217 	ldw	r6,8(sp)
 c012b28:	e006d43a 	srli	r3,fp,16
 c012b2c:	1185883a 	add	r2,r2,r6
 c012b30:	1885883a 	add	r2,r3,r2
 c012b34:	1180022e 	bgeu	r2,r6,c012b40 <__umoddi3+0x454>
 c012b38:	00c00074 	movhi	r3,1
 c012b3c:	b8ef883a 	add	r23,r23,r3
 c012b40:	1006d43a 	srli	r3,r2,16
 c012b44:	1004943a 	slli	r2,r2,16
 c012b48:	e73fffcc 	andi	fp,fp,65535
 c012b4c:	1dc7883a 	add	r3,r3,r23
 c012b50:	1739883a 	add	fp,r2,fp
 c012b54:	88c03a36 	bltu	r17,r3,c012c40 <__umoddi3+0x554>
 c012b58:	88c05126 	beq	r17,r3,c012ca0 <__umoddi3+0x5b4>
 c012b5c:	88c9c83a 	sub	r4,r17,r3
 c012b60:	e00f883a 	mov	r7,fp
 c012b64:	81cfc83a 	sub	r7,r16,r7
 c012b68:	81c7803a 	cmpltu	r3,r16,r7
 c012b6c:	20c7c83a 	sub	r3,r4,r3
 c012b70:	1cc4983a 	sll	r2,r3,r19
 c012b74:	3d0ed83a 	srl	r7,r7,r20
 c012b78:	1d06d83a 	srl	r3,r3,r20
 c012b7c:	11c4b03a 	or	r2,r2,r7
 c012b80:	003f7c06 	br	c012974 <__alt_data_end+0xfc012974>
 c012b84:	9ca6983a 	sll	r19,r19,r18
 c012b88:	88f8d83a 	srl	fp,r17,r3
 c012b8c:	80c4d83a 	srl	r2,r16,r3
 c012b90:	982cd43a 	srli	r22,r19,16
 c012b94:	8ca2983a 	sll	r17,r17,r18
 c012b98:	e009883a 	mov	r4,fp
 c012b9c:	b00b883a 	mov	r5,r22
 c012ba0:	146ab03a 	or	r21,r2,r17
 c012ba4:	c004c240 	call	c004c24 <__umodsi3>
 c012ba8:	b00b883a 	mov	r5,r22
 c012bac:	e009883a 	mov	r4,fp
 c012bb0:	1029883a 	mov	r20,r2
 c012bb4:	9dffffcc 	andi	r23,r19,65535
 c012bb8:	c004bc00 	call	c004bc0 <__udivsi3>
 c012bbc:	b809883a 	mov	r4,r23
 c012bc0:	100b883a 	mov	r5,r2
 c012bc4:	c004c7c0 	call	c004c7c <__mulsi3>
 c012bc8:	a008943a 	slli	r4,r20,16
 c012bcc:	a806d43a 	srli	r3,r21,16
 c012bd0:	84a8983a 	sll	r20,r16,r18
 c012bd4:	1906b03a 	or	r3,r3,r4
 c012bd8:	1880042e 	bgeu	r3,r2,c012bec <__umoddi3+0x500>
 c012bdc:	1cc7883a 	add	r3,r3,r19
 c012be0:	1cc00236 	bltu	r3,r19,c012bec <__umoddi3+0x500>
 c012be4:	1880012e 	bgeu	r3,r2,c012bec <__umoddi3+0x500>
 c012be8:	1cc7883a 	add	r3,r3,r19
 c012bec:	18a3c83a 	sub	r17,r3,r2
 c012bf0:	b00b883a 	mov	r5,r22
 c012bf4:	8809883a 	mov	r4,r17
 c012bf8:	c004c240 	call	c004c24 <__umodsi3>
 c012bfc:	b00b883a 	mov	r5,r22
 c012c00:	8809883a 	mov	r4,r17
 c012c04:	1021883a 	mov	r16,r2
 c012c08:	c004bc00 	call	c004bc0 <__udivsi3>
 c012c0c:	100b883a 	mov	r5,r2
 c012c10:	b809883a 	mov	r4,r23
 c012c14:	8020943a 	slli	r16,r16,16
 c012c18:	c004c7c0 	call	c004c7c <__mulsi3>
 c012c1c:	a8ffffcc 	andi	r3,r21,65535
 c012c20:	1c06b03a 	or	r3,r3,r16
 c012c24:	1880042e 	bgeu	r3,r2,c012c38 <__umoddi3+0x54c>
 c012c28:	1cc7883a 	add	r3,r3,r19
 c012c2c:	1cc00236 	bltu	r3,r19,c012c38 <__umoddi3+0x54c>
 c012c30:	1880012e 	bgeu	r3,r2,c012c38 <__umoddi3+0x54c>
 c012c34:	1cc7883a 	add	r3,r3,r19
 c012c38:	18a3c83a 	sub	r17,r3,r2
 c012c3c:	003f2906 	br	c0128e4 <__alt_data_end+0xfc0128e4>
 c012c40:	e48fc83a 	sub	r7,fp,r18
 c012c44:	1d49c83a 	sub	r4,r3,r21
 c012c48:	e1f9803a 	cmpltu	fp,fp,r7
 c012c4c:	2739c83a 	sub	fp,r4,fp
 c012c50:	8f09c83a 	sub	r4,r17,fp
 c012c54:	003fc306 	br	c012b64 <__alt_data_end+0xfc012b64>
 c012c58:	01000604 	movi	r4,24
 c012c5c:	003ef906 	br	c012844 <__alt_data_end+0xfc012844>
 c012c60:	00800604 	movi	r2,24
 c012c64:	003f1306 	br	c0128b4 <__alt_data_end+0xfc0128b4>
 c012c68:	01000604 	movi	r4,24
 c012c6c:	003eb606 	br	c012748 <__alt_data_end+0xfc012748>
 c012c70:	40bf902e 	bgeu	r8,r2,c012ab4 <__alt_data_end+0xfc012ab4>
 c012c74:	b5bfff84 	addi	r22,r22,-2
 c012c78:	4551883a 	add	r8,r8,r21
 c012c7c:	003f8e06 	br	c012ab8 <__alt_data_end+0xfc012ab8>
 c012c80:	18bf762e 	bgeu	r3,r2,c012a5c <__alt_data_end+0xfc012a5c>
 c012c84:	8c7fff84 	addi	r17,r17,-2
 c012c88:	1d47883a 	add	r3,r3,r21
 c012c8c:	003f7406 	br	c012a60 <__alt_data_end+0xfc012a60>
 c012c90:	1cc7883a 	add	r3,r3,r19
 c012c94:	003ecd06 	br	c0127cc <__alt_data_end+0xfc0127cc>
 c012c98:	8005883a 	mov	r2,r16
 c012c9c:	003ef806 	br	c012880 <__alt_data_end+0xfc012880>
 c012ca0:	873fe736 	bltu	r16,fp,c012c40 <__alt_data_end+0xfc012c40>
 c012ca4:	e00f883a 	mov	r7,fp
 c012ca8:	0009883a 	mov	r4,zero
 c012cac:	003fad06 	br	c012b64 <__alt_data_end+0xfc012b64>

0c012cb0 <__adddf3>:
 c012cb0:	02c00434 	movhi	r11,16
 c012cb4:	5affffc4 	addi	r11,r11,-1
 c012cb8:	2806d7fa 	srli	r3,r5,31
 c012cbc:	2ad4703a 	and	r10,r5,r11
 c012cc0:	3ad2703a 	and	r9,r7,r11
 c012cc4:	3804d53a 	srli	r2,r7,20
 c012cc8:	3018d77a 	srli	r12,r6,29
 c012ccc:	280ad53a 	srli	r5,r5,20
 c012cd0:	501490fa 	slli	r10,r10,3
 c012cd4:	2010d77a 	srli	r8,r4,29
 c012cd8:	481290fa 	slli	r9,r9,3
 c012cdc:	380ed7fa 	srli	r7,r7,31
 c012ce0:	defffb04 	addi	sp,sp,-20
 c012ce4:	dc800215 	stw	r18,8(sp)
 c012ce8:	dc400115 	stw	r17,4(sp)
 c012cec:	dc000015 	stw	r16,0(sp)
 c012cf0:	dfc00415 	stw	ra,16(sp)
 c012cf4:	dcc00315 	stw	r19,12(sp)
 c012cf8:	1c803fcc 	andi	r18,r3,255
 c012cfc:	2c01ffcc 	andi	r16,r5,2047
 c012d00:	5210b03a 	or	r8,r10,r8
 c012d04:	202290fa 	slli	r17,r4,3
 c012d08:	1081ffcc 	andi	r2,r2,2047
 c012d0c:	4b12b03a 	or	r9,r9,r12
 c012d10:	300c90fa 	slli	r6,r6,3
 c012d14:	91c07526 	beq	r18,r7,c012eec <__adddf3+0x23c>
 c012d18:	8087c83a 	sub	r3,r16,r2
 c012d1c:	00c0ab0e 	bge	zero,r3,c012fcc <__adddf3+0x31c>
 c012d20:	10002a1e 	bne	r2,zero,c012dcc <__adddf3+0x11c>
 c012d24:	4984b03a 	or	r2,r9,r6
 c012d28:	1000961e 	bne	r2,zero,c012f84 <__adddf3+0x2d4>
 c012d2c:	888001cc 	andi	r2,r17,7
 c012d30:	10000726 	beq	r2,zero,c012d50 <__adddf3+0xa0>
 c012d34:	888003cc 	andi	r2,r17,15
 c012d38:	00c00104 	movi	r3,4
 c012d3c:	10c00426 	beq	r2,r3,c012d50 <__adddf3+0xa0>
 c012d40:	88c7883a 	add	r3,r17,r3
 c012d44:	1c63803a 	cmpltu	r17,r3,r17
 c012d48:	4451883a 	add	r8,r8,r17
 c012d4c:	1823883a 	mov	r17,r3
 c012d50:	4080202c 	andhi	r2,r8,128
 c012d54:	10005926 	beq	r2,zero,c012ebc <__adddf3+0x20c>
 c012d58:	84000044 	addi	r16,r16,1
 c012d5c:	0081ffc4 	movi	r2,2047
 c012d60:	8080ba26 	beq	r16,r2,c01304c <__adddf3+0x39c>
 c012d64:	00bfe034 	movhi	r2,65408
 c012d68:	10bfffc4 	addi	r2,r2,-1
 c012d6c:	4090703a 	and	r8,r8,r2
 c012d70:	4004977a 	slli	r2,r8,29
 c012d74:	4010927a 	slli	r8,r8,9
 c012d78:	8822d0fa 	srli	r17,r17,3
 c012d7c:	8401ffcc 	andi	r16,r16,2047
 c012d80:	4010d33a 	srli	r8,r8,12
 c012d84:	9007883a 	mov	r3,r18
 c012d88:	1444b03a 	or	r2,r2,r17
 c012d8c:	8401ffcc 	andi	r16,r16,2047
 c012d90:	8020953a 	slli	r16,r16,20
 c012d94:	18c03fcc 	andi	r3,r3,255
 c012d98:	01000434 	movhi	r4,16
 c012d9c:	213fffc4 	addi	r4,r4,-1
 c012da0:	180697fa 	slli	r3,r3,31
 c012da4:	4110703a 	and	r8,r8,r4
 c012da8:	4410b03a 	or	r8,r8,r16
 c012dac:	40c6b03a 	or	r3,r8,r3
 c012db0:	dfc00417 	ldw	ra,16(sp)
 c012db4:	dcc00317 	ldw	r19,12(sp)
 c012db8:	dc800217 	ldw	r18,8(sp)
 c012dbc:	dc400117 	ldw	r17,4(sp)
 c012dc0:	dc000017 	ldw	r16,0(sp)
 c012dc4:	dec00504 	addi	sp,sp,20
 c012dc8:	f800283a 	ret
 c012dcc:	0081ffc4 	movi	r2,2047
 c012dd0:	80bfd626 	beq	r16,r2,c012d2c <__alt_data_end+0xfc012d2c>
 c012dd4:	4a402034 	orhi	r9,r9,128
 c012dd8:	00800e04 	movi	r2,56
 c012ddc:	10c09f16 	blt	r2,r3,c01305c <__adddf3+0x3ac>
 c012de0:	008007c4 	movi	r2,31
 c012de4:	10c0c216 	blt	r2,r3,c0130f0 <__adddf3+0x440>
 c012de8:	00800804 	movi	r2,32
 c012dec:	10c5c83a 	sub	r2,r2,r3
 c012df0:	488a983a 	sll	r5,r9,r2
 c012df4:	30c8d83a 	srl	r4,r6,r3
 c012df8:	3084983a 	sll	r2,r6,r2
 c012dfc:	48c6d83a 	srl	r3,r9,r3
 c012e00:	290cb03a 	or	r6,r5,r4
 c012e04:	1004c03a 	cmpne	r2,r2,zero
 c012e08:	308cb03a 	or	r6,r6,r2
 c012e0c:	898dc83a 	sub	r6,r17,r6
 c012e10:	89a3803a 	cmpltu	r17,r17,r6
 c012e14:	40d1c83a 	sub	r8,r8,r3
 c012e18:	4451c83a 	sub	r8,r8,r17
 c012e1c:	3023883a 	mov	r17,r6
 c012e20:	4080202c 	andhi	r2,r8,128
 c012e24:	10002326 	beq	r2,zero,c012eb4 <__adddf3+0x204>
 c012e28:	04c02034 	movhi	r19,128
 c012e2c:	9cffffc4 	addi	r19,r19,-1
 c012e30:	44e6703a 	and	r19,r8,r19
 c012e34:	98007626 	beq	r19,zero,c013010 <__adddf3+0x360>
 c012e38:	9809883a 	mov	r4,r19
 c012e3c:	c0154f00 	call	c0154f0 <__clzsi2>
 c012e40:	10fffe04 	addi	r3,r2,-8
 c012e44:	010007c4 	movi	r4,31
 c012e48:	20c07716 	blt	r4,r3,c013028 <__adddf3+0x378>
 c012e4c:	00800804 	movi	r2,32
 c012e50:	10c5c83a 	sub	r2,r2,r3
 c012e54:	8884d83a 	srl	r2,r17,r2
 c012e58:	98d0983a 	sll	r8,r19,r3
 c012e5c:	88e2983a 	sll	r17,r17,r3
 c012e60:	1204b03a 	or	r2,r2,r8
 c012e64:	1c007416 	blt	r3,r16,c013038 <__adddf3+0x388>
 c012e68:	1c21c83a 	sub	r16,r3,r16
 c012e6c:	82000044 	addi	r8,r16,1
 c012e70:	00c007c4 	movi	r3,31
 c012e74:	1a009116 	blt	r3,r8,c0130bc <__adddf3+0x40c>
 c012e78:	00c00804 	movi	r3,32
 c012e7c:	1a07c83a 	sub	r3,r3,r8
 c012e80:	8a08d83a 	srl	r4,r17,r8
 c012e84:	88e2983a 	sll	r17,r17,r3
 c012e88:	10c6983a 	sll	r3,r2,r3
 c012e8c:	1210d83a 	srl	r8,r2,r8
 c012e90:	8804c03a 	cmpne	r2,r17,zero
 c012e94:	1906b03a 	or	r3,r3,r4
 c012e98:	18a2b03a 	or	r17,r3,r2
 c012e9c:	0021883a 	mov	r16,zero
 c012ea0:	003fa206 	br	c012d2c <__alt_data_end+0xfc012d2c>
 c012ea4:	1890b03a 	or	r8,r3,r2
 c012ea8:	40017d26 	beq	r8,zero,c0134a0 <__adddf3+0x7f0>
 c012eac:	1011883a 	mov	r8,r2
 c012eb0:	1823883a 	mov	r17,r3
 c012eb4:	888001cc 	andi	r2,r17,7
 c012eb8:	103f9e1e 	bne	r2,zero,c012d34 <__alt_data_end+0xfc012d34>
 c012ebc:	4004977a 	slli	r2,r8,29
 c012ec0:	8822d0fa 	srli	r17,r17,3
 c012ec4:	4010d0fa 	srli	r8,r8,3
 c012ec8:	9007883a 	mov	r3,r18
 c012ecc:	1444b03a 	or	r2,r2,r17
 c012ed0:	0101ffc4 	movi	r4,2047
 c012ed4:	81002426 	beq	r16,r4,c012f68 <__adddf3+0x2b8>
 c012ed8:	8120703a 	and	r16,r16,r4
 c012edc:	01000434 	movhi	r4,16
 c012ee0:	213fffc4 	addi	r4,r4,-1
 c012ee4:	4110703a 	and	r8,r8,r4
 c012ee8:	003fa806 	br	c012d8c <__alt_data_end+0xfc012d8c>
 c012eec:	8089c83a 	sub	r4,r16,r2
 c012ef0:	01005e0e 	bge	zero,r4,c01306c <__adddf3+0x3bc>
 c012ef4:	10002b26 	beq	r2,zero,c012fa4 <__adddf3+0x2f4>
 c012ef8:	0081ffc4 	movi	r2,2047
 c012efc:	80bf8b26 	beq	r16,r2,c012d2c <__alt_data_end+0xfc012d2c>
 c012f00:	4a402034 	orhi	r9,r9,128
 c012f04:	00800e04 	movi	r2,56
 c012f08:	1100a40e 	bge	r2,r4,c01319c <__adddf3+0x4ec>
 c012f0c:	498cb03a 	or	r6,r9,r6
 c012f10:	300ac03a 	cmpne	r5,r6,zero
 c012f14:	0013883a 	mov	r9,zero
 c012f18:	2c4b883a 	add	r5,r5,r17
 c012f1c:	2c63803a 	cmpltu	r17,r5,r17
 c012f20:	4a11883a 	add	r8,r9,r8
 c012f24:	8a11883a 	add	r8,r17,r8
 c012f28:	2823883a 	mov	r17,r5
 c012f2c:	4080202c 	andhi	r2,r8,128
 c012f30:	103fe026 	beq	r2,zero,c012eb4 <__alt_data_end+0xfc012eb4>
 c012f34:	84000044 	addi	r16,r16,1
 c012f38:	0081ffc4 	movi	r2,2047
 c012f3c:	8080d226 	beq	r16,r2,c013288 <__adddf3+0x5d8>
 c012f40:	00bfe034 	movhi	r2,65408
 c012f44:	10bfffc4 	addi	r2,r2,-1
 c012f48:	4090703a 	and	r8,r8,r2
 c012f4c:	880ad07a 	srli	r5,r17,1
 c012f50:	400897fa 	slli	r4,r8,31
 c012f54:	88c0004c 	andi	r3,r17,1
 c012f58:	28e2b03a 	or	r17,r5,r3
 c012f5c:	4010d07a 	srli	r8,r8,1
 c012f60:	2462b03a 	or	r17,r4,r17
 c012f64:	003f7106 	br	c012d2c <__alt_data_end+0xfc012d2c>
 c012f68:	4088b03a 	or	r4,r8,r2
 c012f6c:	20014526 	beq	r4,zero,c013484 <__adddf3+0x7d4>
 c012f70:	01000434 	movhi	r4,16
 c012f74:	42000234 	orhi	r8,r8,8
 c012f78:	213fffc4 	addi	r4,r4,-1
 c012f7c:	4110703a 	and	r8,r8,r4
 c012f80:	003f8206 	br	c012d8c <__alt_data_end+0xfc012d8c>
 c012f84:	18ffffc4 	addi	r3,r3,-1
 c012f88:	1800491e 	bne	r3,zero,c0130b0 <__adddf3+0x400>
 c012f8c:	898bc83a 	sub	r5,r17,r6
 c012f90:	8963803a 	cmpltu	r17,r17,r5
 c012f94:	4251c83a 	sub	r8,r8,r9
 c012f98:	4451c83a 	sub	r8,r8,r17
 c012f9c:	2823883a 	mov	r17,r5
 c012fa0:	003f9f06 	br	c012e20 <__alt_data_end+0xfc012e20>
 c012fa4:	4984b03a 	or	r2,r9,r6
 c012fa8:	103f6026 	beq	r2,zero,c012d2c <__alt_data_end+0xfc012d2c>
 c012fac:	213fffc4 	addi	r4,r4,-1
 c012fb0:	2000931e 	bne	r4,zero,c013200 <__adddf3+0x550>
 c012fb4:	898d883a 	add	r6,r17,r6
 c012fb8:	3463803a 	cmpltu	r17,r6,r17
 c012fbc:	4251883a 	add	r8,r8,r9
 c012fc0:	8a11883a 	add	r8,r17,r8
 c012fc4:	3023883a 	mov	r17,r6
 c012fc8:	003fd806 	br	c012f2c <__alt_data_end+0xfc012f2c>
 c012fcc:	1800541e 	bne	r3,zero,c013120 <__adddf3+0x470>
 c012fd0:	80800044 	addi	r2,r16,1
 c012fd4:	1081ffcc 	andi	r2,r2,2047
 c012fd8:	00c00044 	movi	r3,1
 c012fdc:	1880a00e 	bge	r3,r2,c013260 <__adddf3+0x5b0>
 c012fe0:	8989c83a 	sub	r4,r17,r6
 c012fe4:	8905803a 	cmpltu	r2,r17,r4
 c012fe8:	4267c83a 	sub	r19,r8,r9
 c012fec:	98a7c83a 	sub	r19,r19,r2
 c012ff0:	9880202c 	andhi	r2,r19,128
 c012ff4:	10006326 	beq	r2,zero,c013184 <__adddf3+0x4d4>
 c012ff8:	3463c83a 	sub	r17,r6,r17
 c012ffc:	4a07c83a 	sub	r3,r9,r8
 c013000:	344d803a 	cmpltu	r6,r6,r17
 c013004:	19a7c83a 	sub	r19,r3,r6
 c013008:	3825883a 	mov	r18,r7
 c01300c:	983f8a1e 	bne	r19,zero,c012e38 <__alt_data_end+0xfc012e38>
 c013010:	8809883a 	mov	r4,r17
 c013014:	c0154f00 	call	c0154f0 <__clzsi2>
 c013018:	10800804 	addi	r2,r2,32
 c01301c:	10fffe04 	addi	r3,r2,-8
 c013020:	010007c4 	movi	r4,31
 c013024:	20ff890e 	bge	r4,r3,c012e4c <__alt_data_end+0xfc012e4c>
 c013028:	10bff604 	addi	r2,r2,-40
 c01302c:	8884983a 	sll	r2,r17,r2
 c013030:	0023883a 	mov	r17,zero
 c013034:	1c3f8c0e 	bge	r3,r16,c012e68 <__alt_data_end+0xfc012e68>
 c013038:	023fe034 	movhi	r8,65408
 c01303c:	423fffc4 	addi	r8,r8,-1
 c013040:	80e1c83a 	sub	r16,r16,r3
 c013044:	1210703a 	and	r8,r2,r8
 c013048:	003f3806 	br	c012d2c <__alt_data_end+0xfc012d2c>
 c01304c:	9007883a 	mov	r3,r18
 c013050:	0011883a 	mov	r8,zero
 c013054:	0005883a 	mov	r2,zero
 c013058:	003f4c06 	br	c012d8c <__alt_data_end+0xfc012d8c>
 c01305c:	498cb03a 	or	r6,r9,r6
 c013060:	300cc03a 	cmpne	r6,r6,zero
 c013064:	0007883a 	mov	r3,zero
 c013068:	003f6806 	br	c012e0c <__alt_data_end+0xfc012e0c>
 c01306c:	20009c1e 	bne	r4,zero,c0132e0 <__adddf3+0x630>
 c013070:	80800044 	addi	r2,r16,1
 c013074:	1141ffcc 	andi	r5,r2,2047
 c013078:	01000044 	movi	r4,1
 c01307c:	2140670e 	bge	r4,r5,c01321c <__adddf3+0x56c>
 c013080:	0101ffc4 	movi	r4,2047
 c013084:	11007f26 	beq	r2,r4,c013284 <__adddf3+0x5d4>
 c013088:	898d883a 	add	r6,r17,r6
 c01308c:	4247883a 	add	r3,r8,r9
 c013090:	3451803a 	cmpltu	r8,r6,r17
 c013094:	40d1883a 	add	r8,r8,r3
 c013098:	402297fa 	slli	r17,r8,31
 c01309c:	300cd07a 	srli	r6,r6,1
 c0130a0:	4010d07a 	srli	r8,r8,1
 c0130a4:	1021883a 	mov	r16,r2
 c0130a8:	89a2b03a 	or	r17,r17,r6
 c0130ac:	003f1f06 	br	c012d2c <__alt_data_end+0xfc012d2c>
 c0130b0:	0081ffc4 	movi	r2,2047
 c0130b4:	80bf481e 	bne	r16,r2,c012dd8 <__alt_data_end+0xfc012dd8>
 c0130b8:	003f1c06 	br	c012d2c <__alt_data_end+0xfc012d2c>
 c0130bc:	843ff844 	addi	r16,r16,-31
 c0130c0:	01000804 	movi	r4,32
 c0130c4:	1406d83a 	srl	r3,r2,r16
 c0130c8:	41005026 	beq	r8,r4,c01320c <__adddf3+0x55c>
 c0130cc:	01001004 	movi	r4,64
 c0130d0:	2211c83a 	sub	r8,r4,r8
 c0130d4:	1204983a 	sll	r2,r2,r8
 c0130d8:	88a2b03a 	or	r17,r17,r2
 c0130dc:	8822c03a 	cmpne	r17,r17,zero
 c0130e0:	1c62b03a 	or	r17,r3,r17
 c0130e4:	0011883a 	mov	r8,zero
 c0130e8:	0021883a 	mov	r16,zero
 c0130ec:	003f7106 	br	c012eb4 <__alt_data_end+0xfc012eb4>
 c0130f0:	193ff804 	addi	r4,r3,-32
 c0130f4:	00800804 	movi	r2,32
 c0130f8:	4908d83a 	srl	r4,r9,r4
 c0130fc:	18804526 	beq	r3,r2,c013214 <__adddf3+0x564>
 c013100:	00801004 	movi	r2,64
 c013104:	10c5c83a 	sub	r2,r2,r3
 c013108:	4886983a 	sll	r3,r9,r2
 c01310c:	198cb03a 	or	r6,r3,r6
 c013110:	300cc03a 	cmpne	r6,r6,zero
 c013114:	218cb03a 	or	r6,r4,r6
 c013118:	0007883a 	mov	r3,zero
 c01311c:	003f3b06 	br	c012e0c <__alt_data_end+0xfc012e0c>
 c013120:	80002a26 	beq	r16,zero,c0131cc <__adddf3+0x51c>
 c013124:	0101ffc4 	movi	r4,2047
 c013128:	11006826 	beq	r2,r4,c0132cc <__adddf3+0x61c>
 c01312c:	00c7c83a 	sub	r3,zero,r3
 c013130:	42002034 	orhi	r8,r8,128
 c013134:	01000e04 	movi	r4,56
 c013138:	20c07c16 	blt	r4,r3,c01332c <__adddf3+0x67c>
 c01313c:	010007c4 	movi	r4,31
 c013140:	20c0da16 	blt	r4,r3,c0134ac <__adddf3+0x7fc>
 c013144:	01000804 	movi	r4,32
 c013148:	20c9c83a 	sub	r4,r4,r3
 c01314c:	4114983a 	sll	r10,r8,r4
 c013150:	88cad83a 	srl	r5,r17,r3
 c013154:	8908983a 	sll	r4,r17,r4
 c013158:	40c6d83a 	srl	r3,r8,r3
 c01315c:	5162b03a 	or	r17,r10,r5
 c013160:	2008c03a 	cmpne	r4,r4,zero
 c013164:	8922b03a 	or	r17,r17,r4
 c013168:	3463c83a 	sub	r17,r6,r17
 c01316c:	48c7c83a 	sub	r3,r9,r3
 c013170:	344d803a 	cmpltu	r6,r6,r17
 c013174:	1991c83a 	sub	r8,r3,r6
 c013178:	1021883a 	mov	r16,r2
 c01317c:	3825883a 	mov	r18,r7
 c013180:	003f2706 	br	c012e20 <__alt_data_end+0xfc012e20>
 c013184:	24d0b03a 	or	r8,r4,r19
 c013188:	40001b1e 	bne	r8,zero,c0131f8 <__adddf3+0x548>
 c01318c:	0005883a 	mov	r2,zero
 c013190:	0007883a 	mov	r3,zero
 c013194:	0021883a 	mov	r16,zero
 c013198:	003f4d06 	br	c012ed0 <__alt_data_end+0xfc012ed0>
 c01319c:	008007c4 	movi	r2,31
 c0131a0:	11003c16 	blt	r2,r4,c013294 <__adddf3+0x5e4>
 c0131a4:	00800804 	movi	r2,32
 c0131a8:	1105c83a 	sub	r2,r2,r4
 c0131ac:	488e983a 	sll	r7,r9,r2
 c0131b0:	310ad83a 	srl	r5,r6,r4
 c0131b4:	3084983a 	sll	r2,r6,r2
 c0131b8:	4912d83a 	srl	r9,r9,r4
 c0131bc:	394ab03a 	or	r5,r7,r5
 c0131c0:	1004c03a 	cmpne	r2,r2,zero
 c0131c4:	288ab03a 	or	r5,r5,r2
 c0131c8:	003f5306 	br	c012f18 <__alt_data_end+0xfc012f18>
 c0131cc:	4448b03a 	or	r4,r8,r17
 c0131d0:	20003e26 	beq	r4,zero,c0132cc <__adddf3+0x61c>
 c0131d4:	00c6303a 	nor	r3,zero,r3
 c0131d8:	18003a1e 	bne	r3,zero,c0132c4 <__adddf3+0x614>
 c0131dc:	3463c83a 	sub	r17,r6,r17
 c0131e0:	4a07c83a 	sub	r3,r9,r8
 c0131e4:	344d803a 	cmpltu	r6,r6,r17
 c0131e8:	1991c83a 	sub	r8,r3,r6
 c0131ec:	1021883a 	mov	r16,r2
 c0131f0:	3825883a 	mov	r18,r7
 c0131f4:	003f0a06 	br	c012e20 <__alt_data_end+0xfc012e20>
 c0131f8:	2023883a 	mov	r17,r4
 c0131fc:	003f0d06 	br	c012e34 <__alt_data_end+0xfc012e34>
 c013200:	0081ffc4 	movi	r2,2047
 c013204:	80bf3f1e 	bne	r16,r2,c012f04 <__alt_data_end+0xfc012f04>
 c013208:	003ec806 	br	c012d2c <__alt_data_end+0xfc012d2c>
 c01320c:	0005883a 	mov	r2,zero
 c013210:	003fb106 	br	c0130d8 <__alt_data_end+0xfc0130d8>
 c013214:	0007883a 	mov	r3,zero
 c013218:	003fbc06 	br	c01310c <__alt_data_end+0xfc01310c>
 c01321c:	4444b03a 	or	r2,r8,r17
 c013220:	8000871e 	bne	r16,zero,c013440 <__adddf3+0x790>
 c013224:	1000ba26 	beq	r2,zero,c013510 <__adddf3+0x860>
 c013228:	4984b03a 	or	r2,r9,r6
 c01322c:	103ebf26 	beq	r2,zero,c012d2c <__alt_data_end+0xfc012d2c>
 c013230:	8985883a 	add	r2,r17,r6
 c013234:	4247883a 	add	r3,r8,r9
 c013238:	1451803a 	cmpltu	r8,r2,r17
 c01323c:	40d1883a 	add	r8,r8,r3
 c013240:	40c0202c 	andhi	r3,r8,128
 c013244:	1023883a 	mov	r17,r2
 c013248:	183f1a26 	beq	r3,zero,c012eb4 <__alt_data_end+0xfc012eb4>
 c01324c:	00bfe034 	movhi	r2,65408
 c013250:	10bfffc4 	addi	r2,r2,-1
 c013254:	2021883a 	mov	r16,r4
 c013258:	4090703a 	and	r8,r8,r2
 c01325c:	003eb306 	br	c012d2c <__alt_data_end+0xfc012d2c>
 c013260:	4444b03a 	or	r2,r8,r17
 c013264:	8000291e 	bne	r16,zero,c01330c <__adddf3+0x65c>
 c013268:	10004b1e 	bne	r2,zero,c013398 <__adddf3+0x6e8>
 c01326c:	4990b03a 	or	r8,r9,r6
 c013270:	40008b26 	beq	r8,zero,c0134a0 <__adddf3+0x7f0>
 c013274:	4811883a 	mov	r8,r9
 c013278:	3023883a 	mov	r17,r6
 c01327c:	3825883a 	mov	r18,r7
 c013280:	003eaa06 	br	c012d2c <__alt_data_end+0xfc012d2c>
 c013284:	1021883a 	mov	r16,r2
 c013288:	0011883a 	mov	r8,zero
 c01328c:	0005883a 	mov	r2,zero
 c013290:	003f0f06 	br	c012ed0 <__alt_data_end+0xfc012ed0>
 c013294:	217ff804 	addi	r5,r4,-32
 c013298:	00800804 	movi	r2,32
 c01329c:	494ad83a 	srl	r5,r9,r5
 c0132a0:	20807d26 	beq	r4,r2,c013498 <__adddf3+0x7e8>
 c0132a4:	00801004 	movi	r2,64
 c0132a8:	1109c83a 	sub	r4,r2,r4
 c0132ac:	4912983a 	sll	r9,r9,r4
 c0132b0:	498cb03a 	or	r6,r9,r6
 c0132b4:	300cc03a 	cmpne	r6,r6,zero
 c0132b8:	298ab03a 	or	r5,r5,r6
 c0132bc:	0013883a 	mov	r9,zero
 c0132c0:	003f1506 	br	c012f18 <__alt_data_end+0xfc012f18>
 c0132c4:	0101ffc4 	movi	r4,2047
 c0132c8:	113f9a1e 	bne	r2,r4,c013134 <__alt_data_end+0xfc013134>
 c0132cc:	4811883a 	mov	r8,r9
 c0132d0:	3023883a 	mov	r17,r6
 c0132d4:	1021883a 	mov	r16,r2
 c0132d8:	3825883a 	mov	r18,r7
 c0132dc:	003e9306 	br	c012d2c <__alt_data_end+0xfc012d2c>
 c0132e0:	8000161e 	bne	r16,zero,c01333c <__adddf3+0x68c>
 c0132e4:	444ab03a 	or	r5,r8,r17
 c0132e8:	28005126 	beq	r5,zero,c013430 <__adddf3+0x780>
 c0132ec:	0108303a 	nor	r4,zero,r4
 c0132f0:	20004d1e 	bne	r4,zero,c013428 <__adddf3+0x778>
 c0132f4:	89a3883a 	add	r17,r17,r6
 c0132f8:	4253883a 	add	r9,r8,r9
 c0132fc:	898d803a 	cmpltu	r6,r17,r6
 c013300:	3251883a 	add	r8,r6,r9
 c013304:	1021883a 	mov	r16,r2
 c013308:	003f0806 	br	c012f2c <__alt_data_end+0xfc012f2c>
 c01330c:	1000301e 	bne	r2,zero,c0133d0 <__adddf3+0x720>
 c013310:	4984b03a 	or	r2,r9,r6
 c013314:	10007126 	beq	r2,zero,c0134dc <__adddf3+0x82c>
 c013318:	4811883a 	mov	r8,r9
 c01331c:	3023883a 	mov	r17,r6
 c013320:	3825883a 	mov	r18,r7
 c013324:	0401ffc4 	movi	r16,2047
 c013328:	003e8006 	br	c012d2c <__alt_data_end+0xfc012d2c>
 c01332c:	4462b03a 	or	r17,r8,r17
 c013330:	8822c03a 	cmpne	r17,r17,zero
 c013334:	0007883a 	mov	r3,zero
 c013338:	003f8b06 	br	c013168 <__alt_data_end+0xfc013168>
 c01333c:	0141ffc4 	movi	r5,2047
 c013340:	11403b26 	beq	r2,r5,c013430 <__adddf3+0x780>
 c013344:	0109c83a 	sub	r4,zero,r4
 c013348:	42002034 	orhi	r8,r8,128
 c01334c:	01400e04 	movi	r5,56
 c013350:	29006716 	blt	r5,r4,c0134f0 <__adddf3+0x840>
 c013354:	014007c4 	movi	r5,31
 c013358:	29007016 	blt	r5,r4,c01351c <__adddf3+0x86c>
 c01335c:	01400804 	movi	r5,32
 c013360:	290bc83a 	sub	r5,r5,r4
 c013364:	4154983a 	sll	r10,r8,r5
 c013368:	890ed83a 	srl	r7,r17,r4
 c01336c:	894a983a 	sll	r5,r17,r5
 c013370:	4108d83a 	srl	r4,r8,r4
 c013374:	51e2b03a 	or	r17,r10,r7
 c013378:	280ac03a 	cmpne	r5,r5,zero
 c01337c:	8962b03a 	or	r17,r17,r5
 c013380:	89a3883a 	add	r17,r17,r6
 c013384:	2253883a 	add	r9,r4,r9
 c013388:	898d803a 	cmpltu	r6,r17,r6
 c01338c:	3251883a 	add	r8,r6,r9
 c013390:	1021883a 	mov	r16,r2
 c013394:	003ee506 	br	c012f2c <__alt_data_end+0xfc012f2c>
 c013398:	4984b03a 	or	r2,r9,r6
 c01339c:	103e6326 	beq	r2,zero,c012d2c <__alt_data_end+0xfc012d2c>
 c0133a0:	8987c83a 	sub	r3,r17,r6
 c0133a4:	88c9803a 	cmpltu	r4,r17,r3
 c0133a8:	4245c83a 	sub	r2,r8,r9
 c0133ac:	1105c83a 	sub	r2,r2,r4
 c0133b0:	1100202c 	andhi	r4,r2,128
 c0133b4:	203ebb26 	beq	r4,zero,c012ea4 <__alt_data_end+0xfc012ea4>
 c0133b8:	3463c83a 	sub	r17,r6,r17
 c0133bc:	4a07c83a 	sub	r3,r9,r8
 c0133c0:	344d803a 	cmpltu	r6,r6,r17
 c0133c4:	1991c83a 	sub	r8,r3,r6
 c0133c8:	3825883a 	mov	r18,r7
 c0133cc:	003e5706 	br	c012d2c <__alt_data_end+0xfc012d2c>
 c0133d0:	4984b03a 	or	r2,r9,r6
 c0133d4:	10002e26 	beq	r2,zero,c013490 <__adddf3+0x7e0>
 c0133d8:	4004d0fa 	srli	r2,r8,3
 c0133dc:	8822d0fa 	srli	r17,r17,3
 c0133e0:	4010977a 	slli	r8,r8,29
 c0133e4:	10c0022c 	andhi	r3,r2,8
 c0133e8:	4462b03a 	or	r17,r8,r17
 c0133ec:	18000826 	beq	r3,zero,c013410 <__adddf3+0x760>
 c0133f0:	4808d0fa 	srli	r4,r9,3
 c0133f4:	20c0022c 	andhi	r3,r4,8
 c0133f8:	1800051e 	bne	r3,zero,c013410 <__adddf3+0x760>
 c0133fc:	300cd0fa 	srli	r6,r6,3
 c013400:	4806977a 	slli	r3,r9,29
 c013404:	2005883a 	mov	r2,r4
 c013408:	3825883a 	mov	r18,r7
 c01340c:	19a2b03a 	or	r17,r3,r6
 c013410:	8810d77a 	srli	r8,r17,29
 c013414:	100490fa 	slli	r2,r2,3
 c013418:	882290fa 	slli	r17,r17,3
 c01341c:	0401ffc4 	movi	r16,2047
 c013420:	4090b03a 	or	r8,r8,r2
 c013424:	003e4106 	br	c012d2c <__alt_data_end+0xfc012d2c>
 c013428:	0141ffc4 	movi	r5,2047
 c01342c:	117fc71e 	bne	r2,r5,c01334c <__alt_data_end+0xfc01334c>
 c013430:	4811883a 	mov	r8,r9
 c013434:	3023883a 	mov	r17,r6
 c013438:	1021883a 	mov	r16,r2
 c01343c:	003e3b06 	br	c012d2c <__alt_data_end+0xfc012d2c>
 c013440:	10002f26 	beq	r2,zero,c013500 <__adddf3+0x850>
 c013444:	4984b03a 	or	r2,r9,r6
 c013448:	10001126 	beq	r2,zero,c013490 <__adddf3+0x7e0>
 c01344c:	4004d0fa 	srli	r2,r8,3
 c013450:	8822d0fa 	srli	r17,r17,3
 c013454:	4010977a 	slli	r8,r8,29
 c013458:	10c0022c 	andhi	r3,r2,8
 c01345c:	4462b03a 	or	r17,r8,r17
 c013460:	183feb26 	beq	r3,zero,c013410 <__alt_data_end+0xfc013410>
 c013464:	4808d0fa 	srli	r4,r9,3
 c013468:	20c0022c 	andhi	r3,r4,8
 c01346c:	183fe81e 	bne	r3,zero,c013410 <__alt_data_end+0xfc013410>
 c013470:	300cd0fa 	srli	r6,r6,3
 c013474:	4806977a 	slli	r3,r9,29
 c013478:	2005883a 	mov	r2,r4
 c01347c:	19a2b03a 	or	r17,r3,r6
 c013480:	003fe306 	br	c013410 <__alt_data_end+0xfc013410>
 c013484:	0011883a 	mov	r8,zero
 c013488:	0005883a 	mov	r2,zero
 c01348c:	003e3f06 	br	c012d8c <__alt_data_end+0xfc012d8c>
 c013490:	0401ffc4 	movi	r16,2047
 c013494:	003e2506 	br	c012d2c <__alt_data_end+0xfc012d2c>
 c013498:	0013883a 	mov	r9,zero
 c01349c:	003f8406 	br	c0132b0 <__alt_data_end+0xfc0132b0>
 c0134a0:	0005883a 	mov	r2,zero
 c0134a4:	0007883a 	mov	r3,zero
 c0134a8:	003e8906 	br	c012ed0 <__alt_data_end+0xfc012ed0>
 c0134ac:	197ff804 	addi	r5,r3,-32
 c0134b0:	01000804 	movi	r4,32
 c0134b4:	414ad83a 	srl	r5,r8,r5
 c0134b8:	19002426 	beq	r3,r4,c01354c <__adddf3+0x89c>
 c0134bc:	01001004 	movi	r4,64
 c0134c0:	20c7c83a 	sub	r3,r4,r3
 c0134c4:	40c6983a 	sll	r3,r8,r3
 c0134c8:	1c46b03a 	or	r3,r3,r17
 c0134cc:	1806c03a 	cmpne	r3,r3,zero
 c0134d0:	28e2b03a 	or	r17,r5,r3
 c0134d4:	0007883a 	mov	r3,zero
 c0134d8:	003f2306 	br	c013168 <__alt_data_end+0xfc013168>
 c0134dc:	0007883a 	mov	r3,zero
 c0134e0:	5811883a 	mov	r8,r11
 c0134e4:	00bfffc4 	movi	r2,-1
 c0134e8:	0401ffc4 	movi	r16,2047
 c0134ec:	003e7806 	br	c012ed0 <__alt_data_end+0xfc012ed0>
 c0134f0:	4462b03a 	or	r17,r8,r17
 c0134f4:	8822c03a 	cmpne	r17,r17,zero
 c0134f8:	0009883a 	mov	r4,zero
 c0134fc:	003fa006 	br	c013380 <__alt_data_end+0xfc013380>
 c013500:	4811883a 	mov	r8,r9
 c013504:	3023883a 	mov	r17,r6
 c013508:	0401ffc4 	movi	r16,2047
 c01350c:	003e0706 	br	c012d2c <__alt_data_end+0xfc012d2c>
 c013510:	4811883a 	mov	r8,r9
 c013514:	3023883a 	mov	r17,r6
 c013518:	003e0406 	br	c012d2c <__alt_data_end+0xfc012d2c>
 c01351c:	21fff804 	addi	r7,r4,-32
 c013520:	01400804 	movi	r5,32
 c013524:	41ced83a 	srl	r7,r8,r7
 c013528:	21400a26 	beq	r4,r5,c013554 <__adddf3+0x8a4>
 c01352c:	01401004 	movi	r5,64
 c013530:	2909c83a 	sub	r4,r5,r4
 c013534:	4108983a 	sll	r4,r8,r4
 c013538:	2448b03a 	or	r4,r4,r17
 c01353c:	2008c03a 	cmpne	r4,r4,zero
 c013540:	3922b03a 	or	r17,r7,r4
 c013544:	0009883a 	mov	r4,zero
 c013548:	003f8d06 	br	c013380 <__alt_data_end+0xfc013380>
 c01354c:	0007883a 	mov	r3,zero
 c013550:	003fdd06 	br	c0134c8 <__alt_data_end+0xfc0134c8>
 c013554:	0009883a 	mov	r4,zero
 c013558:	003ff706 	br	c013538 <__alt_data_end+0xfc013538>

0c01355c <__divdf3>:
 c01355c:	defff004 	addi	sp,sp,-64
 c013560:	dc800815 	stw	r18,32(sp)
 c013564:	2824d53a 	srli	r18,r5,20
 c013568:	dd800c15 	stw	r22,48(sp)
 c01356c:	282cd7fa 	srli	r22,r5,31
 c013570:	dc000615 	stw	r16,24(sp)
 c013574:	04000434 	movhi	r16,16
 c013578:	843fffc4 	addi	r16,r16,-1
 c01357c:	dfc00f15 	stw	ra,60(sp)
 c013580:	df000e15 	stw	fp,56(sp)
 c013584:	ddc00d15 	stw	r23,52(sp)
 c013588:	dd400b15 	stw	r21,44(sp)
 c01358c:	dd000a15 	stw	r20,40(sp)
 c013590:	dcc00915 	stw	r19,36(sp)
 c013594:	dc400715 	stw	r17,28(sp)
 c013598:	9481ffcc 	andi	r18,r18,2047
 c01359c:	2c20703a 	and	r16,r5,r16
 c0135a0:	b2003fcc 	andi	r8,r22,255
 c0135a4:	90006126 	beq	r18,zero,c01372c <__divdf3+0x1d0>
 c0135a8:	0081ffc4 	movi	r2,2047
 c0135ac:	202b883a 	mov	r21,r4
 c0135b0:	90803726 	beq	r18,r2,c013690 <__divdf3+0x134>
 c0135b4:	80800434 	orhi	r2,r16,16
 c0135b8:	100490fa 	slli	r2,r2,3
 c0135bc:	2020d77a 	srli	r16,r4,29
 c0135c0:	202a90fa 	slli	r21,r4,3
 c0135c4:	94bf0044 	addi	r18,r18,-1023
 c0135c8:	80a0b03a 	or	r16,r16,r2
 c0135cc:	0013883a 	mov	r9,zero
 c0135d0:	000b883a 	mov	r5,zero
 c0135d4:	3806d53a 	srli	r3,r7,20
 c0135d8:	382ed7fa 	srli	r23,r7,31
 c0135dc:	04400434 	movhi	r17,16
 c0135e0:	8c7fffc4 	addi	r17,r17,-1
 c0135e4:	18c1ffcc 	andi	r3,r3,2047
 c0135e8:	3029883a 	mov	r20,r6
 c0135ec:	3c62703a 	and	r17,r7,r17
 c0135f0:	bf003fcc 	andi	fp,r23,255
 c0135f4:	18006e26 	beq	r3,zero,c0137b0 <__divdf3+0x254>
 c0135f8:	0081ffc4 	movi	r2,2047
 c0135fc:	18806626 	beq	r3,r2,c013798 <__divdf3+0x23c>
 c013600:	88800434 	orhi	r2,r17,16
 c013604:	100490fa 	slli	r2,r2,3
 c013608:	3022d77a 	srli	r17,r6,29
 c01360c:	302890fa 	slli	r20,r6,3
 c013610:	18ff0044 	addi	r3,r3,-1023
 c013614:	88a2b03a 	or	r17,r17,r2
 c013618:	000f883a 	mov	r7,zero
 c01361c:	b5e6f03a 	xor	r19,r22,r23
 c013620:	3a4cb03a 	or	r6,r7,r9
 c013624:	008003c4 	movi	r2,15
 c013628:	9809883a 	mov	r4,r19
 c01362c:	90c7c83a 	sub	r3,r18,r3
 c013630:	9cc03fcc 	andi	r19,r19,255
 c013634:	11809636 	bltu	r2,r6,c013890 <__divdf3+0x334>
 c013638:	300c90ba 	slli	r6,r6,2
 c01363c:	00830074 	movhi	r2,3073
 c013640:	108d9404 	addi	r2,r2,13904
 c013644:	308d883a 	add	r6,r6,r2
 c013648:	30800017 	ldw	r2,0(r6)
 c01364c:	1000683a 	jmp	r2
 c013650:	0c013890 	cmplti	r16,at,1250
 c013654:	0c0136c8 	cmpgei	r16,at,1243
 c013658:	0c013880 	call	c01388 <__alt_mem_onchip_memory2_0+0xc01388>
 c01365c:	0c0136bc 	xorhi	r16,at,1242
 c013660:	0c013880 	call	c01388 <__alt_mem_onchip_memory2_0+0xc01388>
 c013664:	0c013854 	ori	r16,at,1249
 c013668:	0c013880 	call	c01388 <__alt_mem_onchip_memory2_0+0xc01388>
 c01366c:	0c0136bc 	xorhi	r16,at,1242
 c013670:	0c0136c8 	cmpgei	r16,at,1243
 c013674:	0c0136c8 	cmpgei	r16,at,1243
 c013678:	0c013854 	ori	r16,at,1249
 c01367c:	0c0136bc 	xorhi	r16,at,1242
 c013680:	0c0136ac 	andhi	r16,at,1242
 c013684:	0c0136ac 	andhi	r16,at,1242
 c013688:	0c0136ac 	andhi	r16,at,1242
 c01368c:	0c013c18 	cmpnei	r16,at,1264
 c013690:	2404b03a 	or	r2,r4,r16
 c013694:	10006c1e 	bne	r2,zero,c013848 <__divdf3+0x2ec>
 c013698:	02400204 	movi	r9,8
 c01369c:	0021883a 	mov	r16,zero
 c0136a0:	002b883a 	mov	r21,zero
 c0136a4:	01400084 	movi	r5,2
 c0136a8:	003fca06 	br	c0135d4 <__alt_data_end+0xfc0135d4>
 c0136ac:	8023883a 	mov	r17,r16
 c0136b0:	a829883a 	mov	r20,r21
 c0136b4:	4039883a 	mov	fp,r8
 c0136b8:	280f883a 	mov	r7,r5
 c0136bc:	00800084 	movi	r2,2
 c0136c0:	3881601e 	bne	r7,r2,c013c44 <__divdf3+0x6e8>
 c0136c4:	e027883a 	mov	r19,fp
 c0136c8:	9900004c 	andi	r4,r19,1
 c0136cc:	0081ffc4 	movi	r2,2047
 c0136d0:	0021883a 	mov	r16,zero
 c0136d4:	002b883a 	mov	r21,zero
 c0136d8:	1004953a 	slli	r2,r2,20
 c0136dc:	20c03fcc 	andi	r3,r4,255
 c0136e0:	01400434 	movhi	r5,16
 c0136e4:	297fffc4 	addi	r5,r5,-1
 c0136e8:	180697fa 	slli	r3,r3,31
 c0136ec:	8160703a 	and	r16,r16,r5
 c0136f0:	80a0b03a 	or	r16,r16,r2
 c0136f4:	80c6b03a 	or	r3,r16,r3
 c0136f8:	a805883a 	mov	r2,r21
 c0136fc:	dfc00f17 	ldw	ra,60(sp)
 c013700:	df000e17 	ldw	fp,56(sp)
 c013704:	ddc00d17 	ldw	r23,52(sp)
 c013708:	dd800c17 	ldw	r22,48(sp)
 c01370c:	dd400b17 	ldw	r21,44(sp)
 c013710:	dd000a17 	ldw	r20,40(sp)
 c013714:	dcc00917 	ldw	r19,36(sp)
 c013718:	dc800817 	ldw	r18,32(sp)
 c01371c:	dc400717 	ldw	r17,28(sp)
 c013720:	dc000617 	ldw	r16,24(sp)
 c013724:	dec01004 	addi	sp,sp,64
 c013728:	f800283a 	ret
 c01372c:	2404b03a 	or	r2,r4,r16
 c013730:	2023883a 	mov	r17,r4
 c013734:	10003f26 	beq	r2,zero,c013834 <__divdf3+0x2d8>
 c013738:	80015e26 	beq	r16,zero,c013cb4 <__divdf3+0x758>
 c01373c:	8009883a 	mov	r4,r16
 c013740:	d9800215 	stw	r6,8(sp)
 c013744:	d9c00515 	stw	r7,20(sp)
 c013748:	da000415 	stw	r8,16(sp)
 c01374c:	c0154f00 	call	c0154f0 <__clzsi2>
 c013750:	d9800217 	ldw	r6,8(sp)
 c013754:	d9c00517 	ldw	r7,20(sp)
 c013758:	da000417 	ldw	r8,16(sp)
 c01375c:	113ffd44 	addi	r4,r2,-11
 c013760:	00c00704 	movi	r3,28
 c013764:	19014f16 	blt	r3,r4,c013ca4 <__divdf3+0x748>
 c013768:	00c00744 	movi	r3,29
 c01376c:	157ffe04 	addi	r21,r2,-8
 c013770:	1907c83a 	sub	r3,r3,r4
 c013774:	8560983a 	sll	r16,r16,r21
 c013778:	88c6d83a 	srl	r3,r17,r3
 c01377c:	8d6a983a 	sll	r21,r17,r21
 c013780:	1c20b03a 	or	r16,r3,r16
 c013784:	1080fcc4 	addi	r2,r2,1011
 c013788:	00a5c83a 	sub	r18,zero,r2
 c01378c:	0013883a 	mov	r9,zero
 c013790:	000b883a 	mov	r5,zero
 c013794:	003f8f06 	br	c0135d4 <__alt_data_end+0xfc0135d4>
 c013798:	3444b03a 	or	r2,r6,r17
 c01379c:	1000231e 	bne	r2,zero,c01382c <__divdf3+0x2d0>
 c0137a0:	0023883a 	mov	r17,zero
 c0137a4:	0029883a 	mov	r20,zero
 c0137a8:	01c00084 	movi	r7,2
 c0137ac:	003f9b06 	br	c01361c <__alt_data_end+0xfc01361c>
 c0137b0:	3444b03a 	or	r2,r6,r17
 c0137b4:	10001926 	beq	r2,zero,c01381c <__divdf3+0x2c0>
 c0137b8:	88014b26 	beq	r17,zero,c013ce8 <__divdf3+0x78c>
 c0137bc:	8809883a 	mov	r4,r17
 c0137c0:	d9400115 	stw	r5,4(sp)
 c0137c4:	d9800215 	stw	r6,8(sp)
 c0137c8:	da000415 	stw	r8,16(sp)
 c0137cc:	da400315 	stw	r9,12(sp)
 c0137d0:	c0154f00 	call	c0154f0 <__clzsi2>
 c0137d4:	d9400117 	ldw	r5,4(sp)
 c0137d8:	d9800217 	ldw	r6,8(sp)
 c0137dc:	da000417 	ldw	r8,16(sp)
 c0137e0:	da400317 	ldw	r9,12(sp)
 c0137e4:	113ffd44 	addi	r4,r2,-11
 c0137e8:	00c00704 	movi	r3,28
 c0137ec:	19013a16 	blt	r3,r4,c013cd8 <__divdf3+0x77c>
 c0137f0:	00c00744 	movi	r3,29
 c0137f4:	153ffe04 	addi	r20,r2,-8
 c0137f8:	1907c83a 	sub	r3,r3,r4
 c0137fc:	8d22983a 	sll	r17,r17,r20
 c013800:	30c6d83a 	srl	r3,r6,r3
 c013804:	3528983a 	sll	r20,r6,r20
 c013808:	1c62b03a 	or	r17,r3,r17
 c01380c:	1080fcc4 	addi	r2,r2,1011
 c013810:	0087c83a 	sub	r3,zero,r2
 c013814:	000f883a 	mov	r7,zero
 c013818:	003f8006 	br	c01361c <__alt_data_end+0xfc01361c>
 c01381c:	0023883a 	mov	r17,zero
 c013820:	0029883a 	mov	r20,zero
 c013824:	01c00044 	movi	r7,1
 c013828:	003f7c06 	br	c01361c <__alt_data_end+0xfc01361c>
 c01382c:	01c000c4 	movi	r7,3
 c013830:	003f7a06 	br	c01361c <__alt_data_end+0xfc01361c>
 c013834:	02400104 	movi	r9,4
 c013838:	0021883a 	mov	r16,zero
 c01383c:	002b883a 	mov	r21,zero
 c013840:	01400044 	movi	r5,1
 c013844:	003f6306 	br	c0135d4 <__alt_data_end+0xfc0135d4>
 c013848:	02400304 	movi	r9,12
 c01384c:	014000c4 	movi	r5,3
 c013850:	003f6006 	br	c0135d4 <__alt_data_end+0xfc0135d4>
 c013854:	04000434 	movhi	r16,16
 c013858:	0009883a 	mov	r4,zero
 c01385c:	843fffc4 	addi	r16,r16,-1
 c013860:	057fffc4 	movi	r21,-1
 c013864:	0081ffc4 	movi	r2,2047
 c013868:	003f9b06 	br	c0136d8 <__alt_data_end+0xfc0136d8>
 c01386c:	00c00044 	movi	r3,1
 c013870:	1887c83a 	sub	r3,r3,r2
 c013874:	01000e04 	movi	r4,56
 c013878:	20c1530e 	bge	r4,r3,c013dc8 <__divdf3+0x86c>
 c01387c:	9900004c 	andi	r4,r19,1
 c013880:	0005883a 	mov	r2,zero
 c013884:	0021883a 	mov	r16,zero
 c013888:	002b883a 	mov	r21,zero
 c01388c:	003f9206 	br	c0136d8 <__alt_data_end+0xfc0136d8>
 c013890:	8c012e36 	bltu	r17,r16,c013d4c <__divdf3+0x7f0>
 c013894:	84412c26 	beq	r16,r17,c013d48 <__divdf3+0x7ec>
 c013898:	a82f883a 	mov	r23,r21
 c01389c:	18ffffc4 	addi	r3,r3,-1
 c0138a0:	002b883a 	mov	r21,zero
 c0138a4:	a004d63a 	srli	r2,r20,24
 c0138a8:	8822923a 	slli	r17,r17,8
 c0138ac:	a028923a 	slli	r20,r20,8
 c0138b0:	8009883a 	mov	r4,r16
 c0138b4:	88acb03a 	or	r22,r17,r2
 c0138b8:	dd000015 	stw	r20,0(sp)
 c0138bc:	b028d43a 	srli	r20,r22,16
 c0138c0:	d8c00215 	stw	r3,8(sp)
 c0138c4:	b4bfffcc 	andi	r18,r22,65535
 c0138c8:	a00b883a 	mov	r5,r20
 c0138cc:	c004bc00 	call	c004bc0 <__udivsi3>
 c0138d0:	100b883a 	mov	r5,r2
 c0138d4:	9009883a 	mov	r4,r18
 c0138d8:	1023883a 	mov	r17,r2
 c0138dc:	c004c7c0 	call	c004c7c <__mulsi3>
 c0138e0:	8009883a 	mov	r4,r16
 c0138e4:	a00b883a 	mov	r5,r20
 c0138e8:	1039883a 	mov	fp,r2
 c0138ec:	c004c240 	call	c004c24 <__umodsi3>
 c0138f0:	1004943a 	slli	r2,r2,16
 c0138f4:	b808d43a 	srli	r4,r23,16
 c0138f8:	d8c00217 	ldw	r3,8(sp)
 c0138fc:	2084b03a 	or	r2,r4,r2
 c013900:	1700062e 	bgeu	r2,fp,c01391c <__divdf3+0x3c0>
 c013904:	1585883a 	add	r2,r2,r22
 c013908:	893fffc4 	addi	r4,r17,-1
 c01390c:	15811d36 	bltu	r2,r22,c013d84 <__divdf3+0x828>
 c013910:	17011c2e 	bgeu	r2,fp,c013d84 <__divdf3+0x828>
 c013914:	8c7fff84 	addi	r17,r17,-2
 c013918:	1585883a 	add	r2,r2,r22
 c01391c:	1739c83a 	sub	fp,r2,fp
 c013920:	a00b883a 	mov	r5,r20
 c013924:	e009883a 	mov	r4,fp
 c013928:	d8c00215 	stw	r3,8(sp)
 c01392c:	c004bc00 	call	c004bc0 <__udivsi3>
 c013930:	100b883a 	mov	r5,r2
 c013934:	9009883a 	mov	r4,r18
 c013938:	1021883a 	mov	r16,r2
 c01393c:	c004c7c0 	call	c004c7c <__mulsi3>
 c013940:	a00b883a 	mov	r5,r20
 c013944:	e009883a 	mov	r4,fp
 c013948:	d8800415 	stw	r2,16(sp)
 c01394c:	c004c240 	call	c004c24 <__umodsi3>
 c013950:	1004943a 	slli	r2,r2,16
 c013954:	da000417 	ldw	r8,16(sp)
 c013958:	bdffffcc 	andi	r23,r23,65535
 c01395c:	b884b03a 	or	r2,r23,r2
 c013960:	d8c00217 	ldw	r3,8(sp)
 c013964:	1200062e 	bgeu	r2,r8,c013980 <__divdf3+0x424>
 c013968:	1585883a 	add	r2,r2,r22
 c01396c:	813fffc4 	addi	r4,r16,-1
 c013970:	15810236 	bltu	r2,r22,c013d7c <__divdf3+0x820>
 c013974:	1201012e 	bgeu	r2,r8,c013d7c <__divdf3+0x820>
 c013978:	843fff84 	addi	r16,r16,-2
 c01397c:	1585883a 	add	r2,r2,r22
 c013980:	8822943a 	slli	r17,r17,16
 c013984:	d9800017 	ldw	r6,0(sp)
 c013988:	1211c83a 	sub	r8,r2,r8
 c01398c:	8c22b03a 	or	r17,r17,r16
 c013990:	373fffcc 	andi	fp,r6,65535
 c013994:	8abfffcc 	andi	r10,r17,65535
 c013998:	8820d43a 	srli	r16,r17,16
 c01399c:	5009883a 	mov	r4,r10
 c0139a0:	e00b883a 	mov	r5,fp
 c0139a4:	302ed43a 	srli	r23,r6,16
 c0139a8:	d8c00215 	stw	r3,8(sp)
 c0139ac:	da000415 	stw	r8,16(sp)
 c0139b0:	da800115 	stw	r10,4(sp)
 c0139b4:	c004c7c0 	call	c004c7c <__mulsi3>
 c0139b8:	800b883a 	mov	r5,r16
 c0139bc:	e009883a 	mov	r4,fp
 c0139c0:	d8800515 	stw	r2,20(sp)
 c0139c4:	c004c7c0 	call	c004c7c <__mulsi3>
 c0139c8:	8009883a 	mov	r4,r16
 c0139cc:	b80b883a 	mov	r5,r23
 c0139d0:	d8800315 	stw	r2,12(sp)
 c0139d4:	c004c7c0 	call	c004c7c <__mulsi3>
 c0139d8:	da800117 	ldw	r10,4(sp)
 c0139dc:	b80b883a 	mov	r5,r23
 c0139e0:	1021883a 	mov	r16,r2
 c0139e4:	5009883a 	mov	r4,r10
 c0139e8:	c004c7c0 	call	c004c7c <__mulsi3>
 c0139ec:	d9c00517 	ldw	r7,20(sp)
 c0139f0:	da400317 	ldw	r9,12(sp)
 c0139f4:	d8c00217 	ldw	r3,8(sp)
 c0139f8:	3808d43a 	srli	r4,r7,16
 c0139fc:	1245883a 	add	r2,r2,r9
 c013a00:	da000417 	ldw	r8,16(sp)
 c013a04:	2085883a 	add	r2,r4,r2
 c013a08:	1240022e 	bgeu	r2,r9,c013a14 <__divdf3+0x4b8>
 c013a0c:	01000074 	movhi	r4,1
 c013a10:	8121883a 	add	r16,r16,r4
 c013a14:	1008d43a 	srli	r4,r2,16
 c013a18:	1004943a 	slli	r2,r2,16
 c013a1c:	39ffffcc 	andi	r7,r7,65535
 c013a20:	2409883a 	add	r4,r4,r16
 c013a24:	11c5883a 	add	r2,r2,r7
 c013a28:	4100bb36 	bltu	r8,r4,c013d18 <__divdf3+0x7bc>
 c013a2c:	4100d726 	beq	r8,r4,c013d8c <__divdf3+0x830>
 c013a30:	4109c83a 	sub	r4,r8,r4
 c013a34:	a8a1c83a 	sub	r16,r21,r2
 c013a38:	ac2b803a 	cmpltu	r21,r21,r16
 c013a3c:	256bc83a 	sub	r21,r4,r21
 c013a40:	b540d926 	beq	r22,r21,c013da8 <__divdf3+0x84c>
 c013a44:	a00b883a 	mov	r5,r20
 c013a48:	a809883a 	mov	r4,r21
 c013a4c:	d8c00215 	stw	r3,8(sp)
 c013a50:	c004bc00 	call	c004bc0 <__udivsi3>
 c013a54:	100b883a 	mov	r5,r2
 c013a58:	9009883a 	mov	r4,r18
 c013a5c:	d8800515 	stw	r2,20(sp)
 c013a60:	c004c7c0 	call	c004c7c <__mulsi3>
 c013a64:	a809883a 	mov	r4,r21
 c013a68:	a00b883a 	mov	r5,r20
 c013a6c:	d8800415 	stw	r2,16(sp)
 c013a70:	c004c240 	call	c004c24 <__umodsi3>
 c013a74:	1004943a 	slli	r2,r2,16
 c013a78:	8008d43a 	srli	r4,r16,16
 c013a7c:	da000417 	ldw	r8,16(sp)
 c013a80:	d8c00217 	ldw	r3,8(sp)
 c013a84:	2084b03a 	or	r2,r4,r2
 c013a88:	d9c00517 	ldw	r7,20(sp)
 c013a8c:	1200062e 	bgeu	r2,r8,c013aa8 <__divdf3+0x54c>
 c013a90:	1585883a 	add	r2,r2,r22
 c013a94:	393fffc4 	addi	r4,r7,-1
 c013a98:	1580c536 	bltu	r2,r22,c013db0 <__divdf3+0x854>
 c013a9c:	1200c42e 	bgeu	r2,r8,c013db0 <__divdf3+0x854>
 c013aa0:	39ffff84 	addi	r7,r7,-2
 c013aa4:	1585883a 	add	r2,r2,r22
 c013aa8:	122bc83a 	sub	r21,r2,r8
 c013aac:	a00b883a 	mov	r5,r20
 c013ab0:	a809883a 	mov	r4,r21
 c013ab4:	d8c00215 	stw	r3,8(sp)
 c013ab8:	d9c00515 	stw	r7,20(sp)
 c013abc:	c004bc00 	call	c004bc0 <__udivsi3>
 c013ac0:	9009883a 	mov	r4,r18
 c013ac4:	100b883a 	mov	r5,r2
 c013ac8:	d8800415 	stw	r2,16(sp)
 c013acc:	c004c7c0 	call	c004c7c <__mulsi3>
 c013ad0:	a809883a 	mov	r4,r21
 c013ad4:	a00b883a 	mov	r5,r20
 c013ad8:	1025883a 	mov	r18,r2
 c013adc:	c004c240 	call	c004c24 <__umodsi3>
 c013ae0:	1004943a 	slli	r2,r2,16
 c013ae4:	813fffcc 	andi	r4,r16,65535
 c013ae8:	d8c00217 	ldw	r3,8(sp)
 c013aec:	20a0b03a 	or	r16,r4,r2
 c013af0:	d9c00517 	ldw	r7,20(sp)
 c013af4:	da000417 	ldw	r8,16(sp)
 c013af8:	8480062e 	bgeu	r16,r18,c013b14 <__divdf3+0x5b8>
 c013afc:	85a1883a 	add	r16,r16,r22
 c013b00:	40bfffc4 	addi	r2,r8,-1
 c013b04:	8580ac36 	bltu	r16,r22,c013db8 <__divdf3+0x85c>
 c013b08:	8480ab2e 	bgeu	r16,r18,c013db8 <__divdf3+0x85c>
 c013b0c:	423fff84 	addi	r8,r8,-2
 c013b10:	85a1883a 	add	r16,r16,r22
 c013b14:	3804943a 	slli	r2,r7,16
 c013b18:	84a1c83a 	sub	r16,r16,r18
 c013b1c:	e009883a 	mov	r4,fp
 c013b20:	1228b03a 	or	r20,r2,r8
 c013b24:	a1ffffcc 	andi	r7,r20,65535
 c013b28:	a024d43a 	srli	r18,r20,16
 c013b2c:	380b883a 	mov	r5,r7
 c013b30:	d8c00215 	stw	r3,8(sp)
 c013b34:	d9c00515 	stw	r7,20(sp)
 c013b38:	c004c7c0 	call	c004c7c <__mulsi3>
 c013b3c:	900b883a 	mov	r5,r18
 c013b40:	e009883a 	mov	r4,fp
 c013b44:	102b883a 	mov	r21,r2
 c013b48:	c004c7c0 	call	c004c7c <__mulsi3>
 c013b4c:	900b883a 	mov	r5,r18
 c013b50:	b809883a 	mov	r4,r23
 c013b54:	1039883a 	mov	fp,r2
 c013b58:	c004c7c0 	call	c004c7c <__mulsi3>
 c013b5c:	d9c00517 	ldw	r7,20(sp)
 c013b60:	b80b883a 	mov	r5,r23
 c013b64:	1025883a 	mov	r18,r2
 c013b68:	3809883a 	mov	r4,r7
 c013b6c:	c004c7c0 	call	c004c7c <__mulsi3>
 c013b70:	a808d43a 	srli	r4,r21,16
 c013b74:	1705883a 	add	r2,r2,fp
 c013b78:	d8c00217 	ldw	r3,8(sp)
 c013b7c:	2085883a 	add	r2,r4,r2
 c013b80:	1700022e 	bgeu	r2,fp,c013b8c <__divdf3+0x630>
 c013b84:	01000074 	movhi	r4,1
 c013b88:	9125883a 	add	r18,r18,r4
 c013b8c:	1008d43a 	srli	r4,r2,16
 c013b90:	1004943a 	slli	r2,r2,16
 c013b94:	ad7fffcc 	andi	r21,r21,65535
 c013b98:	2489883a 	add	r4,r4,r18
 c013b9c:	1545883a 	add	r2,r2,r21
 c013ba0:	81003836 	bltu	r16,r4,c013c84 <__divdf3+0x728>
 c013ba4:	81003626 	beq	r16,r4,c013c80 <__divdf3+0x724>
 c013ba8:	a5000054 	ori	r20,r20,1
 c013bac:	1880ffc4 	addi	r2,r3,1023
 c013bb0:	00bf2e0e 	bge	zero,r2,c01386c <__alt_data_end+0xfc01386c>
 c013bb4:	a10001cc 	andi	r4,r20,7
 c013bb8:	20000726 	beq	r4,zero,c013bd8 <__divdf3+0x67c>
 c013bbc:	a10003cc 	andi	r4,r20,15
 c013bc0:	01400104 	movi	r5,4
 c013bc4:	21400426 	beq	r4,r5,c013bd8 <__divdf3+0x67c>
 c013bc8:	a149883a 	add	r4,r20,r5
 c013bcc:	2529803a 	cmpltu	r20,r4,r20
 c013bd0:	8d23883a 	add	r17,r17,r20
 c013bd4:	2029883a 	mov	r20,r4
 c013bd8:	8900402c 	andhi	r4,r17,256
 c013bdc:	20000426 	beq	r4,zero,c013bf0 <__divdf3+0x694>
 c013be0:	18810004 	addi	r2,r3,1024
 c013be4:	00ffc034 	movhi	r3,65280
 c013be8:	18ffffc4 	addi	r3,r3,-1
 c013bec:	88e2703a 	and	r17,r17,r3
 c013bf0:	00c1ff84 	movi	r3,2046
 c013bf4:	18beb416 	blt	r3,r2,c0136c8 <__alt_data_end+0xfc0136c8>
 c013bf8:	a028d0fa 	srli	r20,r20,3
 c013bfc:	882a977a 	slli	r21,r17,29
 c013c00:	8820927a 	slli	r16,r17,9
 c013c04:	1081ffcc 	andi	r2,r2,2047
 c013c08:	ad2ab03a 	or	r21,r21,r20
 c013c0c:	8020d33a 	srli	r16,r16,12
 c013c10:	9900004c 	andi	r4,r19,1
 c013c14:	003eb006 	br	c0136d8 <__alt_data_end+0xfc0136d8>
 c013c18:	8080022c 	andhi	r2,r16,8
 c013c1c:	10001226 	beq	r2,zero,c013c68 <__divdf3+0x70c>
 c013c20:	8880022c 	andhi	r2,r17,8
 c013c24:	1000101e 	bne	r2,zero,c013c68 <__divdf3+0x70c>
 c013c28:	00800434 	movhi	r2,16
 c013c2c:	8c000234 	orhi	r16,r17,8
 c013c30:	10bfffc4 	addi	r2,r2,-1
 c013c34:	b809883a 	mov	r4,r23
 c013c38:	80a0703a 	and	r16,r16,r2
 c013c3c:	a02b883a 	mov	r21,r20
 c013c40:	003f0806 	br	c013864 <__alt_data_end+0xfc013864>
 c013c44:	008000c4 	movi	r2,3
 c013c48:	3880b126 	beq	r7,r2,c013f10 <__divdf3+0x9b4>
 c013c4c:	00800044 	movi	r2,1
 c013c50:	38805b1e 	bne	r7,r2,c013dc0 <__divdf3+0x864>
 c013c54:	e009883a 	mov	r4,fp
 c013c58:	0005883a 	mov	r2,zero
 c013c5c:	0021883a 	mov	r16,zero
 c013c60:	002b883a 	mov	r21,zero
 c013c64:	003e9c06 	br	c0136d8 <__alt_data_end+0xfc0136d8>
 c013c68:	00800434 	movhi	r2,16
 c013c6c:	84000234 	orhi	r16,r16,8
 c013c70:	10bfffc4 	addi	r2,r2,-1
 c013c74:	b009883a 	mov	r4,r22
 c013c78:	80a0703a 	and	r16,r16,r2
 c013c7c:	003ef906 	br	c013864 <__alt_data_end+0xfc013864>
 c013c80:	103fca26 	beq	r2,zero,c013bac <__alt_data_end+0xfc013bac>
 c013c84:	b421883a 	add	r16,r22,r16
 c013c88:	a17fffc4 	addi	r5,r20,-1
 c013c8c:	8580422e 	bgeu	r16,r22,c013d98 <__divdf3+0x83c>
 c013c90:	2829883a 	mov	r20,r5
 c013c94:	813fc41e 	bne	r16,r4,c013ba8 <__alt_data_end+0xfc013ba8>
 c013c98:	d9800017 	ldw	r6,0(sp)
 c013c9c:	30bfc21e 	bne	r6,r2,c013ba8 <__alt_data_end+0xfc013ba8>
 c013ca0:	003fc206 	br	c013bac <__alt_data_end+0xfc013bac>
 c013ca4:	143ff604 	addi	r16,r2,-40
 c013ca8:	8c20983a 	sll	r16,r17,r16
 c013cac:	002b883a 	mov	r21,zero
 c013cb0:	003eb406 	br	c013784 <__alt_data_end+0xfc013784>
 c013cb4:	d9800215 	stw	r6,8(sp)
 c013cb8:	d9c00515 	stw	r7,20(sp)
 c013cbc:	da000415 	stw	r8,16(sp)
 c013cc0:	c0154f00 	call	c0154f0 <__clzsi2>
 c013cc4:	10800804 	addi	r2,r2,32
 c013cc8:	da000417 	ldw	r8,16(sp)
 c013ccc:	d9c00517 	ldw	r7,20(sp)
 c013cd0:	d9800217 	ldw	r6,8(sp)
 c013cd4:	003ea106 	br	c01375c <__alt_data_end+0xfc01375c>
 c013cd8:	147ff604 	addi	r17,r2,-40
 c013cdc:	3462983a 	sll	r17,r6,r17
 c013ce0:	0029883a 	mov	r20,zero
 c013ce4:	003ec906 	br	c01380c <__alt_data_end+0xfc01380c>
 c013ce8:	3009883a 	mov	r4,r6
 c013cec:	d9400115 	stw	r5,4(sp)
 c013cf0:	d9800215 	stw	r6,8(sp)
 c013cf4:	da000415 	stw	r8,16(sp)
 c013cf8:	da400315 	stw	r9,12(sp)
 c013cfc:	c0154f00 	call	c0154f0 <__clzsi2>
 c013d00:	10800804 	addi	r2,r2,32
 c013d04:	da400317 	ldw	r9,12(sp)
 c013d08:	da000417 	ldw	r8,16(sp)
 c013d0c:	d9800217 	ldw	r6,8(sp)
 c013d10:	d9400117 	ldw	r5,4(sp)
 c013d14:	003eb306 	br	c0137e4 <__alt_data_end+0xfc0137e4>
 c013d18:	d9800017 	ldw	r6,0(sp)
 c013d1c:	a9ab883a 	add	r21,r21,r6
 c013d20:	a98b803a 	cmpltu	r5,r21,r6
 c013d24:	2d8b883a 	add	r5,r5,r22
 c013d28:	2a11883a 	add	r8,r5,r8
 c013d2c:	897fffc4 	addi	r5,r17,-1
 c013d30:	b2000c2e 	bgeu	r22,r8,c013d64 <__divdf3+0x808>
 c013d34:	41003f36 	bltu	r8,r4,c013e34 <__divdf3+0x8d8>
 c013d38:	22006c26 	beq	r4,r8,c013eec <__divdf3+0x990>
 c013d3c:	4109c83a 	sub	r4,r8,r4
 c013d40:	2823883a 	mov	r17,r5
 c013d44:	003f3b06 	br	c013a34 <__alt_data_end+0xfc013a34>
 c013d48:	ad3ed336 	bltu	r21,r20,c013898 <__alt_data_end+0xfc013898>
 c013d4c:	a804d07a 	srli	r2,r21,1
 c013d50:	802e97fa 	slli	r23,r16,31
 c013d54:	a82a97fa 	slli	r21,r21,31
 c013d58:	8020d07a 	srli	r16,r16,1
 c013d5c:	b8aeb03a 	or	r23,r23,r2
 c013d60:	003ed006 	br	c0138a4 <__alt_data_end+0xfc0138a4>
 c013d64:	b23ff51e 	bne	r22,r8,c013d3c <__alt_data_end+0xfc013d3c>
 c013d68:	d9800017 	ldw	r6,0(sp)
 c013d6c:	a9bff12e 	bgeu	r21,r6,c013d34 <__alt_data_end+0xfc013d34>
 c013d70:	b109c83a 	sub	r4,r22,r4
 c013d74:	2823883a 	mov	r17,r5
 c013d78:	003f2e06 	br	c013a34 <__alt_data_end+0xfc013a34>
 c013d7c:	2021883a 	mov	r16,r4
 c013d80:	003eff06 	br	c013980 <__alt_data_end+0xfc013980>
 c013d84:	2023883a 	mov	r17,r4
 c013d88:	003ee406 	br	c01391c <__alt_data_end+0xfc01391c>
 c013d8c:	a8bfe236 	bltu	r21,r2,c013d18 <__alt_data_end+0xfc013d18>
 c013d90:	0009883a 	mov	r4,zero
 c013d94:	003f2706 	br	c013a34 <__alt_data_end+0xfc013a34>
 c013d98:	81002d36 	bltu	r16,r4,c013e50 <__divdf3+0x8f4>
 c013d9c:	24005626 	beq	r4,r16,c013ef8 <__divdf3+0x99c>
 c013da0:	2829883a 	mov	r20,r5
 c013da4:	003f8006 	br	c013ba8 <__alt_data_end+0xfc013ba8>
 c013da8:	053fffc4 	movi	r20,-1
 c013dac:	003f7f06 	br	c013bac <__alt_data_end+0xfc013bac>
 c013db0:	200f883a 	mov	r7,r4
 c013db4:	003f3c06 	br	c013aa8 <__alt_data_end+0xfc013aa8>
 c013db8:	1011883a 	mov	r8,r2
 c013dbc:	003f5506 	br	c013b14 <__alt_data_end+0xfc013b14>
 c013dc0:	e027883a 	mov	r19,fp
 c013dc4:	003f7906 	br	c013bac <__alt_data_end+0xfc013bac>
 c013dc8:	010007c4 	movi	r4,31
 c013dcc:	20c02816 	blt	r4,r3,c013e70 <__divdf3+0x914>
 c013dd0:	00800804 	movi	r2,32
 c013dd4:	10c5c83a 	sub	r2,r2,r3
 c013dd8:	888a983a 	sll	r5,r17,r2
 c013ddc:	a0c8d83a 	srl	r4,r20,r3
 c013de0:	a084983a 	sll	r2,r20,r2
 c013de4:	88e2d83a 	srl	r17,r17,r3
 c013de8:	2906b03a 	or	r3,r5,r4
 c013dec:	1004c03a 	cmpne	r2,r2,zero
 c013df0:	1886b03a 	or	r3,r3,r2
 c013df4:	188001cc 	andi	r2,r3,7
 c013df8:	10000726 	beq	r2,zero,c013e18 <__divdf3+0x8bc>
 c013dfc:	188003cc 	andi	r2,r3,15
 c013e00:	01000104 	movi	r4,4
 c013e04:	11000426 	beq	r2,r4,c013e18 <__divdf3+0x8bc>
 c013e08:	1805883a 	mov	r2,r3
 c013e0c:	10c00104 	addi	r3,r2,4
 c013e10:	1885803a 	cmpltu	r2,r3,r2
 c013e14:	88a3883a 	add	r17,r17,r2
 c013e18:	8880202c 	andhi	r2,r17,128
 c013e1c:	10002926 	beq	r2,zero,c013ec4 <__divdf3+0x968>
 c013e20:	9900004c 	andi	r4,r19,1
 c013e24:	00800044 	movi	r2,1
 c013e28:	0021883a 	mov	r16,zero
 c013e2c:	002b883a 	mov	r21,zero
 c013e30:	003e2906 	br	c0136d8 <__alt_data_end+0xfc0136d8>
 c013e34:	d9800017 	ldw	r6,0(sp)
 c013e38:	8c7fff84 	addi	r17,r17,-2
 c013e3c:	a9ab883a 	add	r21,r21,r6
 c013e40:	a98b803a 	cmpltu	r5,r21,r6
 c013e44:	2d8b883a 	add	r5,r5,r22
 c013e48:	2a11883a 	add	r8,r5,r8
 c013e4c:	003ef806 	br	c013a30 <__alt_data_end+0xfc013a30>
 c013e50:	d9800017 	ldw	r6,0(sp)
 c013e54:	318f883a 	add	r7,r6,r6
 c013e58:	398b803a 	cmpltu	r5,r7,r6
 c013e5c:	2d8d883a 	add	r6,r5,r22
 c013e60:	81a1883a 	add	r16,r16,r6
 c013e64:	a17fff84 	addi	r5,r20,-2
 c013e68:	d9c00015 	stw	r7,0(sp)
 c013e6c:	003f8806 	br	c013c90 <__alt_data_end+0xfc013c90>
 c013e70:	013ff844 	movi	r4,-31
 c013e74:	2085c83a 	sub	r2,r4,r2
 c013e78:	8888d83a 	srl	r4,r17,r2
 c013e7c:	00800804 	movi	r2,32
 c013e80:	18802126 	beq	r3,r2,c013f08 <__divdf3+0x9ac>
 c013e84:	04001004 	movi	r16,64
 c013e88:	80c7c83a 	sub	r3,r16,r3
 c013e8c:	88e0983a 	sll	r16,r17,r3
 c013e90:	8504b03a 	or	r2,r16,r20
 c013e94:	1004c03a 	cmpne	r2,r2,zero
 c013e98:	2084b03a 	or	r2,r4,r2
 c013e9c:	144001cc 	andi	r17,r2,7
 c013ea0:	88000d1e 	bne	r17,zero,c013ed8 <__divdf3+0x97c>
 c013ea4:	0021883a 	mov	r16,zero
 c013ea8:	102ad0fa 	srli	r21,r2,3
 c013eac:	9900004c 	andi	r4,r19,1
 c013eb0:	0005883a 	mov	r2,zero
 c013eb4:	ac6ab03a 	or	r21,r21,r17
 c013eb8:	003e0706 	br	c0136d8 <__alt_data_end+0xfc0136d8>
 c013ebc:	1007883a 	mov	r3,r2
 c013ec0:	0023883a 	mov	r17,zero
 c013ec4:	8820927a 	slli	r16,r17,9
 c013ec8:	1805883a 	mov	r2,r3
 c013ecc:	8822977a 	slli	r17,r17,29
 c013ed0:	8020d33a 	srli	r16,r16,12
 c013ed4:	003ff406 	br	c013ea8 <__alt_data_end+0xfc013ea8>
 c013ed8:	10c003cc 	andi	r3,r2,15
 c013edc:	01000104 	movi	r4,4
 c013ee0:	193ff626 	beq	r3,r4,c013ebc <__alt_data_end+0xfc013ebc>
 c013ee4:	0023883a 	mov	r17,zero
 c013ee8:	003fc806 	br	c013e0c <__alt_data_end+0xfc013e0c>
 c013eec:	a8bfd136 	bltu	r21,r2,c013e34 <__alt_data_end+0xfc013e34>
 c013ef0:	2823883a 	mov	r17,r5
 c013ef4:	003fa606 	br	c013d90 <__alt_data_end+0xfc013d90>
 c013ef8:	d9800017 	ldw	r6,0(sp)
 c013efc:	30bfd436 	bltu	r6,r2,c013e50 <__alt_data_end+0xfc013e50>
 c013f00:	2829883a 	mov	r20,r5
 c013f04:	003f6406 	br	c013c98 <__alt_data_end+0xfc013c98>
 c013f08:	0021883a 	mov	r16,zero
 c013f0c:	003fe006 	br	c013e90 <__alt_data_end+0xfc013e90>
 c013f10:	00800434 	movhi	r2,16
 c013f14:	8c000234 	orhi	r16,r17,8
 c013f18:	10bfffc4 	addi	r2,r2,-1
 c013f1c:	e009883a 	mov	r4,fp
 c013f20:	80a0703a 	and	r16,r16,r2
 c013f24:	a02b883a 	mov	r21,r20
 c013f28:	003e4e06 	br	c013864 <__alt_data_end+0xfc013864>

0c013f2c <__eqdf2>:
 c013f2c:	2804d53a 	srli	r2,r5,20
 c013f30:	3806d53a 	srli	r3,r7,20
 c013f34:	02000434 	movhi	r8,16
 c013f38:	423fffc4 	addi	r8,r8,-1
 c013f3c:	1081ffcc 	andi	r2,r2,2047
 c013f40:	0281ffc4 	movi	r10,2047
 c013f44:	2a12703a 	and	r9,r5,r8
 c013f48:	18c1ffcc 	andi	r3,r3,2047
 c013f4c:	3a10703a 	and	r8,r7,r8
 c013f50:	280ad7fa 	srli	r5,r5,31
 c013f54:	380ed7fa 	srli	r7,r7,31
 c013f58:	12801026 	beq	r2,r10,c013f9c <__eqdf2+0x70>
 c013f5c:	0281ffc4 	movi	r10,2047
 c013f60:	1a800a26 	beq	r3,r10,c013f8c <__eqdf2+0x60>
 c013f64:	10c00226 	beq	r2,r3,c013f70 <__eqdf2+0x44>
 c013f68:	00800044 	movi	r2,1
 c013f6c:	f800283a 	ret
 c013f70:	4a3ffd1e 	bne	r9,r8,c013f68 <__alt_data_end+0xfc013f68>
 c013f74:	21bffc1e 	bne	r4,r6,c013f68 <__alt_data_end+0xfc013f68>
 c013f78:	29c00c26 	beq	r5,r7,c013fac <__eqdf2+0x80>
 c013f7c:	103ffa1e 	bne	r2,zero,c013f68 <__alt_data_end+0xfc013f68>
 c013f80:	2244b03a 	or	r2,r4,r9
 c013f84:	1004c03a 	cmpne	r2,r2,zero
 c013f88:	f800283a 	ret
 c013f8c:	3214b03a 	or	r10,r6,r8
 c013f90:	503ff426 	beq	r10,zero,c013f64 <__alt_data_end+0xfc013f64>
 c013f94:	00800044 	movi	r2,1
 c013f98:	f800283a 	ret
 c013f9c:	2254b03a 	or	r10,r4,r9
 c013fa0:	503fee26 	beq	r10,zero,c013f5c <__alt_data_end+0xfc013f5c>
 c013fa4:	00800044 	movi	r2,1
 c013fa8:	f800283a 	ret
 c013fac:	0005883a 	mov	r2,zero
 c013fb0:	f800283a 	ret

0c013fb4 <__gedf2>:
 c013fb4:	2804d53a 	srli	r2,r5,20
 c013fb8:	3806d53a 	srli	r3,r7,20
 c013fbc:	02000434 	movhi	r8,16
 c013fc0:	423fffc4 	addi	r8,r8,-1
 c013fc4:	1081ffcc 	andi	r2,r2,2047
 c013fc8:	0241ffc4 	movi	r9,2047
 c013fcc:	2a14703a 	and	r10,r5,r8
 c013fd0:	18c1ffcc 	andi	r3,r3,2047
 c013fd4:	3a10703a 	and	r8,r7,r8
 c013fd8:	280ad7fa 	srli	r5,r5,31
 c013fdc:	380ed7fa 	srli	r7,r7,31
 c013fe0:	12401d26 	beq	r2,r9,c014058 <__gedf2+0xa4>
 c013fe4:	0241ffc4 	movi	r9,2047
 c013fe8:	1a401226 	beq	r3,r9,c014034 <__gedf2+0x80>
 c013fec:	1000081e 	bne	r2,zero,c014010 <__gedf2+0x5c>
 c013ff0:	2296b03a 	or	r11,r4,r10
 c013ff4:	5813003a 	cmpeq	r9,r11,zero
 c013ff8:	1800091e 	bne	r3,zero,c014020 <__gedf2+0x6c>
 c013ffc:	3218b03a 	or	r12,r6,r8
 c014000:	6000071e 	bne	r12,zero,c014020 <__gedf2+0x6c>
 c014004:	0005883a 	mov	r2,zero
 c014008:	5800101e 	bne	r11,zero,c01404c <__gedf2+0x98>
 c01400c:	f800283a 	ret
 c014010:	18000c1e 	bne	r3,zero,c014044 <__gedf2+0x90>
 c014014:	3212b03a 	or	r9,r6,r8
 c014018:	48000c26 	beq	r9,zero,c01404c <__gedf2+0x98>
 c01401c:	0013883a 	mov	r9,zero
 c014020:	39c03fcc 	andi	r7,r7,255
 c014024:	48000826 	beq	r9,zero,c014048 <__gedf2+0x94>
 c014028:	38000926 	beq	r7,zero,c014050 <__gedf2+0x9c>
 c01402c:	00800044 	movi	r2,1
 c014030:	f800283a 	ret
 c014034:	3212b03a 	or	r9,r6,r8
 c014038:	483fec26 	beq	r9,zero,c013fec <__alt_data_end+0xfc013fec>
 c01403c:	00bfff84 	movi	r2,-2
 c014040:	f800283a 	ret
 c014044:	39c03fcc 	andi	r7,r7,255
 c014048:	29c00626 	beq	r5,r7,c014064 <__gedf2+0xb0>
 c01404c:	283ff726 	beq	r5,zero,c01402c <__alt_data_end+0xfc01402c>
 c014050:	00bfffc4 	movi	r2,-1
 c014054:	f800283a 	ret
 c014058:	2292b03a 	or	r9,r4,r10
 c01405c:	483fe126 	beq	r9,zero,c013fe4 <__alt_data_end+0xfc013fe4>
 c014060:	003ff606 	br	c01403c <__alt_data_end+0xfc01403c>
 c014064:	18bff916 	blt	r3,r2,c01404c <__alt_data_end+0xfc01404c>
 c014068:	10c00316 	blt	r2,r3,c014078 <__gedf2+0xc4>
 c01406c:	42bff736 	bltu	r8,r10,c01404c <__alt_data_end+0xfc01404c>
 c014070:	52000326 	beq	r10,r8,c014080 <__gedf2+0xcc>
 c014074:	5200042e 	bgeu	r10,r8,c014088 <__gedf2+0xd4>
 c014078:	283fec1e 	bne	r5,zero,c01402c <__alt_data_end+0xfc01402c>
 c01407c:	003ff406 	br	c014050 <__alt_data_end+0xfc014050>
 c014080:	313ff236 	bltu	r6,r4,c01404c <__alt_data_end+0xfc01404c>
 c014084:	21bffc36 	bltu	r4,r6,c014078 <__alt_data_end+0xfc014078>
 c014088:	0005883a 	mov	r2,zero
 c01408c:	f800283a 	ret

0c014090 <__ledf2>:
 c014090:	2804d53a 	srli	r2,r5,20
 c014094:	3810d53a 	srli	r8,r7,20
 c014098:	00c00434 	movhi	r3,16
 c01409c:	18ffffc4 	addi	r3,r3,-1
 c0140a0:	1081ffcc 	andi	r2,r2,2047
 c0140a4:	0241ffc4 	movi	r9,2047
 c0140a8:	28d4703a 	and	r10,r5,r3
 c0140ac:	4201ffcc 	andi	r8,r8,2047
 c0140b0:	38c6703a 	and	r3,r7,r3
 c0140b4:	280ad7fa 	srli	r5,r5,31
 c0140b8:	380ed7fa 	srli	r7,r7,31
 c0140bc:	12401f26 	beq	r2,r9,c01413c <__ledf2+0xac>
 c0140c0:	0241ffc4 	movi	r9,2047
 c0140c4:	42401426 	beq	r8,r9,c014118 <__ledf2+0x88>
 c0140c8:	1000091e 	bne	r2,zero,c0140f0 <__ledf2+0x60>
 c0140cc:	2296b03a 	or	r11,r4,r10
 c0140d0:	5813003a 	cmpeq	r9,r11,zero
 c0140d4:	29403fcc 	andi	r5,r5,255
 c0140d8:	40000a1e 	bne	r8,zero,c014104 <__ledf2+0x74>
 c0140dc:	30d8b03a 	or	r12,r6,r3
 c0140e0:	6000081e 	bne	r12,zero,c014104 <__ledf2+0x74>
 c0140e4:	0005883a 	mov	r2,zero
 c0140e8:	5800111e 	bne	r11,zero,c014130 <__ledf2+0xa0>
 c0140ec:	f800283a 	ret
 c0140f0:	29403fcc 	andi	r5,r5,255
 c0140f4:	40000c1e 	bne	r8,zero,c014128 <__ledf2+0x98>
 c0140f8:	30d2b03a 	or	r9,r6,r3
 c0140fc:	48000c26 	beq	r9,zero,c014130 <__ledf2+0xa0>
 c014100:	0013883a 	mov	r9,zero
 c014104:	39c03fcc 	andi	r7,r7,255
 c014108:	48000826 	beq	r9,zero,c01412c <__ledf2+0x9c>
 c01410c:	38001126 	beq	r7,zero,c014154 <__ledf2+0xc4>
 c014110:	00800044 	movi	r2,1
 c014114:	f800283a 	ret
 c014118:	30d2b03a 	or	r9,r6,r3
 c01411c:	483fea26 	beq	r9,zero,c0140c8 <__alt_data_end+0xfc0140c8>
 c014120:	00800084 	movi	r2,2
 c014124:	f800283a 	ret
 c014128:	39c03fcc 	andi	r7,r7,255
 c01412c:	39400726 	beq	r7,r5,c01414c <__ledf2+0xbc>
 c014130:	2800081e 	bne	r5,zero,c014154 <__ledf2+0xc4>
 c014134:	00800044 	movi	r2,1
 c014138:	f800283a 	ret
 c01413c:	2292b03a 	or	r9,r4,r10
 c014140:	483fdf26 	beq	r9,zero,c0140c0 <__alt_data_end+0xfc0140c0>
 c014144:	00800084 	movi	r2,2
 c014148:	f800283a 	ret
 c01414c:	4080030e 	bge	r8,r2,c01415c <__ledf2+0xcc>
 c014150:	383fef26 	beq	r7,zero,c014110 <__alt_data_end+0xfc014110>
 c014154:	00bfffc4 	movi	r2,-1
 c014158:	f800283a 	ret
 c01415c:	123feb16 	blt	r2,r8,c01410c <__alt_data_end+0xfc01410c>
 c014160:	1abff336 	bltu	r3,r10,c014130 <__alt_data_end+0xfc014130>
 c014164:	50c00326 	beq	r10,r3,c014174 <__ledf2+0xe4>
 c014168:	50c0042e 	bgeu	r10,r3,c01417c <__ledf2+0xec>
 c01416c:	283fe81e 	bne	r5,zero,c014110 <__alt_data_end+0xfc014110>
 c014170:	003ff806 	br	c014154 <__alt_data_end+0xfc014154>
 c014174:	313fee36 	bltu	r6,r4,c014130 <__alt_data_end+0xfc014130>
 c014178:	21bffc36 	bltu	r4,r6,c01416c <__alt_data_end+0xfc01416c>
 c01417c:	0005883a 	mov	r2,zero
 c014180:	f800283a 	ret

0c014184 <__muldf3>:
 c014184:	deffee04 	addi	sp,sp,-72
 c014188:	dd000c15 	stw	r20,48(sp)
 c01418c:	2828d53a 	srli	r20,r5,20
 c014190:	ddc00f15 	stw	r23,60(sp)
 c014194:	282ed7fa 	srli	r23,r5,31
 c014198:	dc000815 	stw	r16,32(sp)
 c01419c:	04000434 	movhi	r16,16
 c0141a0:	dcc00b15 	stw	r19,44(sp)
 c0141a4:	843fffc4 	addi	r16,r16,-1
 c0141a8:	dfc01115 	stw	ra,68(sp)
 c0141ac:	df001015 	stw	fp,64(sp)
 c0141b0:	dd800e15 	stw	r22,56(sp)
 c0141b4:	dd400d15 	stw	r21,52(sp)
 c0141b8:	dc800a15 	stw	r18,40(sp)
 c0141bc:	dc400915 	stw	r17,36(sp)
 c0141c0:	a501ffcc 	andi	r20,r20,2047
 c0141c4:	2c20703a 	and	r16,r5,r16
 c0141c8:	b827883a 	mov	r19,r23
 c0141cc:	ba403fcc 	andi	r9,r23,255
 c0141d0:	a0006026 	beq	r20,zero,c014354 <__muldf3+0x1d0>
 c0141d4:	0081ffc4 	movi	r2,2047
 c0141d8:	202d883a 	mov	r22,r4
 c0141dc:	a0803626 	beq	r20,r2,c0142b8 <__muldf3+0x134>
 c0141e0:	84000434 	orhi	r16,r16,16
 c0141e4:	200ad77a 	srli	r5,r4,29
 c0141e8:	800490fa 	slli	r2,r16,3
 c0141ec:	202c90fa 	slli	r22,r4,3
 c0141f0:	a53f0044 	addi	r20,r20,-1023
 c0141f4:	28a0b03a 	or	r16,r5,r2
 c0141f8:	002b883a 	mov	r21,zero
 c0141fc:	000b883a 	mov	r5,zero
 c014200:	3804d53a 	srli	r2,r7,20
 c014204:	3838d7fa 	srli	fp,r7,31
 c014208:	04400434 	movhi	r17,16
 c01420c:	8c7fffc4 	addi	r17,r17,-1
 c014210:	1081ffcc 	andi	r2,r2,2047
 c014214:	3025883a 	mov	r18,r6
 c014218:	3c62703a 	and	r17,r7,r17
 c01421c:	e2803fcc 	andi	r10,fp,255
 c014220:	10006d26 	beq	r2,zero,c0143d8 <__muldf3+0x254>
 c014224:	00c1ffc4 	movi	r3,2047
 c014228:	10c06526 	beq	r2,r3,c0143c0 <__muldf3+0x23c>
 c01422c:	8c400434 	orhi	r17,r17,16
 c014230:	300ed77a 	srli	r7,r6,29
 c014234:	880690fa 	slli	r3,r17,3
 c014238:	302490fa 	slli	r18,r6,3
 c01423c:	10bf0044 	addi	r2,r2,-1023
 c014240:	38e2b03a 	or	r17,r7,r3
 c014244:	000f883a 	mov	r7,zero
 c014248:	a087883a 	add	r3,r20,r2
 c01424c:	010003c4 	movi	r4,15
 c014250:	3d44b03a 	or	r2,r7,r21
 c014254:	e5ccf03a 	xor	r6,fp,r23
 c014258:	1a000044 	addi	r8,r3,1
 c01425c:	20809b36 	bltu	r4,r2,c0144cc <__muldf3+0x348>
 c014260:	100490ba 	slli	r2,r2,2
 c014264:	01030074 	movhi	r4,3073
 c014268:	21109e04 	addi	r4,r4,17016
 c01426c:	1105883a 	add	r2,r2,r4
 c014270:	10800017 	ldw	r2,0(r2)
 c014274:	1000683a 	jmp	r2
 c014278:	0c0144cc 	andi	r16,at,1299
 c01427c:	0c0142d8 	cmpnei	r16,at,1291
 c014280:	0c0142d8 	cmpnei	r16,at,1291
 c014284:	0c0142d4 	ori	r16,at,1291
 c014288:	0c0144a8 	cmpgeui	r16,at,1298
 c01428c:	0c0144a8 	cmpgeui	r16,at,1298
 c014290:	0c014490 	cmplti	r16,at,1298
 c014294:	0c0142d4 	ori	r16,at,1291
 c014298:	0c0144a8 	cmpgeui	r16,at,1298
 c01429c:	0c014490 	cmplti	r16,at,1298
 c0142a0:	0c0144a8 	cmpgeui	r16,at,1298
 c0142a4:	0c0142d4 	ori	r16,at,1291
 c0142a8:	0c0144b8 	rdprs	r16,at,1298
 c0142ac:	0c0144b8 	rdprs	r16,at,1298
 c0142b0:	0c0144b8 	rdprs	r16,at,1298
 c0142b4:	0c014818 	cmpnei	r16,at,1312
 c0142b8:	2404b03a 	or	r2,r4,r16
 c0142bc:	1000711e 	bne	r2,zero,c014484 <__muldf3+0x300>
 c0142c0:	05400204 	movi	r21,8
 c0142c4:	0021883a 	mov	r16,zero
 c0142c8:	002d883a 	mov	r22,zero
 c0142cc:	01400084 	movi	r5,2
 c0142d0:	003fcb06 	br	c014200 <__alt_data_end+0xfc014200>
 c0142d4:	500d883a 	mov	r6,r10
 c0142d8:	00800084 	movi	r2,2
 c0142dc:	38805926 	beq	r7,r2,c014444 <__muldf3+0x2c0>
 c0142e0:	008000c4 	movi	r2,3
 c0142e4:	3881bb26 	beq	r7,r2,c0149d4 <__muldf3+0x850>
 c0142e8:	00800044 	movi	r2,1
 c0142ec:	3881961e 	bne	r7,r2,c014948 <__muldf3+0x7c4>
 c0142f0:	3027883a 	mov	r19,r6
 c0142f4:	0005883a 	mov	r2,zero
 c0142f8:	0021883a 	mov	r16,zero
 c0142fc:	002d883a 	mov	r22,zero
 c014300:	1004953a 	slli	r2,r2,20
 c014304:	98c03fcc 	andi	r3,r19,255
 c014308:	04400434 	movhi	r17,16
 c01430c:	8c7fffc4 	addi	r17,r17,-1
 c014310:	180697fa 	slli	r3,r3,31
 c014314:	8460703a 	and	r16,r16,r17
 c014318:	80a0b03a 	or	r16,r16,r2
 c01431c:	80c6b03a 	or	r3,r16,r3
 c014320:	b005883a 	mov	r2,r22
 c014324:	dfc01117 	ldw	ra,68(sp)
 c014328:	df001017 	ldw	fp,64(sp)
 c01432c:	ddc00f17 	ldw	r23,60(sp)
 c014330:	dd800e17 	ldw	r22,56(sp)
 c014334:	dd400d17 	ldw	r21,52(sp)
 c014338:	dd000c17 	ldw	r20,48(sp)
 c01433c:	dcc00b17 	ldw	r19,44(sp)
 c014340:	dc800a17 	ldw	r18,40(sp)
 c014344:	dc400917 	ldw	r17,36(sp)
 c014348:	dc000817 	ldw	r16,32(sp)
 c01434c:	dec01204 	addi	sp,sp,72
 c014350:	f800283a 	ret
 c014354:	2404b03a 	or	r2,r4,r16
 c014358:	202b883a 	mov	r21,r4
 c01435c:	10004426 	beq	r2,zero,c014470 <__muldf3+0x2ec>
 c014360:	80015126 	beq	r16,zero,c0148a8 <__muldf3+0x724>
 c014364:	8009883a 	mov	r4,r16
 c014368:	d9800715 	stw	r6,28(sp)
 c01436c:	d9c00215 	stw	r7,8(sp)
 c014370:	da400415 	stw	r9,16(sp)
 c014374:	c0154f00 	call	c0154f0 <__clzsi2>
 c014378:	d9800717 	ldw	r6,28(sp)
 c01437c:	d9c00217 	ldw	r7,8(sp)
 c014380:	da400417 	ldw	r9,16(sp)
 c014384:	113ffd44 	addi	r4,r2,-11
 c014388:	00c00704 	movi	r3,28
 c01438c:	19014216 	blt	r3,r4,c014898 <__muldf3+0x714>
 c014390:	00c00744 	movi	r3,29
 c014394:	15bffe04 	addi	r22,r2,-8
 c014398:	1907c83a 	sub	r3,r3,r4
 c01439c:	85a0983a 	sll	r16,r16,r22
 c0143a0:	a8c6d83a 	srl	r3,r21,r3
 c0143a4:	adac983a 	sll	r22,r21,r22
 c0143a8:	1c20b03a 	or	r16,r3,r16
 c0143ac:	1080fcc4 	addi	r2,r2,1011
 c0143b0:	00a9c83a 	sub	r20,zero,r2
 c0143b4:	002b883a 	mov	r21,zero
 c0143b8:	000b883a 	mov	r5,zero
 c0143bc:	003f9006 	br	c014200 <__alt_data_end+0xfc014200>
 c0143c0:	3446b03a 	or	r3,r6,r17
 c0143c4:	1800281e 	bne	r3,zero,c014468 <__muldf3+0x2e4>
 c0143c8:	0023883a 	mov	r17,zero
 c0143cc:	0025883a 	mov	r18,zero
 c0143d0:	01c00084 	movi	r7,2
 c0143d4:	003f9c06 	br	c014248 <__alt_data_end+0xfc014248>
 c0143d8:	3446b03a 	or	r3,r6,r17
 c0143dc:	18001e26 	beq	r3,zero,c014458 <__muldf3+0x2d4>
 c0143e0:	88012126 	beq	r17,zero,c014868 <__muldf3+0x6e4>
 c0143e4:	8809883a 	mov	r4,r17
 c0143e8:	d9400215 	stw	r5,8(sp)
 c0143ec:	d9800715 	stw	r6,28(sp)
 c0143f0:	da400415 	stw	r9,16(sp)
 c0143f4:	da800315 	stw	r10,12(sp)
 c0143f8:	c0154f00 	call	c0154f0 <__clzsi2>
 c0143fc:	d9400217 	ldw	r5,8(sp)
 c014400:	d9800717 	ldw	r6,28(sp)
 c014404:	da400417 	ldw	r9,16(sp)
 c014408:	da800317 	ldw	r10,12(sp)
 c01440c:	113ffd44 	addi	r4,r2,-11
 c014410:	00c00704 	movi	r3,28
 c014414:	19011016 	blt	r3,r4,c014858 <__muldf3+0x6d4>
 c014418:	00c00744 	movi	r3,29
 c01441c:	14bffe04 	addi	r18,r2,-8
 c014420:	1907c83a 	sub	r3,r3,r4
 c014424:	8ca2983a 	sll	r17,r17,r18
 c014428:	30c6d83a 	srl	r3,r6,r3
 c01442c:	34a4983a 	sll	r18,r6,r18
 c014430:	1c62b03a 	or	r17,r3,r17
 c014434:	1080fcc4 	addi	r2,r2,1011
 c014438:	0085c83a 	sub	r2,zero,r2
 c01443c:	000f883a 	mov	r7,zero
 c014440:	003f8106 	br	c014248 <__alt_data_end+0xfc014248>
 c014444:	3027883a 	mov	r19,r6
 c014448:	0081ffc4 	movi	r2,2047
 c01444c:	0021883a 	mov	r16,zero
 c014450:	002d883a 	mov	r22,zero
 c014454:	003faa06 	br	c014300 <__alt_data_end+0xfc014300>
 c014458:	0023883a 	mov	r17,zero
 c01445c:	0025883a 	mov	r18,zero
 c014460:	01c00044 	movi	r7,1
 c014464:	003f7806 	br	c014248 <__alt_data_end+0xfc014248>
 c014468:	01c000c4 	movi	r7,3
 c01446c:	003f7606 	br	c014248 <__alt_data_end+0xfc014248>
 c014470:	05400104 	movi	r21,4
 c014474:	0021883a 	mov	r16,zero
 c014478:	002d883a 	mov	r22,zero
 c01447c:	01400044 	movi	r5,1
 c014480:	003f5f06 	br	c014200 <__alt_data_end+0xfc014200>
 c014484:	05400304 	movi	r21,12
 c014488:	014000c4 	movi	r5,3
 c01448c:	003f5c06 	br	c014200 <__alt_data_end+0xfc014200>
 c014490:	04000434 	movhi	r16,16
 c014494:	0027883a 	mov	r19,zero
 c014498:	843fffc4 	addi	r16,r16,-1
 c01449c:	05bfffc4 	movi	r22,-1
 c0144a0:	0081ffc4 	movi	r2,2047
 c0144a4:	003f9606 	br	c014300 <__alt_data_end+0xfc014300>
 c0144a8:	8023883a 	mov	r17,r16
 c0144ac:	b025883a 	mov	r18,r22
 c0144b0:	280f883a 	mov	r7,r5
 c0144b4:	003f8806 	br	c0142d8 <__alt_data_end+0xfc0142d8>
 c0144b8:	8023883a 	mov	r17,r16
 c0144bc:	b025883a 	mov	r18,r22
 c0144c0:	480d883a 	mov	r6,r9
 c0144c4:	280f883a 	mov	r7,r5
 c0144c8:	003f8306 	br	c0142d8 <__alt_data_end+0xfc0142d8>
 c0144cc:	b026d43a 	srli	r19,r22,16
 c0144d0:	902ed43a 	srli	r23,r18,16
 c0144d4:	b5bfffcc 	andi	r22,r22,65535
 c0144d8:	94bfffcc 	andi	r18,r18,65535
 c0144dc:	b00b883a 	mov	r5,r22
 c0144e0:	9009883a 	mov	r4,r18
 c0144e4:	d8c00515 	stw	r3,20(sp)
 c0144e8:	d9800715 	stw	r6,28(sp)
 c0144ec:	da000615 	stw	r8,24(sp)
 c0144f0:	c004c7c0 	call	c004c7c <__mulsi3>
 c0144f4:	980b883a 	mov	r5,r19
 c0144f8:	9009883a 	mov	r4,r18
 c0144fc:	1029883a 	mov	r20,r2
 c014500:	c004c7c0 	call	c004c7c <__mulsi3>
 c014504:	b80b883a 	mov	r5,r23
 c014508:	9809883a 	mov	r4,r19
 c01450c:	102b883a 	mov	r21,r2
 c014510:	c004c7c0 	call	c004c7c <__mulsi3>
 c014514:	b809883a 	mov	r4,r23
 c014518:	b00b883a 	mov	r5,r22
 c01451c:	1039883a 	mov	fp,r2
 c014520:	c004c7c0 	call	c004c7c <__mulsi3>
 c014524:	a008d43a 	srli	r4,r20,16
 c014528:	1545883a 	add	r2,r2,r21
 c01452c:	d8c00517 	ldw	r3,20(sp)
 c014530:	2085883a 	add	r2,r4,r2
 c014534:	d9800717 	ldw	r6,28(sp)
 c014538:	da000617 	ldw	r8,24(sp)
 c01453c:	1540022e 	bgeu	r2,r21,c014548 <__muldf3+0x3c4>
 c014540:	01000074 	movhi	r4,1
 c014544:	e139883a 	add	fp,fp,r4
 c014548:	100e943a 	slli	r7,r2,16
 c01454c:	1004d43a 	srli	r2,r2,16
 c014550:	882ad43a 	srli	r21,r17,16
 c014554:	a53fffcc 	andi	r20,r20,65535
 c014558:	8c7fffcc 	andi	r17,r17,65535
 c01455c:	3d29883a 	add	r20,r7,r20
 c014560:	b00b883a 	mov	r5,r22
 c014564:	8809883a 	mov	r4,r17
 c014568:	d8c00515 	stw	r3,20(sp)
 c01456c:	d9800715 	stw	r6,28(sp)
 c014570:	da000615 	stw	r8,24(sp)
 c014574:	dd000115 	stw	r20,4(sp)
 c014578:	d8800015 	stw	r2,0(sp)
 c01457c:	c004c7c0 	call	c004c7c <__mulsi3>
 c014580:	980b883a 	mov	r5,r19
 c014584:	8809883a 	mov	r4,r17
 c014588:	d8800215 	stw	r2,8(sp)
 c01458c:	c004c7c0 	call	c004c7c <__mulsi3>
 c014590:	9809883a 	mov	r4,r19
 c014594:	a80b883a 	mov	r5,r21
 c014598:	1029883a 	mov	r20,r2
 c01459c:	c004c7c0 	call	c004c7c <__mulsi3>
 c0145a0:	b00b883a 	mov	r5,r22
 c0145a4:	a809883a 	mov	r4,r21
 c0145a8:	d8800415 	stw	r2,16(sp)
 c0145ac:	c004c7c0 	call	c004c7c <__mulsi3>
 c0145b0:	d9c00217 	ldw	r7,8(sp)
 c0145b4:	1505883a 	add	r2,r2,r20
 c0145b8:	d8c00517 	ldw	r3,20(sp)
 c0145bc:	3826d43a 	srli	r19,r7,16
 c0145c0:	d9800717 	ldw	r6,28(sp)
 c0145c4:	da000617 	ldw	r8,24(sp)
 c0145c8:	9885883a 	add	r2,r19,r2
 c0145cc:	da400417 	ldw	r9,16(sp)
 c0145d0:	1500022e 	bgeu	r2,r20,c0145dc <__muldf3+0x458>
 c0145d4:	01000074 	movhi	r4,1
 c0145d8:	4913883a 	add	r9,r9,r4
 c0145dc:	1028d43a 	srli	r20,r2,16
 c0145e0:	1004943a 	slli	r2,r2,16
 c0145e4:	802cd43a 	srli	r22,r16,16
 c0145e8:	843fffcc 	andi	r16,r16,65535
 c0145ec:	3cffffcc 	andi	r19,r7,65535
 c0145f0:	9009883a 	mov	r4,r18
 c0145f4:	800b883a 	mov	r5,r16
 c0145f8:	a269883a 	add	r20,r20,r9
 c0145fc:	d8c00515 	stw	r3,20(sp)
 c014600:	d9800715 	stw	r6,28(sp)
 c014604:	da000615 	stw	r8,24(sp)
 c014608:	14e7883a 	add	r19,r2,r19
 c01460c:	c004c7c0 	call	c004c7c <__mulsi3>
 c014610:	9009883a 	mov	r4,r18
 c014614:	b00b883a 	mov	r5,r22
 c014618:	d8800315 	stw	r2,12(sp)
 c01461c:	c004c7c0 	call	c004c7c <__mulsi3>
 c014620:	b809883a 	mov	r4,r23
 c014624:	b00b883a 	mov	r5,r22
 c014628:	d8800215 	stw	r2,8(sp)
 c01462c:	c004c7c0 	call	c004c7c <__mulsi3>
 c014630:	b80b883a 	mov	r5,r23
 c014634:	8009883a 	mov	r4,r16
 c014638:	d8800415 	stw	r2,16(sp)
 c01463c:	c004c7c0 	call	c004c7c <__mulsi3>
 c014640:	da800317 	ldw	r10,12(sp)
 c014644:	d9c00217 	ldw	r7,8(sp)
 c014648:	d9000017 	ldw	r4,0(sp)
 c01464c:	502ed43a 	srli	r23,r10,16
 c014650:	11c5883a 	add	r2,r2,r7
 c014654:	24e5883a 	add	r18,r4,r19
 c014658:	b885883a 	add	r2,r23,r2
 c01465c:	d8c00517 	ldw	r3,20(sp)
 c014660:	d9800717 	ldw	r6,28(sp)
 c014664:	da000617 	ldw	r8,24(sp)
 c014668:	da400417 	ldw	r9,16(sp)
 c01466c:	11c0022e 	bgeu	r2,r7,c014678 <__muldf3+0x4f4>
 c014670:	01000074 	movhi	r4,1
 c014674:	4913883a 	add	r9,r9,r4
 c014678:	100ed43a 	srli	r7,r2,16
 c01467c:	1004943a 	slli	r2,r2,16
 c014680:	55ffffcc 	andi	r23,r10,65535
 c014684:	3a53883a 	add	r9,r7,r9
 c014688:	8809883a 	mov	r4,r17
 c01468c:	800b883a 	mov	r5,r16
 c014690:	d8c00515 	stw	r3,20(sp)
 c014694:	d9800715 	stw	r6,28(sp)
 c014698:	da000615 	stw	r8,24(sp)
 c01469c:	da400415 	stw	r9,16(sp)
 c0146a0:	15ef883a 	add	r23,r2,r23
 c0146a4:	c004c7c0 	call	c004c7c <__mulsi3>
 c0146a8:	8809883a 	mov	r4,r17
 c0146ac:	b00b883a 	mov	r5,r22
 c0146b0:	d8800215 	stw	r2,8(sp)
 c0146b4:	c004c7c0 	call	c004c7c <__mulsi3>
 c0146b8:	b00b883a 	mov	r5,r22
 c0146bc:	a809883a 	mov	r4,r21
 c0146c0:	d8800315 	stw	r2,12(sp)
 c0146c4:	c004c7c0 	call	c004c7c <__mulsi3>
 c0146c8:	8009883a 	mov	r4,r16
 c0146cc:	a80b883a 	mov	r5,r21
 c0146d0:	1023883a 	mov	r17,r2
 c0146d4:	c004c7c0 	call	c004c7c <__mulsi3>
 c0146d8:	d9c00217 	ldw	r7,8(sp)
 c0146dc:	da800317 	ldw	r10,12(sp)
 c0146e0:	d8c00517 	ldw	r3,20(sp)
 c0146e4:	3808d43a 	srli	r4,r7,16
 c0146e8:	1285883a 	add	r2,r2,r10
 c0146ec:	d9800717 	ldw	r6,28(sp)
 c0146f0:	2085883a 	add	r2,r4,r2
 c0146f4:	da000617 	ldw	r8,24(sp)
 c0146f8:	da400417 	ldw	r9,16(sp)
 c0146fc:	1280022e 	bgeu	r2,r10,c014708 <__muldf3+0x584>
 c014700:	01000074 	movhi	r4,1
 c014704:	8923883a 	add	r17,r17,r4
 c014708:	1008943a 	slli	r4,r2,16
 c01470c:	39ffffcc 	andi	r7,r7,65535
 c014710:	e4b9883a 	add	fp,fp,r18
 c014714:	21cf883a 	add	r7,r4,r7
 c014718:	e4e7803a 	cmpltu	r19,fp,r19
 c01471c:	3d0f883a 	add	r7,r7,r20
 c014720:	bf39883a 	add	fp,r23,fp
 c014724:	99c9883a 	add	r4,r19,r7
 c014728:	e5ef803a 	cmpltu	r23,fp,r23
 c01472c:	490b883a 	add	r5,r9,r4
 c014730:	1004d43a 	srli	r2,r2,16
 c014734:	b965883a 	add	r18,r23,r5
 c014738:	24c9803a 	cmpltu	r4,r4,r19
 c01473c:	3d29803a 	cmpltu	r20,r7,r20
 c014740:	a128b03a 	or	r20,r20,r4
 c014744:	95ef803a 	cmpltu	r23,r18,r23
 c014748:	2a53803a 	cmpltu	r9,r5,r9
 c01474c:	a0a9883a 	add	r20,r20,r2
 c014750:	4deeb03a 	or	r23,r9,r23
 c014754:	a5ef883a 	add	r23,r20,r23
 c014758:	bc63883a 	add	r17,r23,r17
 c01475c:	e004927a 	slli	r2,fp,9
 c014760:	d9000117 	ldw	r4,4(sp)
 c014764:	882e927a 	slli	r23,r17,9
 c014768:	9022d5fa 	srli	r17,r18,23
 c01476c:	e038d5fa 	srli	fp,fp,23
 c014770:	1104b03a 	or	r2,r2,r4
 c014774:	9024927a 	slli	r18,r18,9
 c014778:	1004c03a 	cmpne	r2,r2,zero
 c01477c:	bc62b03a 	or	r17,r23,r17
 c014780:	1738b03a 	or	fp,r2,fp
 c014784:	8880402c 	andhi	r2,r17,256
 c014788:	e4a4b03a 	or	r18,fp,r18
 c01478c:	10000726 	beq	r2,zero,c0147ac <__muldf3+0x628>
 c014790:	9006d07a 	srli	r3,r18,1
 c014794:	880497fa 	slli	r2,r17,31
 c014798:	9480004c 	andi	r18,r18,1
 c01479c:	8822d07a 	srli	r17,r17,1
 c0147a0:	1ca4b03a 	or	r18,r3,r18
 c0147a4:	14a4b03a 	or	r18,r2,r18
 c0147a8:	4007883a 	mov	r3,r8
 c0147ac:	1880ffc4 	addi	r2,r3,1023
 c0147b0:	0080460e 	bge	zero,r2,c0148cc <__muldf3+0x748>
 c0147b4:	910001cc 	andi	r4,r18,7
 c0147b8:	20000726 	beq	r4,zero,c0147d8 <__muldf3+0x654>
 c0147bc:	910003cc 	andi	r4,r18,15
 c0147c0:	01400104 	movi	r5,4
 c0147c4:	21400426 	beq	r4,r5,c0147d8 <__muldf3+0x654>
 c0147c8:	9149883a 	add	r4,r18,r5
 c0147cc:	24a5803a 	cmpltu	r18,r4,r18
 c0147d0:	8ca3883a 	add	r17,r17,r18
 c0147d4:	2025883a 	mov	r18,r4
 c0147d8:	8900402c 	andhi	r4,r17,256
 c0147dc:	20000426 	beq	r4,zero,c0147f0 <__muldf3+0x66c>
 c0147e0:	18810004 	addi	r2,r3,1024
 c0147e4:	00ffc034 	movhi	r3,65280
 c0147e8:	18ffffc4 	addi	r3,r3,-1
 c0147ec:	88e2703a 	and	r17,r17,r3
 c0147f0:	00c1ff84 	movi	r3,2046
 c0147f4:	18bf1316 	blt	r3,r2,c014444 <__alt_data_end+0xfc014444>
 c0147f8:	882c977a 	slli	r22,r17,29
 c0147fc:	9024d0fa 	srli	r18,r18,3
 c014800:	8822927a 	slli	r17,r17,9
 c014804:	1081ffcc 	andi	r2,r2,2047
 c014808:	b4acb03a 	or	r22,r22,r18
 c01480c:	8820d33a 	srli	r16,r17,12
 c014810:	3027883a 	mov	r19,r6
 c014814:	003eba06 	br	c014300 <__alt_data_end+0xfc014300>
 c014818:	8080022c 	andhi	r2,r16,8
 c01481c:	10000926 	beq	r2,zero,c014844 <__muldf3+0x6c0>
 c014820:	8880022c 	andhi	r2,r17,8
 c014824:	1000071e 	bne	r2,zero,c014844 <__muldf3+0x6c0>
 c014828:	00800434 	movhi	r2,16
 c01482c:	8c000234 	orhi	r16,r17,8
 c014830:	10bfffc4 	addi	r2,r2,-1
 c014834:	e027883a 	mov	r19,fp
 c014838:	80a0703a 	and	r16,r16,r2
 c01483c:	902d883a 	mov	r22,r18
 c014840:	003f1706 	br	c0144a0 <__alt_data_end+0xfc0144a0>
 c014844:	00800434 	movhi	r2,16
 c014848:	84000234 	orhi	r16,r16,8
 c01484c:	10bfffc4 	addi	r2,r2,-1
 c014850:	80a0703a 	and	r16,r16,r2
 c014854:	003f1206 	br	c0144a0 <__alt_data_end+0xfc0144a0>
 c014858:	147ff604 	addi	r17,r2,-40
 c01485c:	3462983a 	sll	r17,r6,r17
 c014860:	0025883a 	mov	r18,zero
 c014864:	003ef306 	br	c014434 <__alt_data_end+0xfc014434>
 c014868:	3009883a 	mov	r4,r6
 c01486c:	d9400215 	stw	r5,8(sp)
 c014870:	d9800715 	stw	r6,28(sp)
 c014874:	da400415 	stw	r9,16(sp)
 c014878:	da800315 	stw	r10,12(sp)
 c01487c:	c0154f00 	call	c0154f0 <__clzsi2>
 c014880:	10800804 	addi	r2,r2,32
 c014884:	da800317 	ldw	r10,12(sp)
 c014888:	da400417 	ldw	r9,16(sp)
 c01488c:	d9800717 	ldw	r6,28(sp)
 c014890:	d9400217 	ldw	r5,8(sp)
 c014894:	003edd06 	br	c01440c <__alt_data_end+0xfc01440c>
 c014898:	143ff604 	addi	r16,r2,-40
 c01489c:	ac20983a 	sll	r16,r21,r16
 c0148a0:	002d883a 	mov	r22,zero
 c0148a4:	003ec106 	br	c0143ac <__alt_data_end+0xfc0143ac>
 c0148a8:	d9800715 	stw	r6,28(sp)
 c0148ac:	d9c00215 	stw	r7,8(sp)
 c0148b0:	da400415 	stw	r9,16(sp)
 c0148b4:	c0154f00 	call	c0154f0 <__clzsi2>
 c0148b8:	10800804 	addi	r2,r2,32
 c0148bc:	da400417 	ldw	r9,16(sp)
 c0148c0:	d9c00217 	ldw	r7,8(sp)
 c0148c4:	d9800717 	ldw	r6,28(sp)
 c0148c8:	003eae06 	br	c014384 <__alt_data_end+0xfc014384>
 c0148cc:	00c00044 	movi	r3,1
 c0148d0:	1887c83a 	sub	r3,r3,r2
 c0148d4:	01000e04 	movi	r4,56
 c0148d8:	20fe8516 	blt	r4,r3,c0142f0 <__alt_data_end+0xfc0142f0>
 c0148dc:	010007c4 	movi	r4,31
 c0148e0:	20c01b16 	blt	r4,r3,c014950 <__muldf3+0x7cc>
 c0148e4:	00800804 	movi	r2,32
 c0148e8:	10c5c83a 	sub	r2,r2,r3
 c0148ec:	888a983a 	sll	r5,r17,r2
 c0148f0:	90c8d83a 	srl	r4,r18,r3
 c0148f4:	9084983a 	sll	r2,r18,r2
 c0148f8:	88e2d83a 	srl	r17,r17,r3
 c0148fc:	2906b03a 	or	r3,r5,r4
 c014900:	1004c03a 	cmpne	r2,r2,zero
 c014904:	1886b03a 	or	r3,r3,r2
 c014908:	188001cc 	andi	r2,r3,7
 c01490c:	10000726 	beq	r2,zero,c01492c <__muldf3+0x7a8>
 c014910:	188003cc 	andi	r2,r3,15
 c014914:	01000104 	movi	r4,4
 c014918:	11000426 	beq	r2,r4,c01492c <__muldf3+0x7a8>
 c01491c:	1805883a 	mov	r2,r3
 c014920:	10c00104 	addi	r3,r2,4
 c014924:	1885803a 	cmpltu	r2,r3,r2
 c014928:	88a3883a 	add	r17,r17,r2
 c01492c:	8880202c 	andhi	r2,r17,128
 c014930:	10001c26 	beq	r2,zero,c0149a4 <__muldf3+0x820>
 c014934:	3027883a 	mov	r19,r6
 c014938:	00800044 	movi	r2,1
 c01493c:	0021883a 	mov	r16,zero
 c014940:	002d883a 	mov	r22,zero
 c014944:	003e6e06 	br	c014300 <__alt_data_end+0xfc014300>
 c014948:	4007883a 	mov	r3,r8
 c01494c:	003f9706 	br	c0147ac <__alt_data_end+0xfc0147ac>
 c014950:	017ff844 	movi	r5,-31
 c014954:	2885c83a 	sub	r2,r5,r2
 c014958:	888ad83a 	srl	r5,r17,r2
 c01495c:	00800804 	movi	r2,32
 c014960:	18801a26 	beq	r3,r2,c0149cc <__muldf3+0x848>
 c014964:	01001004 	movi	r4,64
 c014968:	20c7c83a 	sub	r3,r4,r3
 c01496c:	88e2983a 	sll	r17,r17,r3
 c014970:	8ca4b03a 	or	r18,r17,r18
 c014974:	9004c03a 	cmpne	r2,r18,zero
 c014978:	2884b03a 	or	r2,r5,r2
 c01497c:	144001cc 	andi	r17,r2,7
 c014980:	88000d1e 	bne	r17,zero,c0149b8 <__muldf3+0x834>
 c014984:	0021883a 	mov	r16,zero
 c014988:	102cd0fa 	srli	r22,r2,3
 c01498c:	3027883a 	mov	r19,r6
 c014990:	0005883a 	mov	r2,zero
 c014994:	b46cb03a 	or	r22,r22,r17
 c014998:	003e5906 	br	c014300 <__alt_data_end+0xfc014300>
 c01499c:	1007883a 	mov	r3,r2
 c0149a0:	0023883a 	mov	r17,zero
 c0149a4:	8820927a 	slli	r16,r17,9
 c0149a8:	1805883a 	mov	r2,r3
 c0149ac:	8822977a 	slli	r17,r17,29
 c0149b0:	8020d33a 	srli	r16,r16,12
 c0149b4:	003ff406 	br	c014988 <__alt_data_end+0xfc014988>
 c0149b8:	10c003cc 	andi	r3,r2,15
 c0149bc:	01000104 	movi	r4,4
 c0149c0:	193ff626 	beq	r3,r4,c01499c <__alt_data_end+0xfc01499c>
 c0149c4:	0023883a 	mov	r17,zero
 c0149c8:	003fd506 	br	c014920 <__alt_data_end+0xfc014920>
 c0149cc:	0023883a 	mov	r17,zero
 c0149d0:	003fe706 	br	c014970 <__alt_data_end+0xfc014970>
 c0149d4:	00800434 	movhi	r2,16
 c0149d8:	8c000234 	orhi	r16,r17,8
 c0149dc:	10bfffc4 	addi	r2,r2,-1
 c0149e0:	3027883a 	mov	r19,r6
 c0149e4:	80a0703a 	and	r16,r16,r2
 c0149e8:	902d883a 	mov	r22,r18
 c0149ec:	003eac06 	br	c0144a0 <__alt_data_end+0xfc0144a0>

0c0149f0 <__subdf3>:
 c0149f0:	02000434 	movhi	r8,16
 c0149f4:	423fffc4 	addi	r8,r8,-1
 c0149f8:	defffb04 	addi	sp,sp,-20
 c0149fc:	2a14703a 	and	r10,r5,r8
 c014a00:	3812d53a 	srli	r9,r7,20
 c014a04:	3a10703a 	and	r8,r7,r8
 c014a08:	2006d77a 	srli	r3,r4,29
 c014a0c:	3004d77a 	srli	r2,r6,29
 c014a10:	dc000015 	stw	r16,0(sp)
 c014a14:	501490fa 	slli	r10,r10,3
 c014a18:	2820d53a 	srli	r16,r5,20
 c014a1c:	401090fa 	slli	r8,r8,3
 c014a20:	dc800215 	stw	r18,8(sp)
 c014a24:	dc400115 	stw	r17,4(sp)
 c014a28:	dfc00415 	stw	ra,16(sp)
 c014a2c:	202290fa 	slli	r17,r4,3
 c014a30:	dcc00315 	stw	r19,12(sp)
 c014a34:	4a41ffcc 	andi	r9,r9,2047
 c014a38:	0101ffc4 	movi	r4,2047
 c014a3c:	2824d7fa 	srli	r18,r5,31
 c014a40:	8401ffcc 	andi	r16,r16,2047
 c014a44:	50c6b03a 	or	r3,r10,r3
 c014a48:	380ed7fa 	srli	r7,r7,31
 c014a4c:	408ab03a 	or	r5,r8,r2
 c014a50:	300c90fa 	slli	r6,r6,3
 c014a54:	49009626 	beq	r9,r4,c014cb0 <__subdf3+0x2c0>
 c014a58:	39c0005c 	xori	r7,r7,1
 c014a5c:	8245c83a 	sub	r2,r16,r9
 c014a60:	3c807426 	beq	r7,r18,c014c34 <__subdf3+0x244>
 c014a64:	0080af0e 	bge	zero,r2,c014d24 <__subdf3+0x334>
 c014a68:	48002a1e 	bne	r9,zero,c014b14 <__subdf3+0x124>
 c014a6c:	2988b03a 	or	r4,r5,r6
 c014a70:	20009a1e 	bne	r4,zero,c014cdc <__subdf3+0x2ec>
 c014a74:	888001cc 	andi	r2,r17,7
 c014a78:	10000726 	beq	r2,zero,c014a98 <__subdf3+0xa8>
 c014a7c:	888003cc 	andi	r2,r17,15
 c014a80:	01000104 	movi	r4,4
 c014a84:	11000426 	beq	r2,r4,c014a98 <__subdf3+0xa8>
 c014a88:	890b883a 	add	r5,r17,r4
 c014a8c:	2c63803a 	cmpltu	r17,r5,r17
 c014a90:	1c47883a 	add	r3,r3,r17
 c014a94:	2823883a 	mov	r17,r5
 c014a98:	1880202c 	andhi	r2,r3,128
 c014a9c:	10005926 	beq	r2,zero,c014c04 <__subdf3+0x214>
 c014aa0:	84000044 	addi	r16,r16,1
 c014aa4:	0081ffc4 	movi	r2,2047
 c014aa8:	8080be26 	beq	r16,r2,c014da4 <__subdf3+0x3b4>
 c014aac:	017fe034 	movhi	r5,65408
 c014ab0:	297fffc4 	addi	r5,r5,-1
 c014ab4:	1946703a 	and	r3,r3,r5
 c014ab8:	1804977a 	slli	r2,r3,29
 c014abc:	1806927a 	slli	r3,r3,9
 c014ac0:	8822d0fa 	srli	r17,r17,3
 c014ac4:	8401ffcc 	andi	r16,r16,2047
 c014ac8:	180ad33a 	srli	r5,r3,12
 c014acc:	9100004c 	andi	r4,r18,1
 c014ad0:	1444b03a 	or	r2,r2,r17
 c014ad4:	80c1ffcc 	andi	r3,r16,2047
 c014ad8:	1820953a 	slli	r16,r3,20
 c014adc:	20c03fcc 	andi	r3,r4,255
 c014ae0:	180897fa 	slli	r4,r3,31
 c014ae4:	00c00434 	movhi	r3,16
 c014ae8:	18ffffc4 	addi	r3,r3,-1
 c014aec:	28c6703a 	and	r3,r5,r3
 c014af0:	1c06b03a 	or	r3,r3,r16
 c014af4:	1906b03a 	or	r3,r3,r4
 c014af8:	dfc00417 	ldw	ra,16(sp)
 c014afc:	dcc00317 	ldw	r19,12(sp)
 c014b00:	dc800217 	ldw	r18,8(sp)
 c014b04:	dc400117 	ldw	r17,4(sp)
 c014b08:	dc000017 	ldw	r16,0(sp)
 c014b0c:	dec00504 	addi	sp,sp,20
 c014b10:	f800283a 	ret
 c014b14:	0101ffc4 	movi	r4,2047
 c014b18:	813fd626 	beq	r16,r4,c014a74 <__alt_data_end+0xfc014a74>
 c014b1c:	29402034 	orhi	r5,r5,128
 c014b20:	01000e04 	movi	r4,56
 c014b24:	2080a316 	blt	r4,r2,c014db4 <__subdf3+0x3c4>
 c014b28:	010007c4 	movi	r4,31
 c014b2c:	2080c616 	blt	r4,r2,c014e48 <__subdf3+0x458>
 c014b30:	01000804 	movi	r4,32
 c014b34:	2089c83a 	sub	r4,r4,r2
 c014b38:	2910983a 	sll	r8,r5,r4
 c014b3c:	308ed83a 	srl	r7,r6,r2
 c014b40:	3108983a 	sll	r4,r6,r4
 c014b44:	2884d83a 	srl	r2,r5,r2
 c014b48:	41ccb03a 	or	r6,r8,r7
 c014b4c:	2008c03a 	cmpne	r4,r4,zero
 c014b50:	310cb03a 	or	r6,r6,r4
 c014b54:	898dc83a 	sub	r6,r17,r6
 c014b58:	89a3803a 	cmpltu	r17,r17,r6
 c014b5c:	1887c83a 	sub	r3,r3,r2
 c014b60:	1c47c83a 	sub	r3,r3,r17
 c014b64:	3023883a 	mov	r17,r6
 c014b68:	1880202c 	andhi	r2,r3,128
 c014b6c:	10002326 	beq	r2,zero,c014bfc <__subdf3+0x20c>
 c014b70:	04c02034 	movhi	r19,128
 c014b74:	9cffffc4 	addi	r19,r19,-1
 c014b78:	1ce6703a 	and	r19,r3,r19
 c014b7c:	98007a26 	beq	r19,zero,c014d68 <__subdf3+0x378>
 c014b80:	9809883a 	mov	r4,r19
 c014b84:	c0154f00 	call	c0154f0 <__clzsi2>
 c014b88:	113ffe04 	addi	r4,r2,-8
 c014b8c:	00c007c4 	movi	r3,31
 c014b90:	19007b16 	blt	r3,r4,c014d80 <__subdf3+0x390>
 c014b94:	00800804 	movi	r2,32
 c014b98:	1105c83a 	sub	r2,r2,r4
 c014b9c:	8884d83a 	srl	r2,r17,r2
 c014ba0:	9906983a 	sll	r3,r19,r4
 c014ba4:	8922983a 	sll	r17,r17,r4
 c014ba8:	10c4b03a 	or	r2,r2,r3
 c014bac:	24007816 	blt	r4,r16,c014d90 <__subdf3+0x3a0>
 c014bb0:	2421c83a 	sub	r16,r4,r16
 c014bb4:	80c00044 	addi	r3,r16,1
 c014bb8:	010007c4 	movi	r4,31
 c014bbc:	20c09516 	blt	r4,r3,c014e14 <__subdf3+0x424>
 c014bc0:	01400804 	movi	r5,32
 c014bc4:	28cbc83a 	sub	r5,r5,r3
 c014bc8:	88c8d83a 	srl	r4,r17,r3
 c014bcc:	8962983a 	sll	r17,r17,r5
 c014bd0:	114a983a 	sll	r5,r2,r5
 c014bd4:	10c6d83a 	srl	r3,r2,r3
 c014bd8:	8804c03a 	cmpne	r2,r17,zero
 c014bdc:	290ab03a 	or	r5,r5,r4
 c014be0:	28a2b03a 	or	r17,r5,r2
 c014be4:	0021883a 	mov	r16,zero
 c014be8:	003fa206 	br	c014a74 <__alt_data_end+0xfc014a74>
 c014bec:	2090b03a 	or	r8,r4,r2
 c014bf0:	40018e26 	beq	r8,zero,c01522c <__subdf3+0x83c>
 c014bf4:	1007883a 	mov	r3,r2
 c014bf8:	2023883a 	mov	r17,r4
 c014bfc:	888001cc 	andi	r2,r17,7
 c014c00:	103f9e1e 	bne	r2,zero,c014a7c <__alt_data_end+0xfc014a7c>
 c014c04:	1804977a 	slli	r2,r3,29
 c014c08:	8822d0fa 	srli	r17,r17,3
 c014c0c:	1810d0fa 	srli	r8,r3,3
 c014c10:	9100004c 	andi	r4,r18,1
 c014c14:	1444b03a 	or	r2,r2,r17
 c014c18:	00c1ffc4 	movi	r3,2047
 c014c1c:	80c02826 	beq	r16,r3,c014cc0 <__subdf3+0x2d0>
 c014c20:	01400434 	movhi	r5,16
 c014c24:	297fffc4 	addi	r5,r5,-1
 c014c28:	80e0703a 	and	r16,r16,r3
 c014c2c:	414a703a 	and	r5,r8,r5
 c014c30:	003fa806 	br	c014ad4 <__alt_data_end+0xfc014ad4>
 c014c34:	0080630e 	bge	zero,r2,c014dc4 <__subdf3+0x3d4>
 c014c38:	48003026 	beq	r9,zero,c014cfc <__subdf3+0x30c>
 c014c3c:	0101ffc4 	movi	r4,2047
 c014c40:	813f8c26 	beq	r16,r4,c014a74 <__alt_data_end+0xfc014a74>
 c014c44:	29402034 	orhi	r5,r5,128
 c014c48:	01000e04 	movi	r4,56
 c014c4c:	2080a90e 	bge	r4,r2,c014ef4 <__subdf3+0x504>
 c014c50:	298cb03a 	or	r6,r5,r6
 c014c54:	3012c03a 	cmpne	r9,r6,zero
 c014c58:	0005883a 	mov	r2,zero
 c014c5c:	4c53883a 	add	r9,r9,r17
 c014c60:	4c63803a 	cmpltu	r17,r9,r17
 c014c64:	10c7883a 	add	r3,r2,r3
 c014c68:	88c7883a 	add	r3,r17,r3
 c014c6c:	4823883a 	mov	r17,r9
 c014c70:	1880202c 	andhi	r2,r3,128
 c014c74:	1000d026 	beq	r2,zero,c014fb8 <__subdf3+0x5c8>
 c014c78:	84000044 	addi	r16,r16,1
 c014c7c:	0081ffc4 	movi	r2,2047
 c014c80:	8080fe26 	beq	r16,r2,c01507c <__subdf3+0x68c>
 c014c84:	00bfe034 	movhi	r2,65408
 c014c88:	10bfffc4 	addi	r2,r2,-1
 c014c8c:	1886703a 	and	r3,r3,r2
 c014c90:	880ad07a 	srli	r5,r17,1
 c014c94:	180497fa 	slli	r2,r3,31
 c014c98:	8900004c 	andi	r4,r17,1
 c014c9c:	2922b03a 	or	r17,r5,r4
 c014ca0:	1806d07a 	srli	r3,r3,1
 c014ca4:	1462b03a 	or	r17,r2,r17
 c014ca8:	3825883a 	mov	r18,r7
 c014cac:	003f7106 	br	c014a74 <__alt_data_end+0xfc014a74>
 c014cb0:	2984b03a 	or	r2,r5,r6
 c014cb4:	103f6826 	beq	r2,zero,c014a58 <__alt_data_end+0xfc014a58>
 c014cb8:	39c03fcc 	andi	r7,r7,255
 c014cbc:	003f6706 	br	c014a5c <__alt_data_end+0xfc014a5c>
 c014cc0:	4086b03a 	or	r3,r8,r2
 c014cc4:	18015226 	beq	r3,zero,c015210 <__subdf3+0x820>
 c014cc8:	00c00434 	movhi	r3,16
 c014ccc:	41400234 	orhi	r5,r8,8
 c014cd0:	18ffffc4 	addi	r3,r3,-1
 c014cd4:	28ca703a 	and	r5,r5,r3
 c014cd8:	003f7e06 	br	c014ad4 <__alt_data_end+0xfc014ad4>
 c014cdc:	10bfffc4 	addi	r2,r2,-1
 c014ce0:	1000491e 	bne	r2,zero,c014e08 <__subdf3+0x418>
 c014ce4:	898fc83a 	sub	r7,r17,r6
 c014ce8:	89e3803a 	cmpltu	r17,r17,r7
 c014cec:	1947c83a 	sub	r3,r3,r5
 c014cf0:	1c47c83a 	sub	r3,r3,r17
 c014cf4:	3823883a 	mov	r17,r7
 c014cf8:	003f9b06 	br	c014b68 <__alt_data_end+0xfc014b68>
 c014cfc:	2988b03a 	or	r4,r5,r6
 c014d00:	203f5c26 	beq	r4,zero,c014a74 <__alt_data_end+0xfc014a74>
 c014d04:	10bfffc4 	addi	r2,r2,-1
 c014d08:	1000931e 	bne	r2,zero,c014f58 <__subdf3+0x568>
 c014d0c:	898d883a 	add	r6,r17,r6
 c014d10:	3463803a 	cmpltu	r17,r6,r17
 c014d14:	1947883a 	add	r3,r3,r5
 c014d18:	88c7883a 	add	r3,r17,r3
 c014d1c:	3023883a 	mov	r17,r6
 c014d20:	003fd306 	br	c014c70 <__alt_data_end+0xfc014c70>
 c014d24:	1000541e 	bne	r2,zero,c014e78 <__subdf3+0x488>
 c014d28:	80800044 	addi	r2,r16,1
 c014d2c:	1081ffcc 	andi	r2,r2,2047
 c014d30:	01000044 	movi	r4,1
 c014d34:	2080a20e 	bge	r4,r2,c014fc0 <__subdf3+0x5d0>
 c014d38:	8989c83a 	sub	r4,r17,r6
 c014d3c:	8905803a 	cmpltu	r2,r17,r4
 c014d40:	1967c83a 	sub	r19,r3,r5
 c014d44:	98a7c83a 	sub	r19,r19,r2
 c014d48:	9880202c 	andhi	r2,r19,128
 c014d4c:	10006326 	beq	r2,zero,c014edc <__subdf3+0x4ec>
 c014d50:	3463c83a 	sub	r17,r6,r17
 c014d54:	28c7c83a 	sub	r3,r5,r3
 c014d58:	344d803a 	cmpltu	r6,r6,r17
 c014d5c:	19a7c83a 	sub	r19,r3,r6
 c014d60:	3825883a 	mov	r18,r7
 c014d64:	983f861e 	bne	r19,zero,c014b80 <__alt_data_end+0xfc014b80>
 c014d68:	8809883a 	mov	r4,r17
 c014d6c:	c0154f00 	call	c0154f0 <__clzsi2>
 c014d70:	10800804 	addi	r2,r2,32
 c014d74:	113ffe04 	addi	r4,r2,-8
 c014d78:	00c007c4 	movi	r3,31
 c014d7c:	193f850e 	bge	r3,r4,c014b94 <__alt_data_end+0xfc014b94>
 c014d80:	10bff604 	addi	r2,r2,-40
 c014d84:	8884983a 	sll	r2,r17,r2
 c014d88:	0023883a 	mov	r17,zero
 c014d8c:	243f880e 	bge	r4,r16,c014bb0 <__alt_data_end+0xfc014bb0>
 c014d90:	00ffe034 	movhi	r3,65408
 c014d94:	18ffffc4 	addi	r3,r3,-1
 c014d98:	8121c83a 	sub	r16,r16,r4
 c014d9c:	10c6703a 	and	r3,r2,r3
 c014da0:	003f3406 	br	c014a74 <__alt_data_end+0xfc014a74>
 c014da4:	9100004c 	andi	r4,r18,1
 c014da8:	000b883a 	mov	r5,zero
 c014dac:	0005883a 	mov	r2,zero
 c014db0:	003f4806 	br	c014ad4 <__alt_data_end+0xfc014ad4>
 c014db4:	298cb03a 	or	r6,r5,r6
 c014db8:	300cc03a 	cmpne	r6,r6,zero
 c014dbc:	0005883a 	mov	r2,zero
 c014dc0:	003f6406 	br	c014b54 <__alt_data_end+0xfc014b54>
 c014dc4:	10009a1e 	bne	r2,zero,c015030 <__subdf3+0x640>
 c014dc8:	82400044 	addi	r9,r16,1
 c014dcc:	4881ffcc 	andi	r2,r9,2047
 c014dd0:	02800044 	movi	r10,1
 c014dd4:	5080670e 	bge	r10,r2,c014f74 <__subdf3+0x584>
 c014dd8:	0081ffc4 	movi	r2,2047
 c014ddc:	4880af26 	beq	r9,r2,c01509c <__subdf3+0x6ac>
 c014de0:	898d883a 	add	r6,r17,r6
 c014de4:	1945883a 	add	r2,r3,r5
 c014de8:	3447803a 	cmpltu	r3,r6,r17
 c014dec:	1887883a 	add	r3,r3,r2
 c014df0:	182297fa 	slli	r17,r3,31
 c014df4:	300cd07a 	srli	r6,r6,1
 c014df8:	1806d07a 	srli	r3,r3,1
 c014dfc:	4821883a 	mov	r16,r9
 c014e00:	89a2b03a 	or	r17,r17,r6
 c014e04:	003f1b06 	br	c014a74 <__alt_data_end+0xfc014a74>
 c014e08:	0101ffc4 	movi	r4,2047
 c014e0c:	813f441e 	bne	r16,r4,c014b20 <__alt_data_end+0xfc014b20>
 c014e10:	003f1806 	br	c014a74 <__alt_data_end+0xfc014a74>
 c014e14:	843ff844 	addi	r16,r16,-31
 c014e18:	01400804 	movi	r5,32
 c014e1c:	1408d83a 	srl	r4,r2,r16
 c014e20:	19405026 	beq	r3,r5,c014f64 <__subdf3+0x574>
 c014e24:	01401004 	movi	r5,64
 c014e28:	28c7c83a 	sub	r3,r5,r3
 c014e2c:	10c4983a 	sll	r2,r2,r3
 c014e30:	88a2b03a 	or	r17,r17,r2
 c014e34:	8822c03a 	cmpne	r17,r17,zero
 c014e38:	2462b03a 	or	r17,r4,r17
 c014e3c:	0007883a 	mov	r3,zero
 c014e40:	0021883a 	mov	r16,zero
 c014e44:	003f6d06 	br	c014bfc <__alt_data_end+0xfc014bfc>
 c014e48:	11fff804 	addi	r7,r2,-32
 c014e4c:	01000804 	movi	r4,32
 c014e50:	29ced83a 	srl	r7,r5,r7
 c014e54:	11004526 	beq	r2,r4,c014f6c <__subdf3+0x57c>
 c014e58:	01001004 	movi	r4,64
 c014e5c:	2089c83a 	sub	r4,r4,r2
 c014e60:	2904983a 	sll	r2,r5,r4
 c014e64:	118cb03a 	or	r6,r2,r6
 c014e68:	300cc03a 	cmpne	r6,r6,zero
 c014e6c:	398cb03a 	or	r6,r7,r6
 c014e70:	0005883a 	mov	r2,zero
 c014e74:	003f3706 	br	c014b54 <__alt_data_end+0xfc014b54>
 c014e78:	80002a26 	beq	r16,zero,c014f24 <__subdf3+0x534>
 c014e7c:	0101ffc4 	movi	r4,2047
 c014e80:	49006626 	beq	r9,r4,c01501c <__subdf3+0x62c>
 c014e84:	0085c83a 	sub	r2,zero,r2
 c014e88:	18c02034 	orhi	r3,r3,128
 c014e8c:	01000e04 	movi	r4,56
 c014e90:	20807e16 	blt	r4,r2,c01508c <__subdf3+0x69c>
 c014e94:	010007c4 	movi	r4,31
 c014e98:	2080e716 	blt	r4,r2,c015238 <__subdf3+0x848>
 c014e9c:	01000804 	movi	r4,32
 c014ea0:	2089c83a 	sub	r4,r4,r2
 c014ea4:	1914983a 	sll	r10,r3,r4
 c014ea8:	8890d83a 	srl	r8,r17,r2
 c014eac:	8908983a 	sll	r4,r17,r4
 c014eb0:	1884d83a 	srl	r2,r3,r2
 c014eb4:	5222b03a 	or	r17,r10,r8
 c014eb8:	2006c03a 	cmpne	r3,r4,zero
 c014ebc:	88e2b03a 	or	r17,r17,r3
 c014ec0:	3463c83a 	sub	r17,r6,r17
 c014ec4:	2885c83a 	sub	r2,r5,r2
 c014ec8:	344d803a 	cmpltu	r6,r6,r17
 c014ecc:	1187c83a 	sub	r3,r2,r6
 c014ed0:	4821883a 	mov	r16,r9
 c014ed4:	3825883a 	mov	r18,r7
 c014ed8:	003f2306 	br	c014b68 <__alt_data_end+0xfc014b68>
 c014edc:	24d0b03a 	or	r8,r4,r19
 c014ee0:	40001b1e 	bne	r8,zero,c014f50 <__subdf3+0x560>
 c014ee4:	0005883a 	mov	r2,zero
 c014ee8:	0009883a 	mov	r4,zero
 c014eec:	0021883a 	mov	r16,zero
 c014ef0:	003f4906 	br	c014c18 <__alt_data_end+0xfc014c18>
 c014ef4:	010007c4 	movi	r4,31
 c014ef8:	20803a16 	blt	r4,r2,c014fe4 <__subdf3+0x5f4>
 c014efc:	01000804 	movi	r4,32
 c014f00:	2089c83a 	sub	r4,r4,r2
 c014f04:	2912983a 	sll	r9,r5,r4
 c014f08:	3090d83a 	srl	r8,r6,r2
 c014f0c:	3108983a 	sll	r4,r6,r4
 c014f10:	2884d83a 	srl	r2,r5,r2
 c014f14:	4a12b03a 	or	r9,r9,r8
 c014f18:	2008c03a 	cmpne	r4,r4,zero
 c014f1c:	4912b03a 	or	r9,r9,r4
 c014f20:	003f4e06 	br	c014c5c <__alt_data_end+0xfc014c5c>
 c014f24:	1c48b03a 	or	r4,r3,r17
 c014f28:	20003c26 	beq	r4,zero,c01501c <__subdf3+0x62c>
 c014f2c:	0084303a 	nor	r2,zero,r2
 c014f30:	1000381e 	bne	r2,zero,c015014 <__subdf3+0x624>
 c014f34:	3463c83a 	sub	r17,r6,r17
 c014f38:	28c5c83a 	sub	r2,r5,r3
 c014f3c:	344d803a 	cmpltu	r6,r6,r17
 c014f40:	1187c83a 	sub	r3,r2,r6
 c014f44:	4821883a 	mov	r16,r9
 c014f48:	3825883a 	mov	r18,r7
 c014f4c:	003f0606 	br	c014b68 <__alt_data_end+0xfc014b68>
 c014f50:	2023883a 	mov	r17,r4
 c014f54:	003f0906 	br	c014b7c <__alt_data_end+0xfc014b7c>
 c014f58:	0101ffc4 	movi	r4,2047
 c014f5c:	813f3a1e 	bne	r16,r4,c014c48 <__alt_data_end+0xfc014c48>
 c014f60:	003ec406 	br	c014a74 <__alt_data_end+0xfc014a74>
 c014f64:	0005883a 	mov	r2,zero
 c014f68:	003fb106 	br	c014e30 <__alt_data_end+0xfc014e30>
 c014f6c:	0005883a 	mov	r2,zero
 c014f70:	003fbc06 	br	c014e64 <__alt_data_end+0xfc014e64>
 c014f74:	1c44b03a 	or	r2,r3,r17
 c014f78:	80008e1e 	bne	r16,zero,c0151b4 <__subdf3+0x7c4>
 c014f7c:	1000c826 	beq	r2,zero,c0152a0 <__subdf3+0x8b0>
 c014f80:	2984b03a 	or	r2,r5,r6
 c014f84:	103ebb26 	beq	r2,zero,c014a74 <__alt_data_end+0xfc014a74>
 c014f88:	8989883a 	add	r4,r17,r6
 c014f8c:	1945883a 	add	r2,r3,r5
 c014f90:	2447803a 	cmpltu	r3,r4,r17
 c014f94:	1887883a 	add	r3,r3,r2
 c014f98:	1880202c 	andhi	r2,r3,128
 c014f9c:	2023883a 	mov	r17,r4
 c014fa0:	103f1626 	beq	r2,zero,c014bfc <__alt_data_end+0xfc014bfc>
 c014fa4:	00bfe034 	movhi	r2,65408
 c014fa8:	10bfffc4 	addi	r2,r2,-1
 c014fac:	5021883a 	mov	r16,r10
 c014fb0:	1886703a 	and	r3,r3,r2
 c014fb4:	003eaf06 	br	c014a74 <__alt_data_end+0xfc014a74>
 c014fb8:	3825883a 	mov	r18,r7
 c014fbc:	003f0f06 	br	c014bfc <__alt_data_end+0xfc014bfc>
 c014fc0:	1c44b03a 	or	r2,r3,r17
 c014fc4:	8000251e 	bne	r16,zero,c01505c <__subdf3+0x66c>
 c014fc8:	1000661e 	bne	r2,zero,c015164 <__subdf3+0x774>
 c014fcc:	2990b03a 	or	r8,r5,r6
 c014fd0:	40009626 	beq	r8,zero,c01522c <__subdf3+0x83c>
 c014fd4:	2807883a 	mov	r3,r5
 c014fd8:	3023883a 	mov	r17,r6
 c014fdc:	3825883a 	mov	r18,r7
 c014fe0:	003ea406 	br	c014a74 <__alt_data_end+0xfc014a74>
 c014fe4:	127ff804 	addi	r9,r2,-32
 c014fe8:	01000804 	movi	r4,32
 c014fec:	2a52d83a 	srl	r9,r5,r9
 c014ff0:	11008c26 	beq	r2,r4,c015224 <__subdf3+0x834>
 c014ff4:	01001004 	movi	r4,64
 c014ff8:	2085c83a 	sub	r2,r4,r2
 c014ffc:	2884983a 	sll	r2,r5,r2
 c015000:	118cb03a 	or	r6,r2,r6
 c015004:	300cc03a 	cmpne	r6,r6,zero
 c015008:	4992b03a 	or	r9,r9,r6
 c01500c:	0005883a 	mov	r2,zero
 c015010:	003f1206 	br	c014c5c <__alt_data_end+0xfc014c5c>
 c015014:	0101ffc4 	movi	r4,2047
 c015018:	493f9c1e 	bne	r9,r4,c014e8c <__alt_data_end+0xfc014e8c>
 c01501c:	2807883a 	mov	r3,r5
 c015020:	3023883a 	mov	r17,r6
 c015024:	4821883a 	mov	r16,r9
 c015028:	3825883a 	mov	r18,r7
 c01502c:	003e9106 	br	c014a74 <__alt_data_end+0xfc014a74>
 c015030:	80001f1e 	bne	r16,zero,c0150b0 <__subdf3+0x6c0>
 c015034:	1c48b03a 	or	r4,r3,r17
 c015038:	20005a26 	beq	r4,zero,c0151a4 <__subdf3+0x7b4>
 c01503c:	0084303a 	nor	r2,zero,r2
 c015040:	1000561e 	bne	r2,zero,c01519c <__subdf3+0x7ac>
 c015044:	89a3883a 	add	r17,r17,r6
 c015048:	1945883a 	add	r2,r3,r5
 c01504c:	898d803a 	cmpltu	r6,r17,r6
 c015050:	3087883a 	add	r3,r6,r2
 c015054:	4821883a 	mov	r16,r9
 c015058:	003f0506 	br	c014c70 <__alt_data_end+0xfc014c70>
 c01505c:	10002b1e 	bne	r2,zero,c01510c <__subdf3+0x71c>
 c015060:	2984b03a 	or	r2,r5,r6
 c015064:	10008026 	beq	r2,zero,c015268 <__subdf3+0x878>
 c015068:	2807883a 	mov	r3,r5
 c01506c:	3023883a 	mov	r17,r6
 c015070:	3825883a 	mov	r18,r7
 c015074:	0401ffc4 	movi	r16,2047
 c015078:	003e7e06 	br	c014a74 <__alt_data_end+0xfc014a74>
 c01507c:	3809883a 	mov	r4,r7
 c015080:	0011883a 	mov	r8,zero
 c015084:	0005883a 	mov	r2,zero
 c015088:	003ee306 	br	c014c18 <__alt_data_end+0xfc014c18>
 c01508c:	1c62b03a 	or	r17,r3,r17
 c015090:	8822c03a 	cmpne	r17,r17,zero
 c015094:	0005883a 	mov	r2,zero
 c015098:	003f8906 	br	c014ec0 <__alt_data_end+0xfc014ec0>
 c01509c:	3809883a 	mov	r4,r7
 c0150a0:	4821883a 	mov	r16,r9
 c0150a4:	0011883a 	mov	r8,zero
 c0150a8:	0005883a 	mov	r2,zero
 c0150ac:	003eda06 	br	c014c18 <__alt_data_end+0xfc014c18>
 c0150b0:	0101ffc4 	movi	r4,2047
 c0150b4:	49003b26 	beq	r9,r4,c0151a4 <__subdf3+0x7b4>
 c0150b8:	0085c83a 	sub	r2,zero,r2
 c0150bc:	18c02034 	orhi	r3,r3,128
 c0150c0:	01000e04 	movi	r4,56
 c0150c4:	20806e16 	blt	r4,r2,c015280 <__subdf3+0x890>
 c0150c8:	010007c4 	movi	r4,31
 c0150cc:	20807716 	blt	r4,r2,c0152ac <__subdf3+0x8bc>
 c0150d0:	01000804 	movi	r4,32
 c0150d4:	2089c83a 	sub	r4,r4,r2
 c0150d8:	1914983a 	sll	r10,r3,r4
 c0150dc:	8890d83a 	srl	r8,r17,r2
 c0150e0:	8908983a 	sll	r4,r17,r4
 c0150e4:	1884d83a 	srl	r2,r3,r2
 c0150e8:	5222b03a 	or	r17,r10,r8
 c0150ec:	2006c03a 	cmpne	r3,r4,zero
 c0150f0:	88e2b03a 	or	r17,r17,r3
 c0150f4:	89a3883a 	add	r17,r17,r6
 c0150f8:	1145883a 	add	r2,r2,r5
 c0150fc:	898d803a 	cmpltu	r6,r17,r6
 c015100:	3087883a 	add	r3,r6,r2
 c015104:	4821883a 	mov	r16,r9
 c015108:	003ed906 	br	c014c70 <__alt_data_end+0xfc014c70>
 c01510c:	2984b03a 	or	r2,r5,r6
 c015110:	10004226 	beq	r2,zero,c01521c <__subdf3+0x82c>
 c015114:	1808d0fa 	srli	r4,r3,3
 c015118:	8822d0fa 	srli	r17,r17,3
 c01511c:	1806977a 	slli	r3,r3,29
 c015120:	2080022c 	andhi	r2,r4,8
 c015124:	1c62b03a 	or	r17,r3,r17
 c015128:	10000826 	beq	r2,zero,c01514c <__subdf3+0x75c>
 c01512c:	2812d0fa 	srli	r9,r5,3
 c015130:	4880022c 	andhi	r2,r9,8
 c015134:	1000051e 	bne	r2,zero,c01514c <__subdf3+0x75c>
 c015138:	300cd0fa 	srli	r6,r6,3
 c01513c:	2804977a 	slli	r2,r5,29
 c015140:	4809883a 	mov	r4,r9
 c015144:	3825883a 	mov	r18,r7
 c015148:	11a2b03a 	or	r17,r2,r6
 c01514c:	8806d77a 	srli	r3,r17,29
 c015150:	200890fa 	slli	r4,r4,3
 c015154:	882290fa 	slli	r17,r17,3
 c015158:	0401ffc4 	movi	r16,2047
 c01515c:	1906b03a 	or	r3,r3,r4
 c015160:	003e4406 	br	c014a74 <__alt_data_end+0xfc014a74>
 c015164:	2984b03a 	or	r2,r5,r6
 c015168:	103e4226 	beq	r2,zero,c014a74 <__alt_data_end+0xfc014a74>
 c01516c:	8989c83a 	sub	r4,r17,r6
 c015170:	8911803a 	cmpltu	r8,r17,r4
 c015174:	1945c83a 	sub	r2,r3,r5
 c015178:	1205c83a 	sub	r2,r2,r8
 c01517c:	1200202c 	andhi	r8,r2,128
 c015180:	403e9a26 	beq	r8,zero,c014bec <__alt_data_end+0xfc014bec>
 c015184:	3463c83a 	sub	r17,r6,r17
 c015188:	28c5c83a 	sub	r2,r5,r3
 c01518c:	344d803a 	cmpltu	r6,r6,r17
 c015190:	1187c83a 	sub	r3,r2,r6
 c015194:	3825883a 	mov	r18,r7
 c015198:	003e3606 	br	c014a74 <__alt_data_end+0xfc014a74>
 c01519c:	0101ffc4 	movi	r4,2047
 c0151a0:	493fc71e 	bne	r9,r4,c0150c0 <__alt_data_end+0xfc0150c0>
 c0151a4:	2807883a 	mov	r3,r5
 c0151a8:	3023883a 	mov	r17,r6
 c0151ac:	4821883a 	mov	r16,r9
 c0151b0:	003e3006 	br	c014a74 <__alt_data_end+0xfc014a74>
 c0151b4:	10003626 	beq	r2,zero,c015290 <__subdf3+0x8a0>
 c0151b8:	2984b03a 	or	r2,r5,r6
 c0151bc:	10001726 	beq	r2,zero,c01521c <__subdf3+0x82c>
 c0151c0:	1808d0fa 	srli	r4,r3,3
 c0151c4:	8822d0fa 	srli	r17,r17,3
 c0151c8:	1806977a 	slli	r3,r3,29
 c0151cc:	2080022c 	andhi	r2,r4,8
 c0151d0:	1c62b03a 	or	r17,r3,r17
 c0151d4:	10000726 	beq	r2,zero,c0151f4 <__subdf3+0x804>
 c0151d8:	2812d0fa 	srli	r9,r5,3
 c0151dc:	4880022c 	andhi	r2,r9,8
 c0151e0:	1000041e 	bne	r2,zero,c0151f4 <__subdf3+0x804>
 c0151e4:	300cd0fa 	srli	r6,r6,3
 c0151e8:	2804977a 	slli	r2,r5,29
 c0151ec:	4809883a 	mov	r4,r9
 c0151f0:	11a2b03a 	or	r17,r2,r6
 c0151f4:	8806d77a 	srli	r3,r17,29
 c0151f8:	200890fa 	slli	r4,r4,3
 c0151fc:	882290fa 	slli	r17,r17,3
 c015200:	3825883a 	mov	r18,r7
 c015204:	1906b03a 	or	r3,r3,r4
 c015208:	0401ffc4 	movi	r16,2047
 c01520c:	003e1906 	br	c014a74 <__alt_data_end+0xfc014a74>
 c015210:	000b883a 	mov	r5,zero
 c015214:	0005883a 	mov	r2,zero
 c015218:	003e2e06 	br	c014ad4 <__alt_data_end+0xfc014ad4>
 c01521c:	0401ffc4 	movi	r16,2047
 c015220:	003e1406 	br	c014a74 <__alt_data_end+0xfc014a74>
 c015224:	0005883a 	mov	r2,zero
 c015228:	003f7506 	br	c015000 <__alt_data_end+0xfc015000>
 c01522c:	0005883a 	mov	r2,zero
 c015230:	0009883a 	mov	r4,zero
 c015234:	003e7806 	br	c014c18 <__alt_data_end+0xfc014c18>
 c015238:	123ff804 	addi	r8,r2,-32
 c01523c:	01000804 	movi	r4,32
 c015240:	1a10d83a 	srl	r8,r3,r8
 c015244:	11002526 	beq	r2,r4,c0152dc <__subdf3+0x8ec>
 c015248:	01001004 	movi	r4,64
 c01524c:	2085c83a 	sub	r2,r4,r2
 c015250:	1884983a 	sll	r2,r3,r2
 c015254:	1444b03a 	or	r2,r2,r17
 c015258:	1004c03a 	cmpne	r2,r2,zero
 c01525c:	40a2b03a 	or	r17,r8,r2
 c015260:	0005883a 	mov	r2,zero
 c015264:	003f1606 	br	c014ec0 <__alt_data_end+0xfc014ec0>
 c015268:	02000434 	movhi	r8,16
 c01526c:	0009883a 	mov	r4,zero
 c015270:	423fffc4 	addi	r8,r8,-1
 c015274:	00bfffc4 	movi	r2,-1
 c015278:	0401ffc4 	movi	r16,2047
 c01527c:	003e6606 	br	c014c18 <__alt_data_end+0xfc014c18>
 c015280:	1c62b03a 	or	r17,r3,r17
 c015284:	8822c03a 	cmpne	r17,r17,zero
 c015288:	0005883a 	mov	r2,zero
 c01528c:	003f9906 	br	c0150f4 <__alt_data_end+0xfc0150f4>
 c015290:	2807883a 	mov	r3,r5
 c015294:	3023883a 	mov	r17,r6
 c015298:	0401ffc4 	movi	r16,2047
 c01529c:	003df506 	br	c014a74 <__alt_data_end+0xfc014a74>
 c0152a0:	2807883a 	mov	r3,r5
 c0152a4:	3023883a 	mov	r17,r6
 c0152a8:	003df206 	br	c014a74 <__alt_data_end+0xfc014a74>
 c0152ac:	123ff804 	addi	r8,r2,-32
 c0152b0:	01000804 	movi	r4,32
 c0152b4:	1a10d83a 	srl	r8,r3,r8
 c0152b8:	11000a26 	beq	r2,r4,c0152e4 <__subdf3+0x8f4>
 c0152bc:	01001004 	movi	r4,64
 c0152c0:	2085c83a 	sub	r2,r4,r2
 c0152c4:	1884983a 	sll	r2,r3,r2
 c0152c8:	1444b03a 	or	r2,r2,r17
 c0152cc:	1004c03a 	cmpne	r2,r2,zero
 c0152d0:	40a2b03a 	or	r17,r8,r2
 c0152d4:	0005883a 	mov	r2,zero
 c0152d8:	003f8606 	br	c0150f4 <__alt_data_end+0xfc0150f4>
 c0152dc:	0005883a 	mov	r2,zero
 c0152e0:	003fdc06 	br	c015254 <__alt_data_end+0xfc015254>
 c0152e4:	0005883a 	mov	r2,zero
 c0152e8:	003ff706 	br	c0152c8 <__alt_data_end+0xfc0152c8>

0c0152ec <__fixdfsi>:
 c0152ec:	280cd53a 	srli	r6,r5,20
 c0152f0:	00c00434 	movhi	r3,16
 c0152f4:	18ffffc4 	addi	r3,r3,-1
 c0152f8:	3181ffcc 	andi	r6,r6,2047
 c0152fc:	01c0ff84 	movi	r7,1022
 c015300:	28c6703a 	and	r3,r5,r3
 c015304:	280ad7fa 	srli	r5,r5,31
 c015308:	3980120e 	bge	r7,r6,c015354 <__fixdfsi+0x68>
 c01530c:	00810744 	movi	r2,1053
 c015310:	11800c16 	blt	r2,r6,c015344 <__fixdfsi+0x58>
 c015314:	00810cc4 	movi	r2,1075
 c015318:	1185c83a 	sub	r2,r2,r6
 c01531c:	01c007c4 	movi	r7,31
 c015320:	18c00434 	orhi	r3,r3,16
 c015324:	38800d16 	blt	r7,r2,c01535c <__fixdfsi+0x70>
 c015328:	31befb44 	addi	r6,r6,-1043
 c01532c:	2084d83a 	srl	r2,r4,r2
 c015330:	1986983a 	sll	r3,r3,r6
 c015334:	1884b03a 	or	r2,r3,r2
 c015338:	28000726 	beq	r5,zero,c015358 <__fixdfsi+0x6c>
 c01533c:	0085c83a 	sub	r2,zero,r2
 c015340:	f800283a 	ret
 c015344:	00a00034 	movhi	r2,32768
 c015348:	10bfffc4 	addi	r2,r2,-1
 c01534c:	2885883a 	add	r2,r5,r2
 c015350:	f800283a 	ret
 c015354:	0005883a 	mov	r2,zero
 c015358:	f800283a 	ret
 c01535c:	008104c4 	movi	r2,1043
 c015360:	1185c83a 	sub	r2,r2,r6
 c015364:	1884d83a 	srl	r2,r3,r2
 c015368:	003ff306 	br	c015338 <__alt_data_end+0xfc015338>

0c01536c <__floatsidf>:
 c01536c:	defffd04 	addi	sp,sp,-12
 c015370:	dfc00215 	stw	ra,8(sp)
 c015374:	dc400115 	stw	r17,4(sp)
 c015378:	dc000015 	stw	r16,0(sp)
 c01537c:	20002b26 	beq	r4,zero,c01542c <__floatsidf+0xc0>
 c015380:	2023883a 	mov	r17,r4
 c015384:	2020d7fa 	srli	r16,r4,31
 c015388:	20002d16 	blt	r4,zero,c015440 <__floatsidf+0xd4>
 c01538c:	8809883a 	mov	r4,r17
 c015390:	c0154f00 	call	c0154f0 <__clzsi2>
 c015394:	01410784 	movi	r5,1054
 c015398:	288bc83a 	sub	r5,r5,r2
 c01539c:	01010cc4 	movi	r4,1075
 c0153a0:	2149c83a 	sub	r4,r4,r5
 c0153a4:	00c007c4 	movi	r3,31
 c0153a8:	1900160e 	bge	r3,r4,c015404 <__floatsidf+0x98>
 c0153ac:	00c104c4 	movi	r3,1043
 c0153b0:	1947c83a 	sub	r3,r3,r5
 c0153b4:	88c6983a 	sll	r3,r17,r3
 c0153b8:	00800434 	movhi	r2,16
 c0153bc:	10bfffc4 	addi	r2,r2,-1
 c0153c0:	1886703a 	and	r3,r3,r2
 c0153c4:	2941ffcc 	andi	r5,r5,2047
 c0153c8:	800d883a 	mov	r6,r16
 c0153cc:	0005883a 	mov	r2,zero
 c0153d0:	280a953a 	slli	r5,r5,20
 c0153d4:	31803fcc 	andi	r6,r6,255
 c0153d8:	01000434 	movhi	r4,16
 c0153dc:	300c97fa 	slli	r6,r6,31
 c0153e0:	213fffc4 	addi	r4,r4,-1
 c0153e4:	1906703a 	and	r3,r3,r4
 c0153e8:	1946b03a 	or	r3,r3,r5
 c0153ec:	1986b03a 	or	r3,r3,r6
 c0153f0:	dfc00217 	ldw	ra,8(sp)
 c0153f4:	dc400117 	ldw	r17,4(sp)
 c0153f8:	dc000017 	ldw	r16,0(sp)
 c0153fc:	dec00304 	addi	sp,sp,12
 c015400:	f800283a 	ret
 c015404:	00c002c4 	movi	r3,11
 c015408:	1887c83a 	sub	r3,r3,r2
 c01540c:	88c6d83a 	srl	r3,r17,r3
 c015410:	8904983a 	sll	r2,r17,r4
 c015414:	01000434 	movhi	r4,16
 c015418:	213fffc4 	addi	r4,r4,-1
 c01541c:	2941ffcc 	andi	r5,r5,2047
 c015420:	1906703a 	and	r3,r3,r4
 c015424:	800d883a 	mov	r6,r16
 c015428:	003fe906 	br	c0153d0 <__alt_data_end+0xfc0153d0>
 c01542c:	000d883a 	mov	r6,zero
 c015430:	000b883a 	mov	r5,zero
 c015434:	0007883a 	mov	r3,zero
 c015438:	0005883a 	mov	r2,zero
 c01543c:	003fe406 	br	c0153d0 <__alt_data_end+0xfc0153d0>
 c015440:	0123c83a 	sub	r17,zero,r4
 c015444:	003fd106 	br	c01538c <__alt_data_end+0xfc01538c>

0c015448 <__floatunsidf>:
 c015448:	defffe04 	addi	sp,sp,-8
 c01544c:	dc000015 	stw	r16,0(sp)
 c015450:	dfc00115 	stw	ra,4(sp)
 c015454:	2021883a 	mov	r16,r4
 c015458:	20002226 	beq	r4,zero,c0154e4 <__floatunsidf+0x9c>
 c01545c:	c0154f00 	call	c0154f0 <__clzsi2>
 c015460:	01010784 	movi	r4,1054
 c015464:	2089c83a 	sub	r4,r4,r2
 c015468:	01810cc4 	movi	r6,1075
 c01546c:	310dc83a 	sub	r6,r6,r4
 c015470:	00c007c4 	movi	r3,31
 c015474:	1980120e 	bge	r3,r6,c0154c0 <__floatunsidf+0x78>
 c015478:	00c104c4 	movi	r3,1043
 c01547c:	1907c83a 	sub	r3,r3,r4
 c015480:	80ca983a 	sll	r5,r16,r3
 c015484:	00800434 	movhi	r2,16
 c015488:	10bfffc4 	addi	r2,r2,-1
 c01548c:	2101ffcc 	andi	r4,r4,2047
 c015490:	0021883a 	mov	r16,zero
 c015494:	288a703a 	and	r5,r5,r2
 c015498:	2008953a 	slli	r4,r4,20
 c01549c:	00c00434 	movhi	r3,16
 c0154a0:	18ffffc4 	addi	r3,r3,-1
 c0154a4:	28c6703a 	and	r3,r5,r3
 c0154a8:	8005883a 	mov	r2,r16
 c0154ac:	1906b03a 	or	r3,r3,r4
 c0154b0:	dfc00117 	ldw	ra,4(sp)
 c0154b4:	dc000017 	ldw	r16,0(sp)
 c0154b8:	dec00204 	addi	sp,sp,8
 c0154bc:	f800283a 	ret
 c0154c0:	00c002c4 	movi	r3,11
 c0154c4:	188bc83a 	sub	r5,r3,r2
 c0154c8:	814ad83a 	srl	r5,r16,r5
 c0154cc:	00c00434 	movhi	r3,16
 c0154d0:	18ffffc4 	addi	r3,r3,-1
 c0154d4:	81a0983a 	sll	r16,r16,r6
 c0154d8:	2101ffcc 	andi	r4,r4,2047
 c0154dc:	28ca703a 	and	r5,r5,r3
 c0154e0:	003fed06 	br	c015498 <__alt_data_end+0xfc015498>
 c0154e4:	0009883a 	mov	r4,zero
 c0154e8:	000b883a 	mov	r5,zero
 c0154ec:	003fea06 	br	c015498 <__alt_data_end+0xfc015498>

0c0154f0 <__clzsi2>:
 c0154f0:	00bfffd4 	movui	r2,65535
 c0154f4:	11000536 	bltu	r2,r4,c01550c <__clzsi2+0x1c>
 c0154f8:	00803fc4 	movi	r2,255
 c0154fc:	11000f36 	bltu	r2,r4,c01553c <__clzsi2+0x4c>
 c015500:	00800804 	movi	r2,32
 c015504:	0007883a 	mov	r3,zero
 c015508:	00000506 	br	c015520 <__clzsi2+0x30>
 c01550c:	00804034 	movhi	r2,256
 c015510:	10bfffc4 	addi	r2,r2,-1
 c015514:	11000c2e 	bgeu	r2,r4,c015548 <__clzsi2+0x58>
 c015518:	00800204 	movi	r2,8
 c01551c:	00c00604 	movi	r3,24
 c015520:	20c8d83a 	srl	r4,r4,r3
 c015524:	00c300b4 	movhi	r3,3074
 c015528:	18e2ff04 	addi	r3,r3,-29700
 c01552c:	1909883a 	add	r4,r3,r4
 c015530:	20c00003 	ldbu	r3,0(r4)
 c015534:	10c5c83a 	sub	r2,r2,r3
 c015538:	f800283a 	ret
 c01553c:	00800604 	movi	r2,24
 c015540:	00c00204 	movi	r3,8
 c015544:	003ff606 	br	c015520 <__alt_data_end+0xfc015520>
 c015548:	00800404 	movi	r2,16
 c01554c:	1007883a 	mov	r3,r2
 c015550:	003ff306 	br	c015520 <__alt_data_end+0xfc015520>

0c015554 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c015554:	defffe04 	addi	sp,sp,-8
 c015558:	dfc00115 	stw	ra,4(sp)
 c01555c:	df000015 	stw	fp,0(sp)
 c015560:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c015564:	d0a01517 	ldw	r2,-32684(gp)
 c015568:	10000326 	beq	r2,zero,c015578 <alt_get_errno+0x24>
 c01556c:	d0a01517 	ldw	r2,-32684(gp)
 c015570:	103ee83a 	callr	r2
 c015574:	00000106 	br	c01557c <alt_get_errno+0x28>
 c015578:	d0a7b004 	addi	r2,gp,-24896
}
 c01557c:	e037883a 	mov	sp,fp
 c015580:	dfc00117 	ldw	ra,4(sp)
 c015584:	df000017 	ldw	fp,0(sp)
 c015588:	dec00204 	addi	sp,sp,8
 c01558c:	f800283a 	ret

0c015590 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 c015590:	defffb04 	addi	sp,sp,-20
 c015594:	dfc00415 	stw	ra,16(sp)
 c015598:	df000315 	stw	fp,12(sp)
 c01559c:	df000304 	addi	fp,sp,12
 c0155a0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 c0155a4:	e0bfff17 	ldw	r2,-4(fp)
 c0155a8:	10000816 	blt	r2,zero,c0155cc <close+0x3c>
 c0155ac:	01400304 	movi	r5,12
 c0155b0:	e13fff17 	ldw	r4,-4(fp)
 c0155b4:	c004c7c0 	call	c004c7c <__mulsi3>
 c0155b8:	1007883a 	mov	r3,r2
 c0155bc:	008300b4 	movhi	r2,3074
 c0155c0:	10a64304 	addi	r2,r2,-26356
 c0155c4:	1885883a 	add	r2,r3,r2
 c0155c8:	00000106 	br	c0155d0 <close+0x40>
 c0155cc:	0005883a 	mov	r2,zero
 c0155d0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 c0155d4:	e0bffd17 	ldw	r2,-12(fp)
 c0155d8:	10001926 	beq	r2,zero,c015640 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 c0155dc:	e0bffd17 	ldw	r2,-12(fp)
 c0155e0:	10800017 	ldw	r2,0(r2)
 c0155e4:	10800417 	ldw	r2,16(r2)
 c0155e8:	10000626 	beq	r2,zero,c015604 <close+0x74>
 c0155ec:	e0bffd17 	ldw	r2,-12(fp)
 c0155f0:	10800017 	ldw	r2,0(r2)
 c0155f4:	10800417 	ldw	r2,16(r2)
 c0155f8:	e13ffd17 	ldw	r4,-12(fp)
 c0155fc:	103ee83a 	callr	r2
 c015600:	00000106 	br	c015608 <close+0x78>
 c015604:	0005883a 	mov	r2,zero
 c015608:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 c01560c:	e13fff17 	ldw	r4,-4(fp)
 c015610:	c0160d40 	call	c0160d4 <alt_release_fd>
    if (rval < 0)
 c015614:	e0bffe17 	ldw	r2,-8(fp)
 c015618:	1000070e 	bge	r2,zero,c015638 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 c01561c:	c0155540 	call	c015554 <alt_get_errno>
 c015620:	1007883a 	mov	r3,r2
 c015624:	e0bffe17 	ldw	r2,-8(fp)
 c015628:	0085c83a 	sub	r2,zero,r2
 c01562c:	18800015 	stw	r2,0(r3)
      return -1;
 c015630:	00bfffc4 	movi	r2,-1
 c015634:	00000706 	br	c015654 <close+0xc4>
    }
    return 0;
 c015638:	0005883a 	mov	r2,zero
 c01563c:	00000506 	br	c015654 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 c015640:	c0155540 	call	c015554 <alt_get_errno>
 c015644:	1007883a 	mov	r3,r2
 c015648:	00801444 	movi	r2,81
 c01564c:	18800015 	stw	r2,0(r3)
    return -1;
 c015650:	00bfffc4 	movi	r2,-1
  }
}
 c015654:	e037883a 	mov	sp,fp
 c015658:	dfc00117 	ldw	ra,4(sp)
 c01565c:	df000017 	ldw	fp,0(sp)
 c015660:	dec00204 	addi	sp,sp,8
 c015664:	f800283a 	ret

0c015668 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 c015668:	defffc04 	addi	sp,sp,-16
 c01566c:	df000315 	stw	fp,12(sp)
 c015670:	df000304 	addi	fp,sp,12
 c015674:	e13ffd15 	stw	r4,-12(fp)
 c015678:	e17ffe15 	stw	r5,-8(fp)
 c01567c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 c015680:	e0bfff17 	ldw	r2,-4(fp)
}
 c015684:	e037883a 	mov	sp,fp
 c015688:	df000017 	ldw	fp,0(sp)
 c01568c:	dec00104 	addi	sp,sp,4
 c015690:	f800283a 	ret

0c015694 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c015694:	defffe04 	addi	sp,sp,-8
 c015698:	dfc00115 	stw	ra,4(sp)
 c01569c:	df000015 	stw	fp,0(sp)
 c0156a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c0156a4:	d0a01517 	ldw	r2,-32684(gp)
 c0156a8:	10000326 	beq	r2,zero,c0156b8 <alt_get_errno+0x24>
 c0156ac:	d0a01517 	ldw	r2,-32684(gp)
 c0156b0:	103ee83a 	callr	r2
 c0156b4:	00000106 	br	c0156bc <alt_get_errno+0x28>
 c0156b8:	d0a7b004 	addi	r2,gp,-24896
}
 c0156bc:	e037883a 	mov	sp,fp
 c0156c0:	dfc00117 	ldw	ra,4(sp)
 c0156c4:	df000017 	ldw	fp,0(sp)
 c0156c8:	dec00204 	addi	sp,sp,8
 c0156cc:	f800283a 	ret

0c0156d0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 c0156d0:	defffb04 	addi	sp,sp,-20
 c0156d4:	dfc00415 	stw	ra,16(sp)
 c0156d8:	df000315 	stw	fp,12(sp)
 c0156dc:	df000304 	addi	fp,sp,12
 c0156e0:	e13ffe15 	stw	r4,-8(fp)
 c0156e4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 c0156e8:	e0bffe17 	ldw	r2,-8(fp)
 c0156ec:	10000816 	blt	r2,zero,c015710 <fstat+0x40>
 c0156f0:	01400304 	movi	r5,12
 c0156f4:	e13ffe17 	ldw	r4,-8(fp)
 c0156f8:	c004c7c0 	call	c004c7c <__mulsi3>
 c0156fc:	1007883a 	mov	r3,r2
 c015700:	008300b4 	movhi	r2,3074
 c015704:	10a64304 	addi	r2,r2,-26356
 c015708:	1885883a 	add	r2,r3,r2
 c01570c:	00000106 	br	c015714 <fstat+0x44>
 c015710:	0005883a 	mov	r2,zero
 c015714:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 c015718:	e0bffd17 	ldw	r2,-12(fp)
 c01571c:	10001026 	beq	r2,zero,c015760 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 c015720:	e0bffd17 	ldw	r2,-12(fp)
 c015724:	10800017 	ldw	r2,0(r2)
 c015728:	10800817 	ldw	r2,32(r2)
 c01572c:	10000726 	beq	r2,zero,c01574c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 c015730:	e0bffd17 	ldw	r2,-12(fp)
 c015734:	10800017 	ldw	r2,0(r2)
 c015738:	10800817 	ldw	r2,32(r2)
 c01573c:	e17fff17 	ldw	r5,-4(fp)
 c015740:	e13ffd17 	ldw	r4,-12(fp)
 c015744:	103ee83a 	callr	r2
 c015748:	00000a06 	br	c015774 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 c01574c:	e0bfff17 	ldw	r2,-4(fp)
 c015750:	00c80004 	movi	r3,8192
 c015754:	10c00115 	stw	r3,4(r2)
      return 0;
 c015758:	0005883a 	mov	r2,zero
 c01575c:	00000506 	br	c015774 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 c015760:	c0156940 	call	c015694 <alt_get_errno>
 c015764:	1007883a 	mov	r3,r2
 c015768:	00801444 	movi	r2,81
 c01576c:	18800015 	stw	r2,0(r3)
    return -1;
 c015770:	00bfffc4 	movi	r2,-1
  }
}
 c015774:	e037883a 	mov	sp,fp
 c015778:	dfc00117 	ldw	ra,4(sp)
 c01577c:	df000017 	ldw	fp,0(sp)
 c015780:	dec00204 	addi	sp,sp,8
 c015784:	f800283a 	ret

0c015788 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
 c015788:	defff404 	addi	sp,sp,-48
 c01578c:	dfc00b15 	stw	ra,44(sp)
 c015790:	df000a15 	stw	fp,40(sp)
 c015794:	dd000915 	stw	r20,36(sp)
 c015798:	dcc00815 	stw	r19,32(sp)
 c01579c:	dc800715 	stw	r18,28(sp)
 c0157a0:	dc400615 	stw	r17,24(sp)
 c0157a4:	dc000515 	stw	r16,20(sp)
 c0157a8:	df000a04 	addi	fp,sp,40
 c0157ac:	e13ff915 	stw	r4,-28(fp)
 c0157b0:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
 c0157b4:	e0bffa17 	ldw	r2,-24(fp)
 c0157b8:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 c0157bc:	d0a7bc17 	ldw	r2,-24848(gp)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
 c0157c0:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 c0157c4:	d0a7bb17 	ldw	r2,-24852(gp)
  alt_u32 tick_rate = alt_ticks_per_second ();
 c0157c8:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
 c0157cc:	e0bff817 	ldw	r2,-32(fp)
 c0157d0:	10005f26 	beq	r2,zero,c015950 <gettimeofday+0x1c8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
 c0157d4:	d0a7b617 	ldw	r2,-24872(gp)
 c0157d8:	1029883a 	mov	r20,r2
 c0157dc:	e17ff817 	ldw	r5,-32(fp)
 c0157e0:	e13ff717 	ldw	r4,-36(fp)
 c0157e4:	c004bc00 	call	c004bc0 <__udivsi3>
 c0157e8:	a085883a 	add	r2,r20,r2
 c0157ec:	1007883a 	mov	r3,r2
 c0157f0:	e0bff917 	ldw	r2,-28(fp)
 c0157f4:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
 c0157f8:	d0a7b717 	ldw	r2,-24868(gp)
 c0157fc:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
 c015800:	e0bff717 	ldw	r2,-36(fp)
 c015804:	1021883a 	mov	r16,r2
 c015808:	0023883a 	mov	r17,zero
 c01580c:	e17ff817 	ldw	r5,-32(fp)
 c015810:	010003f4 	movhi	r4,15
 c015814:	21109004 	addi	r4,r4,16960
 c015818:	c004bc00 	call	c004bc0 <__udivsi3>
 c01581c:	1025883a 	mov	r18,r2
 c015820:	0027883a 	mov	r19,zero
 c015824:	900d883a 	mov	r6,r18
 c015828:	980f883a 	mov	r7,r19
 c01582c:	8009883a 	mov	r4,r16
 c015830:	880b883a 	mov	r5,r17
 c015834:	c011fe40 	call	c011fe4 <__muldi3>
 c015838:	1009883a 	mov	r4,r2
 c01583c:	180b883a 	mov	r5,r3
 c015840:	2005883a 	mov	r2,r4
 c015844:	2807883a 	mov	r3,r5
 c015848:	018003f4 	movhi	r6,15
 c01584c:	31909004 	addi	r6,r6,16960
 c015850:	000f883a 	mov	r7,zero
 c015854:	1009883a 	mov	r4,r2
 c015858:	180b883a 	mov	r5,r3
 c01585c:	c0126ec0 	call	c0126ec <__umoddi3>
 c015860:	1009883a 	mov	r4,r2
 c015864:	180b883a 	mov	r5,r3
 c015868:	2005883a 	mov	r2,r4
 c01586c:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
 c015870:	a085883a 	add	r2,r20,r2
 c015874:	1007883a 	mov	r3,r2
 c015878:	e0bff917 	ldw	r2,-28(fp)
 c01587c:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 c015880:	00001406 	br	c0158d4 <gettimeofday+0x14c>
      if (ptimeval->tv_sec <= 0)
 c015884:	e0bff917 	ldw	r2,-28(fp)
 c015888:	10800017 	ldw	r2,0(r2)
 c01588c:	00800516 	blt	zero,r2,c0158a4 <gettimeofday+0x11c>
      {
          ptimeval->tv_sec = 0;
 c015890:	e0bff917 	ldw	r2,-28(fp)
 c015894:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
 c015898:	e0bff917 	ldw	r2,-28(fp)
 c01589c:	10000115 	stw	zero,4(r2)
          break;
 c0158a0:	00000f06 	br	c0158e0 <gettimeofday+0x158>
      }
      else
      {
          ptimeval->tv_sec--;
 c0158a4:	e0bff917 	ldw	r2,-28(fp)
 c0158a8:	10800017 	ldw	r2,0(r2)
 c0158ac:	10ffffc4 	addi	r3,r2,-1
 c0158b0:	e0bff917 	ldw	r2,-28(fp)
 c0158b4:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
 c0158b8:	e0bff917 	ldw	r2,-28(fp)
 c0158bc:	10c00117 	ldw	r3,4(r2)
 c0158c0:	008003f4 	movhi	r2,15
 c0158c4:	10909004 	addi	r2,r2,16960
 c0158c8:	1887883a 	add	r3,r3,r2
 c0158cc:	e0bff917 	ldw	r2,-28(fp)
 c0158d0:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 c0158d4:	e0bff917 	ldw	r2,-28(fp)
 c0158d8:	10800117 	ldw	r2,4(r2)
 c0158dc:	103fe916 	blt	r2,zero,c015884 <__alt_data_end+0xfc015884>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 c0158e0:	00000c06 	br	c015914 <gettimeofday+0x18c>
      ptimeval->tv_sec++;
 c0158e4:	e0bff917 	ldw	r2,-28(fp)
 c0158e8:	10800017 	ldw	r2,0(r2)
 c0158ec:	10c00044 	addi	r3,r2,1
 c0158f0:	e0bff917 	ldw	r2,-28(fp)
 c0158f4:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
 c0158f8:	e0bff917 	ldw	r2,-28(fp)
 c0158fc:	10c00117 	ldw	r3,4(r2)
 c015900:	00bffc74 	movhi	r2,65521
 c015904:	10af7004 	addi	r2,r2,-16960
 c015908:	1887883a 	add	r3,r3,r2
 c01590c:	e0bff917 	ldw	r2,-28(fp)
 c015910:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 c015914:	e0bff917 	ldw	r2,-28(fp)
 c015918:	10c00117 	ldw	r3,4(r2)
 c01591c:	008003f4 	movhi	r2,15
 c015920:	10908fc4 	addi	r2,r2,16959
 c015924:	10ffef16 	blt	r2,r3,c0158e4 <__alt_data_end+0xfc0158e4>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
 c015928:	e0bff617 	ldw	r2,-40(fp)
 c01592c:	10000626 	beq	r2,zero,c015948 <gettimeofday+0x1c0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
 c015930:	d0e7b417 	ldw	r3,-24880(gp)
 c015934:	e0bff617 	ldw	r2,-40(fp)
 c015938:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
 c01593c:	d0e7b517 	ldw	r3,-24876(gp)
 c015940:	e0bff617 	ldw	r2,-40(fp)
 c015944:	10c00115 	stw	r3,4(r2)
    }

    return 0;
 c015948:	0005883a 	mov	r2,zero
 c01594c:	00000106 	br	c015954 <gettimeofday+0x1cc>
  }

  return -ENOTSUP;
 c015950:	00bfde84 	movi	r2,-134
}
 c015954:	e6fffb04 	addi	sp,fp,-20
 c015958:	dfc00617 	ldw	ra,24(sp)
 c01595c:	df000517 	ldw	fp,20(sp)
 c015960:	dd000417 	ldw	r20,16(sp)
 c015964:	dcc00317 	ldw	r19,12(sp)
 c015968:	dc800217 	ldw	r18,8(sp)
 c01596c:	dc400117 	ldw	r17,4(sp)
 c015970:	dc000017 	ldw	r16,0(sp)
 c015974:	dec00704 	addi	sp,sp,28
 c015978:	f800283a 	ret

0c01597c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c01597c:	defffe04 	addi	sp,sp,-8
 c015980:	dfc00115 	stw	ra,4(sp)
 c015984:	df000015 	stw	fp,0(sp)
 c015988:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c01598c:	d0a01517 	ldw	r2,-32684(gp)
 c015990:	10000326 	beq	r2,zero,c0159a0 <alt_get_errno+0x24>
 c015994:	d0a01517 	ldw	r2,-32684(gp)
 c015998:	103ee83a 	callr	r2
 c01599c:	00000106 	br	c0159a4 <alt_get_errno+0x28>
 c0159a0:	d0a7b004 	addi	r2,gp,-24896
}
 c0159a4:	e037883a 	mov	sp,fp
 c0159a8:	dfc00117 	ldw	ra,4(sp)
 c0159ac:	df000017 	ldw	fp,0(sp)
 c0159b0:	dec00204 	addi	sp,sp,8
 c0159b4:	f800283a 	ret

0c0159b8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 c0159b8:	deffed04 	addi	sp,sp,-76
 c0159bc:	dfc01215 	stw	ra,72(sp)
 c0159c0:	df001115 	stw	fp,68(sp)
 c0159c4:	df001104 	addi	fp,sp,68
 c0159c8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 c0159cc:	e0bfff17 	ldw	r2,-4(fp)
 c0159d0:	10000816 	blt	r2,zero,c0159f4 <isatty+0x3c>
 c0159d4:	01400304 	movi	r5,12
 c0159d8:	e13fff17 	ldw	r4,-4(fp)
 c0159dc:	c004c7c0 	call	c004c7c <__mulsi3>
 c0159e0:	1007883a 	mov	r3,r2
 c0159e4:	008300b4 	movhi	r2,3074
 c0159e8:	10a64304 	addi	r2,r2,-26356
 c0159ec:	1885883a 	add	r2,r3,r2
 c0159f0:	00000106 	br	c0159f8 <isatty+0x40>
 c0159f4:	0005883a 	mov	r2,zero
 c0159f8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 c0159fc:	e0bfef17 	ldw	r2,-68(fp)
 c015a00:	10000e26 	beq	r2,zero,c015a3c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 c015a04:	e0bfef17 	ldw	r2,-68(fp)
 c015a08:	10800017 	ldw	r2,0(r2)
 c015a0c:	10800817 	ldw	r2,32(r2)
 c015a10:	1000021e 	bne	r2,zero,c015a1c <isatty+0x64>
    {
      return 1;
 c015a14:	00800044 	movi	r2,1
 c015a18:	00000d06 	br	c015a50 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 c015a1c:	e0bff004 	addi	r2,fp,-64
 c015a20:	100b883a 	mov	r5,r2
 c015a24:	e13fff17 	ldw	r4,-4(fp)
 c015a28:	c0156d00 	call	c0156d0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 c015a2c:	e0bff117 	ldw	r2,-60(fp)
 c015a30:	10880020 	cmpeqi	r2,r2,8192
 c015a34:	10803fcc 	andi	r2,r2,255
 c015a38:	00000506 	br	c015a50 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 c015a3c:	c01597c0 	call	c01597c <alt_get_errno>
 c015a40:	1007883a 	mov	r3,r2
 c015a44:	00801444 	movi	r2,81
 c015a48:	18800015 	stw	r2,0(r3)
    return 0;
 c015a4c:	0005883a 	mov	r2,zero
  }
}
 c015a50:	e037883a 	mov	sp,fp
 c015a54:	dfc00117 	ldw	ra,4(sp)
 c015a58:	df000017 	ldw	fp,0(sp)
 c015a5c:	dec00204 	addi	sp,sp,8
 c015a60:	f800283a 	ret

0c015a64 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 c015a64:	defffc04 	addi	sp,sp,-16
 c015a68:	df000315 	stw	fp,12(sp)
 c015a6c:	df000304 	addi	fp,sp,12
 c015a70:	e13ffd15 	stw	r4,-12(fp)
 c015a74:	e17ffe15 	stw	r5,-8(fp)
 c015a78:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 c015a7c:	e0fffe17 	ldw	r3,-8(fp)
 c015a80:	e0bffd17 	ldw	r2,-12(fp)
 c015a84:	18800c26 	beq	r3,r2,c015ab8 <alt_load_section+0x54>
  {
    while( to != end )
 c015a88:	00000806 	br	c015aac <alt_load_section+0x48>
    {
      *to++ = *from++;
 c015a8c:	e0bffe17 	ldw	r2,-8(fp)
 c015a90:	10c00104 	addi	r3,r2,4
 c015a94:	e0fffe15 	stw	r3,-8(fp)
 c015a98:	e0fffd17 	ldw	r3,-12(fp)
 c015a9c:	19000104 	addi	r4,r3,4
 c015aa0:	e13ffd15 	stw	r4,-12(fp)
 c015aa4:	18c00017 	ldw	r3,0(r3)
 c015aa8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 c015aac:	e0fffe17 	ldw	r3,-8(fp)
 c015ab0:	e0bfff17 	ldw	r2,-4(fp)
 c015ab4:	18bff51e 	bne	r3,r2,c015a8c <__alt_data_end+0xfc015a8c>
    {
      *to++ = *from++;
    }
  }
}
 c015ab8:	0001883a 	nop
 c015abc:	e037883a 	mov	sp,fp
 c015ac0:	df000017 	ldw	fp,0(sp)
 c015ac4:	dec00104 	addi	sp,sp,4
 c015ac8:	f800283a 	ret

0c015acc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 c015acc:	defffe04 	addi	sp,sp,-8
 c015ad0:	dfc00115 	stw	ra,4(sp)
 c015ad4:	df000015 	stw	fp,0(sp)
 c015ad8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 c015adc:	018300b4 	movhi	r6,3074
 c015ae0:	31aad504 	addi	r6,r6,-21676
 c015ae4:	014300b4 	movhi	r5,3074
 c015ae8:	29634c04 	addi	r5,r5,-29392
 c015aec:	010300b4 	movhi	r4,3074
 c015af0:	212ad504 	addi	r4,r4,-21676
 c015af4:	c015a640 	call	c015a64 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 c015af8:	01830034 	movhi	r6,3072
 c015afc:	31808c04 	addi	r6,r6,560
 c015b00:	01430034 	movhi	r5,3072
 c015b04:	29400804 	addi	r5,r5,32
 c015b08:	01030034 	movhi	r4,3072
 c015b0c:	21000804 	addi	r4,r4,32
 c015b10:	c015a640 	call	c015a64 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 c015b14:	018300b4 	movhi	r6,3074
 c015b18:	31a34c04 	addi	r6,r6,-29392
 c015b1c:	014300b4 	movhi	r5,3074
 c015b20:	29619004 	addi	r5,r5,-31168
 c015b24:	010300b4 	movhi	r4,3074
 c015b28:	21219004 	addi	r4,r4,-31168
 c015b2c:	c015a640 	call	c015a64 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 c015b30:	c0175c40 	call	c0175c4 <alt_dcache_flush_all>
  alt_icache_flush_all();
 c015b34:	c0177840 	call	c017784 <alt_icache_flush_all>
}
 c015b38:	0001883a 	nop
 c015b3c:	e037883a 	mov	sp,fp
 c015b40:	dfc00117 	ldw	ra,4(sp)
 c015b44:	df000017 	ldw	fp,0(sp)
 c015b48:	dec00204 	addi	sp,sp,8
 c015b4c:	f800283a 	ret

0c015b50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c015b50:	defffe04 	addi	sp,sp,-8
 c015b54:	dfc00115 	stw	ra,4(sp)
 c015b58:	df000015 	stw	fp,0(sp)
 c015b5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c015b60:	d0a01517 	ldw	r2,-32684(gp)
 c015b64:	10000326 	beq	r2,zero,c015b74 <alt_get_errno+0x24>
 c015b68:	d0a01517 	ldw	r2,-32684(gp)
 c015b6c:	103ee83a 	callr	r2
 c015b70:	00000106 	br	c015b78 <alt_get_errno+0x28>
 c015b74:	d0a7b004 	addi	r2,gp,-24896
}
 c015b78:	e037883a 	mov	sp,fp
 c015b7c:	dfc00117 	ldw	ra,4(sp)
 c015b80:	df000017 	ldw	fp,0(sp)
 c015b84:	dec00204 	addi	sp,sp,8
 c015b88:	f800283a 	ret

0c015b8c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 c015b8c:	defff904 	addi	sp,sp,-28
 c015b90:	dfc00615 	stw	ra,24(sp)
 c015b94:	df000515 	stw	fp,20(sp)
 c015b98:	df000504 	addi	fp,sp,20
 c015b9c:	e13ffd15 	stw	r4,-12(fp)
 c015ba0:	e17ffe15 	stw	r5,-8(fp)
 c015ba4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 c015ba8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 c015bac:	e0bffd17 	ldw	r2,-12(fp)
 c015bb0:	10000816 	blt	r2,zero,c015bd4 <lseek+0x48>
 c015bb4:	01400304 	movi	r5,12
 c015bb8:	e13ffd17 	ldw	r4,-12(fp)
 c015bbc:	c004c7c0 	call	c004c7c <__mulsi3>
 c015bc0:	1007883a 	mov	r3,r2
 c015bc4:	008300b4 	movhi	r2,3074
 c015bc8:	10a64304 	addi	r2,r2,-26356
 c015bcc:	1885883a 	add	r2,r3,r2
 c015bd0:	00000106 	br	c015bd8 <lseek+0x4c>
 c015bd4:	0005883a 	mov	r2,zero
 c015bd8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 c015bdc:	e0bffc17 	ldw	r2,-16(fp)
 c015be0:	10001026 	beq	r2,zero,c015c24 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 c015be4:	e0bffc17 	ldw	r2,-16(fp)
 c015be8:	10800017 	ldw	r2,0(r2)
 c015bec:	10800717 	ldw	r2,28(r2)
 c015bf0:	10000926 	beq	r2,zero,c015c18 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 c015bf4:	e0bffc17 	ldw	r2,-16(fp)
 c015bf8:	10800017 	ldw	r2,0(r2)
 c015bfc:	10800717 	ldw	r2,28(r2)
 c015c00:	e1bfff17 	ldw	r6,-4(fp)
 c015c04:	e17ffe17 	ldw	r5,-8(fp)
 c015c08:	e13ffc17 	ldw	r4,-16(fp)
 c015c0c:	103ee83a 	callr	r2
 c015c10:	e0bffb15 	stw	r2,-20(fp)
 c015c14:	00000506 	br	c015c2c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 c015c18:	00bfde84 	movi	r2,-134
 c015c1c:	e0bffb15 	stw	r2,-20(fp)
 c015c20:	00000206 	br	c015c2c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 c015c24:	00bfebc4 	movi	r2,-81
 c015c28:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 c015c2c:	e0bffb17 	ldw	r2,-20(fp)
 c015c30:	1000070e 	bge	r2,zero,c015c50 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 c015c34:	c015b500 	call	c015b50 <alt_get_errno>
 c015c38:	1007883a 	mov	r3,r2
 c015c3c:	e0bffb17 	ldw	r2,-20(fp)
 c015c40:	0085c83a 	sub	r2,zero,r2
 c015c44:	18800015 	stw	r2,0(r3)
    rc = -1;
 c015c48:	00bfffc4 	movi	r2,-1
 c015c4c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 c015c50:	e0bffb17 	ldw	r2,-20(fp)
}
 c015c54:	e037883a 	mov	sp,fp
 c015c58:	dfc00117 	ldw	ra,4(sp)
 c015c5c:	df000017 	ldw	fp,0(sp)
 c015c60:	dec00204 	addi	sp,sp,8
 c015c64:	f800283a 	ret

0c015c68 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 c015c68:	defffd04 	addi	sp,sp,-12
 c015c6c:	dfc00215 	stw	ra,8(sp)
 c015c70:	df000115 	stw	fp,4(sp)
 c015c74:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 c015c78:	0009883a 	mov	r4,zero
 c015c7c:	c01654c0 	call	c01654c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 c015c80:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 c015c84:	c0165840 	call	c016584 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 c015c88:	018300b4 	movhi	r6,3074
 c015c8c:	31a34204 	addi	r6,r6,-29432
 c015c90:	014300b4 	movhi	r5,3074
 c015c94:	29634204 	addi	r5,r5,-29432
 c015c98:	010300b4 	movhi	r4,3074
 c015c9c:	21234204 	addi	r4,r4,-29432
 c015ca0:	c017b280 	call	c017b28 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 c015ca4:	c0176c40 	call	c0176c4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 c015ca8:	01030074 	movhi	r4,3073
 c015cac:	211dc904 	addi	r4,r4,30500
 c015cb0:	c0181440 	call	c018144 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 c015cb4:	d0a7b817 	ldw	r2,-24864(gp)
 c015cb8:	d0e7b917 	ldw	r3,-24860(gp)
 c015cbc:	d127ba17 	ldw	r4,-24856(gp)
 c015cc0:	200d883a 	mov	r6,r4
 c015cc4:	180b883a 	mov	r5,r3
 c015cc8:	1009883a 	mov	r4,r2
 c015ccc:	c00222c0 	call	c00222c <main>
 c015cd0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 c015cd4:	01000044 	movi	r4,1
 c015cd8:	c0155900 	call	c015590 <close>
  exit (result);
 c015cdc:	e13fff17 	ldw	r4,-4(fp)
 c015ce0:	c0181580 	call	c018158 <exit>

0c015ce4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 c015ce4:	defffe04 	addi	sp,sp,-8
 c015ce8:	df000115 	stw	fp,4(sp)
 c015cec:	df000104 	addi	fp,sp,4
 c015cf0:	e13fff15 	stw	r4,-4(fp)
}
 c015cf4:	0001883a 	nop
 c015cf8:	e037883a 	mov	sp,fp
 c015cfc:	df000017 	ldw	fp,0(sp)
 c015d00:	dec00104 	addi	sp,sp,4
 c015d04:	f800283a 	ret

0c015d08 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 c015d08:	defffe04 	addi	sp,sp,-8
 c015d0c:	df000115 	stw	fp,4(sp)
 c015d10:	df000104 	addi	fp,sp,4
 c015d14:	e13fff15 	stw	r4,-4(fp)
}
 c015d18:	0001883a 	nop
 c015d1c:	e037883a 	mov	sp,fp
 c015d20:	df000017 	ldw	fp,0(sp)
 c015d24:	dec00104 	addi	sp,sp,4
 c015d28:	f800283a 	ret

0c015d2c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 c015d2c:	defff204 	addi	sp,sp,-56
 c015d30:	dfc00a15 	stw	ra,40(sp)
 c015d34:	df000915 	stw	fp,36(sp)
 c015d38:	df000904 	addi	fp,sp,36
 c015d3c:	e13fff15 	stw	r4,-4(fp)
 c015d40:	e1400215 	stw	r5,8(fp)
 c015d44:	e1800315 	stw	r6,12(fp)
 c015d48:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
 c015d4c:	e0800204 	addi	r2,fp,8
 c015d50:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 c015d54:	e0bfff17 	ldw	r2,-4(fp)
 c015d58:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
 c015d5c:	00006f06 	br	c015f1c <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 c015d60:	e0bff807 	ldb	r2,-32(fp)
 c015d64:	10800960 	cmpeqi	r2,r2,37
 c015d68:	1000041e 	bne	r2,zero,c015d7c <alt_printf+0x50>
        {
            alt_putchar(c);
 c015d6c:	e0bff807 	ldb	r2,-32(fp)
 c015d70:	1009883a 	mov	r4,r2
 c015d74:	c015f580 	call	c015f58 <alt_putchar>
 c015d78:	00006806 	br	c015f1c <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 c015d7c:	e0bff717 	ldw	r2,-36(fp)
 c015d80:	10c00044 	addi	r3,r2,1
 c015d84:	e0fff715 	stw	r3,-36(fp)
 c015d88:	10800003 	ldbu	r2,0(r2)
 c015d8c:	e0bff805 	stb	r2,-32(fp)
 c015d90:	e0bff807 	ldb	r2,-32(fp)
 c015d94:	10006926 	beq	r2,zero,c015f3c <alt_printf+0x210>
            {
                if (c == '%')
 c015d98:	e0bff807 	ldb	r2,-32(fp)
 c015d9c:	10800958 	cmpnei	r2,r2,37
 c015da0:	1000041e 	bne	r2,zero,c015db4 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 c015da4:	e0bff807 	ldb	r2,-32(fp)
 c015da8:	1009883a 	mov	r4,r2
 c015dac:	c015f580 	call	c015f58 <alt_putchar>
 c015db0:	00005a06 	br	c015f1c <alt_printf+0x1f0>
                } 
                else if (c == 'c')
 c015db4:	e0bff807 	ldb	r2,-32(fp)
 c015db8:	108018d8 	cmpnei	r2,r2,99
 c015dbc:	1000081e 	bne	r2,zero,c015de0 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
 c015dc0:	e0bffe17 	ldw	r2,-8(fp)
 c015dc4:	10c00104 	addi	r3,r2,4
 c015dc8:	e0fffe15 	stw	r3,-8(fp)
 c015dcc:	10800017 	ldw	r2,0(r2)
 c015dd0:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
 c015dd4:	e13ffd17 	ldw	r4,-12(fp)
 c015dd8:	c015f580 	call	c015f58 <alt_putchar>
 c015ddc:	00004f06 	br	c015f1c <alt_printf+0x1f0>
                }
                else if (c == 'x')
 c015de0:	e0bff807 	ldb	r2,-32(fp)
 c015de4:	10801e18 	cmpnei	r2,r2,120
 c015de8:	1000341e 	bne	r2,zero,c015ebc <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 c015dec:	e0bffe17 	ldw	r2,-8(fp)
 c015df0:	10c00104 	addi	r3,r2,4
 c015df4:	e0fffe15 	stw	r3,-8(fp)
 c015df8:	10800017 	ldw	r2,0(r2)
 c015dfc:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 c015e00:	e0bffb17 	ldw	r2,-20(fp)
 c015e04:	1000031e 	bne	r2,zero,c015e14 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
 c015e08:	01000c04 	movi	r4,48
 c015e0c:	c015f580 	call	c015f58 <alt_putchar>
                        continue;
 c015e10:	00004206 	br	c015f1c <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 c015e14:	00800704 	movi	r2,28
 c015e18:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
 c015e1c:	00000306 	br	c015e2c <alt_printf+0x100>
                        digit_shift -= 4;
 c015e20:	e0bff917 	ldw	r2,-28(fp)
 c015e24:	10bfff04 	addi	r2,r2,-4
 c015e28:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 c015e2c:	00c003c4 	movi	r3,15
 c015e30:	e0bff917 	ldw	r2,-28(fp)
 c015e34:	1884983a 	sll	r2,r3,r2
 c015e38:	1007883a 	mov	r3,r2
 c015e3c:	e0bffb17 	ldw	r2,-20(fp)
 c015e40:	1884703a 	and	r2,r3,r2
 c015e44:	103ff626 	beq	r2,zero,c015e20 <__alt_data_end+0xfc015e20>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 c015e48:	00001906 	br	c015eb0 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 c015e4c:	00c003c4 	movi	r3,15
 c015e50:	e0bff917 	ldw	r2,-28(fp)
 c015e54:	1884983a 	sll	r2,r3,r2
 c015e58:	1007883a 	mov	r3,r2
 c015e5c:	e0bffb17 	ldw	r2,-20(fp)
 c015e60:	1886703a 	and	r3,r3,r2
 c015e64:	e0bff917 	ldw	r2,-28(fp)
 c015e68:	1884d83a 	srl	r2,r3,r2
 c015e6c:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
 c015e70:	e0bffc17 	ldw	r2,-16(fp)
 c015e74:	108002a8 	cmpgeui	r2,r2,10
 c015e78:	1000041e 	bne	r2,zero,c015e8c <alt_printf+0x160>
                            c = '0' + digit;
 c015e7c:	e0bffc17 	ldw	r2,-16(fp)
 c015e80:	10800c04 	addi	r2,r2,48
 c015e84:	e0bff805 	stb	r2,-32(fp)
 c015e88:	00000306 	br	c015e98 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
 c015e8c:	e0bffc17 	ldw	r2,-16(fp)
 c015e90:	108015c4 	addi	r2,r2,87
 c015e94:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
 c015e98:	e0bff807 	ldb	r2,-32(fp)
 c015e9c:	1009883a 	mov	r4,r2
 c015ea0:	c015f580 	call	c015f58 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 c015ea4:	e0bff917 	ldw	r2,-28(fp)
 c015ea8:	10bfff04 	addi	r2,r2,-4
 c015eac:	e0bff915 	stw	r2,-28(fp)
 c015eb0:	e0bff917 	ldw	r2,-28(fp)
 c015eb4:	103fe50e 	bge	r2,zero,c015e4c <__alt_data_end+0xfc015e4c>
 c015eb8:	00001806 	br	c015f1c <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 c015ebc:	e0bff807 	ldb	r2,-32(fp)
 c015ec0:	10801cd8 	cmpnei	r2,r2,115
 c015ec4:	1000151e 	bne	r2,zero,c015f1c <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 c015ec8:	e0bffe17 	ldw	r2,-8(fp)
 c015ecc:	10c00104 	addi	r3,r2,4
 c015ed0:	e0fffe15 	stw	r3,-8(fp)
 c015ed4:	10800017 	ldw	r2,0(r2)
 c015ed8:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
 c015edc:	00000906 	br	c015f04 <alt_printf+0x1d8>
                      alt_putchar(*s++);
 c015ee0:	e0bffa17 	ldw	r2,-24(fp)
 c015ee4:	10c00044 	addi	r3,r2,1
 c015ee8:	e0fffa15 	stw	r3,-24(fp)
 c015eec:	10800003 	ldbu	r2,0(r2)
 c015ef0:	10803fcc 	andi	r2,r2,255
 c015ef4:	1080201c 	xori	r2,r2,128
 c015ef8:	10bfe004 	addi	r2,r2,-128
 c015efc:	1009883a 	mov	r4,r2
 c015f00:	c015f580 	call	c015f58 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 c015f04:	e0bffa17 	ldw	r2,-24(fp)
 c015f08:	10800003 	ldbu	r2,0(r2)
 c015f0c:	10803fcc 	andi	r2,r2,255
 c015f10:	1080201c 	xori	r2,r2,128
 c015f14:	10bfe004 	addi	r2,r2,-128
 c015f18:	103ff11e 	bne	r2,zero,c015ee0 <__alt_data_end+0xfc015ee0>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 c015f1c:	e0bff717 	ldw	r2,-36(fp)
 c015f20:	10c00044 	addi	r3,r2,1
 c015f24:	e0fff715 	stw	r3,-36(fp)
 c015f28:	10800003 	ldbu	r2,0(r2)
 c015f2c:	e0bff805 	stb	r2,-32(fp)
 c015f30:	e0bff807 	ldb	r2,-32(fp)
 c015f34:	103f8a1e 	bne	r2,zero,c015d60 <__alt_data_end+0xfc015d60>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 c015f38:	00000106 	br	c015f40 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
 c015f3c:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 c015f40:	0001883a 	nop
 c015f44:	e037883a 	mov	sp,fp
 c015f48:	dfc00117 	ldw	ra,4(sp)
 c015f4c:	df000017 	ldw	fp,0(sp)
 c015f50:	dec00504 	addi	sp,sp,20
 c015f54:	f800283a 	ret

0c015f58 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 c015f58:	defffd04 	addi	sp,sp,-12
 c015f5c:	dfc00215 	stw	ra,8(sp)
 c015f60:	df000115 	stw	fp,4(sp)
 c015f64:	df000104 	addi	fp,sp,4
 c015f68:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 c015f6c:	d0a00d17 	ldw	r2,-32716(gp)
 c015f70:	10800217 	ldw	r2,8(r2)
 c015f74:	100b883a 	mov	r5,r2
 c015f78:	e13fff17 	ldw	r4,-4(fp)
 c015f7c:	c0182ac0 	call	c0182ac <putc>
#endif
#endif
}
 c015f80:	e037883a 	mov	sp,fp
 c015f84:	dfc00117 	ldw	ra,4(sp)
 c015f88:	df000017 	ldw	fp,0(sp)
 c015f8c:	dec00204 	addi	sp,sp,8
 c015f90:	f800283a 	ret

0c015f94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c015f94:	defffe04 	addi	sp,sp,-8
 c015f98:	dfc00115 	stw	ra,4(sp)
 c015f9c:	df000015 	stw	fp,0(sp)
 c015fa0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c015fa4:	d0a01517 	ldw	r2,-32684(gp)
 c015fa8:	10000326 	beq	r2,zero,c015fb8 <alt_get_errno+0x24>
 c015fac:	d0a01517 	ldw	r2,-32684(gp)
 c015fb0:	103ee83a 	callr	r2
 c015fb4:	00000106 	br	c015fbc <alt_get_errno+0x28>
 c015fb8:	d0a7b004 	addi	r2,gp,-24896
}
 c015fbc:	e037883a 	mov	sp,fp
 c015fc0:	dfc00117 	ldw	ra,4(sp)
 c015fc4:	df000017 	ldw	fp,0(sp)
 c015fc8:	dec00204 	addi	sp,sp,8
 c015fcc:	f800283a 	ret

0c015fd0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 c015fd0:	defff904 	addi	sp,sp,-28
 c015fd4:	dfc00615 	stw	ra,24(sp)
 c015fd8:	df000515 	stw	fp,20(sp)
 c015fdc:	df000504 	addi	fp,sp,20
 c015fe0:	e13ffd15 	stw	r4,-12(fp)
 c015fe4:	e17ffe15 	stw	r5,-8(fp)
 c015fe8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 c015fec:	e0bffd17 	ldw	r2,-12(fp)
 c015ff0:	10000816 	blt	r2,zero,c016014 <read+0x44>
 c015ff4:	01400304 	movi	r5,12
 c015ff8:	e13ffd17 	ldw	r4,-12(fp)
 c015ffc:	c004c7c0 	call	c004c7c <__mulsi3>
 c016000:	1007883a 	mov	r3,r2
 c016004:	008300b4 	movhi	r2,3074
 c016008:	10a64304 	addi	r2,r2,-26356
 c01600c:	1885883a 	add	r2,r3,r2
 c016010:	00000106 	br	c016018 <read+0x48>
 c016014:	0005883a 	mov	r2,zero
 c016018:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 c01601c:	e0bffb17 	ldw	r2,-20(fp)
 c016020:	10002226 	beq	r2,zero,c0160ac <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 c016024:	e0bffb17 	ldw	r2,-20(fp)
 c016028:	10800217 	ldw	r2,8(r2)
 c01602c:	108000cc 	andi	r2,r2,3
 c016030:	10800060 	cmpeqi	r2,r2,1
 c016034:	1000181e 	bne	r2,zero,c016098 <read+0xc8>
        (fd->dev->read))
 c016038:	e0bffb17 	ldw	r2,-20(fp)
 c01603c:	10800017 	ldw	r2,0(r2)
 c016040:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 c016044:	10001426 	beq	r2,zero,c016098 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 c016048:	e0bffb17 	ldw	r2,-20(fp)
 c01604c:	10800017 	ldw	r2,0(r2)
 c016050:	10800517 	ldw	r2,20(r2)
 c016054:	e0ffff17 	ldw	r3,-4(fp)
 c016058:	180d883a 	mov	r6,r3
 c01605c:	e17ffe17 	ldw	r5,-8(fp)
 c016060:	e13ffb17 	ldw	r4,-20(fp)
 c016064:	103ee83a 	callr	r2
 c016068:	e0bffc15 	stw	r2,-16(fp)
 c01606c:	e0bffc17 	ldw	r2,-16(fp)
 c016070:	1000070e 	bge	r2,zero,c016090 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 c016074:	c015f940 	call	c015f94 <alt_get_errno>
 c016078:	1007883a 	mov	r3,r2
 c01607c:	e0bffc17 	ldw	r2,-16(fp)
 c016080:	0085c83a 	sub	r2,zero,r2
 c016084:	18800015 	stw	r2,0(r3)
          return -1;
 c016088:	00bfffc4 	movi	r2,-1
 c01608c:	00000c06 	br	c0160c0 <read+0xf0>
        }
        return rval;
 c016090:	e0bffc17 	ldw	r2,-16(fp)
 c016094:	00000a06 	br	c0160c0 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 c016098:	c015f940 	call	c015f94 <alt_get_errno>
 c01609c:	1007883a 	mov	r3,r2
 c0160a0:	00800344 	movi	r2,13
 c0160a4:	18800015 	stw	r2,0(r3)
 c0160a8:	00000406 	br	c0160bc <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 c0160ac:	c015f940 	call	c015f94 <alt_get_errno>
 c0160b0:	1007883a 	mov	r3,r2
 c0160b4:	00801444 	movi	r2,81
 c0160b8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 c0160bc:	00bfffc4 	movi	r2,-1
}
 c0160c0:	e037883a 	mov	sp,fp
 c0160c4:	dfc00117 	ldw	ra,4(sp)
 c0160c8:	df000017 	ldw	fp,0(sp)
 c0160cc:	dec00204 	addi	sp,sp,8
 c0160d0:	f800283a 	ret

0c0160d4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 c0160d4:	defffc04 	addi	sp,sp,-16
 c0160d8:	dfc00315 	stw	ra,12(sp)
 c0160dc:	df000215 	stw	fp,8(sp)
 c0160e0:	dc000115 	stw	r16,4(sp)
 c0160e4:	df000204 	addi	fp,sp,8
 c0160e8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 c0160ec:	e0bffe17 	ldw	r2,-8(fp)
 c0160f0:	108000d0 	cmplti	r2,r2,3
 c0160f4:	1000111e 	bne	r2,zero,c01613c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 c0160f8:	040300b4 	movhi	r16,3074
 c0160fc:	84264304 	addi	r16,r16,-26356
 c016100:	e0bffe17 	ldw	r2,-8(fp)
 c016104:	01400304 	movi	r5,12
 c016108:	1009883a 	mov	r4,r2
 c01610c:	c004c7c0 	call	c004c7c <__mulsi3>
 c016110:	8085883a 	add	r2,r16,r2
 c016114:	10800204 	addi	r2,r2,8
 c016118:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 c01611c:	040300b4 	movhi	r16,3074
 c016120:	84264304 	addi	r16,r16,-26356
 c016124:	e0bffe17 	ldw	r2,-8(fp)
 c016128:	01400304 	movi	r5,12
 c01612c:	1009883a 	mov	r4,r2
 c016130:	c004c7c0 	call	c004c7c <__mulsi3>
 c016134:	8085883a 	add	r2,r16,r2
 c016138:	10000015 	stw	zero,0(r2)
  }
}
 c01613c:	0001883a 	nop
 c016140:	e6ffff04 	addi	sp,fp,-4
 c016144:	dfc00217 	ldw	ra,8(sp)
 c016148:	df000117 	ldw	fp,4(sp)
 c01614c:	dc000017 	ldw	r16,0(sp)
 c016150:	dec00304 	addi	sp,sp,12
 c016154:	f800283a 	ret

0c016158 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 c016158:	defff904 	addi	sp,sp,-28
 c01615c:	df000615 	stw	fp,24(sp)
 c016160:	df000604 	addi	fp,sp,24
 c016164:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c016168:	0005303a 	rdctl	r2,status
 c01616c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c016170:	e0fffe17 	ldw	r3,-8(fp)
 c016174:	00bfff84 	movi	r2,-2
 c016178:	1884703a 	and	r2,r3,r2
 c01617c:	1001703a 	wrctl	status,r2
  
  return context;
 c016180:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 c016184:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 c016188:	d0a01617 	ldw	r2,-32680(gp)
 c01618c:	10c000c4 	addi	r3,r2,3
 c016190:	00bfff04 	movi	r2,-4
 c016194:	1884703a 	and	r2,r3,r2
 c016198:	d0a01615 	stw	r2,-32680(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 c01619c:	d0e01617 	ldw	r3,-32680(gp)
 c0161a0:	e0bfff17 	ldw	r2,-4(fp)
 c0161a4:	1887883a 	add	r3,r3,r2
 c0161a8:	00840034 	movhi	r2,4096
 c0161ac:	10800004 	addi	r2,r2,0
 c0161b0:	10c0062e 	bgeu	r2,r3,c0161cc <sbrk+0x74>
 c0161b4:	e0bffb17 	ldw	r2,-20(fp)
 c0161b8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c0161bc:	e0bffa17 	ldw	r2,-24(fp)
 c0161c0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 c0161c4:	00bfffc4 	movi	r2,-1
 c0161c8:	00000b06 	br	c0161f8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 c0161cc:	d0a01617 	ldw	r2,-32680(gp)
 c0161d0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 c0161d4:	d0e01617 	ldw	r3,-32680(gp)
 c0161d8:	e0bfff17 	ldw	r2,-4(fp)
 c0161dc:	1885883a 	add	r2,r3,r2
 c0161e0:	d0a01615 	stw	r2,-32680(gp)
 c0161e4:	e0bffb17 	ldw	r2,-20(fp)
 c0161e8:	e0bffc15 	stw	r2,-16(fp)
 c0161ec:	e0bffc17 	ldw	r2,-16(fp)
 c0161f0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 c0161f4:	e0bffd17 	ldw	r2,-12(fp)
} 
 c0161f8:	e037883a 	mov	sp,fp
 c0161fc:	df000017 	ldw	fp,0(sp)
 c016200:	dec00104 	addi	sp,sp,4
 c016204:	f800283a 	ret

0c016208 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 c016208:	defffa04 	addi	sp,sp,-24
 c01620c:	df000515 	stw	fp,20(sp)
 c016210:	df000504 	addi	fp,sp,20
 c016214:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c016218:	0005303a 	rdctl	r2,status
 c01621c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c016220:	e0fffc17 	ldw	r3,-16(fp)
 c016224:	00bfff84 	movi	r2,-2
 c016228:	1884703a 	and	r2,r3,r2
 c01622c:	1001703a 	wrctl	status,r2
  
  return context;
 c016230:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 c016234:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 c016238:	e0bfff17 	ldw	r2,-4(fp)
 c01623c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 c016240:	e0bffd17 	ldw	r2,-12(fp)
 c016244:	10800017 	ldw	r2,0(r2)
 c016248:	e0fffd17 	ldw	r3,-12(fp)
 c01624c:	18c00117 	ldw	r3,4(r3)
 c016250:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 c016254:	e0bffd17 	ldw	r2,-12(fp)
 c016258:	10800117 	ldw	r2,4(r2)
 c01625c:	e0fffd17 	ldw	r3,-12(fp)
 c016260:	18c00017 	ldw	r3,0(r3)
 c016264:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 c016268:	e0bffd17 	ldw	r2,-12(fp)
 c01626c:	e0fffd17 	ldw	r3,-12(fp)
 c016270:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 c016274:	e0bffd17 	ldw	r2,-12(fp)
 c016278:	e0fffd17 	ldw	r3,-12(fp)
 c01627c:	10c00015 	stw	r3,0(r2)
 c016280:	e0bffb17 	ldw	r2,-20(fp)
 c016284:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c016288:	e0bffe17 	ldw	r2,-8(fp)
 c01628c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 c016290:	0001883a 	nop
 c016294:	e037883a 	mov	sp,fp
 c016298:	df000017 	ldw	fp,0(sp)
 c01629c:	dec00104 	addi	sp,sp,4
 c0162a0:	f800283a 	ret

0c0162a4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 c0162a4:	defffb04 	addi	sp,sp,-20
 c0162a8:	dfc00415 	stw	ra,16(sp)
 c0162ac:	df000315 	stw	fp,12(sp)
 c0162b0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 c0162b4:	d0a01717 	ldw	r2,-32676(gp)
 c0162b8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 c0162bc:	d0a7bc17 	ldw	r2,-24848(gp)
 c0162c0:	10800044 	addi	r2,r2,1
 c0162c4:	d0a7bc15 	stw	r2,-24848(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 c0162c8:	00002e06 	br	c016384 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 c0162cc:	e0bffd17 	ldw	r2,-12(fp)
 c0162d0:	10800017 	ldw	r2,0(r2)
 c0162d4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 c0162d8:	e0bffd17 	ldw	r2,-12(fp)
 c0162dc:	10800403 	ldbu	r2,16(r2)
 c0162e0:	10803fcc 	andi	r2,r2,255
 c0162e4:	10000426 	beq	r2,zero,c0162f8 <alt_tick+0x54>
 c0162e8:	d0a7bc17 	ldw	r2,-24848(gp)
 c0162ec:	1000021e 	bne	r2,zero,c0162f8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 c0162f0:	e0bffd17 	ldw	r2,-12(fp)
 c0162f4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 c0162f8:	e0bffd17 	ldw	r2,-12(fp)
 c0162fc:	10800217 	ldw	r2,8(r2)
 c016300:	d0e7bc17 	ldw	r3,-24848(gp)
 c016304:	18801d36 	bltu	r3,r2,c01637c <alt_tick+0xd8>
 c016308:	e0bffd17 	ldw	r2,-12(fp)
 c01630c:	10800403 	ldbu	r2,16(r2)
 c016310:	10803fcc 	andi	r2,r2,255
 c016314:	1000191e 	bne	r2,zero,c01637c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 c016318:	e0bffd17 	ldw	r2,-12(fp)
 c01631c:	10800317 	ldw	r2,12(r2)
 c016320:	e0fffd17 	ldw	r3,-12(fp)
 c016324:	18c00517 	ldw	r3,20(r3)
 c016328:	1809883a 	mov	r4,r3
 c01632c:	103ee83a 	callr	r2
 c016330:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 c016334:	e0bfff17 	ldw	r2,-4(fp)
 c016338:	1000031e 	bne	r2,zero,c016348 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 c01633c:	e13ffd17 	ldw	r4,-12(fp)
 c016340:	c0162080 	call	c016208 <alt_alarm_stop>
 c016344:	00000d06 	br	c01637c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 c016348:	e0bffd17 	ldw	r2,-12(fp)
 c01634c:	10c00217 	ldw	r3,8(r2)
 c016350:	e0bfff17 	ldw	r2,-4(fp)
 c016354:	1887883a 	add	r3,r3,r2
 c016358:	e0bffd17 	ldw	r2,-12(fp)
 c01635c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 c016360:	e0bffd17 	ldw	r2,-12(fp)
 c016364:	10c00217 	ldw	r3,8(r2)
 c016368:	d0a7bc17 	ldw	r2,-24848(gp)
 c01636c:	1880032e 	bgeu	r3,r2,c01637c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 c016370:	e0bffd17 	ldw	r2,-12(fp)
 c016374:	00c00044 	movi	r3,1
 c016378:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 c01637c:	e0bffe17 	ldw	r2,-8(fp)
 c016380:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 c016384:	e0fffd17 	ldw	r3,-12(fp)
 c016388:	d0a01704 	addi	r2,gp,-32676
 c01638c:	18bfcf1e 	bne	r3,r2,c0162cc <__alt_data_end+0xfc0162cc>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 c016390:	0001883a 	nop
}
 c016394:	0001883a 	nop
 c016398:	e037883a 	mov	sp,fp
 c01639c:	dfc00117 	ldw	ra,4(sp)
 c0163a0:	df000017 	ldw	fp,0(sp)
 c0163a4:	dec00204 	addi	sp,sp,8
 c0163a8:	f800283a 	ret

0c0163ac <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 c0163ac:	defffd04 	addi	sp,sp,-12
 c0163b0:	dfc00215 	stw	ra,8(sp)
 c0163b4:	df000115 	stw	fp,4(sp)
 c0163b8:	df000104 	addi	fp,sp,4
 c0163bc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 c0163c0:	e13fff17 	ldw	r4,-4(fp)
 c0163c4:	c01746c0 	call	c01746c <alt_busy_sleep>
}
 c0163c8:	e037883a 	mov	sp,fp
 c0163cc:	dfc00117 	ldw	ra,4(sp)
 c0163d0:	df000017 	ldw	fp,0(sp)
 c0163d4:	dec00204 	addi	sp,sp,8
 c0163d8:	f800283a 	ret

0c0163dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c0163dc:	defffe04 	addi	sp,sp,-8
 c0163e0:	dfc00115 	stw	ra,4(sp)
 c0163e4:	df000015 	stw	fp,0(sp)
 c0163e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c0163ec:	d0a01517 	ldw	r2,-32684(gp)
 c0163f0:	10000326 	beq	r2,zero,c016400 <alt_get_errno+0x24>
 c0163f4:	d0a01517 	ldw	r2,-32684(gp)
 c0163f8:	103ee83a 	callr	r2
 c0163fc:	00000106 	br	c016404 <alt_get_errno+0x28>
 c016400:	d0a7b004 	addi	r2,gp,-24896
}
 c016404:	e037883a 	mov	sp,fp
 c016408:	dfc00117 	ldw	ra,4(sp)
 c01640c:	df000017 	ldw	fp,0(sp)
 c016410:	dec00204 	addi	sp,sp,8
 c016414:	f800283a 	ret

0c016418 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 c016418:	defff904 	addi	sp,sp,-28
 c01641c:	dfc00615 	stw	ra,24(sp)
 c016420:	df000515 	stw	fp,20(sp)
 c016424:	df000504 	addi	fp,sp,20
 c016428:	e13ffd15 	stw	r4,-12(fp)
 c01642c:	e17ffe15 	stw	r5,-8(fp)
 c016430:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 c016434:	e0bffd17 	ldw	r2,-12(fp)
 c016438:	10000816 	blt	r2,zero,c01645c <write+0x44>
 c01643c:	01400304 	movi	r5,12
 c016440:	e13ffd17 	ldw	r4,-12(fp)
 c016444:	c004c7c0 	call	c004c7c <__mulsi3>
 c016448:	1007883a 	mov	r3,r2
 c01644c:	008300b4 	movhi	r2,3074
 c016450:	10a64304 	addi	r2,r2,-26356
 c016454:	1885883a 	add	r2,r3,r2
 c016458:	00000106 	br	c016460 <write+0x48>
 c01645c:	0005883a 	mov	r2,zero
 c016460:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 c016464:	e0bffb17 	ldw	r2,-20(fp)
 c016468:	10002126 	beq	r2,zero,c0164f0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 c01646c:	e0bffb17 	ldw	r2,-20(fp)
 c016470:	10800217 	ldw	r2,8(r2)
 c016474:	108000cc 	andi	r2,r2,3
 c016478:	10001826 	beq	r2,zero,c0164dc <write+0xc4>
 c01647c:	e0bffb17 	ldw	r2,-20(fp)
 c016480:	10800017 	ldw	r2,0(r2)
 c016484:	10800617 	ldw	r2,24(r2)
 c016488:	10001426 	beq	r2,zero,c0164dc <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 c01648c:	e0bffb17 	ldw	r2,-20(fp)
 c016490:	10800017 	ldw	r2,0(r2)
 c016494:	10800617 	ldw	r2,24(r2)
 c016498:	e0ffff17 	ldw	r3,-4(fp)
 c01649c:	180d883a 	mov	r6,r3
 c0164a0:	e17ffe17 	ldw	r5,-8(fp)
 c0164a4:	e13ffb17 	ldw	r4,-20(fp)
 c0164a8:	103ee83a 	callr	r2
 c0164ac:	e0bffc15 	stw	r2,-16(fp)
 c0164b0:	e0bffc17 	ldw	r2,-16(fp)
 c0164b4:	1000070e 	bge	r2,zero,c0164d4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 c0164b8:	c0163dc0 	call	c0163dc <alt_get_errno>
 c0164bc:	1007883a 	mov	r3,r2
 c0164c0:	e0bffc17 	ldw	r2,-16(fp)
 c0164c4:	0085c83a 	sub	r2,zero,r2
 c0164c8:	18800015 	stw	r2,0(r3)
        return -1;
 c0164cc:	00bfffc4 	movi	r2,-1
 c0164d0:	00000c06 	br	c016504 <write+0xec>
      }
      return rval;
 c0164d4:	e0bffc17 	ldw	r2,-16(fp)
 c0164d8:	00000a06 	br	c016504 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 c0164dc:	c0163dc0 	call	c0163dc <alt_get_errno>
 c0164e0:	1007883a 	mov	r3,r2
 c0164e4:	00800344 	movi	r2,13
 c0164e8:	18800015 	stw	r2,0(r3)
 c0164ec:	00000406 	br	c016500 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 c0164f0:	c0163dc0 	call	c0163dc <alt_get_errno>
 c0164f4:	1007883a 	mov	r3,r2
 c0164f8:	00801444 	movi	r2,81
 c0164fc:	18800015 	stw	r2,0(r3)
  }
  return -1;
 c016500:	00bfffc4 	movi	r2,-1
}
 c016504:	e037883a 	mov	sp,fp
 c016508:	dfc00117 	ldw	ra,4(sp)
 c01650c:	df000017 	ldw	fp,0(sp)
 c016510:	dec00204 	addi	sp,sp,8
 c016514:	f800283a 	ret

0c016518 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 c016518:	defffd04 	addi	sp,sp,-12
 c01651c:	dfc00215 	stw	ra,8(sp)
 c016520:	df000115 	stw	fp,4(sp)
 c016524:	df000104 	addi	fp,sp,4
 c016528:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 c01652c:	d1601204 	addi	r5,gp,-32696
 c016530:	e13fff17 	ldw	r4,-4(fp)
 c016534:	c0176200 	call	c017620 <alt_dev_llist_insert>
}
 c016538:	e037883a 	mov	sp,fp
 c01653c:	dfc00117 	ldw	ra,4(sp)
 c016540:	df000017 	ldw	fp,0(sp)
 c016544:	dec00204 	addi	sp,sp,8
 c016548:	f800283a 	ret

0c01654c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 c01654c:	defffd04 	addi	sp,sp,-12
 c016550:	dfc00215 	stw	ra,8(sp)
 c016554:	df000115 	stw	fp,4(sp)
 c016558:	df000104 	addi	fp,sp,4
 c01655c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 c016560:	c017e280 	call	c017e28 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 c016564:	00800044 	movi	r2,1
 c016568:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 c01656c:	0001883a 	nop
 c016570:	e037883a 	mov	sp,fp
 c016574:	dfc00117 	ldw	ra,4(sp)
 c016578:	df000017 	ldw	fp,0(sp)
 c01657c:	dec00204 	addi	sp,sp,8
 c016580:	f800283a 	ret

0c016584 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 c016584:	defffe04 	addi	sp,sp,-8
 c016588:	dfc00115 	stw	ra,4(sp)
 c01658c:	df000015 	stw	fp,0(sp)
 c016590:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 c016594:	01c0fa04 	movi	r7,1000
 c016598:	01800084 	movi	r6,2
 c01659c:	000b883a 	mov	r5,zero
 c0165a0:	01002004 	movi	r4,128
 c0165a4:	c0172c40 	call	c0172c4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 c0165a8:	01800044 	movi	r6,1
 c0165ac:	000b883a 	mov	r5,zero
 c0165b0:	010300b4 	movhi	r4,3074
 c0165b4:	2126ad04 	addi	r4,r4,-25932
 c0165b8:	c01674c0 	call	c01674c <altera_avalon_jtag_uart_init>
 c0165bc:	010300b4 	movhi	r4,3074
 c0165c0:	2126a304 	addi	r4,r4,-25972
 c0165c4:	c0165180 	call	c016518 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 c0165c8:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 c0165cc:	0001883a 	nop
}
 c0165d0:	0001883a 	nop
 c0165d4:	e037883a 	mov	sp,fp
 c0165d8:	dfc00117 	ldw	ra,4(sp)
 c0165dc:	df000017 	ldw	fp,0(sp)
 c0165e0:	dec00204 	addi	sp,sp,8
 c0165e4:	f800283a 	ret

0c0165e8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 c0165e8:	defffa04 	addi	sp,sp,-24
 c0165ec:	dfc00515 	stw	ra,20(sp)
 c0165f0:	df000415 	stw	fp,16(sp)
 c0165f4:	df000404 	addi	fp,sp,16
 c0165f8:	e13ffd15 	stw	r4,-12(fp)
 c0165fc:	e17ffe15 	stw	r5,-8(fp)
 c016600:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 c016604:	e0bffd17 	ldw	r2,-12(fp)
 c016608:	10800017 	ldw	r2,0(r2)
 c01660c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 c016610:	e0bffc17 	ldw	r2,-16(fp)
 c016614:	10c00a04 	addi	r3,r2,40
 c016618:	e0bffd17 	ldw	r2,-12(fp)
 c01661c:	10800217 	ldw	r2,8(r2)
 c016620:	100f883a 	mov	r7,r2
 c016624:	e1bfff17 	ldw	r6,-4(fp)
 c016628:	e17ffe17 	ldw	r5,-8(fp)
 c01662c:	1809883a 	mov	r4,r3
 c016630:	c016c100 	call	c016c10 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 c016634:	e037883a 	mov	sp,fp
 c016638:	dfc00117 	ldw	ra,4(sp)
 c01663c:	df000017 	ldw	fp,0(sp)
 c016640:	dec00204 	addi	sp,sp,8
 c016644:	f800283a 	ret

0c016648 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 c016648:	defffa04 	addi	sp,sp,-24
 c01664c:	dfc00515 	stw	ra,20(sp)
 c016650:	df000415 	stw	fp,16(sp)
 c016654:	df000404 	addi	fp,sp,16
 c016658:	e13ffd15 	stw	r4,-12(fp)
 c01665c:	e17ffe15 	stw	r5,-8(fp)
 c016660:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 c016664:	e0bffd17 	ldw	r2,-12(fp)
 c016668:	10800017 	ldw	r2,0(r2)
 c01666c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 c016670:	e0bffc17 	ldw	r2,-16(fp)
 c016674:	10c00a04 	addi	r3,r2,40
 c016678:	e0bffd17 	ldw	r2,-12(fp)
 c01667c:	10800217 	ldw	r2,8(r2)
 c016680:	100f883a 	mov	r7,r2
 c016684:	e1bfff17 	ldw	r6,-4(fp)
 c016688:	e17ffe17 	ldw	r5,-8(fp)
 c01668c:	1809883a 	mov	r4,r3
 c016690:	c016e2c0 	call	c016e2c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 c016694:	e037883a 	mov	sp,fp
 c016698:	dfc00117 	ldw	ra,4(sp)
 c01669c:	df000017 	ldw	fp,0(sp)
 c0166a0:	dec00204 	addi	sp,sp,8
 c0166a4:	f800283a 	ret

0c0166a8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 c0166a8:	defffc04 	addi	sp,sp,-16
 c0166ac:	dfc00315 	stw	ra,12(sp)
 c0166b0:	df000215 	stw	fp,8(sp)
 c0166b4:	df000204 	addi	fp,sp,8
 c0166b8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 c0166bc:	e0bfff17 	ldw	r2,-4(fp)
 c0166c0:	10800017 	ldw	r2,0(r2)
 c0166c4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 c0166c8:	e0bffe17 	ldw	r2,-8(fp)
 c0166cc:	10c00a04 	addi	r3,r2,40
 c0166d0:	e0bfff17 	ldw	r2,-4(fp)
 c0166d4:	10800217 	ldw	r2,8(r2)
 c0166d8:	100b883a 	mov	r5,r2
 c0166dc:	1809883a 	mov	r4,r3
 c0166e0:	c016ab80 	call	c016ab8 <altera_avalon_jtag_uart_close>
}
 c0166e4:	e037883a 	mov	sp,fp
 c0166e8:	dfc00117 	ldw	ra,4(sp)
 c0166ec:	df000017 	ldw	fp,0(sp)
 c0166f0:	dec00204 	addi	sp,sp,8
 c0166f4:	f800283a 	ret

0c0166f8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 c0166f8:	defffa04 	addi	sp,sp,-24
 c0166fc:	dfc00515 	stw	ra,20(sp)
 c016700:	df000415 	stw	fp,16(sp)
 c016704:	df000404 	addi	fp,sp,16
 c016708:	e13ffd15 	stw	r4,-12(fp)
 c01670c:	e17ffe15 	stw	r5,-8(fp)
 c016710:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 c016714:	e0bffd17 	ldw	r2,-12(fp)
 c016718:	10800017 	ldw	r2,0(r2)
 c01671c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 c016720:	e0bffc17 	ldw	r2,-16(fp)
 c016724:	10800a04 	addi	r2,r2,40
 c016728:	e1bfff17 	ldw	r6,-4(fp)
 c01672c:	e17ffe17 	ldw	r5,-8(fp)
 c016730:	1009883a 	mov	r4,r2
 c016734:	c016b200 	call	c016b20 <altera_avalon_jtag_uart_ioctl>
}
 c016738:	e037883a 	mov	sp,fp
 c01673c:	dfc00117 	ldw	ra,4(sp)
 c016740:	df000017 	ldw	fp,0(sp)
 c016744:	dec00204 	addi	sp,sp,8
 c016748:	f800283a 	ret

0c01674c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 c01674c:	defffa04 	addi	sp,sp,-24
 c016750:	dfc00515 	stw	ra,20(sp)
 c016754:	df000415 	stw	fp,16(sp)
 c016758:	df000404 	addi	fp,sp,16
 c01675c:	e13ffd15 	stw	r4,-12(fp)
 c016760:	e17ffe15 	stw	r5,-8(fp)
 c016764:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 c016768:	e0bffd17 	ldw	r2,-12(fp)
 c01676c:	00c00044 	movi	r3,1
 c016770:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 c016774:	e0bffd17 	ldw	r2,-12(fp)
 c016778:	10800017 	ldw	r2,0(r2)
 c01677c:	10800104 	addi	r2,r2,4
 c016780:	1007883a 	mov	r3,r2
 c016784:	e0bffd17 	ldw	r2,-12(fp)
 c016788:	10800817 	ldw	r2,32(r2)
 c01678c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 c016790:	e0bffe17 	ldw	r2,-8(fp)
 c016794:	e0ffff17 	ldw	r3,-4(fp)
 c016798:	d8000015 	stw	zero,0(sp)
 c01679c:	e1fffd17 	ldw	r7,-12(fp)
 c0167a0:	01830074 	movhi	r6,3073
 c0167a4:	319a0304 	addi	r6,r6,26636
 c0167a8:	180b883a 	mov	r5,r3
 c0167ac:	1009883a 	mov	r4,r2
 c0167b0:	c0177a40 	call	c0177a4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 c0167b4:	e0bffd17 	ldw	r2,-12(fp)
 c0167b8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 c0167bc:	e0bffd17 	ldw	r2,-12(fp)
 c0167c0:	10800204 	addi	r2,r2,8
 c0167c4:	d0e7bb17 	ldw	r3,-24852(gp)
 c0167c8:	e1fffd17 	ldw	r7,-12(fp)
 c0167cc:	01830074 	movhi	r6,3073
 c0167d0:	319a8604 	addi	r6,r6,27160
 c0167d4:	180b883a 	mov	r5,r3
 c0167d8:	1009883a 	mov	r4,r2
 c0167dc:	c0173400 	call	c017340 <alt_alarm_start>
 c0167e0:	1000040e 	bge	r2,zero,c0167f4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 c0167e4:	e0fffd17 	ldw	r3,-12(fp)
 c0167e8:	00a00034 	movhi	r2,32768
 c0167ec:	10bfffc4 	addi	r2,r2,-1
 c0167f0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 c0167f4:	0001883a 	nop
 c0167f8:	e037883a 	mov	sp,fp
 c0167fc:	dfc00117 	ldw	ra,4(sp)
 c016800:	df000017 	ldw	fp,0(sp)
 c016804:	dec00204 	addi	sp,sp,8
 c016808:	f800283a 	ret

0c01680c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 c01680c:	defff804 	addi	sp,sp,-32
 c016810:	df000715 	stw	fp,28(sp)
 c016814:	df000704 	addi	fp,sp,28
 c016818:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 c01681c:	e0bfff17 	ldw	r2,-4(fp)
 c016820:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 c016824:	e0bffb17 	ldw	r2,-20(fp)
 c016828:	10800017 	ldw	r2,0(r2)
 c01682c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 c016830:	e0bffc17 	ldw	r2,-16(fp)
 c016834:	10800104 	addi	r2,r2,4
 c016838:	10800037 	ldwio	r2,0(r2)
 c01683c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 c016840:	e0bffd17 	ldw	r2,-12(fp)
 c016844:	1080c00c 	andi	r2,r2,768
 c016848:	10006d26 	beq	r2,zero,c016a00 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 c01684c:	e0bffd17 	ldw	r2,-12(fp)
 c016850:	1080400c 	andi	r2,r2,256
 c016854:	10003526 	beq	r2,zero,c01692c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 c016858:	00800074 	movhi	r2,1
 c01685c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c016860:	e0bffb17 	ldw	r2,-20(fp)
 c016864:	10800a17 	ldw	r2,40(r2)
 c016868:	10800044 	addi	r2,r2,1
 c01686c:	1081ffcc 	andi	r2,r2,2047
 c016870:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 c016874:	e0bffb17 	ldw	r2,-20(fp)
 c016878:	10c00b17 	ldw	r3,44(r2)
 c01687c:	e0bffe17 	ldw	r2,-8(fp)
 c016880:	18801526 	beq	r3,r2,c0168d8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 c016884:	e0bffc17 	ldw	r2,-16(fp)
 c016888:	10800037 	ldwio	r2,0(r2)
 c01688c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 c016890:	e0bff917 	ldw	r2,-28(fp)
 c016894:	10a0000c 	andi	r2,r2,32768
 c016898:	10001126 	beq	r2,zero,c0168e0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 c01689c:	e0bffb17 	ldw	r2,-20(fp)
 c0168a0:	10800a17 	ldw	r2,40(r2)
 c0168a4:	e0fff917 	ldw	r3,-28(fp)
 c0168a8:	1809883a 	mov	r4,r3
 c0168ac:	e0fffb17 	ldw	r3,-20(fp)
 c0168b0:	1885883a 	add	r2,r3,r2
 c0168b4:	10800e04 	addi	r2,r2,56
 c0168b8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c0168bc:	e0bffb17 	ldw	r2,-20(fp)
 c0168c0:	10800a17 	ldw	r2,40(r2)
 c0168c4:	10800044 	addi	r2,r2,1
 c0168c8:	10c1ffcc 	andi	r3,r2,2047
 c0168cc:	e0bffb17 	ldw	r2,-20(fp)
 c0168d0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 c0168d4:	003fe206 	br	c016860 <__alt_data_end+0xfc016860>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 c0168d8:	0001883a 	nop
 c0168dc:	00000106 	br	c0168e4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 c0168e0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 c0168e4:	e0bff917 	ldw	r2,-28(fp)
 c0168e8:	10bfffec 	andhi	r2,r2,65535
 c0168ec:	10000f26 	beq	r2,zero,c01692c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 c0168f0:	e0bffb17 	ldw	r2,-20(fp)
 c0168f4:	10c00817 	ldw	r3,32(r2)
 c0168f8:	00bfff84 	movi	r2,-2
 c0168fc:	1886703a 	and	r3,r3,r2
 c016900:	e0bffb17 	ldw	r2,-20(fp)
 c016904:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 c016908:	e0bffc17 	ldw	r2,-16(fp)
 c01690c:	10800104 	addi	r2,r2,4
 c016910:	1007883a 	mov	r3,r2
 c016914:	e0bffb17 	ldw	r2,-20(fp)
 c016918:	10800817 	ldw	r2,32(r2)
 c01691c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 c016920:	e0bffc17 	ldw	r2,-16(fp)
 c016924:	10800104 	addi	r2,r2,4
 c016928:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 c01692c:	e0bffd17 	ldw	r2,-12(fp)
 c016930:	1080800c 	andi	r2,r2,512
 c016934:	103fbe26 	beq	r2,zero,c016830 <__alt_data_end+0xfc016830>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 c016938:	e0bffd17 	ldw	r2,-12(fp)
 c01693c:	1004d43a 	srli	r2,r2,16
 c016940:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 c016944:	00001406 	br	c016998 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 c016948:	e0bffc17 	ldw	r2,-16(fp)
 c01694c:	e0fffb17 	ldw	r3,-20(fp)
 c016950:	18c00d17 	ldw	r3,52(r3)
 c016954:	e13ffb17 	ldw	r4,-20(fp)
 c016958:	20c7883a 	add	r3,r4,r3
 c01695c:	18c20e04 	addi	r3,r3,2104
 c016960:	18c00003 	ldbu	r3,0(r3)
 c016964:	18c03fcc 	andi	r3,r3,255
 c016968:	18c0201c 	xori	r3,r3,128
 c01696c:	18ffe004 	addi	r3,r3,-128
 c016970:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c016974:	e0bffb17 	ldw	r2,-20(fp)
 c016978:	10800d17 	ldw	r2,52(r2)
 c01697c:	10800044 	addi	r2,r2,1
 c016980:	10c1ffcc 	andi	r3,r2,2047
 c016984:	e0bffb17 	ldw	r2,-20(fp)
 c016988:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 c01698c:	e0bffa17 	ldw	r2,-24(fp)
 c016990:	10bfffc4 	addi	r2,r2,-1
 c016994:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 c016998:	e0bffa17 	ldw	r2,-24(fp)
 c01699c:	10000526 	beq	r2,zero,c0169b4 <altera_avalon_jtag_uart_irq+0x1a8>
 c0169a0:	e0bffb17 	ldw	r2,-20(fp)
 c0169a4:	10c00d17 	ldw	r3,52(r2)
 c0169a8:	e0bffb17 	ldw	r2,-20(fp)
 c0169ac:	10800c17 	ldw	r2,48(r2)
 c0169b0:	18bfe51e 	bne	r3,r2,c016948 <__alt_data_end+0xfc016948>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 c0169b4:	e0bffa17 	ldw	r2,-24(fp)
 c0169b8:	103f9d26 	beq	r2,zero,c016830 <__alt_data_end+0xfc016830>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 c0169bc:	e0bffb17 	ldw	r2,-20(fp)
 c0169c0:	10c00817 	ldw	r3,32(r2)
 c0169c4:	00bfff44 	movi	r2,-3
 c0169c8:	1886703a 	and	r3,r3,r2
 c0169cc:	e0bffb17 	ldw	r2,-20(fp)
 c0169d0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 c0169d4:	e0bffb17 	ldw	r2,-20(fp)
 c0169d8:	10800017 	ldw	r2,0(r2)
 c0169dc:	10800104 	addi	r2,r2,4
 c0169e0:	1007883a 	mov	r3,r2
 c0169e4:	e0bffb17 	ldw	r2,-20(fp)
 c0169e8:	10800817 	ldw	r2,32(r2)
 c0169ec:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 c0169f0:	e0bffc17 	ldw	r2,-16(fp)
 c0169f4:	10800104 	addi	r2,r2,4
 c0169f8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 c0169fc:	003f8c06 	br	c016830 <__alt_data_end+0xfc016830>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 c016a00:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 c016a04:	0001883a 	nop
 c016a08:	e037883a 	mov	sp,fp
 c016a0c:	df000017 	ldw	fp,0(sp)
 c016a10:	dec00104 	addi	sp,sp,4
 c016a14:	f800283a 	ret

0c016a18 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 c016a18:	defff804 	addi	sp,sp,-32
 c016a1c:	df000715 	stw	fp,28(sp)
 c016a20:	df000704 	addi	fp,sp,28
 c016a24:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 c016a28:	e0bffb17 	ldw	r2,-20(fp)
 c016a2c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 c016a30:	e0bff917 	ldw	r2,-28(fp)
 c016a34:	10800017 	ldw	r2,0(r2)
 c016a38:	10800104 	addi	r2,r2,4
 c016a3c:	10800037 	ldwio	r2,0(r2)
 c016a40:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 c016a44:	e0bffa17 	ldw	r2,-24(fp)
 c016a48:	1081000c 	andi	r2,r2,1024
 c016a4c:	10000b26 	beq	r2,zero,c016a7c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 c016a50:	e0bff917 	ldw	r2,-28(fp)
 c016a54:	10800017 	ldw	r2,0(r2)
 c016a58:	10800104 	addi	r2,r2,4
 c016a5c:	1007883a 	mov	r3,r2
 c016a60:	e0bff917 	ldw	r2,-28(fp)
 c016a64:	10800817 	ldw	r2,32(r2)
 c016a68:	10810014 	ori	r2,r2,1024
 c016a6c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 c016a70:	e0bff917 	ldw	r2,-28(fp)
 c016a74:	10000915 	stw	zero,36(r2)
 c016a78:	00000a06 	br	c016aa4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 c016a7c:	e0bff917 	ldw	r2,-28(fp)
 c016a80:	10c00917 	ldw	r3,36(r2)
 c016a84:	00a00034 	movhi	r2,32768
 c016a88:	10bfff04 	addi	r2,r2,-4
 c016a8c:	10c00536 	bltu	r2,r3,c016aa4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 c016a90:	e0bff917 	ldw	r2,-28(fp)
 c016a94:	10800917 	ldw	r2,36(r2)
 c016a98:	10c00044 	addi	r3,r2,1
 c016a9c:	e0bff917 	ldw	r2,-28(fp)
 c016aa0:	10c00915 	stw	r3,36(r2)
 c016aa4:	d0a7bb17 	ldw	r2,-24852(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 c016aa8:	e037883a 	mov	sp,fp
 c016aac:	df000017 	ldw	fp,0(sp)
 c016ab0:	dec00104 	addi	sp,sp,4
 c016ab4:	f800283a 	ret

0c016ab8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 c016ab8:	defffd04 	addi	sp,sp,-12
 c016abc:	df000215 	stw	fp,8(sp)
 c016ac0:	df000204 	addi	fp,sp,8
 c016ac4:	e13ffe15 	stw	r4,-8(fp)
 c016ac8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 c016acc:	00000506 	br	c016ae4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 c016ad0:	e0bfff17 	ldw	r2,-4(fp)
 c016ad4:	1090000c 	andi	r2,r2,16384
 c016ad8:	10000226 	beq	r2,zero,c016ae4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 c016adc:	00bffd44 	movi	r2,-11
 c016ae0:	00000b06 	br	c016b10 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 c016ae4:	e0bffe17 	ldw	r2,-8(fp)
 c016ae8:	10c00d17 	ldw	r3,52(r2)
 c016aec:	e0bffe17 	ldw	r2,-8(fp)
 c016af0:	10800c17 	ldw	r2,48(r2)
 c016af4:	18800526 	beq	r3,r2,c016b0c <altera_avalon_jtag_uart_close+0x54>
 c016af8:	e0bffe17 	ldw	r2,-8(fp)
 c016afc:	10c00917 	ldw	r3,36(r2)
 c016b00:	e0bffe17 	ldw	r2,-8(fp)
 c016b04:	10800117 	ldw	r2,4(r2)
 c016b08:	18bff136 	bltu	r3,r2,c016ad0 <__alt_data_end+0xfc016ad0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 c016b0c:	0005883a 	mov	r2,zero
}
 c016b10:	e037883a 	mov	sp,fp
 c016b14:	df000017 	ldw	fp,0(sp)
 c016b18:	dec00104 	addi	sp,sp,4
 c016b1c:	f800283a 	ret

0c016b20 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 c016b20:	defffa04 	addi	sp,sp,-24
 c016b24:	df000515 	stw	fp,20(sp)
 c016b28:	df000504 	addi	fp,sp,20
 c016b2c:	e13ffd15 	stw	r4,-12(fp)
 c016b30:	e17ffe15 	stw	r5,-8(fp)
 c016b34:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 c016b38:	00bff9c4 	movi	r2,-25
 c016b3c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 c016b40:	e0bffe17 	ldw	r2,-8(fp)
 c016b44:	10da8060 	cmpeqi	r3,r2,27137
 c016b48:	1800031e 	bne	r3,zero,c016b58 <altera_avalon_jtag_uart_ioctl+0x38>
 c016b4c:	109a80a0 	cmpeqi	r2,r2,27138
 c016b50:	1000181e 	bne	r2,zero,c016bb4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 c016b54:	00002906 	br	c016bfc <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 c016b58:	e0bffd17 	ldw	r2,-12(fp)
 c016b5c:	10c00117 	ldw	r3,4(r2)
 c016b60:	00a00034 	movhi	r2,32768
 c016b64:	10bfffc4 	addi	r2,r2,-1
 c016b68:	18802126 	beq	r3,r2,c016bf0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 c016b6c:	e0bfff17 	ldw	r2,-4(fp)
 c016b70:	10800017 	ldw	r2,0(r2)
 c016b74:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 c016b78:	e0bffc17 	ldw	r2,-16(fp)
 c016b7c:	10800090 	cmplti	r2,r2,2
 c016b80:	1000061e 	bne	r2,zero,c016b9c <altera_avalon_jtag_uart_ioctl+0x7c>
 c016b84:	e0fffc17 	ldw	r3,-16(fp)
 c016b88:	00a00034 	movhi	r2,32768
 c016b8c:	10bfffc4 	addi	r2,r2,-1
 c016b90:	18800226 	beq	r3,r2,c016b9c <altera_avalon_jtag_uart_ioctl+0x7c>
 c016b94:	e0bffc17 	ldw	r2,-16(fp)
 c016b98:	00000206 	br	c016ba4 <altera_avalon_jtag_uart_ioctl+0x84>
 c016b9c:	00a00034 	movhi	r2,32768
 c016ba0:	10bfff84 	addi	r2,r2,-2
 c016ba4:	e0fffd17 	ldw	r3,-12(fp)
 c016ba8:	18800115 	stw	r2,4(r3)
      rc = 0;
 c016bac:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 c016bb0:	00000f06 	br	c016bf0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 c016bb4:	e0bffd17 	ldw	r2,-12(fp)
 c016bb8:	10c00117 	ldw	r3,4(r2)
 c016bbc:	00a00034 	movhi	r2,32768
 c016bc0:	10bfffc4 	addi	r2,r2,-1
 c016bc4:	18800c26 	beq	r3,r2,c016bf8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 c016bc8:	e0bffd17 	ldw	r2,-12(fp)
 c016bcc:	10c00917 	ldw	r3,36(r2)
 c016bd0:	e0bffd17 	ldw	r2,-12(fp)
 c016bd4:	10800117 	ldw	r2,4(r2)
 c016bd8:	1885803a 	cmpltu	r2,r3,r2
 c016bdc:	10c03fcc 	andi	r3,r2,255
 c016be0:	e0bfff17 	ldw	r2,-4(fp)
 c016be4:	10c00015 	stw	r3,0(r2)
      rc = 0;
 c016be8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 c016bec:	00000206 	br	c016bf8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 c016bf0:	0001883a 	nop
 c016bf4:	00000106 	br	c016bfc <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 c016bf8:	0001883a 	nop

  default:
    break;
  }

  return rc;
 c016bfc:	e0bffb17 	ldw	r2,-20(fp)
}
 c016c00:	e037883a 	mov	sp,fp
 c016c04:	df000017 	ldw	fp,0(sp)
 c016c08:	dec00104 	addi	sp,sp,4
 c016c0c:	f800283a 	ret

0c016c10 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 c016c10:	defff304 	addi	sp,sp,-52
 c016c14:	dfc00c15 	stw	ra,48(sp)
 c016c18:	df000b15 	stw	fp,44(sp)
 c016c1c:	df000b04 	addi	fp,sp,44
 c016c20:	e13ffc15 	stw	r4,-16(fp)
 c016c24:	e17ffd15 	stw	r5,-12(fp)
 c016c28:	e1bffe15 	stw	r6,-8(fp)
 c016c2c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 c016c30:	e0bffd17 	ldw	r2,-12(fp)
 c016c34:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 c016c38:	00004706 	br	c016d58 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 c016c3c:	e0bffc17 	ldw	r2,-16(fp)
 c016c40:	10800a17 	ldw	r2,40(r2)
 c016c44:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 c016c48:	e0bffc17 	ldw	r2,-16(fp)
 c016c4c:	10800b17 	ldw	r2,44(r2)
 c016c50:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 c016c54:	e0fff717 	ldw	r3,-36(fp)
 c016c58:	e0bff817 	ldw	r2,-32(fp)
 c016c5c:	18800536 	bltu	r3,r2,c016c74 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 c016c60:	e0fff717 	ldw	r3,-36(fp)
 c016c64:	e0bff817 	ldw	r2,-32(fp)
 c016c68:	1885c83a 	sub	r2,r3,r2
 c016c6c:	e0bff615 	stw	r2,-40(fp)
 c016c70:	00000406 	br	c016c84 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 c016c74:	00c20004 	movi	r3,2048
 c016c78:	e0bff817 	ldw	r2,-32(fp)
 c016c7c:	1885c83a 	sub	r2,r3,r2
 c016c80:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 c016c84:	e0bff617 	ldw	r2,-40(fp)
 c016c88:	10001e26 	beq	r2,zero,c016d04 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 c016c8c:	e0fffe17 	ldw	r3,-8(fp)
 c016c90:	e0bff617 	ldw	r2,-40(fp)
 c016c94:	1880022e 	bgeu	r3,r2,c016ca0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 c016c98:	e0bffe17 	ldw	r2,-8(fp)
 c016c9c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 c016ca0:	e0bffc17 	ldw	r2,-16(fp)
 c016ca4:	10c00e04 	addi	r3,r2,56
 c016ca8:	e0bff817 	ldw	r2,-32(fp)
 c016cac:	1885883a 	add	r2,r3,r2
 c016cb0:	e1bff617 	ldw	r6,-40(fp)
 c016cb4:	100b883a 	mov	r5,r2
 c016cb8:	e13ff517 	ldw	r4,-44(fp)
 c016cbc:	c0054d80 	call	c0054d8 <memcpy>
      ptr   += n;
 c016cc0:	e0fff517 	ldw	r3,-44(fp)
 c016cc4:	e0bff617 	ldw	r2,-40(fp)
 c016cc8:	1885883a 	add	r2,r3,r2
 c016ccc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 c016cd0:	e0fffe17 	ldw	r3,-8(fp)
 c016cd4:	e0bff617 	ldw	r2,-40(fp)
 c016cd8:	1885c83a 	sub	r2,r3,r2
 c016cdc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c016ce0:	e0fff817 	ldw	r3,-32(fp)
 c016ce4:	e0bff617 	ldw	r2,-40(fp)
 c016ce8:	1885883a 	add	r2,r3,r2
 c016cec:	10c1ffcc 	andi	r3,r2,2047
 c016cf0:	e0bffc17 	ldw	r2,-16(fp)
 c016cf4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 c016cf8:	e0bffe17 	ldw	r2,-8(fp)
 c016cfc:	00bfcf16 	blt	zero,r2,c016c3c <__alt_data_end+0xfc016c3c>
 c016d00:	00000106 	br	c016d08 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 c016d04:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 c016d08:	e0fff517 	ldw	r3,-44(fp)
 c016d0c:	e0bffd17 	ldw	r2,-12(fp)
 c016d10:	1880141e 	bne	r3,r2,c016d64 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 c016d14:	e0bfff17 	ldw	r2,-4(fp)
 c016d18:	1090000c 	andi	r2,r2,16384
 c016d1c:	1000131e 	bne	r2,zero,c016d6c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 c016d20:	0001883a 	nop
 c016d24:	e0bffc17 	ldw	r2,-16(fp)
 c016d28:	10c00a17 	ldw	r3,40(r2)
 c016d2c:	e0bff717 	ldw	r2,-36(fp)
 c016d30:	1880051e 	bne	r3,r2,c016d48 <altera_avalon_jtag_uart_read+0x138>
 c016d34:	e0bffc17 	ldw	r2,-16(fp)
 c016d38:	10c00917 	ldw	r3,36(r2)
 c016d3c:	e0bffc17 	ldw	r2,-16(fp)
 c016d40:	10800117 	ldw	r2,4(r2)
 c016d44:	18bff736 	bltu	r3,r2,c016d24 <__alt_data_end+0xfc016d24>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 c016d48:	e0bffc17 	ldw	r2,-16(fp)
 c016d4c:	10c00a17 	ldw	r3,40(r2)
 c016d50:	e0bff717 	ldw	r2,-36(fp)
 c016d54:	18800726 	beq	r3,r2,c016d74 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 c016d58:	e0bffe17 	ldw	r2,-8(fp)
 c016d5c:	00bfb716 	blt	zero,r2,c016c3c <__alt_data_end+0xfc016c3c>
 c016d60:	00000506 	br	c016d78 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 c016d64:	0001883a 	nop
 c016d68:	00000306 	br	c016d78 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 c016d6c:	0001883a 	nop
 c016d70:	00000106 	br	c016d78 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 c016d74:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 c016d78:	e0fff517 	ldw	r3,-44(fp)
 c016d7c:	e0bffd17 	ldw	r2,-12(fp)
 c016d80:	18801826 	beq	r3,r2,c016de4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c016d84:	0005303a 	rdctl	r2,status
 c016d88:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c016d8c:	e0fffb17 	ldw	r3,-20(fp)
 c016d90:	00bfff84 	movi	r2,-2
 c016d94:	1884703a 	and	r2,r3,r2
 c016d98:	1001703a 	wrctl	status,r2
  
  return context;
 c016d9c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 c016da0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 c016da4:	e0bffc17 	ldw	r2,-16(fp)
 c016da8:	10800817 	ldw	r2,32(r2)
 c016dac:	10c00054 	ori	r3,r2,1
 c016db0:	e0bffc17 	ldw	r2,-16(fp)
 c016db4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 c016db8:	e0bffc17 	ldw	r2,-16(fp)
 c016dbc:	10800017 	ldw	r2,0(r2)
 c016dc0:	10800104 	addi	r2,r2,4
 c016dc4:	1007883a 	mov	r3,r2
 c016dc8:	e0bffc17 	ldw	r2,-16(fp)
 c016dcc:	10800817 	ldw	r2,32(r2)
 c016dd0:	18800035 	stwio	r2,0(r3)
 c016dd4:	e0bffa17 	ldw	r2,-24(fp)
 c016dd8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c016ddc:	e0bff917 	ldw	r2,-28(fp)
 c016de0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 c016de4:	e0fff517 	ldw	r3,-44(fp)
 c016de8:	e0bffd17 	ldw	r2,-12(fp)
 c016dec:	18800426 	beq	r3,r2,c016e00 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 c016df0:	e0fff517 	ldw	r3,-44(fp)
 c016df4:	e0bffd17 	ldw	r2,-12(fp)
 c016df8:	1885c83a 	sub	r2,r3,r2
 c016dfc:	00000606 	br	c016e18 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 c016e00:	e0bfff17 	ldw	r2,-4(fp)
 c016e04:	1090000c 	andi	r2,r2,16384
 c016e08:	10000226 	beq	r2,zero,c016e14 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 c016e0c:	00bffd44 	movi	r2,-11
 c016e10:	00000106 	br	c016e18 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 c016e14:	00bffec4 	movi	r2,-5
}
 c016e18:	e037883a 	mov	sp,fp
 c016e1c:	dfc00117 	ldw	ra,4(sp)
 c016e20:	df000017 	ldw	fp,0(sp)
 c016e24:	dec00204 	addi	sp,sp,8
 c016e28:	f800283a 	ret

0c016e2c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 c016e2c:	defff304 	addi	sp,sp,-52
 c016e30:	dfc00c15 	stw	ra,48(sp)
 c016e34:	df000b15 	stw	fp,44(sp)
 c016e38:	df000b04 	addi	fp,sp,44
 c016e3c:	e13ffc15 	stw	r4,-16(fp)
 c016e40:	e17ffd15 	stw	r5,-12(fp)
 c016e44:	e1bffe15 	stw	r6,-8(fp)
 c016e48:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 c016e4c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 c016e50:	e0bffd17 	ldw	r2,-12(fp)
 c016e54:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 c016e58:	00003706 	br	c016f38 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 c016e5c:	e0bffc17 	ldw	r2,-16(fp)
 c016e60:	10800c17 	ldw	r2,48(r2)
 c016e64:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 c016e68:	e0bffc17 	ldw	r2,-16(fp)
 c016e6c:	10800d17 	ldw	r2,52(r2)
 c016e70:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 c016e74:	e0fff917 	ldw	r3,-28(fp)
 c016e78:	e0bff517 	ldw	r2,-44(fp)
 c016e7c:	1880062e 	bgeu	r3,r2,c016e98 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 c016e80:	e0fff517 	ldw	r3,-44(fp)
 c016e84:	e0bff917 	ldw	r2,-28(fp)
 c016e88:	1885c83a 	sub	r2,r3,r2
 c016e8c:	10bfffc4 	addi	r2,r2,-1
 c016e90:	e0bff615 	stw	r2,-40(fp)
 c016e94:	00000b06 	br	c016ec4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 c016e98:	e0bff517 	ldw	r2,-44(fp)
 c016e9c:	10000526 	beq	r2,zero,c016eb4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 c016ea0:	00c20004 	movi	r3,2048
 c016ea4:	e0bff917 	ldw	r2,-28(fp)
 c016ea8:	1885c83a 	sub	r2,r3,r2
 c016eac:	e0bff615 	stw	r2,-40(fp)
 c016eb0:	00000406 	br	c016ec4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 c016eb4:	00c1ffc4 	movi	r3,2047
 c016eb8:	e0bff917 	ldw	r2,-28(fp)
 c016ebc:	1885c83a 	sub	r2,r3,r2
 c016ec0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 c016ec4:	e0bff617 	ldw	r2,-40(fp)
 c016ec8:	10001e26 	beq	r2,zero,c016f44 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 c016ecc:	e0fffe17 	ldw	r3,-8(fp)
 c016ed0:	e0bff617 	ldw	r2,-40(fp)
 c016ed4:	1880022e 	bgeu	r3,r2,c016ee0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 c016ed8:	e0bffe17 	ldw	r2,-8(fp)
 c016edc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 c016ee0:	e0bffc17 	ldw	r2,-16(fp)
 c016ee4:	10c20e04 	addi	r3,r2,2104
 c016ee8:	e0bff917 	ldw	r2,-28(fp)
 c016eec:	1885883a 	add	r2,r3,r2
 c016ef0:	e1bff617 	ldw	r6,-40(fp)
 c016ef4:	e17ffd17 	ldw	r5,-12(fp)
 c016ef8:	1009883a 	mov	r4,r2
 c016efc:	c0054d80 	call	c0054d8 <memcpy>
      ptr   += n;
 c016f00:	e0fffd17 	ldw	r3,-12(fp)
 c016f04:	e0bff617 	ldw	r2,-40(fp)
 c016f08:	1885883a 	add	r2,r3,r2
 c016f0c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 c016f10:	e0fffe17 	ldw	r3,-8(fp)
 c016f14:	e0bff617 	ldw	r2,-40(fp)
 c016f18:	1885c83a 	sub	r2,r3,r2
 c016f1c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c016f20:	e0fff917 	ldw	r3,-28(fp)
 c016f24:	e0bff617 	ldw	r2,-40(fp)
 c016f28:	1885883a 	add	r2,r3,r2
 c016f2c:	10c1ffcc 	andi	r3,r2,2047
 c016f30:	e0bffc17 	ldw	r2,-16(fp)
 c016f34:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 c016f38:	e0bffe17 	ldw	r2,-8(fp)
 c016f3c:	00bfc716 	blt	zero,r2,c016e5c <__alt_data_end+0xfc016e5c>
 c016f40:	00000106 	br	c016f48 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 c016f44:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c016f48:	0005303a 	rdctl	r2,status
 c016f4c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c016f50:	e0fffb17 	ldw	r3,-20(fp)
 c016f54:	00bfff84 	movi	r2,-2
 c016f58:	1884703a 	and	r2,r3,r2
 c016f5c:	1001703a 	wrctl	status,r2
  
  return context;
 c016f60:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 c016f64:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 c016f68:	e0bffc17 	ldw	r2,-16(fp)
 c016f6c:	10800817 	ldw	r2,32(r2)
 c016f70:	10c00094 	ori	r3,r2,2
 c016f74:	e0bffc17 	ldw	r2,-16(fp)
 c016f78:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 c016f7c:	e0bffc17 	ldw	r2,-16(fp)
 c016f80:	10800017 	ldw	r2,0(r2)
 c016f84:	10800104 	addi	r2,r2,4
 c016f88:	1007883a 	mov	r3,r2
 c016f8c:	e0bffc17 	ldw	r2,-16(fp)
 c016f90:	10800817 	ldw	r2,32(r2)
 c016f94:	18800035 	stwio	r2,0(r3)
 c016f98:	e0bffa17 	ldw	r2,-24(fp)
 c016f9c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c016fa0:	e0bff817 	ldw	r2,-32(fp)
 c016fa4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 c016fa8:	e0bffe17 	ldw	r2,-8(fp)
 c016fac:	0080100e 	bge	zero,r2,c016ff0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 c016fb0:	e0bfff17 	ldw	r2,-4(fp)
 c016fb4:	1090000c 	andi	r2,r2,16384
 c016fb8:	1000101e 	bne	r2,zero,c016ffc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 c016fbc:	0001883a 	nop
 c016fc0:	e0bffc17 	ldw	r2,-16(fp)
 c016fc4:	10c00d17 	ldw	r3,52(r2)
 c016fc8:	e0bff517 	ldw	r2,-44(fp)
 c016fcc:	1880051e 	bne	r3,r2,c016fe4 <altera_avalon_jtag_uart_write+0x1b8>
 c016fd0:	e0bffc17 	ldw	r2,-16(fp)
 c016fd4:	10c00917 	ldw	r3,36(r2)
 c016fd8:	e0bffc17 	ldw	r2,-16(fp)
 c016fdc:	10800117 	ldw	r2,4(r2)
 c016fe0:	18bff736 	bltu	r3,r2,c016fc0 <__alt_data_end+0xfc016fc0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 c016fe4:	e0bffc17 	ldw	r2,-16(fp)
 c016fe8:	10800917 	ldw	r2,36(r2)
 c016fec:	1000051e 	bne	r2,zero,c017004 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 c016ff0:	e0bffe17 	ldw	r2,-8(fp)
 c016ff4:	00bfd016 	blt	zero,r2,c016f38 <__alt_data_end+0xfc016f38>
 c016ff8:	00000306 	br	c017008 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 c016ffc:	0001883a 	nop
 c017000:	00000106 	br	c017008 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 c017004:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 c017008:	e0fffd17 	ldw	r3,-12(fp)
 c01700c:	e0bff717 	ldw	r2,-36(fp)
 c017010:	18800426 	beq	r3,r2,c017024 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 c017014:	e0fffd17 	ldw	r3,-12(fp)
 c017018:	e0bff717 	ldw	r2,-36(fp)
 c01701c:	1885c83a 	sub	r2,r3,r2
 c017020:	00000606 	br	c01703c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 c017024:	e0bfff17 	ldw	r2,-4(fp)
 c017028:	1090000c 	andi	r2,r2,16384
 c01702c:	10000226 	beq	r2,zero,c017038 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 c017030:	00bffd44 	movi	r2,-11
 c017034:	00000106 	br	c01703c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 c017038:	00bffec4 	movi	r2,-5
}
 c01703c:	e037883a 	mov	sp,fp
 c017040:	dfc00117 	ldw	ra,4(sp)
 c017044:	df000017 	ldw	fp,0(sp)
 c017048:	dec00204 	addi	sp,sp,8
 c01704c:	f800283a 	ret

0c017050 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 c017050:	defff404 	addi	sp,sp,-48
 c017054:	df000b15 	stw	fp,44(sp)
 c017058:	df000b04 	addi	fp,sp,44
 c01705c:	e13ffc15 	stw	r4,-16(fp)
 c017060:	e17ffd15 	stw	r5,-12(fp)
 c017064:	e1bffe15 	stw	r6,-8(fp)
 c017068:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 c01706c:	e0ffff17 	ldw	r3,-4(fp)
 c017070:	e0bffe17 	ldw	r2,-8(fp)
 c017074:	1885883a 	add	r2,r3,r2
 c017078:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 c01707c:	e0c00217 	ldw	r3,8(fp)
 c017080:	e0800117 	ldw	r2,4(fp)
 c017084:	1885883a 	add	r2,r3,r2
 c017088:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 c01708c:	e0800117 	ldw	r2,4(fp)
 c017090:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 c017094:	e0bffe17 	ldw	r2,-8(fp)
 c017098:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 c01709c:	00800044 	movi	r2,1
 c0170a0:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 c0170a4:	e0bffc17 	ldw	r2,-16(fp)
 c0170a8:	10800504 	addi	r2,r2,20
 c0170ac:	1009883a 	mov	r4,r2
 c0170b0:	00c00044 	movi	r3,1
 c0170b4:	e0bffd17 	ldw	r2,-12(fp)
 c0170b8:	1884983a 	sll	r2,r3,r2
 c0170bc:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 c0170c0:	e0800317 	ldw	r2,12(fp)
 c0170c4:	1080008c 	andi	r2,r2,2
 c0170c8:	1000051e 	bne	r2,zero,c0170e0 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 c0170cc:	e0bffc17 	ldw	r2,-16(fp)
 c0170d0:	10800304 	addi	r2,r2,12
 c0170d4:	1007883a 	mov	r3,r2
 c0170d8:	00810004 	movi	r2,1024
 c0170dc:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 c0170e0:	e0bffc17 	ldw	r2,-16(fp)
 c0170e4:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 c0170e8:	e0bffc17 	ldw	r2,-16(fp)
 c0170ec:	10800204 	addi	r2,r2,8
 c0170f0:	10800037 	ldwio	r2,0(r2)
 c0170f4:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 c0170f8:	e0bffa17 	ldw	r2,-24(fp)
 c0170fc:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 c017100:	10000226 	beq	r2,zero,c01710c <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 c017104:	e0bff717 	ldw	r2,-36(fp)
 c017108:	1000031e 	bne	r2,zero,c017118 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 c01710c:	e0bffa17 	ldw	r2,-24(fp)
 c017110:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 c017114:	103ff426 	beq	r2,zero,c0170e8 <__alt_data_end+0xfc0170e8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 c017118:	e0bffa17 	ldw	r2,-24(fp)
 c01711c:	1080100c 	andi	r2,r2,64
 c017120:	10001e26 	beq	r2,zero,c01719c <alt_avalon_spi_command+0x14c>
 c017124:	e0bff717 	ldw	r2,-36(fp)
 c017128:	00801c0e 	bge	zero,r2,c01719c <alt_avalon_spi_command+0x14c>
    {
      credits--;
 c01712c:	e0bff717 	ldw	r2,-36(fp)
 c017130:	10bfffc4 	addi	r2,r2,-1
 c017134:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 c017138:	e0ffff17 	ldw	r3,-4(fp)
 c01713c:	e0bff817 	ldw	r2,-32(fp)
 c017140:	18800a2e 	bgeu	r3,r2,c01716c <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 c017144:	e0bffc17 	ldw	r2,-16(fp)
 c017148:	10800104 	addi	r2,r2,4
 c01714c:	1009883a 	mov	r4,r2
 c017150:	e0bfff17 	ldw	r2,-4(fp)
 c017154:	10c00044 	addi	r3,r2,1
 c017158:	e0ffff15 	stw	r3,-4(fp)
 c01715c:	10800003 	ldbu	r2,0(r2)
 c017160:	10803fcc 	andi	r2,r2,255
 c017164:	20800035 	stwio	r2,0(r4)
 c017168:	00000c06 	br	c01719c <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 c01716c:	e0bff517 	ldw	r2,-44(fp)
 c017170:	10000826 	beq	r2,zero,c017194 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 c017174:	e0bff517 	ldw	r2,-44(fp)
 c017178:	10bfffc4 	addi	r2,r2,-1
 c01717c:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 c017180:	e0bffc17 	ldw	r2,-16(fp)
 c017184:	10800104 	addi	r2,r2,4
 c017188:	0007883a 	mov	r3,zero
 c01718c:	10c00035 	stwio	r3,0(r2)
 c017190:	00000206 	br	c01719c <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 c017194:	00bf0004 	movi	r2,-1024
 c017198:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 c01719c:	e0bffa17 	ldw	r2,-24(fp)
 c0171a0:	1080200c 	andi	r2,r2,128
 c0171a4:	103fd026 	beq	r2,zero,c0170e8 <__alt_data_end+0xfc0170e8>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 c0171a8:	e0bffc17 	ldw	r2,-16(fp)
 c0171ac:	10800037 	ldwio	r2,0(r2)
 c0171b0:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 c0171b4:	e0bff617 	ldw	r2,-40(fp)
 c0171b8:	10000426 	beq	r2,zero,c0171cc <alt_avalon_spi_command+0x17c>
        read_ignore--;
 c0171bc:	e0bff617 	ldw	r2,-40(fp)
 c0171c0:	10bfffc4 	addi	r2,r2,-1
 c0171c4:	e0bff615 	stw	r2,-40(fp)
 c0171c8:	00000506 	br	c0171e0 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 c0171cc:	e0800217 	ldw	r2,8(fp)
 c0171d0:	10c00044 	addi	r3,r2,1
 c0171d4:	e0c00215 	stw	r3,8(fp)
 c0171d8:	e0fffb17 	ldw	r3,-20(fp)
 c0171dc:	10c00005 	stb	r3,0(r2)
      credits++;
 c0171e0:	e0bff717 	ldw	r2,-36(fp)
 c0171e4:	10800044 	addi	r2,r2,1
 c0171e8:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 c0171ec:	e0bff617 	ldw	r2,-40(fp)
 c0171f0:	103fbd1e 	bne	r2,zero,c0170e8 <__alt_data_end+0xfc0170e8>
 c0171f4:	e0c00217 	ldw	r3,8(fp)
 c0171f8:	e0bff917 	ldw	r2,-28(fp)
 c0171fc:	18bfba1e 	bne	r3,r2,c0170e8 <__alt_data_end+0xfc0170e8>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 c017200:	e0bffc17 	ldw	r2,-16(fp)
 c017204:	10800204 	addi	r2,r2,8
 c017208:	10800037 	ldwio	r2,0(r2)
 c01720c:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 c017210:	e0bffa17 	ldw	r2,-24(fp)
 c017214:	1080080c 	andi	r2,r2,32
 c017218:	103ff926 	beq	r2,zero,c017200 <__alt_data_end+0xfc017200>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 c01721c:	e0800317 	ldw	r2,12(fp)
 c017220:	1080004c 	andi	r2,r2,1
 c017224:	1000041e 	bne	r2,zero,c017238 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 c017228:	e0bffc17 	ldw	r2,-16(fp)
 c01722c:	10800304 	addi	r2,r2,12
 c017230:	0007883a 	mov	r3,zero
 c017234:	10c00035 	stwio	r3,0(r2)

  return read_length;
 c017238:	e0800117 	ldw	r2,4(fp)
}
 c01723c:	e037883a 	mov	sp,fp
 c017240:	df000017 	ldw	fp,0(sp)
 c017244:	dec00104 	addi	sp,sp,4
 c017248:	f800283a 	ret

0c01724c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 c01724c:	defffa04 	addi	sp,sp,-24
 c017250:	dfc00515 	stw	ra,20(sp)
 c017254:	df000415 	stw	fp,16(sp)
 c017258:	df000404 	addi	fp,sp,16
 c01725c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 c017260:	0007883a 	mov	r3,zero
 c017264:	e0bfff17 	ldw	r2,-4(fp)
 c017268:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 c01726c:	e0bfff17 	ldw	r2,-4(fp)
 c017270:	10800104 	addi	r2,r2,4
 c017274:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c017278:	0005303a 	rdctl	r2,status
 c01727c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c017280:	e0fffd17 	ldw	r3,-12(fp)
 c017284:	00bfff84 	movi	r2,-2
 c017288:	1884703a 	and	r2,r3,r2
 c01728c:	1001703a 	wrctl	status,r2
  
  return context;
 c017290:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 c017294:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 c017298:	c0162a40 	call	c0162a4 <alt_tick>
 c01729c:	e0bffc17 	ldw	r2,-16(fp)
 c0172a0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c0172a4:	e0bffe17 	ldw	r2,-8(fp)
 c0172a8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 c0172ac:	0001883a 	nop
 c0172b0:	e037883a 	mov	sp,fp
 c0172b4:	dfc00117 	ldw	ra,4(sp)
 c0172b8:	df000017 	ldw	fp,0(sp)
 c0172bc:	dec00204 	addi	sp,sp,8
 c0172c0:	f800283a 	ret

0c0172c4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 c0172c4:	defff804 	addi	sp,sp,-32
 c0172c8:	dfc00715 	stw	ra,28(sp)
 c0172cc:	df000615 	stw	fp,24(sp)
 c0172d0:	df000604 	addi	fp,sp,24
 c0172d4:	e13ffc15 	stw	r4,-16(fp)
 c0172d8:	e17ffd15 	stw	r5,-12(fp)
 c0172dc:	e1bffe15 	stw	r6,-8(fp)
 c0172e0:	e1ffff15 	stw	r7,-4(fp)
 c0172e4:	e0bfff17 	ldw	r2,-4(fp)
 c0172e8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 c0172ec:	d0a7bb17 	ldw	r2,-24852(gp)
 c0172f0:	1000021e 	bne	r2,zero,c0172fc <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 c0172f4:	e0bffb17 	ldw	r2,-20(fp)
 c0172f8:	d0a7bb15 	stw	r2,-24852(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 c0172fc:	e0bffc17 	ldw	r2,-16(fp)
 c017300:	10800104 	addi	r2,r2,4
 c017304:	00c001c4 	movi	r3,7
 c017308:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 c01730c:	d8000015 	stw	zero,0(sp)
 c017310:	e1fffc17 	ldw	r7,-16(fp)
 c017314:	01830074 	movhi	r6,3073
 c017318:	319c9304 	addi	r6,r6,29260
 c01731c:	e17ffe17 	ldw	r5,-8(fp)
 c017320:	e13ffd17 	ldw	r4,-12(fp)
 c017324:	c0177a40 	call	c0177a4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 c017328:	0001883a 	nop
 c01732c:	e037883a 	mov	sp,fp
 c017330:	dfc00117 	ldw	ra,4(sp)
 c017334:	df000017 	ldw	fp,0(sp)
 c017338:	dec00204 	addi	sp,sp,8
 c01733c:	f800283a 	ret

0c017340 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 c017340:	defff504 	addi	sp,sp,-44
 c017344:	df000a15 	stw	fp,40(sp)
 c017348:	df000a04 	addi	fp,sp,40
 c01734c:	e13ffc15 	stw	r4,-16(fp)
 c017350:	e17ffd15 	stw	r5,-12(fp)
 c017354:	e1bffe15 	stw	r6,-8(fp)
 c017358:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 c01735c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 c017360:	d0a7bb17 	ldw	r2,-24852(gp)
  
  if (alt_ticks_per_second ())
 c017364:	10003c26 	beq	r2,zero,c017458 <alt_alarm_start+0x118>
  {
    if (alarm)
 c017368:	e0bffc17 	ldw	r2,-16(fp)
 c01736c:	10003826 	beq	r2,zero,c017450 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 c017370:	e0bffc17 	ldw	r2,-16(fp)
 c017374:	e0fffe17 	ldw	r3,-8(fp)
 c017378:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 c01737c:	e0bffc17 	ldw	r2,-16(fp)
 c017380:	e0ffff17 	ldw	r3,-4(fp)
 c017384:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c017388:	0005303a 	rdctl	r2,status
 c01738c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c017390:	e0fff917 	ldw	r3,-28(fp)
 c017394:	00bfff84 	movi	r2,-2
 c017398:	1884703a 	and	r2,r3,r2
 c01739c:	1001703a 	wrctl	status,r2
  
  return context;
 c0173a0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 c0173a4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 c0173a8:	d0a7bc17 	ldw	r2,-24848(gp)
      
      current_nticks = alt_nticks();
 c0173ac:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 c0173b0:	e0fffd17 	ldw	r3,-12(fp)
 c0173b4:	e0bff617 	ldw	r2,-40(fp)
 c0173b8:	1885883a 	add	r2,r3,r2
 c0173bc:	10c00044 	addi	r3,r2,1
 c0173c0:	e0bffc17 	ldw	r2,-16(fp)
 c0173c4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 c0173c8:	e0bffc17 	ldw	r2,-16(fp)
 c0173cc:	10c00217 	ldw	r3,8(r2)
 c0173d0:	e0bff617 	ldw	r2,-40(fp)
 c0173d4:	1880042e 	bgeu	r3,r2,c0173e8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 c0173d8:	e0bffc17 	ldw	r2,-16(fp)
 c0173dc:	00c00044 	movi	r3,1
 c0173e0:	10c00405 	stb	r3,16(r2)
 c0173e4:	00000206 	br	c0173f0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 c0173e8:	e0bffc17 	ldw	r2,-16(fp)
 c0173ec:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 c0173f0:	e0bffc17 	ldw	r2,-16(fp)
 c0173f4:	d0e01704 	addi	r3,gp,-32676
 c0173f8:	e0fffa15 	stw	r3,-24(fp)
 c0173fc:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 c017400:	e0bffb17 	ldw	r2,-20(fp)
 c017404:	e0fffa17 	ldw	r3,-24(fp)
 c017408:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 c01740c:	e0bffa17 	ldw	r2,-24(fp)
 c017410:	10c00017 	ldw	r3,0(r2)
 c017414:	e0bffb17 	ldw	r2,-20(fp)
 c017418:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 c01741c:	e0bffa17 	ldw	r2,-24(fp)
 c017420:	10800017 	ldw	r2,0(r2)
 c017424:	e0fffb17 	ldw	r3,-20(fp)
 c017428:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 c01742c:	e0bffa17 	ldw	r2,-24(fp)
 c017430:	e0fffb17 	ldw	r3,-20(fp)
 c017434:	10c00015 	stw	r3,0(r2)
 c017438:	e0bff817 	ldw	r2,-32(fp)
 c01743c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c017440:	e0bff717 	ldw	r2,-36(fp)
 c017444:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 c017448:	0005883a 	mov	r2,zero
 c01744c:	00000306 	br	c01745c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 c017450:	00bffa84 	movi	r2,-22
 c017454:	00000106 	br	c01745c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 c017458:	00bfde84 	movi	r2,-134
  }
}
 c01745c:	e037883a 	mov	sp,fp
 c017460:	df000017 	ldw	fp,0(sp)
 c017464:	dec00104 	addi	sp,sp,4
 c017468:	f800283a 	ret

0c01746c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 c01746c:	defffa04 	addi	sp,sp,-24
 c017470:	dfc00515 	stw	ra,20(sp)
 c017474:	df000415 	stw	fp,16(sp)
 c017478:	df000404 	addi	fp,sp,16
 c01747c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 c017480:	00800244 	movi	r2,9
 c017484:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 c017488:	014003f4 	movhi	r5,15
 c01748c:	29509004 	addi	r5,r5,16960
 c017490:	e13ffd17 	ldw	r4,-12(fp)
 c017494:	c004c7c0 	call	c004c7c <__mulsi3>
 c017498:	100b883a 	mov	r5,r2
 c01749c:	0100bef4 	movhi	r4,763
 c0174a0:	213c2004 	addi	r4,r4,-3968
 c0174a4:	c004bc00 	call	c004bc0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 c0174a8:	100b883a 	mov	r5,r2
 c0174ac:	01200034 	movhi	r4,32768
 c0174b0:	213fffc4 	addi	r4,r4,-1
 c0174b4:	c004bc00 	call	c004bc0 <__udivsi3>
 c0174b8:	100b883a 	mov	r5,r2
 c0174bc:	e13fff17 	ldw	r4,-4(fp)
 c0174c0:	c004bc00 	call	c004bc0 <__udivsi3>
 c0174c4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 c0174c8:	e0bffe17 	ldw	r2,-8(fp)
 c0174cc:	10002a26 	beq	r2,zero,c017578 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 c0174d0:	e03ffc15 	stw	zero,-16(fp)
 c0174d4:	00001706 	br	c017534 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 c0174d8:	00a00034 	movhi	r2,32768
 c0174dc:	10bfffc4 	addi	r2,r2,-1
 c0174e0:	10bfffc4 	addi	r2,r2,-1
 c0174e4:	103ffe1e 	bne	r2,zero,c0174e0 <__alt_data_end+0xfc0174e0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 c0174e8:	014003f4 	movhi	r5,15
 c0174ec:	29509004 	addi	r5,r5,16960
 c0174f0:	e13ffd17 	ldw	r4,-12(fp)
 c0174f4:	c004c7c0 	call	c004c7c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 c0174f8:	100b883a 	mov	r5,r2
 c0174fc:	0100bef4 	movhi	r4,763
 c017500:	213c2004 	addi	r4,r4,-3968
 c017504:	c004bc00 	call	c004bc0 <__udivsi3>
 c017508:	100b883a 	mov	r5,r2
 c01750c:	01200034 	movhi	r4,32768
 c017510:	213fffc4 	addi	r4,r4,-1
 c017514:	c004bc00 	call	c004bc0 <__udivsi3>
 c017518:	1007883a 	mov	r3,r2
 c01751c:	e0bfff17 	ldw	r2,-4(fp)
 c017520:	10c5c83a 	sub	r2,r2,r3
 c017524:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 c017528:	e0bffc17 	ldw	r2,-16(fp)
 c01752c:	10800044 	addi	r2,r2,1
 c017530:	e0bffc15 	stw	r2,-16(fp)
 c017534:	e0fffc17 	ldw	r3,-16(fp)
 c017538:	e0bffe17 	ldw	r2,-8(fp)
 c01753c:	18bfe616 	blt	r3,r2,c0174d8 <__alt_data_end+0xfc0174d8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 c017540:	014003f4 	movhi	r5,15
 c017544:	29509004 	addi	r5,r5,16960
 c017548:	e13ffd17 	ldw	r4,-12(fp)
 c01754c:	c004c7c0 	call	c004c7c <__mulsi3>
 c017550:	100b883a 	mov	r5,r2
 c017554:	0100bef4 	movhi	r4,763
 c017558:	213c2004 	addi	r4,r4,-3968
 c01755c:	c004bc00 	call	c004bc0 <__udivsi3>
 c017560:	e17fff17 	ldw	r5,-4(fp)
 c017564:	1009883a 	mov	r4,r2
 c017568:	c004c7c0 	call	c004c7c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 c01756c:	10bfffc4 	addi	r2,r2,-1
 c017570:	103ffe1e 	bne	r2,zero,c01756c <__alt_data_end+0xfc01756c>
 c017574:	00000d06 	br	c0175ac <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 c017578:	014003f4 	movhi	r5,15
 c01757c:	29509004 	addi	r5,r5,16960
 c017580:	e13ffd17 	ldw	r4,-12(fp)
 c017584:	c004c7c0 	call	c004c7c <__mulsi3>
 c017588:	100b883a 	mov	r5,r2
 c01758c:	0100bef4 	movhi	r4,763
 c017590:	213c2004 	addi	r4,r4,-3968
 c017594:	c004bc00 	call	c004bc0 <__udivsi3>
 c017598:	e17fff17 	ldw	r5,-4(fp)
 c01759c:	1009883a 	mov	r4,r2
 c0175a0:	c004c7c0 	call	c004c7c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 c0175a4:	10bfffc4 	addi	r2,r2,-1
 c0175a8:	00bffe16 	blt	zero,r2,c0175a4 <__alt_data_end+0xfc0175a4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 c0175ac:	0005883a 	mov	r2,zero
}
 c0175b0:	e037883a 	mov	sp,fp
 c0175b4:	dfc00117 	ldw	ra,4(sp)
 c0175b8:	df000017 	ldw	fp,0(sp)
 c0175bc:	dec00204 	addi	sp,sp,8
 c0175c0:	f800283a 	ret

0c0175c4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 c0175c4:	deffff04 	addi	sp,sp,-4
 c0175c8:	df000015 	stw	fp,0(sp)
 c0175cc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 c0175d0:	0001883a 	nop
 c0175d4:	e037883a 	mov	sp,fp
 c0175d8:	df000017 	ldw	fp,0(sp)
 c0175dc:	dec00104 	addi	sp,sp,4
 c0175e0:	f800283a 	ret

0c0175e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c0175e4:	defffe04 	addi	sp,sp,-8
 c0175e8:	dfc00115 	stw	ra,4(sp)
 c0175ec:	df000015 	stw	fp,0(sp)
 c0175f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c0175f4:	d0a01517 	ldw	r2,-32684(gp)
 c0175f8:	10000326 	beq	r2,zero,c017608 <alt_get_errno+0x24>
 c0175fc:	d0a01517 	ldw	r2,-32684(gp)
 c017600:	103ee83a 	callr	r2
 c017604:	00000106 	br	c01760c <alt_get_errno+0x28>
 c017608:	d0a7b004 	addi	r2,gp,-24896
}
 c01760c:	e037883a 	mov	sp,fp
 c017610:	dfc00117 	ldw	ra,4(sp)
 c017614:	df000017 	ldw	fp,0(sp)
 c017618:	dec00204 	addi	sp,sp,8
 c01761c:	f800283a 	ret

0c017620 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 c017620:	defffa04 	addi	sp,sp,-24
 c017624:	dfc00515 	stw	ra,20(sp)
 c017628:	df000415 	stw	fp,16(sp)
 c01762c:	df000404 	addi	fp,sp,16
 c017630:	e13ffe15 	stw	r4,-8(fp)
 c017634:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 c017638:	e0bffe17 	ldw	r2,-8(fp)
 c01763c:	10000326 	beq	r2,zero,c01764c <alt_dev_llist_insert+0x2c>
 c017640:	e0bffe17 	ldw	r2,-8(fp)
 c017644:	10800217 	ldw	r2,8(r2)
 c017648:	1000061e 	bne	r2,zero,c017664 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 c01764c:	c0175e40 	call	c0175e4 <alt_get_errno>
 c017650:	1007883a 	mov	r3,r2
 c017654:	00800584 	movi	r2,22
 c017658:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 c01765c:	00bffa84 	movi	r2,-22
 c017660:	00001306 	br	c0176b0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 c017664:	e0bffe17 	ldw	r2,-8(fp)
 c017668:	e0ffff17 	ldw	r3,-4(fp)
 c01766c:	e0fffc15 	stw	r3,-16(fp)
 c017670:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 c017674:	e0bffd17 	ldw	r2,-12(fp)
 c017678:	e0fffc17 	ldw	r3,-16(fp)
 c01767c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 c017680:	e0bffc17 	ldw	r2,-16(fp)
 c017684:	10c00017 	ldw	r3,0(r2)
 c017688:	e0bffd17 	ldw	r2,-12(fp)
 c01768c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 c017690:	e0bffc17 	ldw	r2,-16(fp)
 c017694:	10800017 	ldw	r2,0(r2)
 c017698:	e0fffd17 	ldw	r3,-12(fp)
 c01769c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 c0176a0:	e0bffc17 	ldw	r2,-16(fp)
 c0176a4:	e0fffd17 	ldw	r3,-12(fp)
 c0176a8:	10c00015 	stw	r3,0(r2)

  return 0;  
 c0176ac:	0005883a 	mov	r2,zero
}
 c0176b0:	e037883a 	mov	sp,fp
 c0176b4:	dfc00117 	ldw	ra,4(sp)
 c0176b8:	df000017 	ldw	fp,0(sp)
 c0176bc:	dec00204 	addi	sp,sp,8
 c0176c0:	f800283a 	ret

0c0176c4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 c0176c4:	defffd04 	addi	sp,sp,-12
 c0176c8:	dfc00215 	stw	ra,8(sp)
 c0176cc:	df000115 	stw	fp,4(sp)
 c0176d0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 c0176d4:	008300b4 	movhi	r2,3074
 c0176d8:	10a18f04 	addi	r2,r2,-31172
 c0176dc:	e0bfff15 	stw	r2,-4(fp)
 c0176e0:	00000606 	br	c0176fc <_do_ctors+0x38>
        (*ctor) (); 
 c0176e4:	e0bfff17 	ldw	r2,-4(fp)
 c0176e8:	10800017 	ldw	r2,0(r2)
 c0176ec:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 c0176f0:	e0bfff17 	ldw	r2,-4(fp)
 c0176f4:	10bfff04 	addi	r2,r2,-4
 c0176f8:	e0bfff15 	stw	r2,-4(fp)
 c0176fc:	e0ffff17 	ldw	r3,-4(fp)
 c017700:	008300b4 	movhi	r2,3074
 c017704:	10a19004 	addi	r2,r2,-31168
 c017708:	18bff62e 	bgeu	r3,r2,c0176e4 <__alt_data_end+0xfc0176e4>
        (*ctor) (); 
}
 c01770c:	0001883a 	nop
 c017710:	e037883a 	mov	sp,fp
 c017714:	dfc00117 	ldw	ra,4(sp)
 c017718:	df000017 	ldw	fp,0(sp)
 c01771c:	dec00204 	addi	sp,sp,8
 c017720:	f800283a 	ret

0c017724 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 c017724:	defffd04 	addi	sp,sp,-12
 c017728:	dfc00215 	stw	ra,8(sp)
 c01772c:	df000115 	stw	fp,4(sp)
 c017730:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 c017734:	008300b4 	movhi	r2,3074
 c017738:	10a18f04 	addi	r2,r2,-31172
 c01773c:	e0bfff15 	stw	r2,-4(fp)
 c017740:	00000606 	br	c01775c <_do_dtors+0x38>
        (*dtor) (); 
 c017744:	e0bfff17 	ldw	r2,-4(fp)
 c017748:	10800017 	ldw	r2,0(r2)
 c01774c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 c017750:	e0bfff17 	ldw	r2,-4(fp)
 c017754:	10bfff04 	addi	r2,r2,-4
 c017758:	e0bfff15 	stw	r2,-4(fp)
 c01775c:	e0ffff17 	ldw	r3,-4(fp)
 c017760:	008300b4 	movhi	r2,3074
 c017764:	10a19004 	addi	r2,r2,-31168
 c017768:	18bff62e 	bgeu	r3,r2,c017744 <__alt_data_end+0xfc017744>
        (*dtor) (); 
}
 c01776c:	0001883a 	nop
 c017770:	e037883a 	mov	sp,fp
 c017774:	dfc00117 	ldw	ra,4(sp)
 c017778:	df000017 	ldw	fp,0(sp)
 c01777c:	dec00204 	addi	sp,sp,8
 c017780:	f800283a 	ret

0c017784 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 c017784:	deffff04 	addi	sp,sp,-4
 c017788:	df000015 	stw	fp,0(sp)
 c01778c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 c017790:	0001883a 	nop
 c017794:	e037883a 	mov	sp,fp
 c017798:	df000017 	ldw	fp,0(sp)
 c01779c:	dec00104 	addi	sp,sp,4
 c0177a0:	f800283a 	ret

0c0177a4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 c0177a4:	defff904 	addi	sp,sp,-28
 c0177a8:	dfc00615 	stw	ra,24(sp)
 c0177ac:	df000515 	stw	fp,20(sp)
 c0177b0:	df000504 	addi	fp,sp,20
 c0177b4:	e13ffc15 	stw	r4,-16(fp)
 c0177b8:	e17ffd15 	stw	r5,-12(fp)
 c0177bc:	e1bffe15 	stw	r6,-8(fp)
 c0177c0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 c0177c4:	e0800217 	ldw	r2,8(fp)
 c0177c8:	d8800015 	stw	r2,0(sp)
 c0177cc:	e1ffff17 	ldw	r7,-4(fp)
 c0177d0:	e1bffe17 	ldw	r6,-8(fp)
 c0177d4:	e17ffd17 	ldw	r5,-12(fp)
 c0177d8:	e13ffc17 	ldw	r4,-16(fp)
 c0177dc:	c0179540 	call	c017954 <alt_iic_isr_register>
}  
 c0177e0:	e037883a 	mov	sp,fp
 c0177e4:	dfc00117 	ldw	ra,4(sp)
 c0177e8:	df000017 	ldw	fp,0(sp)
 c0177ec:	dec00204 	addi	sp,sp,8
 c0177f0:	f800283a 	ret

0c0177f4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 c0177f4:	defff904 	addi	sp,sp,-28
 c0177f8:	df000615 	stw	fp,24(sp)
 c0177fc:	df000604 	addi	fp,sp,24
 c017800:	e13ffe15 	stw	r4,-8(fp)
 c017804:	e17fff15 	stw	r5,-4(fp)
 c017808:	e0bfff17 	ldw	r2,-4(fp)
 c01780c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c017810:	0005303a 	rdctl	r2,status
 c017814:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c017818:	e0fffb17 	ldw	r3,-20(fp)
 c01781c:	00bfff84 	movi	r2,-2
 c017820:	1884703a 	and	r2,r3,r2
 c017824:	1001703a 	wrctl	status,r2
  
  return context;
 c017828:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 c01782c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 c017830:	00c00044 	movi	r3,1
 c017834:	e0bffa17 	ldw	r2,-24(fp)
 c017838:	1884983a 	sll	r2,r3,r2
 c01783c:	1007883a 	mov	r3,r2
 c017840:	d0a7bd17 	ldw	r2,-24844(gp)
 c017844:	1884b03a 	or	r2,r3,r2
 c017848:	d0a7bd15 	stw	r2,-24844(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 c01784c:	d0a7bd17 	ldw	r2,-24844(gp)
 c017850:	100170fa 	wrctl	ienable,r2
 c017854:	e0bffc17 	ldw	r2,-16(fp)
 c017858:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c01785c:	e0bffd17 	ldw	r2,-12(fp)
 c017860:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 c017864:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 c017868:	0001883a 	nop
}
 c01786c:	e037883a 	mov	sp,fp
 c017870:	df000017 	ldw	fp,0(sp)
 c017874:	dec00104 	addi	sp,sp,4
 c017878:	f800283a 	ret

0c01787c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 c01787c:	defff904 	addi	sp,sp,-28
 c017880:	df000615 	stw	fp,24(sp)
 c017884:	df000604 	addi	fp,sp,24
 c017888:	e13ffe15 	stw	r4,-8(fp)
 c01788c:	e17fff15 	stw	r5,-4(fp)
 c017890:	e0bfff17 	ldw	r2,-4(fp)
 c017894:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c017898:	0005303a 	rdctl	r2,status
 c01789c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c0178a0:	e0fffb17 	ldw	r3,-20(fp)
 c0178a4:	00bfff84 	movi	r2,-2
 c0178a8:	1884703a 	and	r2,r3,r2
 c0178ac:	1001703a 	wrctl	status,r2
  
  return context;
 c0178b0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 c0178b4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 c0178b8:	00c00044 	movi	r3,1
 c0178bc:	e0bffa17 	ldw	r2,-24(fp)
 c0178c0:	1884983a 	sll	r2,r3,r2
 c0178c4:	0084303a 	nor	r2,zero,r2
 c0178c8:	1007883a 	mov	r3,r2
 c0178cc:	d0a7bd17 	ldw	r2,-24844(gp)
 c0178d0:	1884703a 	and	r2,r3,r2
 c0178d4:	d0a7bd15 	stw	r2,-24844(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 c0178d8:	d0a7bd17 	ldw	r2,-24844(gp)
 c0178dc:	100170fa 	wrctl	ienable,r2
 c0178e0:	e0bffc17 	ldw	r2,-16(fp)
 c0178e4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c0178e8:	e0bffd17 	ldw	r2,-12(fp)
 c0178ec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 c0178f0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 c0178f4:	0001883a 	nop
}
 c0178f8:	e037883a 	mov	sp,fp
 c0178fc:	df000017 	ldw	fp,0(sp)
 c017900:	dec00104 	addi	sp,sp,4
 c017904:	f800283a 	ret

0c017908 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 c017908:	defffc04 	addi	sp,sp,-16
 c01790c:	df000315 	stw	fp,12(sp)
 c017910:	df000304 	addi	fp,sp,12
 c017914:	e13ffe15 	stw	r4,-8(fp)
 c017918:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 c01791c:	000530fa 	rdctl	r2,ienable
 c017920:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 c017924:	00c00044 	movi	r3,1
 c017928:	e0bfff17 	ldw	r2,-4(fp)
 c01792c:	1884983a 	sll	r2,r3,r2
 c017930:	1007883a 	mov	r3,r2
 c017934:	e0bffd17 	ldw	r2,-12(fp)
 c017938:	1884703a 	and	r2,r3,r2
 c01793c:	1004c03a 	cmpne	r2,r2,zero
 c017940:	10803fcc 	andi	r2,r2,255
}
 c017944:	e037883a 	mov	sp,fp
 c017948:	df000017 	ldw	fp,0(sp)
 c01794c:	dec00104 	addi	sp,sp,4
 c017950:	f800283a 	ret

0c017954 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 c017954:	defff504 	addi	sp,sp,-44
 c017958:	dfc00a15 	stw	ra,40(sp)
 c01795c:	df000915 	stw	fp,36(sp)
 c017960:	df000904 	addi	fp,sp,36
 c017964:	e13ffc15 	stw	r4,-16(fp)
 c017968:	e17ffd15 	stw	r5,-12(fp)
 c01796c:	e1bffe15 	stw	r6,-8(fp)
 c017970:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 c017974:	00bffa84 	movi	r2,-22
 c017978:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 c01797c:	e0bffd17 	ldw	r2,-12(fp)
 c017980:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 c017984:	e0bff817 	ldw	r2,-32(fp)
 c017988:	10800808 	cmpgei	r2,r2,32
 c01798c:	1000271e 	bne	r2,zero,c017a2c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c017990:	0005303a 	rdctl	r2,status
 c017994:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c017998:	e0fffb17 	ldw	r3,-20(fp)
 c01799c:	00bfff84 	movi	r2,-2
 c0179a0:	1884703a 	and	r2,r3,r2
 c0179a4:	1001703a 	wrctl	status,r2
  
  return context;
 c0179a8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 c0179ac:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 c0179b0:	008300b4 	movhi	r2,3074
 c0179b4:	10b2e004 	addi	r2,r2,-13440
 c0179b8:	e0fff817 	ldw	r3,-32(fp)
 c0179bc:	180690fa 	slli	r3,r3,3
 c0179c0:	10c5883a 	add	r2,r2,r3
 c0179c4:	e0fffe17 	ldw	r3,-8(fp)
 c0179c8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 c0179cc:	008300b4 	movhi	r2,3074
 c0179d0:	10b2e004 	addi	r2,r2,-13440
 c0179d4:	e0fff817 	ldw	r3,-32(fp)
 c0179d8:	180690fa 	slli	r3,r3,3
 c0179dc:	10c5883a 	add	r2,r2,r3
 c0179e0:	10800104 	addi	r2,r2,4
 c0179e4:	e0ffff17 	ldw	r3,-4(fp)
 c0179e8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 c0179ec:	e0bffe17 	ldw	r2,-8(fp)
 c0179f0:	10000526 	beq	r2,zero,c017a08 <alt_iic_isr_register+0xb4>
 c0179f4:	e0bff817 	ldw	r2,-32(fp)
 c0179f8:	100b883a 	mov	r5,r2
 c0179fc:	e13ffc17 	ldw	r4,-16(fp)
 c017a00:	c0177f40 	call	c0177f4 <alt_ic_irq_enable>
 c017a04:	00000406 	br	c017a18 <alt_iic_isr_register+0xc4>
 c017a08:	e0bff817 	ldw	r2,-32(fp)
 c017a0c:	100b883a 	mov	r5,r2
 c017a10:	e13ffc17 	ldw	r4,-16(fp)
 c017a14:	c01787c0 	call	c01787c <alt_ic_irq_disable>
 c017a18:	e0bff715 	stw	r2,-36(fp)
 c017a1c:	e0bffa17 	ldw	r2,-24(fp)
 c017a20:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c017a24:	e0bff917 	ldw	r2,-28(fp)
 c017a28:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 c017a2c:	e0bff717 	ldw	r2,-36(fp)
}
 c017a30:	e037883a 	mov	sp,fp
 c017a34:	dfc00117 	ldw	ra,4(sp)
 c017a38:	df000017 	ldw	fp,0(sp)
 c017a3c:	dec00204 	addi	sp,sp,8
 c017a40:	f800283a 	ret

0c017a44 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 c017a44:	defff804 	addi	sp,sp,-32
 c017a48:	dfc00715 	stw	ra,28(sp)
 c017a4c:	df000615 	stw	fp,24(sp)
 c017a50:	dc000515 	stw	r16,20(sp)
 c017a54:	df000604 	addi	fp,sp,24
 c017a58:	e13ffb15 	stw	r4,-20(fp)
 c017a5c:	e17ffc15 	stw	r5,-16(fp)
 c017a60:	e1bffd15 	stw	r6,-12(fp)
 c017a64:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 c017a68:	e1bffe17 	ldw	r6,-8(fp)
 c017a6c:	e17ffd17 	ldw	r5,-12(fp)
 c017a70:	e13ffc17 	ldw	r4,-16(fp)
 c017a74:	c017ccc0 	call	c017ccc <open>
 c017a78:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 c017a7c:	e0bffa17 	ldw	r2,-24(fp)
 c017a80:	10002216 	blt	r2,zero,c017b0c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 c017a84:	040300b4 	movhi	r16,3074
 c017a88:	84264304 	addi	r16,r16,-26356
 c017a8c:	e0bffa17 	ldw	r2,-24(fp)
 c017a90:	01400304 	movi	r5,12
 c017a94:	1009883a 	mov	r4,r2
 c017a98:	c004c7c0 	call	c004c7c <__mulsi3>
 c017a9c:	8085883a 	add	r2,r16,r2
 c017aa0:	10c00017 	ldw	r3,0(r2)
 c017aa4:	e0bffb17 	ldw	r2,-20(fp)
 c017aa8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 c017aac:	040300b4 	movhi	r16,3074
 c017ab0:	84264304 	addi	r16,r16,-26356
 c017ab4:	e0bffa17 	ldw	r2,-24(fp)
 c017ab8:	01400304 	movi	r5,12
 c017abc:	1009883a 	mov	r4,r2
 c017ac0:	c004c7c0 	call	c004c7c <__mulsi3>
 c017ac4:	8085883a 	add	r2,r16,r2
 c017ac8:	10800104 	addi	r2,r2,4
 c017acc:	10c00017 	ldw	r3,0(r2)
 c017ad0:	e0bffb17 	ldw	r2,-20(fp)
 c017ad4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 c017ad8:	040300b4 	movhi	r16,3074
 c017adc:	84264304 	addi	r16,r16,-26356
 c017ae0:	e0bffa17 	ldw	r2,-24(fp)
 c017ae4:	01400304 	movi	r5,12
 c017ae8:	1009883a 	mov	r4,r2
 c017aec:	c004c7c0 	call	c004c7c <__mulsi3>
 c017af0:	8085883a 	add	r2,r16,r2
 c017af4:	10800204 	addi	r2,r2,8
 c017af8:	10c00017 	ldw	r3,0(r2)
 c017afc:	e0bffb17 	ldw	r2,-20(fp)
 c017b00:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 c017b04:	e13ffa17 	ldw	r4,-24(fp)
 c017b08:	c0160d40 	call	c0160d4 <alt_release_fd>
  }
} 
 c017b0c:	0001883a 	nop
 c017b10:	e6ffff04 	addi	sp,fp,-4
 c017b14:	dfc00217 	ldw	ra,8(sp)
 c017b18:	df000117 	ldw	fp,4(sp)
 c017b1c:	dc000017 	ldw	r16,0(sp)
 c017b20:	dec00304 	addi	sp,sp,12
 c017b24:	f800283a 	ret

0c017b28 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 c017b28:	defffb04 	addi	sp,sp,-20
 c017b2c:	dfc00415 	stw	ra,16(sp)
 c017b30:	df000315 	stw	fp,12(sp)
 c017b34:	df000304 	addi	fp,sp,12
 c017b38:	e13ffd15 	stw	r4,-12(fp)
 c017b3c:	e17ffe15 	stw	r5,-8(fp)
 c017b40:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 c017b44:	01c07fc4 	movi	r7,511
 c017b48:	01800044 	movi	r6,1
 c017b4c:	e17ffd17 	ldw	r5,-12(fp)
 c017b50:	010300b4 	movhi	r4,3074
 c017b54:	21264604 	addi	r4,r4,-26344
 c017b58:	c017a440 	call	c017a44 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 c017b5c:	01c07fc4 	movi	r7,511
 c017b60:	000d883a 	mov	r6,zero
 c017b64:	e17ffe17 	ldw	r5,-8(fp)
 c017b68:	010300b4 	movhi	r4,3074
 c017b6c:	21264304 	addi	r4,r4,-26356
 c017b70:	c017a440 	call	c017a44 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 c017b74:	01c07fc4 	movi	r7,511
 c017b78:	01800044 	movi	r6,1
 c017b7c:	e17fff17 	ldw	r5,-4(fp)
 c017b80:	010300b4 	movhi	r4,3074
 c017b84:	21264904 	addi	r4,r4,-26332
 c017b88:	c017a440 	call	c017a44 <alt_open_fd>
}  
 c017b8c:	0001883a 	nop
 c017b90:	e037883a 	mov	sp,fp
 c017b94:	dfc00117 	ldw	ra,4(sp)
 c017b98:	df000017 	ldw	fp,0(sp)
 c017b9c:	dec00204 	addi	sp,sp,8
 c017ba0:	f800283a 	ret

0c017ba4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c017ba4:	defffe04 	addi	sp,sp,-8
 c017ba8:	dfc00115 	stw	ra,4(sp)
 c017bac:	df000015 	stw	fp,0(sp)
 c017bb0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c017bb4:	d0a01517 	ldw	r2,-32684(gp)
 c017bb8:	10000326 	beq	r2,zero,c017bc8 <alt_get_errno+0x24>
 c017bbc:	d0a01517 	ldw	r2,-32684(gp)
 c017bc0:	103ee83a 	callr	r2
 c017bc4:	00000106 	br	c017bcc <alt_get_errno+0x28>
 c017bc8:	d0a7b004 	addi	r2,gp,-24896
}
 c017bcc:	e037883a 	mov	sp,fp
 c017bd0:	dfc00117 	ldw	ra,4(sp)
 c017bd4:	df000017 	ldw	fp,0(sp)
 c017bd8:	dec00204 	addi	sp,sp,8
 c017bdc:	f800283a 	ret

0c017be0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 c017be0:	defffb04 	addi	sp,sp,-20
 c017be4:	dfc00415 	stw	ra,16(sp)
 c017be8:	df000315 	stw	fp,12(sp)
 c017bec:	dc000215 	stw	r16,8(sp)
 c017bf0:	df000304 	addi	fp,sp,12
 c017bf4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 c017bf8:	e0bffe17 	ldw	r2,-8(fp)
 c017bfc:	10800217 	ldw	r2,8(r2)
 c017c00:	10d00034 	orhi	r3,r2,16384
 c017c04:	e0bffe17 	ldw	r2,-8(fp)
 c017c08:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 c017c0c:	e03ffd15 	stw	zero,-12(fp)
 c017c10:	00002306 	br	c017ca0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 c017c14:	040300b4 	movhi	r16,3074
 c017c18:	84264304 	addi	r16,r16,-26356
 c017c1c:	e0bffd17 	ldw	r2,-12(fp)
 c017c20:	01400304 	movi	r5,12
 c017c24:	1009883a 	mov	r4,r2
 c017c28:	c004c7c0 	call	c004c7c <__mulsi3>
 c017c2c:	8085883a 	add	r2,r16,r2
 c017c30:	10c00017 	ldw	r3,0(r2)
 c017c34:	e0bffe17 	ldw	r2,-8(fp)
 c017c38:	10800017 	ldw	r2,0(r2)
 c017c3c:	1880151e 	bne	r3,r2,c017c94 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 c017c40:	040300b4 	movhi	r16,3074
 c017c44:	84264304 	addi	r16,r16,-26356
 c017c48:	e0bffd17 	ldw	r2,-12(fp)
 c017c4c:	01400304 	movi	r5,12
 c017c50:	1009883a 	mov	r4,r2
 c017c54:	c004c7c0 	call	c004c7c <__mulsi3>
 c017c58:	8085883a 	add	r2,r16,r2
 c017c5c:	10800204 	addi	r2,r2,8
 c017c60:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 c017c64:	10000b0e 	bge	r2,zero,c017c94 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 c017c68:	01400304 	movi	r5,12
 c017c6c:	e13ffd17 	ldw	r4,-12(fp)
 c017c70:	c004c7c0 	call	c004c7c <__mulsi3>
 c017c74:	1007883a 	mov	r3,r2
 c017c78:	008300b4 	movhi	r2,3074
 c017c7c:	10a64304 	addi	r2,r2,-26356
 c017c80:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 c017c84:	e0bffe17 	ldw	r2,-8(fp)
 c017c88:	18800226 	beq	r3,r2,c017c94 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 c017c8c:	00bffcc4 	movi	r2,-13
 c017c90:	00000806 	br	c017cb4 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 c017c94:	e0bffd17 	ldw	r2,-12(fp)
 c017c98:	10800044 	addi	r2,r2,1
 c017c9c:	e0bffd15 	stw	r2,-12(fp)
 c017ca0:	d0a01417 	ldw	r2,-32688(gp)
 c017ca4:	1007883a 	mov	r3,r2
 c017ca8:	e0bffd17 	ldw	r2,-12(fp)
 c017cac:	18bfd92e 	bgeu	r3,r2,c017c14 <__alt_data_end+0xfc017c14>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 c017cb0:	0005883a 	mov	r2,zero
}
 c017cb4:	e6ffff04 	addi	sp,fp,-4
 c017cb8:	dfc00217 	ldw	ra,8(sp)
 c017cbc:	df000117 	ldw	fp,4(sp)
 c017cc0:	dc000017 	ldw	r16,0(sp)
 c017cc4:	dec00304 	addi	sp,sp,12
 c017cc8:	f800283a 	ret

0c017ccc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 c017ccc:	defff604 	addi	sp,sp,-40
 c017cd0:	dfc00915 	stw	ra,36(sp)
 c017cd4:	df000815 	stw	fp,32(sp)
 c017cd8:	df000804 	addi	fp,sp,32
 c017cdc:	e13ffd15 	stw	r4,-12(fp)
 c017ce0:	e17ffe15 	stw	r5,-8(fp)
 c017ce4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 c017ce8:	00bfffc4 	movi	r2,-1
 c017cec:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 c017cf0:	00bffb44 	movi	r2,-19
 c017cf4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 c017cf8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 c017cfc:	d1601204 	addi	r5,gp,-32696
 c017d00:	e13ffd17 	ldw	r4,-12(fp)
 c017d04:	c017e4c0 	call	c017e4c <alt_find_dev>
 c017d08:	e0bff815 	stw	r2,-32(fp)
 c017d0c:	e0bff817 	ldw	r2,-32(fp)
 c017d10:	1000051e 	bne	r2,zero,c017d28 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 c017d14:	e13ffd17 	ldw	r4,-12(fp)
 c017d18:	c017edc0 	call	c017edc <alt_find_file>
 c017d1c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 c017d20:	00800044 	movi	r2,1
 c017d24:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 c017d28:	e0bff817 	ldw	r2,-32(fp)
 c017d2c:	10002b26 	beq	r2,zero,c017ddc <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 c017d30:	e13ff817 	ldw	r4,-32(fp)
 c017d34:	c017fe40 	call	c017fe4 <alt_get_fd>
 c017d38:	e0bff915 	stw	r2,-28(fp)
 c017d3c:	e0bff917 	ldw	r2,-28(fp)
 c017d40:	1000030e 	bge	r2,zero,c017d50 <open+0x84>
    {
      status = index;
 c017d44:	e0bff917 	ldw	r2,-28(fp)
 c017d48:	e0bffa15 	stw	r2,-24(fp)
 c017d4c:	00002506 	br	c017de4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 c017d50:	01400304 	movi	r5,12
 c017d54:	e13ff917 	ldw	r4,-28(fp)
 c017d58:	c004c7c0 	call	c004c7c <__mulsi3>
 c017d5c:	1007883a 	mov	r3,r2
 c017d60:	008300b4 	movhi	r2,3074
 c017d64:	10a64304 	addi	r2,r2,-26356
 c017d68:	1885883a 	add	r2,r3,r2
 c017d6c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 c017d70:	e0fffe17 	ldw	r3,-8(fp)
 c017d74:	00900034 	movhi	r2,16384
 c017d78:	10bfffc4 	addi	r2,r2,-1
 c017d7c:	1886703a 	and	r3,r3,r2
 c017d80:	e0bffc17 	ldw	r2,-16(fp)
 c017d84:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 c017d88:	e0bffb17 	ldw	r2,-20(fp)
 c017d8c:	1000051e 	bne	r2,zero,c017da4 <open+0xd8>
 c017d90:	e13ffc17 	ldw	r4,-16(fp)
 c017d94:	c017be00 	call	c017be0 <alt_file_locked>
 c017d98:	e0bffa15 	stw	r2,-24(fp)
 c017d9c:	e0bffa17 	ldw	r2,-24(fp)
 c017da0:	10001016 	blt	r2,zero,c017de4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 c017da4:	e0bff817 	ldw	r2,-32(fp)
 c017da8:	10800317 	ldw	r2,12(r2)
 c017dac:	10000826 	beq	r2,zero,c017dd0 <open+0x104>
 c017db0:	e0bff817 	ldw	r2,-32(fp)
 c017db4:	10800317 	ldw	r2,12(r2)
 c017db8:	e1ffff17 	ldw	r7,-4(fp)
 c017dbc:	e1bffe17 	ldw	r6,-8(fp)
 c017dc0:	e17ffd17 	ldw	r5,-12(fp)
 c017dc4:	e13ffc17 	ldw	r4,-16(fp)
 c017dc8:	103ee83a 	callr	r2
 c017dcc:	00000106 	br	c017dd4 <open+0x108>
 c017dd0:	0005883a 	mov	r2,zero
 c017dd4:	e0bffa15 	stw	r2,-24(fp)
 c017dd8:	00000206 	br	c017de4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 c017ddc:	00bffb44 	movi	r2,-19
 c017de0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 c017de4:	e0bffa17 	ldw	r2,-24(fp)
 c017de8:	1000090e 	bge	r2,zero,c017e10 <open+0x144>
  {
    alt_release_fd (index);  
 c017dec:	e13ff917 	ldw	r4,-28(fp)
 c017df0:	c0160d40 	call	c0160d4 <alt_release_fd>
    ALT_ERRNO = -status;
 c017df4:	c017ba40 	call	c017ba4 <alt_get_errno>
 c017df8:	1007883a 	mov	r3,r2
 c017dfc:	e0bffa17 	ldw	r2,-24(fp)
 c017e00:	0085c83a 	sub	r2,zero,r2
 c017e04:	18800015 	stw	r2,0(r3)
    return -1;
 c017e08:	00bfffc4 	movi	r2,-1
 c017e0c:	00000106 	br	c017e14 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 c017e10:	e0bff917 	ldw	r2,-28(fp)
}
 c017e14:	e037883a 	mov	sp,fp
 c017e18:	dfc00117 	ldw	ra,4(sp)
 c017e1c:	df000017 	ldw	fp,0(sp)
 c017e20:	dec00204 	addi	sp,sp,8
 c017e24:	f800283a 	ret

0c017e28 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 c017e28:	deffff04 	addi	sp,sp,-4
 c017e2c:	df000015 	stw	fp,0(sp)
 c017e30:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 c017e34:	000170fa 	wrctl	ienable,zero
}
 c017e38:	0001883a 	nop
 c017e3c:	e037883a 	mov	sp,fp
 c017e40:	df000017 	ldw	fp,0(sp)
 c017e44:	dec00104 	addi	sp,sp,4
 c017e48:	f800283a 	ret

0c017e4c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 c017e4c:	defffa04 	addi	sp,sp,-24
 c017e50:	dfc00515 	stw	ra,20(sp)
 c017e54:	df000415 	stw	fp,16(sp)
 c017e58:	df000404 	addi	fp,sp,16
 c017e5c:	e13ffe15 	stw	r4,-8(fp)
 c017e60:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 c017e64:	e0bfff17 	ldw	r2,-4(fp)
 c017e68:	10800017 	ldw	r2,0(r2)
 c017e6c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 c017e70:	e13ffe17 	ldw	r4,-8(fp)
 c017e74:	c0058f40 	call	c0058f4 <strlen>
 c017e78:	10800044 	addi	r2,r2,1
 c017e7c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 c017e80:	00000d06 	br	c017eb8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 c017e84:	e0bffc17 	ldw	r2,-16(fp)
 c017e88:	10800217 	ldw	r2,8(r2)
 c017e8c:	e0fffd17 	ldw	r3,-12(fp)
 c017e90:	180d883a 	mov	r6,r3
 c017e94:	e17ffe17 	ldw	r5,-8(fp)
 c017e98:	1009883a 	mov	r4,r2
 c017e9c:	c0181900 	call	c018190 <memcmp>
 c017ea0:	1000021e 	bne	r2,zero,c017eac <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 c017ea4:	e0bffc17 	ldw	r2,-16(fp)
 c017ea8:	00000706 	br	c017ec8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 c017eac:	e0bffc17 	ldw	r2,-16(fp)
 c017eb0:	10800017 	ldw	r2,0(r2)
 c017eb4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 c017eb8:	e0fffc17 	ldw	r3,-16(fp)
 c017ebc:	e0bfff17 	ldw	r2,-4(fp)
 c017ec0:	18bff01e 	bne	r3,r2,c017e84 <__alt_data_end+0xfc017e84>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 c017ec4:	0005883a 	mov	r2,zero
}
 c017ec8:	e037883a 	mov	sp,fp
 c017ecc:	dfc00117 	ldw	ra,4(sp)
 c017ed0:	df000017 	ldw	fp,0(sp)
 c017ed4:	dec00204 	addi	sp,sp,8
 c017ed8:	f800283a 	ret

0c017edc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 c017edc:	defffb04 	addi	sp,sp,-20
 c017ee0:	dfc00415 	stw	ra,16(sp)
 c017ee4:	df000315 	stw	fp,12(sp)
 c017ee8:	df000304 	addi	fp,sp,12
 c017eec:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 c017ef0:	d0a01017 	ldw	r2,-32704(gp)
 c017ef4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 c017ef8:	00003106 	br	c017fc0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 c017efc:	e0bffd17 	ldw	r2,-12(fp)
 c017f00:	10800217 	ldw	r2,8(r2)
 c017f04:	1009883a 	mov	r4,r2
 c017f08:	c0058f40 	call	c0058f4 <strlen>
 c017f0c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 c017f10:	e0bffd17 	ldw	r2,-12(fp)
 c017f14:	10c00217 	ldw	r3,8(r2)
 c017f18:	e0bffe17 	ldw	r2,-8(fp)
 c017f1c:	10bfffc4 	addi	r2,r2,-1
 c017f20:	1885883a 	add	r2,r3,r2
 c017f24:	10800003 	ldbu	r2,0(r2)
 c017f28:	10803fcc 	andi	r2,r2,255
 c017f2c:	1080201c 	xori	r2,r2,128
 c017f30:	10bfe004 	addi	r2,r2,-128
 c017f34:	10800bd8 	cmpnei	r2,r2,47
 c017f38:	1000031e 	bne	r2,zero,c017f48 <alt_find_file+0x6c>
    {
      len -= 1;
 c017f3c:	e0bffe17 	ldw	r2,-8(fp)
 c017f40:	10bfffc4 	addi	r2,r2,-1
 c017f44:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 c017f48:	e0bffe17 	ldw	r2,-8(fp)
 c017f4c:	e0ffff17 	ldw	r3,-4(fp)
 c017f50:	1885883a 	add	r2,r3,r2
 c017f54:	10800003 	ldbu	r2,0(r2)
 c017f58:	10803fcc 	andi	r2,r2,255
 c017f5c:	1080201c 	xori	r2,r2,128
 c017f60:	10bfe004 	addi	r2,r2,-128
 c017f64:	10800be0 	cmpeqi	r2,r2,47
 c017f68:	1000081e 	bne	r2,zero,c017f8c <alt_find_file+0xb0>
 c017f6c:	e0bffe17 	ldw	r2,-8(fp)
 c017f70:	e0ffff17 	ldw	r3,-4(fp)
 c017f74:	1885883a 	add	r2,r3,r2
 c017f78:	10800003 	ldbu	r2,0(r2)
 c017f7c:	10803fcc 	andi	r2,r2,255
 c017f80:	1080201c 	xori	r2,r2,128
 c017f84:	10bfe004 	addi	r2,r2,-128
 c017f88:	10000a1e 	bne	r2,zero,c017fb4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 c017f8c:	e0bffd17 	ldw	r2,-12(fp)
 c017f90:	10800217 	ldw	r2,8(r2)
 c017f94:	e0fffe17 	ldw	r3,-8(fp)
 c017f98:	180d883a 	mov	r6,r3
 c017f9c:	e17fff17 	ldw	r5,-4(fp)
 c017fa0:	1009883a 	mov	r4,r2
 c017fa4:	c0181900 	call	c018190 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 c017fa8:	1000021e 	bne	r2,zero,c017fb4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 c017fac:	e0bffd17 	ldw	r2,-12(fp)
 c017fb0:	00000706 	br	c017fd0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 c017fb4:	e0bffd17 	ldw	r2,-12(fp)
 c017fb8:	10800017 	ldw	r2,0(r2)
 c017fbc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 c017fc0:	e0fffd17 	ldw	r3,-12(fp)
 c017fc4:	d0a01004 	addi	r2,gp,-32704
 c017fc8:	18bfcc1e 	bne	r3,r2,c017efc <__alt_data_end+0xfc017efc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 c017fcc:	0005883a 	mov	r2,zero
}
 c017fd0:	e037883a 	mov	sp,fp
 c017fd4:	dfc00117 	ldw	ra,4(sp)
 c017fd8:	df000017 	ldw	fp,0(sp)
 c017fdc:	dec00204 	addi	sp,sp,8
 c017fe0:	f800283a 	ret

0c017fe4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 c017fe4:	defffa04 	addi	sp,sp,-24
 c017fe8:	dfc00515 	stw	ra,20(sp)
 c017fec:	df000415 	stw	fp,16(sp)
 c017ff0:	dc000315 	stw	r16,12(sp)
 c017ff4:	df000404 	addi	fp,sp,16
 c017ff8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 c017ffc:	00bffa04 	movi	r2,-24
 c018000:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 c018004:	e03ffc15 	stw	zero,-16(fp)
 c018008:	00001d06 	br	c018080 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 c01800c:	040300b4 	movhi	r16,3074
 c018010:	84264304 	addi	r16,r16,-26356
 c018014:	e0bffc17 	ldw	r2,-16(fp)
 c018018:	01400304 	movi	r5,12
 c01801c:	1009883a 	mov	r4,r2
 c018020:	c004c7c0 	call	c004c7c <__mulsi3>
 c018024:	8085883a 	add	r2,r16,r2
 c018028:	10800017 	ldw	r2,0(r2)
 c01802c:	1000111e 	bne	r2,zero,c018074 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 c018030:	040300b4 	movhi	r16,3074
 c018034:	84264304 	addi	r16,r16,-26356
 c018038:	e0bffc17 	ldw	r2,-16(fp)
 c01803c:	01400304 	movi	r5,12
 c018040:	1009883a 	mov	r4,r2
 c018044:	c004c7c0 	call	c004c7c <__mulsi3>
 c018048:	8085883a 	add	r2,r16,r2
 c01804c:	e0fffe17 	ldw	r3,-8(fp)
 c018050:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 c018054:	d0e01417 	ldw	r3,-32688(gp)
 c018058:	e0bffc17 	ldw	r2,-16(fp)
 c01805c:	1880020e 	bge	r3,r2,c018068 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 c018060:	e0bffc17 	ldw	r2,-16(fp)
 c018064:	d0a01415 	stw	r2,-32688(gp)
      }
      rc = i;
 c018068:	e0bffc17 	ldw	r2,-16(fp)
 c01806c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 c018070:	00000606 	br	c01808c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 c018074:	e0bffc17 	ldw	r2,-16(fp)
 c018078:	10800044 	addi	r2,r2,1
 c01807c:	e0bffc15 	stw	r2,-16(fp)
 c018080:	e0bffc17 	ldw	r2,-16(fp)
 c018084:	10800810 	cmplti	r2,r2,32
 c018088:	103fe01e 	bne	r2,zero,c01800c <__alt_data_end+0xfc01800c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 c01808c:	e0bffd17 	ldw	r2,-12(fp)
}
 c018090:	e6ffff04 	addi	sp,fp,-4
 c018094:	dfc00217 	ldw	ra,8(sp)
 c018098:	df000117 	ldw	fp,4(sp)
 c01809c:	dc000017 	ldw	r16,0(sp)
 c0180a0:	dec00304 	addi	sp,sp,12
 c0180a4:	f800283a 	ret

0c0180a8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 c0180a8:	defffe04 	addi	sp,sp,-8
 c0180ac:	df000115 	stw	fp,4(sp)
 c0180b0:	df000104 	addi	fp,sp,4
 c0180b4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 c0180b8:	e0bfff17 	ldw	r2,-4(fp)
 c0180bc:	10bffe84 	addi	r2,r2,-6
 c0180c0:	10c00428 	cmpgeui	r3,r2,16
 c0180c4:	18001a1e 	bne	r3,zero,c018130 <alt_exception_cause_generated_bad_addr+0x88>
 c0180c8:	100690ba 	slli	r3,r2,2
 c0180cc:	008300b4 	movhi	r2,3074
 c0180d0:	10a03804 	addi	r2,r2,-32544
 c0180d4:	1885883a 	add	r2,r3,r2
 c0180d8:	10800017 	ldw	r2,0(r2)
 c0180dc:	1000683a 	jmp	r2
 c0180e0:	0c018120 	cmpeqi	r16,at,1540
 c0180e4:	0c018120 	cmpeqi	r16,at,1540
 c0180e8:	0c018130 	cmpltui	r16,at,1540
 c0180ec:	0c018130 	cmpltui	r16,at,1540
 c0180f0:	0c018130 	cmpltui	r16,at,1540
 c0180f4:	0c018120 	cmpeqi	r16,at,1540
 c0180f8:	0c018128 	cmpgeui	r16,at,1540
 c0180fc:	0c018130 	cmpltui	r16,at,1540
 c018100:	0c018120 	cmpeqi	r16,at,1540
 c018104:	0c018120 	cmpeqi	r16,at,1540
 c018108:	0c018130 	cmpltui	r16,at,1540
 c01810c:	0c018120 	cmpeqi	r16,at,1540
 c018110:	0c018128 	cmpgeui	r16,at,1540
 c018114:	0c018130 	cmpltui	r16,at,1540
 c018118:	0c018130 	cmpltui	r16,at,1540
 c01811c:	0c018120 	cmpeqi	r16,at,1540
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 c018120:	00800044 	movi	r2,1
 c018124:	00000306 	br	c018134 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 c018128:	0005883a 	mov	r2,zero
 c01812c:	00000106 	br	c018134 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 c018130:	0005883a 	mov	r2,zero
  }
}
 c018134:	e037883a 	mov	sp,fp
 c018138:	df000017 	ldw	fp,0(sp)
 c01813c:	dec00104 	addi	sp,sp,4
 c018140:	f800283a 	ret

0c018144 <atexit>:
 c018144:	200b883a 	mov	r5,r4
 c018148:	000f883a 	mov	r7,zero
 c01814c:	000d883a 	mov	r6,zero
 c018150:	0009883a 	mov	r4,zero
 c018154:	c0183741 	jmpi	c018374 <__register_exitproc>

0c018158 <exit>:
 c018158:	defffe04 	addi	sp,sp,-8
 c01815c:	000b883a 	mov	r5,zero
 c018160:	dc000015 	stw	r16,0(sp)
 c018164:	dfc00115 	stw	ra,4(sp)
 c018168:	2021883a 	mov	r16,r4
 c01816c:	c01848c0 	call	c01848c <__call_exitprocs>
 c018170:	008300b4 	movhi	r2,3074
 c018174:	10aac704 	addi	r2,r2,-21732
 c018178:	11000017 	ldw	r4,0(r2)
 c01817c:	20800f17 	ldw	r2,60(r4)
 c018180:	10000126 	beq	r2,zero,c018188 <exit+0x30>
 c018184:	103ee83a 	callr	r2
 c018188:	8009883a 	mov	r4,r16
 c01818c:	c01860c0 	call	c01860c <_exit>

0c018190 <memcmp>:
 c018190:	01c000c4 	movi	r7,3
 c018194:	3980192e 	bgeu	r7,r6,c0181fc <memcmp+0x6c>
 c018198:	2144b03a 	or	r2,r4,r5
 c01819c:	11c4703a 	and	r2,r2,r7
 c0181a0:	10000f26 	beq	r2,zero,c0181e0 <memcmp+0x50>
 c0181a4:	20800003 	ldbu	r2,0(r4)
 c0181a8:	28c00003 	ldbu	r3,0(r5)
 c0181ac:	10c0151e 	bne	r2,r3,c018204 <memcmp+0x74>
 c0181b0:	31bfff84 	addi	r6,r6,-2
 c0181b4:	01ffffc4 	movi	r7,-1
 c0181b8:	00000406 	br	c0181cc <memcmp+0x3c>
 c0181bc:	20800003 	ldbu	r2,0(r4)
 c0181c0:	28c00003 	ldbu	r3,0(r5)
 c0181c4:	31bfffc4 	addi	r6,r6,-1
 c0181c8:	10c00e1e 	bne	r2,r3,c018204 <memcmp+0x74>
 c0181cc:	21000044 	addi	r4,r4,1
 c0181d0:	29400044 	addi	r5,r5,1
 c0181d4:	31fff91e 	bne	r6,r7,c0181bc <__alt_data_end+0xfc0181bc>
 c0181d8:	0005883a 	mov	r2,zero
 c0181dc:	f800283a 	ret
 c0181e0:	20c00017 	ldw	r3,0(r4)
 c0181e4:	28800017 	ldw	r2,0(r5)
 c0181e8:	18bfee1e 	bne	r3,r2,c0181a4 <__alt_data_end+0xfc0181a4>
 c0181ec:	31bfff04 	addi	r6,r6,-4
 c0181f0:	21000104 	addi	r4,r4,4
 c0181f4:	29400104 	addi	r5,r5,4
 c0181f8:	39bff936 	bltu	r7,r6,c0181e0 <__alt_data_end+0xfc0181e0>
 c0181fc:	303fe91e 	bne	r6,zero,c0181a4 <__alt_data_end+0xfc0181a4>
 c018200:	003ff506 	br	c0181d8 <__alt_data_end+0xfc0181d8>
 c018204:	10c5c83a 	sub	r2,r2,r3
 c018208:	f800283a 	ret

0c01820c <_putc_r>:
 c01820c:	defffc04 	addi	sp,sp,-16
 c018210:	dc000215 	stw	r16,8(sp)
 c018214:	dfc00315 	stw	ra,12(sp)
 c018218:	2021883a 	mov	r16,r4
 c01821c:	20000226 	beq	r4,zero,c018228 <_putc_r+0x1c>
 c018220:	20800e17 	ldw	r2,56(r4)
 c018224:	10001b26 	beq	r2,zero,c018294 <_putc_r+0x88>
 c018228:	30800217 	ldw	r2,8(r6)
 c01822c:	10bfffc4 	addi	r2,r2,-1
 c018230:	30800215 	stw	r2,8(r6)
 c018234:	10000a16 	blt	r2,zero,c018260 <_putc_r+0x54>
 c018238:	30800017 	ldw	r2,0(r6)
 c01823c:	11400005 	stb	r5,0(r2)
 c018240:	30800017 	ldw	r2,0(r6)
 c018244:	10c00044 	addi	r3,r2,1
 c018248:	30c00015 	stw	r3,0(r6)
 c01824c:	10800003 	ldbu	r2,0(r2)
 c018250:	dfc00317 	ldw	ra,12(sp)
 c018254:	dc000217 	ldw	r16,8(sp)
 c018258:	dec00404 	addi	sp,sp,16
 c01825c:	f800283a 	ret
 c018260:	30c00617 	ldw	r3,24(r6)
 c018264:	10c00616 	blt	r2,r3,c018280 <_putc_r+0x74>
 c018268:	30800017 	ldw	r2,0(r6)
 c01826c:	00c00284 	movi	r3,10
 c018270:	11400005 	stb	r5,0(r2)
 c018274:	30800017 	ldw	r2,0(r6)
 c018278:	11400003 	ldbu	r5,0(r2)
 c01827c:	28fff11e 	bne	r5,r3,c018244 <__alt_data_end+0xfc018244>
 c018280:	8009883a 	mov	r4,r16
 c018284:	dfc00317 	ldw	ra,12(sp)
 c018288:	dc000217 	ldw	r16,8(sp)
 c01828c:	dec00404 	addi	sp,sp,16
 c018290:	c011ca41 	jmpi	c011ca4 <__swbuf_r>
 c018294:	d9400015 	stw	r5,0(sp)
 c018298:	d9800115 	stw	r6,4(sp)
 c01829c:	c00c0580 	call	c00c058 <__sinit>
 c0182a0:	d9800117 	ldw	r6,4(sp)
 c0182a4:	d9400017 	ldw	r5,0(sp)
 c0182a8:	003fdf06 	br	c018228 <__alt_data_end+0xfc018228>

0c0182ac <putc>:
 c0182ac:	008300b4 	movhi	r2,3074
 c0182b0:	defffc04 	addi	sp,sp,-16
 c0182b4:	10aac804 	addi	r2,r2,-21728
 c0182b8:	dc000115 	stw	r16,4(sp)
 c0182bc:	14000017 	ldw	r16,0(r2)
 c0182c0:	dc400215 	stw	r17,8(sp)
 c0182c4:	dfc00315 	stw	ra,12(sp)
 c0182c8:	2023883a 	mov	r17,r4
 c0182cc:	80000226 	beq	r16,zero,c0182d8 <putc+0x2c>
 c0182d0:	80800e17 	ldw	r2,56(r16)
 c0182d4:	10001a26 	beq	r2,zero,c018340 <putc+0x94>
 c0182d8:	28800217 	ldw	r2,8(r5)
 c0182dc:	10bfffc4 	addi	r2,r2,-1
 c0182e0:	28800215 	stw	r2,8(r5)
 c0182e4:	10000b16 	blt	r2,zero,c018314 <putc+0x68>
 c0182e8:	28800017 	ldw	r2,0(r5)
 c0182ec:	14400005 	stb	r17,0(r2)
 c0182f0:	28800017 	ldw	r2,0(r5)
 c0182f4:	10c00044 	addi	r3,r2,1
 c0182f8:	28c00015 	stw	r3,0(r5)
 c0182fc:	10800003 	ldbu	r2,0(r2)
 c018300:	dfc00317 	ldw	ra,12(sp)
 c018304:	dc400217 	ldw	r17,8(sp)
 c018308:	dc000117 	ldw	r16,4(sp)
 c01830c:	dec00404 	addi	sp,sp,16
 c018310:	f800283a 	ret
 c018314:	28c00617 	ldw	r3,24(r5)
 c018318:	10c00e16 	blt	r2,r3,c018354 <putc+0xa8>
 c01831c:	28800017 	ldw	r2,0(r5)
 c018320:	01000284 	movi	r4,10
 c018324:	14400005 	stb	r17,0(r2)
 c018328:	28800017 	ldw	r2,0(r5)
 c01832c:	10c00003 	ldbu	r3,0(r2)
 c018330:	193ff01e 	bne	r3,r4,c0182f4 <__alt_data_end+0xfc0182f4>
 c018334:	280d883a 	mov	r6,r5
 c018338:	180b883a 	mov	r5,r3
 c01833c:	00000706 	br	c01835c <putc+0xb0>
 c018340:	8009883a 	mov	r4,r16
 c018344:	d9400015 	stw	r5,0(sp)
 c018348:	c00c0580 	call	c00c058 <__sinit>
 c01834c:	d9400017 	ldw	r5,0(sp)
 c018350:	003fe106 	br	c0182d8 <__alt_data_end+0xfc0182d8>
 c018354:	280d883a 	mov	r6,r5
 c018358:	880b883a 	mov	r5,r17
 c01835c:	8009883a 	mov	r4,r16
 c018360:	dfc00317 	ldw	ra,12(sp)
 c018364:	dc400217 	ldw	r17,8(sp)
 c018368:	dc000117 	ldw	r16,4(sp)
 c01836c:	dec00404 	addi	sp,sp,16
 c018370:	c011ca41 	jmpi	c011ca4 <__swbuf_r>

0c018374 <__register_exitproc>:
 c018374:	defffa04 	addi	sp,sp,-24
 c018378:	dc000315 	stw	r16,12(sp)
 c01837c:	040300b4 	movhi	r16,3074
 c018380:	842ac704 	addi	r16,r16,-21732
 c018384:	80c00017 	ldw	r3,0(r16)
 c018388:	dc400415 	stw	r17,16(sp)
 c01838c:	dfc00515 	stw	ra,20(sp)
 c018390:	18805217 	ldw	r2,328(r3)
 c018394:	2023883a 	mov	r17,r4
 c018398:	10003726 	beq	r2,zero,c018478 <__register_exitproc+0x104>
 c01839c:	10c00117 	ldw	r3,4(r2)
 c0183a0:	010007c4 	movi	r4,31
 c0183a4:	20c00e16 	blt	r4,r3,c0183e0 <__register_exitproc+0x6c>
 c0183a8:	1a000044 	addi	r8,r3,1
 c0183ac:	8800221e 	bne	r17,zero,c018438 <__register_exitproc+0xc4>
 c0183b0:	18c00084 	addi	r3,r3,2
 c0183b4:	18c7883a 	add	r3,r3,r3
 c0183b8:	18c7883a 	add	r3,r3,r3
 c0183bc:	12000115 	stw	r8,4(r2)
 c0183c0:	10c7883a 	add	r3,r2,r3
 c0183c4:	19400015 	stw	r5,0(r3)
 c0183c8:	0005883a 	mov	r2,zero
 c0183cc:	dfc00517 	ldw	ra,20(sp)
 c0183d0:	dc400417 	ldw	r17,16(sp)
 c0183d4:	dc000317 	ldw	r16,12(sp)
 c0183d8:	dec00604 	addi	sp,sp,24
 c0183dc:	f800283a 	ret
 c0183e0:	00830034 	movhi	r2,3072
 c0183e4:	10932904 	addi	r2,r2,19620
 c0183e8:	10002626 	beq	r2,zero,c018484 <__register_exitproc+0x110>
 c0183ec:	01006404 	movi	r4,400
 c0183f0:	d9400015 	stw	r5,0(sp)
 c0183f4:	d9800115 	stw	r6,4(sp)
 c0183f8:	d9c00215 	stw	r7,8(sp)
 c0183fc:	c004ca40 	call	c004ca4 <malloc>
 c018400:	d9400017 	ldw	r5,0(sp)
 c018404:	d9800117 	ldw	r6,4(sp)
 c018408:	d9c00217 	ldw	r7,8(sp)
 c01840c:	10001d26 	beq	r2,zero,c018484 <__register_exitproc+0x110>
 c018410:	81000017 	ldw	r4,0(r16)
 c018414:	10000115 	stw	zero,4(r2)
 c018418:	02000044 	movi	r8,1
 c01841c:	22405217 	ldw	r9,328(r4)
 c018420:	0007883a 	mov	r3,zero
 c018424:	12400015 	stw	r9,0(r2)
 c018428:	20805215 	stw	r2,328(r4)
 c01842c:	10006215 	stw	zero,392(r2)
 c018430:	10006315 	stw	zero,396(r2)
 c018434:	883fde26 	beq	r17,zero,c0183b0 <__alt_data_end+0xfc0183b0>
 c018438:	18c9883a 	add	r4,r3,r3
 c01843c:	2109883a 	add	r4,r4,r4
 c018440:	1109883a 	add	r4,r2,r4
 c018444:	21802215 	stw	r6,136(r4)
 c018448:	01800044 	movi	r6,1
 c01844c:	12406217 	ldw	r9,392(r2)
 c018450:	30cc983a 	sll	r6,r6,r3
 c018454:	4992b03a 	or	r9,r9,r6
 c018458:	12406215 	stw	r9,392(r2)
 c01845c:	21c04215 	stw	r7,264(r4)
 c018460:	01000084 	movi	r4,2
 c018464:	893fd21e 	bne	r17,r4,c0183b0 <__alt_data_end+0xfc0183b0>
 c018468:	11006317 	ldw	r4,396(r2)
 c01846c:	218cb03a 	or	r6,r4,r6
 c018470:	11806315 	stw	r6,396(r2)
 c018474:	003fce06 	br	c0183b0 <__alt_data_end+0xfc0183b0>
 c018478:	18805304 	addi	r2,r3,332
 c01847c:	18805215 	stw	r2,328(r3)
 c018480:	003fc606 	br	c01839c <__alt_data_end+0xfc01839c>
 c018484:	00bfffc4 	movi	r2,-1
 c018488:	003fd006 	br	c0183cc <__alt_data_end+0xfc0183cc>

0c01848c <__call_exitprocs>:
 c01848c:	defff504 	addi	sp,sp,-44
 c018490:	df000915 	stw	fp,36(sp)
 c018494:	dd400615 	stw	r21,24(sp)
 c018498:	dc800315 	stw	r18,12(sp)
 c01849c:	dfc00a15 	stw	ra,40(sp)
 c0184a0:	ddc00815 	stw	r23,32(sp)
 c0184a4:	dd800715 	stw	r22,28(sp)
 c0184a8:	dd000515 	stw	r20,20(sp)
 c0184ac:	dcc00415 	stw	r19,16(sp)
 c0184b0:	dc400215 	stw	r17,8(sp)
 c0184b4:	dc000115 	stw	r16,4(sp)
 c0184b8:	d9000015 	stw	r4,0(sp)
 c0184bc:	2839883a 	mov	fp,r5
 c0184c0:	04800044 	movi	r18,1
 c0184c4:	057fffc4 	movi	r21,-1
 c0184c8:	008300b4 	movhi	r2,3074
 c0184cc:	10aac704 	addi	r2,r2,-21732
 c0184d0:	12000017 	ldw	r8,0(r2)
 c0184d4:	45005217 	ldw	r20,328(r8)
 c0184d8:	44c05204 	addi	r19,r8,328
 c0184dc:	a0001c26 	beq	r20,zero,c018550 <__call_exitprocs+0xc4>
 c0184e0:	a0800117 	ldw	r2,4(r20)
 c0184e4:	15ffffc4 	addi	r23,r2,-1
 c0184e8:	b8000d16 	blt	r23,zero,c018520 <__call_exitprocs+0x94>
 c0184ec:	14000044 	addi	r16,r2,1
 c0184f0:	8421883a 	add	r16,r16,r16
 c0184f4:	8421883a 	add	r16,r16,r16
 c0184f8:	84402004 	addi	r17,r16,128
 c0184fc:	a463883a 	add	r17,r20,r17
 c018500:	a421883a 	add	r16,r20,r16
 c018504:	e0001e26 	beq	fp,zero,c018580 <__call_exitprocs+0xf4>
 c018508:	80804017 	ldw	r2,256(r16)
 c01850c:	e0801c26 	beq	fp,r2,c018580 <__call_exitprocs+0xf4>
 c018510:	bdffffc4 	addi	r23,r23,-1
 c018514:	843fff04 	addi	r16,r16,-4
 c018518:	8c7fff04 	addi	r17,r17,-4
 c01851c:	bd7ff91e 	bne	r23,r21,c018504 <__alt_data_end+0xfc018504>
 c018520:	00830034 	movhi	r2,3072
 c018524:	10932e04 	addi	r2,r2,19640
 c018528:	10000926 	beq	r2,zero,c018550 <__call_exitprocs+0xc4>
 c01852c:	a0800117 	ldw	r2,4(r20)
 c018530:	1000301e 	bne	r2,zero,c0185f4 <__call_exitprocs+0x168>
 c018534:	a0800017 	ldw	r2,0(r20)
 c018538:	10003226 	beq	r2,zero,c018604 <__call_exitprocs+0x178>
 c01853c:	a009883a 	mov	r4,r20
 c018540:	98800015 	stw	r2,0(r19)
 c018544:	c004cb80 	call	c004cb8 <free>
 c018548:	9d000017 	ldw	r20,0(r19)
 c01854c:	a03fe41e 	bne	r20,zero,c0184e0 <__alt_data_end+0xfc0184e0>
 c018550:	dfc00a17 	ldw	ra,40(sp)
 c018554:	df000917 	ldw	fp,36(sp)
 c018558:	ddc00817 	ldw	r23,32(sp)
 c01855c:	dd800717 	ldw	r22,28(sp)
 c018560:	dd400617 	ldw	r21,24(sp)
 c018564:	dd000517 	ldw	r20,20(sp)
 c018568:	dcc00417 	ldw	r19,16(sp)
 c01856c:	dc800317 	ldw	r18,12(sp)
 c018570:	dc400217 	ldw	r17,8(sp)
 c018574:	dc000117 	ldw	r16,4(sp)
 c018578:	dec00b04 	addi	sp,sp,44
 c01857c:	f800283a 	ret
 c018580:	a0800117 	ldw	r2,4(r20)
 c018584:	80c00017 	ldw	r3,0(r16)
 c018588:	10bfffc4 	addi	r2,r2,-1
 c01858c:	15c01426 	beq	r2,r23,c0185e0 <__call_exitprocs+0x154>
 c018590:	80000015 	stw	zero,0(r16)
 c018594:	183fde26 	beq	r3,zero,c018510 <__alt_data_end+0xfc018510>
 c018598:	95c8983a 	sll	r4,r18,r23
 c01859c:	a0806217 	ldw	r2,392(r20)
 c0185a0:	a5800117 	ldw	r22,4(r20)
 c0185a4:	2084703a 	and	r2,r4,r2
 c0185a8:	10000b26 	beq	r2,zero,c0185d8 <__call_exitprocs+0x14c>
 c0185ac:	a0806317 	ldw	r2,396(r20)
 c0185b0:	2088703a 	and	r4,r4,r2
 c0185b4:	20000c1e 	bne	r4,zero,c0185e8 <__call_exitprocs+0x15c>
 c0185b8:	89400017 	ldw	r5,0(r17)
 c0185bc:	d9000017 	ldw	r4,0(sp)
 c0185c0:	183ee83a 	callr	r3
 c0185c4:	a0800117 	ldw	r2,4(r20)
 c0185c8:	15bfbf1e 	bne	r2,r22,c0184c8 <__alt_data_end+0xfc0184c8>
 c0185cc:	98800017 	ldw	r2,0(r19)
 c0185d0:	153fcf26 	beq	r2,r20,c018510 <__alt_data_end+0xfc018510>
 c0185d4:	003fbc06 	br	c0184c8 <__alt_data_end+0xfc0184c8>
 c0185d8:	183ee83a 	callr	r3
 c0185dc:	003ff906 	br	c0185c4 <__alt_data_end+0xfc0185c4>
 c0185e0:	a5c00115 	stw	r23,4(r20)
 c0185e4:	003feb06 	br	c018594 <__alt_data_end+0xfc018594>
 c0185e8:	89000017 	ldw	r4,0(r17)
 c0185ec:	183ee83a 	callr	r3
 c0185f0:	003ff406 	br	c0185c4 <__alt_data_end+0xfc0185c4>
 c0185f4:	a0800017 	ldw	r2,0(r20)
 c0185f8:	a027883a 	mov	r19,r20
 c0185fc:	1029883a 	mov	r20,r2
 c018600:	003fb606 	br	c0184dc <__alt_data_end+0xfc0184dc>
 c018604:	0005883a 	mov	r2,zero
 c018608:	003ffb06 	br	c0185f8 <__alt_data_end+0xfc0185f8>

0c01860c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 c01860c:	defffd04 	addi	sp,sp,-12
 c018610:	df000215 	stw	fp,8(sp)
 c018614:	df000204 	addi	fp,sp,8
 c018618:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 c01861c:	0001883a 	nop
 c018620:	e0bfff17 	ldw	r2,-4(fp)
 c018624:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 c018628:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 c01862c:	10000226 	beq	r2,zero,c018638 <_exit+0x2c>
    ALT_SIM_FAIL();
 c018630:	002af070 	cmpltui	zero,zero,43969
 c018634:	00000106 	br	c01863c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 c018638:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 c01863c:	003fff06 	br	c01863c <__alt_data_end+0xfc01863c>
